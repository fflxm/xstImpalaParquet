//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This is a generated file, DO NOT EDIT IT.
// To add new functions, see be/src/codegen/gen_ir_descriptions.py.

#ifndef IMPALA_IR_FUNCTIONS_H
#define IMPALA_IR_FUNCTIONS_H

namespace impala {

class IRFunction {
 public:
  enum Type {
    FN_START = 0,
    AGG_FN_EVALUATOR_INPUT_EVALUATORS = 0,
    AGG_FN_EVALUATOR_AGG_FN_CTX = 1,
    GROUPING_AGG_ADD_BATCH_IMPL = 2,
    NON_GROUPING_AGG_ADD_BATCH_IMPL = 3,
    GROUPING_AGG_ADD_BATCH_STREAMING_IMPL = 4,
    AVG_UPDATE_BIGINT = 5,
    AVG_UPDATE_DOUBLE = 6,
    AVG_UPDATE_DATE = 7,
    AVG_UPDATE_TIMESTAMP = 8,
    AVG_UPDATE_DECIMAL = 9,
    AVG_MERGE = 10,
    AVG_MERGE_DECIMAL = 11,
    CODEGEN_ANYVAL_STRING_VAL_EQ = 12,
    CODEGEN_ANYVAL_STRING_VALUE_EQ = 13,
    CODEGEN_ANYVAL_TIMESTAMP_VAL_EQ = 14,
    CODEGEN_ANYVAL_TIMESTAMP_VALUE_EQ = 15,
    HASH_CRC = 16,
    HASH_MURMUR = 17,
    PHJ_PROCESS_BUILD_BATCH = 18,
    PHJ_PROCESS_PROBE_BATCH_INNER_JOIN = 19,
    PHJ_PROCESS_PROBE_BATCH_LEFT_OUTER_JOIN = 20,
    PHJ_PROCESS_PROBE_BATCH_LEFT_SEMI_JOIN = 21,
    PHJ_PROCESS_PROBE_BATCH_LEFT_ANTI_JOIN = 22,
    PHJ_PROCESS_PROBE_BATCH_NULL_AWARE_LEFT_ANTI_JOIN = 23,
    PHJ_PROCESS_PROBE_BATCH_RIGHT_OUTER_JOIN = 24,
    PHJ_PROCESS_PROBE_BATCH_RIGHT_SEMI_JOIN = 25,
    PHJ_PROCESS_PROBE_BATCH_RIGHT_ANTI_JOIN = 26,
    PHJ_PROCESS_PROBE_BATCH_FULL_OUTER_JOIN = 27,
    PHJ_INSERT_BATCH = 28,
    HASH_TABLE_GET_HASH_SEED = 29,
    HASH_TABLE_GET_BUILD_EXPR_EVALUATORS = 30,
    HASH_TABLE_GET_PROBE_EXPR_EVALUATORS = 31,
    HLL_UPDATE_BOOLEAN = 32,
    HLL_UPDATE_TINYINT = 33,
    HLL_UPDATE_SMALLINT = 34,
    HLL_UPDATE_INT = 35,
    HLL_UPDATE_BIGINT = 36,
    HLL_UPDATE_FLOAT = 37,
    HLL_UPDATE_DOUBLE = 38,
    HLL_UPDATE_STRING = 39,
    HLL_UPDATE_TIMESTAMP = 40,
    HLL_UPDATE_DECIMAL = 41,
    HLL_UPDATE_DATE = 42,
    HLL_MERGE = 43,
    DECODE_AVRO_DATA = 44,
    READ_UNION_TYPE = 45,
    READ_AVRO_BOOLEAN = 46,
    READ_AVRO_DATE = 47,
    READ_AVRO_INT32 = 48,
    READ_AVRO_INT64 = 49,
    READ_AVRO_FLOAT = 50,
    READ_AVRO_DOUBLE = 51,
    READ_AVRO_STRING = 52,
    READ_AVRO_VARCHAR = 53,
    READ_AVRO_CHAR = 54,
    READ_AVRO_DECIMAL = 55,
    HDFS_SCANNER_GET_CONJUNCT_EVALUATOR = 56,
    HDFS_SCANNER_INIT_TUPLE = 57,
    HDFS_SCANNER_WRITE_ALIGNED_TUPLES = 58,
    PROCESS_SCRATCH_BATCH = 59,
    HDFS_SCANNER_EVAL_RUNTIME_FILTER = 60,
    HDFS_SCANNER_TEXT_CONVERTER_WRITE_SLOT_INTERPRETED_IR = 61,
    STRING_TO_BOOL = 62,
    STRING_TO_INT8 = 63,
    STRING_TO_INT16 = 64,
    STRING_TO_INT32 = 65,
    STRING_TO_INT64 = 66,
    STRING_TO_FLOAT = 67,
    STRING_TO_DOUBLE = 68,
    STRING_TO_TIMESTAMP = 69,
    STRING_TO_DECIMAL4 = 70,
    STRING_TO_DECIMAL8 = 71,
    STRING_TO_DECIMAL16 = 72,
    STRING_TO_DATE = 73,
    IS_NULL_STRING = 74,
    GENERIC_IS_NULL_STRING = 75,
    RAW_VALUE_COMPARE = 76,
    RAW_VALUE_GET_HASH_VALUE_FAST_HASH = 77,
    RAW_VALUE_GET_HASH_VALUE_FAST_HASH32 = 78,
    TOPN_NODE_INSERT_BATCH_UNPARTITIONED = 79,
    TOPN_NODE_INSERT_BATCH_PARTITIONED = 80,
    MEMPOOL_ALLOCATE = 81,
    MEMPOOL_CHECKED_ALLOCATE = 82,
    RUNTIME_FILTER_EVAL = 83,
    TUPLE_COPY_STRINGS = 84,
    UNION_MATERIALIZE_BATCH = 85,
    BLOOM_FILTER_INSERT = 86,
    SELECT_NODE_COPY_ROWS = 87,
    BOOL_MIN_MAX_FILTER_INSERT = 88,
    TINYINT_MIN_MAX_FILTER_INSERT = 89,
    SMALLINT_MIN_MAX_FILTER_INSERT = 90,
    INT_MIN_MAX_FILTER_INSERT = 91,
    BIGINT_MIN_MAX_FILTER_INSERT = 92,
    FLOAT_MIN_MAX_FILTER_INSERT = 93,
    DOUBLE_MIN_MAX_FILTER_INSERT = 94,
    STRING_MIN_MAX_FILTER_INSERT = 95,
    TIMESTAMP_MIN_MAX_FILTER_INSERT = 96,
    TUPLE_ROW_GET_TUPLE_IS_NULL = 97,
    DATE_MIN_MAX_FILTER_INSERT = 98,
    DECIMAL_MIN_MAX_FILTER_INSERT4 = 99,
    DECIMAL_MIN_MAX_FILTER_INSERT8 = 100,
    DECIMAL_MIN_MAX_FILTER_INSERT16 = 101,
    KRPC_DSS_GET_PART_EXPR_EVAL = 102,
    KRPC_DSS_HASH_AND_ADD_ROWS = 103,
    GET_FUNCTION_CTX = 104,
    GET_JNI_CONTEXT = 105,
    JNI_CTX_SET_INPUT_NULL_BUFF_ELEM = 106,
    JNI_CTX_INPUT_VAL_BUFF_AT_OFFSET = 107,
    HIVE_UDF_CALL_CALL_JAVA = 108,
    BOOL_MIN_MAX_FILTER_ALWAYSTRUE = 109,
    TINYINT_MIN_MAX_FILTER_ALWAYSTRUE = 110,
    SMALLINT_MIN_MAX_FILTER_ALWAYSTRUE = 111,
    INT_MIN_MAX_FILTER_ALWAYSTRUE = 112,
    BIGINT_MIN_MAX_FILTER_ALWAYSTRUE = 113,
    FLOAT_MIN_MAX_FILTER_ALWAYSTRUE = 114,
    DOUBLE_MIN_MAX_FILTER_ALWAYSTRUE = 115,
    STRING_MIN_MAX_FILTER_ALWAYSTRUE = 116,
    TIMESTAMP_MIN_MAX_FILTER_ALWAYSTRUE = 117,
    DATE_MIN_MAX_FILTER_ALWAYSTRUE = 118,
    DECIMAL_MIN_MAX_FILTER_ALWAYSTRUE = 119,
    SET_KUDU_PARTIAL_ROW_AND_PARTITIONER = 120,
    WRITE_KUDU_VALUE = 121,
    GET_KUDU_PARTITION_ROW = 122,
    TUPLE_SORTER_SORT_HELPER = 123,
    FN_END = 124
  };
};

}

#endif
