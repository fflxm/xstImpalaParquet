/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RuntimeProfile_TYPES_TCC
#define RuntimeProfile_TYPES_TCC

#include "ExecStats_types.tcc"
#include "Metrics_types.tcc"
#include "Types_types.tcc"
#include "RuntimeProfile_types.h"

namespace impala {

template <class Protocol_>
uint32_t TCounter::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_unit = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->unit = ( ::impala::TUnit::type)ecast0;
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TCounter::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TCounter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TAggCounter::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_unit = false;
  bool isset_has_value = false;
  bool isset_values = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->unit = ( ::impala::TUnit::type)ecast5;
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->has_value.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->has_value.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readBool(this->has_value[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          isset_has_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->values.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += iprot->readI64(this->values[_i15]);
            }
            xfer += iprot->readListEnd();
          }
          isset_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TAggCounter::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAggCounter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_value", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->has_value.size()));
    std::vector<bool> ::const_iterator _iter16;
    for (_iter16 = this->has_value.begin(); _iter16 != this->has_value.end(); ++_iter16)
    {
      xfer += oprot->writeBool((*_iter16));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->values.size()));
    std::vector<int64_t> ::const_iterator _iter17;
    for (_iter17 = this->values.begin(); _iter17 != this->values.end(); ++_iter17)
    {
      xfer += oprot->writeI64((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TEventSequence::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_timestamps = false;
  bool isset_labels = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->timestamps.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->timestamps.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += iprot->readI64(this->timestamps[_i26]);
            }
            xfer += iprot->readListEnd();
          }
          isset_timestamps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->labels.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->labels.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += iprot->readString(this->labels[_i31]);
            }
            xfer += iprot->readListEnd();
          }
          isset_labels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timestamps)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_labels)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TEventSequence::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TEventSequence");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamps", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->timestamps.size()));
    std::vector<int64_t> ::const_iterator _iter32;
    for (_iter32 = this->timestamps.begin(); _iter32 != this->timestamps.end(); ++_iter32)
    {
      xfer += oprot->writeI64((*_iter32));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("labels", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->labels.size()));
    std::vector<std::string> ::const_iterator _iter33;
    for (_iter33 = this->labels.begin(); _iter33 != this->labels.end(); ++_iter33)
    {
      xfer += oprot->writeString((*_iter33));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TAggEventSequence::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_label_dict = false;
  bool isset_label_idxs = false;
  bool isset_timestamps = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->label_dict.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _etype41;
            xfer += iprot->readListBegin(_etype41, _size38);
            this->label_dict.resize(_size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              xfer += iprot->readString(this->label_dict[_i42]);
            }
            xfer += iprot->readListEnd();
          }
          isset_label_dict = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->label_idxs.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _etype46;
            xfer += iprot->readListBegin(_etype46, _size43);
            this->label_idxs.resize(_size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              {
                this->label_idxs[_i47].clear();
                uint32_t _size48;
                ::apache::thrift::protocol::TType _etype51;
                xfer += iprot->readListBegin(_etype51, _size48);
                this->label_idxs[_i47].resize(_size48);
                uint32_t _i52;
                for (_i52 = 0; _i52 < _size48; ++_i52)
                {
                  xfer += iprot->readI32(this->label_idxs[_i47][_i52]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          isset_label_idxs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->timestamps.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _etype56;
            xfer += iprot->readListBegin(_etype56, _size53);
            this->timestamps.resize(_size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              {
                this->timestamps[_i57].clear();
                uint32_t _size58;
                ::apache::thrift::protocol::TType _etype61;
                xfer += iprot->readListBegin(_etype61, _size58);
                this->timestamps[_i57].resize(_size58);
                uint32_t _i62;
                for (_i62 = 0; _i62 < _size58; ++_i62)
                {
                  xfer += iprot->readI64(this->timestamps[_i57][_i62]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          isset_timestamps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_label_dict)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_label_idxs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timestamps)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TAggEventSequence::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAggEventSequence");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label_dict", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->label_dict.size()));
    std::vector<std::string> ::const_iterator _iter63;
    for (_iter63 = this->label_dict.begin(); _iter63 != this->label_dict.end(); ++_iter63)
    {
      xfer += oprot->writeString((*_iter63));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label_idxs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->label_idxs.size()));
    std::vector<std::vector<int32_t> > ::const_iterator _iter64;
    for (_iter64 = this->label_idxs.begin(); _iter64 != this->label_idxs.end(); ++_iter64)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*_iter64).size()));
        std::vector<int32_t> ::const_iterator _iter65;
        for (_iter65 = (*_iter64).begin(); _iter65 != (*_iter64).end(); ++_iter65)
        {
          xfer += oprot->writeI32((*_iter65));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamps", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->timestamps.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter66;
    for (_iter66 = this->timestamps.begin(); _iter66 != this->timestamps.end(); ++_iter66)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter66).size()));
        std::vector<int64_t> ::const_iterator _iter67;
        for (_iter67 = (*_iter66).begin(); _iter67 != (*_iter66).end(); ++_iter67)
        {
          xfer += oprot->writeI64((*_iter67));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TTimeSeriesCounter::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_unit = false;
  bool isset_period_ms = false;
  bool isset_values = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast72;
          xfer += iprot->readI32(ecast72);
          this->unit = ( ::impala::TUnit::type)ecast72;
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->period_ms);
          isset_period_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _etype76;
            xfer += iprot->readListBegin(_etype76, _size73);
            this->values.resize(_size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              xfer += iprot->readI64(this->values[_i77]);
            }
            xfer += iprot->readListEnd();
          }
          isset_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start_index);
          this->__isset.start_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_period_ms)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TTimeSeriesCounter::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TTimeSeriesCounter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("period_ms", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->period_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->values.size()));
    std::vector<int64_t> ::const_iterator _iter78;
    for (_iter78 = this->values.begin(); _iter78 != this->values.end(); ++_iter78)
    {
      xfer += oprot->writeI64((*_iter78));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.start_index) {
    xfer += oprot->writeFieldBegin("start_index", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->start_index);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TAggTimeSeriesCounter::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_unit = false;
  bool isset_period_ms = false;
  bool isset_values = false;
  bool isset_start_index = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast83;
          xfer += iprot->readI32(ecast83);
          this->unit = ( ::impala::TUnit::type)ecast83;
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->period_ms.clear();
            uint32_t _size84;
            ::apache::thrift::protocol::TType _etype87;
            xfer += iprot->readListBegin(_etype87, _size84);
            this->period_ms.resize(_size84);
            uint32_t _i88;
            for (_i88 = 0; _i88 < _size84; ++_i88)
            {
              xfer += iprot->readI32(this->period_ms[_i88]);
            }
            xfer += iprot->readListEnd();
          }
          isset_period_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size89;
            ::apache::thrift::protocol::TType _etype92;
            xfer += iprot->readListBegin(_etype92, _size89);
            this->values.resize(_size89);
            uint32_t _i93;
            for (_i93 = 0; _i93 < _size89; ++_i93)
            {
              {
                this->values[_i93].clear();
                uint32_t _size94;
                ::apache::thrift::protocol::TType _etype97;
                xfer += iprot->readListBegin(_etype97, _size94);
                this->values[_i93].resize(_size94);
                uint32_t _i98;
                for (_i98 = 0; _i98 < _size94; ++_i98)
                {
                  xfer += iprot->readI64(this->values[_i93][_i98]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          isset_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->start_index.clear();
            uint32_t _size99;
            ::apache::thrift::protocol::TType _etype102;
            xfer += iprot->readListBegin(_etype102, _size99);
            this->start_index.resize(_size99);
            uint32_t _i103;
            for (_i103 = 0; _i103 < _size99; ++_i103)
            {
              xfer += iprot->readI64(this->start_index[_i103]);
            }
            xfer += iprot->readListEnd();
          }
          isset_start_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_period_ms)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_index)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TAggTimeSeriesCounter::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAggTimeSeriesCounter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("period_ms", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->period_ms.size()));
    std::vector<int32_t> ::const_iterator _iter104;
    for (_iter104 = this->period_ms.begin(); _iter104 != this->period_ms.end(); ++_iter104)
    {
      xfer += oprot->writeI32((*_iter104));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->values.size()));
    std::vector<std::vector<int64_t> > ::const_iterator _iter105;
    for (_iter105 = this->values.begin(); _iter105 != this->values.end(); ++_iter105)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>((*_iter105).size()));
        std::vector<int64_t> ::const_iterator _iter106;
        for (_iter106 = (*_iter105).begin(); _iter106 != (*_iter105).end(); ++_iter106)
        {
          xfer += oprot->writeI64((*_iter106));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_index", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->start_index.size()));
    std::vector<int64_t> ::const_iterator _iter107;
    for (_iter107 = this->start_index.begin(); _iter107 != this->start_index.end(); ++_iter107)
    {
      xfer += oprot->writeI64((*_iter107));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TSummaryStatsCounter::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_unit = false;
  bool isset_sum = false;
  bool isset_total_num_values = false;
  bool isset_min_value = false;
  bool isset_max_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast112;
          xfer += iprot->readI32(ecast112);
          this->unit = ( ::impala::TUnit::type)ecast112;
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sum);
          isset_sum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->total_num_values);
          isset_total_num_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->min_value);
          isset_min_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max_value);
          isset_max_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_total_num_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_min_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TSummaryStatsCounter::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TSummaryStatsCounter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sum", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->sum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_num_values", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->total_num_values);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_value", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->min_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_value", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->max_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TAggSummaryStatsCounter::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_unit = false;
  bool isset_has_value = false;
  bool isset_sum = false;
  bool isset_total_num_values = false;
  bool isset_min_value = false;
  bool isset_max_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast117;
          xfer += iprot->readI32(ecast117);
          this->unit = ( ::impala::TUnit::type)ecast117;
          isset_unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->has_value.clear();
            uint32_t _size118;
            ::apache::thrift::protocol::TType _etype121;
            xfer += iprot->readListBegin(_etype121, _size118);
            this->has_value.resize(_size118);
            uint32_t _i122;
            for (_i122 = 0; _i122 < _size118; ++_i122)
            {
              xfer += iprot->readBool(this->has_value[_i122]);
            }
            xfer += iprot->readListEnd();
          }
          isset_has_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sum.clear();
            uint32_t _size123;
            ::apache::thrift::protocol::TType _etype126;
            xfer += iprot->readListBegin(_etype126, _size123);
            this->sum.resize(_size123);
            uint32_t _i127;
            for (_i127 = 0; _i127 < _size123; ++_i127)
            {
              xfer += iprot->readI64(this->sum[_i127]);
            }
            xfer += iprot->readListEnd();
          }
          isset_sum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->total_num_values.clear();
            uint32_t _size128;
            ::apache::thrift::protocol::TType _etype131;
            xfer += iprot->readListBegin(_etype131, _size128);
            this->total_num_values.resize(_size128);
            uint32_t _i132;
            for (_i132 = 0; _i132 < _size128; ++_i132)
            {
              xfer += iprot->readI64(this->total_num_values[_i132]);
            }
            xfer += iprot->readListEnd();
          }
          isset_total_num_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->min_value.clear();
            uint32_t _size133;
            ::apache::thrift::protocol::TType _etype136;
            xfer += iprot->readListBegin(_etype136, _size133);
            this->min_value.resize(_size133);
            uint32_t _i137;
            for (_i137 = 0; _i137 < _size133; ++_i137)
            {
              xfer += iprot->readI64(this->min_value[_i137]);
            }
            xfer += iprot->readListEnd();
          }
          isset_min_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->max_value.clear();
            uint32_t _size138;
            ::apache::thrift::protocol::TType _etype141;
            xfer += iprot->readListBegin(_etype141, _size138);
            this->max_value.resize(_size138);
            uint32_t _i142;
            for (_i142 = 0; _i142 < _size138; ++_i142)
            {
              xfer += iprot->readI64(this->max_value[_i142]);
            }
            xfer += iprot->readListEnd();
          }
          isset_max_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unit)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_has_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sum)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_total_num_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_min_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TAggSummaryStatsCounter::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAggSummaryStatsCounter");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("has_value", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->has_value.size()));
    std::vector<bool> ::const_iterator _iter143;
    for (_iter143 = this->has_value.begin(); _iter143 != this->has_value.end(); ++_iter143)
    {
      xfer += oprot->writeBool((*_iter143));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sum", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->sum.size()));
    std::vector<int64_t> ::const_iterator _iter144;
    for (_iter144 = this->sum.begin(); _iter144 != this->sum.end(); ++_iter144)
    {
      xfer += oprot->writeI64((*_iter144));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_num_values", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->total_num_values.size()));
    std::vector<int64_t> ::const_iterator _iter145;
    for (_iter145 = this->total_num_values.begin(); _iter145 != this->total_num_values.end(); ++_iter145)
    {
      xfer += oprot->writeI64((*_iter145));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_value", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->min_value.size()));
    std::vector<int64_t> ::const_iterator _iter146;
    for (_iter146 = this->min_value.begin(); _iter146 != this->min_value.end(); ++_iter146)
    {
      xfer += oprot->writeI64((*_iter146));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_value", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->max_value.size()));
    std::vector<int64_t> ::const_iterator _iter147;
    for (_iter147 = this->max_value.begin(); _iter147 != this->max_value.end(); ++_iter147)
    {
      xfer += oprot->writeI64((*_iter147));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TRuntimeProfileNodeMetadata::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->plan_node_id);
          this->__isset.plan_node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->data_sink_id);
          this->__isset.data_sink_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t TRuntimeProfileNodeMetadata::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TRuntimeProfileNodeMetadata");

  if (this->__isset.plan_node_id) {
    xfer += oprot->writeFieldBegin("plan_node_id", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->plan_node_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.data_sink_id) {
    xfer += oprot->writeFieldBegin("data_sink_id", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->data_sink_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TAggregatedRuntimeProfileNode::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_instances);
          this->__isset.num_instances = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->input_profiles.clear();
            uint32_t _size156;
            ::apache::thrift::protocol::TType _etype159;
            xfer += iprot->readListBegin(_etype159, _size156);
            this->input_profiles.resize(_size156);
            uint32_t _i160;
            for (_i160 = 0; _i160 < _size156; ++_i160)
            {
              xfer += iprot->readString(this->input_profiles[_i160]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.input_profiles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counters.clear();
            uint32_t _size161;
            ::apache::thrift::protocol::TType _etype164;
            xfer += iprot->readListBegin(_etype164, _size161);
            this->counters.resize(_size161);
            uint32_t _i165;
            for (_i165 = 0; _i165 < _size161; ++_i165)
            {
              xfer += this->counters[_i165].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->info_strings.clear();
            uint32_t _size166;
            ::apache::thrift::protocol::TType _ktype167;
            ::apache::thrift::protocol::TType _vtype168;
            xfer += iprot->readMapBegin(_ktype167, _vtype168, _size166);
            uint32_t _i170;
            for (_i170 = 0; _i170 < _size166; ++_i170)
            {
              std::string _key171;
              xfer += iprot->readString(_key171);
              std::map<std::string, std::vector<int32_t> > & _val172 = this->info_strings[_key171];
              {
                _val172.clear();
                uint32_t _size173;
                ::apache::thrift::protocol::TType _ktype174;
                ::apache::thrift::protocol::TType _vtype175;
                xfer += iprot->readMapBegin(_ktype174, _vtype175, _size173);
                uint32_t _i177;
                for (_i177 = 0; _i177 < _size173; ++_i177)
                {
                  std::string _key178;
                  xfer += iprot->readString(_key178);
                  std::vector<int32_t> & _val179 = _val172[_key178];
                  {
                    _val179.clear();
                    uint32_t _size180;
                    ::apache::thrift::protocol::TType _etype183;
                    xfer += iprot->readListBegin(_etype183, _size180);
                    _val179.resize(_size180);
                    uint32_t _i184;
                    for (_i184 = 0; _i184 < _size180; ++_i184)
                    {
                      xfer += iprot->readI32(_val179[_i184]);
                    }
                    xfer += iprot->readListEnd();
                  }
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.info_strings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->summary_stats_counters.clear();
            uint32_t _size185;
            ::apache::thrift::protocol::TType _etype188;
            xfer += iprot->readListBegin(_etype188, _size185);
            this->summary_stats_counters.resize(_size185);
            uint32_t _i189;
            for (_i189 = 0; _i189 < _size185; ++_i189)
            {
              xfer += this->summary_stats_counters[_i189].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.summary_stats_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->event_sequences.clear();
            uint32_t _size190;
            ::apache::thrift::protocol::TType _etype193;
            xfer += iprot->readListBegin(_etype193, _size190);
            this->event_sequences.resize(_size190);
            uint32_t _i194;
            for (_i194 = 0; _i194 < _size190; ++_i194)
            {
              xfer += this->event_sequences[_i194].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.event_sequences = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->time_series_counters.clear();
            uint32_t _size195;
            ::apache::thrift::protocol::TType _etype198;
            xfer += iprot->readListBegin(_etype198, _size195);
            this->time_series_counters.resize(_size195);
            uint32_t _i199;
            for (_i199 = 0; _i199 < _size195; ++_i199)
            {
              xfer += this->time_series_counters[_i199].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.time_series_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t TAggregatedRuntimeProfileNode::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TAggregatedRuntimeProfileNode");

  if (this->__isset.num_instances) {
    xfer += oprot->writeFieldBegin("num_instances", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->num_instances);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.input_profiles) {
    xfer += oprot->writeFieldBegin("input_profiles", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->input_profiles.size()));
      std::vector<std::string> ::const_iterator _iter200;
      for (_iter200 = this->input_profiles.begin(); _iter200 != this->input_profiles.end(); ++_iter200)
      {
        xfer += oprot->writeString((*_iter200));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.counters) {
    xfer += oprot->writeFieldBegin("counters", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->counters.size()));
      std::vector<TAggCounter> ::const_iterator _iter201;
      for (_iter201 = this->counters.begin(); _iter201 != this->counters.end(); ++_iter201)
      {
        xfer += (*_iter201).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.info_strings) {
    xfer += oprot->writeFieldBegin("info_strings", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->info_strings.size()));
      std::map<std::string, std::map<std::string, std::vector<int32_t> > > ::const_iterator _iter202;
      for (_iter202 = this->info_strings.begin(); _iter202 != this->info_strings.end(); ++_iter202)
      {
        xfer += oprot->writeString(_iter202->first);
        {
          xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(_iter202->second.size()));
          std::map<std::string, std::vector<int32_t> > ::const_iterator _iter203;
          for (_iter203 = _iter202->second.begin(); _iter203 != _iter202->second.end(); ++_iter203)
          {
            xfer += oprot->writeString(_iter203->first);
            {
              xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(_iter203->second.size()));
              std::vector<int32_t> ::const_iterator _iter204;
              for (_iter204 = _iter203->second.begin(); _iter204 != _iter203->second.end(); ++_iter204)
              {
                xfer += oprot->writeI32((*_iter204));
              }
              xfer += oprot->writeListEnd();
            }
          }
          xfer += oprot->writeMapEnd();
        }
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.summary_stats_counters) {
    xfer += oprot->writeFieldBegin("summary_stats_counters", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->summary_stats_counters.size()));
      std::vector<TAggSummaryStatsCounter> ::const_iterator _iter205;
      for (_iter205 = this->summary_stats_counters.begin(); _iter205 != this->summary_stats_counters.end(); ++_iter205)
      {
        xfer += (*_iter205).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.event_sequences) {
    xfer += oprot->writeFieldBegin("event_sequences", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->event_sequences.size()));
      std::vector<TAggEventSequence> ::const_iterator _iter206;
      for (_iter206 = this->event_sequences.begin(); _iter206 != this->event_sequences.end(); ++_iter206)
      {
        xfer += (*_iter206).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.time_series_counters) {
    xfer += oprot->writeFieldBegin("time_series_counters", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->time_series_counters.size()));
      std::vector<TAggTimeSeriesCounter> ::const_iterator _iter207;
      for (_iter207 = this->time_series_counters.begin(); _iter207 != this->time_series_counters.end(); ++_iter207)
      {
        xfer += (*_iter207).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TRuntimeProfileNode::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_num_children = false;
  bool isset_counters = false;
  bool isset_metadata = false;
  bool isset_indent = false;
  bool isset_info_strings = false;
  bool isset_info_strings_display_order = false;
  bool isset_child_counters_map = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_children);
          isset_num_children = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counters.clear();
            uint32_t _size212;
            ::apache::thrift::protocol::TType _etype215;
            xfer += iprot->readListBegin(_etype215, _size212);
            this->counters.resize(_size212);
            uint32_t _i216;
            for (_i216 = 0; _i216 < _size212; ++_i216)
            {
              xfer += this->counters[_i216].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->metadata);
          isset_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->indent);
          isset_indent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->info_strings.clear();
            uint32_t _size217;
            ::apache::thrift::protocol::TType _ktype218;
            ::apache::thrift::protocol::TType _vtype219;
            xfer += iprot->readMapBegin(_ktype218, _vtype219, _size217);
            uint32_t _i221;
            for (_i221 = 0; _i221 < _size217; ++_i221)
            {
              std::string _key222;
              xfer += iprot->readString(_key222);
              std::string& _val223 = this->info_strings[_key222];
              xfer += iprot->readString(_val223);
            }
            xfer += iprot->readMapEnd();
          }
          isset_info_strings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->info_strings_display_order.clear();
            uint32_t _size224;
            ::apache::thrift::protocol::TType _etype227;
            xfer += iprot->readListBegin(_etype227, _size224);
            this->info_strings_display_order.resize(_size224);
            uint32_t _i228;
            for (_i228 = 0; _i228 < _size224; ++_i228)
            {
              xfer += iprot->readString(this->info_strings_display_order[_i228]);
            }
            xfer += iprot->readListEnd();
          }
          isset_info_strings_display_order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->child_counters_map.clear();
            uint32_t _size229;
            ::apache::thrift::protocol::TType _ktype230;
            ::apache::thrift::protocol::TType _vtype231;
            xfer += iprot->readMapBegin(_ktype230, _vtype231, _size229);
            uint32_t _i233;
            for (_i233 = 0; _i233 < _size229; ++_i233)
            {
              std::string _key234;
              xfer += iprot->readString(_key234);
              std::set<std::string> & _val235 = this->child_counters_map[_key234];
              {
                _val235.clear();
                uint32_t _size236;
                ::apache::thrift::protocol::TType _etype239;
                xfer += iprot->readSetBegin(_etype239, _size236);
                uint32_t _i240;
                for (_i240 = 0; _i240 < _size236; ++_i240)
                {
                  std::string _elem241;
                  xfer += iprot->readString(_elem241);
                  _val235.insert(_elem241);
                }
                xfer += iprot->readSetEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_child_counters_map = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->event_sequences.clear();
            uint32_t _size242;
            ::apache::thrift::protocol::TType _etype245;
            xfer += iprot->readListBegin(_etype245, _size242);
            this->event_sequences.resize(_size242);
            uint32_t _i246;
            for (_i246 = 0; _i246 < _size242; ++_i246)
            {
              xfer += this->event_sequences[_i246].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.event_sequences = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->time_series_counters.clear();
            uint32_t _size247;
            ::apache::thrift::protocol::TType _etype250;
            xfer += iprot->readListBegin(_etype250, _size247);
            this->time_series_counters.resize(_size247);
            uint32_t _i251;
            for (_i251 = 0; _i251 < _size247; ++_i251)
            {
              xfer += this->time_series_counters[_i251].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.time_series_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->summary_stats_counters.clear();
            uint32_t _size252;
            ::apache::thrift::protocol::TType _etype255;
            xfer += iprot->readListBegin(_etype255, _size252);
            this->summary_stats_counters.resize(_size252);
            uint32_t _i256;
            for (_i256 = 0; _i256 < _size252; ++_i256)
            {
              xfer += this->summary_stats_counters[_i256].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.summary_stats_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->node_metadata.read(iprot);
          this->__isset.node_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aggregated.read(iprot);
          this->__isset.aggregated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num_children)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_counters)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_metadata)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_indent)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_info_strings)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_info_strings_display_order)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_child_counters_map)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TRuntimeProfileNode::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TRuntimeProfileNode");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_children", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->num_children);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counters", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->counters.size()));
    std::vector<TCounter> ::const_iterator _iter257;
    for (_iter257 = this->counters.begin(); _iter257 != this->counters.end(); ++_iter257)
    {
      xfer += (*_iter257).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->metadata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("indent", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->indent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info_strings", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->info_strings.size()));
    std::map<std::string, std::string> ::const_iterator _iter258;
    for (_iter258 = this->info_strings.begin(); _iter258 != this->info_strings.end(); ++_iter258)
    {
      xfer += oprot->writeString(_iter258->first);
      xfer += oprot->writeString(_iter258->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info_strings_display_order", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->info_strings_display_order.size()));
    std::vector<std::string> ::const_iterator _iter259;
    for (_iter259 = this->info_strings_display_order.begin(); _iter259 != this->info_strings_display_order.end(); ++_iter259)
    {
      xfer += oprot->writeString((*_iter259));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("child_counters_map", ::apache::thrift::protocol::T_MAP, 8);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(this->child_counters_map.size()));
    std::map<std::string, std::set<std::string> > ::const_iterator _iter260;
    for (_iter260 = this->child_counters_map.begin(); _iter260 != this->child_counters_map.end(); ++_iter260)
    {
      xfer += oprot->writeString(_iter260->first);
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(_iter260->second.size()));
        std::set<std::string> ::const_iterator _iter261;
        for (_iter261 = _iter260->second.begin(); _iter261 != _iter260->second.end(); ++_iter261)
        {
          xfer += oprot->writeString((*_iter261));
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.event_sequences) {
    xfer += oprot->writeFieldBegin("event_sequences", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->event_sequences.size()));
      std::vector<TEventSequence> ::const_iterator _iter262;
      for (_iter262 = this->event_sequences.begin(); _iter262 != this->event_sequences.end(); ++_iter262)
      {
        xfer += (*_iter262).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.time_series_counters) {
    xfer += oprot->writeFieldBegin("time_series_counters", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->time_series_counters.size()));
      std::vector<TTimeSeriesCounter> ::const_iterator _iter263;
      for (_iter263 = this->time_series_counters.begin(); _iter263 != this->time_series_counters.end(); ++_iter263)
      {
        xfer += (*_iter263).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.summary_stats_counters) {
    xfer += oprot->writeFieldBegin("summary_stats_counters", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->summary_stats_counters.size()));
      std::vector<TSummaryStatsCounter> ::const_iterator _iter264;
      for (_iter264 = this->summary_stats_counters.begin(); _iter264 != this->summary_stats_counters.end(); ++_iter264)
      {
        xfer += (*_iter264).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.node_metadata) {
    xfer += oprot->writeFieldBegin("node_metadata", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->node_metadata.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.aggregated) {
    xfer += oprot->writeFieldBegin("aggregated", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->aggregated.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TRuntimeProfileTree::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_nodes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size269;
            ::apache::thrift::protocol::TType _etype272;
            xfer += iprot->readListBegin(_etype272, _size269);
            this->nodes.resize(_size269);
            uint32_t _i273;
            for (_i273 = 0; _i273 < _size269; ++_i273)
            {
              xfer += this->nodes[_i273].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->exec_summary.read(iprot);
          this->__isset.exec_summary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->profile_version);
          this->__isset.profile_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_nodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TRuntimeProfileTree::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TRuntimeProfileTree");

  xfer += oprot->writeFieldBegin("nodes", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->nodes.size()));
    std::vector<TRuntimeProfileNode> ::const_iterator _iter274;
    for (_iter274 = this->nodes.begin(); _iter274 != this->nodes.end(); ++_iter274)
    {
      xfer += (*_iter274).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.exec_summary) {
    xfer += oprot->writeFieldBegin("exec_summary", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->exec_summary.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.profile_version) {
    xfer += oprot->writeFieldBegin("profile_version", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->profile_version);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TRuntimeProfileForest::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_profile_trees = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->profile_trees.clear();
            uint32_t _size279;
            ::apache::thrift::protocol::TType _etype282;
            xfer += iprot->readListBegin(_etype282, _size279);
            this->profile_trees.resize(_size279);
            uint32_t _i283;
            for (_i283 = 0; _i283 < _size279; ++_i283)
            {
              xfer += this->profile_trees[_i283].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_profile_trees = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->host_profile.read(iprot);
          this->__isset.host_profile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_profile_trees)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TRuntimeProfileForest::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TRuntimeProfileForest");

  xfer += oprot->writeFieldBegin("profile_trees", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->profile_trees.size()));
    std::vector<TRuntimeProfileTree> ::const_iterator _iter284;
    for (_iter284 = this->profile_trees.begin(); _iter284 != this->profile_trees.end(); ++_iter284)
    {
      xfer += (*_iter284).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.host_profile) {
    xfer += oprot->writeFieldBegin("host_profile", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->host_profile.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace

#endif
