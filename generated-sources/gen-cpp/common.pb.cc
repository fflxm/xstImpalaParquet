// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "kudu/util/protobuf-annotations.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace impala {
class NetworkAddressPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkAddressPB> _instance;
} _NetworkAddressPB_default_instance_;
class StatusPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusPB> _instance;
} _StatusPB_default_instance_;
class UniqueIdPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniqueIdPB> _instance;
} _UniqueIdPB_default_instance_;
class ColumnValuePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColumnValuePB> _instance;
} _ColumnValuePB_default_instance_;
}  // namespace impala
static void InitDefaultsscc_info_ColumnValuePB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ColumnValuePB_default_instance_;
    new (ptr) ::impala::ColumnValuePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColumnValuePB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColumnValuePB_common_2eproto}, {}};

static void InitDefaultsscc_info_NetworkAddressPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_NetworkAddressPB_default_instance_;
    new (ptr) ::impala::NetworkAddressPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkAddressPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkAddressPB_common_2eproto}, {}};

static void InitDefaultsscc_info_StatusPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_StatusPB_default_instance_;
    new (ptr) ::impala::StatusPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusPB_common_2eproto}, {}};

static void InitDefaultsscc_info_UniqueIdPB_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_UniqueIdPB_default_instance_;
    new (ptr) ::impala::UniqueIdPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueIdPB_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UniqueIdPB_common_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::impala::NetworkAddressPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::NetworkAddressPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::NetworkAddressPB, hostname_),
  PROTOBUF_FIELD_OFFSET(::impala::NetworkAddressPB, port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::StatusPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::StatusPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::StatusPB, status_code_),
  PROTOBUF_FIELD_OFFSET(::impala::StatusPB, error_msgs_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::impala::UniqueIdPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::UniqueIdPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::UniqueIdPB, hi_),
  PROTOBUF_FIELD_OFFSET(::impala::UniqueIdPB, lo_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, bool_val_),
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, byte_val_),
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, short_val_),
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, int_val_),
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, long_val_),
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, double_val_),
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, string_val_),
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, binary_val_),
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, timestamp_val_),
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, decimal_val_),
  PROTOBUF_FIELD_OFFSET(::impala::ColumnValuePB, date_val_),
  4,
  8,
  9,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::impala::NetworkAddressPB)},
  { 9, 16, sizeof(::impala::StatusPB)},
  { 18, 25, sizeof(::impala::UniqueIdPB)},
  { 27, 43, sizeof(::impala::ColumnValuePB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_NetworkAddressPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_StatusPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_UniqueIdPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ColumnValuePB_default_instance_),
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\006impala\"2\n\020NetworkAddress"
  "PB\022\020\n\010hostname\030\001 \002(\t\022\014\n\004port\030\002 \002(\005\"3\n\010St"
  "atusPB\022\023\n\013status_code\030\001 \001(\005\022\022\n\nerror_msg"
  "s\030\002 \003(\t\"$\n\nUniqueIdPB\022\n\n\002hi\030\001 \002(\006\022\n\n\002lo\030"
  "\002 \002(\006\"\343\001\n\rColumnValuePB\022\020\n\010bool_val\030\001 \001("
  "\010\022\020\n\010byte_val\030\006 \001(\005\022\021\n\tshort_val\030\007 \001(\005\022\017"
  "\n\007int_val\030\002 \001(\005\022\020\n\010long_val\030\003 \001(\003\022\022\n\ndou"
  "ble_val\030\004 \001(\001\022\022\n\nstring_val\030\005 \001(\t\022\022\n\nbin"
  "ary_val\030\010 \001(\t\022\025\n\rtimestamp_val\030\t \001(\t\022\023\n\013"
  "decimal_val\030\n \001(\014\022\020\n\010date_val\030\013 \001(\005*\257\001\n\021"
  "CompressionTypePB\022\010\n\004NONE\020\000\022\013\n\007DEFAULT\020\001"
  "\022\010\n\004GZIP\020\002\022\013\n\007DEFLATE\020\003\022\t\n\005BZIP2\020\004\022\n\n\006SN"
  "APPY\020\005\022\022\n\016SNAPPY_BLOCKED\020\006\022\007\n\003LZO\020\007\022\007\n\003L"
  "Z4\020\010\022\010\n\004ZLIB\020\t\022\010\n\004ZSTD\020\n\022\n\n\006BROTLI\020\013\022\017\n\013"
  "LZ4_BLOCKED\020\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2eproto_sccs[4] = {
  &scc_info_ColumnValuePB_common_2eproto.base,
  &scc_info_NetworkAddressPB_common_2eproto.base,
  &scc_info_StatusPB_common_2eproto.base,
  &scc_info_UniqueIdPB_common_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto = {
  false, false, descriptor_table_protodef_common_2eproto, "common.proto", 573,
  &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_sccs, descriptor_table_common_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_common_2eproto::offsets,
  file_level_metadata_common_2eproto, 4, file_level_enum_descriptors_common_2eproto, file_level_service_descriptors_common_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2eproto)), true);
namespace impala {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionTypePB_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool CompressionTypePB_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NetworkAddressPB::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkAddressPB>()._has_bits_);
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

NetworkAddressPB::NetworkAddressPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.NetworkAddressPB)
}
NetworkAddressPB::NetworkAddressPB(const NetworkAddressPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hostname()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:impala.NetworkAddressPB)
}

void NetworkAddressPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkAddressPB_common_2eproto.base);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

NetworkAddressPB::~NetworkAddressPB() {
  // @@protoc_insertion_point(destructor:impala.NetworkAddressPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkAddressPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkAddressPB::ArenaDtor(void* object) {
  NetworkAddressPB* _this = reinterpret_cast< NetworkAddressPB* >(object);
  (void)_this;
}
void NetworkAddressPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkAddressPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkAddressPB& NetworkAddressPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkAddressPB_common_2eproto.base);
  return *internal_default_instance();
}


void NetworkAddressPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.NetworkAddressPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hostname_.ClearNonDefaultToEmpty();
  }
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkAddressPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.NetworkAddressPB.hostname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkAddressPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.NetworkAddressPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string hostname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.NetworkAddressPB.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.NetworkAddressPB)
  return target;
}

size_t NetworkAddressPB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:impala.NetworkAddressPB)
  size_t total_size = 0;

  if (_internal_has_hostname()) {
    // required string hostname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  if (_internal_has_port()) {
    // required int32 port = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  return total_size;
}
size_t NetworkAddressPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.NetworkAddressPB)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string hostname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());

    // required int32 port = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkAddressPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.NetworkAddressPB)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkAddressPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkAddressPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.NetworkAddressPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.NetworkAddressPB)
    MergeFrom(*source);
  }
}

void NetworkAddressPB::MergeFrom(const NetworkAddressPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.NetworkAddressPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkAddressPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.NetworkAddressPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkAddressPB::CopyFrom(const NetworkAddressPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.NetworkAddressPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkAddressPB::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NetworkAddressPB::InternalSwap(NetworkAddressPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkAddressPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StatusPB::_Internal {
 public:
  using HasBits = decltype(std::declval<StatusPB>()._has_bits_);
  static void set_has_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StatusPB::StatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  error_msgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.StatusPB)
}
StatusPB::StatusPB(const StatusPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      error_msgs_(from.error_msgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:impala.StatusPB)
}

void StatusPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusPB_common_2eproto.base);
  status_code_ = 0;
}

StatusPB::~StatusPB() {
  // @@protoc_insertion_point(destructor:impala.StatusPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatusPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StatusPB::ArenaDtor(void* object) {
  StatusPB* _this = reinterpret_cast< StatusPB* >(object);
  (void)_this;
}
void StatusPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusPB& StatusPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusPB_common_2eproto.base);
  return *internal_default_instance();
}


void StatusPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.StatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msgs_.Clear();
  status_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_status_code(&has_bits);
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string error_msgs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_error_msgs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.StatusPB.error_msgs");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.StatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status_code(), target);
  }

  // repeated string error_msgs = 2;
  for (int i = 0, n = this->_internal_error_msgs_size(); i < n; i++) {
    const auto& s = this->_internal_error_msgs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.StatusPB.error_msgs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.StatusPB)
  return target;
}

size_t StatusPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.StatusPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string error_msgs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(error_msgs_.size());
  for (int i = 0, n = error_msgs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      error_msgs_.Get(i));
  }

  // optional int32 status_code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.StatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.StatusPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.StatusPB)
    MergeFrom(*source);
  }
}

void StatusPB::MergeFrom(const StatusPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.StatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  error_msgs_.MergeFrom(from.error_msgs_);
  if (from._internal_has_status_code()) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void StatusPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.StatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusPB::CopyFrom(const StatusPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.StatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusPB::IsInitialized() const {
  return true;
}

void StatusPB::InternalSwap(StatusPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_msgs_.InternalSwap(&other->error_msgs_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UniqueIdPB::_Internal {
 public:
  using HasBits = decltype(std::declval<UniqueIdPB>()._has_bits_);
  static void set_has_hi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

UniqueIdPB::UniqueIdPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.UniqueIdPB)
}
UniqueIdPB::UniqueIdPB(const UniqueIdPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hi_, &from.hi_,
    static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
    reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
  // @@protoc_insertion_point(copy_constructor:impala.UniqueIdPB)
}

void UniqueIdPB::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
      reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

UniqueIdPB::~UniqueIdPB() {
  // @@protoc_insertion_point(destructor:impala.UniqueIdPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UniqueIdPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UniqueIdPB::ArenaDtor(void* object) {
  UniqueIdPB* _this = reinterpret_cast< UniqueIdPB* >(object);
  (void)_this;
}
void UniqueIdPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UniqueIdPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniqueIdPB& UniqueIdPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UniqueIdPB_common_2eproto.base);
  return *internal_default_instance();
}


void UniqueIdPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.UniqueIdPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lo_) -
        reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniqueIdPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed64 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_hi(&has_bits);
          hi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_lo(&has_bits);
          lo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniqueIdPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.UniqueIdPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 hi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_hi(), target);
  }

  // required fixed64 lo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_lo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.UniqueIdPB)
  return target;
}

size_t UniqueIdPB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:impala.UniqueIdPB)
  size_t total_size = 0;

  if (_internal_has_hi()) {
    // required fixed64 hi = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_lo()) {
    // required fixed64 lo = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t UniqueIdPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.UniqueIdPB)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required fixed64 hi = 1;
    total_size += 1 + 8;

    // required fixed64 lo = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniqueIdPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.UniqueIdPB)
  GOOGLE_DCHECK_NE(&from, this);
  const UniqueIdPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniqueIdPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.UniqueIdPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.UniqueIdPB)
    MergeFrom(*source);
  }
}

void UniqueIdPB::MergeFrom(const UniqueIdPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.UniqueIdPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hi_ = from.hi_;
    }
    if (cached_has_bits & 0x00000002u) {
      lo_ = from.lo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UniqueIdPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.UniqueIdPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueIdPB::CopyFrom(const UniqueIdPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.UniqueIdPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueIdPB::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UniqueIdPB::InternalSwap(UniqueIdPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UniqueIdPB, lo_)
      + sizeof(UniqueIdPB::lo_)
      - PROTOBUF_FIELD_OFFSET(UniqueIdPB, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UniqueIdPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ColumnValuePB::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnValuePB>()._has_bits_);
  static void set_has_bool_val(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_byte_val(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_short_val(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_int_val(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_long_val(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_double_val(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_string_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_binary_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_decimal_val(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_date_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

ColumnValuePB::ColumnValuePB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.ColumnValuePB)
}
ColumnValuePB::ColumnValuePB(const ColumnValuePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_val()) {
    string_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_val(), 
      GetArena());
  }
  binary_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_binary_val()) {
    binary_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_binary_val(), 
      GetArena());
  }
  timestamp_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timestamp_val()) {
    timestamp_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timestamp_val(), 
      GetArena());
  }
  decimal_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_decimal_val()) {
    decimal_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_decimal_val(), 
      GetArena());
  }
  ::memcpy(&bool_val_, &from.bool_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_val_) -
    reinterpret_cast<char*>(&bool_val_)) + sizeof(date_val_));
  // @@protoc_insertion_point(copy_constructor:impala.ColumnValuePB)
}

void ColumnValuePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ColumnValuePB_common_2eproto.base);
  string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binary_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decimal_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bool_val_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&date_val_) -
      reinterpret_cast<char*>(&bool_val_)) + sizeof(date_val_));
}

ColumnValuePB::~ColumnValuePB() {
  // @@protoc_insertion_point(destructor:impala.ColumnValuePB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ColumnValuePB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binary_val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decimal_val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ColumnValuePB::ArenaDtor(void* object) {
  ColumnValuePB* _this = reinterpret_cast< ColumnValuePB* >(object);
  (void)_this;
}
void ColumnValuePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnValuePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColumnValuePB& ColumnValuePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColumnValuePB_common_2eproto.base);
  return *internal_default_instance();
}


void ColumnValuePB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.ColumnValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      string_val_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      binary_val_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_val_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      decimal_val_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&bool_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&double_val_) -
        reinterpret_cast<char*>(&bool_val_)) + sizeof(double_val_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&byte_val_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&date_val_) -
        reinterpret_cast<char*>(&byte_val_)) + sizeof(date_val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnValuePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool bool_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bool_val(&has_bits);
          bool_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 int_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_int_val(&has_bits);
          int_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 long_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_long_val(&has_bits);
          long_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double double_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_double_val(&has_bits);
          double_val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string string_val = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_string_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.ColumnValuePB.string_val");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 byte_val = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_byte_val(&has_bits);
          byte_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 short_val = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_short_val(&has_bits);
          short_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string binary_val = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_binary_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.ColumnValuePB.binary_val");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string timestamp_val = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_timestamp_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.ColumnValuePB.timestamp_val");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes decimal_val = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_decimal_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 date_val = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_date_val(&has_bits);
          date_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnValuePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.ColumnValuePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bool_val = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bool_val(), target);
  }

  // optional int32 int_val = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_int_val(), target);
  }

  // optional int64 long_val = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_long_val(), target);
  }

  // optional double double_val = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_val(), target);
  }

  // optional string string_val = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_val().data(), static_cast<int>(this->_internal_string_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.ColumnValuePB.string_val");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_string_val(), target);
  }

  // optional int32 byte_val = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_byte_val(), target);
  }

  // optional int32 short_val = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_short_val(), target);
  }

  // optional string binary_val = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_binary_val().data(), static_cast<int>(this->_internal_binary_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.ColumnValuePB.binary_val");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_binary_val(), target);
  }

  // optional string timestamp_val = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timestamp_val().data(), static_cast<int>(this->_internal_timestamp_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.ColumnValuePB.timestamp_val");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_timestamp_val(), target);
  }

  // optional bytes decimal_val = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_decimal_val(), target);
  }

  // optional int32 date_val = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_date_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.ColumnValuePB)
  return target;
}

size_t ColumnValuePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.ColumnValuePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string_val = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_val());
    }

    // optional string binary_val = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_binary_val());
    }

    // optional string timestamp_val = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timestamp_val());
    }

    // optional bytes decimal_val = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_decimal_val());
    }

    // optional bool bool_val = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 int_val = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int_val());
    }

    // optional int64 long_val = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_long_val());
    }

    // optional double double_val = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 byte_val = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_byte_val());
    }

    // optional int32 short_val = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_short_val());
    }

    // optional int32 date_val = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_date_val());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnValuePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.ColumnValuePB)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnValuePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnValuePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.ColumnValuePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.ColumnValuePB)
    MergeFrom(*source);
  }
}

void ColumnValuePB::MergeFrom(const ColumnValuePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.ColumnValuePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_val(from._internal_string_val());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_binary_val(from._internal_binary_val());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_timestamp_val(from._internal_timestamp_val());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_decimal_val(from._internal_decimal_val());
    }
    if (cached_has_bits & 0x00000010u) {
      bool_val_ = from.bool_val_;
    }
    if (cached_has_bits & 0x00000020u) {
      int_val_ = from.int_val_;
    }
    if (cached_has_bits & 0x00000040u) {
      long_val_ = from.long_val_;
    }
    if (cached_has_bits & 0x00000080u) {
      double_val_ = from.double_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      byte_val_ = from.byte_val_;
    }
    if (cached_has_bits & 0x00000200u) {
      short_val_ = from.short_val_;
    }
    if (cached_has_bits & 0x00000400u) {
      date_val_ = from.date_val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColumnValuePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.ColumnValuePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnValuePB::CopyFrom(const ColumnValuePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.ColumnValuePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnValuePB::IsInitialized() const {
  return true;
}

void ColumnValuePB::InternalSwap(ColumnValuePB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_val_.Swap(&other->string_val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  binary_val_.Swap(&other->binary_val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_val_.Swap(&other->timestamp_val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  decimal_val_.Swap(&other->decimal_val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnValuePB, date_val_)
      + sizeof(ColumnValuePB::date_val_)
      - PROTOBUF_FIELD_OFFSET(ColumnValuePB, bool_val_)>(
          reinterpret_cast<char*>(&bool_val_),
          reinterpret_cast<char*>(&other->bool_val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnValuePB::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace impala
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::impala::NetworkAddressPB* Arena::CreateMaybeMessage< ::impala::NetworkAddressPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::NetworkAddressPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::StatusPB* Arena::CreateMaybeMessage< ::impala::StatusPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::StatusPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::UniqueIdPB* Arena::CreateMaybeMessage< ::impala::UniqueIdPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::UniqueIdPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ColumnValuePB* Arena::CreateMaybeMessage< ::impala::ColumnValuePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ColumnValuePB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
