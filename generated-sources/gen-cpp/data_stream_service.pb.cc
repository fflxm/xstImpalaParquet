// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_stream_service.proto

#include "data_stream_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "kudu/util/protobuf-annotations.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_data_5fstream_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BloomFilterPB_data_5fstream_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColumnValuePB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fstream_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InListFilterPB_data_5fstream_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fstream_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MinMaxFilterPB_data_5fstream_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_row_5fbatch_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RowBatchHeaderPB_row_5fbatch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueIdPB_common_2eproto;
namespace impala {
class TransmitDataRequestPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransmitDataRequestPB> _instance;
} _TransmitDataRequestPB_default_instance_;
class TransmitDataResponsePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransmitDataResponsePB> _instance;
} _TransmitDataResponsePB_default_instance_;
class EndDataStreamRequestPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndDataStreamRequestPB> _instance;
} _EndDataStreamRequestPB_default_instance_;
class EndDataStreamResponsePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndDataStreamResponsePB> _instance;
} _EndDataStreamResponsePB_default_instance_;
class BloomFilterPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BloomFilterPB> _instance;
} _BloomFilterPB_default_instance_;
class MinMaxFilterPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MinMaxFilterPB> _instance;
} _MinMaxFilterPB_default_instance_;
class InListFilterPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InListFilterPB> _instance;
} _InListFilterPB_default_instance_;
class UpdateFilterParamsPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateFilterParamsPB> _instance;
} _UpdateFilterParamsPB_default_instance_;
class UpdateFilterResultPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateFilterResultPB> _instance;
} _UpdateFilterResultPB_default_instance_;
class PublishFilterParamsPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishFilterParamsPB> _instance;
} _PublishFilterParamsPB_default_instance_;
class PublishFilterResultPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishFilterResultPB> _instance;
} _PublishFilterResultPB_default_instance_;
}  // namespace impala
static void InitDefaultsscc_info_BloomFilterPB_data_5fstream_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_BloomFilterPB_default_instance_;
    new (ptr) ::impala::BloomFilterPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BloomFilterPB_data_5fstream_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BloomFilterPB_data_5fstream_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_EndDataStreamRequestPB_data_5fstream_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_EndDataStreamRequestPB_default_instance_;
    new (ptr) ::impala::EndDataStreamRequestPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EndDataStreamRequestPB_data_5fstream_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EndDataStreamRequestPB_data_5fstream_5fservice_2eproto}, {
      &scc_info_UniqueIdPB_common_2eproto.base,}};

static void InitDefaultsscc_info_EndDataStreamResponsePB_data_5fstream_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_EndDataStreamResponsePB_default_instance_;
    new (ptr) ::impala::EndDataStreamResponsePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EndDataStreamResponsePB_data_5fstream_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EndDataStreamResponsePB_data_5fstream_5fservice_2eproto}, {
      &scc_info_StatusPB_common_2eproto.base,}};

static void InitDefaultsscc_info_InListFilterPB_data_5fstream_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_InListFilterPB_default_instance_;
    new (ptr) ::impala::InListFilterPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InListFilterPB_data_5fstream_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InListFilterPB_data_5fstream_5fservice_2eproto}, {
      &scc_info_ColumnValuePB_common_2eproto.base,}};

static void InitDefaultsscc_info_MinMaxFilterPB_data_5fstream_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_MinMaxFilterPB_default_instance_;
    new (ptr) ::impala::MinMaxFilterPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MinMaxFilterPB_data_5fstream_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MinMaxFilterPB_data_5fstream_5fservice_2eproto}, {
      &scc_info_ColumnValuePB_common_2eproto.base,}};

static void InitDefaultsscc_info_PublishFilterParamsPB_data_5fstream_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_PublishFilterParamsPB_default_instance_;
    new (ptr) ::impala::PublishFilterParamsPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PublishFilterParamsPB_data_5fstream_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PublishFilterParamsPB_data_5fstream_5fservice_2eproto}, {
      &scc_info_UniqueIdPB_common_2eproto.base,
      &scc_info_BloomFilterPB_data_5fstream_5fservice_2eproto.base,
      &scc_info_MinMaxFilterPB_data_5fstream_5fservice_2eproto.base,
      &scc_info_InListFilterPB_data_5fstream_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_PublishFilterResultPB_data_5fstream_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_PublishFilterResultPB_default_instance_;
    new (ptr) ::impala::PublishFilterResultPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishFilterResultPB_data_5fstream_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishFilterResultPB_data_5fstream_5fservice_2eproto}, {
      &scc_info_StatusPB_common_2eproto.base,}};

static void InitDefaultsscc_info_TransmitDataRequestPB_data_5fstream_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_TransmitDataRequestPB_default_instance_;
    new (ptr) ::impala::TransmitDataRequestPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransmitDataRequestPB_data_5fstream_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TransmitDataRequestPB_data_5fstream_5fservice_2eproto}, {
      &scc_info_UniqueIdPB_common_2eproto.base,
      &scc_info_RowBatchHeaderPB_row_5fbatch_2eproto.base,}};

static void InitDefaultsscc_info_TransmitDataResponsePB_data_5fstream_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_TransmitDataResponsePB_default_instance_;
    new (ptr) ::impala::TransmitDataResponsePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransmitDataResponsePB_data_5fstream_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransmitDataResponsePB_data_5fstream_5fservice_2eproto}, {
      &scc_info_StatusPB_common_2eproto.base,}};

static void InitDefaultsscc_info_UpdateFilterParamsPB_data_5fstream_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_UpdateFilterParamsPB_default_instance_;
    new (ptr) ::impala::UpdateFilterParamsPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UpdateFilterParamsPB_data_5fstream_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_UpdateFilterParamsPB_data_5fstream_5fservice_2eproto}, {
      &scc_info_UniqueIdPB_common_2eproto.base,
      &scc_info_BloomFilterPB_data_5fstream_5fservice_2eproto.base,
      &scc_info_MinMaxFilterPB_data_5fstream_5fservice_2eproto.base,
      &scc_info_InListFilterPB_data_5fstream_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_UpdateFilterResultPB_data_5fstream_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_UpdateFilterResultPB_default_instance_;
    new (ptr) ::impala::UpdateFilterResultPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateFilterResultPB_data_5fstream_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateFilterResultPB_data_5fstream_5fservice_2eproto}, {
      &scc_info_StatusPB_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_data_5fstream_5fservice_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_data_5fstream_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_data_5fstream_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_data_5fstream_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::impala::TransmitDataRequestPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::TransmitDataRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::TransmitDataRequestPB, dest_fragment_instance_id_),
  PROTOBUF_FIELD_OFFSET(::impala::TransmitDataRequestPB, sender_id_),
  PROTOBUF_FIELD_OFFSET(::impala::TransmitDataRequestPB, dest_node_id_),
  PROTOBUF_FIELD_OFFSET(::impala::TransmitDataRequestPB, row_batch_header_),
  PROTOBUF_FIELD_OFFSET(::impala::TransmitDataRequestPB, tuple_offsets_sidecar_idx_),
  PROTOBUF_FIELD_OFFSET(::impala::TransmitDataRequestPB, tuple_data_sidecar_idx_),
  0,
  2,
  3,
  1,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::impala::TransmitDataResponsePB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::TransmitDataResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::TransmitDataResponsePB, status_),
  PROTOBUF_FIELD_OFFSET(::impala::TransmitDataResponsePB, receiver_latency_ns_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::EndDataStreamRequestPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::EndDataStreamRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::EndDataStreamRequestPB, dest_fragment_instance_id_),
  PROTOBUF_FIELD_OFFSET(::impala::EndDataStreamRequestPB, sender_id_),
  PROTOBUF_FIELD_OFFSET(::impala::EndDataStreamRequestPB, dest_node_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::impala::EndDataStreamResponsePB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::EndDataStreamResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::EndDataStreamResponsePB, status_),
  PROTOBUF_FIELD_OFFSET(::impala::EndDataStreamResponsePB, receiver_latency_ns_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::BloomFilterPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::BloomFilterPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::BloomFilterPB, log_bufferpool_space_),
  PROTOBUF_FIELD_OFFSET(::impala::BloomFilterPB, always_true_),
  PROTOBUF_FIELD_OFFSET(::impala::BloomFilterPB, always_false_),
  PROTOBUF_FIELD_OFFSET(::impala::BloomFilterPB, directory_sidecar_idx_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::impala::MinMaxFilterPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::MinMaxFilterPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::MinMaxFilterPB, always_true_),
  PROTOBUF_FIELD_OFFSET(::impala::MinMaxFilterPB, always_false_),
  PROTOBUF_FIELD_OFFSET(::impala::MinMaxFilterPB, min_),
  PROTOBUF_FIELD_OFFSET(::impala::MinMaxFilterPB, max_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::InListFilterPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::InListFilterPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::InListFilterPB, always_true_),
  PROTOBUF_FIELD_OFFSET(::impala::InListFilterPB, contains_null_),
  PROTOBUF_FIELD_OFFSET(::impala::InListFilterPB, value_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::impala::UpdateFilterParamsPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::UpdateFilterParamsPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::UpdateFilterParamsPB, filter_id_),
  PROTOBUF_FIELD_OFFSET(::impala::UpdateFilterParamsPB, query_id_),
  PROTOBUF_FIELD_OFFSET(::impala::UpdateFilterParamsPB, bloom_filter_),
  PROTOBUF_FIELD_OFFSET(::impala::UpdateFilterParamsPB, min_max_filter_),
  PROTOBUF_FIELD_OFFSET(::impala::UpdateFilterParamsPB, in_list_filter_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::impala::UpdateFilterResultPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::UpdateFilterResultPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::UpdateFilterResultPB, status_),
  PROTOBUF_FIELD_OFFSET(::impala::UpdateFilterResultPB, receiver_latency_ns_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::PublishFilterParamsPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::PublishFilterParamsPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::PublishFilterParamsPB, filter_id_),
  PROTOBUF_FIELD_OFFSET(::impala::PublishFilterParamsPB, dst_query_id_),
  PROTOBUF_FIELD_OFFSET(::impala::PublishFilterParamsPB, bloom_filter_),
  PROTOBUF_FIELD_OFFSET(::impala::PublishFilterParamsPB, min_max_filter_),
  PROTOBUF_FIELD_OFFSET(::impala::PublishFilterParamsPB, in_list_filter_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::impala::PublishFilterResultPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::PublishFilterResultPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::PublishFilterResultPB, status_),
  PROTOBUF_FIELD_OFFSET(::impala::PublishFilterResultPB, receiver_latency_ns_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::impala::TransmitDataRequestPB)},
  { 17, 24, sizeof(::impala::TransmitDataResponsePB)},
  { 26, 34, sizeof(::impala::EndDataStreamRequestPB)},
  { 37, 44, sizeof(::impala::EndDataStreamResponsePB)},
  { 46, 55, sizeof(::impala::BloomFilterPB)},
  { 59, 68, sizeof(::impala::MinMaxFilterPB)},
  { 72, 80, sizeof(::impala::InListFilterPB)},
  { 83, 93, sizeof(::impala::UpdateFilterParamsPB)},
  { 98, 105, sizeof(::impala::UpdateFilterResultPB)},
  { 107, 117, sizeof(::impala::PublishFilterParamsPB)},
  { 122, 129, sizeof(::impala::PublishFilterResultPB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_TransmitDataRequestPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_TransmitDataResponsePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_EndDataStreamRequestPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_EndDataStreamResponsePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_BloomFilterPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_MinMaxFilterPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_InListFilterPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_UpdateFilterParamsPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_UpdateFilterResultPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_PublishFilterParamsPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_PublishFilterResultPB_default_instance_),
};

const char descriptor_table_protodef_data_5fstream_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031data_stream_service.proto\022\006impala\032\014com"
  "mon.proto\032\017row_batch.proto\032\031kudu/rpc/rpc"
  "_header.proto\"\356\001\n\025TransmitDataRequestPB\022"
  "5\n\031dest_fragment_instance_id\030\001 \001(\0132\022.imp"
  "ala.UniqueIdPB\022\021\n\tsender_id\030\002 \001(\005\022\024\n\014des"
  "t_node_id\030\003 \001(\005\0222\n\020row_batch_header\030\004 \001("
  "\0132\030.impala.RowBatchHeaderPB\022!\n\031tuple_off"
  "sets_sidecar_idx\030\005 \001(\005\022\036\n\026tuple_data_sid"
  "ecar_idx\030\006 \001(\005\"W\n\026TransmitDataResponsePB"
  "\022 \n\006status\030\001 \001(\0132\020.impala.StatusPB\022\033\n\023re"
  "ceiver_latency_ns\030\002 \001(\003\"x\n\026EndDataStream"
  "RequestPB\0225\n\031dest_fragment_instance_id\030\001"
  " \001(\0132\022.impala.UniqueIdPB\022\021\n\tsender_id\030\002 "
  "\001(\005\022\024\n\014dest_node_id\030\003 \001(\005\"X\n\027EndDataStre"
  "amResponsePB\022 \n\006status\030\001 \001(\0132\020.impala.St"
  "atusPB\022\033\n\023receiver_latency_ns\030\002 \001(\003\"w\n\rB"
  "loomFilterPB\022\034\n\024log_bufferpool_space\030\001 \001"
  "(\005\022\023\n\013always_true\030\002 \001(\010\022\024\n\014always_false\030"
  "\003 \001(\010\022\035\n\025directory_sidecar_idx\030\004 \001(\005\"\203\001\n"
  "\016MinMaxFilterPB\022\023\n\013always_true\030\001 \001(\010\022\024\n\014"
  "always_false\030\002 \001(\010\022\"\n\003min\030\003 \001(\0132\025.impala"
  ".ColumnValuePB\022\"\n\003max\030\004 \001(\0132\025.impala.Col"
  "umnValuePB\"b\n\016InListFilterPB\022\023\n\013always_t"
  "rue\030\001 \001(\010\022\025\n\rcontains_null\030\002 \001(\010\022$\n\005valu"
  "e\030\003 \003(\0132\025.impala.ColumnValuePB\"\334\001\n\024Updat"
  "eFilterParamsPB\022\021\n\tfilter_id\030\001 \001(\005\022$\n\010qu"
  "ery_id\030\002 \001(\0132\022.impala.UniqueIdPB\022+\n\014bloo"
  "m_filter\030\003 \001(\0132\025.impala.BloomFilterPB\022.\n"
  "\016min_max_filter\030\004 \001(\0132\026.impala.MinMaxFil"
  "terPB\022.\n\016in_list_filter\030\005 \001(\0132\026.impala.I"
  "nListFilterPB\"U\n\024UpdateFilterResultPB\022 \n"
  "\006status\030\001 \001(\0132\020.impala.StatusPB\022\033\n\023recei"
  "ver_latency_ns\030\002 \001(\003\"\341\001\n\025PublishFilterPa"
  "ramsPB\022\021\n\tfilter_id\030\001 \001(\005\022(\n\014dst_query_i"
  "d\030\002 \001(\0132\022.impala.UniqueIdPB\022+\n\014bloom_fil"
  "ter\030\003 \001(\0132\025.impala.BloomFilterPB\022.\n\016min_"
  "max_filter\030\004 \001(\0132\026.impala.MinMaxFilterPB"
  "\022.\n\016in_list_filter\030\005 \001(\0132\026.impala.InList"
  "FilterPB\"V\n\025PublishFilterResultPB\022 \n\006sta"
  "tus\030\001 \001(\0132\020.impala.StatusPB\022\033\n\023receiver_"
  "latency_ns\030\002 \001(\0032\336\002\n\021DataStreamService\022M"
  "\n\014TransmitData\022\035.impala.TransmitDataRequ"
  "estPB\032\036.impala.TransmitDataResponsePB\022P\n"
  "\rEndDataStream\022\036.impala.EndDataStreamReq"
  "uestPB\032\037.impala.EndDataStreamResponsePB\022"
  "J\n\014UpdateFilter\022\034.impala.UpdateFilterPar"
  "amsPB\032\034.impala.UpdateFilterResultPB\022M\n\rP"
  "ublishFilter\022\035.impala.PublishFilterParam"
  "sPB\032\035.impala.PublishFilterResultPB\032\r\272\265\030\t"
  "Authorize"
  ;
/*modify by ff static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_data_5fstream_5fservice_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_kudu_2frpc_2frpc_5fheader_2eproto,
  &::descriptor_table_row_5fbatch_2eproto,
};*/
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_data_5fstream_5fservice_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_common_2eproto,
  &::descriptor_table_row_5fbatch_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_data_5fstream_5fservice_2eproto_sccs[11] = {
  &scc_info_BloomFilterPB_data_5fstream_5fservice_2eproto.base,
  &scc_info_EndDataStreamRequestPB_data_5fstream_5fservice_2eproto.base,
  &scc_info_EndDataStreamResponsePB_data_5fstream_5fservice_2eproto.base,
  &scc_info_InListFilterPB_data_5fstream_5fservice_2eproto.base,
  &scc_info_MinMaxFilterPB_data_5fstream_5fservice_2eproto.base,
  &scc_info_PublishFilterParamsPB_data_5fstream_5fservice_2eproto.base,
  &scc_info_PublishFilterResultPB_data_5fstream_5fservice_2eproto.base,
  &scc_info_TransmitDataRequestPB_data_5fstream_5fservice_2eproto.base,
  &scc_info_TransmitDataResponsePB_data_5fstream_5fservice_2eproto.base,
  &scc_info_UpdateFilterParamsPB_data_5fstream_5fservice_2eproto.base,
  &scc_info_UpdateFilterResultPB_data_5fstream_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_data_5fstream_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_5fstream_5fservice_2eproto = {
  false, false, descriptor_table_protodef_data_5fstream_5fservice_2eproto, "data_stream_service.proto", 1969,
  &descriptor_table_data_5fstream_5fservice_2eproto_once, descriptor_table_data_5fstream_5fservice_2eproto_sccs, descriptor_table_data_5fstream_5fservice_2eproto_deps, 11, 3,
  schemas, file_default_instances, TableStruct_data_5fstream_5fservice_2eproto::offsets,
  file_level_metadata_data_5fstream_5fservice_2eproto, 11, file_level_enum_descriptors_data_5fstream_5fservice_2eproto, file_level_service_descriptors_data_5fstream_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_data_5fstream_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_data_5fstream_5fservice_2eproto)), true);
namespace impala {

// ===================================================================

class TransmitDataRequestPB::_Internal {
 public:
  using HasBits = decltype(std::declval<TransmitDataRequestPB>()._has_bits_);
  static const ::impala::UniqueIdPB& dest_fragment_instance_id(const TransmitDataRequestPB* msg);
  static void set_has_dest_fragment_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dest_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::impala::RowBatchHeaderPB& row_batch_header(const TransmitDataRequestPB* msg);
  static void set_has_row_batch_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tuple_offsets_sidecar_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tuple_data_sidecar_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::impala::UniqueIdPB&
TransmitDataRequestPB::_Internal::dest_fragment_instance_id(const TransmitDataRequestPB* msg) {
  return *msg->dest_fragment_instance_id_;
}
const ::impala::RowBatchHeaderPB&
TransmitDataRequestPB::_Internal::row_batch_header(const TransmitDataRequestPB* msg) {
  return *msg->row_batch_header_;
}
void TransmitDataRequestPB::clear_dest_fragment_instance_id() {
  if (dest_fragment_instance_id_ != nullptr) dest_fragment_instance_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void TransmitDataRequestPB::clear_row_batch_header() {
  if (row_batch_header_ != nullptr) row_batch_header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TransmitDataRequestPB::TransmitDataRequestPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.TransmitDataRequestPB)
}
TransmitDataRequestPB::TransmitDataRequestPB(const TransmitDataRequestPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dest_fragment_instance_id()) {
    dest_fragment_instance_id_ = new ::impala::UniqueIdPB(*from.dest_fragment_instance_id_);
  } else {
    dest_fragment_instance_id_ = nullptr;
  }
  if (from._internal_has_row_batch_header()) {
    row_batch_header_ = new ::impala::RowBatchHeaderPB(*from.row_batch_header_);
  } else {
    row_batch_header_ = nullptr;
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tuple_data_sidecar_idx_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(tuple_data_sidecar_idx_));
  // @@protoc_insertion_point(copy_constructor:impala.TransmitDataRequestPB)
}

void TransmitDataRequestPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransmitDataRequestPB_data_5fstream_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dest_fragment_instance_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&tuple_data_sidecar_idx_) -
      reinterpret_cast<char*>(&dest_fragment_instance_id_)) + sizeof(tuple_data_sidecar_idx_));
}

TransmitDataRequestPB::~TransmitDataRequestPB() {
  // @@protoc_insertion_point(destructor:impala.TransmitDataRequestPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransmitDataRequestPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dest_fragment_instance_id_;
  if (this != internal_default_instance()) delete row_batch_header_;
}

void TransmitDataRequestPB::ArenaDtor(void* object) {
  TransmitDataRequestPB* _this = reinterpret_cast< TransmitDataRequestPB* >(object);
  (void)_this;
}
void TransmitDataRequestPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransmitDataRequestPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransmitDataRequestPB& TransmitDataRequestPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransmitDataRequestPB_data_5fstream_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TransmitDataRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.TransmitDataRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dest_fragment_instance_id_ != nullptr);
      dest_fragment_instance_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(row_batch_header_ != nullptr);
      row_batch_header_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&sender_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tuple_data_sidecar_idx_) -
        reinterpret_cast<char*>(&sender_id_)) + sizeof(tuple_data_sidecar_idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransmitDataRequestPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_fragment_instance_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sender_id(&has_bits);
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dest_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dest_node_id(&has_bits);
          dest_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.RowBatchHeaderPB row_batch_header = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_batch_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tuple_offsets_sidecar_idx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tuple_offsets_sidecar_idx(&has_bits);
          tuple_offsets_sidecar_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tuple_data_sidecar_idx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tuple_data_sidecar_idx(&has_bits);
          tuple_data_sidecar_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransmitDataRequestPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.TransmitDataRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dest_fragment_instance_id(this), target, stream);
  }

  // optional int32 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sender_id(), target);
  }

  // optional int32 dest_node_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dest_node_id(), target);
  }

  // optional .impala.RowBatchHeaderPB row_batch_header = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::row_batch_header(this), target, stream);
  }

  // optional int32 tuple_offsets_sidecar_idx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_tuple_offsets_sidecar_idx(), target);
  }

  // optional int32 tuple_data_sidecar_idx = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_tuple_data_sidecar_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.TransmitDataRequestPB)
  return target;
}

size_t TransmitDataRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.TransmitDataRequestPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dest_fragment_instance_id_);
    }

    // optional .impala.RowBatchHeaderPB row_batch_header = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *row_batch_header_);
    }

    // optional int32 sender_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sender_id());
    }

    // optional int32 dest_node_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dest_node_id());
    }

    // optional int32 tuple_offsets_sidecar_idx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tuple_offsets_sidecar_idx());
    }

    // optional int32 tuple_data_sidecar_idx = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tuple_data_sidecar_idx());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransmitDataRequestPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.TransmitDataRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const TransmitDataRequestPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransmitDataRequestPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.TransmitDataRequestPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.TransmitDataRequestPB)
    MergeFrom(*source);
  }
}

void TransmitDataRequestPB::MergeFrom(const TransmitDataRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.TransmitDataRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dest_fragment_instance_id()->::impala::UniqueIdPB::MergeFrom(from._internal_dest_fragment_instance_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_row_batch_header()->::impala::RowBatchHeaderPB::MergeFrom(from._internal_row_batch_header());
    }
    if (cached_has_bits & 0x00000004u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      dest_node_id_ = from.dest_node_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      tuple_offsets_sidecar_idx_ = from.tuple_offsets_sidecar_idx_;
    }
    if (cached_has_bits & 0x00000020u) {
      tuple_data_sidecar_idx_ = from.tuple_data_sidecar_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransmitDataRequestPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.TransmitDataRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitDataRequestPB::CopyFrom(const TransmitDataRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.TransmitDataRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitDataRequestPB::IsInitialized() const {
  if (_internal_has_dest_fragment_instance_id()) {
    if (!dest_fragment_instance_id_->IsInitialized()) return false;
  }
  return true;
}

void TransmitDataRequestPB::InternalSwap(TransmitDataRequestPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransmitDataRequestPB, tuple_data_sidecar_idx_)
      + sizeof(TransmitDataRequestPB::tuple_data_sidecar_idx_)
      - PROTOBUF_FIELD_OFFSET(TransmitDataRequestPB, dest_fragment_instance_id_)>(
          reinterpret_cast<char*>(&dest_fragment_instance_id_),
          reinterpret_cast<char*>(&other->dest_fragment_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransmitDataRequestPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransmitDataResponsePB::_Internal {
 public:
  using HasBits = decltype(std::declval<TransmitDataResponsePB>()._has_bits_);
  static const ::impala::StatusPB& status(const TransmitDataResponsePB* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_receiver_latency_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::impala::StatusPB&
TransmitDataResponsePB::_Internal::status(const TransmitDataResponsePB* msg) {
  return *msg->status_;
}
void TransmitDataResponsePB::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TransmitDataResponsePB::TransmitDataResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.TransmitDataResponsePB)
}
TransmitDataResponsePB::TransmitDataResponsePB(const TransmitDataResponsePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::impala::StatusPB(*from.status_);
  } else {
    status_ = nullptr;
  }
  receiver_latency_ns_ = from.receiver_latency_ns_;
  // @@protoc_insertion_point(copy_constructor:impala.TransmitDataResponsePB)
}

void TransmitDataResponsePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransmitDataResponsePB_data_5fstream_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&receiver_latency_ns_) -
      reinterpret_cast<char*>(&status_)) + sizeof(receiver_latency_ns_));
}

TransmitDataResponsePB::~TransmitDataResponsePB() {
  // @@protoc_insertion_point(destructor:impala.TransmitDataResponsePB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransmitDataResponsePB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void TransmitDataResponsePB::ArenaDtor(void* object) {
  TransmitDataResponsePB* _this = reinterpret_cast< TransmitDataResponsePB* >(object);
  (void)_this;
}
void TransmitDataResponsePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransmitDataResponsePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransmitDataResponsePB& TransmitDataResponsePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransmitDataResponsePB_data_5fstream_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TransmitDataResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.TransmitDataResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  receiver_latency_ns_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransmitDataResponsePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.StatusPB status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 receiver_latency_ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_receiver_latency_ns(&has_bits);
          receiver_latency_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransmitDataResponsePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.TransmitDataResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.StatusPB status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // optional int64 receiver_latency_ns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_receiver_latency_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.TransmitDataResponsePB)
  return target;
}

size_t TransmitDataResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.TransmitDataResponsePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .impala.StatusPB status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional int64 receiver_latency_ns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_receiver_latency_ns());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransmitDataResponsePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.TransmitDataResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const TransmitDataResponsePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransmitDataResponsePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.TransmitDataResponsePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.TransmitDataResponsePB)
    MergeFrom(*source);
  }
}

void TransmitDataResponsePB::MergeFrom(const TransmitDataResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.TransmitDataResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_status()->::impala::StatusPB::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      receiver_latency_ns_ = from.receiver_latency_ns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransmitDataResponsePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.TransmitDataResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransmitDataResponsePB::CopyFrom(const TransmitDataResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.TransmitDataResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransmitDataResponsePB::IsInitialized() const {
  return true;
}

void TransmitDataResponsePB::InternalSwap(TransmitDataResponsePB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransmitDataResponsePB, receiver_latency_ns_)
      + sizeof(TransmitDataResponsePB::receiver_latency_ns_)
      - PROTOBUF_FIELD_OFFSET(TransmitDataResponsePB, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransmitDataResponsePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EndDataStreamRequestPB::_Internal {
 public:
  using HasBits = decltype(std::declval<EndDataStreamRequestPB>()._has_bits_);
  static const ::impala::UniqueIdPB& dest_fragment_instance_id(const EndDataStreamRequestPB* msg);
  static void set_has_dest_fragment_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dest_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::impala::UniqueIdPB&
EndDataStreamRequestPB::_Internal::dest_fragment_instance_id(const EndDataStreamRequestPB* msg) {
  return *msg->dest_fragment_instance_id_;
}
void EndDataStreamRequestPB::clear_dest_fragment_instance_id() {
  if (dest_fragment_instance_id_ != nullptr) dest_fragment_instance_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
EndDataStreamRequestPB::EndDataStreamRequestPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.EndDataStreamRequestPB)
}
EndDataStreamRequestPB::EndDataStreamRequestPB(const EndDataStreamRequestPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dest_fragment_instance_id()) {
    dest_fragment_instance_id_ = new ::impala::UniqueIdPB(*from.dest_fragment_instance_id_);
  } else {
    dest_fragment_instance_id_ = nullptr;
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dest_node_id_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(dest_node_id_));
  // @@protoc_insertion_point(copy_constructor:impala.EndDataStreamRequestPB)
}

void EndDataStreamRequestPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndDataStreamRequestPB_data_5fstream_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dest_fragment_instance_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dest_node_id_) -
      reinterpret_cast<char*>(&dest_fragment_instance_id_)) + sizeof(dest_node_id_));
}

EndDataStreamRequestPB::~EndDataStreamRequestPB() {
  // @@protoc_insertion_point(destructor:impala.EndDataStreamRequestPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndDataStreamRequestPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dest_fragment_instance_id_;
}

void EndDataStreamRequestPB::ArenaDtor(void* object) {
  EndDataStreamRequestPB* _this = reinterpret_cast< EndDataStreamRequestPB* >(object);
  (void)_this;
}
void EndDataStreamRequestPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndDataStreamRequestPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndDataStreamRequestPB& EndDataStreamRequestPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndDataStreamRequestPB_data_5fstream_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EndDataStreamRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.EndDataStreamRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dest_fragment_instance_id_ != nullptr);
    dest_fragment_instance_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&sender_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dest_node_id_) -
        reinterpret_cast<char*>(&sender_id_)) + sizeof(dest_node_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndDataStreamRequestPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_fragment_instance_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sender_id(&has_bits);
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dest_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dest_node_id(&has_bits);
          dest_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndDataStreamRequestPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.EndDataStreamRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dest_fragment_instance_id(this), target, stream);
  }

  // optional int32 sender_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sender_id(), target);
  }

  // optional int32 dest_node_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dest_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.EndDataStreamRequestPB)
  return target;
}

size_t EndDataStreamRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.EndDataStreamRequestPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dest_fragment_instance_id_);
    }

    // optional int32 sender_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sender_id());
    }

    // optional int32 dest_node_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dest_node_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndDataStreamRequestPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.EndDataStreamRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const EndDataStreamRequestPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndDataStreamRequestPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.EndDataStreamRequestPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.EndDataStreamRequestPB)
    MergeFrom(*source);
  }
}

void EndDataStreamRequestPB::MergeFrom(const EndDataStreamRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.EndDataStreamRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dest_fragment_instance_id()->::impala::UniqueIdPB::MergeFrom(from._internal_dest_fragment_instance_id());
    }
    if (cached_has_bits & 0x00000002u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      dest_node_id_ = from.dest_node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EndDataStreamRequestPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.EndDataStreamRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndDataStreamRequestPB::CopyFrom(const EndDataStreamRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.EndDataStreamRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndDataStreamRequestPB::IsInitialized() const {
  if (_internal_has_dest_fragment_instance_id()) {
    if (!dest_fragment_instance_id_->IsInitialized()) return false;
  }
  return true;
}

void EndDataStreamRequestPB::InternalSwap(EndDataStreamRequestPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndDataStreamRequestPB, dest_node_id_)
      + sizeof(EndDataStreamRequestPB::dest_node_id_)
      - PROTOBUF_FIELD_OFFSET(EndDataStreamRequestPB, dest_fragment_instance_id_)>(
          reinterpret_cast<char*>(&dest_fragment_instance_id_),
          reinterpret_cast<char*>(&other->dest_fragment_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndDataStreamRequestPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EndDataStreamResponsePB::_Internal {
 public:
  using HasBits = decltype(std::declval<EndDataStreamResponsePB>()._has_bits_);
  static const ::impala::StatusPB& status(const EndDataStreamResponsePB* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_receiver_latency_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::impala::StatusPB&
EndDataStreamResponsePB::_Internal::status(const EndDataStreamResponsePB* msg) {
  return *msg->status_;
}
void EndDataStreamResponsePB::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
EndDataStreamResponsePB::EndDataStreamResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.EndDataStreamResponsePB)
}
EndDataStreamResponsePB::EndDataStreamResponsePB(const EndDataStreamResponsePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::impala::StatusPB(*from.status_);
  } else {
    status_ = nullptr;
  }
  receiver_latency_ns_ = from.receiver_latency_ns_;
  // @@protoc_insertion_point(copy_constructor:impala.EndDataStreamResponsePB)
}

void EndDataStreamResponsePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndDataStreamResponsePB_data_5fstream_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&receiver_latency_ns_) -
      reinterpret_cast<char*>(&status_)) + sizeof(receiver_latency_ns_));
}

EndDataStreamResponsePB::~EndDataStreamResponsePB() {
  // @@protoc_insertion_point(destructor:impala.EndDataStreamResponsePB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndDataStreamResponsePB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void EndDataStreamResponsePB::ArenaDtor(void* object) {
  EndDataStreamResponsePB* _this = reinterpret_cast< EndDataStreamResponsePB* >(object);
  (void)_this;
}
void EndDataStreamResponsePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndDataStreamResponsePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndDataStreamResponsePB& EndDataStreamResponsePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndDataStreamResponsePB_data_5fstream_5fservice_2eproto.base);
  return *internal_default_instance();
}


void EndDataStreamResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.EndDataStreamResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  receiver_latency_ns_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndDataStreamResponsePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.StatusPB status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 receiver_latency_ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_receiver_latency_ns(&has_bits);
          receiver_latency_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndDataStreamResponsePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.EndDataStreamResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.StatusPB status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // optional int64 receiver_latency_ns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_receiver_latency_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.EndDataStreamResponsePB)
  return target;
}

size_t EndDataStreamResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.EndDataStreamResponsePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .impala.StatusPB status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional int64 receiver_latency_ns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_receiver_latency_ns());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndDataStreamResponsePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.EndDataStreamResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const EndDataStreamResponsePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndDataStreamResponsePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.EndDataStreamResponsePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.EndDataStreamResponsePB)
    MergeFrom(*source);
  }
}

void EndDataStreamResponsePB::MergeFrom(const EndDataStreamResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.EndDataStreamResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_status()->::impala::StatusPB::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      receiver_latency_ns_ = from.receiver_latency_ns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EndDataStreamResponsePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.EndDataStreamResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndDataStreamResponsePB::CopyFrom(const EndDataStreamResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.EndDataStreamResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndDataStreamResponsePB::IsInitialized() const {
  return true;
}

void EndDataStreamResponsePB::InternalSwap(EndDataStreamResponsePB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndDataStreamResponsePB, receiver_latency_ns_)
      + sizeof(EndDataStreamResponsePB::receiver_latency_ns_)
      - PROTOBUF_FIELD_OFFSET(EndDataStreamResponsePB, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndDataStreamResponsePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BloomFilterPB::_Internal {
 public:
  using HasBits = decltype(std::declval<BloomFilterPB>()._has_bits_);
  static void set_has_log_bufferpool_space(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_always_true(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_always_false(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_directory_sidecar_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BloomFilterPB::BloomFilterPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.BloomFilterPB)
}
BloomFilterPB::BloomFilterPB(const BloomFilterPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&log_bufferpool_space_, &from.log_bufferpool_space_,
    static_cast<size_t>(reinterpret_cast<char*>(&directory_sidecar_idx_) -
    reinterpret_cast<char*>(&log_bufferpool_space_)) + sizeof(directory_sidecar_idx_));
  // @@protoc_insertion_point(copy_constructor:impala.BloomFilterPB)
}

void BloomFilterPB::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&log_bufferpool_space_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&directory_sidecar_idx_) -
      reinterpret_cast<char*>(&log_bufferpool_space_)) + sizeof(directory_sidecar_idx_));
}

BloomFilterPB::~BloomFilterPB() {
  // @@protoc_insertion_point(destructor:impala.BloomFilterPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BloomFilterPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BloomFilterPB::ArenaDtor(void* object) {
  BloomFilterPB* _this = reinterpret_cast< BloomFilterPB* >(object);
  (void)_this;
}
void BloomFilterPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BloomFilterPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BloomFilterPB& BloomFilterPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BloomFilterPB_data_5fstream_5fservice_2eproto.base);
  return *internal_default_instance();
}


void BloomFilterPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.BloomFilterPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&log_bufferpool_space_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&directory_sidecar_idx_) -
        reinterpret_cast<char*>(&log_bufferpool_space_)) + sizeof(directory_sidecar_idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BloomFilterPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 log_bufferpool_space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_log_bufferpool_space(&has_bits);
          log_bufferpool_space_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool always_true = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_always_true(&has_bits);
          always_true_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool always_false = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_always_false(&has_bits);
          always_false_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 directory_sidecar_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_directory_sidecar_idx(&has_bits);
          directory_sidecar_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BloomFilterPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.BloomFilterPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 log_bufferpool_space = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_log_bufferpool_space(), target);
  }

  // optional bool always_true = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_always_true(), target);
  }

  // optional bool always_false = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_always_false(), target);
  }

  // optional int32 directory_sidecar_idx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_directory_sidecar_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.BloomFilterPB)
  return target;
}

size_t BloomFilterPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.BloomFilterPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 log_bufferpool_space = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_log_bufferpool_space());
    }

    // optional bool always_true = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool always_false = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 directory_sidecar_idx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_directory_sidecar_idx());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BloomFilterPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.BloomFilterPB)
  GOOGLE_DCHECK_NE(&from, this);
  const BloomFilterPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BloomFilterPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.BloomFilterPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.BloomFilterPB)
    MergeFrom(*source);
  }
}

void BloomFilterPB::MergeFrom(const BloomFilterPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.BloomFilterPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      log_bufferpool_space_ = from.log_bufferpool_space_;
    }
    if (cached_has_bits & 0x00000002u) {
      always_true_ = from.always_true_;
    }
    if (cached_has_bits & 0x00000004u) {
      always_false_ = from.always_false_;
    }
    if (cached_has_bits & 0x00000008u) {
      directory_sidecar_idx_ = from.directory_sidecar_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BloomFilterPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.BloomFilterPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BloomFilterPB::CopyFrom(const BloomFilterPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.BloomFilterPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloomFilterPB::IsInitialized() const {
  return true;
}

void BloomFilterPB::InternalSwap(BloomFilterPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BloomFilterPB, directory_sidecar_idx_)
      + sizeof(BloomFilterPB::directory_sidecar_idx_)
      - PROTOBUF_FIELD_OFFSET(BloomFilterPB, log_bufferpool_space_)>(
          reinterpret_cast<char*>(&log_bufferpool_space_),
          reinterpret_cast<char*>(&other->log_bufferpool_space_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BloomFilterPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MinMaxFilterPB::_Internal {
 public:
  using HasBits = decltype(std::declval<MinMaxFilterPB>()._has_bits_);
  static void set_has_always_true(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_always_false(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::impala::ColumnValuePB& min(const MinMaxFilterPB* msg);
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::impala::ColumnValuePB& max(const MinMaxFilterPB* msg);
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::impala::ColumnValuePB&
MinMaxFilterPB::_Internal::min(const MinMaxFilterPB* msg) {
  return *msg->min_;
}
const ::impala::ColumnValuePB&
MinMaxFilterPB::_Internal::max(const MinMaxFilterPB* msg) {
  return *msg->max_;
}
void MinMaxFilterPB::clear_min() {
  if (min_ != nullptr) min_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MinMaxFilterPB::clear_max() {
  if (max_ != nullptr) max_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MinMaxFilterPB::MinMaxFilterPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.MinMaxFilterPB)
}
MinMaxFilterPB::MinMaxFilterPB(const MinMaxFilterPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min()) {
    min_ = new ::impala::ColumnValuePB(*from.min_);
  } else {
    min_ = nullptr;
  }
  if (from._internal_has_max()) {
    max_ = new ::impala::ColumnValuePB(*from.max_);
  } else {
    max_ = nullptr;
  }
  ::memcpy(&always_true_, &from.always_true_,
    static_cast<size_t>(reinterpret_cast<char*>(&always_false_) -
    reinterpret_cast<char*>(&always_true_)) + sizeof(always_false_));
  // @@protoc_insertion_point(copy_constructor:impala.MinMaxFilterPB)
}

void MinMaxFilterPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MinMaxFilterPB_data_5fstream_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&always_false_) -
      reinterpret_cast<char*>(&min_)) + sizeof(always_false_));
}

MinMaxFilterPB::~MinMaxFilterPB() {
  // @@protoc_insertion_point(destructor:impala.MinMaxFilterPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MinMaxFilterPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete min_;
  if (this != internal_default_instance()) delete max_;
}

void MinMaxFilterPB::ArenaDtor(void* object) {
  MinMaxFilterPB* _this = reinterpret_cast< MinMaxFilterPB* >(object);
  (void)_this;
}
void MinMaxFilterPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MinMaxFilterPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MinMaxFilterPB& MinMaxFilterPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MinMaxFilterPB_data_5fstream_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MinMaxFilterPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.MinMaxFilterPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(min_ != nullptr);
      min_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(max_ != nullptr);
      max_->Clear();
    }
  }
  ::memset(&always_true_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&always_false_) -
      reinterpret_cast<char*>(&always_true_)) + sizeof(always_false_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinMaxFilterPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool always_true = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_always_true(&has_bits);
          always_true_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool always_false = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_always_false(&has_bits);
          always_false_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.ColumnValuePB min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.ColumnValuePB max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MinMaxFilterPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.MinMaxFilterPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool always_true = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_always_true(), target);
  }

  // optional bool always_false = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_always_false(), target);
  }

  // optional .impala.ColumnValuePB min = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::min(this), target, stream);
  }

  // optional .impala.ColumnValuePB max = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::max(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.MinMaxFilterPB)
  return target;
}

size_t MinMaxFilterPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.MinMaxFilterPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .impala.ColumnValuePB min = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *min_);
    }

    // optional .impala.ColumnValuePB max = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_);
    }

    // optional bool always_true = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool always_false = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MinMaxFilterPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.MinMaxFilterPB)
  GOOGLE_DCHECK_NE(&from, this);
  const MinMaxFilterPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MinMaxFilterPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.MinMaxFilterPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.MinMaxFilterPB)
    MergeFrom(*source);
  }
}

void MinMaxFilterPB::MergeFrom(const MinMaxFilterPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.MinMaxFilterPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_min()->::impala::ColumnValuePB::MergeFrom(from._internal_min());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_max()->::impala::ColumnValuePB::MergeFrom(from._internal_max());
    }
    if (cached_has_bits & 0x00000004u) {
      always_true_ = from.always_true_;
    }
    if (cached_has_bits & 0x00000008u) {
      always_false_ = from.always_false_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MinMaxFilterPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.MinMaxFilterPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MinMaxFilterPB::CopyFrom(const MinMaxFilterPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.MinMaxFilterPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinMaxFilterPB::IsInitialized() const {
  return true;
}

void MinMaxFilterPB::InternalSwap(MinMaxFilterPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinMaxFilterPB, always_false_)
      + sizeof(MinMaxFilterPB::always_false_)
      - PROTOBUF_FIELD_OFFSET(MinMaxFilterPB, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinMaxFilterPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InListFilterPB::_Internal {
 public:
  using HasBits = decltype(std::declval<InListFilterPB>()._has_bits_);
  static void set_has_always_true(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contains_null(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void InListFilterPB::clear_value() {
  value_.Clear();
}
InListFilterPB::InListFilterPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.InListFilterPB)
}
InListFilterPB::InListFilterPB(const InListFilterPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&always_true_, &from.always_true_,
    static_cast<size_t>(reinterpret_cast<char*>(&contains_null_) -
    reinterpret_cast<char*>(&always_true_)) + sizeof(contains_null_));
  // @@protoc_insertion_point(copy_constructor:impala.InListFilterPB)
}

void InListFilterPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InListFilterPB_data_5fstream_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&always_true_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&contains_null_) -
      reinterpret_cast<char*>(&always_true_)) + sizeof(contains_null_));
}

InListFilterPB::~InListFilterPB() {
  // @@protoc_insertion_point(destructor:impala.InListFilterPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InListFilterPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InListFilterPB::ArenaDtor(void* object) {
  InListFilterPB* _this = reinterpret_cast< InListFilterPB* >(object);
  (void)_this;
}
void InListFilterPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InListFilterPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InListFilterPB& InListFilterPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InListFilterPB_data_5fstream_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InListFilterPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.InListFilterPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  ::memset(&always_true_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contains_null_) -
      reinterpret_cast<char*>(&always_true_)) + sizeof(contains_null_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InListFilterPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool always_true = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_always_true(&has_bits);
          always_true_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contains_null = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_contains_null(&has_bits);
          contains_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .impala.ColumnValuePB value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InListFilterPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.InListFilterPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool always_true = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_always_true(), target);
  }

  // optional bool contains_null = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_contains_null(), target);
  }

  // repeated .impala.ColumnValuePB value = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.InListFilterPB)
  return target;
}

size_t InListFilterPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.InListFilterPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .impala.ColumnValuePB value = 3;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool always_true = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool contains_null = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InListFilterPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.InListFilterPB)
  GOOGLE_DCHECK_NE(&from, this);
  const InListFilterPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InListFilterPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.InListFilterPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.InListFilterPB)
    MergeFrom(*source);
  }
}

void InListFilterPB::MergeFrom(const InListFilterPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.InListFilterPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      always_true_ = from.always_true_;
    }
    if (cached_has_bits & 0x00000002u) {
      contains_null_ = from.contains_null_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InListFilterPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.InListFilterPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InListFilterPB::CopyFrom(const InListFilterPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.InListFilterPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InListFilterPB::IsInitialized() const {
  return true;
}

void InListFilterPB::InternalSwap(InListFilterPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InListFilterPB, contains_null_)
      + sizeof(InListFilterPB::contains_null_)
      - PROTOBUF_FIELD_OFFSET(InListFilterPB, always_true_)>(
          reinterpret_cast<char*>(&always_true_),
          reinterpret_cast<char*>(&other->always_true_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InListFilterPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateFilterParamsPB::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateFilterParamsPB>()._has_bits_);
  static void set_has_filter_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::impala::UniqueIdPB& query_id(const UpdateFilterParamsPB* msg);
  static void set_has_query_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::impala::BloomFilterPB& bloom_filter(const UpdateFilterParamsPB* msg);
  static void set_has_bloom_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::impala::MinMaxFilterPB& min_max_filter(const UpdateFilterParamsPB* msg);
  static void set_has_min_max_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::impala::InListFilterPB& in_list_filter(const UpdateFilterParamsPB* msg);
  static void set_has_in_list_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::impala::UniqueIdPB&
UpdateFilterParamsPB::_Internal::query_id(const UpdateFilterParamsPB* msg) {
  return *msg->query_id_;
}
const ::impala::BloomFilterPB&
UpdateFilterParamsPB::_Internal::bloom_filter(const UpdateFilterParamsPB* msg) {
  return *msg->bloom_filter_;
}
const ::impala::MinMaxFilterPB&
UpdateFilterParamsPB::_Internal::min_max_filter(const UpdateFilterParamsPB* msg) {
  return *msg->min_max_filter_;
}
const ::impala::InListFilterPB&
UpdateFilterParamsPB::_Internal::in_list_filter(const UpdateFilterParamsPB* msg) {
  return *msg->in_list_filter_;
}
void UpdateFilterParamsPB::clear_query_id() {
  if (query_id_ != nullptr) query_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UpdateFilterParamsPB::UpdateFilterParamsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.UpdateFilterParamsPB)
}
UpdateFilterParamsPB::UpdateFilterParamsPB(const UpdateFilterParamsPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_query_id()) {
    query_id_ = new ::impala::UniqueIdPB(*from.query_id_);
  } else {
    query_id_ = nullptr;
  }
  if (from._internal_has_bloom_filter()) {
    bloom_filter_ = new ::impala::BloomFilterPB(*from.bloom_filter_);
  } else {
    bloom_filter_ = nullptr;
  }
  if (from._internal_has_min_max_filter()) {
    min_max_filter_ = new ::impala::MinMaxFilterPB(*from.min_max_filter_);
  } else {
    min_max_filter_ = nullptr;
  }
  if (from._internal_has_in_list_filter()) {
    in_list_filter_ = new ::impala::InListFilterPB(*from.in_list_filter_);
  } else {
    in_list_filter_ = nullptr;
  }
  filter_id_ = from.filter_id_;
  // @@protoc_insertion_point(copy_constructor:impala.UpdateFilterParamsPB)
}

void UpdateFilterParamsPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateFilterParamsPB_data_5fstream_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&query_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&filter_id_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(filter_id_));
}

UpdateFilterParamsPB::~UpdateFilterParamsPB() {
  // @@protoc_insertion_point(destructor:impala.UpdateFilterParamsPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateFilterParamsPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete query_id_;
  if (this != internal_default_instance()) delete bloom_filter_;
  if (this != internal_default_instance()) delete min_max_filter_;
  if (this != internal_default_instance()) delete in_list_filter_;
}

void UpdateFilterParamsPB::ArenaDtor(void* object) {
  UpdateFilterParamsPB* _this = reinterpret_cast< UpdateFilterParamsPB* >(object);
  (void)_this;
}
void UpdateFilterParamsPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateFilterParamsPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateFilterParamsPB& UpdateFilterParamsPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateFilterParamsPB_data_5fstream_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateFilterParamsPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.UpdateFilterParamsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(query_id_ != nullptr);
      query_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bloom_filter_ != nullptr);
      bloom_filter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(min_max_filter_ != nullptr);
      min_max_filter_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(in_list_filter_ != nullptr);
      in_list_filter_->Clear();
    }
  }
  filter_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateFilterParamsPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 filter_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_filter_id(&has_bits);
          filter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.UniqueIdPB query_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.BloomFilterPB bloom_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloom_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.MinMaxFilterPB min_max_filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_max_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.InListFilterPB in_list_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_list_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFilterParamsPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.UpdateFilterParamsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 filter_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_filter_id(), target);
  }

  // optional .impala.UniqueIdPB query_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::query_id(this), target, stream);
  }

  // optional .impala.BloomFilterPB bloom_filter = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bloom_filter(this), target, stream);
  }

  // optional .impala.MinMaxFilterPB min_max_filter = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::min_max_filter(this), target, stream);
  }

  // optional .impala.InListFilterPB in_list_filter = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::in_list_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.UpdateFilterParamsPB)
  return target;
}

size_t UpdateFilterParamsPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.UpdateFilterParamsPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .impala.UniqueIdPB query_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_id_);
    }

    // optional .impala.BloomFilterPB bloom_filter = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bloom_filter_);
    }

    // optional .impala.MinMaxFilterPB min_max_filter = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *min_max_filter_);
    }

    // optional .impala.InListFilterPB in_list_filter = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *in_list_filter_);
    }

    // optional int32 filter_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_filter_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFilterParamsPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.UpdateFilterParamsPB)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFilterParamsPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateFilterParamsPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.UpdateFilterParamsPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.UpdateFilterParamsPB)
    MergeFrom(*source);
  }
}

void UpdateFilterParamsPB::MergeFrom(const UpdateFilterParamsPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.UpdateFilterParamsPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_query_id()->::impala::UniqueIdPB::MergeFrom(from._internal_query_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bloom_filter()->::impala::BloomFilterPB::MergeFrom(from._internal_bloom_filter());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_min_max_filter()->::impala::MinMaxFilterPB::MergeFrom(from._internal_min_max_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_in_list_filter()->::impala::InListFilterPB::MergeFrom(from._internal_in_list_filter());
    }
    if (cached_has_bits & 0x00000010u) {
      filter_id_ = from.filter_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateFilterParamsPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.UpdateFilterParamsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFilterParamsPB::CopyFrom(const UpdateFilterParamsPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.UpdateFilterParamsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFilterParamsPB::IsInitialized() const {
  if (_internal_has_query_id()) {
    if (!query_id_->IsInitialized()) return false;
  }
  return true;
}

void UpdateFilterParamsPB::InternalSwap(UpdateFilterParamsPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateFilterParamsPB, filter_id_)
      + sizeof(UpdateFilterParamsPB::filter_id_)
      - PROTOBUF_FIELD_OFFSET(UpdateFilterParamsPB, query_id_)>(
          reinterpret_cast<char*>(&query_id_),
          reinterpret_cast<char*>(&other->query_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFilterParamsPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateFilterResultPB::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateFilterResultPB>()._has_bits_);
  static const ::impala::StatusPB& status(const UpdateFilterResultPB* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_receiver_latency_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::impala::StatusPB&
UpdateFilterResultPB::_Internal::status(const UpdateFilterResultPB* msg) {
  return *msg->status_;
}
void UpdateFilterResultPB::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UpdateFilterResultPB::UpdateFilterResultPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.UpdateFilterResultPB)
}
UpdateFilterResultPB::UpdateFilterResultPB(const UpdateFilterResultPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::impala::StatusPB(*from.status_);
  } else {
    status_ = nullptr;
  }
  receiver_latency_ns_ = from.receiver_latency_ns_;
  // @@protoc_insertion_point(copy_constructor:impala.UpdateFilterResultPB)
}

void UpdateFilterResultPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateFilterResultPB_data_5fstream_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&receiver_latency_ns_) -
      reinterpret_cast<char*>(&status_)) + sizeof(receiver_latency_ns_));
}

UpdateFilterResultPB::~UpdateFilterResultPB() {
  // @@protoc_insertion_point(destructor:impala.UpdateFilterResultPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateFilterResultPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void UpdateFilterResultPB::ArenaDtor(void* object) {
  UpdateFilterResultPB* _this = reinterpret_cast< UpdateFilterResultPB* >(object);
  (void)_this;
}
void UpdateFilterResultPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateFilterResultPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateFilterResultPB& UpdateFilterResultPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateFilterResultPB_data_5fstream_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateFilterResultPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.UpdateFilterResultPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  receiver_latency_ns_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateFilterResultPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.StatusPB status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 receiver_latency_ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_receiver_latency_ns(&has_bits);
          receiver_latency_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFilterResultPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.UpdateFilterResultPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.StatusPB status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // optional int64 receiver_latency_ns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_receiver_latency_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.UpdateFilterResultPB)
  return target;
}

size_t UpdateFilterResultPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.UpdateFilterResultPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .impala.StatusPB status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional int64 receiver_latency_ns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_receiver_latency_ns());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateFilterResultPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.UpdateFilterResultPB)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateFilterResultPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateFilterResultPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.UpdateFilterResultPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.UpdateFilterResultPB)
    MergeFrom(*source);
  }
}

void UpdateFilterResultPB::MergeFrom(const UpdateFilterResultPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.UpdateFilterResultPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_status()->::impala::StatusPB::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      receiver_latency_ns_ = from.receiver_latency_ns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateFilterResultPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.UpdateFilterResultPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFilterResultPB::CopyFrom(const UpdateFilterResultPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.UpdateFilterResultPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFilterResultPB::IsInitialized() const {
  return true;
}

void UpdateFilterResultPB::InternalSwap(UpdateFilterResultPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateFilterResultPB, receiver_latency_ns_)
      + sizeof(UpdateFilterResultPB::receiver_latency_ns_)
      - PROTOBUF_FIELD_OFFSET(UpdateFilterResultPB, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFilterResultPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublishFilterParamsPB::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishFilterParamsPB>()._has_bits_);
  static void set_has_filter_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::impala::UniqueIdPB& dst_query_id(const PublishFilterParamsPB* msg);
  static void set_has_dst_query_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::impala::BloomFilterPB& bloom_filter(const PublishFilterParamsPB* msg);
  static void set_has_bloom_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::impala::MinMaxFilterPB& min_max_filter(const PublishFilterParamsPB* msg);
  static void set_has_min_max_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::impala::InListFilterPB& in_list_filter(const PublishFilterParamsPB* msg);
  static void set_has_in_list_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::impala::UniqueIdPB&
PublishFilterParamsPB::_Internal::dst_query_id(const PublishFilterParamsPB* msg) {
  return *msg->dst_query_id_;
}
const ::impala::BloomFilterPB&
PublishFilterParamsPB::_Internal::bloom_filter(const PublishFilterParamsPB* msg) {
  return *msg->bloom_filter_;
}
const ::impala::MinMaxFilterPB&
PublishFilterParamsPB::_Internal::min_max_filter(const PublishFilterParamsPB* msg) {
  return *msg->min_max_filter_;
}
const ::impala::InListFilterPB&
PublishFilterParamsPB::_Internal::in_list_filter(const PublishFilterParamsPB* msg) {
  return *msg->in_list_filter_;
}
void PublishFilterParamsPB::clear_dst_query_id() {
  if (dst_query_id_ != nullptr) dst_query_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PublishFilterParamsPB::PublishFilterParamsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.PublishFilterParamsPB)
}
PublishFilterParamsPB::PublishFilterParamsPB(const PublishFilterParamsPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dst_query_id()) {
    dst_query_id_ = new ::impala::UniqueIdPB(*from.dst_query_id_);
  } else {
    dst_query_id_ = nullptr;
  }
  if (from._internal_has_bloom_filter()) {
    bloom_filter_ = new ::impala::BloomFilterPB(*from.bloom_filter_);
  } else {
    bloom_filter_ = nullptr;
  }
  if (from._internal_has_min_max_filter()) {
    min_max_filter_ = new ::impala::MinMaxFilterPB(*from.min_max_filter_);
  } else {
    min_max_filter_ = nullptr;
  }
  if (from._internal_has_in_list_filter()) {
    in_list_filter_ = new ::impala::InListFilterPB(*from.in_list_filter_);
  } else {
    in_list_filter_ = nullptr;
  }
  filter_id_ = from.filter_id_;
  // @@protoc_insertion_point(copy_constructor:impala.PublishFilterParamsPB)
}

void PublishFilterParamsPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishFilterParamsPB_data_5fstream_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dst_query_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&filter_id_) -
      reinterpret_cast<char*>(&dst_query_id_)) + sizeof(filter_id_));
}

PublishFilterParamsPB::~PublishFilterParamsPB() {
  // @@protoc_insertion_point(destructor:impala.PublishFilterParamsPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishFilterParamsPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dst_query_id_;
  if (this != internal_default_instance()) delete bloom_filter_;
  if (this != internal_default_instance()) delete min_max_filter_;
  if (this != internal_default_instance()) delete in_list_filter_;
}

void PublishFilterParamsPB::ArenaDtor(void* object) {
  PublishFilterParamsPB* _this = reinterpret_cast< PublishFilterParamsPB* >(object);
  (void)_this;
}
void PublishFilterParamsPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishFilterParamsPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishFilterParamsPB& PublishFilterParamsPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishFilterParamsPB_data_5fstream_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PublishFilterParamsPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.PublishFilterParamsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dst_query_id_ != nullptr);
      dst_query_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bloom_filter_ != nullptr);
      bloom_filter_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(min_max_filter_ != nullptr);
      min_max_filter_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(in_list_filter_ != nullptr);
      in_list_filter_->Clear();
    }
  }
  filter_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishFilterParamsPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 filter_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_filter_id(&has_bits);
          filter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.UniqueIdPB dst_query_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_query_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.BloomFilterPB bloom_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bloom_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.MinMaxFilterPB min_max_filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_max_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.InListFilterPB in_list_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_list_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishFilterParamsPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.PublishFilterParamsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 filter_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_filter_id(), target);
  }

  // optional .impala.UniqueIdPB dst_query_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dst_query_id(this), target, stream);
  }

  // optional .impala.BloomFilterPB bloom_filter = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bloom_filter(this), target, stream);
  }

  // optional .impala.MinMaxFilterPB min_max_filter = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::min_max_filter(this), target, stream);
  }

  // optional .impala.InListFilterPB in_list_filter = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::in_list_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.PublishFilterParamsPB)
  return target;
}

size_t PublishFilterParamsPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.PublishFilterParamsPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .impala.UniqueIdPB dst_query_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dst_query_id_);
    }

    // optional .impala.BloomFilterPB bloom_filter = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bloom_filter_);
    }

    // optional .impala.MinMaxFilterPB min_max_filter = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *min_max_filter_);
    }

    // optional .impala.InListFilterPB in_list_filter = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *in_list_filter_);
    }

    // optional int32 filter_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_filter_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishFilterParamsPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.PublishFilterParamsPB)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishFilterParamsPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishFilterParamsPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.PublishFilterParamsPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.PublishFilterParamsPB)
    MergeFrom(*source);
  }
}

void PublishFilterParamsPB::MergeFrom(const PublishFilterParamsPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.PublishFilterParamsPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dst_query_id()->::impala::UniqueIdPB::MergeFrom(from._internal_dst_query_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bloom_filter()->::impala::BloomFilterPB::MergeFrom(from._internal_bloom_filter());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_min_max_filter()->::impala::MinMaxFilterPB::MergeFrom(from._internal_min_max_filter());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_in_list_filter()->::impala::InListFilterPB::MergeFrom(from._internal_in_list_filter());
    }
    if (cached_has_bits & 0x00000010u) {
      filter_id_ = from.filter_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishFilterParamsPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.PublishFilterParamsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishFilterParamsPB::CopyFrom(const PublishFilterParamsPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.PublishFilterParamsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishFilterParamsPB::IsInitialized() const {
  if (_internal_has_dst_query_id()) {
    if (!dst_query_id_->IsInitialized()) return false;
  }
  return true;
}

void PublishFilterParamsPB::InternalSwap(PublishFilterParamsPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishFilterParamsPB, filter_id_)
      + sizeof(PublishFilterParamsPB::filter_id_)
      - PROTOBUF_FIELD_OFFSET(PublishFilterParamsPB, dst_query_id_)>(
          reinterpret_cast<char*>(&dst_query_id_),
          reinterpret_cast<char*>(&other->dst_query_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishFilterParamsPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublishFilterResultPB::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishFilterResultPB>()._has_bits_);
  static const ::impala::StatusPB& status(const PublishFilterResultPB* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_receiver_latency_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::impala::StatusPB&
PublishFilterResultPB::_Internal::status(const PublishFilterResultPB* msg) {
  return *msg->status_;
}
void PublishFilterResultPB::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PublishFilterResultPB::PublishFilterResultPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.PublishFilterResultPB)
}
PublishFilterResultPB::PublishFilterResultPB(const PublishFilterResultPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::impala::StatusPB(*from.status_);
  } else {
    status_ = nullptr;
  }
  receiver_latency_ns_ = from.receiver_latency_ns_;
  // @@protoc_insertion_point(copy_constructor:impala.PublishFilterResultPB)
}

void PublishFilterResultPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishFilterResultPB_data_5fstream_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&receiver_latency_ns_) -
      reinterpret_cast<char*>(&status_)) + sizeof(receiver_latency_ns_));
}

PublishFilterResultPB::~PublishFilterResultPB() {
  // @@protoc_insertion_point(destructor:impala.PublishFilterResultPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishFilterResultPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void PublishFilterResultPB::ArenaDtor(void* object) {
  PublishFilterResultPB* _this = reinterpret_cast< PublishFilterResultPB* >(object);
  (void)_this;
}
void PublishFilterResultPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishFilterResultPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishFilterResultPB& PublishFilterResultPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishFilterResultPB_data_5fstream_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PublishFilterResultPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.PublishFilterResultPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  receiver_latency_ns_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishFilterResultPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.StatusPB status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 receiver_latency_ns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_receiver_latency_ns(&has_bits);
          receiver_latency_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishFilterResultPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.PublishFilterResultPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.StatusPB status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // optional int64 receiver_latency_ns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_receiver_latency_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.PublishFilterResultPB)
  return target;
}

size_t PublishFilterResultPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.PublishFilterResultPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .impala.StatusPB status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional int64 receiver_latency_ns = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_receiver_latency_ns());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishFilterResultPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.PublishFilterResultPB)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishFilterResultPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishFilterResultPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.PublishFilterResultPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.PublishFilterResultPB)
    MergeFrom(*source);
  }
}

void PublishFilterResultPB::MergeFrom(const PublishFilterResultPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.PublishFilterResultPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_status()->::impala::StatusPB::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      receiver_latency_ns_ = from.receiver_latency_ns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishFilterResultPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.PublishFilterResultPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishFilterResultPB::CopyFrom(const PublishFilterResultPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.PublishFilterResultPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishFilterResultPB::IsInitialized() const {
  return true;
}

void PublishFilterResultPB::InternalSwap(PublishFilterResultPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishFilterResultPB, receiver_latency_ns_)
      + sizeof(PublishFilterResultPB::receiver_latency_ns_)
      - PROTOBUF_FIELD_OFFSET(PublishFilterResultPB, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishFilterResultPB::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace impala
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::impala::TransmitDataRequestPB* Arena::CreateMaybeMessage< ::impala::TransmitDataRequestPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::TransmitDataRequestPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::TransmitDataResponsePB* Arena::CreateMaybeMessage< ::impala::TransmitDataResponsePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::TransmitDataResponsePB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::EndDataStreamRequestPB* Arena::CreateMaybeMessage< ::impala::EndDataStreamRequestPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::EndDataStreamRequestPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::EndDataStreamResponsePB* Arena::CreateMaybeMessage< ::impala::EndDataStreamResponsePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::EndDataStreamResponsePB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::BloomFilterPB* Arena::CreateMaybeMessage< ::impala::BloomFilterPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::BloomFilterPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::MinMaxFilterPB* Arena::CreateMaybeMessage< ::impala::MinMaxFilterPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::MinMaxFilterPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::InListFilterPB* Arena::CreateMaybeMessage< ::impala::InListFilterPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::InListFilterPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::UpdateFilterParamsPB* Arena::CreateMaybeMessage< ::impala::UpdateFilterParamsPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::UpdateFilterParamsPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::UpdateFilterResultPB* Arena::CreateMaybeMessage< ::impala::UpdateFilterResultPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::UpdateFilterResultPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::PublishFilterParamsPB* Arena::CreateMaybeMessage< ::impala::PublishFilterParamsPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::PublishFilterParamsPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::PublishFilterResultPB* Arena::CreateMaybeMessage< ::impala::PublishFilterResultPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::PublishFilterResultPB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
