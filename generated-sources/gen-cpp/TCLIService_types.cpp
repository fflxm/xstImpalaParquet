/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "TCLIService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace apache { namespace hive { namespace service { namespace cli { namespace thrift {

int _kTProtocolVersionValues[] = {
  TProtocolVersion::HIVE_CLI_SERVICE_PROTOCOL_V1,
  TProtocolVersion::HIVE_CLI_SERVICE_PROTOCOL_V2,
  TProtocolVersion::HIVE_CLI_SERVICE_PROTOCOL_V3,
  TProtocolVersion::HIVE_CLI_SERVICE_PROTOCOL_V4,
  TProtocolVersion::HIVE_CLI_SERVICE_PROTOCOL_V5,
  TProtocolVersion::HIVE_CLI_SERVICE_PROTOCOL_V6,
  TProtocolVersion::HIVE_CLI_SERVICE_PROTOCOL_V7
};
const char* _kTProtocolVersionNames[] = {
  "HIVE_CLI_SERVICE_PROTOCOL_V1",
  "HIVE_CLI_SERVICE_PROTOCOL_V2",
  "HIVE_CLI_SERVICE_PROTOCOL_V3",
  "HIVE_CLI_SERVICE_PROTOCOL_V4",
  "HIVE_CLI_SERVICE_PROTOCOL_V5",
  "HIVE_CLI_SERVICE_PROTOCOL_V6",
  "HIVE_CLI_SERVICE_PROTOCOL_V7"
};
const std::map<int, const char*> _TProtocolVersion_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTProtocolVersionValues, _kTProtocolVersionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TProtocolVersion::type& val) {
  std::map<int, const char*>::const_iterator it = _TProtocolVersion_VALUES_TO_NAMES.find(val);
  if (it != _TProtocolVersion_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTTypeIdValues[] = {
  TTypeId::BOOLEAN_TYPE,
  TTypeId::TINYINT_TYPE,
  TTypeId::SMALLINT_TYPE,
  TTypeId::INT_TYPE,
  TTypeId::BIGINT_TYPE,
  TTypeId::FLOAT_TYPE,
  TTypeId::DOUBLE_TYPE,
  TTypeId::STRING_TYPE,
  TTypeId::TIMESTAMP_TYPE,
  TTypeId::BINARY_TYPE,
  TTypeId::ARRAY_TYPE,
  TTypeId::MAP_TYPE,
  TTypeId::STRUCT_TYPE,
  TTypeId::UNION_TYPE,
  TTypeId::USER_DEFINED_TYPE,
  TTypeId::DECIMAL_TYPE,
  TTypeId::NULL_TYPE,
  TTypeId::DATE_TYPE,
  TTypeId::VARCHAR_TYPE,
  TTypeId::CHAR_TYPE
};
const char* _kTTypeIdNames[] = {
  "BOOLEAN_TYPE",
  "TINYINT_TYPE",
  "SMALLINT_TYPE",
  "INT_TYPE",
  "BIGINT_TYPE",
  "FLOAT_TYPE",
  "DOUBLE_TYPE",
  "STRING_TYPE",
  "TIMESTAMP_TYPE",
  "BINARY_TYPE",
  "ARRAY_TYPE",
  "MAP_TYPE",
  "STRUCT_TYPE",
  "UNION_TYPE",
  "USER_DEFINED_TYPE",
  "DECIMAL_TYPE",
  "NULL_TYPE",
  "DATE_TYPE",
  "VARCHAR_TYPE",
  "CHAR_TYPE"
};
const std::map<int, const char*> _TTypeId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(20, _kTTypeIdValues, _kTTypeIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TTypeId::type& val) {
  std::map<int, const char*>::const_iterator it = _TTypeId_VALUES_TO_NAMES.find(val);
  if (it != _TTypeId_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTStatusCodeValues[] = {
  TStatusCode::SUCCESS_STATUS,
  TStatusCode::SUCCESS_WITH_INFO_STATUS,
  TStatusCode::STILL_EXECUTING_STATUS,
  TStatusCode::ERROR_STATUS,
  TStatusCode::INVALID_HANDLE_STATUS
};
const char* _kTStatusCodeNames[] = {
  "SUCCESS_STATUS",
  "SUCCESS_WITH_INFO_STATUS",
  "STILL_EXECUTING_STATUS",
  "ERROR_STATUS",
  "INVALID_HANDLE_STATUS"
};
const std::map<int, const char*> _TStatusCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTStatusCodeValues, _kTStatusCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TStatusCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TStatusCode_VALUES_TO_NAMES.find(val);
  if (it != _TStatusCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTOperationStateValues[] = {
  TOperationState::INITIALIZED_STATE,
  TOperationState::RUNNING_STATE,
  TOperationState::FINISHED_STATE,
  TOperationState::CANCELED_STATE,
  TOperationState::CLOSED_STATE,
  TOperationState::ERROR_STATE,
  TOperationState::UKNOWN_STATE,
  TOperationState::PENDING_STATE
};
const char* _kTOperationStateNames[] = {
  "INITIALIZED_STATE",
  "RUNNING_STATE",
  "FINISHED_STATE",
  "CANCELED_STATE",
  "CLOSED_STATE",
  "ERROR_STATE",
  "UKNOWN_STATE",
  "PENDING_STATE"
};
const std::map<int, const char*> _TOperationState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTOperationStateValues, _kTOperationStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TOperationState::type& val) {
  std::map<int, const char*>::const_iterator it = _TOperationState_VALUES_TO_NAMES.find(val);
  if (it != _TOperationState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTOperationTypeValues[] = {
  TOperationType::EXECUTE_STATEMENT,
  TOperationType::GET_TYPE_INFO,
  TOperationType::GET_CATALOGS,
  TOperationType::GET_SCHEMAS,
  TOperationType::GET_TABLES,
  TOperationType::GET_TABLE_TYPES,
  TOperationType::GET_COLUMNS,
  TOperationType::GET_FUNCTIONS,
  TOperationType::UNKNOWN
};
const char* _kTOperationTypeNames[] = {
  "EXECUTE_STATEMENT",
  "GET_TYPE_INFO",
  "GET_CATALOGS",
  "GET_SCHEMAS",
  "GET_TABLES",
  "GET_TABLE_TYPES",
  "GET_COLUMNS",
  "GET_FUNCTIONS",
  "UNKNOWN"
};
const std::map<int, const char*> _TOperationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kTOperationTypeValues, _kTOperationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TOperationType::type& val) {
  std::map<int, const char*>::const_iterator it = _TOperationType_VALUES_TO_NAMES.find(val);
  if (it != _TOperationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTGetInfoTypeValues[] = {
  TGetInfoType::CLI_MAX_DRIVER_CONNECTIONS,
  TGetInfoType::CLI_MAX_CONCURRENT_ACTIVITIES,
  TGetInfoType::CLI_DATA_SOURCE_NAME,
  TGetInfoType::CLI_FETCH_DIRECTION,
  TGetInfoType::CLI_SERVER_NAME,
  TGetInfoType::CLI_SEARCH_PATTERN_ESCAPE,
  TGetInfoType::CLI_DBMS_NAME,
  TGetInfoType::CLI_DBMS_VER,
  TGetInfoType::CLI_ACCESSIBLE_TABLES,
  TGetInfoType::CLI_ACCESSIBLE_PROCEDURES,
  TGetInfoType::CLI_CURSOR_COMMIT_BEHAVIOR,
  TGetInfoType::CLI_DATA_SOURCE_READ_ONLY,
  TGetInfoType::CLI_DEFAULT_TXN_ISOLATION,
  TGetInfoType::CLI_IDENTIFIER_CASE,
  TGetInfoType::CLI_IDENTIFIER_QUOTE_CHAR,
  TGetInfoType::CLI_MAX_COLUMN_NAME_LEN,
  TGetInfoType::CLI_MAX_CURSOR_NAME_LEN,
  TGetInfoType::CLI_MAX_SCHEMA_NAME_LEN,
  TGetInfoType::CLI_MAX_CATALOG_NAME_LEN,
  TGetInfoType::CLI_MAX_TABLE_NAME_LEN,
  TGetInfoType::CLI_SCROLL_CONCURRENCY,
  TGetInfoType::CLI_TXN_CAPABLE,
  TGetInfoType::CLI_USER_NAME,
  TGetInfoType::CLI_TXN_ISOLATION_OPTION,
  TGetInfoType::CLI_INTEGRITY,
  TGetInfoType::CLI_GETDATA_EXTENSIONS,
  TGetInfoType::CLI_NULL_COLLATION,
  TGetInfoType::CLI_ALTER_TABLE,
  TGetInfoType::CLI_ORDER_BY_COLUMNS_IN_SELECT,
  TGetInfoType::CLI_SPECIAL_CHARACTERS,
  TGetInfoType::CLI_MAX_COLUMNS_IN_GROUP_BY,
  TGetInfoType::CLI_MAX_COLUMNS_IN_INDEX,
  TGetInfoType::CLI_MAX_COLUMNS_IN_ORDER_BY,
  TGetInfoType::CLI_MAX_COLUMNS_IN_SELECT,
  TGetInfoType::CLI_MAX_COLUMNS_IN_TABLE,
  TGetInfoType::CLI_MAX_INDEX_SIZE,
  TGetInfoType::CLI_MAX_ROW_SIZE,
  TGetInfoType::CLI_MAX_STATEMENT_LEN,
  TGetInfoType::CLI_MAX_TABLES_IN_SELECT,
  TGetInfoType::CLI_MAX_USER_NAME_LEN,
  TGetInfoType::CLI_OJ_CAPABILITIES,
  TGetInfoType::CLI_XOPEN_CLI_YEAR,
  TGetInfoType::CLI_CURSOR_SENSITIVITY,
  TGetInfoType::CLI_DESCRIBE_PARAMETER,
  TGetInfoType::CLI_CATALOG_NAME,
  TGetInfoType::CLI_COLLATION_SEQ,
  TGetInfoType::CLI_MAX_IDENTIFIER_LEN
};
const char* _kTGetInfoTypeNames[] = {
  "CLI_MAX_DRIVER_CONNECTIONS",
  "CLI_MAX_CONCURRENT_ACTIVITIES",
  "CLI_DATA_SOURCE_NAME",
  "CLI_FETCH_DIRECTION",
  "CLI_SERVER_NAME",
  "CLI_SEARCH_PATTERN_ESCAPE",
  "CLI_DBMS_NAME",
  "CLI_DBMS_VER",
  "CLI_ACCESSIBLE_TABLES",
  "CLI_ACCESSIBLE_PROCEDURES",
  "CLI_CURSOR_COMMIT_BEHAVIOR",
  "CLI_DATA_SOURCE_READ_ONLY",
  "CLI_DEFAULT_TXN_ISOLATION",
  "CLI_IDENTIFIER_CASE",
  "CLI_IDENTIFIER_QUOTE_CHAR",
  "CLI_MAX_COLUMN_NAME_LEN",
  "CLI_MAX_CURSOR_NAME_LEN",
  "CLI_MAX_SCHEMA_NAME_LEN",
  "CLI_MAX_CATALOG_NAME_LEN",
  "CLI_MAX_TABLE_NAME_LEN",
  "CLI_SCROLL_CONCURRENCY",
  "CLI_TXN_CAPABLE",
  "CLI_USER_NAME",
  "CLI_TXN_ISOLATION_OPTION",
  "CLI_INTEGRITY",
  "CLI_GETDATA_EXTENSIONS",
  "CLI_NULL_COLLATION",
  "CLI_ALTER_TABLE",
  "CLI_ORDER_BY_COLUMNS_IN_SELECT",
  "CLI_SPECIAL_CHARACTERS",
  "CLI_MAX_COLUMNS_IN_GROUP_BY",
  "CLI_MAX_COLUMNS_IN_INDEX",
  "CLI_MAX_COLUMNS_IN_ORDER_BY",
  "CLI_MAX_COLUMNS_IN_SELECT",
  "CLI_MAX_COLUMNS_IN_TABLE",
  "CLI_MAX_INDEX_SIZE",
  "CLI_MAX_ROW_SIZE",
  "CLI_MAX_STATEMENT_LEN",
  "CLI_MAX_TABLES_IN_SELECT",
  "CLI_MAX_USER_NAME_LEN",
  "CLI_OJ_CAPABILITIES",
  "CLI_XOPEN_CLI_YEAR",
  "CLI_CURSOR_SENSITIVITY",
  "CLI_DESCRIBE_PARAMETER",
  "CLI_CATALOG_NAME",
  "CLI_COLLATION_SEQ",
  "CLI_MAX_IDENTIFIER_LEN"
};
const std::map<int, const char*> _TGetInfoType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(47, _kTGetInfoTypeValues, _kTGetInfoTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TGetInfoType::type& val) {
  std::map<int, const char*>::const_iterator it = _TGetInfoType_VALUES_TO_NAMES.find(val);
  if (it != _TGetInfoType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTFetchOrientationValues[] = {
  TFetchOrientation::FETCH_NEXT,
  TFetchOrientation::FETCH_PRIOR,
  TFetchOrientation::FETCH_RELATIVE,
  TFetchOrientation::FETCH_ABSOLUTE,
  TFetchOrientation::FETCH_FIRST,
  TFetchOrientation::FETCH_LAST
};
const char* _kTFetchOrientationNames[] = {
  "FETCH_NEXT",
  "FETCH_PRIOR",
  "FETCH_RELATIVE",
  "FETCH_ABSOLUTE",
  "FETCH_FIRST",
  "FETCH_LAST"
};
const std::map<int, const char*> _TFetchOrientation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kTFetchOrientationValues, _kTFetchOrientationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TFetchOrientation::type& val) {
  std::map<int, const char*>::const_iterator it = _TFetchOrientation_VALUES_TO_NAMES.find(val);
  if (it != _TFetchOrientation_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TTypeQualifierValue::~TTypeQualifierValue() throw() {
}


void TTypeQualifierValue::__set_i32Value(const int32_t val) {
  this->i32Value = val;
__isset.i32Value = true;
}

void TTypeQualifierValue::__set_stringValue(const std::string& val) {
  this->stringValue = val;
__isset.stringValue = true;
}
std::ostream& operator<<(std::ostream& out, const TTypeQualifierValue& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TTypeQualifierValue &a, TTypeQualifierValue &b) {
  using ::std::swap;
  swap(a.i32Value, b.i32Value);
  swap(a.stringValue, b.stringValue);
  swap(a.__isset, b.__isset);
}

TTypeQualifierValue::TTypeQualifierValue(const TTypeQualifierValue& other0) {
  i32Value = other0.i32Value;
  stringValue = other0.stringValue;
  __isset = other0.__isset;
}
TTypeQualifierValue::TTypeQualifierValue( TTypeQualifierValue&& other1) {
  i32Value = std::move(other1.i32Value);
  stringValue = std::move(other1.stringValue);
  __isset = std::move(other1.__isset);
}
TTypeQualifierValue& TTypeQualifierValue::operator=(const TTypeQualifierValue& other2) {
  i32Value = other2.i32Value;
  stringValue = other2.stringValue;
  __isset = other2.__isset;
  return *this;
}
TTypeQualifierValue& TTypeQualifierValue::operator=(TTypeQualifierValue&& other3) {
  i32Value = std::move(other3.i32Value);
  stringValue = std::move(other3.stringValue);
  __isset = std::move(other3.__isset);
  return *this;
}
void TTypeQualifierValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTypeQualifierValue(";
  out << "i32Value="; (__isset.i32Value ? (out << to_string(i32Value)) : (out << "<null>"));
  out << ", " << "stringValue="; (__isset.stringValue ? (out << to_string(stringValue)) : (out << "<null>"));
  out << ")";
}


TTypeQualifiers::~TTypeQualifiers() throw() {
}


void TTypeQualifiers::__set_qualifiers(const std::map<std::string, TTypeQualifierValue> & val) {
  this->qualifiers = val;
}
std::ostream& operator<<(std::ostream& out, const TTypeQualifiers& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TTypeQualifiers &a, TTypeQualifiers &b) {
  using ::std::swap;
  swap(a.qualifiers, b.qualifiers);
}

TTypeQualifiers::TTypeQualifiers(const TTypeQualifiers& other12) {
  qualifiers = other12.qualifiers;
}
TTypeQualifiers::TTypeQualifiers( TTypeQualifiers&& other13) {
  qualifiers = std::move(other13.qualifiers);
}
TTypeQualifiers& TTypeQualifiers::operator=(const TTypeQualifiers& other14) {
  qualifiers = other14.qualifiers;
  return *this;
}
TTypeQualifiers& TTypeQualifiers::operator=(TTypeQualifiers&& other15) {
  qualifiers = std::move(other15.qualifiers);
  return *this;
}
void TTypeQualifiers::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTypeQualifiers(";
  out << "qualifiers=" << to_string(qualifiers);
  out << ")";
}


TPrimitiveTypeEntry::~TPrimitiveTypeEntry() throw() {
}


void TPrimitiveTypeEntry::__set_type(const TTypeId::type val) {
  this->type = val;
}

void TPrimitiveTypeEntry::__set_typeQualifiers(const TTypeQualifiers& val) {
  this->typeQualifiers = val;
__isset.typeQualifiers = true;
}
std::ostream& operator<<(std::ostream& out, const TPrimitiveTypeEntry& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TPrimitiveTypeEntry &a, TPrimitiveTypeEntry &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.typeQualifiers, b.typeQualifiers);
  swap(a.__isset, b.__isset);
}

TPrimitiveTypeEntry::TPrimitiveTypeEntry(const TPrimitiveTypeEntry& other17) {
  type = other17.type;
  typeQualifiers = other17.typeQualifiers;
  __isset = other17.__isset;
}
TPrimitiveTypeEntry::TPrimitiveTypeEntry( TPrimitiveTypeEntry&& other18) {
  type = std::move(other18.type);
  typeQualifiers = std::move(other18.typeQualifiers);
  __isset = std::move(other18.__isset);
}
TPrimitiveTypeEntry& TPrimitiveTypeEntry::operator=(const TPrimitiveTypeEntry& other19) {
  type = other19.type;
  typeQualifiers = other19.typeQualifiers;
  __isset = other19.__isset;
  return *this;
}
TPrimitiveTypeEntry& TPrimitiveTypeEntry::operator=(TPrimitiveTypeEntry&& other20) {
  type = std::move(other20.type);
  typeQualifiers = std::move(other20.typeQualifiers);
  __isset = std::move(other20.__isset);
  return *this;
}
void TPrimitiveTypeEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPrimitiveTypeEntry(";
  out << "type=" << to_string(type);
  out << ", " << "typeQualifiers="; (__isset.typeQualifiers ? (out << to_string(typeQualifiers)) : (out << "<null>"));
  out << ")";
}


TArrayTypeEntry::~TArrayTypeEntry() throw() {
}


void TArrayTypeEntry::__set_objectTypePtr(const TTypeEntryPtr val) {
  this->objectTypePtr = val;
}
std::ostream& operator<<(std::ostream& out, const TArrayTypeEntry& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TArrayTypeEntry &a, TArrayTypeEntry &b) {
  using ::std::swap;
  swap(a.objectTypePtr, b.objectTypePtr);
}

TArrayTypeEntry::TArrayTypeEntry(const TArrayTypeEntry& other21) {
  objectTypePtr = other21.objectTypePtr;
}
TArrayTypeEntry::TArrayTypeEntry( TArrayTypeEntry&& other22) {
  objectTypePtr = std::move(other22.objectTypePtr);
}
TArrayTypeEntry& TArrayTypeEntry::operator=(const TArrayTypeEntry& other23) {
  objectTypePtr = other23.objectTypePtr;
  return *this;
}
TArrayTypeEntry& TArrayTypeEntry::operator=(TArrayTypeEntry&& other24) {
  objectTypePtr = std::move(other24.objectTypePtr);
  return *this;
}
void TArrayTypeEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TArrayTypeEntry(";
  out << "objectTypePtr=" << to_string(objectTypePtr);
  out << ")";
}


TMapTypeEntry::~TMapTypeEntry() throw() {
}


void TMapTypeEntry::__set_keyTypePtr(const TTypeEntryPtr val) {
  this->keyTypePtr = val;
}

void TMapTypeEntry::__set_valueTypePtr(const TTypeEntryPtr val) {
  this->valueTypePtr = val;
}
std::ostream& operator<<(std::ostream& out, const TMapTypeEntry& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TMapTypeEntry &a, TMapTypeEntry &b) {
  using ::std::swap;
  swap(a.keyTypePtr, b.keyTypePtr);
  swap(a.valueTypePtr, b.valueTypePtr);
}

TMapTypeEntry::TMapTypeEntry(const TMapTypeEntry& other25) {
  keyTypePtr = other25.keyTypePtr;
  valueTypePtr = other25.valueTypePtr;
}
TMapTypeEntry::TMapTypeEntry( TMapTypeEntry&& other26) {
  keyTypePtr = std::move(other26.keyTypePtr);
  valueTypePtr = std::move(other26.valueTypePtr);
}
TMapTypeEntry& TMapTypeEntry::operator=(const TMapTypeEntry& other27) {
  keyTypePtr = other27.keyTypePtr;
  valueTypePtr = other27.valueTypePtr;
  return *this;
}
TMapTypeEntry& TMapTypeEntry::operator=(TMapTypeEntry&& other28) {
  keyTypePtr = std::move(other28.keyTypePtr);
  valueTypePtr = std::move(other28.valueTypePtr);
  return *this;
}
void TMapTypeEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TMapTypeEntry(";
  out << "keyTypePtr=" << to_string(keyTypePtr);
  out << ", " << "valueTypePtr=" << to_string(valueTypePtr);
  out << ")";
}


TStructTypeEntry::~TStructTypeEntry() throw() {
}


void TStructTypeEntry::__set_nameToTypePtr(const std::map<std::string, TTypeEntryPtr> & val) {
  this->nameToTypePtr = val;
}
std::ostream& operator<<(std::ostream& out, const TStructTypeEntry& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TStructTypeEntry &a, TStructTypeEntry &b) {
  using ::std::swap;
  swap(a.nameToTypePtr, b.nameToTypePtr);
}

TStructTypeEntry::TStructTypeEntry(const TStructTypeEntry& other37) {
  nameToTypePtr = other37.nameToTypePtr;
}
TStructTypeEntry::TStructTypeEntry( TStructTypeEntry&& other38) {
  nameToTypePtr = std::move(other38.nameToTypePtr);
}
TStructTypeEntry& TStructTypeEntry::operator=(const TStructTypeEntry& other39) {
  nameToTypePtr = other39.nameToTypePtr;
  return *this;
}
TStructTypeEntry& TStructTypeEntry::operator=(TStructTypeEntry&& other40) {
  nameToTypePtr = std::move(other40.nameToTypePtr);
  return *this;
}
void TStructTypeEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStructTypeEntry(";
  out << "nameToTypePtr=" << to_string(nameToTypePtr);
  out << ")";
}


TUnionTypeEntry::~TUnionTypeEntry() throw() {
}


void TUnionTypeEntry::__set_nameToTypePtr(const std::map<std::string, TTypeEntryPtr> & val) {
  this->nameToTypePtr = val;
}
std::ostream& operator<<(std::ostream& out, const TUnionTypeEntry& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TUnionTypeEntry &a, TUnionTypeEntry &b) {
  using ::std::swap;
  swap(a.nameToTypePtr, b.nameToTypePtr);
}

TUnionTypeEntry::TUnionTypeEntry(const TUnionTypeEntry& other49) {
  nameToTypePtr = other49.nameToTypePtr;
}
TUnionTypeEntry::TUnionTypeEntry( TUnionTypeEntry&& other50) {
  nameToTypePtr = std::move(other50.nameToTypePtr);
}
TUnionTypeEntry& TUnionTypeEntry::operator=(const TUnionTypeEntry& other51) {
  nameToTypePtr = other51.nameToTypePtr;
  return *this;
}
TUnionTypeEntry& TUnionTypeEntry::operator=(TUnionTypeEntry&& other52) {
  nameToTypePtr = std::move(other52.nameToTypePtr);
  return *this;
}
void TUnionTypeEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TUnionTypeEntry(";
  out << "nameToTypePtr=" << to_string(nameToTypePtr);
  out << ")";
}


TUserDefinedTypeEntry::~TUserDefinedTypeEntry() throw() {
}


void TUserDefinedTypeEntry::__set_typeClassName(const std::string& val) {
  this->typeClassName = val;
}
std::ostream& operator<<(std::ostream& out, const TUserDefinedTypeEntry& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TUserDefinedTypeEntry &a, TUserDefinedTypeEntry &b) {
  using ::std::swap;
  swap(a.typeClassName, b.typeClassName);
}

TUserDefinedTypeEntry::TUserDefinedTypeEntry(const TUserDefinedTypeEntry& other53) {
  typeClassName = other53.typeClassName;
}
TUserDefinedTypeEntry::TUserDefinedTypeEntry( TUserDefinedTypeEntry&& other54) {
  typeClassName = std::move(other54.typeClassName);
}
TUserDefinedTypeEntry& TUserDefinedTypeEntry::operator=(const TUserDefinedTypeEntry& other55) {
  typeClassName = other55.typeClassName;
  return *this;
}
TUserDefinedTypeEntry& TUserDefinedTypeEntry::operator=(TUserDefinedTypeEntry&& other56) {
  typeClassName = std::move(other56.typeClassName);
  return *this;
}
void TUserDefinedTypeEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TUserDefinedTypeEntry(";
  out << "typeClassName=" << to_string(typeClassName);
  out << ")";
}


TTypeEntry::~TTypeEntry() throw() {
}


void TTypeEntry::__set_primitiveEntry(const TPrimitiveTypeEntry& val) {
  this->primitiveEntry = val;
__isset.primitiveEntry = true;
}

void TTypeEntry::__set_arrayEntry(const TArrayTypeEntry& val) {
  this->arrayEntry = val;
__isset.arrayEntry = true;
}

void TTypeEntry::__set_mapEntry(const TMapTypeEntry& val) {
  this->mapEntry = val;
__isset.mapEntry = true;
}

void TTypeEntry::__set_structEntry(const TStructTypeEntry& val) {
  this->structEntry = val;
__isset.structEntry = true;
}

void TTypeEntry::__set_unionEntry(const TUnionTypeEntry& val) {
  this->unionEntry = val;
__isset.unionEntry = true;
}

void TTypeEntry::__set_userDefinedTypeEntry(const TUserDefinedTypeEntry& val) {
  this->userDefinedTypeEntry = val;
__isset.userDefinedTypeEntry = true;
}
std::ostream& operator<<(std::ostream& out, const TTypeEntry& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TTypeEntry &a, TTypeEntry &b) {
  using ::std::swap;
  swap(a.primitiveEntry, b.primitiveEntry);
  swap(a.arrayEntry, b.arrayEntry);
  swap(a.mapEntry, b.mapEntry);
  swap(a.structEntry, b.structEntry);
  swap(a.unionEntry, b.unionEntry);
  swap(a.userDefinedTypeEntry, b.userDefinedTypeEntry);
  swap(a.__isset, b.__isset);
}

TTypeEntry::TTypeEntry(const TTypeEntry& other57) {
  primitiveEntry = other57.primitiveEntry;
  arrayEntry = other57.arrayEntry;
  mapEntry = other57.mapEntry;
  structEntry = other57.structEntry;
  unionEntry = other57.unionEntry;
  userDefinedTypeEntry = other57.userDefinedTypeEntry;
  __isset = other57.__isset;
}
TTypeEntry::TTypeEntry( TTypeEntry&& other58) {
  primitiveEntry = std::move(other58.primitiveEntry);
  arrayEntry = std::move(other58.arrayEntry);
  mapEntry = std::move(other58.mapEntry);
  structEntry = std::move(other58.structEntry);
  unionEntry = std::move(other58.unionEntry);
  userDefinedTypeEntry = std::move(other58.userDefinedTypeEntry);
  __isset = std::move(other58.__isset);
}
TTypeEntry& TTypeEntry::operator=(const TTypeEntry& other59) {
  primitiveEntry = other59.primitiveEntry;
  arrayEntry = other59.arrayEntry;
  mapEntry = other59.mapEntry;
  structEntry = other59.structEntry;
  unionEntry = other59.unionEntry;
  userDefinedTypeEntry = other59.userDefinedTypeEntry;
  __isset = other59.__isset;
  return *this;
}
TTypeEntry& TTypeEntry::operator=(TTypeEntry&& other60) {
  primitiveEntry = std::move(other60.primitiveEntry);
  arrayEntry = std::move(other60.arrayEntry);
  mapEntry = std::move(other60.mapEntry);
  structEntry = std::move(other60.structEntry);
  unionEntry = std::move(other60.unionEntry);
  userDefinedTypeEntry = std::move(other60.userDefinedTypeEntry);
  __isset = std::move(other60.__isset);
  return *this;
}
void TTypeEntry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTypeEntry(";
  out << "primitiveEntry="; (__isset.primitiveEntry ? (out << to_string(primitiveEntry)) : (out << "<null>"));
  out << ", " << "arrayEntry="; (__isset.arrayEntry ? (out << to_string(arrayEntry)) : (out << "<null>"));
  out << ", " << "mapEntry="; (__isset.mapEntry ? (out << to_string(mapEntry)) : (out << "<null>"));
  out << ", " << "structEntry="; (__isset.structEntry ? (out << to_string(structEntry)) : (out << "<null>"));
  out << ", " << "unionEntry="; (__isset.unionEntry ? (out << to_string(unionEntry)) : (out << "<null>"));
  out << ", " << "userDefinedTypeEntry="; (__isset.userDefinedTypeEntry ? (out << to_string(userDefinedTypeEntry)) : (out << "<null>"));
  out << ")";
}


TTypeDesc::~TTypeDesc() throw() {
}


void TTypeDesc::__set_types(const std::vector<TTypeEntry> & val) {
  this->types = val;
}
std::ostream& operator<<(std::ostream& out, const TTypeDesc& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TTypeDesc &a, TTypeDesc &b) {
  using ::std::swap;
  swap(a.types, b.types);
}

TTypeDesc::TTypeDesc(const TTypeDesc& other67) {
  types = other67.types;
}
TTypeDesc::TTypeDesc( TTypeDesc&& other68) {
  types = std::move(other68.types);
}
TTypeDesc& TTypeDesc::operator=(const TTypeDesc& other69) {
  types = other69.types;
  return *this;
}
TTypeDesc& TTypeDesc::operator=(TTypeDesc&& other70) {
  types = std::move(other70.types);
  return *this;
}
void TTypeDesc::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTypeDesc(";
  out << "types=" << to_string(types);
  out << ")";
}


TColumnDesc::~TColumnDesc() throw() {
}


void TColumnDesc::__set_columnName(const std::string& val) {
  this->columnName = val;
}

void TColumnDesc::__set_typeDesc(const TTypeDesc& val) {
  this->typeDesc = val;
}

void TColumnDesc::__set_position(const int32_t val) {
  this->position = val;
}

void TColumnDesc::__set_comment(const std::string& val) {
  this->comment = val;
__isset.comment = true;
}
std::ostream& operator<<(std::ostream& out, const TColumnDesc& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TColumnDesc &a, TColumnDesc &b) {
  using ::std::swap;
  swap(a.columnName, b.columnName);
  swap(a.typeDesc, b.typeDesc);
  swap(a.position, b.position);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

TColumnDesc::TColumnDesc(const TColumnDesc& other71) {
  columnName = other71.columnName;
  typeDesc = other71.typeDesc;
  position = other71.position;
  comment = other71.comment;
  __isset = other71.__isset;
}
TColumnDesc::TColumnDesc( TColumnDesc&& other72) {
  columnName = std::move(other72.columnName);
  typeDesc = std::move(other72.typeDesc);
  position = std::move(other72.position);
  comment = std::move(other72.comment);
  __isset = std::move(other72.__isset);
}
TColumnDesc& TColumnDesc::operator=(const TColumnDesc& other73) {
  columnName = other73.columnName;
  typeDesc = other73.typeDesc;
  position = other73.position;
  comment = other73.comment;
  __isset = other73.__isset;
  return *this;
}
TColumnDesc& TColumnDesc::operator=(TColumnDesc&& other74) {
  columnName = std::move(other74.columnName);
  typeDesc = std::move(other74.typeDesc);
  position = std::move(other74.position);
  comment = std::move(other74.comment);
  __isset = std::move(other74.__isset);
  return *this;
}
void TColumnDesc::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TColumnDesc(";
  out << "columnName=" << to_string(columnName);
  out << ", " << "typeDesc=" << to_string(typeDesc);
  out << ", " << "position=" << to_string(position);
  out << ", " << "comment="; (__isset.comment ? (out << to_string(comment)) : (out << "<null>"));
  out << ")";
}


TTableSchema::~TTableSchema() throw() {
}


void TTableSchema::__set_columns(const std::vector<TColumnDesc> & val) {
  this->columns = val;
}
std::ostream& operator<<(std::ostream& out, const TTableSchema& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TTableSchema &a, TTableSchema &b) {
  using ::std::swap;
  swap(a.columns, b.columns);
}

TTableSchema::TTableSchema(const TTableSchema& other81) {
  columns = other81.columns;
}
TTableSchema::TTableSchema( TTableSchema&& other82) {
  columns = std::move(other82.columns);
}
TTableSchema& TTableSchema::operator=(const TTableSchema& other83) {
  columns = other83.columns;
  return *this;
}
TTableSchema& TTableSchema::operator=(TTableSchema&& other84) {
  columns = std::move(other84.columns);
  return *this;
}
void TTableSchema::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTableSchema(";
  out << "columns=" << to_string(columns);
  out << ")";
}


TBoolValue::~TBoolValue() throw() {
}


void TBoolValue::__set_value(const bool val) {
  this->value = val;
__isset.value = true;
}
std::ostream& operator<<(std::ostream& out, const TBoolValue& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TBoolValue &a, TBoolValue &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

TBoolValue::TBoolValue(const TBoolValue& other85) {
  value = other85.value;
  __isset = other85.__isset;
}
TBoolValue::TBoolValue( TBoolValue&& other86) {
  value = std::move(other86.value);
  __isset = std::move(other86.__isset);
}
TBoolValue& TBoolValue::operator=(const TBoolValue& other87) {
  value = other87.value;
  __isset = other87.__isset;
  return *this;
}
TBoolValue& TBoolValue::operator=(TBoolValue&& other88) {
  value = std::move(other88.value);
  __isset = std::move(other88.__isset);
  return *this;
}
void TBoolValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBoolValue(";
  out << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ")";
}


TByteValue::~TByteValue() throw() {
}


void TByteValue::__set_value(const int8_t val) {
  this->value = val;
__isset.value = true;
}
std::ostream& operator<<(std::ostream& out, const TByteValue& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TByteValue &a, TByteValue &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

TByteValue::TByteValue(const TByteValue& other89) {
  value = other89.value;
  __isset = other89.__isset;
}
TByteValue::TByteValue( TByteValue&& other90) {
  value = std::move(other90.value);
  __isset = std::move(other90.__isset);
}
TByteValue& TByteValue::operator=(const TByteValue& other91) {
  value = other91.value;
  __isset = other91.__isset;
  return *this;
}
TByteValue& TByteValue::operator=(TByteValue&& other92) {
  value = std::move(other92.value);
  __isset = std::move(other92.__isset);
  return *this;
}
void TByteValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TByteValue(";
  out << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ")";
}


TI16Value::~TI16Value() throw() {
}


void TI16Value::__set_value(const int16_t val) {
  this->value = val;
__isset.value = true;
}
std::ostream& operator<<(std::ostream& out, const TI16Value& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TI16Value &a, TI16Value &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

TI16Value::TI16Value(const TI16Value& other93) {
  value = other93.value;
  __isset = other93.__isset;
}
TI16Value::TI16Value( TI16Value&& other94) {
  value = std::move(other94.value);
  __isset = std::move(other94.__isset);
}
TI16Value& TI16Value::operator=(const TI16Value& other95) {
  value = other95.value;
  __isset = other95.__isset;
  return *this;
}
TI16Value& TI16Value::operator=(TI16Value&& other96) {
  value = std::move(other96.value);
  __isset = std::move(other96.__isset);
  return *this;
}
void TI16Value::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TI16Value(";
  out << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ")";
}


TI32Value::~TI32Value() throw() {
}


void TI32Value::__set_value(const int32_t val) {
  this->value = val;
__isset.value = true;
}
std::ostream& operator<<(std::ostream& out, const TI32Value& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TI32Value &a, TI32Value &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

TI32Value::TI32Value(const TI32Value& other97) {
  value = other97.value;
  __isset = other97.__isset;
}
TI32Value::TI32Value( TI32Value&& other98) {
  value = std::move(other98.value);
  __isset = std::move(other98.__isset);
}
TI32Value& TI32Value::operator=(const TI32Value& other99) {
  value = other99.value;
  __isset = other99.__isset;
  return *this;
}
TI32Value& TI32Value::operator=(TI32Value&& other100) {
  value = std::move(other100.value);
  __isset = std::move(other100.__isset);
  return *this;
}
void TI32Value::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TI32Value(";
  out << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ")";
}


TI64Value::~TI64Value() throw() {
}


void TI64Value::__set_value(const int64_t val) {
  this->value = val;
__isset.value = true;
}
std::ostream& operator<<(std::ostream& out, const TI64Value& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TI64Value &a, TI64Value &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

TI64Value::TI64Value(const TI64Value& other101) {
  value = other101.value;
  __isset = other101.__isset;
}
TI64Value::TI64Value( TI64Value&& other102) {
  value = std::move(other102.value);
  __isset = std::move(other102.__isset);
}
TI64Value& TI64Value::operator=(const TI64Value& other103) {
  value = other103.value;
  __isset = other103.__isset;
  return *this;
}
TI64Value& TI64Value::operator=(TI64Value&& other104) {
  value = std::move(other104.value);
  __isset = std::move(other104.__isset);
  return *this;
}
void TI64Value::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TI64Value(";
  out << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ")";
}


TDoubleValue::~TDoubleValue() throw() {
}


void TDoubleValue::__set_value(const double val) {
  this->value = val;
__isset.value = true;
}
std::ostream& operator<<(std::ostream& out, const TDoubleValue& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDoubleValue &a, TDoubleValue &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

TDoubleValue::TDoubleValue(const TDoubleValue& other105) {
  value = other105.value;
  __isset = other105.__isset;
}
TDoubleValue::TDoubleValue( TDoubleValue&& other106) {
  value = std::move(other106.value);
  __isset = std::move(other106.__isset);
}
TDoubleValue& TDoubleValue::operator=(const TDoubleValue& other107) {
  value = other107.value;
  __isset = other107.__isset;
  return *this;
}
TDoubleValue& TDoubleValue::operator=(TDoubleValue&& other108) {
  value = std::move(other108.value);
  __isset = std::move(other108.__isset);
  return *this;
}
void TDoubleValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDoubleValue(";
  out << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ")";
}


TStringValue::~TStringValue() throw() {
}


void TStringValue::__set_value(const std::string& val) {
  this->value = val;
__isset.value = true;
}
std::ostream& operator<<(std::ostream& out, const TStringValue& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TStringValue &a, TStringValue &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

TStringValue::TStringValue(const TStringValue& other109) {
  value = other109.value;
  __isset = other109.__isset;
}
TStringValue::TStringValue( TStringValue&& other110) {
  value = std::move(other110.value);
  __isset = std::move(other110.__isset);
}
TStringValue& TStringValue::operator=(const TStringValue& other111) {
  value = other111.value;
  __isset = other111.__isset;
  return *this;
}
TStringValue& TStringValue::operator=(TStringValue&& other112) {
  value = std::move(other112.value);
  __isset = std::move(other112.__isset);
  return *this;
}
void TStringValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStringValue(";
  out << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ")";
}


TColumnValue::~TColumnValue() throw() {
}


void TColumnValue::__set_boolVal(const TBoolValue& val) {
  this->boolVal = val;
__isset.boolVal = true;
}

void TColumnValue::__set_byteVal(const TByteValue& val) {
  this->byteVal = val;
__isset.byteVal = true;
}

void TColumnValue::__set_i16Val(const TI16Value& val) {
  this->i16Val = val;
__isset.i16Val = true;
}

void TColumnValue::__set_i32Val(const TI32Value& val) {
  this->i32Val = val;
__isset.i32Val = true;
}

void TColumnValue::__set_i64Val(const TI64Value& val) {
  this->i64Val = val;
__isset.i64Val = true;
}

void TColumnValue::__set_doubleVal(const TDoubleValue& val) {
  this->doubleVal = val;
__isset.doubleVal = true;
}

void TColumnValue::__set_stringVal(const TStringValue& val) {
  this->stringVal = val;
__isset.stringVal = true;
}
std::ostream& operator<<(std::ostream& out, const TColumnValue& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TColumnValue &a, TColumnValue &b) {
  using ::std::swap;
  swap(a.boolVal, b.boolVal);
  swap(a.byteVal, b.byteVal);
  swap(a.i16Val, b.i16Val);
  swap(a.i32Val, b.i32Val);
  swap(a.i64Val, b.i64Val);
  swap(a.doubleVal, b.doubleVal);
  swap(a.stringVal, b.stringVal);
  swap(a.__isset, b.__isset);
}

TColumnValue::TColumnValue(const TColumnValue& other113) {
  boolVal = other113.boolVal;
  byteVal = other113.byteVal;
  i16Val = other113.i16Val;
  i32Val = other113.i32Val;
  i64Val = other113.i64Val;
  doubleVal = other113.doubleVal;
  stringVal = other113.stringVal;
  __isset = other113.__isset;
}
TColumnValue::TColumnValue( TColumnValue&& other114) {
  boolVal = std::move(other114.boolVal);
  byteVal = std::move(other114.byteVal);
  i16Val = std::move(other114.i16Val);
  i32Val = std::move(other114.i32Val);
  i64Val = std::move(other114.i64Val);
  doubleVal = std::move(other114.doubleVal);
  stringVal = std::move(other114.stringVal);
  __isset = std::move(other114.__isset);
}
TColumnValue& TColumnValue::operator=(const TColumnValue& other115) {
  boolVal = other115.boolVal;
  byteVal = other115.byteVal;
  i16Val = other115.i16Val;
  i32Val = other115.i32Val;
  i64Val = other115.i64Val;
  doubleVal = other115.doubleVal;
  stringVal = other115.stringVal;
  __isset = other115.__isset;
  return *this;
}
TColumnValue& TColumnValue::operator=(TColumnValue&& other116) {
  boolVal = std::move(other116.boolVal);
  byteVal = std::move(other116.byteVal);
  i16Val = std::move(other116.i16Val);
  i32Val = std::move(other116.i32Val);
  i64Val = std::move(other116.i64Val);
  doubleVal = std::move(other116.doubleVal);
  stringVal = std::move(other116.stringVal);
  __isset = std::move(other116.__isset);
  return *this;
}
void TColumnValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TColumnValue(";
  out << "boolVal="; (__isset.boolVal ? (out << to_string(boolVal)) : (out << "<null>"));
  out << ", " << "byteVal="; (__isset.byteVal ? (out << to_string(byteVal)) : (out << "<null>"));
  out << ", " << "i16Val="; (__isset.i16Val ? (out << to_string(i16Val)) : (out << "<null>"));
  out << ", " << "i32Val="; (__isset.i32Val ? (out << to_string(i32Val)) : (out << "<null>"));
  out << ", " << "i64Val="; (__isset.i64Val ? (out << to_string(i64Val)) : (out << "<null>"));
  out << ", " << "doubleVal="; (__isset.doubleVal ? (out << to_string(doubleVal)) : (out << "<null>"));
  out << ", " << "stringVal="; (__isset.stringVal ? (out << to_string(stringVal)) : (out << "<null>"));
  out << ")";
}


TRow::~TRow() throw() {
}


void TRow::__set_colVals(const std::vector<TColumnValue> & val) {
  this->colVals = val;
}
std::ostream& operator<<(std::ostream& out, const TRow& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TRow &a, TRow &b) {
  using ::std::swap;
  swap(a.colVals, b.colVals);
}

TRow::TRow(const TRow& other123) {
  colVals = other123.colVals;
}
TRow::TRow( TRow&& other124) {
  colVals = std::move(other124.colVals);
}
TRow& TRow::operator=(const TRow& other125) {
  colVals = other125.colVals;
  return *this;
}
TRow& TRow::operator=(TRow&& other126) {
  colVals = std::move(other126.colVals);
  return *this;
}
void TRow::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRow(";
  out << "colVals=" << to_string(colVals);
  out << ")";
}


TBoolColumn::~TBoolColumn() throw() {
}


void TBoolColumn::__set_values(const std::vector<bool> & val) {
  this->values = val;
}

void TBoolColumn::__set_nulls(const std::string& val) {
  this->nulls = val;
}
std::ostream& operator<<(std::ostream& out, const TBoolColumn& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TBoolColumn &a, TBoolColumn &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.nulls, b.nulls);
}

TBoolColumn::TBoolColumn(const TBoolColumn& other133) {
  values = other133.values;
  nulls = other133.nulls;
}
TBoolColumn::TBoolColumn( TBoolColumn&& other134) {
  values = std::move(other134.values);
  nulls = std::move(other134.nulls);
}
TBoolColumn& TBoolColumn::operator=(const TBoolColumn& other135) {
  values = other135.values;
  nulls = other135.nulls;
  return *this;
}
TBoolColumn& TBoolColumn::operator=(TBoolColumn&& other136) {
  values = std::move(other136.values);
  nulls = std::move(other136.nulls);
  return *this;
}
void TBoolColumn::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBoolColumn(";
  out << "values=" << to_string(values);
  out << ", " << "nulls=" << to_string(nulls);
  out << ")";
}


TByteColumn::~TByteColumn() throw() {
}


void TByteColumn::__set_values(const std::vector<int8_t> & val) {
  this->values = val;
}

void TByteColumn::__set_nulls(const std::string& val) {
  this->nulls = val;
}
std::ostream& operator<<(std::ostream& out, const TByteColumn& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TByteColumn &a, TByteColumn &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.nulls, b.nulls);
}

TByteColumn::TByteColumn(const TByteColumn& other143) {
  values = other143.values;
  nulls = other143.nulls;
}
TByteColumn::TByteColumn( TByteColumn&& other144) {
  values = std::move(other144.values);
  nulls = std::move(other144.nulls);
}
TByteColumn& TByteColumn::operator=(const TByteColumn& other145) {
  values = other145.values;
  nulls = other145.nulls;
  return *this;
}
TByteColumn& TByteColumn::operator=(TByteColumn&& other146) {
  values = std::move(other146.values);
  nulls = std::move(other146.nulls);
  return *this;
}
void TByteColumn::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TByteColumn(";
  out << "values=" << to_string(values);
  out << ", " << "nulls=" << to_string(nulls);
  out << ")";
}


TI16Column::~TI16Column() throw() {
}


void TI16Column::__set_values(const std::vector<int16_t> & val) {
  this->values = val;
}

void TI16Column::__set_nulls(const std::string& val) {
  this->nulls = val;
}
std::ostream& operator<<(std::ostream& out, const TI16Column& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TI16Column &a, TI16Column &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.nulls, b.nulls);
}

TI16Column::TI16Column(const TI16Column& other153) {
  values = other153.values;
  nulls = other153.nulls;
}
TI16Column::TI16Column( TI16Column&& other154) {
  values = std::move(other154.values);
  nulls = std::move(other154.nulls);
}
TI16Column& TI16Column::operator=(const TI16Column& other155) {
  values = other155.values;
  nulls = other155.nulls;
  return *this;
}
TI16Column& TI16Column::operator=(TI16Column&& other156) {
  values = std::move(other156.values);
  nulls = std::move(other156.nulls);
  return *this;
}
void TI16Column::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TI16Column(";
  out << "values=" << to_string(values);
  out << ", " << "nulls=" << to_string(nulls);
  out << ")";
}


TI32Column::~TI32Column() throw() {
}


void TI32Column::__set_values(const std::vector<int32_t> & val) {
  this->values = val;
}

void TI32Column::__set_nulls(const std::string& val) {
  this->nulls = val;
}
std::ostream& operator<<(std::ostream& out, const TI32Column& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TI32Column &a, TI32Column &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.nulls, b.nulls);
}

TI32Column::TI32Column(const TI32Column& other163) {
  values = other163.values;
  nulls = other163.nulls;
}
TI32Column::TI32Column( TI32Column&& other164) {
  values = std::move(other164.values);
  nulls = std::move(other164.nulls);
}
TI32Column& TI32Column::operator=(const TI32Column& other165) {
  values = other165.values;
  nulls = other165.nulls;
  return *this;
}
TI32Column& TI32Column::operator=(TI32Column&& other166) {
  values = std::move(other166.values);
  nulls = std::move(other166.nulls);
  return *this;
}
void TI32Column::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TI32Column(";
  out << "values=" << to_string(values);
  out << ", " << "nulls=" << to_string(nulls);
  out << ")";
}


TI64Column::~TI64Column() throw() {
}


void TI64Column::__set_values(const std::vector<int64_t> & val) {
  this->values = val;
}

void TI64Column::__set_nulls(const std::string& val) {
  this->nulls = val;
}
std::ostream& operator<<(std::ostream& out, const TI64Column& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TI64Column &a, TI64Column &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.nulls, b.nulls);
}

TI64Column::TI64Column(const TI64Column& other173) {
  values = other173.values;
  nulls = other173.nulls;
}
TI64Column::TI64Column( TI64Column&& other174) {
  values = std::move(other174.values);
  nulls = std::move(other174.nulls);
}
TI64Column& TI64Column::operator=(const TI64Column& other175) {
  values = other175.values;
  nulls = other175.nulls;
  return *this;
}
TI64Column& TI64Column::operator=(TI64Column&& other176) {
  values = std::move(other176.values);
  nulls = std::move(other176.nulls);
  return *this;
}
void TI64Column::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TI64Column(";
  out << "values=" << to_string(values);
  out << ", " << "nulls=" << to_string(nulls);
  out << ")";
}


TDoubleColumn::~TDoubleColumn() throw() {
}


void TDoubleColumn::__set_values(const std::vector<double> & val) {
  this->values = val;
}

void TDoubleColumn::__set_nulls(const std::string& val) {
  this->nulls = val;
}
std::ostream& operator<<(std::ostream& out, const TDoubleColumn& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDoubleColumn &a, TDoubleColumn &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.nulls, b.nulls);
}

TDoubleColumn::TDoubleColumn(const TDoubleColumn& other183) {
  values = other183.values;
  nulls = other183.nulls;
}
TDoubleColumn::TDoubleColumn( TDoubleColumn&& other184) {
  values = std::move(other184.values);
  nulls = std::move(other184.nulls);
}
TDoubleColumn& TDoubleColumn::operator=(const TDoubleColumn& other185) {
  values = other185.values;
  nulls = other185.nulls;
  return *this;
}
TDoubleColumn& TDoubleColumn::operator=(TDoubleColumn&& other186) {
  values = std::move(other186.values);
  nulls = std::move(other186.nulls);
  return *this;
}
void TDoubleColumn::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDoubleColumn(";
  out << "values=" << to_string(values);
  out << ", " << "nulls=" << to_string(nulls);
  out << ")";
}


TStringColumn::~TStringColumn() throw() {
}


void TStringColumn::__set_values(const std::vector<std::string> & val) {
  this->values = val;
}

void TStringColumn::__set_nulls(const std::string& val) {
  this->nulls = val;
}
std::ostream& operator<<(std::ostream& out, const TStringColumn& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TStringColumn &a, TStringColumn &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.nulls, b.nulls);
}

TStringColumn::TStringColumn(const TStringColumn& other193) {
  values = other193.values;
  nulls = other193.nulls;
}
TStringColumn::TStringColumn( TStringColumn&& other194) {
  values = std::move(other194.values);
  nulls = std::move(other194.nulls);
}
TStringColumn& TStringColumn::operator=(const TStringColumn& other195) {
  values = other195.values;
  nulls = other195.nulls;
  return *this;
}
TStringColumn& TStringColumn::operator=(TStringColumn&& other196) {
  values = std::move(other196.values);
  nulls = std::move(other196.nulls);
  return *this;
}
void TStringColumn::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStringColumn(";
  out << "values=" << to_string(values);
  out << ", " << "nulls=" << to_string(nulls);
  out << ")";
}


TBinaryColumn::~TBinaryColumn() throw() {
}


void TBinaryColumn::__set_values(const std::vector<std::string> & val) {
  this->values = val;
}

void TBinaryColumn::__set_nulls(const std::string& val) {
  this->nulls = val;
}
std::ostream& operator<<(std::ostream& out, const TBinaryColumn& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TBinaryColumn &a, TBinaryColumn &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.nulls, b.nulls);
}

TBinaryColumn::TBinaryColumn(const TBinaryColumn& other203) {
  values = other203.values;
  nulls = other203.nulls;
}
TBinaryColumn::TBinaryColumn( TBinaryColumn&& other204) {
  values = std::move(other204.values);
  nulls = std::move(other204.nulls);
}
TBinaryColumn& TBinaryColumn::operator=(const TBinaryColumn& other205) {
  values = other205.values;
  nulls = other205.nulls;
  return *this;
}
TBinaryColumn& TBinaryColumn::operator=(TBinaryColumn&& other206) {
  values = std::move(other206.values);
  nulls = std::move(other206.nulls);
  return *this;
}
void TBinaryColumn::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBinaryColumn(";
  out << "values=" << to_string(values);
  out << ", " << "nulls=" << to_string(nulls);
  out << ")";
}


TColumn::~TColumn() throw() {
}


void TColumn::__set_boolVal(const TBoolColumn& val) {
  this->boolVal = val;
__isset.boolVal = true;
}

void TColumn::__set_byteVal(const TByteColumn& val) {
  this->byteVal = val;
__isset.byteVal = true;
}

void TColumn::__set_i16Val(const TI16Column& val) {
  this->i16Val = val;
__isset.i16Val = true;
}

void TColumn::__set_i32Val(const TI32Column& val) {
  this->i32Val = val;
__isset.i32Val = true;
}

void TColumn::__set_i64Val(const TI64Column& val) {
  this->i64Val = val;
__isset.i64Val = true;
}

void TColumn::__set_doubleVal(const TDoubleColumn& val) {
  this->doubleVal = val;
__isset.doubleVal = true;
}

void TColumn::__set_stringVal(const TStringColumn& val) {
  this->stringVal = val;
__isset.stringVal = true;
}

void TColumn::__set_binaryVal(const TBinaryColumn& val) {
  this->binaryVal = val;
__isset.binaryVal = true;
}
std::ostream& operator<<(std::ostream& out, const TColumn& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TColumn &a, TColumn &b) {
  using ::std::swap;
  swap(a.boolVal, b.boolVal);
  swap(a.byteVal, b.byteVal);
  swap(a.i16Val, b.i16Val);
  swap(a.i32Val, b.i32Val);
  swap(a.i64Val, b.i64Val);
  swap(a.doubleVal, b.doubleVal);
  swap(a.stringVal, b.stringVal);
  swap(a.binaryVal, b.binaryVal);
  swap(a.__isset, b.__isset);
}

TColumn::TColumn(const TColumn& other207) {
  boolVal = other207.boolVal;
  byteVal = other207.byteVal;
  i16Val = other207.i16Val;
  i32Val = other207.i32Val;
  i64Val = other207.i64Val;
  doubleVal = other207.doubleVal;
  stringVal = other207.stringVal;
  binaryVal = other207.binaryVal;
  __isset = other207.__isset;
}
TColumn::TColumn( TColumn&& other208) {
  boolVal = std::move(other208.boolVal);
  byteVal = std::move(other208.byteVal);
  i16Val = std::move(other208.i16Val);
  i32Val = std::move(other208.i32Val);
  i64Val = std::move(other208.i64Val);
  doubleVal = std::move(other208.doubleVal);
  stringVal = std::move(other208.stringVal);
  binaryVal = std::move(other208.binaryVal);
  __isset = std::move(other208.__isset);
}
TColumn& TColumn::operator=(const TColumn& other209) {
  boolVal = other209.boolVal;
  byteVal = other209.byteVal;
  i16Val = other209.i16Val;
  i32Val = other209.i32Val;
  i64Val = other209.i64Val;
  doubleVal = other209.doubleVal;
  stringVal = other209.stringVal;
  binaryVal = other209.binaryVal;
  __isset = other209.__isset;
  return *this;
}
TColumn& TColumn::operator=(TColumn&& other210) {
  boolVal = std::move(other210.boolVal);
  byteVal = std::move(other210.byteVal);
  i16Val = std::move(other210.i16Val);
  i32Val = std::move(other210.i32Val);
  i64Val = std::move(other210.i64Val);
  doubleVal = std::move(other210.doubleVal);
  stringVal = std::move(other210.stringVal);
  binaryVal = std::move(other210.binaryVal);
  __isset = std::move(other210.__isset);
  return *this;
}
void TColumn::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TColumn(";
  out << "boolVal="; (__isset.boolVal ? (out << to_string(boolVal)) : (out << "<null>"));
  out << ", " << "byteVal="; (__isset.byteVal ? (out << to_string(byteVal)) : (out << "<null>"));
  out << ", " << "i16Val="; (__isset.i16Val ? (out << to_string(i16Val)) : (out << "<null>"));
  out << ", " << "i32Val="; (__isset.i32Val ? (out << to_string(i32Val)) : (out << "<null>"));
  out << ", " << "i64Val="; (__isset.i64Val ? (out << to_string(i64Val)) : (out << "<null>"));
  out << ", " << "doubleVal="; (__isset.doubleVal ? (out << to_string(doubleVal)) : (out << "<null>"));
  out << ", " << "stringVal="; (__isset.stringVal ? (out << to_string(stringVal)) : (out << "<null>"));
  out << ", " << "binaryVal="; (__isset.binaryVal ? (out << to_string(binaryVal)) : (out << "<null>"));
  out << ")";
}


TRowSet::~TRowSet() throw() {
}


void TRowSet::__set_startRowOffset(const int64_t val) {
  this->startRowOffset = val;
}

void TRowSet::__set_rows(const std::vector<TRow> & val) {
  this->rows = val;
}

void TRowSet::__set_columns(const std::vector<TColumn> & val) {
  this->columns = val;
__isset.columns = true;
}
std::ostream& operator<<(std::ostream& out, const TRowSet& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TRowSet &a, TRowSet &b) {
  using ::std::swap;
  swap(a.startRowOffset, b.startRowOffset);
  swap(a.rows, b.rows);
  swap(a.columns, b.columns);
  swap(a.__isset, b.__isset);
}

TRowSet::TRowSet(const TRowSet& other223) {
  startRowOffset = other223.startRowOffset;
  rows = other223.rows;
  columns = other223.columns;
  __isset = other223.__isset;
}
TRowSet::TRowSet( TRowSet&& other224) {
  startRowOffset = std::move(other224.startRowOffset);
  rows = std::move(other224.rows);
  columns = std::move(other224.columns);
  __isset = std::move(other224.__isset);
}
TRowSet& TRowSet::operator=(const TRowSet& other225) {
  startRowOffset = other225.startRowOffset;
  rows = other225.rows;
  columns = other225.columns;
  __isset = other225.__isset;
  return *this;
}
TRowSet& TRowSet::operator=(TRowSet&& other226) {
  startRowOffset = std::move(other226.startRowOffset);
  rows = std::move(other226.rows);
  columns = std::move(other226.columns);
  __isset = std::move(other226.__isset);
  return *this;
}
void TRowSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRowSet(";
  out << "startRowOffset=" << to_string(startRowOffset);
  out << ", " << "rows=" << to_string(rows);
  out << ", " << "columns="; (__isset.columns ? (out << to_string(columns)) : (out << "<null>"));
  out << ")";
}


TStatus::~TStatus() throw() {
}


void TStatus::__set_statusCode(const TStatusCode::type val) {
  this->statusCode = val;
}

void TStatus::__set_infoMessages(const std::vector<std::string> & val) {
  this->infoMessages = val;
__isset.infoMessages = true;
}

void TStatus::__set_sqlState(const std::string& val) {
  this->sqlState = val;
__isset.sqlState = true;
}

void TStatus::__set_errorCode(const int32_t val) {
  this->errorCode = val;
__isset.errorCode = true;
}

void TStatus::__set_errorMessage(const std::string& val) {
  this->errorMessage = val;
__isset.errorMessage = true;
}
std::ostream& operator<<(std::ostream& out, const TStatus& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TStatus &a, TStatus &b) {
  using ::std::swap;
  swap(a.statusCode, b.statusCode);
  swap(a.infoMessages, b.infoMessages);
  swap(a.sqlState, b.sqlState);
  swap(a.errorCode, b.errorCode);
  swap(a.errorMessage, b.errorMessage);
  swap(a.__isset, b.__isset);
}

TStatus::TStatus(const TStatus& other234) {
  statusCode = other234.statusCode;
  infoMessages = other234.infoMessages;
  sqlState = other234.sqlState;
  errorCode = other234.errorCode;
  errorMessage = other234.errorMessage;
  __isset = other234.__isset;
}
TStatus::TStatus( TStatus&& other235) {
  statusCode = std::move(other235.statusCode);
  infoMessages = std::move(other235.infoMessages);
  sqlState = std::move(other235.sqlState);
  errorCode = std::move(other235.errorCode);
  errorMessage = std::move(other235.errorMessage);
  __isset = std::move(other235.__isset);
}
TStatus& TStatus::operator=(const TStatus& other236) {
  statusCode = other236.statusCode;
  infoMessages = other236.infoMessages;
  sqlState = other236.sqlState;
  errorCode = other236.errorCode;
  errorMessage = other236.errorMessage;
  __isset = other236.__isset;
  return *this;
}
TStatus& TStatus::operator=(TStatus&& other237) {
  statusCode = std::move(other237.statusCode);
  infoMessages = std::move(other237.infoMessages);
  sqlState = std::move(other237.sqlState);
  errorCode = std::move(other237.errorCode);
  errorMessage = std::move(other237.errorMessage);
  __isset = std::move(other237.__isset);
  return *this;
}
void TStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStatus(";
  out << "statusCode=" << to_string(statusCode);
  out << ", " << "infoMessages="; (__isset.infoMessages ? (out << to_string(infoMessages)) : (out << "<null>"));
  out << ", " << "sqlState="; (__isset.sqlState ? (out << to_string(sqlState)) : (out << "<null>"));
  out << ", " << "errorCode="; (__isset.errorCode ? (out << to_string(errorCode)) : (out << "<null>"));
  out << ", " << "errorMessage="; (__isset.errorMessage ? (out << to_string(errorMessage)) : (out << "<null>"));
  out << ")";
}


THandleIdentifier::~THandleIdentifier() throw() {
}


void THandleIdentifier::__set_guid(const std::string& val) {
  this->guid = val;
}

void THandleIdentifier::__set_secret(const std::string& val) {
  this->secret = val;
}
std::ostream& operator<<(std::ostream& out, const THandleIdentifier& obj)
{
  obj.printTo(out);
  return out;
}


void swap(THandleIdentifier &a, THandleIdentifier &b) {
  using ::std::swap;
  swap(a.guid, b.guid);
  swap(a.secret, b.secret);
}

THandleIdentifier::THandleIdentifier(const THandleIdentifier& other238) {
  guid = other238.guid;
  secret = other238.secret;
}
THandleIdentifier::THandleIdentifier( THandleIdentifier&& other239) {
  guid = std::move(other239.guid);
  secret = std::move(other239.secret);
}
THandleIdentifier& THandleIdentifier::operator=(const THandleIdentifier& other240) {
  guid = other240.guid;
  secret = other240.secret;
  return *this;
}
THandleIdentifier& THandleIdentifier::operator=(THandleIdentifier&& other241) {
  guid = std::move(other241.guid);
  secret = std::move(other241.secret);
  return *this;
}
void THandleIdentifier::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "THandleIdentifier(";
  out << "guid=" << to_string(guid);
  out << ", " << "secret=" << to_string(secret);
  out << ")";
}


TSessionHandle::~TSessionHandle() throw() {
}


void TSessionHandle::__set_sessionId(const THandleIdentifier& val) {
  this->sessionId = val;
}
std::ostream& operator<<(std::ostream& out, const TSessionHandle& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TSessionHandle &a, TSessionHandle &b) {
  using ::std::swap;
  swap(a.sessionId, b.sessionId);
}

TSessionHandle::TSessionHandle(const TSessionHandle& other242) {
  sessionId = other242.sessionId;
}
TSessionHandle::TSessionHandle( TSessionHandle&& other243) {
  sessionId = std::move(other243.sessionId);
}
TSessionHandle& TSessionHandle::operator=(const TSessionHandle& other244) {
  sessionId = other244.sessionId;
  return *this;
}
TSessionHandle& TSessionHandle::operator=(TSessionHandle&& other245) {
  sessionId = std::move(other245.sessionId);
  return *this;
}
void TSessionHandle::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSessionHandle(";
  out << "sessionId=" << to_string(sessionId);
  out << ")";
}


TOperationHandle::~TOperationHandle() throw() {
}


void TOperationHandle::__set_operationId(const THandleIdentifier& val) {
  this->operationId = val;
}

void TOperationHandle::__set_operationType(const TOperationType::type val) {
  this->operationType = val;
}

void TOperationHandle::__set_hasResultSet(const bool val) {
  this->hasResultSet = val;
}

void TOperationHandle::__set_modifiedRowCount(const double val) {
  this->modifiedRowCount = val;
__isset.modifiedRowCount = true;
}
std::ostream& operator<<(std::ostream& out, const TOperationHandle& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TOperationHandle &a, TOperationHandle &b) {
  using ::std::swap;
  swap(a.operationId, b.operationId);
  swap(a.operationType, b.operationType);
  swap(a.hasResultSet, b.hasResultSet);
  swap(a.modifiedRowCount, b.modifiedRowCount);
  swap(a.__isset, b.__isset);
}

TOperationHandle::TOperationHandle(const TOperationHandle& other247) {
  operationId = other247.operationId;
  operationType = other247.operationType;
  hasResultSet = other247.hasResultSet;
  modifiedRowCount = other247.modifiedRowCount;
  __isset = other247.__isset;
}
TOperationHandle::TOperationHandle( TOperationHandle&& other248) {
  operationId = std::move(other248.operationId);
  operationType = std::move(other248.operationType);
  hasResultSet = std::move(other248.hasResultSet);
  modifiedRowCount = std::move(other248.modifiedRowCount);
  __isset = std::move(other248.__isset);
}
TOperationHandle& TOperationHandle::operator=(const TOperationHandle& other249) {
  operationId = other249.operationId;
  operationType = other249.operationType;
  hasResultSet = other249.hasResultSet;
  modifiedRowCount = other249.modifiedRowCount;
  __isset = other249.__isset;
  return *this;
}
TOperationHandle& TOperationHandle::operator=(TOperationHandle&& other250) {
  operationId = std::move(other250.operationId);
  operationType = std::move(other250.operationType);
  hasResultSet = std::move(other250.hasResultSet);
  modifiedRowCount = std::move(other250.modifiedRowCount);
  __isset = std::move(other250.__isset);
  return *this;
}
void TOperationHandle::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TOperationHandle(";
  out << "operationId=" << to_string(operationId);
  out << ", " << "operationType=" << to_string(operationType);
  out << ", " << "hasResultSet=" << to_string(hasResultSet);
  out << ", " << "modifiedRowCount="; (__isset.modifiedRowCount ? (out << to_string(modifiedRowCount)) : (out << "<null>"));
  out << ")";
}


TOpenSessionReq::~TOpenSessionReq() throw() {
}


void TOpenSessionReq::__set_client_protocol(const TProtocolVersion::type val) {
  this->client_protocol = val;
}

void TOpenSessionReq::__set_username(const std::string& val) {
  this->username = val;
__isset.username = true;
}

void TOpenSessionReq::__set_password(const std::string& val) {
  this->password = val;
__isset.password = true;
}

void TOpenSessionReq::__set_configuration(const std::map<std::string, std::string> & val) {
  this->configuration = val;
__isset.configuration = true;
}
std::ostream& operator<<(std::ostream& out, const TOpenSessionReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TOpenSessionReq &a, TOpenSessionReq &b) {
  using ::std::swap;
  swap(a.client_protocol, b.client_protocol);
  swap(a.username, b.username);
  swap(a.password, b.password);
  swap(a.configuration, b.configuration);
  swap(a.__isset, b.__isset);
}

TOpenSessionReq::TOpenSessionReq(const TOpenSessionReq& other260) {
  client_protocol = other260.client_protocol;
  username = other260.username;
  password = other260.password;
  configuration = other260.configuration;
  __isset = other260.__isset;
}
TOpenSessionReq::TOpenSessionReq( TOpenSessionReq&& other261) {
  client_protocol = std::move(other261.client_protocol);
  username = std::move(other261.username);
  password = std::move(other261.password);
  configuration = std::move(other261.configuration);
  __isset = std::move(other261.__isset);
}
TOpenSessionReq& TOpenSessionReq::operator=(const TOpenSessionReq& other262) {
  client_protocol = other262.client_protocol;
  username = other262.username;
  password = other262.password;
  configuration = other262.configuration;
  __isset = other262.__isset;
  return *this;
}
TOpenSessionReq& TOpenSessionReq::operator=(TOpenSessionReq&& other263) {
  client_protocol = std::move(other263.client_protocol);
  username = std::move(other263.username);
  password = std::move(other263.password);
  configuration = std::move(other263.configuration);
  __isset = std::move(other263.__isset);
  return *this;
}
void TOpenSessionReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TOpenSessionReq(";
  out << "client_protocol=" << to_string(client_protocol);
  out << ", " << "username="; (__isset.username ? (out << to_string(username)) : (out << "<null>"));
  out << ", " << "password="; (__isset.password ? (out << to_string(password)) : (out << "<null>"));
  out << ", " << "configuration="; (__isset.configuration ? (out << to_string(configuration)) : (out << "<null>"));
  out << ")";
}


TOpenSessionResp::~TOpenSessionResp() throw() {
}


void TOpenSessionResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TOpenSessionResp::__set_serverProtocolVersion(const TProtocolVersion::type val) {
  this->serverProtocolVersion = val;
}

void TOpenSessionResp::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
__isset.sessionHandle = true;
}

void TOpenSessionResp::__set_configuration(const std::map<std::string, std::string> & val) {
  this->configuration = val;
__isset.configuration = true;
}
std::ostream& operator<<(std::ostream& out, const TOpenSessionResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TOpenSessionResp &a, TOpenSessionResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.serverProtocolVersion, b.serverProtocolVersion);
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.configuration, b.configuration);
  swap(a.__isset, b.__isset);
}

TOpenSessionResp::TOpenSessionResp(const TOpenSessionResp& other273) {
  status = other273.status;
  serverProtocolVersion = other273.serverProtocolVersion;
  sessionHandle = other273.sessionHandle;
  configuration = other273.configuration;
  __isset = other273.__isset;
}
TOpenSessionResp::TOpenSessionResp( TOpenSessionResp&& other274) {
  status = std::move(other274.status);
  serverProtocolVersion = std::move(other274.serverProtocolVersion);
  sessionHandle = std::move(other274.sessionHandle);
  configuration = std::move(other274.configuration);
  __isset = std::move(other274.__isset);
}
TOpenSessionResp& TOpenSessionResp::operator=(const TOpenSessionResp& other275) {
  status = other275.status;
  serverProtocolVersion = other275.serverProtocolVersion;
  sessionHandle = other275.sessionHandle;
  configuration = other275.configuration;
  __isset = other275.__isset;
  return *this;
}
TOpenSessionResp& TOpenSessionResp::operator=(TOpenSessionResp&& other276) {
  status = std::move(other276.status);
  serverProtocolVersion = std::move(other276.serverProtocolVersion);
  sessionHandle = std::move(other276.sessionHandle);
  configuration = std::move(other276.configuration);
  __isset = std::move(other276.__isset);
  return *this;
}
void TOpenSessionResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TOpenSessionResp(";
  out << "status=" << to_string(status);
  out << ", " << "serverProtocolVersion=" << to_string(serverProtocolVersion);
  out << ", " << "sessionHandle="; (__isset.sessionHandle ? (out << to_string(sessionHandle)) : (out << "<null>"));
  out << ", " << "configuration="; (__isset.configuration ? (out << to_string(configuration)) : (out << "<null>"));
  out << ")";
}


TCloseSessionReq::~TCloseSessionReq() throw() {
}


void TCloseSessionReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TCloseSessionReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCloseSessionReq &a, TCloseSessionReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
}

TCloseSessionReq::TCloseSessionReq(const TCloseSessionReq& other277) {
  sessionHandle = other277.sessionHandle;
}
TCloseSessionReq::TCloseSessionReq( TCloseSessionReq&& other278) {
  sessionHandle = std::move(other278.sessionHandle);
}
TCloseSessionReq& TCloseSessionReq::operator=(const TCloseSessionReq& other279) {
  sessionHandle = other279.sessionHandle;
  return *this;
}
TCloseSessionReq& TCloseSessionReq::operator=(TCloseSessionReq&& other280) {
  sessionHandle = std::move(other280.sessionHandle);
  return *this;
}
void TCloseSessionReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCloseSessionReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ")";
}


TCloseSessionResp::~TCloseSessionResp() throw() {
}


void TCloseSessionResp::__set_status(const TStatus& val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const TCloseSessionResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCloseSessionResp &a, TCloseSessionResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
}

TCloseSessionResp::TCloseSessionResp(const TCloseSessionResp& other281) {
  status = other281.status;
}
TCloseSessionResp::TCloseSessionResp( TCloseSessionResp&& other282) {
  status = std::move(other282.status);
}
TCloseSessionResp& TCloseSessionResp::operator=(const TCloseSessionResp& other283) {
  status = other283.status;
  return *this;
}
TCloseSessionResp& TCloseSessionResp::operator=(TCloseSessionResp&& other284) {
  status = std::move(other284.status);
  return *this;
}
void TCloseSessionResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCloseSessionResp(";
  out << "status=" << to_string(status);
  out << ")";
}


TGetInfoValue::~TGetInfoValue() throw() {
}


void TGetInfoValue::__set_stringValue(const std::string& val) {
  this->stringValue = val;
__isset.stringValue = true;
}

void TGetInfoValue::__set_smallIntValue(const int16_t val) {
  this->smallIntValue = val;
__isset.smallIntValue = true;
}

void TGetInfoValue::__set_integerBitmask(const int32_t val) {
  this->integerBitmask = val;
__isset.integerBitmask = true;
}

void TGetInfoValue::__set_integerFlag(const int32_t val) {
  this->integerFlag = val;
__isset.integerFlag = true;
}

void TGetInfoValue::__set_binaryValue(const int32_t val) {
  this->binaryValue = val;
__isset.binaryValue = true;
}

void TGetInfoValue::__set_lenValue(const int64_t val) {
  this->lenValue = val;
__isset.lenValue = true;
}
std::ostream& operator<<(std::ostream& out, const TGetInfoValue& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetInfoValue &a, TGetInfoValue &b) {
  using ::std::swap;
  swap(a.stringValue, b.stringValue);
  swap(a.smallIntValue, b.smallIntValue);
  swap(a.integerBitmask, b.integerBitmask);
  swap(a.integerFlag, b.integerFlag);
  swap(a.binaryValue, b.binaryValue);
  swap(a.lenValue, b.lenValue);
  swap(a.__isset, b.__isset);
}

TGetInfoValue::TGetInfoValue(const TGetInfoValue& other285) {
  stringValue = other285.stringValue;
  smallIntValue = other285.smallIntValue;
  integerBitmask = other285.integerBitmask;
  integerFlag = other285.integerFlag;
  binaryValue = other285.binaryValue;
  lenValue = other285.lenValue;
  __isset = other285.__isset;
}
TGetInfoValue::TGetInfoValue( TGetInfoValue&& other286) {
  stringValue = std::move(other286.stringValue);
  smallIntValue = std::move(other286.smallIntValue);
  integerBitmask = std::move(other286.integerBitmask);
  integerFlag = std::move(other286.integerFlag);
  binaryValue = std::move(other286.binaryValue);
  lenValue = std::move(other286.lenValue);
  __isset = std::move(other286.__isset);
}
TGetInfoValue& TGetInfoValue::operator=(const TGetInfoValue& other287) {
  stringValue = other287.stringValue;
  smallIntValue = other287.smallIntValue;
  integerBitmask = other287.integerBitmask;
  integerFlag = other287.integerFlag;
  binaryValue = other287.binaryValue;
  lenValue = other287.lenValue;
  __isset = other287.__isset;
  return *this;
}
TGetInfoValue& TGetInfoValue::operator=(TGetInfoValue&& other288) {
  stringValue = std::move(other288.stringValue);
  smallIntValue = std::move(other288.smallIntValue);
  integerBitmask = std::move(other288.integerBitmask);
  integerFlag = std::move(other288.integerFlag);
  binaryValue = std::move(other288.binaryValue);
  lenValue = std::move(other288.lenValue);
  __isset = std::move(other288.__isset);
  return *this;
}
void TGetInfoValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetInfoValue(";
  out << "stringValue="; (__isset.stringValue ? (out << to_string(stringValue)) : (out << "<null>"));
  out << ", " << "smallIntValue="; (__isset.smallIntValue ? (out << to_string(smallIntValue)) : (out << "<null>"));
  out << ", " << "integerBitmask="; (__isset.integerBitmask ? (out << to_string(integerBitmask)) : (out << "<null>"));
  out << ", " << "integerFlag="; (__isset.integerFlag ? (out << to_string(integerFlag)) : (out << "<null>"));
  out << ", " << "binaryValue="; (__isset.binaryValue ? (out << to_string(binaryValue)) : (out << "<null>"));
  out << ", " << "lenValue="; (__isset.lenValue ? (out << to_string(lenValue)) : (out << "<null>"));
  out << ")";
}


TGetInfoReq::~TGetInfoReq() throw() {
}


void TGetInfoReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}

void TGetInfoReq::__set_infoType(const TGetInfoType::type val) {
  this->infoType = val;
}
std::ostream& operator<<(std::ostream& out, const TGetInfoReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetInfoReq &a, TGetInfoReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.infoType, b.infoType);
}

TGetInfoReq::TGetInfoReq(const TGetInfoReq& other290) {
  sessionHandle = other290.sessionHandle;
  infoType = other290.infoType;
}
TGetInfoReq::TGetInfoReq( TGetInfoReq&& other291) {
  sessionHandle = std::move(other291.sessionHandle);
  infoType = std::move(other291.infoType);
}
TGetInfoReq& TGetInfoReq::operator=(const TGetInfoReq& other292) {
  sessionHandle = other292.sessionHandle;
  infoType = other292.infoType;
  return *this;
}
TGetInfoReq& TGetInfoReq::operator=(TGetInfoReq&& other293) {
  sessionHandle = std::move(other293.sessionHandle);
  infoType = std::move(other293.infoType);
  return *this;
}
void TGetInfoReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetInfoReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ", " << "infoType=" << to_string(infoType);
  out << ")";
}


TGetInfoResp::~TGetInfoResp() throw() {
}


void TGetInfoResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetInfoResp::__set_infoValue(const TGetInfoValue& val) {
  this->infoValue = val;
}
std::ostream& operator<<(std::ostream& out, const TGetInfoResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetInfoResp &a, TGetInfoResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.infoValue, b.infoValue);
}

TGetInfoResp::TGetInfoResp(const TGetInfoResp& other294) {
  status = other294.status;
  infoValue = other294.infoValue;
}
TGetInfoResp::TGetInfoResp( TGetInfoResp&& other295) {
  status = std::move(other295.status);
  infoValue = std::move(other295.infoValue);
}
TGetInfoResp& TGetInfoResp::operator=(const TGetInfoResp& other296) {
  status = other296.status;
  infoValue = other296.infoValue;
  return *this;
}
TGetInfoResp& TGetInfoResp::operator=(TGetInfoResp&& other297) {
  status = std::move(other297.status);
  infoValue = std::move(other297.infoValue);
  return *this;
}
void TGetInfoResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetInfoResp(";
  out << "status=" << to_string(status);
  out << ", " << "infoValue=" << to_string(infoValue);
  out << ")";
}


TExecuteStatementReq::~TExecuteStatementReq() throw() {
}


void TExecuteStatementReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}

void TExecuteStatementReq::__set_statement(const std::string& val) {
  this->statement = val;
}

void TExecuteStatementReq::__set_confOverlay(const std::map<std::string, std::string> & val) {
  this->confOverlay = val;
__isset.confOverlay = true;
}

void TExecuteStatementReq::__set_runAsync(const bool val) {
  this->runAsync = val;
__isset.runAsync = true;
}
std::ostream& operator<<(std::ostream& out, const TExecuteStatementReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TExecuteStatementReq &a, TExecuteStatementReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.statement, b.statement);
  swap(a.confOverlay, b.confOverlay);
  swap(a.runAsync, b.runAsync);
  swap(a.__isset, b.__isset);
}

TExecuteStatementReq::TExecuteStatementReq(const TExecuteStatementReq& other306) {
  sessionHandle = other306.sessionHandle;
  statement = other306.statement;
  confOverlay = other306.confOverlay;
  runAsync = other306.runAsync;
  __isset = other306.__isset;
}
TExecuteStatementReq::TExecuteStatementReq( TExecuteStatementReq&& other307) {
  sessionHandle = std::move(other307.sessionHandle);
  statement = std::move(other307.statement);
  confOverlay = std::move(other307.confOverlay);
  runAsync = std::move(other307.runAsync);
  __isset = std::move(other307.__isset);
}
TExecuteStatementReq& TExecuteStatementReq::operator=(const TExecuteStatementReq& other308) {
  sessionHandle = other308.sessionHandle;
  statement = other308.statement;
  confOverlay = other308.confOverlay;
  runAsync = other308.runAsync;
  __isset = other308.__isset;
  return *this;
}
TExecuteStatementReq& TExecuteStatementReq::operator=(TExecuteStatementReq&& other309) {
  sessionHandle = std::move(other309.sessionHandle);
  statement = std::move(other309.statement);
  confOverlay = std::move(other309.confOverlay);
  runAsync = std::move(other309.runAsync);
  __isset = std::move(other309.__isset);
  return *this;
}
void TExecuteStatementReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TExecuteStatementReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ", " << "statement=" << to_string(statement);
  out << ", " << "confOverlay="; (__isset.confOverlay ? (out << to_string(confOverlay)) : (out << "<null>"));
  out << ", " << "runAsync="; (__isset.runAsync ? (out << to_string(runAsync)) : (out << "<null>"));
  out << ")";
}


TExecuteStatementResp::~TExecuteStatementResp() throw() {
}


void TExecuteStatementResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TExecuteStatementResp::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}
std::ostream& operator<<(std::ostream& out, const TExecuteStatementResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TExecuteStatementResp &a, TExecuteStatementResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.operationHandle, b.operationHandle);
  swap(a.__isset, b.__isset);
}

TExecuteStatementResp::TExecuteStatementResp(const TExecuteStatementResp& other310) {
  status = other310.status;
  operationHandle = other310.operationHandle;
  __isset = other310.__isset;
}
TExecuteStatementResp::TExecuteStatementResp( TExecuteStatementResp&& other311) {
  status = std::move(other311.status);
  operationHandle = std::move(other311.operationHandle);
  __isset = std::move(other311.__isset);
}
TExecuteStatementResp& TExecuteStatementResp::operator=(const TExecuteStatementResp& other312) {
  status = other312.status;
  operationHandle = other312.operationHandle;
  __isset = other312.__isset;
  return *this;
}
TExecuteStatementResp& TExecuteStatementResp::operator=(TExecuteStatementResp&& other313) {
  status = std::move(other313.status);
  operationHandle = std::move(other313.operationHandle);
  __isset = std::move(other313.__isset);
  return *this;
}
void TExecuteStatementResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TExecuteStatementResp(";
  out << "status=" << to_string(status);
  out << ", " << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ")";
}


TGetTypeInfoReq::~TGetTypeInfoReq() throw() {
}


void TGetTypeInfoReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TGetTypeInfoReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetTypeInfoReq &a, TGetTypeInfoReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
}

TGetTypeInfoReq::TGetTypeInfoReq(const TGetTypeInfoReq& other314) {
  sessionHandle = other314.sessionHandle;
}
TGetTypeInfoReq::TGetTypeInfoReq( TGetTypeInfoReq&& other315) {
  sessionHandle = std::move(other315.sessionHandle);
}
TGetTypeInfoReq& TGetTypeInfoReq::operator=(const TGetTypeInfoReq& other316) {
  sessionHandle = other316.sessionHandle;
  return *this;
}
TGetTypeInfoReq& TGetTypeInfoReq::operator=(TGetTypeInfoReq&& other317) {
  sessionHandle = std::move(other317.sessionHandle);
  return *this;
}
void TGetTypeInfoReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetTypeInfoReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ")";
}


TGetTypeInfoResp::~TGetTypeInfoResp() throw() {
}


void TGetTypeInfoResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetTypeInfoResp::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}
std::ostream& operator<<(std::ostream& out, const TGetTypeInfoResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetTypeInfoResp &a, TGetTypeInfoResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.operationHandle, b.operationHandle);
  swap(a.__isset, b.__isset);
}

TGetTypeInfoResp::TGetTypeInfoResp(const TGetTypeInfoResp& other318) {
  status = other318.status;
  operationHandle = other318.operationHandle;
  __isset = other318.__isset;
}
TGetTypeInfoResp::TGetTypeInfoResp( TGetTypeInfoResp&& other319) {
  status = std::move(other319.status);
  operationHandle = std::move(other319.operationHandle);
  __isset = std::move(other319.__isset);
}
TGetTypeInfoResp& TGetTypeInfoResp::operator=(const TGetTypeInfoResp& other320) {
  status = other320.status;
  operationHandle = other320.operationHandle;
  __isset = other320.__isset;
  return *this;
}
TGetTypeInfoResp& TGetTypeInfoResp::operator=(TGetTypeInfoResp&& other321) {
  status = std::move(other321.status);
  operationHandle = std::move(other321.operationHandle);
  __isset = std::move(other321.__isset);
  return *this;
}
void TGetTypeInfoResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetTypeInfoResp(";
  out << "status=" << to_string(status);
  out << ", " << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ")";
}


TGetCatalogsReq::~TGetCatalogsReq() throw() {
}


void TGetCatalogsReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TGetCatalogsReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetCatalogsReq &a, TGetCatalogsReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
}

TGetCatalogsReq::TGetCatalogsReq(const TGetCatalogsReq& other322) {
  sessionHandle = other322.sessionHandle;
}
TGetCatalogsReq::TGetCatalogsReq( TGetCatalogsReq&& other323) {
  sessionHandle = std::move(other323.sessionHandle);
}
TGetCatalogsReq& TGetCatalogsReq::operator=(const TGetCatalogsReq& other324) {
  sessionHandle = other324.sessionHandle;
  return *this;
}
TGetCatalogsReq& TGetCatalogsReq::operator=(TGetCatalogsReq&& other325) {
  sessionHandle = std::move(other325.sessionHandle);
  return *this;
}
void TGetCatalogsReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetCatalogsReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ")";
}


TGetCatalogsResp::~TGetCatalogsResp() throw() {
}


void TGetCatalogsResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetCatalogsResp::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}
std::ostream& operator<<(std::ostream& out, const TGetCatalogsResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetCatalogsResp &a, TGetCatalogsResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.operationHandle, b.operationHandle);
  swap(a.__isset, b.__isset);
}

TGetCatalogsResp::TGetCatalogsResp(const TGetCatalogsResp& other326) {
  status = other326.status;
  operationHandle = other326.operationHandle;
  __isset = other326.__isset;
}
TGetCatalogsResp::TGetCatalogsResp( TGetCatalogsResp&& other327) {
  status = std::move(other327.status);
  operationHandle = std::move(other327.operationHandle);
  __isset = std::move(other327.__isset);
}
TGetCatalogsResp& TGetCatalogsResp::operator=(const TGetCatalogsResp& other328) {
  status = other328.status;
  operationHandle = other328.operationHandle;
  __isset = other328.__isset;
  return *this;
}
TGetCatalogsResp& TGetCatalogsResp::operator=(TGetCatalogsResp&& other329) {
  status = std::move(other329.status);
  operationHandle = std::move(other329.operationHandle);
  __isset = std::move(other329.__isset);
  return *this;
}
void TGetCatalogsResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetCatalogsResp(";
  out << "status=" << to_string(status);
  out << ", " << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ")";
}


TGetSchemasReq::~TGetSchemasReq() throw() {
}


void TGetSchemasReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}

void TGetSchemasReq::__set_catalogName(const TIdentifier& val) {
  this->catalogName = val;
__isset.catalogName = true;
}

void TGetSchemasReq::__set_schemaName(const TPatternOrIdentifier& val) {
  this->schemaName = val;
__isset.schemaName = true;
}
std::ostream& operator<<(std::ostream& out, const TGetSchemasReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetSchemasReq &a, TGetSchemasReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.catalogName, b.catalogName);
  swap(a.schemaName, b.schemaName);
  swap(a.__isset, b.__isset);
}

TGetSchemasReq::TGetSchemasReq(const TGetSchemasReq& other330) {
  sessionHandle = other330.sessionHandle;
  catalogName = other330.catalogName;
  schemaName = other330.schemaName;
  __isset = other330.__isset;
}
TGetSchemasReq::TGetSchemasReq( TGetSchemasReq&& other331) {
  sessionHandle = std::move(other331.sessionHandle);
  catalogName = std::move(other331.catalogName);
  schemaName = std::move(other331.schemaName);
  __isset = std::move(other331.__isset);
}
TGetSchemasReq& TGetSchemasReq::operator=(const TGetSchemasReq& other332) {
  sessionHandle = other332.sessionHandle;
  catalogName = other332.catalogName;
  schemaName = other332.schemaName;
  __isset = other332.__isset;
  return *this;
}
TGetSchemasReq& TGetSchemasReq::operator=(TGetSchemasReq&& other333) {
  sessionHandle = std::move(other333.sessionHandle);
  catalogName = std::move(other333.catalogName);
  schemaName = std::move(other333.schemaName);
  __isset = std::move(other333.__isset);
  return *this;
}
void TGetSchemasReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetSchemasReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ", " << "catalogName="; (__isset.catalogName ? (out << to_string(catalogName)) : (out << "<null>"));
  out << ", " << "schemaName="; (__isset.schemaName ? (out << to_string(schemaName)) : (out << "<null>"));
  out << ")";
}


TGetSchemasResp::~TGetSchemasResp() throw() {
}


void TGetSchemasResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetSchemasResp::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}
std::ostream& operator<<(std::ostream& out, const TGetSchemasResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetSchemasResp &a, TGetSchemasResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.operationHandle, b.operationHandle);
  swap(a.__isset, b.__isset);
}

TGetSchemasResp::TGetSchemasResp(const TGetSchemasResp& other334) {
  status = other334.status;
  operationHandle = other334.operationHandle;
  __isset = other334.__isset;
}
TGetSchemasResp::TGetSchemasResp( TGetSchemasResp&& other335) {
  status = std::move(other335.status);
  operationHandle = std::move(other335.operationHandle);
  __isset = std::move(other335.__isset);
}
TGetSchemasResp& TGetSchemasResp::operator=(const TGetSchemasResp& other336) {
  status = other336.status;
  operationHandle = other336.operationHandle;
  __isset = other336.__isset;
  return *this;
}
TGetSchemasResp& TGetSchemasResp::operator=(TGetSchemasResp&& other337) {
  status = std::move(other337.status);
  operationHandle = std::move(other337.operationHandle);
  __isset = std::move(other337.__isset);
  return *this;
}
void TGetSchemasResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetSchemasResp(";
  out << "status=" << to_string(status);
  out << ", " << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ")";
}


TGetTablesReq::~TGetTablesReq() throw() {
}


void TGetTablesReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}

void TGetTablesReq::__set_catalogName(const TPatternOrIdentifier& val) {
  this->catalogName = val;
__isset.catalogName = true;
}

void TGetTablesReq::__set_schemaName(const TPatternOrIdentifier& val) {
  this->schemaName = val;
__isset.schemaName = true;
}

void TGetTablesReq::__set_tableName(const TPatternOrIdentifier& val) {
  this->tableName = val;
__isset.tableName = true;
}

void TGetTablesReq::__set_tableTypes(const std::vector<std::string> & val) {
  this->tableTypes = val;
__isset.tableTypes = true;
}
std::ostream& operator<<(std::ostream& out, const TGetTablesReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetTablesReq &a, TGetTablesReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.catalogName, b.catalogName);
  swap(a.schemaName, b.schemaName);
  swap(a.tableName, b.tableName);
  swap(a.tableTypes, b.tableTypes);
  swap(a.__isset, b.__isset);
}

TGetTablesReq::TGetTablesReq(const TGetTablesReq& other344) {
  sessionHandle = other344.sessionHandle;
  catalogName = other344.catalogName;
  schemaName = other344.schemaName;
  tableName = other344.tableName;
  tableTypes = other344.tableTypes;
  __isset = other344.__isset;
}
TGetTablesReq::TGetTablesReq( TGetTablesReq&& other345) {
  sessionHandle = std::move(other345.sessionHandle);
  catalogName = std::move(other345.catalogName);
  schemaName = std::move(other345.schemaName);
  tableName = std::move(other345.tableName);
  tableTypes = std::move(other345.tableTypes);
  __isset = std::move(other345.__isset);
}
TGetTablesReq& TGetTablesReq::operator=(const TGetTablesReq& other346) {
  sessionHandle = other346.sessionHandle;
  catalogName = other346.catalogName;
  schemaName = other346.schemaName;
  tableName = other346.tableName;
  tableTypes = other346.tableTypes;
  __isset = other346.__isset;
  return *this;
}
TGetTablesReq& TGetTablesReq::operator=(TGetTablesReq&& other347) {
  sessionHandle = std::move(other347.sessionHandle);
  catalogName = std::move(other347.catalogName);
  schemaName = std::move(other347.schemaName);
  tableName = std::move(other347.tableName);
  tableTypes = std::move(other347.tableTypes);
  __isset = std::move(other347.__isset);
  return *this;
}
void TGetTablesReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetTablesReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ", " << "catalogName="; (__isset.catalogName ? (out << to_string(catalogName)) : (out << "<null>"));
  out << ", " << "schemaName="; (__isset.schemaName ? (out << to_string(schemaName)) : (out << "<null>"));
  out << ", " << "tableName="; (__isset.tableName ? (out << to_string(tableName)) : (out << "<null>"));
  out << ", " << "tableTypes="; (__isset.tableTypes ? (out << to_string(tableTypes)) : (out << "<null>"));
  out << ")";
}


TGetTablesResp::~TGetTablesResp() throw() {
}


void TGetTablesResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetTablesResp::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}
std::ostream& operator<<(std::ostream& out, const TGetTablesResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetTablesResp &a, TGetTablesResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.operationHandle, b.operationHandle);
  swap(a.__isset, b.__isset);
}

TGetTablesResp::TGetTablesResp(const TGetTablesResp& other348) {
  status = other348.status;
  operationHandle = other348.operationHandle;
  __isset = other348.__isset;
}
TGetTablesResp::TGetTablesResp( TGetTablesResp&& other349) {
  status = std::move(other349.status);
  operationHandle = std::move(other349.operationHandle);
  __isset = std::move(other349.__isset);
}
TGetTablesResp& TGetTablesResp::operator=(const TGetTablesResp& other350) {
  status = other350.status;
  operationHandle = other350.operationHandle;
  __isset = other350.__isset;
  return *this;
}
TGetTablesResp& TGetTablesResp::operator=(TGetTablesResp&& other351) {
  status = std::move(other351.status);
  operationHandle = std::move(other351.operationHandle);
  __isset = std::move(other351.__isset);
  return *this;
}
void TGetTablesResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetTablesResp(";
  out << "status=" << to_string(status);
  out << ", " << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ")";
}


TGetTableTypesReq::~TGetTableTypesReq() throw() {
}


void TGetTableTypesReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TGetTableTypesReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetTableTypesReq &a, TGetTableTypesReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
}

TGetTableTypesReq::TGetTableTypesReq(const TGetTableTypesReq& other352) {
  sessionHandle = other352.sessionHandle;
}
TGetTableTypesReq::TGetTableTypesReq( TGetTableTypesReq&& other353) {
  sessionHandle = std::move(other353.sessionHandle);
}
TGetTableTypesReq& TGetTableTypesReq::operator=(const TGetTableTypesReq& other354) {
  sessionHandle = other354.sessionHandle;
  return *this;
}
TGetTableTypesReq& TGetTableTypesReq::operator=(TGetTableTypesReq&& other355) {
  sessionHandle = std::move(other355.sessionHandle);
  return *this;
}
void TGetTableTypesReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetTableTypesReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ")";
}


TGetTableTypesResp::~TGetTableTypesResp() throw() {
}


void TGetTableTypesResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetTableTypesResp::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}
std::ostream& operator<<(std::ostream& out, const TGetTableTypesResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetTableTypesResp &a, TGetTableTypesResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.operationHandle, b.operationHandle);
  swap(a.__isset, b.__isset);
}

TGetTableTypesResp::TGetTableTypesResp(const TGetTableTypesResp& other356) {
  status = other356.status;
  operationHandle = other356.operationHandle;
  __isset = other356.__isset;
}
TGetTableTypesResp::TGetTableTypesResp( TGetTableTypesResp&& other357) {
  status = std::move(other357.status);
  operationHandle = std::move(other357.operationHandle);
  __isset = std::move(other357.__isset);
}
TGetTableTypesResp& TGetTableTypesResp::operator=(const TGetTableTypesResp& other358) {
  status = other358.status;
  operationHandle = other358.operationHandle;
  __isset = other358.__isset;
  return *this;
}
TGetTableTypesResp& TGetTableTypesResp::operator=(TGetTableTypesResp&& other359) {
  status = std::move(other359.status);
  operationHandle = std::move(other359.operationHandle);
  __isset = std::move(other359.__isset);
  return *this;
}
void TGetTableTypesResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetTableTypesResp(";
  out << "status=" << to_string(status);
  out << ", " << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ")";
}


TGetColumnsReq::~TGetColumnsReq() throw() {
}


void TGetColumnsReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}

void TGetColumnsReq::__set_catalogName(const TIdentifier& val) {
  this->catalogName = val;
__isset.catalogName = true;
}

void TGetColumnsReq::__set_schemaName(const TPatternOrIdentifier& val) {
  this->schemaName = val;
__isset.schemaName = true;
}

void TGetColumnsReq::__set_tableName(const TPatternOrIdentifier& val) {
  this->tableName = val;
__isset.tableName = true;
}

void TGetColumnsReq::__set_columnName(const TPatternOrIdentifier& val) {
  this->columnName = val;
__isset.columnName = true;
}
std::ostream& operator<<(std::ostream& out, const TGetColumnsReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetColumnsReq &a, TGetColumnsReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.catalogName, b.catalogName);
  swap(a.schemaName, b.schemaName);
  swap(a.tableName, b.tableName);
  swap(a.columnName, b.columnName);
  swap(a.__isset, b.__isset);
}

TGetColumnsReq::TGetColumnsReq(const TGetColumnsReq& other360) {
  sessionHandle = other360.sessionHandle;
  catalogName = other360.catalogName;
  schemaName = other360.schemaName;
  tableName = other360.tableName;
  columnName = other360.columnName;
  __isset = other360.__isset;
}
TGetColumnsReq::TGetColumnsReq( TGetColumnsReq&& other361) {
  sessionHandle = std::move(other361.sessionHandle);
  catalogName = std::move(other361.catalogName);
  schemaName = std::move(other361.schemaName);
  tableName = std::move(other361.tableName);
  columnName = std::move(other361.columnName);
  __isset = std::move(other361.__isset);
}
TGetColumnsReq& TGetColumnsReq::operator=(const TGetColumnsReq& other362) {
  sessionHandle = other362.sessionHandle;
  catalogName = other362.catalogName;
  schemaName = other362.schemaName;
  tableName = other362.tableName;
  columnName = other362.columnName;
  __isset = other362.__isset;
  return *this;
}
TGetColumnsReq& TGetColumnsReq::operator=(TGetColumnsReq&& other363) {
  sessionHandle = std::move(other363.sessionHandle);
  catalogName = std::move(other363.catalogName);
  schemaName = std::move(other363.schemaName);
  tableName = std::move(other363.tableName);
  columnName = std::move(other363.columnName);
  __isset = std::move(other363.__isset);
  return *this;
}
void TGetColumnsReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetColumnsReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ", " << "catalogName="; (__isset.catalogName ? (out << to_string(catalogName)) : (out << "<null>"));
  out << ", " << "schemaName="; (__isset.schemaName ? (out << to_string(schemaName)) : (out << "<null>"));
  out << ", " << "tableName="; (__isset.tableName ? (out << to_string(tableName)) : (out << "<null>"));
  out << ", " << "columnName="; (__isset.columnName ? (out << to_string(columnName)) : (out << "<null>"));
  out << ")";
}


TGetColumnsResp::~TGetColumnsResp() throw() {
}


void TGetColumnsResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetColumnsResp::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}
std::ostream& operator<<(std::ostream& out, const TGetColumnsResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetColumnsResp &a, TGetColumnsResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.operationHandle, b.operationHandle);
  swap(a.__isset, b.__isset);
}

TGetColumnsResp::TGetColumnsResp(const TGetColumnsResp& other364) {
  status = other364.status;
  operationHandle = other364.operationHandle;
  __isset = other364.__isset;
}
TGetColumnsResp::TGetColumnsResp( TGetColumnsResp&& other365) {
  status = std::move(other365.status);
  operationHandle = std::move(other365.operationHandle);
  __isset = std::move(other365.__isset);
}
TGetColumnsResp& TGetColumnsResp::operator=(const TGetColumnsResp& other366) {
  status = other366.status;
  operationHandle = other366.operationHandle;
  __isset = other366.__isset;
  return *this;
}
TGetColumnsResp& TGetColumnsResp::operator=(TGetColumnsResp&& other367) {
  status = std::move(other367.status);
  operationHandle = std::move(other367.operationHandle);
  __isset = std::move(other367.__isset);
  return *this;
}
void TGetColumnsResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetColumnsResp(";
  out << "status=" << to_string(status);
  out << ", " << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ")";
}


TGetFunctionsReq::~TGetFunctionsReq() throw() {
}


void TGetFunctionsReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}

void TGetFunctionsReq::__set_catalogName(const TIdentifier& val) {
  this->catalogName = val;
__isset.catalogName = true;
}

void TGetFunctionsReq::__set_schemaName(const TPatternOrIdentifier& val) {
  this->schemaName = val;
__isset.schemaName = true;
}

void TGetFunctionsReq::__set_functionName(const TPatternOrIdentifier& val) {
  this->functionName = val;
}
std::ostream& operator<<(std::ostream& out, const TGetFunctionsReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetFunctionsReq &a, TGetFunctionsReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.catalogName, b.catalogName);
  swap(a.schemaName, b.schemaName);
  swap(a.functionName, b.functionName);
  swap(a.__isset, b.__isset);
}

TGetFunctionsReq::TGetFunctionsReq(const TGetFunctionsReq& other368) {
  sessionHandle = other368.sessionHandle;
  catalogName = other368.catalogName;
  schemaName = other368.schemaName;
  functionName = other368.functionName;
  __isset = other368.__isset;
}
TGetFunctionsReq::TGetFunctionsReq( TGetFunctionsReq&& other369) {
  sessionHandle = std::move(other369.sessionHandle);
  catalogName = std::move(other369.catalogName);
  schemaName = std::move(other369.schemaName);
  functionName = std::move(other369.functionName);
  __isset = std::move(other369.__isset);
}
TGetFunctionsReq& TGetFunctionsReq::operator=(const TGetFunctionsReq& other370) {
  sessionHandle = other370.sessionHandle;
  catalogName = other370.catalogName;
  schemaName = other370.schemaName;
  functionName = other370.functionName;
  __isset = other370.__isset;
  return *this;
}
TGetFunctionsReq& TGetFunctionsReq::operator=(TGetFunctionsReq&& other371) {
  sessionHandle = std::move(other371.sessionHandle);
  catalogName = std::move(other371.catalogName);
  schemaName = std::move(other371.schemaName);
  functionName = std::move(other371.functionName);
  __isset = std::move(other371.__isset);
  return *this;
}
void TGetFunctionsReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetFunctionsReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ", " << "catalogName="; (__isset.catalogName ? (out << to_string(catalogName)) : (out << "<null>"));
  out << ", " << "schemaName="; (__isset.schemaName ? (out << to_string(schemaName)) : (out << "<null>"));
  out << ", " << "functionName=" << to_string(functionName);
  out << ")";
}


TGetFunctionsResp::~TGetFunctionsResp() throw() {
}


void TGetFunctionsResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetFunctionsResp::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}
std::ostream& operator<<(std::ostream& out, const TGetFunctionsResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetFunctionsResp &a, TGetFunctionsResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.operationHandle, b.operationHandle);
  swap(a.__isset, b.__isset);
}

TGetFunctionsResp::TGetFunctionsResp(const TGetFunctionsResp& other372) {
  status = other372.status;
  operationHandle = other372.operationHandle;
  __isset = other372.__isset;
}
TGetFunctionsResp::TGetFunctionsResp( TGetFunctionsResp&& other373) {
  status = std::move(other373.status);
  operationHandle = std::move(other373.operationHandle);
  __isset = std::move(other373.__isset);
}
TGetFunctionsResp& TGetFunctionsResp::operator=(const TGetFunctionsResp& other374) {
  status = other374.status;
  operationHandle = other374.operationHandle;
  __isset = other374.__isset;
  return *this;
}
TGetFunctionsResp& TGetFunctionsResp::operator=(TGetFunctionsResp&& other375) {
  status = std::move(other375.status);
  operationHandle = std::move(other375.operationHandle);
  __isset = std::move(other375.__isset);
  return *this;
}
void TGetFunctionsResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetFunctionsResp(";
  out << "status=" << to_string(status);
  out << ", " << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ")";
}


TGetPrimaryKeysReq::~TGetPrimaryKeysReq() throw() {
}


void TGetPrimaryKeysReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}

void TGetPrimaryKeysReq::__set_catalogName(const TIdentifier& val) {
  this->catalogName = val;
__isset.catalogName = true;
}

void TGetPrimaryKeysReq::__set_schemaName(const TIdentifier& val) {
  this->schemaName = val;
__isset.schemaName = true;
}

void TGetPrimaryKeysReq::__set_tableName(const TIdentifier& val) {
  this->tableName = val;
__isset.tableName = true;
}
std::ostream& operator<<(std::ostream& out, const TGetPrimaryKeysReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetPrimaryKeysReq &a, TGetPrimaryKeysReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.catalogName, b.catalogName);
  swap(a.schemaName, b.schemaName);
  swap(a.tableName, b.tableName);
  swap(a.__isset, b.__isset);
}

TGetPrimaryKeysReq::TGetPrimaryKeysReq(const TGetPrimaryKeysReq& other376) {
  sessionHandle = other376.sessionHandle;
  catalogName = other376.catalogName;
  schemaName = other376.schemaName;
  tableName = other376.tableName;
  __isset = other376.__isset;
}
TGetPrimaryKeysReq::TGetPrimaryKeysReq( TGetPrimaryKeysReq&& other377) {
  sessionHandle = std::move(other377.sessionHandle);
  catalogName = std::move(other377.catalogName);
  schemaName = std::move(other377.schemaName);
  tableName = std::move(other377.tableName);
  __isset = std::move(other377.__isset);
}
TGetPrimaryKeysReq& TGetPrimaryKeysReq::operator=(const TGetPrimaryKeysReq& other378) {
  sessionHandle = other378.sessionHandle;
  catalogName = other378.catalogName;
  schemaName = other378.schemaName;
  tableName = other378.tableName;
  __isset = other378.__isset;
  return *this;
}
TGetPrimaryKeysReq& TGetPrimaryKeysReq::operator=(TGetPrimaryKeysReq&& other379) {
  sessionHandle = std::move(other379.sessionHandle);
  catalogName = std::move(other379.catalogName);
  schemaName = std::move(other379.schemaName);
  tableName = std::move(other379.tableName);
  __isset = std::move(other379.__isset);
  return *this;
}
void TGetPrimaryKeysReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetPrimaryKeysReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ", " << "catalogName="; (__isset.catalogName ? (out << to_string(catalogName)) : (out << "<null>"));
  out << ", " << "schemaName="; (__isset.schemaName ? (out << to_string(schemaName)) : (out << "<null>"));
  out << ", " << "tableName="; (__isset.tableName ? (out << to_string(tableName)) : (out << "<null>"));
  out << ")";
}


TGetPrimaryKeysResp::~TGetPrimaryKeysResp() throw() {
}


void TGetPrimaryKeysResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetPrimaryKeysResp::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}
std::ostream& operator<<(std::ostream& out, const TGetPrimaryKeysResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetPrimaryKeysResp &a, TGetPrimaryKeysResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.operationHandle, b.operationHandle);
  swap(a.__isset, b.__isset);
}

TGetPrimaryKeysResp::TGetPrimaryKeysResp(const TGetPrimaryKeysResp& other380) {
  status = other380.status;
  operationHandle = other380.operationHandle;
  __isset = other380.__isset;
}
TGetPrimaryKeysResp::TGetPrimaryKeysResp( TGetPrimaryKeysResp&& other381) {
  status = std::move(other381.status);
  operationHandle = std::move(other381.operationHandle);
  __isset = std::move(other381.__isset);
}
TGetPrimaryKeysResp& TGetPrimaryKeysResp::operator=(const TGetPrimaryKeysResp& other382) {
  status = other382.status;
  operationHandle = other382.operationHandle;
  __isset = other382.__isset;
  return *this;
}
TGetPrimaryKeysResp& TGetPrimaryKeysResp::operator=(TGetPrimaryKeysResp&& other383) {
  status = std::move(other383.status);
  operationHandle = std::move(other383.operationHandle);
  __isset = std::move(other383.__isset);
  return *this;
}
void TGetPrimaryKeysResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetPrimaryKeysResp(";
  out << "status=" << to_string(status);
  out << ", " << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ")";
}


TGetCrossReferenceReq::~TGetCrossReferenceReq() throw() {
}


void TGetCrossReferenceReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}

void TGetCrossReferenceReq::__set_parentCatalogName(const TIdentifier& val) {
  this->parentCatalogName = val;
__isset.parentCatalogName = true;
}

void TGetCrossReferenceReq::__set_parentSchemaName(const TIdentifier& val) {
  this->parentSchemaName = val;
__isset.parentSchemaName = true;
}

void TGetCrossReferenceReq::__set_parentTableName(const TIdentifier& val) {
  this->parentTableName = val;
__isset.parentTableName = true;
}

void TGetCrossReferenceReq::__set_foreignCatalogName(const TIdentifier& val) {
  this->foreignCatalogName = val;
__isset.foreignCatalogName = true;
}

void TGetCrossReferenceReq::__set_foreignSchemaName(const TIdentifier& val) {
  this->foreignSchemaName = val;
__isset.foreignSchemaName = true;
}

void TGetCrossReferenceReq::__set_foreignTableName(const TIdentifier& val) {
  this->foreignTableName = val;
__isset.foreignTableName = true;
}
std::ostream& operator<<(std::ostream& out, const TGetCrossReferenceReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetCrossReferenceReq &a, TGetCrossReferenceReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.parentCatalogName, b.parentCatalogName);
  swap(a.parentSchemaName, b.parentSchemaName);
  swap(a.parentTableName, b.parentTableName);
  swap(a.foreignCatalogName, b.foreignCatalogName);
  swap(a.foreignSchemaName, b.foreignSchemaName);
  swap(a.foreignTableName, b.foreignTableName);
  swap(a.__isset, b.__isset);
}

TGetCrossReferenceReq::TGetCrossReferenceReq(const TGetCrossReferenceReq& other384) {
  sessionHandle = other384.sessionHandle;
  parentCatalogName = other384.parentCatalogName;
  parentSchemaName = other384.parentSchemaName;
  parentTableName = other384.parentTableName;
  foreignCatalogName = other384.foreignCatalogName;
  foreignSchemaName = other384.foreignSchemaName;
  foreignTableName = other384.foreignTableName;
  __isset = other384.__isset;
}
TGetCrossReferenceReq::TGetCrossReferenceReq( TGetCrossReferenceReq&& other385) {
  sessionHandle = std::move(other385.sessionHandle);
  parentCatalogName = std::move(other385.parentCatalogName);
  parentSchemaName = std::move(other385.parentSchemaName);
  parentTableName = std::move(other385.parentTableName);
  foreignCatalogName = std::move(other385.foreignCatalogName);
  foreignSchemaName = std::move(other385.foreignSchemaName);
  foreignTableName = std::move(other385.foreignTableName);
  __isset = std::move(other385.__isset);
}
TGetCrossReferenceReq& TGetCrossReferenceReq::operator=(const TGetCrossReferenceReq& other386) {
  sessionHandle = other386.sessionHandle;
  parentCatalogName = other386.parentCatalogName;
  parentSchemaName = other386.parentSchemaName;
  parentTableName = other386.parentTableName;
  foreignCatalogName = other386.foreignCatalogName;
  foreignSchemaName = other386.foreignSchemaName;
  foreignTableName = other386.foreignTableName;
  __isset = other386.__isset;
  return *this;
}
TGetCrossReferenceReq& TGetCrossReferenceReq::operator=(TGetCrossReferenceReq&& other387) {
  sessionHandle = std::move(other387.sessionHandle);
  parentCatalogName = std::move(other387.parentCatalogName);
  parentSchemaName = std::move(other387.parentSchemaName);
  parentTableName = std::move(other387.parentTableName);
  foreignCatalogName = std::move(other387.foreignCatalogName);
  foreignSchemaName = std::move(other387.foreignSchemaName);
  foreignTableName = std::move(other387.foreignTableName);
  __isset = std::move(other387.__isset);
  return *this;
}
void TGetCrossReferenceReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetCrossReferenceReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ", " << "parentCatalogName="; (__isset.parentCatalogName ? (out << to_string(parentCatalogName)) : (out << "<null>"));
  out << ", " << "parentSchemaName="; (__isset.parentSchemaName ? (out << to_string(parentSchemaName)) : (out << "<null>"));
  out << ", " << "parentTableName="; (__isset.parentTableName ? (out << to_string(parentTableName)) : (out << "<null>"));
  out << ", " << "foreignCatalogName="; (__isset.foreignCatalogName ? (out << to_string(foreignCatalogName)) : (out << "<null>"));
  out << ", " << "foreignSchemaName="; (__isset.foreignSchemaName ? (out << to_string(foreignSchemaName)) : (out << "<null>"));
  out << ", " << "foreignTableName="; (__isset.foreignTableName ? (out << to_string(foreignTableName)) : (out << "<null>"));
  out << ")";
}


TGetCrossReferenceResp::~TGetCrossReferenceResp() throw() {
}


void TGetCrossReferenceResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetCrossReferenceResp::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}
std::ostream& operator<<(std::ostream& out, const TGetCrossReferenceResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetCrossReferenceResp &a, TGetCrossReferenceResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.operationHandle, b.operationHandle);
  swap(a.__isset, b.__isset);
}

TGetCrossReferenceResp::TGetCrossReferenceResp(const TGetCrossReferenceResp& other388) {
  status = other388.status;
  operationHandle = other388.operationHandle;
  __isset = other388.__isset;
}
TGetCrossReferenceResp::TGetCrossReferenceResp( TGetCrossReferenceResp&& other389) {
  status = std::move(other389.status);
  operationHandle = std::move(other389.operationHandle);
  __isset = std::move(other389.__isset);
}
TGetCrossReferenceResp& TGetCrossReferenceResp::operator=(const TGetCrossReferenceResp& other390) {
  status = other390.status;
  operationHandle = other390.operationHandle;
  __isset = other390.__isset;
  return *this;
}
TGetCrossReferenceResp& TGetCrossReferenceResp::operator=(TGetCrossReferenceResp&& other391) {
  status = std::move(other391.status);
  operationHandle = std::move(other391.operationHandle);
  __isset = std::move(other391.__isset);
  return *this;
}
void TGetCrossReferenceResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetCrossReferenceResp(";
  out << "status=" << to_string(status);
  out << ", " << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ")";
}


TGetOperationStatusReq::~TGetOperationStatusReq() throw() {
}


void TGetOperationStatusReq::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TGetOperationStatusReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetOperationStatusReq &a, TGetOperationStatusReq &b) {
  using ::std::swap;
  swap(a.operationHandle, b.operationHandle);
}

TGetOperationStatusReq::TGetOperationStatusReq(const TGetOperationStatusReq& other392) {
  operationHandle = other392.operationHandle;
}
TGetOperationStatusReq::TGetOperationStatusReq( TGetOperationStatusReq&& other393) {
  operationHandle = std::move(other393.operationHandle);
}
TGetOperationStatusReq& TGetOperationStatusReq::operator=(const TGetOperationStatusReq& other394) {
  operationHandle = other394.operationHandle;
  return *this;
}
TGetOperationStatusReq& TGetOperationStatusReq::operator=(TGetOperationStatusReq&& other395) {
  operationHandle = std::move(other395.operationHandle);
  return *this;
}
void TGetOperationStatusReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetOperationStatusReq(";
  out << "operationHandle=" << to_string(operationHandle);
  out << ")";
}


TGetOperationStatusResp::~TGetOperationStatusResp() throw() {
}


void TGetOperationStatusResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetOperationStatusResp::__set_operationState(const TOperationState::type val) {
  this->operationState = val;
__isset.operationState = true;
}

void TGetOperationStatusResp::__set_sqlState(const std::string& val) {
  this->sqlState = val;
__isset.sqlState = true;
}

void TGetOperationStatusResp::__set_errorCode(const int32_t val) {
  this->errorCode = val;
__isset.errorCode = true;
}

void TGetOperationStatusResp::__set_errorMessage(const std::string& val) {
  this->errorMessage = val;
__isset.errorMessage = true;
}
std::ostream& operator<<(std::ostream& out, const TGetOperationStatusResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetOperationStatusResp &a, TGetOperationStatusResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.operationState, b.operationState);
  swap(a.sqlState, b.sqlState);
  swap(a.errorCode, b.errorCode);
  swap(a.errorMessage, b.errorMessage);
  swap(a.__isset, b.__isset);
}

TGetOperationStatusResp::TGetOperationStatusResp(const TGetOperationStatusResp& other397) {
  status = other397.status;
  operationState = other397.operationState;
  sqlState = other397.sqlState;
  errorCode = other397.errorCode;
  errorMessage = other397.errorMessage;
  __isset = other397.__isset;
}
TGetOperationStatusResp::TGetOperationStatusResp( TGetOperationStatusResp&& other398) {
  status = std::move(other398.status);
  operationState = std::move(other398.operationState);
  sqlState = std::move(other398.sqlState);
  errorCode = std::move(other398.errorCode);
  errorMessage = std::move(other398.errorMessage);
  __isset = std::move(other398.__isset);
}
TGetOperationStatusResp& TGetOperationStatusResp::operator=(const TGetOperationStatusResp& other399) {
  status = other399.status;
  operationState = other399.operationState;
  sqlState = other399.sqlState;
  errorCode = other399.errorCode;
  errorMessage = other399.errorMessage;
  __isset = other399.__isset;
  return *this;
}
TGetOperationStatusResp& TGetOperationStatusResp::operator=(TGetOperationStatusResp&& other400) {
  status = std::move(other400.status);
  operationState = std::move(other400.operationState);
  sqlState = std::move(other400.sqlState);
  errorCode = std::move(other400.errorCode);
  errorMessage = std::move(other400.errorMessage);
  __isset = std::move(other400.__isset);
  return *this;
}
void TGetOperationStatusResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetOperationStatusResp(";
  out << "status=" << to_string(status);
  out << ", " << "operationState="; (__isset.operationState ? (out << to_string(operationState)) : (out << "<null>"));
  out << ", " << "sqlState="; (__isset.sqlState ? (out << to_string(sqlState)) : (out << "<null>"));
  out << ", " << "errorCode="; (__isset.errorCode ? (out << to_string(errorCode)) : (out << "<null>"));
  out << ", " << "errorMessage="; (__isset.errorMessage ? (out << to_string(errorMessage)) : (out << "<null>"));
  out << ")";
}


TCancelOperationReq::~TCancelOperationReq() throw() {
}


void TCancelOperationReq::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TCancelOperationReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCancelOperationReq &a, TCancelOperationReq &b) {
  using ::std::swap;
  swap(a.operationHandle, b.operationHandle);
}

TCancelOperationReq::TCancelOperationReq(const TCancelOperationReq& other401) {
  operationHandle = other401.operationHandle;
}
TCancelOperationReq::TCancelOperationReq( TCancelOperationReq&& other402) {
  operationHandle = std::move(other402.operationHandle);
}
TCancelOperationReq& TCancelOperationReq::operator=(const TCancelOperationReq& other403) {
  operationHandle = other403.operationHandle;
  return *this;
}
TCancelOperationReq& TCancelOperationReq::operator=(TCancelOperationReq&& other404) {
  operationHandle = std::move(other404.operationHandle);
  return *this;
}
void TCancelOperationReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCancelOperationReq(";
  out << "operationHandle=" << to_string(operationHandle);
  out << ")";
}


TCancelOperationResp::~TCancelOperationResp() throw() {
}


void TCancelOperationResp::__set_status(const TStatus& val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const TCancelOperationResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCancelOperationResp &a, TCancelOperationResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
}

TCancelOperationResp::TCancelOperationResp(const TCancelOperationResp& other405) {
  status = other405.status;
}
TCancelOperationResp::TCancelOperationResp( TCancelOperationResp&& other406) {
  status = std::move(other406.status);
}
TCancelOperationResp& TCancelOperationResp::operator=(const TCancelOperationResp& other407) {
  status = other407.status;
  return *this;
}
TCancelOperationResp& TCancelOperationResp::operator=(TCancelOperationResp&& other408) {
  status = std::move(other408.status);
  return *this;
}
void TCancelOperationResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCancelOperationResp(";
  out << "status=" << to_string(status);
  out << ")";
}


TCloseOperationReq::~TCloseOperationReq() throw() {
}


void TCloseOperationReq::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TCloseOperationReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCloseOperationReq &a, TCloseOperationReq &b) {
  using ::std::swap;
  swap(a.operationHandle, b.operationHandle);
}

TCloseOperationReq::TCloseOperationReq(const TCloseOperationReq& other409) {
  operationHandle = other409.operationHandle;
}
TCloseOperationReq::TCloseOperationReq( TCloseOperationReq&& other410) {
  operationHandle = std::move(other410.operationHandle);
}
TCloseOperationReq& TCloseOperationReq::operator=(const TCloseOperationReq& other411) {
  operationHandle = other411.operationHandle;
  return *this;
}
TCloseOperationReq& TCloseOperationReq::operator=(TCloseOperationReq&& other412) {
  operationHandle = std::move(other412.operationHandle);
  return *this;
}
void TCloseOperationReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCloseOperationReq(";
  out << "operationHandle=" << to_string(operationHandle);
  out << ")";
}


TCloseOperationResp::~TCloseOperationResp() throw() {
}


void TCloseOperationResp::__set_status(const TStatus& val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const TCloseOperationResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCloseOperationResp &a, TCloseOperationResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
}

TCloseOperationResp::TCloseOperationResp(const TCloseOperationResp& other413) {
  status = other413.status;
}
TCloseOperationResp::TCloseOperationResp( TCloseOperationResp&& other414) {
  status = std::move(other414.status);
}
TCloseOperationResp& TCloseOperationResp::operator=(const TCloseOperationResp& other415) {
  status = other415.status;
  return *this;
}
TCloseOperationResp& TCloseOperationResp::operator=(TCloseOperationResp&& other416) {
  status = std::move(other416.status);
  return *this;
}
void TCloseOperationResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCloseOperationResp(";
  out << "status=" << to_string(status);
  out << ")";
}


TGetResultSetMetadataReq::~TGetResultSetMetadataReq() throw() {
}


void TGetResultSetMetadataReq::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TGetResultSetMetadataReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetResultSetMetadataReq &a, TGetResultSetMetadataReq &b) {
  using ::std::swap;
  swap(a.operationHandle, b.operationHandle);
}

TGetResultSetMetadataReq::TGetResultSetMetadataReq(const TGetResultSetMetadataReq& other417) {
  operationHandle = other417.operationHandle;
}
TGetResultSetMetadataReq::TGetResultSetMetadataReq( TGetResultSetMetadataReq&& other418) {
  operationHandle = std::move(other418.operationHandle);
}
TGetResultSetMetadataReq& TGetResultSetMetadataReq::operator=(const TGetResultSetMetadataReq& other419) {
  operationHandle = other419.operationHandle;
  return *this;
}
TGetResultSetMetadataReq& TGetResultSetMetadataReq::operator=(TGetResultSetMetadataReq&& other420) {
  operationHandle = std::move(other420.operationHandle);
  return *this;
}
void TGetResultSetMetadataReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetResultSetMetadataReq(";
  out << "operationHandle=" << to_string(operationHandle);
  out << ")";
}


TGetResultSetMetadataResp::~TGetResultSetMetadataResp() throw() {
}


void TGetResultSetMetadataResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetResultSetMetadataResp::__set_schema(const TTableSchema& val) {
  this->schema = val;
__isset.schema = true;
}
std::ostream& operator<<(std::ostream& out, const TGetResultSetMetadataResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetResultSetMetadataResp &a, TGetResultSetMetadataResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.schema, b.schema);
  swap(a.__isset, b.__isset);
}

TGetResultSetMetadataResp::TGetResultSetMetadataResp(const TGetResultSetMetadataResp& other421) {
  status = other421.status;
  schema = other421.schema;
  __isset = other421.__isset;
}
TGetResultSetMetadataResp::TGetResultSetMetadataResp( TGetResultSetMetadataResp&& other422) {
  status = std::move(other422.status);
  schema = std::move(other422.schema);
  __isset = std::move(other422.__isset);
}
TGetResultSetMetadataResp& TGetResultSetMetadataResp::operator=(const TGetResultSetMetadataResp& other423) {
  status = other423.status;
  schema = other423.schema;
  __isset = other423.__isset;
  return *this;
}
TGetResultSetMetadataResp& TGetResultSetMetadataResp::operator=(TGetResultSetMetadataResp&& other424) {
  status = std::move(other424.status);
  schema = std::move(other424.schema);
  __isset = std::move(other424.__isset);
  return *this;
}
void TGetResultSetMetadataResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetResultSetMetadataResp(";
  out << "status=" << to_string(status);
  out << ", " << "schema="; (__isset.schema ? (out << to_string(schema)) : (out << "<null>"));
  out << ")";
}


TFetchResultsReq::~TFetchResultsReq() throw() {
}


void TFetchResultsReq::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
}

void TFetchResultsReq::__set_orientation(const TFetchOrientation::type val) {
  this->orientation = val;
}

void TFetchResultsReq::__set_maxRows(const int64_t val) {
  this->maxRows = val;
}

void TFetchResultsReq::__set_fetchType(const int16_t val) {
  this->fetchType = val;
__isset.fetchType = true;
}
std::ostream& operator<<(std::ostream& out, const TFetchResultsReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TFetchResultsReq &a, TFetchResultsReq &b) {
  using ::std::swap;
  swap(a.operationHandle, b.operationHandle);
  swap(a.orientation, b.orientation);
  swap(a.maxRows, b.maxRows);
  swap(a.fetchType, b.fetchType);
  swap(a.__isset, b.__isset);
}

TFetchResultsReq::TFetchResultsReq(const TFetchResultsReq& other426) {
  operationHandle = other426.operationHandle;
  orientation = other426.orientation;
  maxRows = other426.maxRows;
  fetchType = other426.fetchType;
  __isset = other426.__isset;
}
TFetchResultsReq::TFetchResultsReq( TFetchResultsReq&& other427) {
  operationHandle = std::move(other427.operationHandle);
  orientation = std::move(other427.orientation);
  maxRows = std::move(other427.maxRows);
  fetchType = std::move(other427.fetchType);
  __isset = std::move(other427.__isset);
}
TFetchResultsReq& TFetchResultsReq::operator=(const TFetchResultsReq& other428) {
  operationHandle = other428.operationHandle;
  orientation = other428.orientation;
  maxRows = other428.maxRows;
  fetchType = other428.fetchType;
  __isset = other428.__isset;
  return *this;
}
TFetchResultsReq& TFetchResultsReq::operator=(TFetchResultsReq&& other429) {
  operationHandle = std::move(other429.operationHandle);
  orientation = std::move(other429.orientation);
  maxRows = std::move(other429.maxRows);
  fetchType = std::move(other429.fetchType);
  __isset = std::move(other429.__isset);
  return *this;
}
void TFetchResultsReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TFetchResultsReq(";
  out << "operationHandle=" << to_string(operationHandle);
  out << ", " << "orientation=" << to_string(orientation);
  out << ", " << "maxRows=" << to_string(maxRows);
  out << ", " << "fetchType="; (__isset.fetchType ? (out << to_string(fetchType)) : (out << "<null>"));
  out << ")";
}


TFetchResultsResp::~TFetchResultsResp() throw() {
}


void TFetchResultsResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TFetchResultsResp::__set_hasMoreRows(const bool val) {
  this->hasMoreRows = val;
__isset.hasMoreRows = true;
}

void TFetchResultsResp::__set_results(const TRowSet& val) {
  this->results = val;
__isset.results = true;
}
std::ostream& operator<<(std::ostream& out, const TFetchResultsResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TFetchResultsResp &a, TFetchResultsResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.hasMoreRows, b.hasMoreRows);
  swap(a.results, b.results);
  swap(a.__isset, b.__isset);
}

TFetchResultsResp::TFetchResultsResp(const TFetchResultsResp& other430) {
  status = other430.status;
  hasMoreRows = other430.hasMoreRows;
  results = other430.results;
  __isset = other430.__isset;
}
TFetchResultsResp::TFetchResultsResp( TFetchResultsResp&& other431) {
  status = std::move(other431.status);
  hasMoreRows = std::move(other431.hasMoreRows);
  results = std::move(other431.results);
  __isset = std::move(other431.__isset);
}
TFetchResultsResp& TFetchResultsResp::operator=(const TFetchResultsResp& other432) {
  status = other432.status;
  hasMoreRows = other432.hasMoreRows;
  results = other432.results;
  __isset = other432.__isset;
  return *this;
}
TFetchResultsResp& TFetchResultsResp::operator=(TFetchResultsResp&& other433) {
  status = std::move(other433.status);
  hasMoreRows = std::move(other433.hasMoreRows);
  results = std::move(other433.results);
  __isset = std::move(other433.__isset);
  return *this;
}
void TFetchResultsResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TFetchResultsResp(";
  out << "status=" << to_string(status);
  out << ", " << "hasMoreRows="; (__isset.hasMoreRows ? (out << to_string(hasMoreRows)) : (out << "<null>"));
  out << ", " << "results="; (__isset.results ? (out << to_string(results)) : (out << "<null>"));
  out << ")";
}


TGetDelegationTokenReq::~TGetDelegationTokenReq() throw() {
}


void TGetDelegationTokenReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}

void TGetDelegationTokenReq::__set_owner(const std::string& val) {
  this->owner = val;
}

void TGetDelegationTokenReq::__set_renewer(const std::string& val) {
  this->renewer = val;
}
std::ostream& operator<<(std::ostream& out, const TGetDelegationTokenReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetDelegationTokenReq &a, TGetDelegationTokenReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.owner, b.owner);
  swap(a.renewer, b.renewer);
}

TGetDelegationTokenReq::TGetDelegationTokenReq(const TGetDelegationTokenReq& other434) {
  sessionHandle = other434.sessionHandle;
  owner = other434.owner;
  renewer = other434.renewer;
}
TGetDelegationTokenReq::TGetDelegationTokenReq( TGetDelegationTokenReq&& other435) {
  sessionHandle = std::move(other435.sessionHandle);
  owner = std::move(other435.owner);
  renewer = std::move(other435.renewer);
}
TGetDelegationTokenReq& TGetDelegationTokenReq::operator=(const TGetDelegationTokenReq& other436) {
  sessionHandle = other436.sessionHandle;
  owner = other436.owner;
  renewer = other436.renewer;
  return *this;
}
TGetDelegationTokenReq& TGetDelegationTokenReq::operator=(TGetDelegationTokenReq&& other437) {
  sessionHandle = std::move(other437.sessionHandle);
  owner = std::move(other437.owner);
  renewer = std::move(other437.renewer);
  return *this;
}
void TGetDelegationTokenReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetDelegationTokenReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ", " << "owner=" << to_string(owner);
  out << ", " << "renewer=" << to_string(renewer);
  out << ")";
}


TGetDelegationTokenResp::~TGetDelegationTokenResp() throw() {
}


void TGetDelegationTokenResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetDelegationTokenResp::__set_delegationToken(const std::string& val) {
  this->delegationToken = val;
__isset.delegationToken = true;
}
std::ostream& operator<<(std::ostream& out, const TGetDelegationTokenResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetDelegationTokenResp &a, TGetDelegationTokenResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.delegationToken, b.delegationToken);
  swap(a.__isset, b.__isset);
}

TGetDelegationTokenResp::TGetDelegationTokenResp(const TGetDelegationTokenResp& other438) {
  status = other438.status;
  delegationToken = other438.delegationToken;
  __isset = other438.__isset;
}
TGetDelegationTokenResp::TGetDelegationTokenResp( TGetDelegationTokenResp&& other439) {
  status = std::move(other439.status);
  delegationToken = std::move(other439.delegationToken);
  __isset = std::move(other439.__isset);
}
TGetDelegationTokenResp& TGetDelegationTokenResp::operator=(const TGetDelegationTokenResp& other440) {
  status = other440.status;
  delegationToken = other440.delegationToken;
  __isset = other440.__isset;
  return *this;
}
TGetDelegationTokenResp& TGetDelegationTokenResp::operator=(TGetDelegationTokenResp&& other441) {
  status = std::move(other441.status);
  delegationToken = std::move(other441.delegationToken);
  __isset = std::move(other441.__isset);
  return *this;
}
void TGetDelegationTokenResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetDelegationTokenResp(";
  out << "status=" << to_string(status);
  out << ", " << "delegationToken="; (__isset.delegationToken ? (out << to_string(delegationToken)) : (out << "<null>"));
  out << ")";
}


TCancelDelegationTokenReq::~TCancelDelegationTokenReq() throw() {
}


void TCancelDelegationTokenReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}

void TCancelDelegationTokenReq::__set_delegationToken(const std::string& val) {
  this->delegationToken = val;
}
std::ostream& operator<<(std::ostream& out, const TCancelDelegationTokenReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCancelDelegationTokenReq &a, TCancelDelegationTokenReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.delegationToken, b.delegationToken);
}

TCancelDelegationTokenReq::TCancelDelegationTokenReq(const TCancelDelegationTokenReq& other442) {
  sessionHandle = other442.sessionHandle;
  delegationToken = other442.delegationToken;
}
TCancelDelegationTokenReq::TCancelDelegationTokenReq( TCancelDelegationTokenReq&& other443) {
  sessionHandle = std::move(other443.sessionHandle);
  delegationToken = std::move(other443.delegationToken);
}
TCancelDelegationTokenReq& TCancelDelegationTokenReq::operator=(const TCancelDelegationTokenReq& other444) {
  sessionHandle = other444.sessionHandle;
  delegationToken = other444.delegationToken;
  return *this;
}
TCancelDelegationTokenReq& TCancelDelegationTokenReq::operator=(TCancelDelegationTokenReq&& other445) {
  sessionHandle = std::move(other445.sessionHandle);
  delegationToken = std::move(other445.delegationToken);
  return *this;
}
void TCancelDelegationTokenReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCancelDelegationTokenReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ", " << "delegationToken=" << to_string(delegationToken);
  out << ")";
}


TCancelDelegationTokenResp::~TCancelDelegationTokenResp() throw() {
}


void TCancelDelegationTokenResp::__set_status(const TStatus& val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const TCancelDelegationTokenResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCancelDelegationTokenResp &a, TCancelDelegationTokenResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
}

TCancelDelegationTokenResp::TCancelDelegationTokenResp(const TCancelDelegationTokenResp& other446) {
  status = other446.status;
}
TCancelDelegationTokenResp::TCancelDelegationTokenResp( TCancelDelegationTokenResp&& other447) {
  status = std::move(other447.status);
}
TCancelDelegationTokenResp& TCancelDelegationTokenResp::operator=(const TCancelDelegationTokenResp& other448) {
  status = other448.status;
  return *this;
}
TCancelDelegationTokenResp& TCancelDelegationTokenResp::operator=(TCancelDelegationTokenResp&& other449) {
  status = std::move(other449.status);
  return *this;
}
void TCancelDelegationTokenResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCancelDelegationTokenResp(";
  out << "status=" << to_string(status);
  out << ")";
}


TRenewDelegationTokenReq::~TRenewDelegationTokenReq() throw() {
}


void TRenewDelegationTokenReq::__set_sessionHandle(const TSessionHandle& val) {
  this->sessionHandle = val;
}

void TRenewDelegationTokenReq::__set_delegationToken(const std::string& val) {
  this->delegationToken = val;
}
std::ostream& operator<<(std::ostream& out, const TRenewDelegationTokenReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TRenewDelegationTokenReq &a, TRenewDelegationTokenReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.delegationToken, b.delegationToken);
}

TRenewDelegationTokenReq::TRenewDelegationTokenReq(const TRenewDelegationTokenReq& other450) {
  sessionHandle = other450.sessionHandle;
  delegationToken = other450.delegationToken;
}
TRenewDelegationTokenReq::TRenewDelegationTokenReq( TRenewDelegationTokenReq&& other451) {
  sessionHandle = std::move(other451.sessionHandle);
  delegationToken = std::move(other451.delegationToken);
}
TRenewDelegationTokenReq& TRenewDelegationTokenReq::operator=(const TRenewDelegationTokenReq& other452) {
  sessionHandle = other452.sessionHandle;
  delegationToken = other452.delegationToken;
  return *this;
}
TRenewDelegationTokenReq& TRenewDelegationTokenReq::operator=(TRenewDelegationTokenReq&& other453) {
  sessionHandle = std::move(other453.sessionHandle);
  delegationToken = std::move(other453.delegationToken);
  return *this;
}
void TRenewDelegationTokenReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRenewDelegationTokenReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ", " << "delegationToken=" << to_string(delegationToken);
  out << ")";
}


TRenewDelegationTokenResp::~TRenewDelegationTokenResp() throw() {
}


void TRenewDelegationTokenResp::__set_status(const TStatus& val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const TRenewDelegationTokenResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TRenewDelegationTokenResp &a, TRenewDelegationTokenResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
}

TRenewDelegationTokenResp::TRenewDelegationTokenResp(const TRenewDelegationTokenResp& other454) {
  status = other454.status;
}
TRenewDelegationTokenResp::TRenewDelegationTokenResp( TRenewDelegationTokenResp&& other455) {
  status = std::move(other455.status);
}
TRenewDelegationTokenResp& TRenewDelegationTokenResp::operator=(const TRenewDelegationTokenResp& other456) {
  status = other456.status;
  return *this;
}
TRenewDelegationTokenResp& TRenewDelegationTokenResp::operator=(TRenewDelegationTokenResp&& other457) {
  status = std::move(other457.status);
  return *this;
}
void TRenewDelegationTokenResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRenewDelegationTokenResp(";
  out << "status=" << to_string(status);
  out << ")";
}


TGetLogReq::~TGetLogReq() throw() {
}


void TGetLogReq::__set_operationHandle(const TOperationHandle& val) {
  this->operationHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TGetLogReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetLogReq &a, TGetLogReq &b) {
  using ::std::swap;
  swap(a.operationHandle, b.operationHandle);
}

TGetLogReq::TGetLogReq(const TGetLogReq& other458) {
  operationHandle = other458.operationHandle;
}
TGetLogReq::TGetLogReq( TGetLogReq&& other459) {
  operationHandle = std::move(other459.operationHandle);
}
TGetLogReq& TGetLogReq::operator=(const TGetLogReq& other460) {
  operationHandle = other460.operationHandle;
  return *this;
}
TGetLogReq& TGetLogReq::operator=(TGetLogReq&& other461) {
  operationHandle = std::move(other461.operationHandle);
  return *this;
}
void TGetLogReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetLogReq(";
  out << "operationHandle=" << to_string(operationHandle);
  out << ")";
}


TGetLogResp::~TGetLogResp() throw() {
}


void TGetLogResp::__set_status(const TStatus& val) {
  this->status = val;
}

void TGetLogResp::__set_log(const std::string& val) {
  this->log = val;
}
std::ostream& operator<<(std::ostream& out, const TGetLogResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetLogResp &a, TGetLogResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.log, b.log);
}

TGetLogResp::TGetLogResp(const TGetLogResp& other462) {
  status = other462.status;
  log = other462.log;
}
TGetLogResp::TGetLogResp( TGetLogResp&& other463) {
  status = std::move(other463.status);
  log = std::move(other463.log);
}
TGetLogResp& TGetLogResp::operator=(const TGetLogResp& other464) {
  status = other464.status;
  log = other464.log;
  return *this;
}
TGetLogResp& TGetLogResp::operator=(TGetLogResp&& other465) {
  status = std::move(other465.status);
  log = std::move(other465.log);
  return *this;
}
void TGetLogResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetLogResp(";
  out << "status=" << to_string(status);
  out << ", " << "log=" << to_string(log);
  out << ")";
}

}}}}} // namespace
