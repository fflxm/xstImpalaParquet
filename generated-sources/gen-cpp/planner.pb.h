// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planner.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_planner_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_planner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_planner_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_planner_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planner_2eproto;
namespace impala {
class HBaseKeyRangePB;
class HBaseKeyRangePBDefaultTypeInternal;
extern HBaseKeyRangePBDefaultTypeInternal _HBaseKeyRangePB_default_instance_;
class HdfsFileSplitPB;
class HdfsFileSplitPBDefaultTypeInternal;
extern HdfsFileSplitPBDefaultTypeInternal _HdfsFileSplitPB_default_instance_;
class ScanRangePB;
class ScanRangePBDefaultTypeInternal;
extern ScanRangePBDefaultTypeInternal _ScanRangePB_default_instance_;
}  // namespace impala
PROTOBUF_NAMESPACE_OPEN
template<> ::impala::HBaseKeyRangePB* Arena::CreateMaybeMessage<::impala::HBaseKeyRangePB>(Arena*);
template<> ::impala::HdfsFileSplitPB* Arena::CreateMaybeMessage<::impala::HdfsFileSplitPB>(Arena*);
template<> ::impala::ScanRangePB* Arena::CreateMaybeMessage<::impala::ScanRangePB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace impala {

// ===================================================================

class HdfsFileSplitPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.HdfsFileSplitPB) */ {
 public:
  inline HdfsFileSplitPB() : HdfsFileSplitPB(nullptr) {}
  virtual ~HdfsFileSplitPB();

  HdfsFileSplitPB(const HdfsFileSplitPB& from);
  HdfsFileSplitPB(HdfsFileSplitPB&& from) noexcept
    : HdfsFileSplitPB() {
    *this = ::std::move(from);
  }

  inline HdfsFileSplitPB& operator=(const HdfsFileSplitPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline HdfsFileSplitPB& operator=(HdfsFileSplitPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HdfsFileSplitPB& default_instance();

  static inline const HdfsFileSplitPB* internal_default_instance() {
    return reinterpret_cast<const HdfsFileSplitPB*>(
               &_HdfsFileSplitPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HdfsFileSplitPB& a, HdfsFileSplitPB& b) {
    a.Swap(&b);
  }
  inline void Swap(HdfsFileSplitPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HdfsFileSplitPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HdfsFileSplitPB* New() const final {
    return CreateMaybeMessage<HdfsFileSplitPB>(nullptr);
  }

  HdfsFileSplitPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HdfsFileSplitPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HdfsFileSplitPB& from);
  void MergeFrom(const HdfsFileSplitPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HdfsFileSplitPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.HdfsFileSplitPB";
  }
  protected:
  explicit HdfsFileSplitPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_2eproto);
    return ::descriptor_table_planner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativePathFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLengthFieldNumber = 3,
    kPartitionIdFieldNumber = 4,
    kFileLengthFieldNumber = 5,
    kMtimeFieldNumber = 7,
    kFileCompressionFieldNumber = 6,
    kIsErasureCodedFieldNumber = 8,
    kPartitionPathHashFieldNumber = 9,
  };
  // optional string relative_path = 1;
  bool has_relative_path() const;
  private:
  bool _internal_has_relative_path() const;
  public:
  void clear_relative_path();
  const std::string& relative_path() const;
  void set_relative_path(const std::string& value);
  void set_relative_path(std::string&& value);
  void set_relative_path(const char* value);
  void set_relative_path(const char* value, size_t size);
  std::string* mutable_relative_path();
  std::string* release_relative_path();
  void set_allocated_relative_path(std::string* relative_path);
  private:
  const std::string& _internal_relative_path() const;
  void _internal_set_relative_path(const std::string& value);
  std::string* _internal_mutable_relative_path();
  public:

  // optional int64 offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 partition_id = 4;
  bool has_partition_id() const;
  private:
  bool _internal_has_partition_id() const;
  public:
  void clear_partition_id();
  ::PROTOBUF_NAMESPACE_ID::int64 partition_id() const;
  void set_partition_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_partition_id() const;
  void _internal_set_partition_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 file_length = 5;
  bool has_file_length() const;
  private:
  bool _internal_has_file_length() const;
  public:
  void clear_file_length();
  ::PROTOBUF_NAMESPACE_ID::int64 file_length() const;
  void set_file_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_file_length() const;
  void _internal_set_file_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 mtime = 7;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  ::PROTOBUF_NAMESPACE_ID::int64 mtime() const;
  void set_mtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mtime() const;
  void _internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .impala.CompressionTypePB file_compression = 6;
  bool has_file_compression() const;
  private:
  bool _internal_has_file_compression() const;
  public:
  void clear_file_compression();
  ::impala::CompressionTypePB file_compression() const;
  void set_file_compression(::impala::CompressionTypePB value);
  private:
  ::impala::CompressionTypePB _internal_file_compression() const;
  void _internal_set_file_compression(::impala::CompressionTypePB value);
  public:

  // optional bool is_erasure_coded = 8;
  bool has_is_erasure_coded() const;
  private:
  bool _internal_has_is_erasure_coded() const;
  public:
  void clear_is_erasure_coded();
  bool is_erasure_coded() const;
  void set_is_erasure_coded(bool value);
  private:
  bool _internal_is_erasure_coded() const;
  void _internal_set_is_erasure_coded(bool value);
  public:

  // optional int32 partition_path_hash = 9;
  bool has_partition_path_hash() const;
  private:
  bool _internal_has_partition_path_hash() const;
  public:
  void clear_partition_path_hash();
  ::PROTOBUF_NAMESPACE_ID::int32 partition_path_hash() const;
  void set_partition_path_hash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_partition_path_hash() const;
  void _internal_set_partition_path_hash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.HdfsFileSplitPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relative_path_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 length_;
  ::PROTOBUF_NAMESPACE_ID::int64 partition_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 file_length_;
  ::PROTOBUF_NAMESPACE_ID::int64 mtime_;
  int file_compression_;
  bool is_erasure_coded_;
  ::PROTOBUF_NAMESPACE_ID::int32 partition_path_hash_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class HBaseKeyRangePB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.HBaseKeyRangePB) */ {
 public:
  inline HBaseKeyRangePB() : HBaseKeyRangePB(nullptr) {}
  virtual ~HBaseKeyRangePB();

  HBaseKeyRangePB(const HBaseKeyRangePB& from);
  HBaseKeyRangePB(HBaseKeyRangePB&& from) noexcept
    : HBaseKeyRangePB() {
    *this = ::std::move(from);
  }

  inline HBaseKeyRangePB& operator=(const HBaseKeyRangePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline HBaseKeyRangePB& operator=(HBaseKeyRangePB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HBaseKeyRangePB& default_instance();

  static inline const HBaseKeyRangePB* internal_default_instance() {
    return reinterpret_cast<const HBaseKeyRangePB*>(
               &_HBaseKeyRangePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HBaseKeyRangePB& a, HBaseKeyRangePB& b) {
    a.Swap(&b);
  }
  inline void Swap(HBaseKeyRangePB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HBaseKeyRangePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HBaseKeyRangePB* New() const final {
    return CreateMaybeMessage<HBaseKeyRangePB>(nullptr);
  }

  HBaseKeyRangePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HBaseKeyRangePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HBaseKeyRangePB& from);
  void MergeFrom(const HBaseKeyRangePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HBaseKeyRangePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.HBaseKeyRangePB";
  }
  protected:
  explicit HBaseKeyRangePB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_2eproto);
    return ::descriptor_table_planner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartKeyFieldNumber = 1,
    kStopKeyFieldNumber = 2,
  };
  // optional string startKey = 1;
  bool has_startkey() const;
  private:
  bool _internal_has_startkey() const;
  public:
  void clear_startkey();
  const std::string& startkey() const;
  void set_startkey(const std::string& value);
  void set_startkey(std::string&& value);
  void set_startkey(const char* value);
  void set_startkey(const char* value, size_t size);
  std::string* mutable_startkey();
  std::string* release_startkey();
  void set_allocated_startkey(std::string* startkey);
  private:
  const std::string& _internal_startkey() const;
  void _internal_set_startkey(const std::string& value);
  std::string* _internal_mutable_startkey();
  public:

  // optional string stopKey = 2;
  bool has_stopkey() const;
  private:
  bool _internal_has_stopkey() const;
  public:
  void clear_stopkey();
  const std::string& stopkey() const;
  void set_stopkey(const std::string& value);
  void set_stopkey(std::string&& value);
  void set_stopkey(const char* value);
  void set_stopkey(const char* value, size_t size);
  std::string* mutable_stopkey();
  std::string* release_stopkey();
  void set_allocated_stopkey(std::string* stopkey);
  private:
  const std::string& _internal_stopkey() const;
  void _internal_set_stopkey(const std::string& value);
  std::string* _internal_mutable_stopkey();
  public:

  // @@protoc_insertion_point(class_scope:impala.HBaseKeyRangePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stopkey_;
  friend struct ::TableStruct_planner_2eproto;
};
// -------------------------------------------------------------------

class ScanRangePB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.ScanRangePB) */ {
 public:
  inline ScanRangePB() : ScanRangePB(nullptr) {}
  virtual ~ScanRangePB();

  ScanRangePB(const ScanRangePB& from);
  ScanRangePB(ScanRangePB&& from) noexcept
    : ScanRangePB() {
    *this = ::std::move(from);
  }

  inline ScanRangePB& operator=(const ScanRangePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanRangePB& operator=(ScanRangePB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanRangePB& default_instance();

  static inline const ScanRangePB* internal_default_instance() {
    return reinterpret_cast<const ScanRangePB*>(
               &_ScanRangePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScanRangePB& a, ScanRangePB& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanRangePB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanRangePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanRangePB* New() const final {
    return CreateMaybeMessage<ScanRangePB>(nullptr);
  }

  ScanRangePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanRangePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanRangePB& from);
  void MergeFrom(const ScanRangePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanRangePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.ScanRangePB";
  }
  protected:
  explicit ScanRangePB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planner_2eproto);
    return ::descriptor_table_planner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKuduScanTokenFieldNumber = 3,
    kFileMetadataFieldNumber = 4,
    kHdfsFileSplitFieldNumber = 1,
    kHbaseKeyRangeFieldNumber = 2,
  };
  // optional bytes kudu_scan_token = 3;
  bool has_kudu_scan_token() const;
  private:
  bool _internal_has_kudu_scan_token() const;
  public:
  void clear_kudu_scan_token();
  const std::string& kudu_scan_token() const;
  void set_kudu_scan_token(const std::string& value);
  void set_kudu_scan_token(std::string&& value);
  void set_kudu_scan_token(const char* value);
  void set_kudu_scan_token(const void* value, size_t size);
  std::string* mutable_kudu_scan_token();
  std::string* release_kudu_scan_token();
  void set_allocated_kudu_scan_token(std::string* kudu_scan_token);
  private:
  const std::string& _internal_kudu_scan_token() const;
  void _internal_set_kudu_scan_token(const std::string& value);
  std::string* _internal_mutable_kudu_scan_token();
  public:

  // optional bytes file_metadata = 4;
  bool has_file_metadata() const;
  private:
  bool _internal_has_file_metadata() const;
  public:
  void clear_file_metadata();
  const std::string& file_metadata() const;
  void set_file_metadata(const std::string& value);
  void set_file_metadata(std::string&& value);
  void set_file_metadata(const char* value);
  void set_file_metadata(const void* value, size_t size);
  std::string* mutable_file_metadata();
  std::string* release_file_metadata();
  void set_allocated_file_metadata(std::string* file_metadata);
  private:
  const std::string& _internal_file_metadata() const;
  void _internal_set_file_metadata(const std::string& value);
  std::string* _internal_mutable_file_metadata();
  public:

  // optional .impala.HdfsFileSplitPB hdfs_file_split = 1;
  bool has_hdfs_file_split() const;
  private:
  bool _internal_has_hdfs_file_split() const;
  public:
  void clear_hdfs_file_split();
  const ::impala::HdfsFileSplitPB& hdfs_file_split() const;
  ::impala::HdfsFileSplitPB* release_hdfs_file_split();
  ::impala::HdfsFileSplitPB* mutable_hdfs_file_split();
  void set_allocated_hdfs_file_split(::impala::HdfsFileSplitPB* hdfs_file_split);
  private:
  const ::impala::HdfsFileSplitPB& _internal_hdfs_file_split() const;
  ::impala::HdfsFileSplitPB* _internal_mutable_hdfs_file_split();
  public:
  void unsafe_arena_set_allocated_hdfs_file_split(
      ::impala::HdfsFileSplitPB* hdfs_file_split);
  ::impala::HdfsFileSplitPB* unsafe_arena_release_hdfs_file_split();

  // optional .impala.HBaseKeyRangePB hbase_key_range = 2;
  bool has_hbase_key_range() const;
  private:
  bool _internal_has_hbase_key_range() const;
  public:
  void clear_hbase_key_range();
  const ::impala::HBaseKeyRangePB& hbase_key_range() const;
  ::impala::HBaseKeyRangePB* release_hbase_key_range();
  ::impala::HBaseKeyRangePB* mutable_hbase_key_range();
  void set_allocated_hbase_key_range(::impala::HBaseKeyRangePB* hbase_key_range);
  private:
  const ::impala::HBaseKeyRangePB& _internal_hbase_key_range() const;
  ::impala::HBaseKeyRangePB* _internal_mutable_hbase_key_range();
  public:
  void unsafe_arena_set_allocated_hbase_key_range(
      ::impala::HBaseKeyRangePB* hbase_key_range);
  ::impala::HBaseKeyRangePB* unsafe_arena_release_hbase_key_range();

  // @@protoc_insertion_point(class_scope:impala.ScanRangePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kudu_scan_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_metadata_;
  ::impala::HdfsFileSplitPB* hdfs_file_split_;
  ::impala::HBaseKeyRangePB* hbase_key_range_;
  friend struct ::TableStruct_planner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HdfsFileSplitPB

// optional string relative_path = 1;
inline bool HdfsFileSplitPB::_internal_has_relative_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HdfsFileSplitPB::has_relative_path() const {
  return _internal_has_relative_path();
}
inline void HdfsFileSplitPB::clear_relative_path() {
  relative_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HdfsFileSplitPB::relative_path() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.relative_path)
  return _internal_relative_path();
}
inline void HdfsFileSplitPB::set_relative_path(const std::string& value) {
  _internal_set_relative_path(value);
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.relative_path)
}
inline std::string* HdfsFileSplitPB::mutable_relative_path() {
  // @@protoc_insertion_point(field_mutable:impala.HdfsFileSplitPB.relative_path)
  return _internal_mutable_relative_path();
}
inline const std::string& HdfsFileSplitPB::_internal_relative_path() const {
  return relative_path_.Get();
}
inline void HdfsFileSplitPB::_internal_set_relative_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  relative_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HdfsFileSplitPB::set_relative_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  relative_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.HdfsFileSplitPB.relative_path)
}
inline void HdfsFileSplitPB::set_relative_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  relative_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.HdfsFileSplitPB.relative_path)
}
inline void HdfsFileSplitPB::set_relative_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  relative_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.HdfsFileSplitPB.relative_path)
}
inline std::string* HdfsFileSplitPB::_internal_mutable_relative_path() {
  _has_bits_[0] |= 0x00000001u;
  return relative_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HdfsFileSplitPB::release_relative_path() {
  // @@protoc_insertion_point(field_release:impala.HdfsFileSplitPB.relative_path)
  if (!_internal_has_relative_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return relative_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HdfsFileSplitPB::set_allocated_relative_path(std::string* relative_path) {
  if (relative_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  relative_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relative_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.HdfsFileSplitPB.relative_path)
}

// optional int64 offset = 2;
inline bool HdfsFileSplitPB::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HdfsFileSplitPB::has_offset() const {
  return _internal_has_offset();
}
inline void HdfsFileSplitPB::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HdfsFileSplitPB::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HdfsFileSplitPB::offset() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.offset)
  return _internal_offset();
}
inline void HdfsFileSplitPB::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  offset_ = value;
}
inline void HdfsFileSplitPB::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.offset)
}

// optional int64 length = 3;
inline bool HdfsFileSplitPB::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HdfsFileSplitPB::has_length() const {
  return _internal_has_length();
}
inline void HdfsFileSplitPB::clear_length() {
  length_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HdfsFileSplitPB::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HdfsFileSplitPB::length() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.length)
  return _internal_length();
}
inline void HdfsFileSplitPB::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  length_ = value;
}
inline void HdfsFileSplitPB::set_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.length)
}

// optional int64 partition_id = 4;
inline bool HdfsFileSplitPB::_internal_has_partition_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HdfsFileSplitPB::has_partition_id() const {
  return _internal_has_partition_id();
}
inline void HdfsFileSplitPB::clear_partition_id() {
  partition_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HdfsFileSplitPB::_internal_partition_id() const {
  return partition_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HdfsFileSplitPB::partition_id() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.partition_id)
  return _internal_partition_id();
}
inline void HdfsFileSplitPB::_internal_set_partition_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  partition_id_ = value;
}
inline void HdfsFileSplitPB::set_partition_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_partition_id(value);
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.partition_id)
}

// optional int64 file_length = 5;
inline bool HdfsFileSplitPB::_internal_has_file_length() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HdfsFileSplitPB::has_file_length() const {
  return _internal_has_file_length();
}
inline void HdfsFileSplitPB::clear_file_length() {
  file_length_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HdfsFileSplitPB::_internal_file_length() const {
  return file_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HdfsFileSplitPB::file_length() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.file_length)
  return _internal_file_length();
}
inline void HdfsFileSplitPB::_internal_set_file_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  file_length_ = value;
}
inline void HdfsFileSplitPB::set_file_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_file_length(value);
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.file_length)
}

// optional .impala.CompressionTypePB file_compression = 6;
inline bool HdfsFileSplitPB::_internal_has_file_compression() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HdfsFileSplitPB::has_file_compression() const {
  return _internal_has_file_compression();
}
inline void HdfsFileSplitPB::clear_file_compression() {
  file_compression_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::impala::CompressionTypePB HdfsFileSplitPB::_internal_file_compression() const {
  return static_cast< ::impala::CompressionTypePB >(file_compression_);
}
inline ::impala::CompressionTypePB HdfsFileSplitPB::file_compression() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.file_compression)
  return _internal_file_compression();
}
inline void HdfsFileSplitPB::_internal_set_file_compression(::impala::CompressionTypePB value) {
  assert(::impala::CompressionTypePB_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  file_compression_ = value;
}
inline void HdfsFileSplitPB::set_file_compression(::impala::CompressionTypePB value) {
  _internal_set_file_compression(value);
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.file_compression)
}

// optional int64 mtime = 7;
inline bool HdfsFileSplitPB::_internal_has_mtime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HdfsFileSplitPB::has_mtime() const {
  return _internal_has_mtime();
}
inline void HdfsFileSplitPB::clear_mtime() {
  mtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HdfsFileSplitPB::_internal_mtime() const {
  return mtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HdfsFileSplitPB::mtime() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.mtime)
  return _internal_mtime();
}
inline void HdfsFileSplitPB::_internal_set_mtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  mtime_ = value;
}
inline void HdfsFileSplitPB::set_mtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mtime(value);
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.mtime)
}

// optional bool is_erasure_coded = 8;
inline bool HdfsFileSplitPB::_internal_has_is_erasure_coded() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool HdfsFileSplitPB::has_is_erasure_coded() const {
  return _internal_has_is_erasure_coded();
}
inline void HdfsFileSplitPB::clear_is_erasure_coded() {
  is_erasure_coded_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool HdfsFileSplitPB::_internal_is_erasure_coded() const {
  return is_erasure_coded_;
}
inline bool HdfsFileSplitPB::is_erasure_coded() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.is_erasure_coded)
  return _internal_is_erasure_coded();
}
inline void HdfsFileSplitPB::_internal_set_is_erasure_coded(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_erasure_coded_ = value;
}
inline void HdfsFileSplitPB::set_is_erasure_coded(bool value) {
  _internal_set_is_erasure_coded(value);
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.is_erasure_coded)
}

// optional int32 partition_path_hash = 9;
inline bool HdfsFileSplitPB::_internal_has_partition_path_hash() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool HdfsFileSplitPB::has_partition_path_hash() const {
  return _internal_has_partition_path_hash();
}
inline void HdfsFileSplitPB::clear_partition_path_hash() {
  partition_path_hash_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HdfsFileSplitPB::_internal_partition_path_hash() const {
  return partition_path_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HdfsFileSplitPB::partition_path_hash() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.partition_path_hash)
  return _internal_partition_path_hash();
}
inline void HdfsFileSplitPB::_internal_set_partition_path_hash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  partition_path_hash_ = value;
}
inline void HdfsFileSplitPB::set_partition_path_hash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_partition_path_hash(value);
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.partition_path_hash)
}

// -------------------------------------------------------------------

// HBaseKeyRangePB

// optional string startKey = 1;
inline bool HBaseKeyRangePB::_internal_has_startkey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HBaseKeyRangePB::has_startkey() const {
  return _internal_has_startkey();
}
inline void HBaseKeyRangePB::clear_startkey() {
  startkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HBaseKeyRangePB::startkey() const {
  // @@protoc_insertion_point(field_get:impala.HBaseKeyRangePB.startKey)
  return _internal_startkey();
}
inline void HBaseKeyRangePB::set_startkey(const std::string& value) {
  _internal_set_startkey(value);
  // @@protoc_insertion_point(field_set:impala.HBaseKeyRangePB.startKey)
}
inline std::string* HBaseKeyRangePB::mutable_startkey() {
  // @@protoc_insertion_point(field_mutable:impala.HBaseKeyRangePB.startKey)
  return _internal_mutable_startkey();
}
inline const std::string& HBaseKeyRangePB::_internal_startkey() const {
  return startkey_.Get();
}
inline void HBaseKeyRangePB::_internal_set_startkey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  startkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HBaseKeyRangePB::set_startkey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  startkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.HBaseKeyRangePB.startKey)
}
inline void HBaseKeyRangePB::set_startkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  startkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.HBaseKeyRangePB.startKey)
}
inline void HBaseKeyRangePB::set_startkey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  startkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.HBaseKeyRangePB.startKey)
}
inline std::string* HBaseKeyRangePB::_internal_mutable_startkey() {
  _has_bits_[0] |= 0x00000001u;
  return startkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HBaseKeyRangePB::release_startkey() {
  // @@protoc_insertion_point(field_release:impala.HBaseKeyRangePB.startKey)
  if (!_internal_has_startkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return startkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HBaseKeyRangePB::set_allocated_startkey(std::string* startkey) {
  if (startkey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  startkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.HBaseKeyRangePB.startKey)
}

// optional string stopKey = 2;
inline bool HBaseKeyRangePB::_internal_has_stopkey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HBaseKeyRangePB::has_stopkey() const {
  return _internal_has_stopkey();
}
inline void HBaseKeyRangePB::clear_stopkey() {
  stopkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HBaseKeyRangePB::stopkey() const {
  // @@protoc_insertion_point(field_get:impala.HBaseKeyRangePB.stopKey)
  return _internal_stopkey();
}
inline void HBaseKeyRangePB::set_stopkey(const std::string& value) {
  _internal_set_stopkey(value);
  // @@protoc_insertion_point(field_set:impala.HBaseKeyRangePB.stopKey)
}
inline std::string* HBaseKeyRangePB::mutable_stopkey() {
  // @@protoc_insertion_point(field_mutable:impala.HBaseKeyRangePB.stopKey)
  return _internal_mutable_stopkey();
}
inline const std::string& HBaseKeyRangePB::_internal_stopkey() const {
  return stopkey_.Get();
}
inline void HBaseKeyRangePB::_internal_set_stopkey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  stopkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HBaseKeyRangePB::set_stopkey(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  stopkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.HBaseKeyRangePB.stopKey)
}
inline void HBaseKeyRangePB::set_stopkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  stopkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.HBaseKeyRangePB.stopKey)
}
inline void HBaseKeyRangePB::set_stopkey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  stopkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.HBaseKeyRangePB.stopKey)
}
inline std::string* HBaseKeyRangePB::_internal_mutable_stopkey() {
  _has_bits_[0] |= 0x00000002u;
  return stopkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HBaseKeyRangePB::release_stopkey() {
  // @@protoc_insertion_point(field_release:impala.HBaseKeyRangePB.stopKey)
  if (!_internal_has_stopkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return stopkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HBaseKeyRangePB::set_allocated_stopkey(std::string* stopkey) {
  if (stopkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stopkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stopkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.HBaseKeyRangePB.stopKey)
}

// -------------------------------------------------------------------

// ScanRangePB

// optional .impala.HdfsFileSplitPB hdfs_file_split = 1;
inline bool ScanRangePB::_internal_has_hdfs_file_split() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || hdfs_file_split_ != nullptr);
  return value;
}
inline bool ScanRangePB::has_hdfs_file_split() const {
  return _internal_has_hdfs_file_split();
}
inline void ScanRangePB::clear_hdfs_file_split() {
  if (hdfs_file_split_ != nullptr) hdfs_file_split_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::impala::HdfsFileSplitPB& ScanRangePB::_internal_hdfs_file_split() const {
  const ::impala::HdfsFileSplitPB* p = hdfs_file_split_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::HdfsFileSplitPB&>(
      ::impala::_HdfsFileSplitPB_default_instance_);
}
inline const ::impala::HdfsFileSplitPB& ScanRangePB::hdfs_file_split() const {
  // @@protoc_insertion_point(field_get:impala.ScanRangePB.hdfs_file_split)
  return _internal_hdfs_file_split();
}
inline void ScanRangePB::unsafe_arena_set_allocated_hdfs_file_split(
    ::impala::HdfsFileSplitPB* hdfs_file_split) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdfs_file_split_);
  }
  hdfs_file_split_ = hdfs_file_split;
  if (hdfs_file_split) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.ScanRangePB.hdfs_file_split)
}
inline ::impala::HdfsFileSplitPB* ScanRangePB::release_hdfs_file_split() {
  _has_bits_[0] &= ~0x00000004u;
  ::impala::HdfsFileSplitPB* temp = hdfs_file_split_;
  hdfs_file_split_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::HdfsFileSplitPB* ScanRangePB::unsafe_arena_release_hdfs_file_split() {
  // @@protoc_insertion_point(field_release:impala.ScanRangePB.hdfs_file_split)
  _has_bits_[0] &= ~0x00000004u;
  ::impala::HdfsFileSplitPB* temp = hdfs_file_split_;
  hdfs_file_split_ = nullptr;
  return temp;
}
inline ::impala::HdfsFileSplitPB* ScanRangePB::_internal_mutable_hdfs_file_split() {
  _has_bits_[0] |= 0x00000004u;
  if (hdfs_file_split_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::HdfsFileSplitPB>(GetArena());
    hdfs_file_split_ = p;
  }
  return hdfs_file_split_;
}
inline ::impala::HdfsFileSplitPB* ScanRangePB::mutable_hdfs_file_split() {
  // @@protoc_insertion_point(field_mutable:impala.ScanRangePB.hdfs_file_split)
  return _internal_mutable_hdfs_file_split();
}
inline void ScanRangePB::set_allocated_hdfs_file_split(::impala::HdfsFileSplitPB* hdfs_file_split) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hdfs_file_split_;
  }
  if (hdfs_file_split) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hdfs_file_split);
    if (message_arena != submessage_arena) {
      hdfs_file_split = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdfs_file_split, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hdfs_file_split_ = hdfs_file_split;
  // @@protoc_insertion_point(field_set_allocated:impala.ScanRangePB.hdfs_file_split)
}

// optional .impala.HBaseKeyRangePB hbase_key_range = 2;
inline bool ScanRangePB::_internal_has_hbase_key_range() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || hbase_key_range_ != nullptr);
  return value;
}
inline bool ScanRangePB::has_hbase_key_range() const {
  return _internal_has_hbase_key_range();
}
inline void ScanRangePB::clear_hbase_key_range() {
  if (hbase_key_range_ != nullptr) hbase_key_range_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::impala::HBaseKeyRangePB& ScanRangePB::_internal_hbase_key_range() const {
  const ::impala::HBaseKeyRangePB* p = hbase_key_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::HBaseKeyRangePB&>(
      ::impala::_HBaseKeyRangePB_default_instance_);
}
inline const ::impala::HBaseKeyRangePB& ScanRangePB::hbase_key_range() const {
  // @@protoc_insertion_point(field_get:impala.ScanRangePB.hbase_key_range)
  return _internal_hbase_key_range();
}
inline void ScanRangePB::unsafe_arena_set_allocated_hbase_key_range(
    ::impala::HBaseKeyRangePB* hbase_key_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hbase_key_range_);
  }
  hbase_key_range_ = hbase_key_range;
  if (hbase_key_range) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.ScanRangePB.hbase_key_range)
}
inline ::impala::HBaseKeyRangePB* ScanRangePB::release_hbase_key_range() {
  _has_bits_[0] &= ~0x00000008u;
  ::impala::HBaseKeyRangePB* temp = hbase_key_range_;
  hbase_key_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::HBaseKeyRangePB* ScanRangePB::unsafe_arena_release_hbase_key_range() {
  // @@protoc_insertion_point(field_release:impala.ScanRangePB.hbase_key_range)
  _has_bits_[0] &= ~0x00000008u;
  ::impala::HBaseKeyRangePB* temp = hbase_key_range_;
  hbase_key_range_ = nullptr;
  return temp;
}
inline ::impala::HBaseKeyRangePB* ScanRangePB::_internal_mutable_hbase_key_range() {
  _has_bits_[0] |= 0x00000008u;
  if (hbase_key_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::HBaseKeyRangePB>(GetArena());
    hbase_key_range_ = p;
  }
  return hbase_key_range_;
}
inline ::impala::HBaseKeyRangePB* ScanRangePB::mutable_hbase_key_range() {
  // @@protoc_insertion_point(field_mutable:impala.ScanRangePB.hbase_key_range)
  return _internal_mutable_hbase_key_range();
}
inline void ScanRangePB::set_allocated_hbase_key_range(::impala::HBaseKeyRangePB* hbase_key_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hbase_key_range_;
  }
  if (hbase_key_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hbase_key_range);
    if (message_arena != submessage_arena) {
      hbase_key_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hbase_key_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  hbase_key_range_ = hbase_key_range;
  // @@protoc_insertion_point(field_set_allocated:impala.ScanRangePB.hbase_key_range)
}

// optional bytes kudu_scan_token = 3;
inline bool ScanRangePB::_internal_has_kudu_scan_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScanRangePB::has_kudu_scan_token() const {
  return _internal_has_kudu_scan_token();
}
inline void ScanRangePB::clear_kudu_scan_token() {
  kudu_scan_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScanRangePB::kudu_scan_token() const {
  // @@protoc_insertion_point(field_get:impala.ScanRangePB.kudu_scan_token)
  return _internal_kudu_scan_token();
}
inline void ScanRangePB::set_kudu_scan_token(const std::string& value) {
  _internal_set_kudu_scan_token(value);
  // @@protoc_insertion_point(field_set:impala.ScanRangePB.kudu_scan_token)
}
inline std::string* ScanRangePB::mutable_kudu_scan_token() {
  // @@protoc_insertion_point(field_mutable:impala.ScanRangePB.kudu_scan_token)
  return _internal_mutable_kudu_scan_token();
}
inline const std::string& ScanRangePB::_internal_kudu_scan_token() const {
  return kudu_scan_token_.Get();
}
inline void ScanRangePB::_internal_set_kudu_scan_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  kudu_scan_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScanRangePB::set_kudu_scan_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  kudu_scan_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.ScanRangePB.kudu_scan_token)
}
inline void ScanRangePB::set_kudu_scan_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  kudu_scan_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.ScanRangePB.kudu_scan_token)
}
inline void ScanRangePB::set_kudu_scan_token(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  kudu_scan_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.ScanRangePB.kudu_scan_token)
}
inline std::string* ScanRangePB::_internal_mutable_kudu_scan_token() {
  _has_bits_[0] |= 0x00000001u;
  return kudu_scan_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScanRangePB::release_kudu_scan_token() {
  // @@protoc_insertion_point(field_release:impala.ScanRangePB.kudu_scan_token)
  if (!_internal_has_kudu_scan_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return kudu_scan_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanRangePB::set_allocated_kudu_scan_token(std::string* kudu_scan_token) {
  if (kudu_scan_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kudu_scan_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kudu_scan_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.ScanRangePB.kudu_scan_token)
}

// optional bytes file_metadata = 4;
inline bool ScanRangePB::_internal_has_file_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScanRangePB::has_file_metadata() const {
  return _internal_has_file_metadata();
}
inline void ScanRangePB::clear_file_metadata() {
  file_metadata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ScanRangePB::file_metadata() const {
  // @@protoc_insertion_point(field_get:impala.ScanRangePB.file_metadata)
  return _internal_file_metadata();
}
inline void ScanRangePB::set_file_metadata(const std::string& value) {
  _internal_set_file_metadata(value);
  // @@protoc_insertion_point(field_set:impala.ScanRangePB.file_metadata)
}
inline std::string* ScanRangePB::mutable_file_metadata() {
  // @@protoc_insertion_point(field_mutable:impala.ScanRangePB.file_metadata)
  return _internal_mutable_file_metadata();
}
inline const std::string& ScanRangePB::_internal_file_metadata() const {
  return file_metadata_.Get();
}
inline void ScanRangePB::_internal_set_file_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ScanRangePB::set_file_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  file_metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.ScanRangePB.file_metadata)
}
inline void ScanRangePB::set_file_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  file_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.ScanRangePB.file_metadata)
}
inline void ScanRangePB::set_file_metadata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  file_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.ScanRangePB.file_metadata)
}
inline std::string* ScanRangePB::_internal_mutable_file_metadata() {
  _has_bits_[0] |= 0x00000002u;
  return file_metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ScanRangePB::release_file_metadata() {
  // @@protoc_insertion_point(field_release:impala.ScanRangePB.file_metadata)
  if (!_internal_has_file_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return file_metadata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanRangePB::set_allocated_file_metadata(std::string* file_metadata) {
  if (file_metadata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.ScanRangePB.file_metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace impala

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_planner_2eproto
