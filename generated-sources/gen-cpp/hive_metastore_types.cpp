/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "hive_metastore_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Apache { namespace Hadoop { namespace Hive {

int _kHiveObjectTypeValues[] = {
  HiveObjectType::GLOBAL,
  HiveObjectType::DATABASE,
  HiveObjectType::TABLE,
  HiveObjectType::PARTITION,
  HiveObjectType::COLUMN
};
const char* _kHiveObjectTypeNames[] = {
  "GLOBAL",
  "DATABASE",
  "TABLE",
  "PARTITION",
  "COLUMN"
};
const std::map<int, const char*> _HiveObjectType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kHiveObjectTypeValues, _kHiveObjectTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const HiveObjectType::type& val) {
  std::map<int, const char*>::const_iterator it = _HiveObjectType_VALUES_TO_NAMES.find(val);
  if (it != _HiveObjectType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPrincipalTypeValues[] = {
  PrincipalType::USER,
  PrincipalType::ROLE,
  PrincipalType::GROUP
};
const char* _kPrincipalTypeNames[] = {
  "USER",
  "ROLE",
  "GROUP"
};
const std::map<int, const char*> _PrincipalType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPrincipalTypeValues, _kPrincipalTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PrincipalType::type& val) {
  std::map<int, const char*>::const_iterator it = _PrincipalType_VALUES_TO_NAMES.find(val);
  if (it != _PrincipalType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPartitionEventTypeValues[] = {
  PartitionEventType::LOAD_DONE
};
const char* _kPartitionEventTypeNames[] = {
  "LOAD_DONE"
};
const std::map<int, const char*> _PartitionEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kPartitionEventTypeValues, _kPartitionEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PartitionEventType::type& val) {
  std::map<int, const char*>::const_iterator it = _PartitionEventType_VALUES_TO_NAMES.find(val);
  if (it != _PartitionEventType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTxnStateValues[] = {
  TxnState::COMMITTED,
  TxnState::ABORTED,
  TxnState::OPEN
};
const char* _kTxnStateNames[] = {
  "COMMITTED",
  "ABORTED",
  "OPEN"
};
const std::map<int, const char*> _TxnState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTxnStateValues, _kTxnStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TxnState::type& val) {
  std::map<int, const char*>::const_iterator it = _TxnState_VALUES_TO_NAMES.find(val);
  if (it != _TxnState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kLockLevelValues[] = {
  LockLevel::DB,
  LockLevel::TABLE,
  LockLevel::PARTITION
};
const char* _kLockLevelNames[] = {
  "DB",
  "TABLE",
  "PARTITION"
};
const std::map<int, const char*> _LockLevel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kLockLevelValues, _kLockLevelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const LockLevel::type& val) {
  std::map<int, const char*>::const_iterator it = _LockLevel_VALUES_TO_NAMES.find(val);
  if (it != _LockLevel_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kLockStateValues[] = {
  LockState::ACQUIRED,
  LockState::WAITING,
  LockState::ABORT,
  LockState::NOT_ACQUIRED
};
const char* _kLockStateNames[] = {
  "ACQUIRED",
  "WAITING",
  "ABORT",
  "NOT_ACQUIRED"
};
const std::map<int, const char*> _LockState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kLockStateValues, _kLockStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const LockState::type& val) {
  std::map<int, const char*>::const_iterator it = _LockState_VALUES_TO_NAMES.find(val);
  if (it != _LockState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kLockTypeValues[] = {
  LockType::SHARED_READ,
  LockType::SHARED_WRITE,
  LockType::EXCLUSIVE,
  LockType::EXCL_WRITE
};
const char* _kLockTypeNames[] = {
  "SHARED_READ",
  "SHARED_WRITE",
  "EXCLUSIVE",
  "EXCL_WRITE"
};
const std::map<int, const char*> _LockType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kLockTypeValues, _kLockTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const LockType::type& val) {
  std::map<int, const char*>::const_iterator it = _LockType_VALUES_TO_NAMES.find(val);
  if (it != _LockType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kCompactionTypeValues[] = {
  CompactionType::MINOR,
  CompactionType::MAJOR
};
const char* _kCompactionTypeNames[] = {
  "MINOR",
  "MAJOR"
};
const std::map<int, const char*> _CompactionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kCompactionTypeValues, _kCompactionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const CompactionType::type& val) {
  std::map<int, const char*>::const_iterator it = _CompactionType_VALUES_TO_NAMES.find(val);
  if (it != _CompactionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGrantRevokeTypeValues[] = {
  GrantRevokeType::GRANT,
  GrantRevokeType::REVOKE
};
const char* _kGrantRevokeTypeNames[] = {
  "GRANT",
  "REVOKE"
};
const std::map<int, const char*> _GrantRevokeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kGrantRevokeTypeValues, _kGrantRevokeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GrantRevokeType::type& val) {
  std::map<int, const char*>::const_iterator it = _GrantRevokeType_VALUES_TO_NAMES.find(val);
  if (it != _GrantRevokeType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kDataOperationTypeValues[] = {
  DataOperationType::SELECT,
  DataOperationType::INSERT,
  DataOperationType::UPDATE,
  DataOperationType::DELETE,
  DataOperationType::UNSET,
  DataOperationType::NO_TXN
};
const char* _kDataOperationTypeNames[] = {
  "SELECT",
  "INSERT",
  "UPDATE",
  "DELETE",
  "UNSET",
  "NO_TXN"
};
const std::map<int, const char*> _DataOperationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kDataOperationTypeValues, _kDataOperationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const DataOperationType::type& val) {
  std::map<int, const char*>::const_iterator it = _DataOperationType_VALUES_TO_NAMES.find(val);
  if (it != _DataOperationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kEventRequestTypeValues[] = {
  EventRequestType::INSERT,
  EventRequestType::UPDATE,
  EventRequestType::DELETE
};
const char* _kEventRequestTypeNames[] = {
  "INSERT",
  "UPDATE",
  "DELETE"
};
const std::map<int, const char*> _EventRequestType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kEventRequestTypeValues, _kEventRequestTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const EventRequestType::type& val) {
  std::map<int, const char*>::const_iterator it = _EventRequestType_VALUES_TO_NAMES.find(val);
  if (it != _EventRequestType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSerdeTypeValues[] = {
  SerdeType::HIVE,
  SerdeType::SCHEMA_REGISTRY
};
const char* _kSerdeTypeNames[] = {
  "HIVE",
  "SCHEMA_REGISTRY"
};
const std::map<int, const char*> _SerdeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSerdeTypeValues, _kSerdeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SerdeType::type& val) {
  std::map<int, const char*>::const_iterator it = _SerdeType_VALUES_TO_NAMES.find(val);
  if (it != _SerdeType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSchemaTypeValues[] = {
  SchemaType::HIVE,
  SchemaType::AVRO
};
const char* _kSchemaTypeNames[] = {
  "HIVE",
  "AVRO"
};
const std::map<int, const char*> _SchemaType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSchemaTypeValues, _kSchemaTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SchemaType::type& val) {
  std::map<int, const char*>::const_iterator it = _SchemaType_VALUES_TO_NAMES.find(val);
  if (it != _SchemaType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSchemaCompatibilityValues[] = {
  SchemaCompatibility::NONE,
  SchemaCompatibility::BACKWARD,
  SchemaCompatibility::FORWARD,
  SchemaCompatibility::BOTH
};
const char* _kSchemaCompatibilityNames[] = {
  "NONE",
  "BACKWARD",
  "FORWARD",
  "BOTH"
};
const std::map<int, const char*> _SchemaCompatibility_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSchemaCompatibilityValues, _kSchemaCompatibilityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SchemaCompatibility::type& val) {
  std::map<int, const char*>::const_iterator it = _SchemaCompatibility_VALUES_TO_NAMES.find(val);
  if (it != _SchemaCompatibility_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSchemaValidationValues[] = {
  SchemaValidation::LATEST,
  SchemaValidation::ALL
};
const char* _kSchemaValidationNames[] = {
  "LATEST",
  "ALL"
};
const std::map<int, const char*> _SchemaValidation_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSchemaValidationValues, _kSchemaValidationNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SchemaValidation::type& val) {
  std::map<int, const char*>::const_iterator it = _SchemaValidation_VALUES_TO_NAMES.find(val);
  if (it != _SchemaValidation_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kSchemaVersionStateValues[] = {
  SchemaVersionState::INITIATED,
  SchemaVersionState::START_REVIEW,
  SchemaVersionState::CHANGES_REQUIRED,
  SchemaVersionState::REVIEWED,
  SchemaVersionState::ENABLED,
  SchemaVersionState::DISABLED,
  SchemaVersionState::ARCHIVED,
  SchemaVersionState::DELETED
};
const char* _kSchemaVersionStateNames[] = {
  "INITIATED",
  "START_REVIEW",
  "CHANGES_REQUIRED",
  "REVIEWED",
  "ENABLED",
  "DISABLED",
  "ARCHIVED",
  "DELETED"
};
const std::map<int, const char*> _SchemaVersionState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kSchemaVersionStateValues, _kSchemaVersionStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const SchemaVersionState::type& val) {
  std::map<int, const char*>::const_iterator it = _SchemaVersionState_VALUES_TO_NAMES.find(val);
  if (it != _SchemaVersionState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kFunctionTypeValues[] = {
  FunctionType::JAVA
};
const char* _kFunctionTypeNames[] = {
  "JAVA"
};
const std::map<int, const char*> _FunctionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kFunctionTypeValues, _kFunctionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const FunctionType::type& val) {
  std::map<int, const char*>::const_iterator it = _FunctionType_VALUES_TO_NAMES.find(val);
  if (it != _FunctionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kResourceTypeValues[] = {
  ResourceType::JAR,
  ResourceType::FILE,
  ResourceType::ARCHIVE
};
const char* _kResourceTypeNames[] = {
  "JAR",
  "FILE",
  "ARCHIVE"
};
const std::map<int, const char*> _ResourceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kResourceTypeValues, _kResourceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ResourceType::type& val) {
  std::map<int, const char*>::const_iterator it = _ResourceType_VALUES_TO_NAMES.find(val);
  if (it != _ResourceType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTxnTypeValues[] = {
  TxnType::DEFAULT,
  TxnType::REPL_CREATED,
  TxnType::READ_ONLY,
  TxnType::COMPACTION,
  TxnType::MATER_VIEW_REBUILD
};
const char* _kTxnTypeNames[] = {
  "DEFAULT",
  "REPL_CREATED",
  "READ_ONLY",
  "COMPACTION",
  "MATER_VIEW_REBUILD"
};
const std::map<int, const char*> _TxnType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTxnTypeValues, _kTxnTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TxnType::type& val) {
  std::map<int, const char*>::const_iterator it = _TxnType_VALUES_TO_NAMES.find(val);
  if (it != _TxnType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kGetTablesExtRequestFieldsValues[] = {
  GetTablesExtRequestFields::ACCESS_TYPE,
  GetTablesExtRequestFields::PROCESSOR_CAPABILITIES,
  GetTablesExtRequestFields::ALL
};
const char* _kGetTablesExtRequestFieldsNames[] = {
  "ACCESS_TYPE",
  "PROCESSOR_CAPABILITIES",
  "ALL"
};
const std::map<int, const char*> _GetTablesExtRequestFields_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kGetTablesExtRequestFieldsValues, _kGetTablesExtRequestFieldsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const GetTablesExtRequestFields::type& val) {
  std::map<int, const char*>::const_iterator it = _GetTablesExtRequestFields_VALUES_TO_NAMES.find(val);
  if (it != _GetTablesExtRequestFields_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kFileMetadataExprTypeValues[] = {
  FileMetadataExprType::ORC_SARG
};
const char* _kFileMetadataExprTypeNames[] = {
  "ORC_SARG"
};
const std::map<int, const char*> _FileMetadataExprType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kFileMetadataExprTypeValues, _kFileMetadataExprTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const FileMetadataExprType::type& val) {
  std::map<int, const char*>::const_iterator it = _FileMetadataExprType_VALUES_TO_NAMES.find(val);
  if (it != _FileMetadataExprType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kClientCapabilityValues[] = {
  ClientCapability::TEST_CAPABILITY,
  ClientCapability::INSERT_ONLY_TABLES
};
const char* _kClientCapabilityNames[] = {
  "TEST_CAPABILITY",
  "INSERT_ONLY_TABLES"
};
const std::map<int, const char*> _ClientCapability_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kClientCapabilityValues, _kClientCapabilityNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ClientCapability::type& val) {
  std::map<int, const char*>::const_iterator it = _ClientCapability_VALUES_TO_NAMES.find(val);
  if (it != _ClientCapability_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kWMResourcePlanStatusValues[] = {
  WMResourcePlanStatus::ACTIVE,
  WMResourcePlanStatus::ENABLED,
  WMResourcePlanStatus::DISABLED
};
const char* _kWMResourcePlanStatusNames[] = {
  "ACTIVE",
  "ENABLED",
  "DISABLED"
};
const std::map<int, const char*> _WMResourcePlanStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kWMResourcePlanStatusValues, _kWMResourcePlanStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const WMResourcePlanStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _WMResourcePlanStatus_VALUES_TO_NAMES.find(val);
  if (it != _WMResourcePlanStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kWMPoolSchedulingPolicyValues[] = {
  WMPoolSchedulingPolicy::FAIR,
  WMPoolSchedulingPolicy::FIFO
};
const char* _kWMPoolSchedulingPolicyNames[] = {
  "FAIR",
  "FIFO"
};
const std::map<int, const char*> _WMPoolSchedulingPolicy_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kWMPoolSchedulingPolicyValues, _kWMPoolSchedulingPolicyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const WMPoolSchedulingPolicy::type& val) {
  std::map<int, const char*>::const_iterator it = _WMPoolSchedulingPolicy_VALUES_TO_NAMES.find(val);
  if (it != _WMPoolSchedulingPolicy_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kScheduledQueryMaintenanceRequestTypeValues[] = {
  ScheduledQueryMaintenanceRequestType::CREATE,
  ScheduledQueryMaintenanceRequestType::ALTER,
  ScheduledQueryMaintenanceRequestType::DROP
};
const char* _kScheduledQueryMaintenanceRequestTypeNames[] = {
  "CREATE",
  "ALTER",
  "DROP"
};
const std::map<int, const char*> _ScheduledQueryMaintenanceRequestType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kScheduledQueryMaintenanceRequestTypeValues, _kScheduledQueryMaintenanceRequestTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ScheduledQueryMaintenanceRequestType::type& val) {
  std::map<int, const char*>::const_iterator it = _ScheduledQueryMaintenanceRequestType_VALUES_TO_NAMES.find(val);
  if (it != _ScheduledQueryMaintenanceRequestType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kQueryStateValues[] = {
  QueryState::INITED,
  QueryState::EXECUTING,
  QueryState::FAILED,
  QueryState::FINISHED,
  QueryState::TIMED_OUT
};
const char* _kQueryStateNames[] = {
  "INITED",
  "EXECUTING",
  "FAILED",
  "FINISHED",
  "TIMED_OUT"
};
const std::map<int, const char*> _QueryState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kQueryStateValues, _kQueryStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const QueryState::type& val) {
  std::map<int, const char*>::const_iterator it = _QueryState_VALUES_TO_NAMES.find(val);
  if (it != _QueryState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kPartitionFilterModeValues[] = {
  PartitionFilterMode::BY_NAMES,
  PartitionFilterMode::BY_VALUES,
  PartitionFilterMode::BY_EXPR
};
const char* _kPartitionFilterModeNames[] = {
  "BY_NAMES",
  "BY_VALUES",
  "BY_EXPR"
};
const std::map<int, const char*> _PartitionFilterMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPartitionFilterModeValues, _kPartitionFilterModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const PartitionFilterMode::type& val) {
  std::map<int, const char*>::const_iterator it = _PartitionFilterMode_VALUES_TO_NAMES.find(val);
  if (it != _PartitionFilterMode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


Version::~Version() throw() {
}


void Version::__set_version(const std::string& val) {
  this->version = val;
}

void Version::__set_comments(const std::string& val) {
  this->comments = val;
}
std::ostream& operator<<(std::ostream& out, const Version& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Version &a, Version &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.comments, b.comments);
  swap(a.__isset, b.__isset);
}

Version::Version(const Version& other0) {
  version = other0.version;
  comments = other0.comments;
  __isset = other0.__isset;
}
Version::Version( Version&& other1) {
  version = std::move(other1.version);
  comments = std::move(other1.comments);
  __isset = std::move(other1.__isset);
}
Version& Version::operator=(const Version& other2) {
  version = other2.version;
  comments = other2.comments;
  __isset = other2.__isset;
  return *this;
}
Version& Version::operator=(Version&& other3) {
  version = std::move(other3.version);
  comments = std::move(other3.comments);
  __isset = std::move(other3.__isset);
  return *this;
}
void Version::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Version(";
  out << "version=" << to_string(version);
  out << ", " << "comments=" << to_string(comments);
  out << ")";
}


FieldSchema::~FieldSchema() throw() {
}


void FieldSchema::__set_name(const std::string& val) {
  this->name = val;
}

void FieldSchema::__set_type(const std::string& val) {
  this->type = val;
}

void FieldSchema::__set_comment(const std::string& val) {
  this->comment = val;
}
std::ostream& operator<<(std::ostream& out, const FieldSchema& obj)
{
  obj.printTo(out);
  return out;
}


void swap(FieldSchema &a, FieldSchema &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

FieldSchema::FieldSchema(const FieldSchema& other4) {
  name = other4.name;
  type = other4.type;
  comment = other4.comment;
  __isset = other4.__isset;
}
FieldSchema::FieldSchema( FieldSchema&& other5) {
  name = std::move(other5.name);
  type = std::move(other5.type);
  comment = std::move(other5.comment);
  __isset = std::move(other5.__isset);
}
FieldSchema& FieldSchema::operator=(const FieldSchema& other6) {
  name = other6.name;
  type = other6.type;
  comment = other6.comment;
  __isset = other6.__isset;
  return *this;
}
FieldSchema& FieldSchema::operator=(FieldSchema&& other7) {
  name = std::move(other7.name);
  type = std::move(other7.type);
  comment = std::move(other7.comment);
  __isset = std::move(other7.__isset);
  return *this;
}
void FieldSchema::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FieldSchema(";
  out << "name=" << to_string(name);
  out << ", " << "type=" << to_string(type);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


SQLPrimaryKey::~SQLPrimaryKey() throw() {
}


void SQLPrimaryKey::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLPrimaryKey::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLPrimaryKey::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLPrimaryKey::__set_key_seq(const int32_t val) {
  this->key_seq = val;
}

void SQLPrimaryKey::__set_pk_name(const std::string& val) {
  this->pk_name = val;
}

void SQLPrimaryKey::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLPrimaryKey::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLPrimaryKey::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

void SQLPrimaryKey::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}
std::ostream& operator<<(std::ostream& out, const SQLPrimaryKey& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SQLPrimaryKey &a, SQLPrimaryKey &b) {
  using ::std::swap;
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.key_seq, b.key_seq);
  swap(a.pk_name, b.pk_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

SQLPrimaryKey::SQLPrimaryKey(const SQLPrimaryKey& other8) {
  table_db = other8.table_db;
  table_name = other8.table_name;
  column_name = other8.column_name;
  key_seq = other8.key_seq;
  pk_name = other8.pk_name;
  enable_cstr = other8.enable_cstr;
  validate_cstr = other8.validate_cstr;
  rely_cstr = other8.rely_cstr;
  catName = other8.catName;
  __isset = other8.__isset;
}
SQLPrimaryKey::SQLPrimaryKey( SQLPrimaryKey&& other9) {
  table_db = std::move(other9.table_db);
  table_name = std::move(other9.table_name);
  column_name = std::move(other9.column_name);
  key_seq = std::move(other9.key_seq);
  pk_name = std::move(other9.pk_name);
  enable_cstr = std::move(other9.enable_cstr);
  validate_cstr = std::move(other9.validate_cstr);
  rely_cstr = std::move(other9.rely_cstr);
  catName = std::move(other9.catName);
  __isset = std::move(other9.__isset);
}
SQLPrimaryKey& SQLPrimaryKey::operator=(const SQLPrimaryKey& other10) {
  table_db = other10.table_db;
  table_name = other10.table_name;
  column_name = other10.column_name;
  key_seq = other10.key_seq;
  pk_name = other10.pk_name;
  enable_cstr = other10.enable_cstr;
  validate_cstr = other10.validate_cstr;
  rely_cstr = other10.rely_cstr;
  catName = other10.catName;
  __isset = other10.__isset;
  return *this;
}
SQLPrimaryKey& SQLPrimaryKey::operator=(SQLPrimaryKey&& other11) {
  table_db = std::move(other11.table_db);
  table_name = std::move(other11.table_name);
  column_name = std::move(other11.column_name);
  key_seq = std::move(other11.key_seq);
  pk_name = std::move(other11.pk_name);
  enable_cstr = std::move(other11.enable_cstr);
  validate_cstr = std::move(other11.validate_cstr);
  rely_cstr = std::move(other11.rely_cstr);
  catName = std::move(other11.catName);
  __isset = std::move(other11.__isset);
  return *this;
}
void SQLPrimaryKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLPrimaryKey(";
  out << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "key_seq=" << to_string(key_seq);
  out << ", " << "pk_name=" << to_string(pk_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


SQLForeignKey::~SQLForeignKey() throw() {
}


void SQLForeignKey::__set_pktable_db(const std::string& val) {
  this->pktable_db = val;
}

void SQLForeignKey::__set_pktable_name(const std::string& val) {
  this->pktable_name = val;
}

void SQLForeignKey::__set_pkcolumn_name(const std::string& val) {
  this->pkcolumn_name = val;
}

void SQLForeignKey::__set_fktable_db(const std::string& val) {
  this->fktable_db = val;
}

void SQLForeignKey::__set_fktable_name(const std::string& val) {
  this->fktable_name = val;
}

void SQLForeignKey::__set_fkcolumn_name(const std::string& val) {
  this->fkcolumn_name = val;
}

void SQLForeignKey::__set_key_seq(const int32_t val) {
  this->key_seq = val;
}

void SQLForeignKey::__set_update_rule(const int32_t val) {
  this->update_rule = val;
}

void SQLForeignKey::__set_delete_rule(const int32_t val) {
  this->delete_rule = val;
}

void SQLForeignKey::__set_fk_name(const std::string& val) {
  this->fk_name = val;
}

void SQLForeignKey::__set_pk_name(const std::string& val) {
  this->pk_name = val;
}

void SQLForeignKey::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLForeignKey::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLForeignKey::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}

void SQLForeignKey::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}
std::ostream& operator<<(std::ostream& out, const SQLForeignKey& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SQLForeignKey &a, SQLForeignKey &b) {
  using ::std::swap;
  swap(a.pktable_db, b.pktable_db);
  swap(a.pktable_name, b.pktable_name);
  swap(a.pkcolumn_name, b.pkcolumn_name);
  swap(a.fktable_db, b.fktable_db);
  swap(a.fktable_name, b.fktable_name);
  swap(a.fkcolumn_name, b.fkcolumn_name);
  swap(a.key_seq, b.key_seq);
  swap(a.update_rule, b.update_rule);
  swap(a.delete_rule, b.delete_rule);
  swap(a.fk_name, b.fk_name);
  swap(a.pk_name, b.pk_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

SQLForeignKey::SQLForeignKey(const SQLForeignKey& other12) {
  pktable_db = other12.pktable_db;
  pktable_name = other12.pktable_name;
  pkcolumn_name = other12.pkcolumn_name;
  fktable_db = other12.fktable_db;
  fktable_name = other12.fktable_name;
  fkcolumn_name = other12.fkcolumn_name;
  key_seq = other12.key_seq;
  update_rule = other12.update_rule;
  delete_rule = other12.delete_rule;
  fk_name = other12.fk_name;
  pk_name = other12.pk_name;
  enable_cstr = other12.enable_cstr;
  validate_cstr = other12.validate_cstr;
  rely_cstr = other12.rely_cstr;
  catName = other12.catName;
  __isset = other12.__isset;
}
SQLForeignKey::SQLForeignKey( SQLForeignKey&& other13) {
  pktable_db = std::move(other13.pktable_db);
  pktable_name = std::move(other13.pktable_name);
  pkcolumn_name = std::move(other13.pkcolumn_name);
  fktable_db = std::move(other13.fktable_db);
  fktable_name = std::move(other13.fktable_name);
  fkcolumn_name = std::move(other13.fkcolumn_name);
  key_seq = std::move(other13.key_seq);
  update_rule = std::move(other13.update_rule);
  delete_rule = std::move(other13.delete_rule);
  fk_name = std::move(other13.fk_name);
  pk_name = std::move(other13.pk_name);
  enable_cstr = std::move(other13.enable_cstr);
  validate_cstr = std::move(other13.validate_cstr);
  rely_cstr = std::move(other13.rely_cstr);
  catName = std::move(other13.catName);
  __isset = std::move(other13.__isset);
}
SQLForeignKey& SQLForeignKey::operator=(const SQLForeignKey& other14) {
  pktable_db = other14.pktable_db;
  pktable_name = other14.pktable_name;
  pkcolumn_name = other14.pkcolumn_name;
  fktable_db = other14.fktable_db;
  fktable_name = other14.fktable_name;
  fkcolumn_name = other14.fkcolumn_name;
  key_seq = other14.key_seq;
  update_rule = other14.update_rule;
  delete_rule = other14.delete_rule;
  fk_name = other14.fk_name;
  pk_name = other14.pk_name;
  enable_cstr = other14.enable_cstr;
  validate_cstr = other14.validate_cstr;
  rely_cstr = other14.rely_cstr;
  catName = other14.catName;
  __isset = other14.__isset;
  return *this;
}
SQLForeignKey& SQLForeignKey::operator=(SQLForeignKey&& other15) {
  pktable_db = std::move(other15.pktable_db);
  pktable_name = std::move(other15.pktable_name);
  pkcolumn_name = std::move(other15.pkcolumn_name);
  fktable_db = std::move(other15.fktable_db);
  fktable_name = std::move(other15.fktable_name);
  fkcolumn_name = std::move(other15.fkcolumn_name);
  key_seq = std::move(other15.key_seq);
  update_rule = std::move(other15.update_rule);
  delete_rule = std::move(other15.delete_rule);
  fk_name = std::move(other15.fk_name);
  pk_name = std::move(other15.pk_name);
  enable_cstr = std::move(other15.enable_cstr);
  validate_cstr = std::move(other15.validate_cstr);
  rely_cstr = std::move(other15.rely_cstr);
  catName = std::move(other15.catName);
  __isset = std::move(other15.__isset);
  return *this;
}
void SQLForeignKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLForeignKey(";
  out << "pktable_db=" << to_string(pktable_db);
  out << ", " << "pktable_name=" << to_string(pktable_name);
  out << ", " << "pkcolumn_name=" << to_string(pkcolumn_name);
  out << ", " << "fktable_db=" << to_string(fktable_db);
  out << ", " << "fktable_name=" << to_string(fktable_name);
  out << ", " << "fkcolumn_name=" << to_string(fkcolumn_name);
  out << ", " << "key_seq=" << to_string(key_seq);
  out << ", " << "update_rule=" << to_string(update_rule);
  out << ", " << "delete_rule=" << to_string(delete_rule);
  out << ", " << "fk_name=" << to_string(fk_name);
  out << ", " << "pk_name=" << to_string(pk_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


SQLUniqueConstraint::~SQLUniqueConstraint() throw() {
}


void SQLUniqueConstraint::__set_catName(const std::string& val) {
  this->catName = val;
}

void SQLUniqueConstraint::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLUniqueConstraint::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLUniqueConstraint::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLUniqueConstraint::__set_key_seq(const int32_t val) {
  this->key_seq = val;
}

void SQLUniqueConstraint::__set_uk_name(const std::string& val) {
  this->uk_name = val;
}

void SQLUniqueConstraint::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLUniqueConstraint::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLUniqueConstraint::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}
std::ostream& operator<<(std::ostream& out, const SQLUniqueConstraint& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SQLUniqueConstraint &a, SQLUniqueConstraint &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.key_seq, b.key_seq);
  swap(a.uk_name, b.uk_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLUniqueConstraint::SQLUniqueConstraint(const SQLUniqueConstraint& other16) {
  catName = other16.catName;
  table_db = other16.table_db;
  table_name = other16.table_name;
  column_name = other16.column_name;
  key_seq = other16.key_seq;
  uk_name = other16.uk_name;
  enable_cstr = other16.enable_cstr;
  validate_cstr = other16.validate_cstr;
  rely_cstr = other16.rely_cstr;
  __isset = other16.__isset;
}
SQLUniqueConstraint::SQLUniqueConstraint( SQLUniqueConstraint&& other17) {
  catName = std::move(other17.catName);
  table_db = std::move(other17.table_db);
  table_name = std::move(other17.table_name);
  column_name = std::move(other17.column_name);
  key_seq = std::move(other17.key_seq);
  uk_name = std::move(other17.uk_name);
  enable_cstr = std::move(other17.enable_cstr);
  validate_cstr = std::move(other17.validate_cstr);
  rely_cstr = std::move(other17.rely_cstr);
  __isset = std::move(other17.__isset);
}
SQLUniqueConstraint& SQLUniqueConstraint::operator=(const SQLUniqueConstraint& other18) {
  catName = other18.catName;
  table_db = other18.table_db;
  table_name = other18.table_name;
  column_name = other18.column_name;
  key_seq = other18.key_seq;
  uk_name = other18.uk_name;
  enable_cstr = other18.enable_cstr;
  validate_cstr = other18.validate_cstr;
  rely_cstr = other18.rely_cstr;
  __isset = other18.__isset;
  return *this;
}
SQLUniqueConstraint& SQLUniqueConstraint::operator=(SQLUniqueConstraint&& other19) {
  catName = std::move(other19.catName);
  table_db = std::move(other19.table_db);
  table_name = std::move(other19.table_name);
  column_name = std::move(other19.column_name);
  key_seq = std::move(other19.key_seq);
  uk_name = std::move(other19.uk_name);
  enable_cstr = std::move(other19.enable_cstr);
  validate_cstr = std::move(other19.validate_cstr);
  rely_cstr = std::move(other19.rely_cstr);
  __isset = std::move(other19.__isset);
  return *this;
}
void SQLUniqueConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLUniqueConstraint(";
  out << "catName=" << to_string(catName);
  out << ", " << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "key_seq=" << to_string(key_seq);
  out << ", " << "uk_name=" << to_string(uk_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


SQLNotNullConstraint::~SQLNotNullConstraint() throw() {
}


void SQLNotNullConstraint::__set_catName(const std::string& val) {
  this->catName = val;
}

void SQLNotNullConstraint::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLNotNullConstraint::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLNotNullConstraint::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLNotNullConstraint::__set_nn_name(const std::string& val) {
  this->nn_name = val;
}

void SQLNotNullConstraint::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLNotNullConstraint::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLNotNullConstraint::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}
std::ostream& operator<<(std::ostream& out, const SQLNotNullConstraint& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SQLNotNullConstraint &a, SQLNotNullConstraint &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.nn_name, b.nn_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLNotNullConstraint::SQLNotNullConstraint(const SQLNotNullConstraint& other20) {
  catName = other20.catName;
  table_db = other20.table_db;
  table_name = other20.table_name;
  column_name = other20.column_name;
  nn_name = other20.nn_name;
  enable_cstr = other20.enable_cstr;
  validate_cstr = other20.validate_cstr;
  rely_cstr = other20.rely_cstr;
  __isset = other20.__isset;
}
SQLNotNullConstraint::SQLNotNullConstraint( SQLNotNullConstraint&& other21) {
  catName = std::move(other21.catName);
  table_db = std::move(other21.table_db);
  table_name = std::move(other21.table_name);
  column_name = std::move(other21.column_name);
  nn_name = std::move(other21.nn_name);
  enable_cstr = std::move(other21.enable_cstr);
  validate_cstr = std::move(other21.validate_cstr);
  rely_cstr = std::move(other21.rely_cstr);
  __isset = std::move(other21.__isset);
}
SQLNotNullConstraint& SQLNotNullConstraint::operator=(const SQLNotNullConstraint& other22) {
  catName = other22.catName;
  table_db = other22.table_db;
  table_name = other22.table_name;
  column_name = other22.column_name;
  nn_name = other22.nn_name;
  enable_cstr = other22.enable_cstr;
  validate_cstr = other22.validate_cstr;
  rely_cstr = other22.rely_cstr;
  __isset = other22.__isset;
  return *this;
}
SQLNotNullConstraint& SQLNotNullConstraint::operator=(SQLNotNullConstraint&& other23) {
  catName = std::move(other23.catName);
  table_db = std::move(other23.table_db);
  table_name = std::move(other23.table_name);
  column_name = std::move(other23.column_name);
  nn_name = std::move(other23.nn_name);
  enable_cstr = std::move(other23.enable_cstr);
  validate_cstr = std::move(other23.validate_cstr);
  rely_cstr = std::move(other23.rely_cstr);
  __isset = std::move(other23.__isset);
  return *this;
}
void SQLNotNullConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLNotNullConstraint(";
  out << "catName=" << to_string(catName);
  out << ", " << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "nn_name=" << to_string(nn_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


SQLDefaultConstraint::~SQLDefaultConstraint() throw() {
}


void SQLDefaultConstraint::__set_catName(const std::string& val) {
  this->catName = val;
}

void SQLDefaultConstraint::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLDefaultConstraint::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLDefaultConstraint::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLDefaultConstraint::__set_default_value(const std::string& val) {
  this->default_value = val;
}

void SQLDefaultConstraint::__set_dc_name(const std::string& val) {
  this->dc_name = val;
}

void SQLDefaultConstraint::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLDefaultConstraint::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLDefaultConstraint::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}
std::ostream& operator<<(std::ostream& out, const SQLDefaultConstraint& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SQLDefaultConstraint &a, SQLDefaultConstraint &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.default_value, b.default_value);
  swap(a.dc_name, b.dc_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLDefaultConstraint::SQLDefaultConstraint(const SQLDefaultConstraint& other24) {
  catName = other24.catName;
  table_db = other24.table_db;
  table_name = other24.table_name;
  column_name = other24.column_name;
  default_value = other24.default_value;
  dc_name = other24.dc_name;
  enable_cstr = other24.enable_cstr;
  validate_cstr = other24.validate_cstr;
  rely_cstr = other24.rely_cstr;
  __isset = other24.__isset;
}
SQLDefaultConstraint::SQLDefaultConstraint( SQLDefaultConstraint&& other25) {
  catName = std::move(other25.catName);
  table_db = std::move(other25.table_db);
  table_name = std::move(other25.table_name);
  column_name = std::move(other25.column_name);
  default_value = std::move(other25.default_value);
  dc_name = std::move(other25.dc_name);
  enable_cstr = std::move(other25.enable_cstr);
  validate_cstr = std::move(other25.validate_cstr);
  rely_cstr = std::move(other25.rely_cstr);
  __isset = std::move(other25.__isset);
}
SQLDefaultConstraint& SQLDefaultConstraint::operator=(const SQLDefaultConstraint& other26) {
  catName = other26.catName;
  table_db = other26.table_db;
  table_name = other26.table_name;
  column_name = other26.column_name;
  default_value = other26.default_value;
  dc_name = other26.dc_name;
  enable_cstr = other26.enable_cstr;
  validate_cstr = other26.validate_cstr;
  rely_cstr = other26.rely_cstr;
  __isset = other26.__isset;
  return *this;
}
SQLDefaultConstraint& SQLDefaultConstraint::operator=(SQLDefaultConstraint&& other27) {
  catName = std::move(other27.catName);
  table_db = std::move(other27.table_db);
  table_name = std::move(other27.table_name);
  column_name = std::move(other27.column_name);
  default_value = std::move(other27.default_value);
  dc_name = std::move(other27.dc_name);
  enable_cstr = std::move(other27.enable_cstr);
  validate_cstr = std::move(other27.validate_cstr);
  rely_cstr = std::move(other27.rely_cstr);
  __isset = std::move(other27.__isset);
  return *this;
}
void SQLDefaultConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLDefaultConstraint(";
  out << "catName=" << to_string(catName);
  out << ", " << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "default_value=" << to_string(default_value);
  out << ", " << "dc_name=" << to_string(dc_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


SQLCheckConstraint::~SQLCheckConstraint() throw() {
}


void SQLCheckConstraint::__set_catName(const std::string& val) {
  this->catName = val;
}

void SQLCheckConstraint::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void SQLCheckConstraint::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void SQLCheckConstraint::__set_column_name(const std::string& val) {
  this->column_name = val;
}

void SQLCheckConstraint::__set_check_expression(const std::string& val) {
  this->check_expression = val;
}

void SQLCheckConstraint::__set_dc_name(const std::string& val) {
  this->dc_name = val;
}

void SQLCheckConstraint::__set_enable_cstr(const bool val) {
  this->enable_cstr = val;
}

void SQLCheckConstraint::__set_validate_cstr(const bool val) {
  this->validate_cstr = val;
}

void SQLCheckConstraint::__set_rely_cstr(const bool val) {
  this->rely_cstr = val;
}
std::ostream& operator<<(std::ostream& out, const SQLCheckConstraint& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SQLCheckConstraint &a, SQLCheckConstraint &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.table_db, b.table_db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.check_expression, b.check_expression);
  swap(a.dc_name, b.dc_name);
  swap(a.enable_cstr, b.enable_cstr);
  swap(a.validate_cstr, b.validate_cstr);
  swap(a.rely_cstr, b.rely_cstr);
  swap(a.__isset, b.__isset);
}

SQLCheckConstraint::SQLCheckConstraint(const SQLCheckConstraint& other28) {
  catName = other28.catName;
  table_db = other28.table_db;
  table_name = other28.table_name;
  column_name = other28.column_name;
  check_expression = other28.check_expression;
  dc_name = other28.dc_name;
  enable_cstr = other28.enable_cstr;
  validate_cstr = other28.validate_cstr;
  rely_cstr = other28.rely_cstr;
  __isset = other28.__isset;
}
SQLCheckConstraint::SQLCheckConstraint( SQLCheckConstraint&& other29) {
  catName = std::move(other29.catName);
  table_db = std::move(other29.table_db);
  table_name = std::move(other29.table_name);
  column_name = std::move(other29.column_name);
  check_expression = std::move(other29.check_expression);
  dc_name = std::move(other29.dc_name);
  enable_cstr = std::move(other29.enable_cstr);
  validate_cstr = std::move(other29.validate_cstr);
  rely_cstr = std::move(other29.rely_cstr);
  __isset = std::move(other29.__isset);
}
SQLCheckConstraint& SQLCheckConstraint::operator=(const SQLCheckConstraint& other30) {
  catName = other30.catName;
  table_db = other30.table_db;
  table_name = other30.table_name;
  column_name = other30.column_name;
  check_expression = other30.check_expression;
  dc_name = other30.dc_name;
  enable_cstr = other30.enable_cstr;
  validate_cstr = other30.validate_cstr;
  rely_cstr = other30.rely_cstr;
  __isset = other30.__isset;
  return *this;
}
SQLCheckConstraint& SQLCheckConstraint::operator=(SQLCheckConstraint&& other31) {
  catName = std::move(other31.catName);
  table_db = std::move(other31.table_db);
  table_name = std::move(other31.table_name);
  column_name = std::move(other31.column_name);
  check_expression = std::move(other31.check_expression);
  dc_name = std::move(other31.dc_name);
  enable_cstr = std::move(other31.enable_cstr);
  validate_cstr = std::move(other31.validate_cstr);
  rely_cstr = std::move(other31.rely_cstr);
  __isset = std::move(other31.__isset);
  return *this;
}
void SQLCheckConstraint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SQLCheckConstraint(";
  out << "catName=" << to_string(catName);
  out << ", " << "table_db=" << to_string(table_db);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ", " << "check_expression=" << to_string(check_expression);
  out << ", " << "dc_name=" << to_string(dc_name);
  out << ", " << "enable_cstr=" << to_string(enable_cstr);
  out << ", " << "validate_cstr=" << to_string(validate_cstr);
  out << ", " << "rely_cstr=" << to_string(rely_cstr);
  out << ")";
}


Type::~Type() throw() {
}


void Type::__set_name(const std::string& val) {
  this->name = val;
}

void Type::__set_type1(const std::string& val) {
  this->type1 = val;
__isset.type1 = true;
}

void Type::__set_type2(const std::string& val) {
  this->type2 = val;
__isset.type2 = true;
}

void Type::__set_fields(const std::vector<FieldSchema> & val) {
  this->fields = val;
__isset.fields = true;
}
std::ostream& operator<<(std::ostream& out, const Type& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Type &a, Type &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.type1, b.type1);
  swap(a.type2, b.type2);
  swap(a.fields, b.fields);
  swap(a.__isset, b.__isset);
}

Type::Type(const Type& other38) {
  name = other38.name;
  type1 = other38.type1;
  type2 = other38.type2;
  fields = other38.fields;
  __isset = other38.__isset;
}
Type::Type( Type&& other39) {
  name = std::move(other39.name);
  type1 = std::move(other39.type1);
  type2 = std::move(other39.type2);
  fields = std::move(other39.fields);
  __isset = std::move(other39.__isset);
}
Type& Type::operator=(const Type& other40) {
  name = other40.name;
  type1 = other40.type1;
  type2 = other40.type2;
  fields = other40.fields;
  __isset = other40.__isset;
  return *this;
}
Type& Type::operator=(Type&& other41) {
  name = std::move(other41.name);
  type1 = std::move(other41.type1);
  type2 = std::move(other41.type2);
  fields = std::move(other41.fields);
  __isset = std::move(other41.__isset);
  return *this;
}
void Type::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Type(";
  out << "name=" << to_string(name);
  out << ", " << "type1="; (__isset.type1 ? (out << to_string(type1)) : (out << "<null>"));
  out << ", " << "type2="; (__isset.type2 ? (out << to_string(type2)) : (out << "<null>"));
  out << ", " << "fields="; (__isset.fields ? (out << to_string(fields)) : (out << "<null>"));
  out << ")";
}


HiveObjectRef::~HiveObjectRef() throw() {
}


void HiveObjectRef::__set_objectType(const HiveObjectType::type val) {
  this->objectType = val;
}

void HiveObjectRef::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void HiveObjectRef::__set_objectName(const std::string& val) {
  this->objectName = val;
}

void HiveObjectRef::__set_partValues(const std::vector<std::string> & val) {
  this->partValues = val;
}

void HiveObjectRef::__set_columnName(const std::string& val) {
  this->columnName = val;
}

void HiveObjectRef::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}
std::ostream& operator<<(std::ostream& out, const HiveObjectRef& obj)
{
  obj.printTo(out);
  return out;
}


void swap(HiveObjectRef &a, HiveObjectRef &b) {
  using ::std::swap;
  swap(a.objectType, b.objectType);
  swap(a.dbName, b.dbName);
  swap(a.objectName, b.objectName);
  swap(a.partValues, b.partValues);
  swap(a.columnName, b.columnName);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

HiveObjectRef::HiveObjectRef(const HiveObjectRef& other49) {
  objectType = other49.objectType;
  dbName = other49.dbName;
  objectName = other49.objectName;
  partValues = other49.partValues;
  columnName = other49.columnName;
  catName = other49.catName;
  __isset = other49.__isset;
}
HiveObjectRef::HiveObjectRef( HiveObjectRef&& other50) {
  objectType = std::move(other50.objectType);
  dbName = std::move(other50.dbName);
  objectName = std::move(other50.objectName);
  partValues = std::move(other50.partValues);
  columnName = std::move(other50.columnName);
  catName = std::move(other50.catName);
  __isset = std::move(other50.__isset);
}
HiveObjectRef& HiveObjectRef::operator=(const HiveObjectRef& other51) {
  objectType = other51.objectType;
  dbName = other51.dbName;
  objectName = other51.objectName;
  partValues = other51.partValues;
  columnName = other51.columnName;
  catName = other51.catName;
  __isset = other51.__isset;
  return *this;
}
HiveObjectRef& HiveObjectRef::operator=(HiveObjectRef&& other52) {
  objectType = std::move(other52.objectType);
  dbName = std::move(other52.dbName);
  objectName = std::move(other52.objectName);
  partValues = std::move(other52.partValues);
  columnName = std::move(other52.columnName);
  catName = std::move(other52.catName);
  __isset = std::move(other52.__isset);
  return *this;
}
void HiveObjectRef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HiveObjectRef(";
  out << "objectType=" << to_string(objectType);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "objectName=" << to_string(objectName);
  out << ", " << "partValues=" << to_string(partValues);
  out << ", " << "columnName=" << to_string(columnName);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


PrivilegeGrantInfo::~PrivilegeGrantInfo() throw() {
}


void PrivilegeGrantInfo::__set_privilege(const std::string& val) {
  this->privilege = val;
}

void PrivilegeGrantInfo::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void PrivilegeGrantInfo::__set_grantor(const std::string& val) {
  this->grantor = val;
}

void PrivilegeGrantInfo::__set_grantorType(const PrincipalType::type val) {
  this->grantorType = val;
}

void PrivilegeGrantInfo::__set_grantOption(const bool val) {
  this->grantOption = val;
}
std::ostream& operator<<(std::ostream& out, const PrivilegeGrantInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PrivilegeGrantInfo &a, PrivilegeGrantInfo &b) {
  using ::std::swap;
  swap(a.privilege, b.privilege);
  swap(a.createTime, b.createTime);
  swap(a.grantor, b.grantor);
  swap(a.grantorType, b.grantorType);
  swap(a.grantOption, b.grantOption);
  swap(a.__isset, b.__isset);
}

PrivilegeGrantInfo::PrivilegeGrantInfo(const PrivilegeGrantInfo& other54) {
  privilege = other54.privilege;
  createTime = other54.createTime;
  grantor = other54.grantor;
  grantorType = other54.grantorType;
  grantOption = other54.grantOption;
  __isset = other54.__isset;
}
PrivilegeGrantInfo::PrivilegeGrantInfo( PrivilegeGrantInfo&& other55) {
  privilege = std::move(other55.privilege);
  createTime = std::move(other55.createTime);
  grantor = std::move(other55.grantor);
  grantorType = std::move(other55.grantorType);
  grantOption = std::move(other55.grantOption);
  __isset = std::move(other55.__isset);
}
PrivilegeGrantInfo& PrivilegeGrantInfo::operator=(const PrivilegeGrantInfo& other56) {
  privilege = other56.privilege;
  createTime = other56.createTime;
  grantor = other56.grantor;
  grantorType = other56.grantorType;
  grantOption = other56.grantOption;
  __isset = other56.__isset;
  return *this;
}
PrivilegeGrantInfo& PrivilegeGrantInfo::operator=(PrivilegeGrantInfo&& other57) {
  privilege = std::move(other57.privilege);
  createTime = std::move(other57.createTime);
  grantor = std::move(other57.grantor);
  grantorType = std::move(other57.grantorType);
  grantOption = std::move(other57.grantOption);
  __isset = std::move(other57.__isset);
  return *this;
}
void PrivilegeGrantInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrivilegeGrantInfo(";
  out << "privilege=" << to_string(privilege);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "grantor=" << to_string(grantor);
  out << ", " << "grantorType=" << to_string(grantorType);
  out << ", " << "grantOption=" << to_string(grantOption);
  out << ")";
}


HiveObjectPrivilege::~HiveObjectPrivilege() throw() {
}


void HiveObjectPrivilege::__set_hiveObject(const HiveObjectRef& val) {
  this->hiveObject = val;
}

void HiveObjectPrivilege::__set_principalName(const std::string& val) {
  this->principalName = val;
}

void HiveObjectPrivilege::__set_principalType(const PrincipalType::type val) {
  this->principalType = val;
}

void HiveObjectPrivilege::__set_grantInfo(const PrivilegeGrantInfo& val) {
  this->grantInfo = val;
}

void HiveObjectPrivilege::__set_authorizer(const std::string& val) {
  this->authorizer = val;
}
std::ostream& operator<<(std::ostream& out, const HiveObjectPrivilege& obj)
{
  obj.printTo(out);
  return out;
}


void swap(HiveObjectPrivilege &a, HiveObjectPrivilege &b) {
  using ::std::swap;
  swap(a.hiveObject, b.hiveObject);
  swap(a.principalName, b.principalName);
  swap(a.principalType, b.principalType);
  swap(a.grantInfo, b.grantInfo);
  swap(a.authorizer, b.authorizer);
  swap(a.__isset, b.__isset);
}

HiveObjectPrivilege::HiveObjectPrivilege(const HiveObjectPrivilege& other59) {
  hiveObject = other59.hiveObject;
  principalName = other59.principalName;
  principalType = other59.principalType;
  grantInfo = other59.grantInfo;
  authorizer = other59.authorizer;
  __isset = other59.__isset;
}
HiveObjectPrivilege::HiveObjectPrivilege( HiveObjectPrivilege&& other60) {
  hiveObject = std::move(other60.hiveObject);
  principalName = std::move(other60.principalName);
  principalType = std::move(other60.principalType);
  grantInfo = std::move(other60.grantInfo);
  authorizer = std::move(other60.authorizer);
  __isset = std::move(other60.__isset);
}
HiveObjectPrivilege& HiveObjectPrivilege::operator=(const HiveObjectPrivilege& other61) {
  hiveObject = other61.hiveObject;
  principalName = other61.principalName;
  principalType = other61.principalType;
  grantInfo = other61.grantInfo;
  authorizer = other61.authorizer;
  __isset = other61.__isset;
  return *this;
}
HiveObjectPrivilege& HiveObjectPrivilege::operator=(HiveObjectPrivilege&& other62) {
  hiveObject = std::move(other62.hiveObject);
  principalName = std::move(other62.principalName);
  principalType = std::move(other62.principalType);
  grantInfo = std::move(other62.grantInfo);
  authorizer = std::move(other62.authorizer);
  __isset = std::move(other62.__isset);
  return *this;
}
void HiveObjectPrivilege::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HiveObjectPrivilege(";
  out << "hiveObject=" << to_string(hiveObject);
  out << ", " << "principalName=" << to_string(principalName);
  out << ", " << "principalType=" << to_string(principalType);
  out << ", " << "grantInfo=" << to_string(grantInfo);
  out << ", " << "authorizer=" << to_string(authorizer);
  out << ")";
}


PrivilegeBag::~PrivilegeBag() throw() {
}


void PrivilegeBag::__set_privileges(const std::vector<HiveObjectPrivilege> & val) {
  this->privileges = val;
}
std::ostream& operator<<(std::ostream& out, const PrivilegeBag& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PrivilegeBag &a, PrivilegeBag &b) {
  using ::std::swap;
  swap(a.privileges, b.privileges);
  swap(a.__isset, b.__isset);
}

PrivilegeBag::PrivilegeBag(const PrivilegeBag& other69) {
  privileges = other69.privileges;
  __isset = other69.__isset;
}
PrivilegeBag::PrivilegeBag( PrivilegeBag&& other70) {
  privileges = std::move(other70.privileges);
  __isset = std::move(other70.__isset);
}
PrivilegeBag& PrivilegeBag::operator=(const PrivilegeBag& other71) {
  privileges = other71.privileges;
  __isset = other71.__isset;
  return *this;
}
PrivilegeBag& PrivilegeBag::operator=(PrivilegeBag&& other72) {
  privileges = std::move(other72.privileges);
  __isset = std::move(other72.__isset);
  return *this;
}
void PrivilegeBag::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrivilegeBag(";
  out << "privileges=" << to_string(privileges);
  out << ")";
}


PrincipalPrivilegeSet::~PrincipalPrivilegeSet() throw() {
}


void PrincipalPrivilegeSet::__set_userPrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val) {
  this->userPrivileges = val;
}

void PrincipalPrivilegeSet::__set_groupPrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val) {
  this->groupPrivileges = val;
}

void PrincipalPrivilegeSet::__set_rolePrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val) {
  this->rolePrivileges = val;
}
std::ostream& operator<<(std::ostream& out, const PrincipalPrivilegeSet& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PrincipalPrivilegeSet &a, PrincipalPrivilegeSet &b) {
  using ::std::swap;
  swap(a.userPrivileges, b.userPrivileges);
  swap(a.groupPrivileges, b.groupPrivileges);
  swap(a.rolePrivileges, b.rolePrivileges);
  swap(a.__isset, b.__isset);
}

PrincipalPrivilegeSet::PrincipalPrivilegeSet(const PrincipalPrivilegeSet& other115) {
  userPrivileges = other115.userPrivileges;
  groupPrivileges = other115.groupPrivileges;
  rolePrivileges = other115.rolePrivileges;
  __isset = other115.__isset;
}
PrincipalPrivilegeSet::PrincipalPrivilegeSet( PrincipalPrivilegeSet&& other116) {
  userPrivileges = std::move(other116.userPrivileges);
  groupPrivileges = std::move(other116.groupPrivileges);
  rolePrivileges = std::move(other116.rolePrivileges);
  __isset = std::move(other116.__isset);
}
PrincipalPrivilegeSet& PrincipalPrivilegeSet::operator=(const PrincipalPrivilegeSet& other117) {
  userPrivileges = other117.userPrivileges;
  groupPrivileges = other117.groupPrivileges;
  rolePrivileges = other117.rolePrivileges;
  __isset = other117.__isset;
  return *this;
}
PrincipalPrivilegeSet& PrincipalPrivilegeSet::operator=(PrincipalPrivilegeSet&& other118) {
  userPrivileges = std::move(other118.userPrivileges);
  groupPrivileges = std::move(other118.groupPrivileges);
  rolePrivileges = std::move(other118.rolePrivileges);
  __isset = std::move(other118.__isset);
  return *this;
}
void PrincipalPrivilegeSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrincipalPrivilegeSet(";
  out << "userPrivileges=" << to_string(userPrivileges);
  out << ", " << "groupPrivileges=" << to_string(groupPrivileges);
  out << ", " << "rolePrivileges=" << to_string(rolePrivileges);
  out << ")";
}


GrantRevokePrivilegeRequest::~GrantRevokePrivilegeRequest() throw() {
}


void GrantRevokePrivilegeRequest::__set_requestType(const GrantRevokeType::type val) {
  this->requestType = val;
}

void GrantRevokePrivilegeRequest::__set_privileges(const PrivilegeBag& val) {
  this->privileges = val;
}

void GrantRevokePrivilegeRequest::__set_revokeGrantOption(const bool val) {
  this->revokeGrantOption = val;
__isset.revokeGrantOption = true;
}
std::ostream& operator<<(std::ostream& out, const GrantRevokePrivilegeRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GrantRevokePrivilegeRequest &a, GrantRevokePrivilegeRequest &b) {
  using ::std::swap;
  swap(a.requestType, b.requestType);
  swap(a.privileges, b.privileges);
  swap(a.revokeGrantOption, b.revokeGrantOption);
  swap(a.__isset, b.__isset);
}

GrantRevokePrivilegeRequest::GrantRevokePrivilegeRequest(const GrantRevokePrivilegeRequest& other120) {
  requestType = other120.requestType;
  privileges = other120.privileges;
  revokeGrantOption = other120.revokeGrantOption;
  __isset = other120.__isset;
}
GrantRevokePrivilegeRequest::GrantRevokePrivilegeRequest( GrantRevokePrivilegeRequest&& other121) {
  requestType = std::move(other121.requestType);
  privileges = std::move(other121.privileges);
  revokeGrantOption = std::move(other121.revokeGrantOption);
  __isset = std::move(other121.__isset);
}
GrantRevokePrivilegeRequest& GrantRevokePrivilegeRequest::operator=(const GrantRevokePrivilegeRequest& other122) {
  requestType = other122.requestType;
  privileges = other122.privileges;
  revokeGrantOption = other122.revokeGrantOption;
  __isset = other122.__isset;
  return *this;
}
GrantRevokePrivilegeRequest& GrantRevokePrivilegeRequest::operator=(GrantRevokePrivilegeRequest&& other123) {
  requestType = std::move(other123.requestType);
  privileges = std::move(other123.privileges);
  revokeGrantOption = std::move(other123.revokeGrantOption);
  __isset = std::move(other123.__isset);
  return *this;
}
void GrantRevokePrivilegeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GrantRevokePrivilegeRequest(";
  out << "requestType=" << to_string(requestType);
  out << ", " << "privileges=" << to_string(privileges);
  out << ", " << "revokeGrantOption="; (__isset.revokeGrantOption ? (out << to_string(revokeGrantOption)) : (out << "<null>"));
  out << ")";
}


GrantRevokePrivilegeResponse::~GrantRevokePrivilegeResponse() throw() {
}


void GrantRevokePrivilegeResponse::__set_success(const bool val) {
  this->success = val;
__isset.success = true;
}
std::ostream& operator<<(std::ostream& out, const GrantRevokePrivilegeResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GrantRevokePrivilegeResponse &a, GrantRevokePrivilegeResponse &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.__isset, b.__isset);
}

GrantRevokePrivilegeResponse::GrantRevokePrivilegeResponse(const GrantRevokePrivilegeResponse& other124) {
  success = other124.success;
  __isset = other124.__isset;
}
GrantRevokePrivilegeResponse::GrantRevokePrivilegeResponse( GrantRevokePrivilegeResponse&& other125) {
  success = std::move(other125.success);
  __isset = std::move(other125.__isset);
}
GrantRevokePrivilegeResponse& GrantRevokePrivilegeResponse::operator=(const GrantRevokePrivilegeResponse& other126) {
  success = other126.success;
  __isset = other126.__isset;
  return *this;
}
GrantRevokePrivilegeResponse& GrantRevokePrivilegeResponse::operator=(GrantRevokePrivilegeResponse&& other127) {
  success = std::move(other127.success);
  __isset = std::move(other127.__isset);
  return *this;
}
void GrantRevokePrivilegeResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GrantRevokePrivilegeResponse(";
  out << "success="; (__isset.success ? (out << to_string(success)) : (out << "<null>"));
  out << ")";
}


TruncateTableRequest::~TruncateTableRequest() throw() {
}


void TruncateTableRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void TruncateTableRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void TruncateTableRequest::__set_partNames(const std::vector<std::string> & val) {
  this->partNames = val;
__isset.partNames = true;
}

void TruncateTableRequest::__set_writeId(const int64_t val) {
  this->writeId = val;
__isset.writeId = true;
}

void TruncateTableRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}
std::ostream& operator<<(std::ostream& out, const TruncateTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TruncateTableRequest &a, TruncateTableRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.partNames, b.partNames);
  swap(a.writeId, b.writeId);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.__isset, b.__isset);
}

TruncateTableRequest::TruncateTableRequest(const TruncateTableRequest& other134) {
  dbName = other134.dbName;
  tableName = other134.tableName;
  partNames = other134.partNames;
  writeId = other134.writeId;
  validWriteIdList = other134.validWriteIdList;
  __isset = other134.__isset;
}
TruncateTableRequest::TruncateTableRequest( TruncateTableRequest&& other135) {
  dbName = std::move(other135.dbName);
  tableName = std::move(other135.tableName);
  partNames = std::move(other135.partNames);
  writeId = std::move(other135.writeId);
  validWriteIdList = std::move(other135.validWriteIdList);
  __isset = std::move(other135.__isset);
}
TruncateTableRequest& TruncateTableRequest::operator=(const TruncateTableRequest& other136) {
  dbName = other136.dbName;
  tableName = other136.tableName;
  partNames = other136.partNames;
  writeId = other136.writeId;
  validWriteIdList = other136.validWriteIdList;
  __isset = other136.__isset;
  return *this;
}
TruncateTableRequest& TruncateTableRequest::operator=(TruncateTableRequest&& other137) {
  dbName = std::move(other137.dbName);
  tableName = std::move(other137.tableName);
  partNames = std::move(other137.partNames);
  writeId = std::move(other137.writeId);
  validWriteIdList = std::move(other137.validWriteIdList);
  __isset = std::move(other137.__isset);
  return *this;
}
void TruncateTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TruncateTableRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "partNames="; (__isset.partNames ? (out << to_string(partNames)) : (out << "<null>"));
  out << ", " << "writeId="; (__isset.writeId ? (out << to_string(writeId)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ")";
}


TruncateTableResponse::~TruncateTableResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const TruncateTableResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TruncateTableResponse &a, TruncateTableResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

TruncateTableResponse::TruncateTableResponse(const TruncateTableResponse& other138) {
  (void) other138;
}
TruncateTableResponse::TruncateTableResponse( TruncateTableResponse&& other139) {
  (void) other139;
}
TruncateTableResponse& TruncateTableResponse::operator=(const TruncateTableResponse& other140) {
  (void) other140;
  return *this;
}
TruncateTableResponse& TruncateTableResponse::operator=(TruncateTableResponse&& other141) {
  (void) other141;
  return *this;
}
void TruncateTableResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TruncateTableResponse(";
  out << ")";
}


Role::~Role() throw() {
}


void Role::__set_roleName(const std::string& val) {
  this->roleName = val;
}

void Role::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Role::__set_ownerName(const std::string& val) {
  this->ownerName = val;
}
std::ostream& operator<<(std::ostream& out, const Role& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Role &a, Role &b) {
  using ::std::swap;
  swap(a.roleName, b.roleName);
  swap(a.createTime, b.createTime);
  swap(a.ownerName, b.ownerName);
  swap(a.__isset, b.__isset);
}

Role::Role(const Role& other142) {
  roleName = other142.roleName;
  createTime = other142.createTime;
  ownerName = other142.ownerName;
  __isset = other142.__isset;
}
Role::Role( Role&& other143) {
  roleName = std::move(other143.roleName);
  createTime = std::move(other143.createTime);
  ownerName = std::move(other143.ownerName);
  __isset = std::move(other143.__isset);
}
Role& Role::operator=(const Role& other144) {
  roleName = other144.roleName;
  createTime = other144.createTime;
  ownerName = other144.ownerName;
  __isset = other144.__isset;
  return *this;
}
Role& Role::operator=(Role&& other145) {
  roleName = std::move(other145.roleName);
  createTime = std::move(other145.createTime);
  ownerName = std::move(other145.ownerName);
  __isset = std::move(other145.__isset);
  return *this;
}
void Role::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Role(";
  out << "roleName=" << to_string(roleName);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "ownerName=" << to_string(ownerName);
  out << ")";
}


RolePrincipalGrant::~RolePrincipalGrant() throw() {
}


void RolePrincipalGrant::__set_roleName(const std::string& val) {
  this->roleName = val;
}

void RolePrincipalGrant::__set_principalName(const std::string& val) {
  this->principalName = val;
}

void RolePrincipalGrant::__set_principalType(const PrincipalType::type val) {
  this->principalType = val;
}

void RolePrincipalGrant::__set_grantOption(const bool val) {
  this->grantOption = val;
}

void RolePrincipalGrant::__set_grantTime(const int32_t val) {
  this->grantTime = val;
}

void RolePrincipalGrant::__set_grantorName(const std::string& val) {
  this->grantorName = val;
}

void RolePrincipalGrant::__set_grantorPrincipalType(const PrincipalType::type val) {
  this->grantorPrincipalType = val;
}
std::ostream& operator<<(std::ostream& out, const RolePrincipalGrant& obj)
{
  obj.printTo(out);
  return out;
}


void swap(RolePrincipalGrant &a, RolePrincipalGrant &b) {
  using ::std::swap;
  swap(a.roleName, b.roleName);
  swap(a.principalName, b.principalName);
  swap(a.principalType, b.principalType);
  swap(a.grantOption, b.grantOption);
  swap(a.grantTime, b.grantTime);
  swap(a.grantorName, b.grantorName);
  swap(a.grantorPrincipalType, b.grantorPrincipalType);
  swap(a.__isset, b.__isset);
}

RolePrincipalGrant::RolePrincipalGrant(const RolePrincipalGrant& other148) {
  roleName = other148.roleName;
  principalName = other148.principalName;
  principalType = other148.principalType;
  grantOption = other148.grantOption;
  grantTime = other148.grantTime;
  grantorName = other148.grantorName;
  grantorPrincipalType = other148.grantorPrincipalType;
  __isset = other148.__isset;
}
RolePrincipalGrant::RolePrincipalGrant( RolePrincipalGrant&& other149) {
  roleName = std::move(other149.roleName);
  principalName = std::move(other149.principalName);
  principalType = std::move(other149.principalType);
  grantOption = std::move(other149.grantOption);
  grantTime = std::move(other149.grantTime);
  grantorName = std::move(other149.grantorName);
  grantorPrincipalType = std::move(other149.grantorPrincipalType);
  __isset = std::move(other149.__isset);
}
RolePrincipalGrant& RolePrincipalGrant::operator=(const RolePrincipalGrant& other150) {
  roleName = other150.roleName;
  principalName = other150.principalName;
  principalType = other150.principalType;
  grantOption = other150.grantOption;
  grantTime = other150.grantTime;
  grantorName = other150.grantorName;
  grantorPrincipalType = other150.grantorPrincipalType;
  __isset = other150.__isset;
  return *this;
}
RolePrincipalGrant& RolePrincipalGrant::operator=(RolePrincipalGrant&& other151) {
  roleName = std::move(other151.roleName);
  principalName = std::move(other151.principalName);
  principalType = std::move(other151.principalType);
  grantOption = std::move(other151.grantOption);
  grantTime = std::move(other151.grantTime);
  grantorName = std::move(other151.grantorName);
  grantorPrincipalType = std::move(other151.grantorPrincipalType);
  __isset = std::move(other151.__isset);
  return *this;
}
void RolePrincipalGrant::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RolePrincipalGrant(";
  out << "roleName=" << to_string(roleName);
  out << ", " << "principalName=" << to_string(principalName);
  out << ", " << "principalType=" << to_string(principalType);
  out << ", " << "grantOption=" << to_string(grantOption);
  out << ", " << "grantTime=" << to_string(grantTime);
  out << ", " << "grantorName=" << to_string(grantorName);
  out << ", " << "grantorPrincipalType=" << to_string(grantorPrincipalType);
  out << ")";
}


GetRoleGrantsForPrincipalRequest::~GetRoleGrantsForPrincipalRequest() throw() {
}


void GetRoleGrantsForPrincipalRequest::__set_principal_name(const std::string& val) {
  this->principal_name = val;
}

void GetRoleGrantsForPrincipalRequest::__set_principal_type(const PrincipalType::type val) {
  this->principal_type = val;
}
std::ostream& operator<<(std::ostream& out, const GetRoleGrantsForPrincipalRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetRoleGrantsForPrincipalRequest &a, GetRoleGrantsForPrincipalRequest &b) {
  using ::std::swap;
  swap(a.principal_name, b.principal_name);
  swap(a.principal_type, b.principal_type);
}

GetRoleGrantsForPrincipalRequest::GetRoleGrantsForPrincipalRequest(const GetRoleGrantsForPrincipalRequest& other153) {
  principal_name = other153.principal_name;
  principal_type = other153.principal_type;
}
GetRoleGrantsForPrincipalRequest::GetRoleGrantsForPrincipalRequest( GetRoleGrantsForPrincipalRequest&& other154) {
  principal_name = std::move(other154.principal_name);
  principal_type = std::move(other154.principal_type);
}
GetRoleGrantsForPrincipalRequest& GetRoleGrantsForPrincipalRequest::operator=(const GetRoleGrantsForPrincipalRequest& other155) {
  principal_name = other155.principal_name;
  principal_type = other155.principal_type;
  return *this;
}
GetRoleGrantsForPrincipalRequest& GetRoleGrantsForPrincipalRequest::operator=(GetRoleGrantsForPrincipalRequest&& other156) {
  principal_name = std::move(other156.principal_name);
  principal_type = std::move(other156.principal_type);
  return *this;
}
void GetRoleGrantsForPrincipalRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetRoleGrantsForPrincipalRequest(";
  out << "principal_name=" << to_string(principal_name);
  out << ", " << "principal_type=" << to_string(principal_type);
  out << ")";
}


GetRoleGrantsForPrincipalResponse::~GetRoleGrantsForPrincipalResponse() throw() {
}


void GetRoleGrantsForPrincipalResponse::__set_principalGrants(const std::vector<RolePrincipalGrant> & val) {
  this->principalGrants = val;
}
std::ostream& operator<<(std::ostream& out, const GetRoleGrantsForPrincipalResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetRoleGrantsForPrincipalResponse &a, GetRoleGrantsForPrincipalResponse &b) {
  using ::std::swap;
  swap(a.principalGrants, b.principalGrants);
}

GetRoleGrantsForPrincipalResponse::GetRoleGrantsForPrincipalResponse(const GetRoleGrantsForPrincipalResponse& other163) {
  principalGrants = other163.principalGrants;
}
GetRoleGrantsForPrincipalResponse::GetRoleGrantsForPrincipalResponse( GetRoleGrantsForPrincipalResponse&& other164) {
  principalGrants = std::move(other164.principalGrants);
}
GetRoleGrantsForPrincipalResponse& GetRoleGrantsForPrincipalResponse::operator=(const GetRoleGrantsForPrincipalResponse& other165) {
  principalGrants = other165.principalGrants;
  return *this;
}
GetRoleGrantsForPrincipalResponse& GetRoleGrantsForPrincipalResponse::operator=(GetRoleGrantsForPrincipalResponse&& other166) {
  principalGrants = std::move(other166.principalGrants);
  return *this;
}
void GetRoleGrantsForPrincipalResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetRoleGrantsForPrincipalResponse(";
  out << "principalGrants=" << to_string(principalGrants);
  out << ")";
}


GetPrincipalsInRoleRequest::~GetPrincipalsInRoleRequest() throw() {
}


void GetPrincipalsInRoleRequest::__set_roleName(const std::string& val) {
  this->roleName = val;
}
std::ostream& operator<<(std::ostream& out, const GetPrincipalsInRoleRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPrincipalsInRoleRequest &a, GetPrincipalsInRoleRequest &b) {
  using ::std::swap;
  swap(a.roleName, b.roleName);
}

GetPrincipalsInRoleRequest::GetPrincipalsInRoleRequest(const GetPrincipalsInRoleRequest& other167) {
  roleName = other167.roleName;
}
GetPrincipalsInRoleRequest::GetPrincipalsInRoleRequest( GetPrincipalsInRoleRequest&& other168) {
  roleName = std::move(other168.roleName);
}
GetPrincipalsInRoleRequest& GetPrincipalsInRoleRequest::operator=(const GetPrincipalsInRoleRequest& other169) {
  roleName = other169.roleName;
  return *this;
}
GetPrincipalsInRoleRequest& GetPrincipalsInRoleRequest::operator=(GetPrincipalsInRoleRequest&& other170) {
  roleName = std::move(other170.roleName);
  return *this;
}
void GetPrincipalsInRoleRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPrincipalsInRoleRequest(";
  out << "roleName=" << to_string(roleName);
  out << ")";
}


GetPrincipalsInRoleResponse::~GetPrincipalsInRoleResponse() throw() {
}


void GetPrincipalsInRoleResponse::__set_principalGrants(const std::vector<RolePrincipalGrant> & val) {
  this->principalGrants = val;
}
std::ostream& operator<<(std::ostream& out, const GetPrincipalsInRoleResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPrincipalsInRoleResponse &a, GetPrincipalsInRoleResponse &b) {
  using ::std::swap;
  swap(a.principalGrants, b.principalGrants);
}

GetPrincipalsInRoleResponse::GetPrincipalsInRoleResponse(const GetPrincipalsInRoleResponse& other177) {
  principalGrants = other177.principalGrants;
}
GetPrincipalsInRoleResponse::GetPrincipalsInRoleResponse( GetPrincipalsInRoleResponse&& other178) {
  principalGrants = std::move(other178.principalGrants);
}
GetPrincipalsInRoleResponse& GetPrincipalsInRoleResponse::operator=(const GetPrincipalsInRoleResponse& other179) {
  principalGrants = other179.principalGrants;
  return *this;
}
GetPrincipalsInRoleResponse& GetPrincipalsInRoleResponse::operator=(GetPrincipalsInRoleResponse&& other180) {
  principalGrants = std::move(other180.principalGrants);
  return *this;
}
void GetPrincipalsInRoleResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPrincipalsInRoleResponse(";
  out << "principalGrants=" << to_string(principalGrants);
  out << ")";
}


GrantRevokeRoleRequest::~GrantRevokeRoleRequest() throw() {
}


void GrantRevokeRoleRequest::__set_requestType(const GrantRevokeType::type val) {
  this->requestType = val;
}

void GrantRevokeRoleRequest::__set_roleName(const std::string& val) {
  this->roleName = val;
}

void GrantRevokeRoleRequest::__set_principalName(const std::string& val) {
  this->principalName = val;
}

void GrantRevokeRoleRequest::__set_principalType(const PrincipalType::type val) {
  this->principalType = val;
}

void GrantRevokeRoleRequest::__set_grantor(const std::string& val) {
  this->grantor = val;
__isset.grantor = true;
}

void GrantRevokeRoleRequest::__set_grantorType(const PrincipalType::type val) {
  this->grantorType = val;
__isset.grantorType = true;
}

void GrantRevokeRoleRequest::__set_grantOption(const bool val) {
  this->grantOption = val;
__isset.grantOption = true;
}
std::ostream& operator<<(std::ostream& out, const GrantRevokeRoleRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GrantRevokeRoleRequest &a, GrantRevokeRoleRequest &b) {
  using ::std::swap;
  swap(a.requestType, b.requestType);
  swap(a.roleName, b.roleName);
  swap(a.principalName, b.principalName);
  swap(a.principalType, b.principalType);
  swap(a.grantor, b.grantor);
  swap(a.grantorType, b.grantorType);
  swap(a.grantOption, b.grantOption);
  swap(a.__isset, b.__isset);
}

GrantRevokeRoleRequest::GrantRevokeRoleRequest(const GrantRevokeRoleRequest& other184) {
  requestType = other184.requestType;
  roleName = other184.roleName;
  principalName = other184.principalName;
  principalType = other184.principalType;
  grantor = other184.grantor;
  grantorType = other184.grantorType;
  grantOption = other184.grantOption;
  __isset = other184.__isset;
}
GrantRevokeRoleRequest::GrantRevokeRoleRequest( GrantRevokeRoleRequest&& other185) {
  requestType = std::move(other185.requestType);
  roleName = std::move(other185.roleName);
  principalName = std::move(other185.principalName);
  principalType = std::move(other185.principalType);
  grantor = std::move(other185.grantor);
  grantorType = std::move(other185.grantorType);
  grantOption = std::move(other185.grantOption);
  __isset = std::move(other185.__isset);
}
GrantRevokeRoleRequest& GrantRevokeRoleRequest::operator=(const GrantRevokeRoleRequest& other186) {
  requestType = other186.requestType;
  roleName = other186.roleName;
  principalName = other186.principalName;
  principalType = other186.principalType;
  grantor = other186.grantor;
  grantorType = other186.grantorType;
  grantOption = other186.grantOption;
  __isset = other186.__isset;
  return *this;
}
GrantRevokeRoleRequest& GrantRevokeRoleRequest::operator=(GrantRevokeRoleRequest&& other187) {
  requestType = std::move(other187.requestType);
  roleName = std::move(other187.roleName);
  principalName = std::move(other187.principalName);
  principalType = std::move(other187.principalType);
  grantor = std::move(other187.grantor);
  grantorType = std::move(other187.grantorType);
  grantOption = std::move(other187.grantOption);
  __isset = std::move(other187.__isset);
  return *this;
}
void GrantRevokeRoleRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GrantRevokeRoleRequest(";
  out << "requestType=" << to_string(requestType);
  out << ", " << "roleName=" << to_string(roleName);
  out << ", " << "principalName=" << to_string(principalName);
  out << ", " << "principalType=" << to_string(principalType);
  out << ", " << "grantor="; (__isset.grantor ? (out << to_string(grantor)) : (out << "<null>"));
  out << ", " << "grantorType="; (__isset.grantorType ? (out << to_string(grantorType)) : (out << "<null>"));
  out << ", " << "grantOption="; (__isset.grantOption ? (out << to_string(grantOption)) : (out << "<null>"));
  out << ")";
}


GrantRevokeRoleResponse::~GrantRevokeRoleResponse() throw() {
}


void GrantRevokeRoleResponse::__set_success(const bool val) {
  this->success = val;
__isset.success = true;
}
std::ostream& operator<<(std::ostream& out, const GrantRevokeRoleResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GrantRevokeRoleResponse &a, GrantRevokeRoleResponse &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.__isset, b.__isset);
}

GrantRevokeRoleResponse::GrantRevokeRoleResponse(const GrantRevokeRoleResponse& other188) {
  success = other188.success;
  __isset = other188.__isset;
}
GrantRevokeRoleResponse::GrantRevokeRoleResponse( GrantRevokeRoleResponse&& other189) {
  success = std::move(other189.success);
  __isset = std::move(other189.__isset);
}
GrantRevokeRoleResponse& GrantRevokeRoleResponse::operator=(const GrantRevokeRoleResponse& other190) {
  success = other190.success;
  __isset = other190.__isset;
  return *this;
}
GrantRevokeRoleResponse& GrantRevokeRoleResponse::operator=(GrantRevokeRoleResponse&& other191) {
  success = std::move(other191.success);
  __isset = std::move(other191.__isset);
  return *this;
}
void GrantRevokeRoleResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GrantRevokeRoleResponse(";
  out << "success="; (__isset.success ? (out << to_string(success)) : (out << "<null>"));
  out << ")";
}


Catalog::~Catalog() throw() {
}


void Catalog::__set_name(const std::string& val) {
  this->name = val;
}

void Catalog::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

void Catalog::__set_locationUri(const std::string& val) {
  this->locationUri = val;
}

void Catalog::__set_createTime(const int32_t val) {
  this->createTime = val;
__isset.createTime = true;
}
std::ostream& operator<<(std::ostream& out, const Catalog& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Catalog &a, Catalog &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.locationUri, b.locationUri);
  swap(a.createTime, b.createTime);
  swap(a.__isset, b.__isset);
}

Catalog::Catalog(const Catalog& other192) {
  name = other192.name;
  description = other192.description;
  locationUri = other192.locationUri;
  createTime = other192.createTime;
  __isset = other192.__isset;
}
Catalog::Catalog( Catalog&& other193) {
  name = std::move(other193.name);
  description = std::move(other193.description);
  locationUri = std::move(other193.locationUri);
  createTime = std::move(other193.createTime);
  __isset = std::move(other193.__isset);
}
Catalog& Catalog::operator=(const Catalog& other194) {
  name = other194.name;
  description = other194.description;
  locationUri = other194.locationUri;
  createTime = other194.createTime;
  __isset = other194.__isset;
  return *this;
}
Catalog& Catalog::operator=(Catalog&& other195) {
  name = std::move(other195.name);
  description = std::move(other195.description);
  locationUri = std::move(other195.locationUri);
  createTime = std::move(other195.createTime);
  __isset = std::move(other195.__isset);
  return *this;
}
void Catalog::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Catalog(";
  out << "name=" << to_string(name);
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ", " << "locationUri=" << to_string(locationUri);
  out << ", " << "createTime="; (__isset.createTime ? (out << to_string(createTime)) : (out << "<null>"));
  out << ")";
}


CreateCatalogRequest::~CreateCatalogRequest() throw() {
}


void CreateCatalogRequest::__set_catalog(const Catalog& val) {
  this->catalog = val;
}
std::ostream& operator<<(std::ostream& out, const CreateCatalogRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CreateCatalogRequest &a, CreateCatalogRequest &b) {
  using ::std::swap;
  swap(a.catalog, b.catalog);
  swap(a.__isset, b.__isset);
}

CreateCatalogRequest::CreateCatalogRequest(const CreateCatalogRequest& other196) {
  catalog = other196.catalog;
  __isset = other196.__isset;
}
CreateCatalogRequest::CreateCatalogRequest( CreateCatalogRequest&& other197) {
  catalog = std::move(other197.catalog);
  __isset = std::move(other197.__isset);
}
CreateCatalogRequest& CreateCatalogRequest::operator=(const CreateCatalogRequest& other198) {
  catalog = other198.catalog;
  __isset = other198.__isset;
  return *this;
}
CreateCatalogRequest& CreateCatalogRequest::operator=(CreateCatalogRequest&& other199) {
  catalog = std::move(other199.catalog);
  __isset = std::move(other199.__isset);
  return *this;
}
void CreateCatalogRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateCatalogRequest(";
  out << "catalog=" << to_string(catalog);
  out << ")";
}


AlterCatalogRequest::~AlterCatalogRequest() throw() {
}


void AlterCatalogRequest::__set_name(const std::string& val) {
  this->name = val;
}

void AlterCatalogRequest::__set_newCat(const Catalog& val) {
  this->newCat = val;
}
std::ostream& operator<<(std::ostream& out, const AlterCatalogRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AlterCatalogRequest &a, AlterCatalogRequest &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.newCat, b.newCat);
  swap(a.__isset, b.__isset);
}

AlterCatalogRequest::AlterCatalogRequest(const AlterCatalogRequest& other200) {
  name = other200.name;
  newCat = other200.newCat;
  __isset = other200.__isset;
}
AlterCatalogRequest::AlterCatalogRequest( AlterCatalogRequest&& other201) {
  name = std::move(other201.name);
  newCat = std::move(other201.newCat);
  __isset = std::move(other201.__isset);
}
AlterCatalogRequest& AlterCatalogRequest::operator=(const AlterCatalogRequest& other202) {
  name = other202.name;
  newCat = other202.newCat;
  __isset = other202.__isset;
  return *this;
}
AlterCatalogRequest& AlterCatalogRequest::operator=(AlterCatalogRequest&& other203) {
  name = std::move(other203.name);
  newCat = std::move(other203.newCat);
  __isset = std::move(other203.__isset);
  return *this;
}
void AlterCatalogRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AlterCatalogRequest(";
  out << "name=" << to_string(name);
  out << ", " << "newCat=" << to_string(newCat);
  out << ")";
}


GetCatalogRequest::~GetCatalogRequest() throw() {
}


void GetCatalogRequest::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const GetCatalogRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetCatalogRequest &a, GetCatalogRequest &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

GetCatalogRequest::GetCatalogRequest(const GetCatalogRequest& other204) {
  name = other204.name;
  __isset = other204.__isset;
}
GetCatalogRequest::GetCatalogRequest( GetCatalogRequest&& other205) {
  name = std::move(other205.name);
  __isset = std::move(other205.__isset);
}
GetCatalogRequest& GetCatalogRequest::operator=(const GetCatalogRequest& other206) {
  name = other206.name;
  __isset = other206.__isset;
  return *this;
}
GetCatalogRequest& GetCatalogRequest::operator=(GetCatalogRequest&& other207) {
  name = std::move(other207.name);
  __isset = std::move(other207.__isset);
  return *this;
}
void GetCatalogRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetCatalogRequest(";
  out << "name=" << to_string(name);
  out << ")";
}


GetCatalogResponse::~GetCatalogResponse() throw() {
}


void GetCatalogResponse::__set_catalog(const Catalog& val) {
  this->catalog = val;
}
std::ostream& operator<<(std::ostream& out, const GetCatalogResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetCatalogResponse &a, GetCatalogResponse &b) {
  using ::std::swap;
  swap(a.catalog, b.catalog);
  swap(a.__isset, b.__isset);
}

GetCatalogResponse::GetCatalogResponse(const GetCatalogResponse& other208) {
  catalog = other208.catalog;
  __isset = other208.__isset;
}
GetCatalogResponse::GetCatalogResponse( GetCatalogResponse&& other209) {
  catalog = std::move(other209.catalog);
  __isset = std::move(other209.__isset);
}
GetCatalogResponse& GetCatalogResponse::operator=(const GetCatalogResponse& other210) {
  catalog = other210.catalog;
  __isset = other210.__isset;
  return *this;
}
GetCatalogResponse& GetCatalogResponse::operator=(GetCatalogResponse&& other211) {
  catalog = std::move(other211.catalog);
  __isset = std::move(other211.__isset);
  return *this;
}
void GetCatalogResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetCatalogResponse(";
  out << "catalog=" << to_string(catalog);
  out << ")";
}


GetCatalogsResponse::~GetCatalogsResponse() throw() {
}


void GetCatalogsResponse::__set_names(const std::vector<std::string> & val) {
  this->names = val;
}
std::ostream& operator<<(std::ostream& out, const GetCatalogsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetCatalogsResponse &a, GetCatalogsResponse &b) {
  using ::std::swap;
  swap(a.names, b.names);
  swap(a.__isset, b.__isset);
}

GetCatalogsResponse::GetCatalogsResponse(const GetCatalogsResponse& other218) {
  names = other218.names;
  __isset = other218.__isset;
}
GetCatalogsResponse::GetCatalogsResponse( GetCatalogsResponse&& other219) {
  names = std::move(other219.names);
  __isset = std::move(other219.__isset);
}
GetCatalogsResponse& GetCatalogsResponse::operator=(const GetCatalogsResponse& other220) {
  names = other220.names;
  __isset = other220.__isset;
  return *this;
}
GetCatalogsResponse& GetCatalogsResponse::operator=(GetCatalogsResponse&& other221) {
  names = std::move(other221.names);
  __isset = std::move(other221.__isset);
  return *this;
}
void GetCatalogsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetCatalogsResponse(";
  out << "names=" << to_string(names);
  out << ")";
}


DropCatalogRequest::~DropCatalogRequest() throw() {
}


void DropCatalogRequest::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const DropCatalogRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DropCatalogRequest &a, DropCatalogRequest &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

DropCatalogRequest::DropCatalogRequest(const DropCatalogRequest& other222) {
  name = other222.name;
  __isset = other222.__isset;
}
DropCatalogRequest::DropCatalogRequest( DropCatalogRequest&& other223) {
  name = std::move(other223.name);
  __isset = std::move(other223.__isset);
}
DropCatalogRequest& DropCatalogRequest::operator=(const DropCatalogRequest& other224) {
  name = other224.name;
  __isset = other224.__isset;
  return *this;
}
DropCatalogRequest& DropCatalogRequest::operator=(DropCatalogRequest&& other225) {
  name = std::move(other225.name);
  __isset = std::move(other225.__isset);
  return *this;
}
void DropCatalogRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropCatalogRequest(";
  out << "name=" << to_string(name);
  out << ")";
}


Database::~Database() throw() {
}


void Database::__set_name(const std::string& val) {
  this->name = val;
}

void Database::__set_description(const std::string& val) {
  this->description = val;
}

void Database::__set_locationUri(const std::string& val) {
  this->locationUri = val;
}

void Database::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void Database::__set_privileges(const PrincipalPrivilegeSet& val) {
  this->privileges = val;
__isset.privileges = true;
}

void Database::__set_ownerName(const std::string& val) {
  this->ownerName = val;
__isset.ownerName = true;
}

void Database::__set_ownerType(const PrincipalType::type val) {
  this->ownerType = val;
__isset.ownerType = true;
}

void Database::__set_catalogName(const std::string& val) {
  this->catalogName = val;
__isset.catalogName = true;
}

void Database::__set_createTime(const int32_t val) {
  this->createTime = val;
__isset.createTime = true;
}

void Database::__set_managedLocationUri(const std::string& val) {
  this->managedLocationUri = val;
__isset.managedLocationUri = true;
}
std::ostream& operator<<(std::ostream& out, const Database& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Database &a, Database &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.locationUri, b.locationUri);
  swap(a.parameters, b.parameters);
  swap(a.privileges, b.privileges);
  swap(a.ownerName, b.ownerName);
  swap(a.ownerType, b.ownerType);
  swap(a.catalogName, b.catalogName);
  swap(a.createTime, b.createTime);
  swap(a.managedLocationUri, b.managedLocationUri);
  swap(a.__isset, b.__isset);
}

Database::Database(const Database& other235) {
  name = other235.name;
  description = other235.description;
  locationUri = other235.locationUri;
  parameters = other235.parameters;
  privileges = other235.privileges;
  ownerName = other235.ownerName;
  ownerType = other235.ownerType;
  catalogName = other235.catalogName;
  createTime = other235.createTime;
  managedLocationUri = other235.managedLocationUri;
  __isset = other235.__isset;
}
Database::Database( Database&& other236) {
  name = std::move(other236.name);
  description = std::move(other236.description);
  locationUri = std::move(other236.locationUri);
  parameters = std::move(other236.parameters);
  privileges = std::move(other236.privileges);
  ownerName = std::move(other236.ownerName);
  ownerType = std::move(other236.ownerType);
  catalogName = std::move(other236.catalogName);
  createTime = std::move(other236.createTime);
  managedLocationUri = std::move(other236.managedLocationUri);
  __isset = std::move(other236.__isset);
}
Database& Database::operator=(const Database& other237) {
  name = other237.name;
  description = other237.description;
  locationUri = other237.locationUri;
  parameters = other237.parameters;
  privileges = other237.privileges;
  ownerName = other237.ownerName;
  ownerType = other237.ownerType;
  catalogName = other237.catalogName;
  createTime = other237.createTime;
  managedLocationUri = other237.managedLocationUri;
  __isset = other237.__isset;
  return *this;
}
Database& Database::operator=(Database&& other238) {
  name = std::move(other238.name);
  description = std::move(other238.description);
  locationUri = std::move(other238.locationUri);
  parameters = std::move(other238.parameters);
  privileges = std::move(other238.privileges);
  ownerName = std::move(other238.ownerName);
  ownerType = std::move(other238.ownerType);
  catalogName = std::move(other238.catalogName);
  createTime = std::move(other238.createTime);
  managedLocationUri = std::move(other238.managedLocationUri);
  __isset = std::move(other238.__isset);
  return *this;
}
void Database::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Database(";
  out << "name=" << to_string(name);
  out << ", " << "description=" << to_string(description);
  out << ", " << "locationUri=" << to_string(locationUri);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "privileges="; (__isset.privileges ? (out << to_string(privileges)) : (out << "<null>"));
  out << ", " << "ownerName="; (__isset.ownerName ? (out << to_string(ownerName)) : (out << "<null>"));
  out << ", " << "ownerType="; (__isset.ownerType ? (out << to_string(ownerType)) : (out << "<null>"));
  out << ", " << "catalogName="; (__isset.catalogName ? (out << to_string(catalogName)) : (out << "<null>"));
  out << ", " << "createTime="; (__isset.createTime ? (out << to_string(createTime)) : (out << "<null>"));
  out << ", " << "managedLocationUri="; (__isset.managedLocationUri ? (out << to_string(managedLocationUri)) : (out << "<null>"));
  out << ")";
}


SerDeInfo::~SerDeInfo() throw() {
}


void SerDeInfo::__set_name(const std::string& val) {
  this->name = val;
}

void SerDeInfo::__set_serializationLib(const std::string& val) {
  this->serializationLib = val;
}

void SerDeInfo::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void SerDeInfo::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

void SerDeInfo::__set_serializerClass(const std::string& val) {
  this->serializerClass = val;
__isset.serializerClass = true;
}

void SerDeInfo::__set_deserializerClass(const std::string& val) {
  this->deserializerClass = val;
__isset.deserializerClass = true;
}

void SerDeInfo::__set_serdeType(const SerdeType::type val) {
  this->serdeType = val;
__isset.serdeType = true;
}
std::ostream& operator<<(std::ostream& out, const SerDeInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SerDeInfo &a, SerDeInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.serializationLib, b.serializationLib);
  swap(a.parameters, b.parameters);
  swap(a.description, b.description);
  swap(a.serializerClass, b.serializerClass);
  swap(a.deserializerClass, b.deserializerClass);
  swap(a.serdeType, b.serdeType);
  swap(a.__isset, b.__isset);
}

SerDeInfo::SerDeInfo(const SerDeInfo& other248) {
  name = other248.name;
  serializationLib = other248.serializationLib;
  parameters = other248.parameters;
  description = other248.description;
  serializerClass = other248.serializerClass;
  deserializerClass = other248.deserializerClass;
  serdeType = other248.serdeType;
  __isset = other248.__isset;
}
SerDeInfo::SerDeInfo( SerDeInfo&& other249) {
  name = std::move(other249.name);
  serializationLib = std::move(other249.serializationLib);
  parameters = std::move(other249.parameters);
  description = std::move(other249.description);
  serializerClass = std::move(other249.serializerClass);
  deserializerClass = std::move(other249.deserializerClass);
  serdeType = std::move(other249.serdeType);
  __isset = std::move(other249.__isset);
}
SerDeInfo& SerDeInfo::operator=(const SerDeInfo& other250) {
  name = other250.name;
  serializationLib = other250.serializationLib;
  parameters = other250.parameters;
  description = other250.description;
  serializerClass = other250.serializerClass;
  deserializerClass = other250.deserializerClass;
  serdeType = other250.serdeType;
  __isset = other250.__isset;
  return *this;
}
SerDeInfo& SerDeInfo::operator=(SerDeInfo&& other251) {
  name = std::move(other251.name);
  serializationLib = std::move(other251.serializationLib);
  parameters = std::move(other251.parameters);
  description = std::move(other251.description);
  serializerClass = std::move(other251.serializerClass);
  deserializerClass = std::move(other251.deserializerClass);
  serdeType = std::move(other251.serdeType);
  __isset = std::move(other251.__isset);
  return *this;
}
void SerDeInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SerDeInfo(";
  out << "name=" << to_string(name);
  out << ", " << "serializationLib=" << to_string(serializationLib);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ", " << "serializerClass="; (__isset.serializerClass ? (out << to_string(serializerClass)) : (out << "<null>"));
  out << ", " << "deserializerClass="; (__isset.deserializerClass ? (out << to_string(deserializerClass)) : (out << "<null>"));
  out << ", " << "serdeType="; (__isset.serdeType ? (out << to_string(serdeType)) : (out << "<null>"));
  out << ")";
}


Order::~Order() throw() {
}


void Order::__set_col(const std::string& val) {
  this->col = val;
}

void Order::__set_order(const int32_t val) {
  this->order = val;
}
std::ostream& operator<<(std::ostream& out, const Order& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Order &a, Order &b) {
  using ::std::swap;
  swap(a.col, b.col);
  swap(a.order, b.order);
  swap(a.__isset, b.__isset);
}

Order::Order(const Order& other252) {
  col = other252.col;
  order = other252.order;
  __isset = other252.__isset;
}
Order::Order( Order&& other253) {
  col = std::move(other253.col);
  order = std::move(other253.order);
  __isset = std::move(other253.__isset);
}
Order& Order::operator=(const Order& other254) {
  col = other254.col;
  order = other254.order;
  __isset = other254.__isset;
  return *this;
}
Order& Order::operator=(Order&& other255) {
  col = std::move(other255.col);
  order = std::move(other255.order);
  __isset = std::move(other255.__isset);
  return *this;
}
void Order::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Order(";
  out << "col=" << to_string(col);
  out << ", " << "order=" << to_string(order);
  out << ")";
}


SkewedInfo::~SkewedInfo() throw() {
}


void SkewedInfo::__set_skewedColNames(const std::vector<std::string> & val) {
  this->skewedColNames = val;
}

void SkewedInfo::__set_skewedColValues(const std::vector<std::vector<std::string> > & val) {
  this->skewedColValues = val;
}

void SkewedInfo::__set_skewedColValueLocationMaps(const std::map<std::vector<std::string> , std::string> & val) {
  this->skewedColValueLocationMaps = val;
}
std::ostream& operator<<(std::ostream& out, const SkewedInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SkewedInfo &a, SkewedInfo &b) {
  using ::std::swap;
  swap(a.skewedColNames, b.skewedColNames);
  swap(a.skewedColValues, b.skewedColValues);
  swap(a.skewedColValueLocationMaps, b.skewedColValueLocationMaps);
  swap(a.__isset, b.__isset);
}

SkewedInfo::SkewedInfo(const SkewedInfo& other288) {
  skewedColNames = other288.skewedColNames;
  skewedColValues = other288.skewedColValues;
  skewedColValueLocationMaps = other288.skewedColValueLocationMaps;
  __isset = other288.__isset;
}
SkewedInfo::SkewedInfo( SkewedInfo&& other289) {
  skewedColNames = std::move(other289.skewedColNames);
  skewedColValues = std::move(other289.skewedColValues);
  skewedColValueLocationMaps = std::move(other289.skewedColValueLocationMaps);
  __isset = std::move(other289.__isset);
}
SkewedInfo& SkewedInfo::operator=(const SkewedInfo& other290) {
  skewedColNames = other290.skewedColNames;
  skewedColValues = other290.skewedColValues;
  skewedColValueLocationMaps = other290.skewedColValueLocationMaps;
  __isset = other290.__isset;
  return *this;
}
SkewedInfo& SkewedInfo::operator=(SkewedInfo&& other291) {
  skewedColNames = std::move(other291.skewedColNames);
  skewedColValues = std::move(other291.skewedColValues);
  skewedColValueLocationMaps = std::move(other291.skewedColValueLocationMaps);
  __isset = std::move(other291.__isset);
  return *this;
}
void SkewedInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SkewedInfo(";
  out << "skewedColNames=" << to_string(skewedColNames);
  out << ", " << "skewedColValues=" << to_string(skewedColValues);
  out << ", " << "skewedColValueLocationMaps=" << to_string(skewedColValueLocationMaps);
  out << ")";
}


StorageDescriptor::~StorageDescriptor() throw() {
}


void StorageDescriptor::__set_cols(const std::vector<FieldSchema> & val) {
  this->cols = val;
}

void StorageDescriptor::__set_location(const std::string& val) {
  this->location = val;
}

void StorageDescriptor::__set_inputFormat(const std::string& val) {
  this->inputFormat = val;
}

void StorageDescriptor::__set_outputFormat(const std::string& val) {
  this->outputFormat = val;
}

void StorageDescriptor::__set_compressed(const bool val) {
  this->compressed = val;
}

void StorageDescriptor::__set_numBuckets(const int32_t val) {
  this->numBuckets = val;
}

void StorageDescriptor::__set_serdeInfo(const SerDeInfo& val) {
  this->serdeInfo = val;
}

void StorageDescriptor::__set_bucketCols(const std::vector<std::string> & val) {
  this->bucketCols = val;
}

void StorageDescriptor::__set_sortCols(const std::vector<Order> & val) {
  this->sortCols = val;
}

void StorageDescriptor::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void StorageDescriptor::__set_skewedInfo(const SkewedInfo& val) {
  this->skewedInfo = val;
__isset.skewedInfo = true;
}

void StorageDescriptor::__set_storedAsSubDirectories(const bool val) {
  this->storedAsSubDirectories = val;
__isset.storedAsSubDirectories = true;
}
std::ostream& operator<<(std::ostream& out, const StorageDescriptor& obj)
{
  obj.printTo(out);
  return out;
}


void swap(StorageDescriptor &a, StorageDescriptor &b) {
  using ::std::swap;
  swap(a.cols, b.cols);
  swap(a.location, b.location);
  swap(a.inputFormat, b.inputFormat);
  swap(a.outputFormat, b.outputFormat);
  swap(a.compressed, b.compressed);
  swap(a.numBuckets, b.numBuckets);
  swap(a.serdeInfo, b.serdeInfo);
  swap(a.bucketCols, b.bucketCols);
  swap(a.sortCols, b.sortCols);
  swap(a.parameters, b.parameters);
  swap(a.skewedInfo, b.skewedInfo);
  swap(a.storedAsSubDirectories, b.storedAsSubDirectories);
  swap(a.__isset, b.__isset);
}

StorageDescriptor::StorageDescriptor(const StorageDescriptor& other318) {
  cols = other318.cols;
  location = other318.location;
  inputFormat = other318.inputFormat;
  outputFormat = other318.outputFormat;
  compressed = other318.compressed;
  numBuckets = other318.numBuckets;
  serdeInfo = other318.serdeInfo;
  bucketCols = other318.bucketCols;
  sortCols = other318.sortCols;
  parameters = other318.parameters;
  skewedInfo = other318.skewedInfo;
  storedAsSubDirectories = other318.storedAsSubDirectories;
  __isset = other318.__isset;
}
StorageDescriptor::StorageDescriptor( StorageDescriptor&& other319) {
  cols = std::move(other319.cols);
  location = std::move(other319.location);
  inputFormat = std::move(other319.inputFormat);
  outputFormat = std::move(other319.outputFormat);
  compressed = std::move(other319.compressed);
  numBuckets = std::move(other319.numBuckets);
  serdeInfo = std::move(other319.serdeInfo);
  bucketCols = std::move(other319.bucketCols);
  sortCols = std::move(other319.sortCols);
  parameters = std::move(other319.parameters);
  skewedInfo = std::move(other319.skewedInfo);
  storedAsSubDirectories = std::move(other319.storedAsSubDirectories);
  __isset = std::move(other319.__isset);
}
StorageDescriptor& StorageDescriptor::operator=(const StorageDescriptor& other320) {
  cols = other320.cols;
  location = other320.location;
  inputFormat = other320.inputFormat;
  outputFormat = other320.outputFormat;
  compressed = other320.compressed;
  numBuckets = other320.numBuckets;
  serdeInfo = other320.serdeInfo;
  bucketCols = other320.bucketCols;
  sortCols = other320.sortCols;
  parameters = other320.parameters;
  skewedInfo = other320.skewedInfo;
  storedAsSubDirectories = other320.storedAsSubDirectories;
  __isset = other320.__isset;
  return *this;
}
StorageDescriptor& StorageDescriptor::operator=(StorageDescriptor&& other321) {
  cols = std::move(other321.cols);
  location = std::move(other321.location);
  inputFormat = std::move(other321.inputFormat);
  outputFormat = std::move(other321.outputFormat);
  compressed = std::move(other321.compressed);
  numBuckets = std::move(other321.numBuckets);
  serdeInfo = std::move(other321.serdeInfo);
  bucketCols = std::move(other321.bucketCols);
  sortCols = std::move(other321.sortCols);
  parameters = std::move(other321.parameters);
  skewedInfo = std::move(other321.skewedInfo);
  storedAsSubDirectories = std::move(other321.storedAsSubDirectories);
  __isset = std::move(other321.__isset);
  return *this;
}
void StorageDescriptor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StorageDescriptor(";
  out << "cols=" << to_string(cols);
  out << ", " << "location=" << to_string(location);
  out << ", " << "inputFormat=" << to_string(inputFormat);
  out << ", " << "outputFormat=" << to_string(outputFormat);
  out << ", " << "compressed=" << to_string(compressed);
  out << ", " << "numBuckets=" << to_string(numBuckets);
  out << ", " << "serdeInfo=" << to_string(serdeInfo);
  out << ", " << "bucketCols=" << to_string(bucketCols);
  out << ", " << "sortCols=" << to_string(sortCols);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "skewedInfo="; (__isset.skewedInfo ? (out << to_string(skewedInfo)) : (out << "<null>"));
  out << ", " << "storedAsSubDirectories="; (__isset.storedAsSubDirectories ? (out << to_string(storedAsSubDirectories)) : (out << "<null>"));
  out << ")";
}


CreationMetadata::~CreationMetadata() throw() {
}


void CreationMetadata::__set_catName(const std::string& val) {
  this->catName = val;
}

void CreationMetadata::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void CreationMetadata::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void CreationMetadata::__set_tablesUsed(const std::set<std::string> & val) {
  this->tablesUsed = val;
}

void CreationMetadata::__set_validTxnList(const std::string& val) {
  this->validTxnList = val;
__isset.validTxnList = true;
}

void CreationMetadata::__set_materializationTime(const int64_t val) {
  this->materializationTime = val;
__isset.materializationTime = true;
}
std::ostream& operator<<(std::ostream& out, const CreationMetadata& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CreationMetadata &a, CreationMetadata &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.tablesUsed, b.tablesUsed);
  swap(a.validTxnList, b.validTxnList);
  swap(a.materializationTime, b.materializationTime);
  swap(a.__isset, b.__isset);
}

CreationMetadata::CreationMetadata(const CreationMetadata& other329) {
  catName = other329.catName;
  dbName = other329.dbName;
  tblName = other329.tblName;
  tablesUsed = other329.tablesUsed;
  validTxnList = other329.validTxnList;
  materializationTime = other329.materializationTime;
  __isset = other329.__isset;
}
CreationMetadata::CreationMetadata( CreationMetadata&& other330) {
  catName = std::move(other330.catName);
  dbName = std::move(other330.dbName);
  tblName = std::move(other330.tblName);
  tablesUsed = std::move(other330.tablesUsed);
  validTxnList = std::move(other330.validTxnList);
  materializationTime = std::move(other330.materializationTime);
  __isset = std::move(other330.__isset);
}
CreationMetadata& CreationMetadata::operator=(const CreationMetadata& other331) {
  catName = other331.catName;
  dbName = other331.dbName;
  tblName = other331.tblName;
  tablesUsed = other331.tablesUsed;
  validTxnList = other331.validTxnList;
  materializationTime = other331.materializationTime;
  __isset = other331.__isset;
  return *this;
}
CreationMetadata& CreationMetadata::operator=(CreationMetadata&& other332) {
  catName = std::move(other332.catName);
  dbName = std::move(other332.dbName);
  tblName = std::move(other332.tblName);
  tablesUsed = std::move(other332.tablesUsed);
  validTxnList = std::move(other332.validTxnList);
  materializationTime = std::move(other332.materializationTime);
  __isset = std::move(other332.__isset);
  return *this;
}
void CreationMetadata::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreationMetadata(";
  out << "catName=" << to_string(catName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "tablesUsed=" << to_string(tablesUsed);
  out << ", " << "validTxnList="; (__isset.validTxnList ? (out << to_string(validTxnList)) : (out << "<null>"));
  out << ", " << "materializationTime="; (__isset.materializationTime ? (out << to_string(materializationTime)) : (out << "<null>"));
  out << ")";
}


BooleanColumnStatsData::~BooleanColumnStatsData() throw() {
}


void BooleanColumnStatsData::__set_numTrues(const int64_t val) {
  this->numTrues = val;
}

void BooleanColumnStatsData::__set_numFalses(const int64_t val) {
  this->numFalses = val;
}

void BooleanColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void BooleanColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}
std::ostream& operator<<(std::ostream& out, const BooleanColumnStatsData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(BooleanColumnStatsData &a, BooleanColumnStatsData &b) {
  using ::std::swap;
  swap(a.numTrues, b.numTrues);
  swap(a.numFalses, b.numFalses);
  swap(a.numNulls, b.numNulls);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

BooleanColumnStatsData::BooleanColumnStatsData(const BooleanColumnStatsData& other333) {
  numTrues = other333.numTrues;
  numFalses = other333.numFalses;
  numNulls = other333.numNulls;
  bitVectors = other333.bitVectors;
  __isset = other333.__isset;
}
BooleanColumnStatsData::BooleanColumnStatsData( BooleanColumnStatsData&& other334) {
  numTrues = std::move(other334.numTrues);
  numFalses = std::move(other334.numFalses);
  numNulls = std::move(other334.numNulls);
  bitVectors = std::move(other334.bitVectors);
  __isset = std::move(other334.__isset);
}
BooleanColumnStatsData& BooleanColumnStatsData::operator=(const BooleanColumnStatsData& other335) {
  numTrues = other335.numTrues;
  numFalses = other335.numFalses;
  numNulls = other335.numNulls;
  bitVectors = other335.bitVectors;
  __isset = other335.__isset;
  return *this;
}
BooleanColumnStatsData& BooleanColumnStatsData::operator=(BooleanColumnStatsData&& other336) {
  numTrues = std::move(other336.numTrues);
  numFalses = std::move(other336.numFalses);
  numNulls = std::move(other336.numNulls);
  bitVectors = std::move(other336.bitVectors);
  __isset = std::move(other336.__isset);
  return *this;
}
void BooleanColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BooleanColumnStatsData(";
  out << "numTrues=" << to_string(numTrues);
  out << ", " << "numFalses=" << to_string(numFalses);
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


DoubleColumnStatsData::~DoubleColumnStatsData() throw() {
}


void DoubleColumnStatsData::__set_lowValue(const double val) {
  this->lowValue = val;
__isset.lowValue = true;
}

void DoubleColumnStatsData::__set_highValue(const double val) {
  this->highValue = val;
__isset.highValue = true;
}

void DoubleColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void DoubleColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void DoubleColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}
std::ostream& operator<<(std::ostream& out, const DoubleColumnStatsData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DoubleColumnStatsData &a, DoubleColumnStatsData &b) {
  using ::std::swap;
  swap(a.lowValue, b.lowValue);
  swap(a.highValue, b.highValue);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

DoubleColumnStatsData::DoubleColumnStatsData(const DoubleColumnStatsData& other337) {
  lowValue = other337.lowValue;
  highValue = other337.highValue;
  numNulls = other337.numNulls;
  numDVs = other337.numDVs;
  bitVectors = other337.bitVectors;
  __isset = other337.__isset;
}
DoubleColumnStatsData::DoubleColumnStatsData( DoubleColumnStatsData&& other338) {
  lowValue = std::move(other338.lowValue);
  highValue = std::move(other338.highValue);
  numNulls = std::move(other338.numNulls);
  numDVs = std::move(other338.numDVs);
  bitVectors = std::move(other338.bitVectors);
  __isset = std::move(other338.__isset);
}
DoubleColumnStatsData& DoubleColumnStatsData::operator=(const DoubleColumnStatsData& other339) {
  lowValue = other339.lowValue;
  highValue = other339.highValue;
  numNulls = other339.numNulls;
  numDVs = other339.numDVs;
  bitVectors = other339.bitVectors;
  __isset = other339.__isset;
  return *this;
}
DoubleColumnStatsData& DoubleColumnStatsData::operator=(DoubleColumnStatsData&& other340) {
  lowValue = std::move(other340.lowValue);
  highValue = std::move(other340.highValue);
  numNulls = std::move(other340.numNulls);
  numDVs = std::move(other340.numDVs);
  bitVectors = std::move(other340.bitVectors);
  __isset = std::move(other340.__isset);
  return *this;
}
void DoubleColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DoubleColumnStatsData(";
  out << "lowValue="; (__isset.lowValue ? (out << to_string(lowValue)) : (out << "<null>"));
  out << ", " << "highValue="; (__isset.highValue ? (out << to_string(highValue)) : (out << "<null>"));
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


LongColumnStatsData::~LongColumnStatsData() throw() {
}


void LongColumnStatsData::__set_lowValue(const int64_t val) {
  this->lowValue = val;
__isset.lowValue = true;
}

void LongColumnStatsData::__set_highValue(const int64_t val) {
  this->highValue = val;
__isset.highValue = true;
}

void LongColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void LongColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void LongColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}
std::ostream& operator<<(std::ostream& out, const LongColumnStatsData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(LongColumnStatsData &a, LongColumnStatsData &b) {
  using ::std::swap;
  swap(a.lowValue, b.lowValue);
  swap(a.highValue, b.highValue);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

LongColumnStatsData::LongColumnStatsData(const LongColumnStatsData& other341) {
  lowValue = other341.lowValue;
  highValue = other341.highValue;
  numNulls = other341.numNulls;
  numDVs = other341.numDVs;
  bitVectors = other341.bitVectors;
  __isset = other341.__isset;
}
LongColumnStatsData::LongColumnStatsData( LongColumnStatsData&& other342) {
  lowValue = std::move(other342.lowValue);
  highValue = std::move(other342.highValue);
  numNulls = std::move(other342.numNulls);
  numDVs = std::move(other342.numDVs);
  bitVectors = std::move(other342.bitVectors);
  __isset = std::move(other342.__isset);
}
LongColumnStatsData& LongColumnStatsData::operator=(const LongColumnStatsData& other343) {
  lowValue = other343.lowValue;
  highValue = other343.highValue;
  numNulls = other343.numNulls;
  numDVs = other343.numDVs;
  bitVectors = other343.bitVectors;
  __isset = other343.__isset;
  return *this;
}
LongColumnStatsData& LongColumnStatsData::operator=(LongColumnStatsData&& other344) {
  lowValue = std::move(other344.lowValue);
  highValue = std::move(other344.highValue);
  numNulls = std::move(other344.numNulls);
  numDVs = std::move(other344.numDVs);
  bitVectors = std::move(other344.bitVectors);
  __isset = std::move(other344.__isset);
  return *this;
}
void LongColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LongColumnStatsData(";
  out << "lowValue="; (__isset.lowValue ? (out << to_string(lowValue)) : (out << "<null>"));
  out << ", " << "highValue="; (__isset.highValue ? (out << to_string(highValue)) : (out << "<null>"));
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


StringColumnStatsData::~StringColumnStatsData() throw() {
}


void StringColumnStatsData::__set_maxColLen(const int64_t val) {
  this->maxColLen = val;
}

void StringColumnStatsData::__set_avgColLen(const double val) {
  this->avgColLen = val;
}

void StringColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void StringColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void StringColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}
std::ostream& operator<<(std::ostream& out, const StringColumnStatsData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(StringColumnStatsData &a, StringColumnStatsData &b) {
  using ::std::swap;
  swap(a.maxColLen, b.maxColLen);
  swap(a.avgColLen, b.avgColLen);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

StringColumnStatsData::StringColumnStatsData(const StringColumnStatsData& other345) {
  maxColLen = other345.maxColLen;
  avgColLen = other345.avgColLen;
  numNulls = other345.numNulls;
  numDVs = other345.numDVs;
  bitVectors = other345.bitVectors;
  __isset = other345.__isset;
}
StringColumnStatsData::StringColumnStatsData( StringColumnStatsData&& other346) {
  maxColLen = std::move(other346.maxColLen);
  avgColLen = std::move(other346.avgColLen);
  numNulls = std::move(other346.numNulls);
  numDVs = std::move(other346.numDVs);
  bitVectors = std::move(other346.bitVectors);
  __isset = std::move(other346.__isset);
}
StringColumnStatsData& StringColumnStatsData::operator=(const StringColumnStatsData& other347) {
  maxColLen = other347.maxColLen;
  avgColLen = other347.avgColLen;
  numNulls = other347.numNulls;
  numDVs = other347.numDVs;
  bitVectors = other347.bitVectors;
  __isset = other347.__isset;
  return *this;
}
StringColumnStatsData& StringColumnStatsData::operator=(StringColumnStatsData&& other348) {
  maxColLen = std::move(other348.maxColLen);
  avgColLen = std::move(other348.avgColLen);
  numNulls = std::move(other348.numNulls);
  numDVs = std::move(other348.numDVs);
  bitVectors = std::move(other348.bitVectors);
  __isset = std::move(other348.__isset);
  return *this;
}
void StringColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StringColumnStatsData(";
  out << "maxColLen=" << to_string(maxColLen);
  out << ", " << "avgColLen=" << to_string(avgColLen);
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


BinaryColumnStatsData::~BinaryColumnStatsData() throw() {
}


void BinaryColumnStatsData::__set_maxColLen(const int64_t val) {
  this->maxColLen = val;
}

void BinaryColumnStatsData::__set_avgColLen(const double val) {
  this->avgColLen = val;
}

void BinaryColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void BinaryColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}
std::ostream& operator<<(std::ostream& out, const BinaryColumnStatsData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(BinaryColumnStatsData &a, BinaryColumnStatsData &b) {
  using ::std::swap;
  swap(a.maxColLen, b.maxColLen);
  swap(a.avgColLen, b.avgColLen);
  swap(a.numNulls, b.numNulls);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

BinaryColumnStatsData::BinaryColumnStatsData(const BinaryColumnStatsData& other349) {
  maxColLen = other349.maxColLen;
  avgColLen = other349.avgColLen;
  numNulls = other349.numNulls;
  bitVectors = other349.bitVectors;
  __isset = other349.__isset;
}
BinaryColumnStatsData::BinaryColumnStatsData( BinaryColumnStatsData&& other350) {
  maxColLen = std::move(other350.maxColLen);
  avgColLen = std::move(other350.avgColLen);
  numNulls = std::move(other350.numNulls);
  bitVectors = std::move(other350.bitVectors);
  __isset = std::move(other350.__isset);
}
BinaryColumnStatsData& BinaryColumnStatsData::operator=(const BinaryColumnStatsData& other351) {
  maxColLen = other351.maxColLen;
  avgColLen = other351.avgColLen;
  numNulls = other351.numNulls;
  bitVectors = other351.bitVectors;
  __isset = other351.__isset;
  return *this;
}
BinaryColumnStatsData& BinaryColumnStatsData::operator=(BinaryColumnStatsData&& other352) {
  maxColLen = std::move(other352.maxColLen);
  avgColLen = std::move(other352.avgColLen);
  numNulls = std::move(other352.numNulls);
  bitVectors = std::move(other352.bitVectors);
  __isset = std::move(other352.__isset);
  return *this;
}
void BinaryColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BinaryColumnStatsData(";
  out << "maxColLen=" << to_string(maxColLen);
  out << ", " << "avgColLen=" << to_string(avgColLen);
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


Decimal::~Decimal() throw() {
}


void Decimal::__set_scale(const int16_t val) {
  this->scale = val;
}

void Decimal::__set_unscaled(const std::string& val) {
  this->unscaled = val;
}
std::ostream& operator<<(std::ostream& out, const Decimal& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Decimal &a, Decimal &b) {
  using ::std::swap;
  swap(a.scale, b.scale);
  swap(a.unscaled, b.unscaled);
}

Decimal::Decimal(const Decimal& other353) {
  scale = other353.scale;
  unscaled = other353.unscaled;
}
Decimal::Decimal( Decimal&& other354) {
  scale = std::move(other354.scale);
  unscaled = std::move(other354.unscaled);
}
Decimal& Decimal::operator=(const Decimal& other355) {
  scale = other355.scale;
  unscaled = other355.unscaled;
  return *this;
}
Decimal& Decimal::operator=(Decimal&& other356) {
  scale = std::move(other356.scale);
  unscaled = std::move(other356.unscaled);
  return *this;
}
void Decimal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Decimal(";
  out << "scale=" << to_string(scale);
  out << ", " << "unscaled=" << to_string(unscaled);
  out << ")";
}


DecimalColumnStatsData::~DecimalColumnStatsData() throw() {
}


void DecimalColumnStatsData::__set_lowValue(const Decimal& val) {
  this->lowValue = val;
__isset.lowValue = true;
}

void DecimalColumnStatsData::__set_highValue(const Decimal& val) {
  this->highValue = val;
__isset.highValue = true;
}

void DecimalColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void DecimalColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void DecimalColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}
std::ostream& operator<<(std::ostream& out, const DecimalColumnStatsData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DecimalColumnStatsData &a, DecimalColumnStatsData &b) {
  using ::std::swap;
  swap(a.lowValue, b.lowValue);
  swap(a.highValue, b.highValue);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

DecimalColumnStatsData::DecimalColumnStatsData(const DecimalColumnStatsData& other357) {
  lowValue = other357.lowValue;
  highValue = other357.highValue;
  numNulls = other357.numNulls;
  numDVs = other357.numDVs;
  bitVectors = other357.bitVectors;
  __isset = other357.__isset;
}
DecimalColumnStatsData::DecimalColumnStatsData( DecimalColumnStatsData&& other358) {
  lowValue = std::move(other358.lowValue);
  highValue = std::move(other358.highValue);
  numNulls = std::move(other358.numNulls);
  numDVs = std::move(other358.numDVs);
  bitVectors = std::move(other358.bitVectors);
  __isset = std::move(other358.__isset);
}
DecimalColumnStatsData& DecimalColumnStatsData::operator=(const DecimalColumnStatsData& other359) {
  lowValue = other359.lowValue;
  highValue = other359.highValue;
  numNulls = other359.numNulls;
  numDVs = other359.numDVs;
  bitVectors = other359.bitVectors;
  __isset = other359.__isset;
  return *this;
}
DecimalColumnStatsData& DecimalColumnStatsData::operator=(DecimalColumnStatsData&& other360) {
  lowValue = std::move(other360.lowValue);
  highValue = std::move(other360.highValue);
  numNulls = std::move(other360.numNulls);
  numDVs = std::move(other360.numDVs);
  bitVectors = std::move(other360.bitVectors);
  __isset = std::move(other360.__isset);
  return *this;
}
void DecimalColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DecimalColumnStatsData(";
  out << "lowValue="; (__isset.lowValue ? (out << to_string(lowValue)) : (out << "<null>"));
  out << ", " << "highValue="; (__isset.highValue ? (out << to_string(highValue)) : (out << "<null>"));
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


Date::~Date() throw() {
}


void Date::__set_daysSinceEpoch(const int64_t val) {
  this->daysSinceEpoch = val;
}
std::ostream& operator<<(std::ostream& out, const Date& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Date &a, Date &b) {
  using ::std::swap;
  swap(a.daysSinceEpoch, b.daysSinceEpoch);
}

Date::Date(const Date& other361) {
  daysSinceEpoch = other361.daysSinceEpoch;
}
Date::Date( Date&& other362) {
  daysSinceEpoch = std::move(other362.daysSinceEpoch);
}
Date& Date::operator=(const Date& other363) {
  daysSinceEpoch = other363.daysSinceEpoch;
  return *this;
}
Date& Date::operator=(Date&& other364) {
  daysSinceEpoch = std::move(other364.daysSinceEpoch);
  return *this;
}
void Date::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Date(";
  out << "daysSinceEpoch=" << to_string(daysSinceEpoch);
  out << ")";
}


DateColumnStatsData::~DateColumnStatsData() throw() {
}


void DateColumnStatsData::__set_lowValue(const Date& val) {
  this->lowValue = val;
__isset.lowValue = true;
}

void DateColumnStatsData::__set_highValue(const Date& val) {
  this->highValue = val;
__isset.highValue = true;
}

void DateColumnStatsData::__set_numNulls(const int64_t val) {
  this->numNulls = val;
}

void DateColumnStatsData::__set_numDVs(const int64_t val) {
  this->numDVs = val;
}

void DateColumnStatsData::__set_bitVectors(const std::string& val) {
  this->bitVectors = val;
__isset.bitVectors = true;
}
std::ostream& operator<<(std::ostream& out, const DateColumnStatsData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DateColumnStatsData &a, DateColumnStatsData &b) {
  using ::std::swap;
  swap(a.lowValue, b.lowValue);
  swap(a.highValue, b.highValue);
  swap(a.numNulls, b.numNulls);
  swap(a.numDVs, b.numDVs);
  swap(a.bitVectors, b.bitVectors);
  swap(a.__isset, b.__isset);
}

DateColumnStatsData::DateColumnStatsData(const DateColumnStatsData& other365) {
  lowValue = other365.lowValue;
  highValue = other365.highValue;
  numNulls = other365.numNulls;
  numDVs = other365.numDVs;
  bitVectors = other365.bitVectors;
  __isset = other365.__isset;
}
DateColumnStatsData::DateColumnStatsData( DateColumnStatsData&& other366) {
  lowValue = std::move(other366.lowValue);
  highValue = std::move(other366.highValue);
  numNulls = std::move(other366.numNulls);
  numDVs = std::move(other366.numDVs);
  bitVectors = std::move(other366.bitVectors);
  __isset = std::move(other366.__isset);
}
DateColumnStatsData& DateColumnStatsData::operator=(const DateColumnStatsData& other367) {
  lowValue = other367.lowValue;
  highValue = other367.highValue;
  numNulls = other367.numNulls;
  numDVs = other367.numDVs;
  bitVectors = other367.bitVectors;
  __isset = other367.__isset;
  return *this;
}
DateColumnStatsData& DateColumnStatsData::operator=(DateColumnStatsData&& other368) {
  lowValue = std::move(other368.lowValue);
  highValue = std::move(other368.highValue);
  numNulls = std::move(other368.numNulls);
  numDVs = std::move(other368.numDVs);
  bitVectors = std::move(other368.bitVectors);
  __isset = std::move(other368.__isset);
  return *this;
}
void DateColumnStatsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DateColumnStatsData(";
  out << "lowValue="; (__isset.lowValue ? (out << to_string(lowValue)) : (out << "<null>"));
  out << ", " << "highValue="; (__isset.highValue ? (out << to_string(highValue)) : (out << "<null>"));
  out << ", " << "numNulls=" << to_string(numNulls);
  out << ", " << "numDVs=" << to_string(numDVs);
  out << ", " << "bitVectors="; (__isset.bitVectors ? (out << to_string(bitVectors)) : (out << "<null>"));
  out << ")";
}


ColumnStatisticsData::~ColumnStatisticsData() throw() {
}


void ColumnStatisticsData::__set_booleanStats(const BooleanColumnStatsData& val) {
  this->booleanStats = val;
__isset.booleanStats = true;
}

void ColumnStatisticsData::__set_longStats(const LongColumnStatsData& val) {
  this->longStats = val;
__isset.longStats = true;
}

void ColumnStatisticsData::__set_doubleStats(const DoubleColumnStatsData& val) {
  this->doubleStats = val;
__isset.doubleStats = true;
}

void ColumnStatisticsData::__set_stringStats(const StringColumnStatsData& val) {
  this->stringStats = val;
__isset.stringStats = true;
}

void ColumnStatisticsData::__set_binaryStats(const BinaryColumnStatsData& val) {
  this->binaryStats = val;
__isset.binaryStats = true;
}

void ColumnStatisticsData::__set_decimalStats(const DecimalColumnStatsData& val) {
  this->decimalStats = val;
__isset.decimalStats = true;
}

void ColumnStatisticsData::__set_dateStats(const DateColumnStatsData& val) {
  this->dateStats = val;
__isset.dateStats = true;
}
std::ostream& operator<<(std::ostream& out, const ColumnStatisticsData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ColumnStatisticsData &a, ColumnStatisticsData &b) {
  using ::std::swap;
  swap(a.booleanStats, b.booleanStats);
  swap(a.longStats, b.longStats);
  swap(a.doubleStats, b.doubleStats);
  swap(a.stringStats, b.stringStats);
  swap(a.binaryStats, b.binaryStats);
  swap(a.decimalStats, b.decimalStats);
  swap(a.dateStats, b.dateStats);
  swap(a.__isset, b.__isset);
}

ColumnStatisticsData::ColumnStatisticsData(const ColumnStatisticsData& other369) {
  booleanStats = other369.booleanStats;
  longStats = other369.longStats;
  doubleStats = other369.doubleStats;
  stringStats = other369.stringStats;
  binaryStats = other369.binaryStats;
  decimalStats = other369.decimalStats;
  dateStats = other369.dateStats;
  __isset = other369.__isset;
}
ColumnStatisticsData::ColumnStatisticsData( ColumnStatisticsData&& other370) {
  booleanStats = std::move(other370.booleanStats);
  longStats = std::move(other370.longStats);
  doubleStats = std::move(other370.doubleStats);
  stringStats = std::move(other370.stringStats);
  binaryStats = std::move(other370.binaryStats);
  decimalStats = std::move(other370.decimalStats);
  dateStats = std::move(other370.dateStats);
  __isset = std::move(other370.__isset);
}
ColumnStatisticsData& ColumnStatisticsData::operator=(const ColumnStatisticsData& other371) {
  booleanStats = other371.booleanStats;
  longStats = other371.longStats;
  doubleStats = other371.doubleStats;
  stringStats = other371.stringStats;
  binaryStats = other371.binaryStats;
  decimalStats = other371.decimalStats;
  dateStats = other371.dateStats;
  __isset = other371.__isset;
  return *this;
}
ColumnStatisticsData& ColumnStatisticsData::operator=(ColumnStatisticsData&& other372) {
  booleanStats = std::move(other372.booleanStats);
  longStats = std::move(other372.longStats);
  doubleStats = std::move(other372.doubleStats);
  stringStats = std::move(other372.stringStats);
  binaryStats = std::move(other372.binaryStats);
  decimalStats = std::move(other372.decimalStats);
  dateStats = std::move(other372.dateStats);
  __isset = std::move(other372.__isset);
  return *this;
}
void ColumnStatisticsData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnStatisticsData(";
  out << "booleanStats="; (__isset.booleanStats ? (out << to_string(booleanStats)) : (out << "<null>"));
  out << ", " << "longStats="; (__isset.longStats ? (out << to_string(longStats)) : (out << "<null>"));
  out << ", " << "doubleStats="; (__isset.doubleStats ? (out << to_string(doubleStats)) : (out << "<null>"));
  out << ", " << "stringStats="; (__isset.stringStats ? (out << to_string(stringStats)) : (out << "<null>"));
  out << ", " << "binaryStats="; (__isset.binaryStats ? (out << to_string(binaryStats)) : (out << "<null>"));
  out << ", " << "decimalStats="; (__isset.decimalStats ? (out << to_string(decimalStats)) : (out << "<null>"));
  out << ", " << "dateStats="; (__isset.dateStats ? (out << to_string(dateStats)) : (out << "<null>"));
  out << ")";
}


ColumnStatisticsObj::~ColumnStatisticsObj() throw() {
}


void ColumnStatisticsObj::__set_colName(const std::string& val) {
  this->colName = val;
}

void ColumnStatisticsObj::__set_colType(const std::string& val) {
  this->colType = val;
}

void ColumnStatisticsObj::__set_statsData(const ColumnStatisticsData& val) {
  this->statsData = val;
}
std::ostream& operator<<(std::ostream& out, const ColumnStatisticsObj& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ColumnStatisticsObj &a, ColumnStatisticsObj &b) {
  using ::std::swap;
  swap(a.colName, b.colName);
  swap(a.colType, b.colType);
  swap(a.statsData, b.statsData);
}

ColumnStatisticsObj::ColumnStatisticsObj(const ColumnStatisticsObj& other373) {
  colName = other373.colName;
  colType = other373.colType;
  statsData = other373.statsData;
}
ColumnStatisticsObj::ColumnStatisticsObj( ColumnStatisticsObj&& other374) {
  colName = std::move(other374.colName);
  colType = std::move(other374.colType);
  statsData = std::move(other374.statsData);
}
ColumnStatisticsObj& ColumnStatisticsObj::operator=(const ColumnStatisticsObj& other375) {
  colName = other375.colName;
  colType = other375.colType;
  statsData = other375.statsData;
  return *this;
}
ColumnStatisticsObj& ColumnStatisticsObj::operator=(ColumnStatisticsObj&& other376) {
  colName = std::move(other376.colName);
  colType = std::move(other376.colType);
  statsData = std::move(other376.statsData);
  return *this;
}
void ColumnStatisticsObj::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnStatisticsObj(";
  out << "colName=" << to_string(colName);
  out << ", " << "colType=" << to_string(colType);
  out << ", " << "statsData=" << to_string(statsData);
  out << ")";
}


ColumnStatisticsDesc::~ColumnStatisticsDesc() throw() {
}


void ColumnStatisticsDesc::__set_isTblLevel(const bool val) {
  this->isTblLevel = val;
}

void ColumnStatisticsDesc::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void ColumnStatisticsDesc::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void ColumnStatisticsDesc::__set_partName(const std::string& val) {
  this->partName = val;
__isset.partName = true;
}

void ColumnStatisticsDesc::__set_lastAnalyzed(const int64_t val) {
  this->lastAnalyzed = val;
__isset.lastAnalyzed = true;
}

void ColumnStatisticsDesc::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}
std::ostream& operator<<(std::ostream& out, const ColumnStatisticsDesc& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ColumnStatisticsDesc &a, ColumnStatisticsDesc &b) {
  using ::std::swap;
  swap(a.isTblLevel, b.isTblLevel);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.partName, b.partName);
  swap(a.lastAnalyzed, b.lastAnalyzed);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

ColumnStatisticsDesc::ColumnStatisticsDesc(const ColumnStatisticsDesc& other377) {
  isTblLevel = other377.isTblLevel;
  dbName = other377.dbName;
  tableName = other377.tableName;
  partName = other377.partName;
  lastAnalyzed = other377.lastAnalyzed;
  catName = other377.catName;
  __isset = other377.__isset;
}
ColumnStatisticsDesc::ColumnStatisticsDesc( ColumnStatisticsDesc&& other378) {
  isTblLevel = std::move(other378.isTblLevel);
  dbName = std::move(other378.dbName);
  tableName = std::move(other378.tableName);
  partName = std::move(other378.partName);
  lastAnalyzed = std::move(other378.lastAnalyzed);
  catName = std::move(other378.catName);
  __isset = std::move(other378.__isset);
}
ColumnStatisticsDesc& ColumnStatisticsDesc::operator=(const ColumnStatisticsDesc& other379) {
  isTblLevel = other379.isTblLevel;
  dbName = other379.dbName;
  tableName = other379.tableName;
  partName = other379.partName;
  lastAnalyzed = other379.lastAnalyzed;
  catName = other379.catName;
  __isset = other379.__isset;
  return *this;
}
ColumnStatisticsDesc& ColumnStatisticsDesc::operator=(ColumnStatisticsDesc&& other380) {
  isTblLevel = std::move(other380.isTblLevel);
  dbName = std::move(other380.dbName);
  tableName = std::move(other380.tableName);
  partName = std::move(other380.partName);
  lastAnalyzed = std::move(other380.lastAnalyzed);
  catName = std::move(other380.catName);
  __isset = std::move(other380.__isset);
  return *this;
}
void ColumnStatisticsDesc::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnStatisticsDesc(";
  out << "isTblLevel=" << to_string(isTblLevel);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "partName="; (__isset.partName ? (out << to_string(partName)) : (out << "<null>"));
  out << ", " << "lastAnalyzed="; (__isset.lastAnalyzed ? (out << to_string(lastAnalyzed)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


ColumnStatistics::~ColumnStatistics() throw() {
}


void ColumnStatistics::__set_statsDesc(const ColumnStatisticsDesc& val) {
  this->statsDesc = val;
}

void ColumnStatistics::__set_statsObj(const std::vector<ColumnStatisticsObj> & val) {
  this->statsObj = val;
}

void ColumnStatistics::__set_isStatsCompliant(const bool val) {
  this->isStatsCompliant = val;
__isset.isStatsCompliant = true;
}

void ColumnStatistics::__set_engine(const std::string& val) {
  this->engine = val;
__isset.engine = true;
}
std::ostream& operator<<(std::ostream& out, const ColumnStatistics& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ColumnStatistics &a, ColumnStatistics &b) {
  using ::std::swap;
  swap(a.statsDesc, b.statsDesc);
  swap(a.statsObj, b.statsObj);
  swap(a.isStatsCompliant, b.isStatsCompliant);
  swap(a.engine, b.engine);
  swap(a.__isset, b.__isset);
}

ColumnStatistics::ColumnStatistics(const ColumnStatistics& other387) {
  statsDesc = other387.statsDesc;
  statsObj = other387.statsObj;
  isStatsCompliant = other387.isStatsCompliant;
  engine = other387.engine;
  __isset = other387.__isset;
}
ColumnStatistics::ColumnStatistics( ColumnStatistics&& other388) {
  statsDesc = std::move(other388.statsDesc);
  statsObj = std::move(other388.statsObj);
  isStatsCompliant = std::move(other388.isStatsCompliant);
  engine = std::move(other388.engine);
  __isset = std::move(other388.__isset);
}
ColumnStatistics& ColumnStatistics::operator=(const ColumnStatistics& other389) {
  statsDesc = other389.statsDesc;
  statsObj = other389.statsObj;
  isStatsCompliant = other389.isStatsCompliant;
  engine = other389.engine;
  __isset = other389.__isset;
  return *this;
}
ColumnStatistics& ColumnStatistics::operator=(ColumnStatistics&& other390) {
  statsDesc = std::move(other390.statsDesc);
  statsObj = std::move(other390.statsObj);
  isStatsCompliant = std::move(other390.isStatsCompliant);
  engine = std::move(other390.engine);
  __isset = std::move(other390.__isset);
  return *this;
}
void ColumnStatistics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnStatistics(";
  out << "statsDesc=" << to_string(statsDesc);
  out << ", " << "statsObj=" << to_string(statsObj);
  out << ", " << "isStatsCompliant="; (__isset.isStatsCompliant ? (out << to_string(isStatsCompliant)) : (out << "<null>"));
  out << ", " << "engine="; (__isset.engine ? (out << to_string(engine)) : (out << "<null>"));
  out << ")";
}


FileMetadata::~FileMetadata() throw() {
}


void FileMetadata::__set_type(const int8_t val) {
  this->type = val;
}

void FileMetadata::__set_version(const int8_t val) {
  this->version = val;
}

void FileMetadata::__set_data(const std::vector<std::string> & val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const FileMetadata& obj)
{
  obj.printTo(out);
  return out;
}


void swap(FileMetadata &a, FileMetadata &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.version, b.version);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

FileMetadata::FileMetadata(const FileMetadata& other397) {
  type = other397.type;
  version = other397.version;
  data = other397.data;
  __isset = other397.__isset;
}
FileMetadata::FileMetadata( FileMetadata&& other398) {
  type = std::move(other398.type);
  version = std::move(other398.version);
  data = std::move(other398.data);
  __isset = std::move(other398.__isset);
}
FileMetadata& FileMetadata::operator=(const FileMetadata& other399) {
  type = other399.type;
  version = other399.version;
  data = other399.data;
  __isset = other399.__isset;
  return *this;
}
FileMetadata& FileMetadata::operator=(FileMetadata&& other400) {
  type = std::move(other400.type);
  version = std::move(other400.version);
  data = std::move(other400.data);
  __isset = std::move(other400.__isset);
  return *this;
}
void FileMetadata::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FileMetadata(";
  out << "type=" << to_string(type);
  out << ", " << "version=" << to_string(version);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


ObjectDictionary::~ObjectDictionary() throw() {
}


void ObjectDictionary::__set_values(const std::map<std::string, std::vector<std::string> > & val) {
  this->values = val;
}
std::ostream& operator<<(std::ostream& out, const ObjectDictionary& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ObjectDictionary &a, ObjectDictionary &b) {
  using ::std::swap;
  swap(a.values, b.values);
}

ObjectDictionary::ObjectDictionary(const ObjectDictionary& other415) {
  values = other415.values;
}
ObjectDictionary::ObjectDictionary( ObjectDictionary&& other416) {
  values = std::move(other416.values);
}
ObjectDictionary& ObjectDictionary::operator=(const ObjectDictionary& other417) {
  values = other417.values;
  return *this;
}
ObjectDictionary& ObjectDictionary::operator=(ObjectDictionary&& other418) {
  values = std::move(other418.values);
  return *this;
}
void ObjectDictionary::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ObjectDictionary(";
  out << "values=" << to_string(values);
  out << ")";
}


Table::~Table() throw() {
}


void Table::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void Table::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void Table::__set_owner(const std::string& val) {
  this->owner = val;
}

void Table::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Table::__set_lastAccessTime(const int32_t val) {
  this->lastAccessTime = val;
}

void Table::__set_retention(const int32_t val) {
  this->retention = val;
}

void Table::__set_sd(const StorageDescriptor& val) {
  this->sd = val;
}

void Table::__set_partitionKeys(const std::vector<FieldSchema> & val) {
  this->partitionKeys = val;
}

void Table::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void Table::__set_viewOriginalText(const std::string& val) {
  this->viewOriginalText = val;
}

void Table::__set_viewExpandedText(const std::string& val) {
  this->viewExpandedText = val;
}

void Table::__set_tableType(const std::string& val) {
  this->tableType = val;
}

void Table::__set_privileges(const PrincipalPrivilegeSet& val) {
  this->privileges = val;
__isset.privileges = true;
}

void Table::__set_temporary(const bool val) {
  this->temporary = val;
__isset.temporary = true;
}

void Table::__set_rewriteEnabled(const bool val) {
  this->rewriteEnabled = val;
__isset.rewriteEnabled = true;
}

void Table::__set_creationMetadata(const CreationMetadata& val) {
  this->creationMetadata = val;
__isset.creationMetadata = true;
}

void Table::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void Table::__set_ownerType(const PrincipalType::type val) {
  this->ownerType = val;
__isset.ownerType = true;
}

void Table::__set_writeId(const int64_t val) {
  this->writeId = val;
__isset.writeId = true;
}

void Table::__set_isStatsCompliant(const bool val) {
  this->isStatsCompliant = val;
__isset.isStatsCompliant = true;
}

void Table::__set_colStats(const ColumnStatistics& val) {
  this->colStats = val;
__isset.colStats = true;
}

void Table::__set_accessType(const int8_t val) {
  this->accessType = val;
__isset.accessType = true;
}

void Table::__set_requiredReadCapabilities(const std::vector<std::string> & val) {
  this->requiredReadCapabilities = val;
__isset.requiredReadCapabilities = true;
}

void Table::__set_requiredWriteCapabilities(const std::vector<std::string> & val) {
  this->requiredWriteCapabilities = val;
__isset.requiredWriteCapabilities = true;
}

void Table::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}

void Table::__set_fileMetadata(const FileMetadata& val) {
  this->fileMetadata = val;
__isset.fileMetadata = true;
}

void Table::__set_dictionary(const ObjectDictionary& val) {
  this->dictionary = val;
__isset.dictionary = true;
}
std::ostream& operator<<(std::ostream& out, const Table& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Table &a, Table &b) {
  using ::std::swap;
  swap(a.tableName, b.tableName);
  swap(a.dbName, b.dbName);
  swap(a.owner, b.owner);
  swap(a.createTime, b.createTime);
  swap(a.lastAccessTime, b.lastAccessTime);
  swap(a.retention, b.retention);
  swap(a.sd, b.sd);
  swap(a.partitionKeys, b.partitionKeys);
  swap(a.parameters, b.parameters);
  swap(a.viewOriginalText, b.viewOriginalText);
  swap(a.viewExpandedText, b.viewExpandedText);
  swap(a.tableType, b.tableType);
  swap(a.privileges, b.privileges);
  swap(a.temporary, b.temporary);
  swap(a.rewriteEnabled, b.rewriteEnabled);
  swap(a.creationMetadata, b.creationMetadata);
  swap(a.catName, b.catName);
  swap(a.ownerType, b.ownerType);
  swap(a.writeId, b.writeId);
  swap(a.isStatsCompliant, b.isStatsCompliant);
  swap(a.colStats, b.colStats);
  swap(a.accessType, b.accessType);
  swap(a.requiredReadCapabilities, b.requiredReadCapabilities);
  swap(a.requiredWriteCapabilities, b.requiredWriteCapabilities);
  swap(a.id, b.id);
  swap(a.fileMetadata, b.fileMetadata);
  swap(a.dictionary, b.dictionary);
  swap(a.__isset, b.__isset);
}

Table::Table(const Table& other446) {
  tableName = other446.tableName;
  dbName = other446.dbName;
  owner = other446.owner;
  createTime = other446.createTime;
  lastAccessTime = other446.lastAccessTime;
  retention = other446.retention;
  sd = other446.sd;
  partitionKeys = other446.partitionKeys;
  parameters = other446.parameters;
  viewOriginalText = other446.viewOriginalText;
  viewExpandedText = other446.viewExpandedText;
  tableType = other446.tableType;
  privileges = other446.privileges;
  temporary = other446.temporary;
  rewriteEnabled = other446.rewriteEnabled;
  creationMetadata = other446.creationMetadata;
  catName = other446.catName;
  ownerType = other446.ownerType;
  writeId = other446.writeId;
  isStatsCompliant = other446.isStatsCompliant;
  colStats = other446.colStats;
  accessType = other446.accessType;
  requiredReadCapabilities = other446.requiredReadCapabilities;
  requiredWriteCapabilities = other446.requiredWriteCapabilities;
  id = other446.id;
  fileMetadata = other446.fileMetadata;
  dictionary = other446.dictionary;
  __isset = other446.__isset;
}
Table::Table( Table&& other447) {
  tableName = std::move(other447.tableName);
  dbName = std::move(other447.dbName);
  owner = std::move(other447.owner);
  createTime = std::move(other447.createTime);
  lastAccessTime = std::move(other447.lastAccessTime);
  retention = std::move(other447.retention);
  sd = std::move(other447.sd);
  partitionKeys = std::move(other447.partitionKeys);
  parameters = std::move(other447.parameters);
  viewOriginalText = std::move(other447.viewOriginalText);
  viewExpandedText = std::move(other447.viewExpandedText);
  tableType = std::move(other447.tableType);
  privileges = std::move(other447.privileges);
  temporary = std::move(other447.temporary);
  rewriteEnabled = std::move(other447.rewriteEnabled);
  creationMetadata = std::move(other447.creationMetadata);
  catName = std::move(other447.catName);
  ownerType = std::move(other447.ownerType);
  writeId = std::move(other447.writeId);
  isStatsCompliant = std::move(other447.isStatsCompliant);
  colStats = std::move(other447.colStats);
  accessType = std::move(other447.accessType);
  requiredReadCapabilities = std::move(other447.requiredReadCapabilities);
  requiredWriteCapabilities = std::move(other447.requiredWriteCapabilities);
  id = std::move(other447.id);
  fileMetadata = std::move(other447.fileMetadata);
  dictionary = std::move(other447.dictionary);
  __isset = std::move(other447.__isset);
}
Table& Table::operator=(const Table& other448) {
  tableName = other448.tableName;
  dbName = other448.dbName;
  owner = other448.owner;
  createTime = other448.createTime;
  lastAccessTime = other448.lastAccessTime;
  retention = other448.retention;
  sd = other448.sd;
  partitionKeys = other448.partitionKeys;
  parameters = other448.parameters;
  viewOriginalText = other448.viewOriginalText;
  viewExpandedText = other448.viewExpandedText;
  tableType = other448.tableType;
  privileges = other448.privileges;
  temporary = other448.temporary;
  rewriteEnabled = other448.rewriteEnabled;
  creationMetadata = other448.creationMetadata;
  catName = other448.catName;
  ownerType = other448.ownerType;
  writeId = other448.writeId;
  isStatsCompliant = other448.isStatsCompliant;
  colStats = other448.colStats;
  accessType = other448.accessType;
  requiredReadCapabilities = other448.requiredReadCapabilities;
  requiredWriteCapabilities = other448.requiredWriteCapabilities;
  id = other448.id;
  fileMetadata = other448.fileMetadata;
  dictionary = other448.dictionary;
  __isset = other448.__isset;
  return *this;
}
Table& Table::operator=(Table&& other449) {
  tableName = std::move(other449.tableName);
  dbName = std::move(other449.dbName);
  owner = std::move(other449.owner);
  createTime = std::move(other449.createTime);
  lastAccessTime = std::move(other449.lastAccessTime);
  retention = std::move(other449.retention);
  sd = std::move(other449.sd);
  partitionKeys = std::move(other449.partitionKeys);
  parameters = std::move(other449.parameters);
  viewOriginalText = std::move(other449.viewOriginalText);
  viewExpandedText = std::move(other449.viewExpandedText);
  tableType = std::move(other449.tableType);
  privileges = std::move(other449.privileges);
  temporary = std::move(other449.temporary);
  rewriteEnabled = std::move(other449.rewriteEnabled);
  creationMetadata = std::move(other449.creationMetadata);
  catName = std::move(other449.catName);
  ownerType = std::move(other449.ownerType);
  writeId = std::move(other449.writeId);
  isStatsCompliant = std::move(other449.isStatsCompliant);
  colStats = std::move(other449.colStats);
  accessType = std::move(other449.accessType);
  requiredReadCapabilities = std::move(other449.requiredReadCapabilities);
  requiredWriteCapabilities = std::move(other449.requiredWriteCapabilities);
  id = std::move(other449.id);
  fileMetadata = std::move(other449.fileMetadata);
  dictionary = std::move(other449.dictionary);
  __isset = std::move(other449.__isset);
  return *this;
}
void Table::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Table(";
  out << "tableName=" << to_string(tableName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "owner=" << to_string(owner);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "lastAccessTime=" << to_string(lastAccessTime);
  out << ", " << "retention=" << to_string(retention);
  out << ", " << "sd=" << to_string(sd);
  out << ", " << "partitionKeys=" << to_string(partitionKeys);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "viewOriginalText=" << to_string(viewOriginalText);
  out << ", " << "viewExpandedText=" << to_string(viewExpandedText);
  out << ", " << "tableType=" << to_string(tableType);
  out << ", " << "privileges="; (__isset.privileges ? (out << to_string(privileges)) : (out << "<null>"));
  out << ", " << "temporary="; (__isset.temporary ? (out << to_string(temporary)) : (out << "<null>"));
  out << ", " << "rewriteEnabled="; (__isset.rewriteEnabled ? (out << to_string(rewriteEnabled)) : (out << "<null>"));
  out << ", " << "creationMetadata="; (__isset.creationMetadata ? (out << to_string(creationMetadata)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "ownerType="; (__isset.ownerType ? (out << to_string(ownerType)) : (out << "<null>"));
  out << ", " << "writeId="; (__isset.writeId ? (out << to_string(writeId)) : (out << "<null>"));
  out << ", " << "isStatsCompliant="; (__isset.isStatsCompliant ? (out << to_string(isStatsCompliant)) : (out << "<null>"));
  out << ", " << "colStats="; (__isset.colStats ? (out << to_string(colStats)) : (out << "<null>"));
  out << ", " << "accessType="; (__isset.accessType ? (out << to_string(accessType)) : (out << "<null>"));
  out << ", " << "requiredReadCapabilities="; (__isset.requiredReadCapabilities ? (out << to_string(requiredReadCapabilities)) : (out << "<null>"));
  out << ", " << "requiredWriteCapabilities="; (__isset.requiredWriteCapabilities ? (out << to_string(requiredWriteCapabilities)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "fileMetadata="; (__isset.fileMetadata ? (out << to_string(fileMetadata)) : (out << "<null>"));
  out << ", " << "dictionary="; (__isset.dictionary ? (out << to_string(dictionary)) : (out << "<null>"));
  out << ")";
}


Partition::~Partition() throw() {
}


void Partition::__set_values(const std::vector<std::string> & val) {
  this->values = val;
}

void Partition::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void Partition::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void Partition::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Partition::__set_lastAccessTime(const int32_t val) {
  this->lastAccessTime = val;
}

void Partition::__set_sd(const StorageDescriptor& val) {
  this->sd = val;
}

void Partition::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void Partition::__set_privileges(const PrincipalPrivilegeSet& val) {
  this->privileges = val;
__isset.privileges = true;
}

void Partition::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void Partition::__set_writeId(const int64_t val) {
  this->writeId = val;
__isset.writeId = true;
}

void Partition::__set_isStatsCompliant(const bool val) {
  this->isStatsCompliant = val;
__isset.isStatsCompliant = true;
}

void Partition::__set_colStats(const ColumnStatistics& val) {
  this->colStats = val;
__isset.colStats = true;
}

void Partition::__set_fileMetadata(const FileMetadata& val) {
  this->fileMetadata = val;
__isset.fileMetadata = true;
}
std::ostream& operator<<(std::ostream& out, const Partition& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Partition &a, Partition &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.createTime, b.createTime);
  swap(a.lastAccessTime, b.lastAccessTime);
  swap(a.sd, b.sd);
  swap(a.parameters, b.parameters);
  swap(a.privileges, b.privileges);
  swap(a.catName, b.catName);
  swap(a.writeId, b.writeId);
  swap(a.isStatsCompliant, b.isStatsCompliant);
  swap(a.colStats, b.colStats);
  swap(a.fileMetadata, b.fileMetadata);
  swap(a.__isset, b.__isset);
}

Partition::Partition(const Partition& other464) {
  values = other464.values;
  dbName = other464.dbName;
  tableName = other464.tableName;
  createTime = other464.createTime;
  lastAccessTime = other464.lastAccessTime;
  sd = other464.sd;
  parameters = other464.parameters;
  privileges = other464.privileges;
  catName = other464.catName;
  writeId = other464.writeId;
  isStatsCompliant = other464.isStatsCompliant;
  colStats = other464.colStats;
  fileMetadata = other464.fileMetadata;
  __isset = other464.__isset;
}
Partition::Partition( Partition&& other465) {
  values = std::move(other465.values);
  dbName = std::move(other465.dbName);
  tableName = std::move(other465.tableName);
  createTime = std::move(other465.createTime);
  lastAccessTime = std::move(other465.lastAccessTime);
  sd = std::move(other465.sd);
  parameters = std::move(other465.parameters);
  privileges = std::move(other465.privileges);
  catName = std::move(other465.catName);
  writeId = std::move(other465.writeId);
  isStatsCompliant = std::move(other465.isStatsCompliant);
  colStats = std::move(other465.colStats);
  fileMetadata = std::move(other465.fileMetadata);
  __isset = std::move(other465.__isset);
}
Partition& Partition::operator=(const Partition& other466) {
  values = other466.values;
  dbName = other466.dbName;
  tableName = other466.tableName;
  createTime = other466.createTime;
  lastAccessTime = other466.lastAccessTime;
  sd = other466.sd;
  parameters = other466.parameters;
  privileges = other466.privileges;
  catName = other466.catName;
  writeId = other466.writeId;
  isStatsCompliant = other466.isStatsCompliant;
  colStats = other466.colStats;
  fileMetadata = other466.fileMetadata;
  __isset = other466.__isset;
  return *this;
}
Partition& Partition::operator=(Partition&& other467) {
  values = std::move(other467.values);
  dbName = std::move(other467.dbName);
  tableName = std::move(other467.tableName);
  createTime = std::move(other467.createTime);
  lastAccessTime = std::move(other467.lastAccessTime);
  sd = std::move(other467.sd);
  parameters = std::move(other467.parameters);
  privileges = std::move(other467.privileges);
  catName = std::move(other467.catName);
  writeId = std::move(other467.writeId);
  isStatsCompliant = std::move(other467.isStatsCompliant);
  colStats = std::move(other467.colStats);
  fileMetadata = std::move(other467.fileMetadata);
  __isset = std::move(other467.__isset);
  return *this;
}
void Partition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Partition(";
  out << "values=" << to_string(values);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "lastAccessTime=" << to_string(lastAccessTime);
  out << ", " << "sd=" << to_string(sd);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "privileges="; (__isset.privileges ? (out << to_string(privileges)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "writeId="; (__isset.writeId ? (out << to_string(writeId)) : (out << "<null>"));
  out << ", " << "isStatsCompliant="; (__isset.isStatsCompliant ? (out << to_string(isStatsCompliant)) : (out << "<null>"));
  out << ", " << "colStats="; (__isset.colStats ? (out << to_string(colStats)) : (out << "<null>"));
  out << ", " << "fileMetadata="; (__isset.fileMetadata ? (out << to_string(fileMetadata)) : (out << "<null>"));
  out << ")";
}


PartitionWithoutSD::~PartitionWithoutSD() throw() {
}


void PartitionWithoutSD::__set_values(const std::vector<std::string> & val) {
  this->values = val;
}

void PartitionWithoutSD::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void PartitionWithoutSD::__set_lastAccessTime(const int32_t val) {
  this->lastAccessTime = val;
}

void PartitionWithoutSD::__set_relativePath(const std::string& val) {
  this->relativePath = val;
}

void PartitionWithoutSD::__set_parameters(const std::map<std::string, std::string> & val) {
  this->parameters = val;
}

void PartitionWithoutSD::__set_privileges(const PrincipalPrivilegeSet& val) {
  this->privileges = val;
__isset.privileges = true;
}
std::ostream& operator<<(std::ostream& out, const PartitionWithoutSD& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionWithoutSD &a, PartitionWithoutSD &b) {
  using ::std::swap;
  swap(a.values, b.values);
  swap(a.createTime, b.createTime);
  swap(a.lastAccessTime, b.lastAccessTime);
  swap(a.relativePath, b.relativePath);
  swap(a.parameters, b.parameters);
  swap(a.privileges, b.privileges);
  swap(a.__isset, b.__isset);
}

PartitionWithoutSD::PartitionWithoutSD(const PartitionWithoutSD& other482) {
  values = other482.values;
  createTime = other482.createTime;
  lastAccessTime = other482.lastAccessTime;
  relativePath = other482.relativePath;
  parameters = other482.parameters;
  privileges = other482.privileges;
  __isset = other482.__isset;
}
PartitionWithoutSD::PartitionWithoutSD( PartitionWithoutSD&& other483) {
  values = std::move(other483.values);
  createTime = std::move(other483.createTime);
  lastAccessTime = std::move(other483.lastAccessTime);
  relativePath = std::move(other483.relativePath);
  parameters = std::move(other483.parameters);
  privileges = std::move(other483.privileges);
  __isset = std::move(other483.__isset);
}
PartitionWithoutSD& PartitionWithoutSD::operator=(const PartitionWithoutSD& other484) {
  values = other484.values;
  createTime = other484.createTime;
  lastAccessTime = other484.lastAccessTime;
  relativePath = other484.relativePath;
  parameters = other484.parameters;
  privileges = other484.privileges;
  __isset = other484.__isset;
  return *this;
}
PartitionWithoutSD& PartitionWithoutSD::operator=(PartitionWithoutSD&& other485) {
  values = std::move(other485.values);
  createTime = std::move(other485.createTime);
  lastAccessTime = std::move(other485.lastAccessTime);
  relativePath = std::move(other485.relativePath);
  parameters = std::move(other485.parameters);
  privileges = std::move(other485.privileges);
  __isset = std::move(other485.__isset);
  return *this;
}
void PartitionWithoutSD::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionWithoutSD(";
  out << "values=" << to_string(values);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "lastAccessTime=" << to_string(lastAccessTime);
  out << ", " << "relativePath=" << to_string(relativePath);
  out << ", " << "parameters=" << to_string(parameters);
  out << ", " << "privileges="; (__isset.privileges ? (out << to_string(privileges)) : (out << "<null>"));
  out << ")";
}


PartitionSpecWithSharedSD::~PartitionSpecWithSharedSD() throw() {
}


void PartitionSpecWithSharedSD::__set_partitions(const std::vector<PartitionWithoutSD> & val) {
  this->partitions = val;
}

void PartitionSpecWithSharedSD::__set_sd(const StorageDescriptor& val) {
  this->sd = val;
}
std::ostream& operator<<(std::ostream& out, const PartitionSpecWithSharedSD& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionSpecWithSharedSD &a, PartitionSpecWithSharedSD &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.sd, b.sd);
  swap(a.__isset, b.__isset);
}

PartitionSpecWithSharedSD::PartitionSpecWithSharedSD(const PartitionSpecWithSharedSD& other492) {
  partitions = other492.partitions;
  sd = other492.sd;
  __isset = other492.__isset;
}
PartitionSpecWithSharedSD::PartitionSpecWithSharedSD( PartitionSpecWithSharedSD&& other493) {
  partitions = std::move(other493.partitions);
  sd = std::move(other493.sd);
  __isset = std::move(other493.__isset);
}
PartitionSpecWithSharedSD& PartitionSpecWithSharedSD::operator=(const PartitionSpecWithSharedSD& other494) {
  partitions = other494.partitions;
  sd = other494.sd;
  __isset = other494.__isset;
  return *this;
}
PartitionSpecWithSharedSD& PartitionSpecWithSharedSD::operator=(PartitionSpecWithSharedSD&& other495) {
  partitions = std::move(other495.partitions);
  sd = std::move(other495.sd);
  __isset = std::move(other495.__isset);
  return *this;
}
void PartitionSpecWithSharedSD::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionSpecWithSharedSD(";
  out << "partitions=" << to_string(partitions);
  out << ", " << "sd=" << to_string(sd);
  out << ")";
}


PartitionListComposingSpec::~PartitionListComposingSpec() throw() {
}


void PartitionListComposingSpec::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
}
std::ostream& operator<<(std::ostream& out, const PartitionListComposingSpec& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionListComposingSpec &a, PartitionListComposingSpec &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.__isset, b.__isset);
}

PartitionListComposingSpec::PartitionListComposingSpec(const PartitionListComposingSpec& other502) {
  partitions = other502.partitions;
  __isset = other502.__isset;
}
PartitionListComposingSpec::PartitionListComposingSpec( PartitionListComposingSpec&& other503) {
  partitions = std::move(other503.partitions);
  __isset = std::move(other503.__isset);
}
PartitionListComposingSpec& PartitionListComposingSpec::operator=(const PartitionListComposingSpec& other504) {
  partitions = other504.partitions;
  __isset = other504.__isset;
  return *this;
}
PartitionListComposingSpec& PartitionListComposingSpec::operator=(PartitionListComposingSpec&& other505) {
  partitions = std::move(other505.partitions);
  __isset = std::move(other505.__isset);
  return *this;
}
void PartitionListComposingSpec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionListComposingSpec(";
  out << "partitions=" << to_string(partitions);
  out << ")";
}


PartitionSpec::~PartitionSpec() throw() {
}


void PartitionSpec::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionSpec::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void PartitionSpec::__set_rootPath(const std::string& val) {
  this->rootPath = val;
}

void PartitionSpec::__set_sharedSDPartitionSpec(const PartitionSpecWithSharedSD& val) {
  this->sharedSDPartitionSpec = val;
__isset.sharedSDPartitionSpec = true;
}

void PartitionSpec::__set_partitionList(const PartitionListComposingSpec& val) {
  this->partitionList = val;
__isset.partitionList = true;
}

void PartitionSpec::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void PartitionSpec::__set_writeId(const int64_t val) {
  this->writeId = val;
__isset.writeId = true;
}

void PartitionSpec::__set_isStatsCompliant(const bool val) {
  this->isStatsCompliant = val;
__isset.isStatsCompliant = true;
}
std::ostream& operator<<(std::ostream& out, const PartitionSpec& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionSpec &a, PartitionSpec &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.rootPath, b.rootPath);
  swap(a.sharedSDPartitionSpec, b.sharedSDPartitionSpec);
  swap(a.partitionList, b.partitionList);
  swap(a.catName, b.catName);
  swap(a.writeId, b.writeId);
  swap(a.isStatsCompliant, b.isStatsCompliant);
  swap(a.__isset, b.__isset);
}

PartitionSpec::PartitionSpec(const PartitionSpec& other506) {
  dbName = other506.dbName;
  tableName = other506.tableName;
  rootPath = other506.rootPath;
  sharedSDPartitionSpec = other506.sharedSDPartitionSpec;
  partitionList = other506.partitionList;
  catName = other506.catName;
  writeId = other506.writeId;
  isStatsCompliant = other506.isStatsCompliant;
  __isset = other506.__isset;
}
PartitionSpec::PartitionSpec( PartitionSpec&& other507) {
  dbName = std::move(other507.dbName);
  tableName = std::move(other507.tableName);
  rootPath = std::move(other507.rootPath);
  sharedSDPartitionSpec = std::move(other507.sharedSDPartitionSpec);
  partitionList = std::move(other507.partitionList);
  catName = std::move(other507.catName);
  writeId = std::move(other507.writeId);
  isStatsCompliant = std::move(other507.isStatsCompliant);
  __isset = std::move(other507.__isset);
}
PartitionSpec& PartitionSpec::operator=(const PartitionSpec& other508) {
  dbName = other508.dbName;
  tableName = other508.tableName;
  rootPath = other508.rootPath;
  sharedSDPartitionSpec = other508.sharedSDPartitionSpec;
  partitionList = other508.partitionList;
  catName = other508.catName;
  writeId = other508.writeId;
  isStatsCompliant = other508.isStatsCompliant;
  __isset = other508.__isset;
  return *this;
}
PartitionSpec& PartitionSpec::operator=(PartitionSpec&& other509) {
  dbName = std::move(other509.dbName);
  tableName = std::move(other509.tableName);
  rootPath = std::move(other509.rootPath);
  sharedSDPartitionSpec = std::move(other509.sharedSDPartitionSpec);
  partitionList = std::move(other509.partitionList);
  catName = std::move(other509.catName);
  writeId = std::move(other509.writeId);
  isStatsCompliant = std::move(other509.isStatsCompliant);
  __isset = std::move(other509.__isset);
  return *this;
}
void PartitionSpec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionSpec(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "rootPath=" << to_string(rootPath);
  out << ", " << "sharedSDPartitionSpec="; (__isset.sharedSDPartitionSpec ? (out << to_string(sharedSDPartitionSpec)) : (out << "<null>"));
  out << ", " << "partitionList="; (__isset.partitionList ? (out << to_string(partitionList)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "writeId="; (__isset.writeId ? (out << to_string(writeId)) : (out << "<null>"));
  out << ", " << "isStatsCompliant="; (__isset.isStatsCompliant ? (out << to_string(isStatsCompliant)) : (out << "<null>"));
  out << ")";
}


AggrStats::~AggrStats() throw() {
}


void AggrStats::__set_colStats(const std::vector<ColumnStatisticsObj> & val) {
  this->colStats = val;
}

void AggrStats::__set_partsFound(const int64_t val) {
  this->partsFound = val;
}

void AggrStats::__set_isStatsCompliant(const bool val) {
  this->isStatsCompliant = val;
__isset.isStatsCompliant = true;
}
std::ostream& operator<<(std::ostream& out, const AggrStats& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AggrStats &a, AggrStats &b) {
  using ::std::swap;
  swap(a.colStats, b.colStats);
  swap(a.partsFound, b.partsFound);
  swap(a.isStatsCompliant, b.isStatsCompliant);
  swap(a.__isset, b.__isset);
}

AggrStats::AggrStats(const AggrStats& other516) {
  colStats = other516.colStats;
  partsFound = other516.partsFound;
  isStatsCompliant = other516.isStatsCompliant;
  __isset = other516.__isset;
}
AggrStats::AggrStats( AggrStats&& other517) {
  colStats = std::move(other517.colStats);
  partsFound = std::move(other517.partsFound);
  isStatsCompliant = std::move(other517.isStatsCompliant);
  __isset = std::move(other517.__isset);
}
AggrStats& AggrStats::operator=(const AggrStats& other518) {
  colStats = other518.colStats;
  partsFound = other518.partsFound;
  isStatsCompliant = other518.isStatsCompliant;
  __isset = other518.__isset;
  return *this;
}
AggrStats& AggrStats::operator=(AggrStats&& other519) {
  colStats = std::move(other519.colStats);
  partsFound = std::move(other519.partsFound);
  isStatsCompliant = std::move(other519.isStatsCompliant);
  __isset = std::move(other519.__isset);
  return *this;
}
void AggrStats::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AggrStats(";
  out << "colStats=" << to_string(colStats);
  out << ", " << "partsFound=" << to_string(partsFound);
  out << ", " << "isStatsCompliant="; (__isset.isStatsCompliant ? (out << to_string(isStatsCompliant)) : (out << "<null>"));
  out << ")";
}


SetPartitionsStatsRequest::~SetPartitionsStatsRequest() throw() {
}


void SetPartitionsStatsRequest::__set_colStats(const std::vector<ColumnStatistics> & val) {
  this->colStats = val;
}

void SetPartitionsStatsRequest::__set_needMerge(const bool val) {
  this->needMerge = val;
__isset.needMerge = true;
}

void SetPartitionsStatsRequest::__set_writeId(const int64_t val) {
  this->writeId = val;
__isset.writeId = true;
}

void SetPartitionsStatsRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void SetPartitionsStatsRequest::__set_engine(const std::string& val) {
  this->engine = val;
__isset.engine = true;
}
std::ostream& operator<<(std::ostream& out, const SetPartitionsStatsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SetPartitionsStatsRequest &a, SetPartitionsStatsRequest &b) {
  using ::std::swap;
  swap(a.colStats, b.colStats);
  swap(a.needMerge, b.needMerge);
  swap(a.writeId, b.writeId);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.engine, b.engine);
  swap(a.__isset, b.__isset);
}

SetPartitionsStatsRequest::SetPartitionsStatsRequest(const SetPartitionsStatsRequest& other526) {
  colStats = other526.colStats;
  needMerge = other526.needMerge;
  writeId = other526.writeId;
  validWriteIdList = other526.validWriteIdList;
  engine = other526.engine;
  __isset = other526.__isset;
}
SetPartitionsStatsRequest::SetPartitionsStatsRequest( SetPartitionsStatsRequest&& other527) {
  colStats = std::move(other527.colStats);
  needMerge = std::move(other527.needMerge);
  writeId = std::move(other527.writeId);
  validWriteIdList = std::move(other527.validWriteIdList);
  engine = std::move(other527.engine);
  __isset = std::move(other527.__isset);
}
SetPartitionsStatsRequest& SetPartitionsStatsRequest::operator=(const SetPartitionsStatsRequest& other528) {
  colStats = other528.colStats;
  needMerge = other528.needMerge;
  writeId = other528.writeId;
  validWriteIdList = other528.validWriteIdList;
  engine = other528.engine;
  __isset = other528.__isset;
  return *this;
}
SetPartitionsStatsRequest& SetPartitionsStatsRequest::operator=(SetPartitionsStatsRequest&& other529) {
  colStats = std::move(other529.colStats);
  needMerge = std::move(other529.needMerge);
  writeId = std::move(other529.writeId);
  validWriteIdList = std::move(other529.validWriteIdList);
  engine = std::move(other529.engine);
  __isset = std::move(other529.__isset);
  return *this;
}
void SetPartitionsStatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SetPartitionsStatsRequest(";
  out << "colStats=" << to_string(colStats);
  out << ", " << "needMerge="; (__isset.needMerge ? (out << to_string(needMerge)) : (out << "<null>"));
  out << ", " << "writeId="; (__isset.writeId ? (out << to_string(writeId)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "engine="; (__isset.engine ? (out << to_string(engine)) : (out << "<null>"));
  out << ")";
}


SetPartitionsStatsResponse::~SetPartitionsStatsResponse() throw() {
}


void SetPartitionsStatsResponse::__set_result(const bool val) {
  this->result = val;
}
std::ostream& operator<<(std::ostream& out, const SetPartitionsStatsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SetPartitionsStatsResponse &a, SetPartitionsStatsResponse &b) {
  using ::std::swap;
  swap(a.result, b.result);
}

SetPartitionsStatsResponse::SetPartitionsStatsResponse(const SetPartitionsStatsResponse& other530) {
  result = other530.result;
}
SetPartitionsStatsResponse::SetPartitionsStatsResponse( SetPartitionsStatsResponse&& other531) {
  result = std::move(other531.result);
}
SetPartitionsStatsResponse& SetPartitionsStatsResponse::operator=(const SetPartitionsStatsResponse& other532) {
  result = other532.result;
  return *this;
}
SetPartitionsStatsResponse& SetPartitionsStatsResponse::operator=(SetPartitionsStatsResponse&& other533) {
  result = std::move(other533.result);
  return *this;
}
void SetPartitionsStatsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SetPartitionsStatsResponse(";
  out << "result=" << to_string(result);
  out << ")";
}


Schema::~Schema() throw() {
}


void Schema::__set_fieldSchemas(const std::vector<FieldSchema> & val) {
  this->fieldSchemas = val;
}

void Schema::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}
std::ostream& operator<<(std::ostream& out, const Schema& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Schema &a, Schema &b) {
  using ::std::swap;
  swap(a.fieldSchemas, b.fieldSchemas);
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

Schema::Schema(const Schema& other548) {
  fieldSchemas = other548.fieldSchemas;
  properties = other548.properties;
  __isset = other548.__isset;
}
Schema::Schema( Schema&& other549) {
  fieldSchemas = std::move(other549.fieldSchemas);
  properties = std::move(other549.properties);
  __isset = std::move(other549.__isset);
}
Schema& Schema::operator=(const Schema& other550) {
  fieldSchemas = other550.fieldSchemas;
  properties = other550.properties;
  __isset = other550.__isset;
  return *this;
}
Schema& Schema::operator=(Schema&& other551) {
  fieldSchemas = std::move(other551.fieldSchemas);
  properties = std::move(other551.properties);
  __isset = std::move(other551.__isset);
  return *this;
}
void Schema::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Schema(";
  out << "fieldSchemas=" << to_string(fieldSchemas);
  out << ", " << "properties=" << to_string(properties);
  out << ")";
}


EnvironmentContext::~EnvironmentContext() throw() {
}


void EnvironmentContext::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}
std::ostream& operator<<(std::ostream& out, const EnvironmentContext& obj)
{
  obj.printTo(out);
  return out;
}


void swap(EnvironmentContext &a, EnvironmentContext &b) {
  using ::std::swap;
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

EnvironmentContext::EnvironmentContext(const EnvironmentContext& other560) {
  properties = other560.properties;
  __isset = other560.__isset;
}
EnvironmentContext::EnvironmentContext( EnvironmentContext&& other561) {
  properties = std::move(other561.properties);
  __isset = std::move(other561.__isset);
}
EnvironmentContext& EnvironmentContext::operator=(const EnvironmentContext& other562) {
  properties = other562.properties;
  __isset = other562.__isset;
  return *this;
}
EnvironmentContext& EnvironmentContext::operator=(EnvironmentContext&& other563) {
  properties = std::move(other563.properties);
  __isset = std::move(other563.__isset);
  return *this;
}
void EnvironmentContext::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EnvironmentContext(";
  out << "properties=" << to_string(properties);
  out << ")";
}


PrimaryKeysRequest::~PrimaryKeysRequest() throw() {
}


void PrimaryKeysRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void PrimaryKeysRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}

void PrimaryKeysRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}
std::ostream& operator<<(std::ostream& out, const PrimaryKeysRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PrimaryKeysRequest &a, PrimaryKeysRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

PrimaryKeysRequest::PrimaryKeysRequest(const PrimaryKeysRequest& other564) {
  db_name = other564.db_name;
  tbl_name = other564.tbl_name;
  catName = other564.catName;
  __isset = other564.__isset;
}
PrimaryKeysRequest::PrimaryKeysRequest( PrimaryKeysRequest&& other565) {
  db_name = std::move(other565.db_name);
  tbl_name = std::move(other565.tbl_name);
  catName = std::move(other565.catName);
  __isset = std::move(other565.__isset);
}
PrimaryKeysRequest& PrimaryKeysRequest::operator=(const PrimaryKeysRequest& other566) {
  db_name = other566.db_name;
  tbl_name = other566.tbl_name;
  catName = other566.catName;
  __isset = other566.__isset;
  return *this;
}
PrimaryKeysRequest& PrimaryKeysRequest::operator=(PrimaryKeysRequest&& other567) {
  db_name = std::move(other567.db_name);
  tbl_name = std::move(other567.tbl_name);
  catName = std::move(other567.catName);
  __isset = std::move(other567.__isset);
  return *this;
}
void PrimaryKeysRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrimaryKeysRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


PrimaryKeysResponse::~PrimaryKeysResponse() throw() {
}


void PrimaryKeysResponse::__set_primaryKeys(const std::vector<SQLPrimaryKey> & val) {
  this->primaryKeys = val;
}
std::ostream& operator<<(std::ostream& out, const PrimaryKeysResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PrimaryKeysResponse &a, PrimaryKeysResponse &b) {
  using ::std::swap;
  swap(a.primaryKeys, b.primaryKeys);
}

PrimaryKeysResponse::PrimaryKeysResponse(const PrimaryKeysResponse& other574) {
  primaryKeys = other574.primaryKeys;
}
PrimaryKeysResponse::PrimaryKeysResponse( PrimaryKeysResponse&& other575) {
  primaryKeys = std::move(other575.primaryKeys);
}
PrimaryKeysResponse& PrimaryKeysResponse::operator=(const PrimaryKeysResponse& other576) {
  primaryKeys = other576.primaryKeys;
  return *this;
}
PrimaryKeysResponse& PrimaryKeysResponse::operator=(PrimaryKeysResponse&& other577) {
  primaryKeys = std::move(other577.primaryKeys);
  return *this;
}
void PrimaryKeysResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrimaryKeysResponse(";
  out << "primaryKeys=" << to_string(primaryKeys);
  out << ")";
}


ForeignKeysRequest::~ForeignKeysRequest() throw() {
}


void ForeignKeysRequest::__set_parent_db_name(const std::string& val) {
  this->parent_db_name = val;
}

void ForeignKeysRequest::__set_parent_tbl_name(const std::string& val) {
  this->parent_tbl_name = val;
}

void ForeignKeysRequest::__set_foreign_db_name(const std::string& val) {
  this->foreign_db_name = val;
}

void ForeignKeysRequest::__set_foreign_tbl_name(const std::string& val) {
  this->foreign_tbl_name = val;
}

void ForeignKeysRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}
std::ostream& operator<<(std::ostream& out, const ForeignKeysRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ForeignKeysRequest &a, ForeignKeysRequest &b) {
  using ::std::swap;
  swap(a.parent_db_name, b.parent_db_name);
  swap(a.parent_tbl_name, b.parent_tbl_name);
  swap(a.foreign_db_name, b.foreign_db_name);
  swap(a.foreign_tbl_name, b.foreign_tbl_name);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

ForeignKeysRequest::ForeignKeysRequest(const ForeignKeysRequest& other578) {
  parent_db_name = other578.parent_db_name;
  parent_tbl_name = other578.parent_tbl_name;
  foreign_db_name = other578.foreign_db_name;
  foreign_tbl_name = other578.foreign_tbl_name;
  catName = other578.catName;
  __isset = other578.__isset;
}
ForeignKeysRequest::ForeignKeysRequest( ForeignKeysRequest&& other579) {
  parent_db_name = std::move(other579.parent_db_name);
  parent_tbl_name = std::move(other579.parent_tbl_name);
  foreign_db_name = std::move(other579.foreign_db_name);
  foreign_tbl_name = std::move(other579.foreign_tbl_name);
  catName = std::move(other579.catName);
  __isset = std::move(other579.__isset);
}
ForeignKeysRequest& ForeignKeysRequest::operator=(const ForeignKeysRequest& other580) {
  parent_db_name = other580.parent_db_name;
  parent_tbl_name = other580.parent_tbl_name;
  foreign_db_name = other580.foreign_db_name;
  foreign_tbl_name = other580.foreign_tbl_name;
  catName = other580.catName;
  __isset = other580.__isset;
  return *this;
}
ForeignKeysRequest& ForeignKeysRequest::operator=(ForeignKeysRequest&& other581) {
  parent_db_name = std::move(other581.parent_db_name);
  parent_tbl_name = std::move(other581.parent_tbl_name);
  foreign_db_name = std::move(other581.foreign_db_name);
  foreign_tbl_name = std::move(other581.foreign_tbl_name);
  catName = std::move(other581.catName);
  __isset = std::move(other581.__isset);
  return *this;
}
void ForeignKeysRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ForeignKeysRequest(";
  out << "parent_db_name=" << to_string(parent_db_name);
  out << ", " << "parent_tbl_name=" << to_string(parent_tbl_name);
  out << ", " << "foreign_db_name=" << to_string(foreign_db_name);
  out << ", " << "foreign_tbl_name=" << to_string(foreign_tbl_name);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


ForeignKeysResponse::~ForeignKeysResponse() throw() {
}


void ForeignKeysResponse::__set_foreignKeys(const std::vector<SQLForeignKey> & val) {
  this->foreignKeys = val;
}
std::ostream& operator<<(std::ostream& out, const ForeignKeysResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ForeignKeysResponse &a, ForeignKeysResponse &b) {
  using ::std::swap;
  swap(a.foreignKeys, b.foreignKeys);
}

ForeignKeysResponse::ForeignKeysResponse(const ForeignKeysResponse& other588) {
  foreignKeys = other588.foreignKeys;
}
ForeignKeysResponse::ForeignKeysResponse( ForeignKeysResponse&& other589) {
  foreignKeys = std::move(other589.foreignKeys);
}
ForeignKeysResponse& ForeignKeysResponse::operator=(const ForeignKeysResponse& other590) {
  foreignKeys = other590.foreignKeys;
  return *this;
}
ForeignKeysResponse& ForeignKeysResponse::operator=(ForeignKeysResponse&& other591) {
  foreignKeys = std::move(other591.foreignKeys);
  return *this;
}
void ForeignKeysResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ForeignKeysResponse(";
  out << "foreignKeys=" << to_string(foreignKeys);
  out << ")";
}


UniqueConstraintsRequest::~UniqueConstraintsRequest() throw() {
}


void UniqueConstraintsRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void UniqueConstraintsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void UniqueConstraintsRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}
std::ostream& operator<<(std::ostream& out, const UniqueConstraintsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(UniqueConstraintsRequest &a, UniqueConstraintsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
}

UniqueConstraintsRequest::UniqueConstraintsRequest(const UniqueConstraintsRequest& other592) {
  catName = other592.catName;
  db_name = other592.db_name;
  tbl_name = other592.tbl_name;
}
UniqueConstraintsRequest::UniqueConstraintsRequest( UniqueConstraintsRequest&& other593) {
  catName = std::move(other593.catName);
  db_name = std::move(other593.db_name);
  tbl_name = std::move(other593.tbl_name);
}
UniqueConstraintsRequest& UniqueConstraintsRequest::operator=(const UniqueConstraintsRequest& other594) {
  catName = other594.catName;
  db_name = other594.db_name;
  tbl_name = other594.tbl_name;
  return *this;
}
UniqueConstraintsRequest& UniqueConstraintsRequest::operator=(UniqueConstraintsRequest&& other595) {
  catName = std::move(other595.catName);
  db_name = std::move(other595.db_name);
  tbl_name = std::move(other595.tbl_name);
  return *this;
}
void UniqueConstraintsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UniqueConstraintsRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ")";
}


UniqueConstraintsResponse::~UniqueConstraintsResponse() throw() {
}


void UniqueConstraintsResponse::__set_uniqueConstraints(const std::vector<SQLUniqueConstraint> & val) {
  this->uniqueConstraints = val;
}
std::ostream& operator<<(std::ostream& out, const UniqueConstraintsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(UniqueConstraintsResponse &a, UniqueConstraintsResponse &b) {
  using ::std::swap;
  swap(a.uniqueConstraints, b.uniqueConstraints);
}

UniqueConstraintsResponse::UniqueConstraintsResponse(const UniqueConstraintsResponse& other602) {
  uniqueConstraints = other602.uniqueConstraints;
}
UniqueConstraintsResponse::UniqueConstraintsResponse( UniqueConstraintsResponse&& other603) {
  uniqueConstraints = std::move(other603.uniqueConstraints);
}
UniqueConstraintsResponse& UniqueConstraintsResponse::operator=(const UniqueConstraintsResponse& other604) {
  uniqueConstraints = other604.uniqueConstraints;
  return *this;
}
UniqueConstraintsResponse& UniqueConstraintsResponse::operator=(UniqueConstraintsResponse&& other605) {
  uniqueConstraints = std::move(other605.uniqueConstraints);
  return *this;
}
void UniqueConstraintsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UniqueConstraintsResponse(";
  out << "uniqueConstraints=" << to_string(uniqueConstraints);
  out << ")";
}


NotNullConstraintsRequest::~NotNullConstraintsRequest() throw() {
}


void NotNullConstraintsRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void NotNullConstraintsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void NotNullConstraintsRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}
std::ostream& operator<<(std::ostream& out, const NotNullConstraintsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NotNullConstraintsRequest &a, NotNullConstraintsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
}

NotNullConstraintsRequest::NotNullConstraintsRequest(const NotNullConstraintsRequest& other606) {
  catName = other606.catName;
  db_name = other606.db_name;
  tbl_name = other606.tbl_name;
}
NotNullConstraintsRequest::NotNullConstraintsRequest( NotNullConstraintsRequest&& other607) {
  catName = std::move(other607.catName);
  db_name = std::move(other607.db_name);
  tbl_name = std::move(other607.tbl_name);
}
NotNullConstraintsRequest& NotNullConstraintsRequest::operator=(const NotNullConstraintsRequest& other608) {
  catName = other608.catName;
  db_name = other608.db_name;
  tbl_name = other608.tbl_name;
  return *this;
}
NotNullConstraintsRequest& NotNullConstraintsRequest::operator=(NotNullConstraintsRequest&& other609) {
  catName = std::move(other609.catName);
  db_name = std::move(other609.db_name);
  tbl_name = std::move(other609.tbl_name);
  return *this;
}
void NotNullConstraintsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotNullConstraintsRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ")";
}


NotNullConstraintsResponse::~NotNullConstraintsResponse() throw() {
}


void NotNullConstraintsResponse::__set_notNullConstraints(const std::vector<SQLNotNullConstraint> & val) {
  this->notNullConstraints = val;
}
std::ostream& operator<<(std::ostream& out, const NotNullConstraintsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NotNullConstraintsResponse &a, NotNullConstraintsResponse &b) {
  using ::std::swap;
  swap(a.notNullConstraints, b.notNullConstraints);
}

NotNullConstraintsResponse::NotNullConstraintsResponse(const NotNullConstraintsResponse& other616) {
  notNullConstraints = other616.notNullConstraints;
}
NotNullConstraintsResponse::NotNullConstraintsResponse( NotNullConstraintsResponse&& other617) {
  notNullConstraints = std::move(other617.notNullConstraints);
}
NotNullConstraintsResponse& NotNullConstraintsResponse::operator=(const NotNullConstraintsResponse& other618) {
  notNullConstraints = other618.notNullConstraints;
  return *this;
}
NotNullConstraintsResponse& NotNullConstraintsResponse::operator=(NotNullConstraintsResponse&& other619) {
  notNullConstraints = std::move(other619.notNullConstraints);
  return *this;
}
void NotNullConstraintsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotNullConstraintsResponse(";
  out << "notNullConstraints=" << to_string(notNullConstraints);
  out << ")";
}


DefaultConstraintsRequest::~DefaultConstraintsRequest() throw() {
}


void DefaultConstraintsRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void DefaultConstraintsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void DefaultConstraintsRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}
std::ostream& operator<<(std::ostream& out, const DefaultConstraintsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DefaultConstraintsRequest &a, DefaultConstraintsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
}

DefaultConstraintsRequest::DefaultConstraintsRequest(const DefaultConstraintsRequest& other620) {
  catName = other620.catName;
  db_name = other620.db_name;
  tbl_name = other620.tbl_name;
}
DefaultConstraintsRequest::DefaultConstraintsRequest( DefaultConstraintsRequest&& other621) {
  catName = std::move(other621.catName);
  db_name = std::move(other621.db_name);
  tbl_name = std::move(other621.tbl_name);
}
DefaultConstraintsRequest& DefaultConstraintsRequest::operator=(const DefaultConstraintsRequest& other622) {
  catName = other622.catName;
  db_name = other622.db_name;
  tbl_name = other622.tbl_name;
  return *this;
}
DefaultConstraintsRequest& DefaultConstraintsRequest::operator=(DefaultConstraintsRequest&& other623) {
  catName = std::move(other623.catName);
  db_name = std::move(other623.db_name);
  tbl_name = std::move(other623.tbl_name);
  return *this;
}
void DefaultConstraintsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DefaultConstraintsRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ")";
}


DefaultConstraintsResponse::~DefaultConstraintsResponse() throw() {
}


void DefaultConstraintsResponse::__set_defaultConstraints(const std::vector<SQLDefaultConstraint> & val) {
  this->defaultConstraints = val;
}
std::ostream& operator<<(std::ostream& out, const DefaultConstraintsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DefaultConstraintsResponse &a, DefaultConstraintsResponse &b) {
  using ::std::swap;
  swap(a.defaultConstraints, b.defaultConstraints);
}

DefaultConstraintsResponse::DefaultConstraintsResponse(const DefaultConstraintsResponse& other630) {
  defaultConstraints = other630.defaultConstraints;
}
DefaultConstraintsResponse::DefaultConstraintsResponse( DefaultConstraintsResponse&& other631) {
  defaultConstraints = std::move(other631.defaultConstraints);
}
DefaultConstraintsResponse& DefaultConstraintsResponse::operator=(const DefaultConstraintsResponse& other632) {
  defaultConstraints = other632.defaultConstraints;
  return *this;
}
DefaultConstraintsResponse& DefaultConstraintsResponse::operator=(DefaultConstraintsResponse&& other633) {
  defaultConstraints = std::move(other633.defaultConstraints);
  return *this;
}
void DefaultConstraintsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DefaultConstraintsResponse(";
  out << "defaultConstraints=" << to_string(defaultConstraints);
  out << ")";
}


CheckConstraintsRequest::~CheckConstraintsRequest() throw() {
}


void CheckConstraintsRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void CheckConstraintsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void CheckConstraintsRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}
std::ostream& operator<<(std::ostream& out, const CheckConstraintsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CheckConstraintsRequest &a, CheckConstraintsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
}

CheckConstraintsRequest::CheckConstraintsRequest(const CheckConstraintsRequest& other634) {
  catName = other634.catName;
  db_name = other634.db_name;
  tbl_name = other634.tbl_name;
}
CheckConstraintsRequest::CheckConstraintsRequest( CheckConstraintsRequest&& other635) {
  catName = std::move(other635.catName);
  db_name = std::move(other635.db_name);
  tbl_name = std::move(other635.tbl_name);
}
CheckConstraintsRequest& CheckConstraintsRequest::operator=(const CheckConstraintsRequest& other636) {
  catName = other636.catName;
  db_name = other636.db_name;
  tbl_name = other636.tbl_name;
  return *this;
}
CheckConstraintsRequest& CheckConstraintsRequest::operator=(CheckConstraintsRequest&& other637) {
  catName = std::move(other637.catName);
  db_name = std::move(other637.db_name);
  tbl_name = std::move(other637.tbl_name);
  return *this;
}
void CheckConstraintsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckConstraintsRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ")";
}


CheckConstraintsResponse::~CheckConstraintsResponse() throw() {
}


void CheckConstraintsResponse::__set_checkConstraints(const std::vector<SQLCheckConstraint> & val) {
  this->checkConstraints = val;
}
std::ostream& operator<<(std::ostream& out, const CheckConstraintsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CheckConstraintsResponse &a, CheckConstraintsResponse &b) {
  using ::std::swap;
  swap(a.checkConstraints, b.checkConstraints);
}

CheckConstraintsResponse::CheckConstraintsResponse(const CheckConstraintsResponse& other644) {
  checkConstraints = other644.checkConstraints;
}
CheckConstraintsResponse::CheckConstraintsResponse( CheckConstraintsResponse&& other645) {
  checkConstraints = std::move(other645.checkConstraints);
}
CheckConstraintsResponse& CheckConstraintsResponse::operator=(const CheckConstraintsResponse& other646) {
  checkConstraints = other646.checkConstraints;
  return *this;
}
CheckConstraintsResponse& CheckConstraintsResponse::operator=(CheckConstraintsResponse&& other647) {
  checkConstraints = std::move(other647.checkConstraints);
  return *this;
}
void CheckConstraintsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckConstraintsResponse(";
  out << "checkConstraints=" << to_string(checkConstraints);
  out << ")";
}


DropConstraintRequest::~DropConstraintRequest() throw() {
}


void DropConstraintRequest::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void DropConstraintRequest::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void DropConstraintRequest::__set_constraintname(const std::string& val) {
  this->constraintname = val;
}

void DropConstraintRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}
std::ostream& operator<<(std::ostream& out, const DropConstraintRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DropConstraintRequest &a, DropConstraintRequest &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.constraintname, b.constraintname);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

DropConstraintRequest::DropConstraintRequest(const DropConstraintRequest& other648) {
  dbname = other648.dbname;
  tablename = other648.tablename;
  constraintname = other648.constraintname;
  catName = other648.catName;
  __isset = other648.__isset;
}
DropConstraintRequest::DropConstraintRequest( DropConstraintRequest&& other649) {
  dbname = std::move(other649.dbname);
  tablename = std::move(other649.tablename);
  constraintname = std::move(other649.constraintname);
  catName = std::move(other649.catName);
  __isset = std::move(other649.__isset);
}
DropConstraintRequest& DropConstraintRequest::operator=(const DropConstraintRequest& other650) {
  dbname = other650.dbname;
  tablename = other650.tablename;
  constraintname = other650.constraintname;
  catName = other650.catName;
  __isset = other650.__isset;
  return *this;
}
DropConstraintRequest& DropConstraintRequest::operator=(DropConstraintRequest&& other651) {
  dbname = std::move(other651.dbname);
  tablename = std::move(other651.tablename);
  constraintname = std::move(other651.constraintname);
  catName = std::move(other651.catName);
  __isset = std::move(other651.__isset);
  return *this;
}
void DropConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropConstraintRequest(";
  out << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "constraintname=" << to_string(constraintname);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


AddPrimaryKeyRequest::~AddPrimaryKeyRequest() throw() {
}


void AddPrimaryKeyRequest::__set_primaryKeyCols(const std::vector<SQLPrimaryKey> & val) {
  this->primaryKeyCols = val;
}
std::ostream& operator<<(std::ostream& out, const AddPrimaryKeyRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AddPrimaryKeyRequest &a, AddPrimaryKeyRequest &b) {
  using ::std::swap;
  swap(a.primaryKeyCols, b.primaryKeyCols);
}

AddPrimaryKeyRequest::AddPrimaryKeyRequest(const AddPrimaryKeyRequest& other658) {
  primaryKeyCols = other658.primaryKeyCols;
}
AddPrimaryKeyRequest::AddPrimaryKeyRequest( AddPrimaryKeyRequest&& other659) {
  primaryKeyCols = std::move(other659.primaryKeyCols);
}
AddPrimaryKeyRequest& AddPrimaryKeyRequest::operator=(const AddPrimaryKeyRequest& other660) {
  primaryKeyCols = other660.primaryKeyCols;
  return *this;
}
AddPrimaryKeyRequest& AddPrimaryKeyRequest::operator=(AddPrimaryKeyRequest&& other661) {
  primaryKeyCols = std::move(other661.primaryKeyCols);
  return *this;
}
void AddPrimaryKeyRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddPrimaryKeyRequest(";
  out << "primaryKeyCols=" << to_string(primaryKeyCols);
  out << ")";
}


AddForeignKeyRequest::~AddForeignKeyRequest() throw() {
}


void AddForeignKeyRequest::__set_foreignKeyCols(const std::vector<SQLForeignKey> & val) {
  this->foreignKeyCols = val;
}
std::ostream& operator<<(std::ostream& out, const AddForeignKeyRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AddForeignKeyRequest &a, AddForeignKeyRequest &b) {
  using ::std::swap;
  swap(a.foreignKeyCols, b.foreignKeyCols);
}

AddForeignKeyRequest::AddForeignKeyRequest(const AddForeignKeyRequest& other668) {
  foreignKeyCols = other668.foreignKeyCols;
}
AddForeignKeyRequest::AddForeignKeyRequest( AddForeignKeyRequest&& other669) {
  foreignKeyCols = std::move(other669.foreignKeyCols);
}
AddForeignKeyRequest& AddForeignKeyRequest::operator=(const AddForeignKeyRequest& other670) {
  foreignKeyCols = other670.foreignKeyCols;
  return *this;
}
AddForeignKeyRequest& AddForeignKeyRequest::operator=(AddForeignKeyRequest&& other671) {
  foreignKeyCols = std::move(other671.foreignKeyCols);
  return *this;
}
void AddForeignKeyRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddForeignKeyRequest(";
  out << "foreignKeyCols=" << to_string(foreignKeyCols);
  out << ")";
}


AddUniqueConstraintRequest::~AddUniqueConstraintRequest() throw() {
}


void AddUniqueConstraintRequest::__set_uniqueConstraintCols(const std::vector<SQLUniqueConstraint> & val) {
  this->uniqueConstraintCols = val;
}
std::ostream& operator<<(std::ostream& out, const AddUniqueConstraintRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AddUniqueConstraintRequest &a, AddUniqueConstraintRequest &b) {
  using ::std::swap;
  swap(a.uniqueConstraintCols, b.uniqueConstraintCols);
}

AddUniqueConstraintRequest::AddUniqueConstraintRequest(const AddUniqueConstraintRequest& other678) {
  uniqueConstraintCols = other678.uniqueConstraintCols;
}
AddUniqueConstraintRequest::AddUniqueConstraintRequest( AddUniqueConstraintRequest&& other679) {
  uniqueConstraintCols = std::move(other679.uniqueConstraintCols);
}
AddUniqueConstraintRequest& AddUniqueConstraintRequest::operator=(const AddUniqueConstraintRequest& other680) {
  uniqueConstraintCols = other680.uniqueConstraintCols;
  return *this;
}
AddUniqueConstraintRequest& AddUniqueConstraintRequest::operator=(AddUniqueConstraintRequest&& other681) {
  uniqueConstraintCols = std::move(other681.uniqueConstraintCols);
  return *this;
}
void AddUniqueConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddUniqueConstraintRequest(";
  out << "uniqueConstraintCols=" << to_string(uniqueConstraintCols);
  out << ")";
}


AddNotNullConstraintRequest::~AddNotNullConstraintRequest() throw() {
}


void AddNotNullConstraintRequest::__set_notNullConstraintCols(const std::vector<SQLNotNullConstraint> & val) {
  this->notNullConstraintCols = val;
}
std::ostream& operator<<(std::ostream& out, const AddNotNullConstraintRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AddNotNullConstraintRequest &a, AddNotNullConstraintRequest &b) {
  using ::std::swap;
  swap(a.notNullConstraintCols, b.notNullConstraintCols);
}

AddNotNullConstraintRequest::AddNotNullConstraintRequest(const AddNotNullConstraintRequest& other688) {
  notNullConstraintCols = other688.notNullConstraintCols;
}
AddNotNullConstraintRequest::AddNotNullConstraintRequest( AddNotNullConstraintRequest&& other689) {
  notNullConstraintCols = std::move(other689.notNullConstraintCols);
}
AddNotNullConstraintRequest& AddNotNullConstraintRequest::operator=(const AddNotNullConstraintRequest& other690) {
  notNullConstraintCols = other690.notNullConstraintCols;
  return *this;
}
AddNotNullConstraintRequest& AddNotNullConstraintRequest::operator=(AddNotNullConstraintRequest&& other691) {
  notNullConstraintCols = std::move(other691.notNullConstraintCols);
  return *this;
}
void AddNotNullConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddNotNullConstraintRequest(";
  out << "notNullConstraintCols=" << to_string(notNullConstraintCols);
  out << ")";
}


AddDefaultConstraintRequest::~AddDefaultConstraintRequest() throw() {
}


void AddDefaultConstraintRequest::__set_defaultConstraintCols(const std::vector<SQLDefaultConstraint> & val) {
  this->defaultConstraintCols = val;
}
std::ostream& operator<<(std::ostream& out, const AddDefaultConstraintRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AddDefaultConstraintRequest &a, AddDefaultConstraintRequest &b) {
  using ::std::swap;
  swap(a.defaultConstraintCols, b.defaultConstraintCols);
}

AddDefaultConstraintRequest::AddDefaultConstraintRequest(const AddDefaultConstraintRequest& other698) {
  defaultConstraintCols = other698.defaultConstraintCols;
}
AddDefaultConstraintRequest::AddDefaultConstraintRequest( AddDefaultConstraintRequest&& other699) {
  defaultConstraintCols = std::move(other699.defaultConstraintCols);
}
AddDefaultConstraintRequest& AddDefaultConstraintRequest::operator=(const AddDefaultConstraintRequest& other700) {
  defaultConstraintCols = other700.defaultConstraintCols;
  return *this;
}
AddDefaultConstraintRequest& AddDefaultConstraintRequest::operator=(AddDefaultConstraintRequest&& other701) {
  defaultConstraintCols = std::move(other701.defaultConstraintCols);
  return *this;
}
void AddDefaultConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddDefaultConstraintRequest(";
  out << "defaultConstraintCols=" << to_string(defaultConstraintCols);
  out << ")";
}


AddCheckConstraintRequest::~AddCheckConstraintRequest() throw() {
}


void AddCheckConstraintRequest::__set_checkConstraintCols(const std::vector<SQLCheckConstraint> & val) {
  this->checkConstraintCols = val;
}
std::ostream& operator<<(std::ostream& out, const AddCheckConstraintRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AddCheckConstraintRequest &a, AddCheckConstraintRequest &b) {
  using ::std::swap;
  swap(a.checkConstraintCols, b.checkConstraintCols);
}

AddCheckConstraintRequest::AddCheckConstraintRequest(const AddCheckConstraintRequest& other708) {
  checkConstraintCols = other708.checkConstraintCols;
}
AddCheckConstraintRequest::AddCheckConstraintRequest( AddCheckConstraintRequest&& other709) {
  checkConstraintCols = std::move(other709.checkConstraintCols);
}
AddCheckConstraintRequest& AddCheckConstraintRequest::operator=(const AddCheckConstraintRequest& other710) {
  checkConstraintCols = other710.checkConstraintCols;
  return *this;
}
AddCheckConstraintRequest& AddCheckConstraintRequest::operator=(AddCheckConstraintRequest&& other711) {
  checkConstraintCols = std::move(other711.checkConstraintCols);
  return *this;
}
void AddCheckConstraintRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddCheckConstraintRequest(";
  out << "checkConstraintCols=" << to_string(checkConstraintCols);
  out << ")";
}


PartitionsByExprResult::~PartitionsByExprResult() throw() {
}


void PartitionsByExprResult::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
}

void PartitionsByExprResult::__set_hasUnknownPartitions(const bool val) {
  this->hasUnknownPartitions = val;
}
std::ostream& operator<<(std::ostream& out, const PartitionsByExprResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionsByExprResult &a, PartitionsByExprResult &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.hasUnknownPartitions, b.hasUnknownPartitions);
}

PartitionsByExprResult::PartitionsByExprResult(const PartitionsByExprResult& other718) {
  partitions = other718.partitions;
  hasUnknownPartitions = other718.hasUnknownPartitions;
}
PartitionsByExprResult::PartitionsByExprResult( PartitionsByExprResult&& other719) {
  partitions = std::move(other719.partitions);
  hasUnknownPartitions = std::move(other719.hasUnknownPartitions);
}
PartitionsByExprResult& PartitionsByExprResult::operator=(const PartitionsByExprResult& other720) {
  partitions = other720.partitions;
  hasUnknownPartitions = other720.hasUnknownPartitions;
  return *this;
}
PartitionsByExprResult& PartitionsByExprResult::operator=(PartitionsByExprResult&& other721) {
  partitions = std::move(other721.partitions);
  hasUnknownPartitions = std::move(other721.hasUnknownPartitions);
  return *this;
}
void PartitionsByExprResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsByExprResult(";
  out << "partitions=" << to_string(partitions);
  out << ", " << "hasUnknownPartitions=" << to_string(hasUnknownPartitions);
  out << ")";
}


PartitionsByExprRequest::~PartitionsByExprRequest() throw() {
}


void PartitionsByExprRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionsByExprRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void PartitionsByExprRequest::__set_expr(const std::string& val) {
  this->expr = val;
}

void PartitionsByExprRequest::__set_defaultPartitionName(const std::string& val) {
  this->defaultPartitionName = val;
__isset.defaultPartitionName = true;
}

void PartitionsByExprRequest::__set_maxParts(const int16_t val) {
  this->maxParts = val;
__isset.maxParts = true;
}

void PartitionsByExprRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void PartitionsByExprRequest::__set_order(const std::string& val) {
  this->order = val;
__isset.order = true;
}

void PartitionsByExprRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void PartitionsByExprRequest::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}
std::ostream& operator<<(std::ostream& out, const PartitionsByExprRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionsByExprRequest &a, PartitionsByExprRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.expr, b.expr);
  swap(a.defaultPartitionName, b.defaultPartitionName);
  swap(a.maxParts, b.maxParts);
  swap(a.catName, b.catName);
  swap(a.order, b.order);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

PartitionsByExprRequest::PartitionsByExprRequest(const PartitionsByExprRequest& other722) {
  dbName = other722.dbName;
  tblName = other722.tblName;
  expr = other722.expr;
  defaultPartitionName = other722.defaultPartitionName;
  maxParts = other722.maxParts;
  catName = other722.catName;
  order = other722.order;
  validWriteIdList = other722.validWriteIdList;
  id = other722.id;
  __isset = other722.__isset;
}
PartitionsByExprRequest::PartitionsByExprRequest( PartitionsByExprRequest&& other723) {
  dbName = std::move(other723.dbName);
  tblName = std::move(other723.tblName);
  expr = std::move(other723.expr);
  defaultPartitionName = std::move(other723.defaultPartitionName);
  maxParts = std::move(other723.maxParts);
  catName = std::move(other723.catName);
  order = std::move(other723.order);
  validWriteIdList = std::move(other723.validWriteIdList);
  id = std::move(other723.id);
  __isset = std::move(other723.__isset);
}
PartitionsByExprRequest& PartitionsByExprRequest::operator=(const PartitionsByExprRequest& other724) {
  dbName = other724.dbName;
  tblName = other724.tblName;
  expr = other724.expr;
  defaultPartitionName = other724.defaultPartitionName;
  maxParts = other724.maxParts;
  catName = other724.catName;
  order = other724.order;
  validWriteIdList = other724.validWriteIdList;
  id = other724.id;
  __isset = other724.__isset;
  return *this;
}
PartitionsByExprRequest& PartitionsByExprRequest::operator=(PartitionsByExprRequest&& other725) {
  dbName = std::move(other725.dbName);
  tblName = std::move(other725.tblName);
  expr = std::move(other725.expr);
  defaultPartitionName = std::move(other725.defaultPartitionName);
  maxParts = std::move(other725.maxParts);
  catName = std::move(other725.catName);
  order = std::move(other725.order);
  validWriteIdList = std::move(other725.validWriteIdList);
  id = std::move(other725.id);
  __isset = std::move(other725.__isset);
  return *this;
}
void PartitionsByExprRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsByExprRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "expr=" << to_string(expr);
  out << ", " << "defaultPartitionName="; (__isset.defaultPartitionName ? (out << to_string(defaultPartitionName)) : (out << "<null>"));
  out << ", " << "maxParts="; (__isset.maxParts ? (out << to_string(maxParts)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "order="; (__isset.order ? (out << to_string(order)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ")";
}


TableStatsResult::~TableStatsResult() throw() {
}


void TableStatsResult::__set_tableStats(const std::vector<ColumnStatisticsObj> & val) {
  this->tableStats = val;
}

void TableStatsResult::__set_isStatsCompliant(const bool val) {
  this->isStatsCompliant = val;
__isset.isStatsCompliant = true;
}
std::ostream& operator<<(std::ostream& out, const TableStatsResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TableStatsResult &a, TableStatsResult &b) {
  using ::std::swap;
  swap(a.tableStats, b.tableStats);
  swap(a.isStatsCompliant, b.isStatsCompliant);
  swap(a.__isset, b.__isset);
}

TableStatsResult::TableStatsResult(const TableStatsResult& other732) {
  tableStats = other732.tableStats;
  isStatsCompliant = other732.isStatsCompliant;
  __isset = other732.__isset;
}
TableStatsResult::TableStatsResult( TableStatsResult&& other733) {
  tableStats = std::move(other733.tableStats);
  isStatsCompliant = std::move(other733.isStatsCompliant);
  __isset = std::move(other733.__isset);
}
TableStatsResult& TableStatsResult::operator=(const TableStatsResult& other734) {
  tableStats = other734.tableStats;
  isStatsCompliant = other734.isStatsCompliant;
  __isset = other734.__isset;
  return *this;
}
TableStatsResult& TableStatsResult::operator=(TableStatsResult&& other735) {
  tableStats = std::move(other735.tableStats);
  isStatsCompliant = std::move(other735.isStatsCompliant);
  __isset = std::move(other735.__isset);
  return *this;
}
void TableStatsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TableStatsResult(";
  out << "tableStats=" << to_string(tableStats);
  out << ", " << "isStatsCompliant="; (__isset.isStatsCompliant ? (out << to_string(isStatsCompliant)) : (out << "<null>"));
  out << ")";
}


PartitionsStatsResult::~PartitionsStatsResult() throw() {
}


void PartitionsStatsResult::__set_partStats(const std::map<std::string, std::vector<ColumnStatisticsObj> > & val) {
  this->partStats = val;
}

void PartitionsStatsResult::__set_isStatsCompliant(const bool val) {
  this->isStatsCompliant = val;
__isset.isStatsCompliant = true;
}
std::ostream& operator<<(std::ostream& out, const PartitionsStatsResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionsStatsResult &a, PartitionsStatsResult &b) {
  using ::std::swap;
  swap(a.partStats, b.partStats);
  swap(a.isStatsCompliant, b.isStatsCompliant);
  swap(a.__isset, b.__isset);
}

PartitionsStatsResult::PartitionsStatsResult(const PartitionsStatsResult& other750) {
  partStats = other750.partStats;
  isStatsCompliant = other750.isStatsCompliant;
  __isset = other750.__isset;
}
PartitionsStatsResult::PartitionsStatsResult( PartitionsStatsResult&& other751) {
  partStats = std::move(other751.partStats);
  isStatsCompliant = std::move(other751.isStatsCompliant);
  __isset = std::move(other751.__isset);
}
PartitionsStatsResult& PartitionsStatsResult::operator=(const PartitionsStatsResult& other752) {
  partStats = other752.partStats;
  isStatsCompliant = other752.isStatsCompliant;
  __isset = other752.__isset;
  return *this;
}
PartitionsStatsResult& PartitionsStatsResult::operator=(PartitionsStatsResult&& other753) {
  partStats = std::move(other753.partStats);
  isStatsCompliant = std::move(other753.isStatsCompliant);
  __isset = std::move(other753.__isset);
  return *this;
}
void PartitionsStatsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsStatsResult(";
  out << "partStats=" << to_string(partStats);
  out << ", " << "isStatsCompliant="; (__isset.isStatsCompliant ? (out << to_string(isStatsCompliant)) : (out << "<null>"));
  out << ")";
}


TableStatsRequest::~TableStatsRequest() throw() {
}


void TableStatsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void TableStatsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void TableStatsRequest::__set_colNames(const std::vector<std::string> & val) {
  this->colNames = val;
}

void TableStatsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void TableStatsRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void TableStatsRequest::__set_engine(const std::string& val) {
  this->engine = val;
__isset.engine = true;
}

void TableStatsRequest::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}
std::ostream& operator<<(std::ostream& out, const TableStatsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TableStatsRequest &a, TableStatsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.colNames, b.colNames);
  swap(a.catName, b.catName);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.engine, b.engine);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

TableStatsRequest::TableStatsRequest(const TableStatsRequest& other760) {
  dbName = other760.dbName;
  tblName = other760.tblName;
  colNames = other760.colNames;
  catName = other760.catName;
  validWriteIdList = other760.validWriteIdList;
  engine = other760.engine;
  id = other760.id;
  __isset = other760.__isset;
}
TableStatsRequest::TableStatsRequest( TableStatsRequest&& other761) {
  dbName = std::move(other761.dbName);
  tblName = std::move(other761.tblName);
  colNames = std::move(other761.colNames);
  catName = std::move(other761.catName);
  validWriteIdList = std::move(other761.validWriteIdList);
  engine = std::move(other761.engine);
  id = std::move(other761.id);
  __isset = std::move(other761.__isset);
}
TableStatsRequest& TableStatsRequest::operator=(const TableStatsRequest& other762) {
  dbName = other762.dbName;
  tblName = other762.tblName;
  colNames = other762.colNames;
  catName = other762.catName;
  validWriteIdList = other762.validWriteIdList;
  engine = other762.engine;
  id = other762.id;
  __isset = other762.__isset;
  return *this;
}
TableStatsRequest& TableStatsRequest::operator=(TableStatsRequest&& other763) {
  dbName = std::move(other763.dbName);
  tblName = std::move(other763.tblName);
  colNames = std::move(other763.colNames);
  catName = std::move(other763.catName);
  validWriteIdList = std::move(other763.validWriteIdList);
  engine = std::move(other763.engine);
  id = std::move(other763.id);
  __isset = std::move(other763.__isset);
  return *this;
}
void TableStatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TableStatsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "colNames=" << to_string(colNames);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "engine="; (__isset.engine ? (out << to_string(engine)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ")";
}


PartitionsStatsRequest::~PartitionsStatsRequest() throw() {
}


void PartitionsStatsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionsStatsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void PartitionsStatsRequest::__set_colNames(const std::vector<std::string> & val) {
  this->colNames = val;
}

void PartitionsStatsRequest::__set_partNames(const std::vector<std::string> & val) {
  this->partNames = val;
}

void PartitionsStatsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void PartitionsStatsRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void PartitionsStatsRequest::__set_engine(const std::string& val) {
  this->engine = val;
__isset.engine = true;
}
std::ostream& operator<<(std::ostream& out, const PartitionsStatsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionsStatsRequest &a, PartitionsStatsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.colNames, b.colNames);
  swap(a.partNames, b.partNames);
  swap(a.catName, b.catName);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.engine, b.engine);
  swap(a.__isset, b.__isset);
}

PartitionsStatsRequest::PartitionsStatsRequest(const PartitionsStatsRequest& other776) {
  dbName = other776.dbName;
  tblName = other776.tblName;
  colNames = other776.colNames;
  partNames = other776.partNames;
  catName = other776.catName;
  validWriteIdList = other776.validWriteIdList;
  engine = other776.engine;
  __isset = other776.__isset;
}
PartitionsStatsRequest::PartitionsStatsRequest( PartitionsStatsRequest&& other777) {
  dbName = std::move(other777.dbName);
  tblName = std::move(other777.tblName);
  colNames = std::move(other777.colNames);
  partNames = std::move(other777.partNames);
  catName = std::move(other777.catName);
  validWriteIdList = std::move(other777.validWriteIdList);
  engine = std::move(other777.engine);
  __isset = std::move(other777.__isset);
}
PartitionsStatsRequest& PartitionsStatsRequest::operator=(const PartitionsStatsRequest& other778) {
  dbName = other778.dbName;
  tblName = other778.tblName;
  colNames = other778.colNames;
  partNames = other778.partNames;
  catName = other778.catName;
  validWriteIdList = other778.validWriteIdList;
  engine = other778.engine;
  __isset = other778.__isset;
  return *this;
}
PartitionsStatsRequest& PartitionsStatsRequest::operator=(PartitionsStatsRequest&& other779) {
  dbName = std::move(other779.dbName);
  tblName = std::move(other779.tblName);
  colNames = std::move(other779.colNames);
  partNames = std::move(other779.partNames);
  catName = std::move(other779.catName);
  validWriteIdList = std::move(other779.validWriteIdList);
  engine = std::move(other779.engine);
  __isset = std::move(other779.__isset);
  return *this;
}
void PartitionsStatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsStatsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "colNames=" << to_string(colNames);
  out << ", " << "partNames=" << to_string(partNames);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "engine="; (__isset.engine ? (out << to_string(engine)) : (out << "<null>"));
  out << ")";
}


AddPartitionsResult::~AddPartitionsResult() throw() {
}


void AddPartitionsResult::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
__isset.partitions = true;
}

void AddPartitionsResult::__set_isStatsCompliant(const bool val) {
  this->isStatsCompliant = val;
__isset.isStatsCompliant = true;
}
std::ostream& operator<<(std::ostream& out, const AddPartitionsResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AddPartitionsResult &a, AddPartitionsResult &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.isStatsCompliant, b.isStatsCompliant);
  swap(a.__isset, b.__isset);
}

AddPartitionsResult::AddPartitionsResult(const AddPartitionsResult& other786) {
  partitions = other786.partitions;
  isStatsCompliant = other786.isStatsCompliant;
  __isset = other786.__isset;
}
AddPartitionsResult::AddPartitionsResult( AddPartitionsResult&& other787) {
  partitions = std::move(other787.partitions);
  isStatsCompliant = std::move(other787.isStatsCompliant);
  __isset = std::move(other787.__isset);
}
AddPartitionsResult& AddPartitionsResult::operator=(const AddPartitionsResult& other788) {
  partitions = other788.partitions;
  isStatsCompliant = other788.isStatsCompliant;
  __isset = other788.__isset;
  return *this;
}
AddPartitionsResult& AddPartitionsResult::operator=(AddPartitionsResult&& other789) {
  partitions = std::move(other789.partitions);
  isStatsCompliant = std::move(other789.isStatsCompliant);
  __isset = std::move(other789.__isset);
  return *this;
}
void AddPartitionsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddPartitionsResult(";
  out << "partitions="; (__isset.partitions ? (out << to_string(partitions)) : (out << "<null>"));
  out << ", " << "isStatsCompliant="; (__isset.isStatsCompliant ? (out << to_string(isStatsCompliant)) : (out << "<null>"));
  out << ")";
}


AddPartitionsRequest::~AddPartitionsRequest() throw() {
}


void AddPartitionsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void AddPartitionsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void AddPartitionsRequest::__set_parts(const std::vector<Partition> & val) {
  this->parts = val;
}

void AddPartitionsRequest::__set_ifNotExists(const bool val) {
  this->ifNotExists = val;
}

void AddPartitionsRequest::__set_needResult(const bool val) {
  this->needResult = val;
__isset.needResult = true;
}

void AddPartitionsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void AddPartitionsRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}
std::ostream& operator<<(std::ostream& out, const AddPartitionsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AddPartitionsRequest &a, AddPartitionsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.parts, b.parts);
  swap(a.ifNotExists, b.ifNotExists);
  swap(a.needResult, b.needResult);
  swap(a.catName, b.catName);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.__isset, b.__isset);
}

AddPartitionsRequest::AddPartitionsRequest(const AddPartitionsRequest& other796) {
  dbName = other796.dbName;
  tblName = other796.tblName;
  parts = other796.parts;
  ifNotExists = other796.ifNotExists;
  needResult = other796.needResult;
  catName = other796.catName;
  validWriteIdList = other796.validWriteIdList;
  __isset = other796.__isset;
}
AddPartitionsRequest::AddPartitionsRequest( AddPartitionsRequest&& other797) {
  dbName = std::move(other797.dbName);
  tblName = std::move(other797.tblName);
  parts = std::move(other797.parts);
  ifNotExists = std::move(other797.ifNotExists);
  needResult = std::move(other797.needResult);
  catName = std::move(other797.catName);
  validWriteIdList = std::move(other797.validWriteIdList);
  __isset = std::move(other797.__isset);
}
AddPartitionsRequest& AddPartitionsRequest::operator=(const AddPartitionsRequest& other798) {
  dbName = other798.dbName;
  tblName = other798.tblName;
  parts = other798.parts;
  ifNotExists = other798.ifNotExists;
  needResult = other798.needResult;
  catName = other798.catName;
  validWriteIdList = other798.validWriteIdList;
  __isset = other798.__isset;
  return *this;
}
AddPartitionsRequest& AddPartitionsRequest::operator=(AddPartitionsRequest&& other799) {
  dbName = std::move(other799.dbName);
  tblName = std::move(other799.tblName);
  parts = std::move(other799.parts);
  ifNotExists = std::move(other799.ifNotExists);
  needResult = std::move(other799.needResult);
  catName = std::move(other799.catName);
  validWriteIdList = std::move(other799.validWriteIdList);
  __isset = std::move(other799.__isset);
  return *this;
}
void AddPartitionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddPartitionsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "parts=" << to_string(parts);
  out << ", " << "ifNotExists=" << to_string(ifNotExists);
  out << ", " << "needResult="; (__isset.needResult ? (out << to_string(needResult)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ")";
}


DropPartitionsResult::~DropPartitionsResult() throw() {
}


void DropPartitionsResult::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
__isset.partitions = true;
}
std::ostream& operator<<(std::ostream& out, const DropPartitionsResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DropPartitionsResult &a, DropPartitionsResult &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.__isset, b.__isset);
}

DropPartitionsResult::DropPartitionsResult(const DropPartitionsResult& other806) {
  partitions = other806.partitions;
  __isset = other806.__isset;
}
DropPartitionsResult::DropPartitionsResult( DropPartitionsResult&& other807) {
  partitions = std::move(other807.partitions);
  __isset = std::move(other807.__isset);
}
DropPartitionsResult& DropPartitionsResult::operator=(const DropPartitionsResult& other808) {
  partitions = other808.partitions;
  __isset = other808.__isset;
  return *this;
}
DropPartitionsResult& DropPartitionsResult::operator=(DropPartitionsResult&& other809) {
  partitions = std::move(other809.partitions);
  __isset = std::move(other809.__isset);
  return *this;
}
void DropPartitionsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropPartitionsResult(";
  out << "partitions="; (__isset.partitions ? (out << to_string(partitions)) : (out << "<null>"));
  out << ")";
}


DropPartitionsExpr::~DropPartitionsExpr() throw() {
}


void DropPartitionsExpr::__set_expr(const std::string& val) {
  this->expr = val;
}

void DropPartitionsExpr::__set_partArchiveLevel(const int32_t val) {
  this->partArchiveLevel = val;
__isset.partArchiveLevel = true;
}
std::ostream& operator<<(std::ostream& out, const DropPartitionsExpr& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DropPartitionsExpr &a, DropPartitionsExpr &b) {
  using ::std::swap;
  swap(a.expr, b.expr);
  swap(a.partArchiveLevel, b.partArchiveLevel);
  swap(a.__isset, b.__isset);
}

DropPartitionsExpr::DropPartitionsExpr(const DropPartitionsExpr& other810) {
  expr = other810.expr;
  partArchiveLevel = other810.partArchiveLevel;
  __isset = other810.__isset;
}
DropPartitionsExpr::DropPartitionsExpr( DropPartitionsExpr&& other811) {
  expr = std::move(other811.expr);
  partArchiveLevel = std::move(other811.partArchiveLevel);
  __isset = std::move(other811.__isset);
}
DropPartitionsExpr& DropPartitionsExpr::operator=(const DropPartitionsExpr& other812) {
  expr = other812.expr;
  partArchiveLevel = other812.partArchiveLevel;
  __isset = other812.__isset;
  return *this;
}
DropPartitionsExpr& DropPartitionsExpr::operator=(DropPartitionsExpr&& other813) {
  expr = std::move(other813.expr);
  partArchiveLevel = std::move(other813.partArchiveLevel);
  __isset = std::move(other813.__isset);
  return *this;
}
void DropPartitionsExpr::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropPartitionsExpr(";
  out << "expr=" << to_string(expr);
  out << ", " << "partArchiveLevel="; (__isset.partArchiveLevel ? (out << to_string(partArchiveLevel)) : (out << "<null>"));
  out << ")";
}


RequestPartsSpec::~RequestPartsSpec() throw() {
}


void RequestPartsSpec::__set_names(const std::vector<std::string> & val) {
  this->names = val;
__isset.names = true;
}

void RequestPartsSpec::__set_exprs(const std::vector<DropPartitionsExpr> & val) {
  this->exprs = val;
__isset.exprs = true;
}
std::ostream& operator<<(std::ostream& out, const RequestPartsSpec& obj)
{
  obj.printTo(out);
  return out;
}


void swap(RequestPartsSpec &a, RequestPartsSpec &b) {
  using ::std::swap;
  swap(a.names, b.names);
  swap(a.exprs, b.exprs);
  swap(a.__isset, b.__isset);
}

RequestPartsSpec::RequestPartsSpec(const RequestPartsSpec& other826) {
  names = other826.names;
  exprs = other826.exprs;
  __isset = other826.__isset;
}
RequestPartsSpec::RequestPartsSpec( RequestPartsSpec&& other827) {
  names = std::move(other827.names);
  exprs = std::move(other827.exprs);
  __isset = std::move(other827.__isset);
}
RequestPartsSpec& RequestPartsSpec::operator=(const RequestPartsSpec& other828) {
  names = other828.names;
  exprs = other828.exprs;
  __isset = other828.__isset;
  return *this;
}
RequestPartsSpec& RequestPartsSpec::operator=(RequestPartsSpec&& other829) {
  names = std::move(other829.names);
  exprs = std::move(other829.exprs);
  __isset = std::move(other829.__isset);
  return *this;
}
void RequestPartsSpec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RequestPartsSpec(";
  out << "names="; (__isset.names ? (out << to_string(names)) : (out << "<null>"));
  out << ", " << "exprs="; (__isset.exprs ? (out << to_string(exprs)) : (out << "<null>"));
  out << ")";
}


DropPartitionsRequest::~DropPartitionsRequest() throw() {
}


void DropPartitionsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void DropPartitionsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void DropPartitionsRequest::__set_parts(const RequestPartsSpec& val) {
  this->parts = val;
}

void DropPartitionsRequest::__set_deleteData(const bool val) {
  this->deleteData = val;
__isset.deleteData = true;
}

void DropPartitionsRequest::__set_ifExists(const bool val) {
  this->ifExists = val;
__isset.ifExists = true;
}

void DropPartitionsRequest::__set_ignoreProtection(const bool val) {
  this->ignoreProtection = val;
__isset.ignoreProtection = true;
}

void DropPartitionsRequest::__set_environmentContext(const EnvironmentContext& val) {
  this->environmentContext = val;
__isset.environmentContext = true;
}

void DropPartitionsRequest::__set_needResult(const bool val) {
  this->needResult = val;
__isset.needResult = true;
}

void DropPartitionsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}
std::ostream& operator<<(std::ostream& out, const DropPartitionsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DropPartitionsRequest &a, DropPartitionsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.parts, b.parts);
  swap(a.deleteData, b.deleteData);
  swap(a.ifExists, b.ifExists);
  swap(a.ignoreProtection, b.ignoreProtection);
  swap(a.environmentContext, b.environmentContext);
  swap(a.needResult, b.needResult);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

DropPartitionsRequest::DropPartitionsRequest(const DropPartitionsRequest& other830) {
  dbName = other830.dbName;
  tblName = other830.tblName;
  parts = other830.parts;
  deleteData = other830.deleteData;
  ifExists = other830.ifExists;
  ignoreProtection = other830.ignoreProtection;
  environmentContext = other830.environmentContext;
  needResult = other830.needResult;
  catName = other830.catName;
  __isset = other830.__isset;
}
DropPartitionsRequest::DropPartitionsRequest( DropPartitionsRequest&& other831) {
  dbName = std::move(other831.dbName);
  tblName = std::move(other831.tblName);
  parts = std::move(other831.parts);
  deleteData = std::move(other831.deleteData);
  ifExists = std::move(other831.ifExists);
  ignoreProtection = std::move(other831.ignoreProtection);
  environmentContext = std::move(other831.environmentContext);
  needResult = std::move(other831.needResult);
  catName = std::move(other831.catName);
  __isset = std::move(other831.__isset);
}
DropPartitionsRequest& DropPartitionsRequest::operator=(const DropPartitionsRequest& other832) {
  dbName = other832.dbName;
  tblName = other832.tblName;
  parts = other832.parts;
  deleteData = other832.deleteData;
  ifExists = other832.ifExists;
  ignoreProtection = other832.ignoreProtection;
  environmentContext = other832.environmentContext;
  needResult = other832.needResult;
  catName = other832.catName;
  __isset = other832.__isset;
  return *this;
}
DropPartitionsRequest& DropPartitionsRequest::operator=(DropPartitionsRequest&& other833) {
  dbName = std::move(other833.dbName);
  tblName = std::move(other833.tblName);
  parts = std::move(other833.parts);
  deleteData = std::move(other833.deleteData);
  ifExists = std::move(other833.ifExists);
  ignoreProtection = std::move(other833.ignoreProtection);
  environmentContext = std::move(other833.environmentContext);
  needResult = std::move(other833.needResult);
  catName = std::move(other833.catName);
  __isset = std::move(other833.__isset);
  return *this;
}
void DropPartitionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropPartitionsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "parts=" << to_string(parts);
  out << ", " << "deleteData="; (__isset.deleteData ? (out << to_string(deleteData)) : (out << "<null>"));
  out << ", " << "ifExists="; (__isset.ifExists ? (out << to_string(ifExists)) : (out << "<null>"));
  out << ", " << "ignoreProtection="; (__isset.ignoreProtection ? (out << to_string(ignoreProtection)) : (out << "<null>"));
  out << ", " << "environmentContext="; (__isset.environmentContext ? (out << to_string(environmentContext)) : (out << "<null>"));
  out << ", " << "needResult="; (__isset.needResult ? (out << to_string(needResult)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


PartitionValuesRequest::~PartitionValuesRequest() throw() {
}


void PartitionValuesRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionValuesRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void PartitionValuesRequest::__set_partitionKeys(const std::vector<FieldSchema> & val) {
  this->partitionKeys = val;
}

void PartitionValuesRequest::__set_applyDistinct(const bool val) {
  this->applyDistinct = val;
__isset.applyDistinct = true;
}

void PartitionValuesRequest::__set_filter(const std::string& val) {
  this->filter = val;
__isset.filter = true;
}

void PartitionValuesRequest::__set_partitionOrder(const std::vector<FieldSchema> & val) {
  this->partitionOrder = val;
__isset.partitionOrder = true;
}

void PartitionValuesRequest::__set_ascending(const bool val) {
  this->ascending = val;
__isset.ascending = true;
}

void PartitionValuesRequest::__set_maxParts(const int64_t val) {
  this->maxParts = val;
__isset.maxParts = true;
}

void PartitionValuesRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void PartitionValuesRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}
std::ostream& operator<<(std::ostream& out, const PartitionValuesRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionValuesRequest &a, PartitionValuesRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.partitionKeys, b.partitionKeys);
  swap(a.applyDistinct, b.applyDistinct);
  swap(a.filter, b.filter);
  swap(a.partitionOrder, b.partitionOrder);
  swap(a.ascending, b.ascending);
  swap(a.maxParts, b.maxParts);
  swap(a.catName, b.catName);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.__isset, b.__isset);
}

PartitionValuesRequest::PartitionValuesRequest(const PartitionValuesRequest& other846) {
  dbName = other846.dbName;
  tblName = other846.tblName;
  partitionKeys = other846.partitionKeys;
  applyDistinct = other846.applyDistinct;
  filter = other846.filter;
  partitionOrder = other846.partitionOrder;
  ascending = other846.ascending;
  maxParts = other846.maxParts;
  catName = other846.catName;
  validWriteIdList = other846.validWriteIdList;
  __isset = other846.__isset;
}
PartitionValuesRequest::PartitionValuesRequest( PartitionValuesRequest&& other847) {
  dbName = std::move(other847.dbName);
  tblName = std::move(other847.tblName);
  partitionKeys = std::move(other847.partitionKeys);
  applyDistinct = std::move(other847.applyDistinct);
  filter = std::move(other847.filter);
  partitionOrder = std::move(other847.partitionOrder);
  ascending = std::move(other847.ascending);
  maxParts = std::move(other847.maxParts);
  catName = std::move(other847.catName);
  validWriteIdList = std::move(other847.validWriteIdList);
  __isset = std::move(other847.__isset);
}
PartitionValuesRequest& PartitionValuesRequest::operator=(const PartitionValuesRequest& other848) {
  dbName = other848.dbName;
  tblName = other848.tblName;
  partitionKeys = other848.partitionKeys;
  applyDistinct = other848.applyDistinct;
  filter = other848.filter;
  partitionOrder = other848.partitionOrder;
  ascending = other848.ascending;
  maxParts = other848.maxParts;
  catName = other848.catName;
  validWriteIdList = other848.validWriteIdList;
  __isset = other848.__isset;
  return *this;
}
PartitionValuesRequest& PartitionValuesRequest::operator=(PartitionValuesRequest&& other849) {
  dbName = std::move(other849.dbName);
  tblName = std::move(other849.tblName);
  partitionKeys = std::move(other849.partitionKeys);
  applyDistinct = std::move(other849.applyDistinct);
  filter = std::move(other849.filter);
  partitionOrder = std::move(other849.partitionOrder);
  ascending = std::move(other849.ascending);
  maxParts = std::move(other849.maxParts);
  catName = std::move(other849.catName);
  validWriteIdList = std::move(other849.validWriteIdList);
  __isset = std::move(other849.__isset);
  return *this;
}
void PartitionValuesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionValuesRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "partitionKeys=" << to_string(partitionKeys);
  out << ", " << "applyDistinct="; (__isset.applyDistinct ? (out << to_string(applyDistinct)) : (out << "<null>"));
  out << ", " << "filter="; (__isset.filter ? (out << to_string(filter)) : (out << "<null>"));
  out << ", " << "partitionOrder="; (__isset.partitionOrder ? (out << to_string(partitionOrder)) : (out << "<null>"));
  out << ", " << "ascending="; (__isset.ascending ? (out << to_string(ascending)) : (out << "<null>"));
  out << ", " << "maxParts="; (__isset.maxParts ? (out << to_string(maxParts)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ")";
}


PartitionValuesRow::~PartitionValuesRow() throw() {
}


void PartitionValuesRow::__set_row(const std::vector<std::string> & val) {
  this->row = val;
}
std::ostream& operator<<(std::ostream& out, const PartitionValuesRow& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionValuesRow &a, PartitionValuesRow &b) {
  using ::std::swap;
  swap(a.row, b.row);
}

PartitionValuesRow::PartitionValuesRow(const PartitionValuesRow& other856) {
  row = other856.row;
}
PartitionValuesRow::PartitionValuesRow( PartitionValuesRow&& other857) {
  row = std::move(other857.row);
}
PartitionValuesRow& PartitionValuesRow::operator=(const PartitionValuesRow& other858) {
  row = other858.row;
  return *this;
}
PartitionValuesRow& PartitionValuesRow::operator=(PartitionValuesRow&& other859) {
  row = std::move(other859.row);
  return *this;
}
void PartitionValuesRow::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionValuesRow(";
  out << "row=" << to_string(row);
  out << ")";
}


PartitionValuesResponse::~PartitionValuesResponse() throw() {
}


void PartitionValuesResponse::__set_partitionValues(const std::vector<PartitionValuesRow> & val) {
  this->partitionValues = val;
}
std::ostream& operator<<(std::ostream& out, const PartitionValuesResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionValuesResponse &a, PartitionValuesResponse &b) {
  using ::std::swap;
  swap(a.partitionValues, b.partitionValues);
}

PartitionValuesResponse::PartitionValuesResponse(const PartitionValuesResponse& other866) {
  partitionValues = other866.partitionValues;
}
PartitionValuesResponse::PartitionValuesResponse( PartitionValuesResponse&& other867) {
  partitionValues = std::move(other867.partitionValues);
}
PartitionValuesResponse& PartitionValuesResponse::operator=(const PartitionValuesResponse& other868) {
  partitionValues = other868.partitionValues;
  return *this;
}
PartitionValuesResponse& PartitionValuesResponse::operator=(PartitionValuesResponse&& other869) {
  partitionValues = std::move(other869.partitionValues);
  return *this;
}
void PartitionValuesResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionValuesResponse(";
  out << "partitionValues=" << to_string(partitionValues);
  out << ")";
}


GetPartitionsByNamesRequest::~GetPartitionsByNamesRequest() throw() {
}


void GetPartitionsByNamesRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void GetPartitionsByNamesRequest::__set_tbl_name(const std::string& val) {
  this->tbl_name = val;
}

void GetPartitionsByNamesRequest::__set_names(const std::vector<std::string> & val) {
  this->names = val;
__isset.names = true;
}

void GetPartitionsByNamesRequest::__set_get_col_stats(const bool val) {
  this->get_col_stats = val;
__isset.get_col_stats = true;
}

void GetPartitionsByNamesRequest::__set_processorCapabilities(const std::vector<std::string> & val) {
  this->processorCapabilities = val;
__isset.processorCapabilities = true;
}

void GetPartitionsByNamesRequest::__set_processorIdentifier(const std::string& val) {
  this->processorIdentifier = val;
__isset.processorIdentifier = true;
}

void GetPartitionsByNamesRequest::__set_engine(const std::string& val) {
  this->engine = val;
__isset.engine = true;
}

void GetPartitionsByNamesRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void GetPartitionsByNamesRequest::__set_getFileMetadata(const bool val) {
  this->getFileMetadata = val;
__isset.getFileMetadata = true;
}

void GetPartitionsByNamesRequest::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}
std::ostream& operator<<(std::ostream& out, const GetPartitionsByNamesRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPartitionsByNamesRequest &a, GetPartitionsByNamesRequest &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.tbl_name, b.tbl_name);
  swap(a.names, b.names);
  swap(a.get_col_stats, b.get_col_stats);
  swap(a.processorCapabilities, b.processorCapabilities);
  swap(a.processorIdentifier, b.processorIdentifier);
  swap(a.engine, b.engine);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.getFileMetadata, b.getFileMetadata);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

GetPartitionsByNamesRequest::GetPartitionsByNamesRequest(const GetPartitionsByNamesRequest& other882) {
  db_name = other882.db_name;
  tbl_name = other882.tbl_name;
  names = other882.names;
  get_col_stats = other882.get_col_stats;
  processorCapabilities = other882.processorCapabilities;
  processorIdentifier = other882.processorIdentifier;
  engine = other882.engine;
  validWriteIdList = other882.validWriteIdList;
  getFileMetadata = other882.getFileMetadata;
  id = other882.id;
  __isset = other882.__isset;
}
GetPartitionsByNamesRequest::GetPartitionsByNamesRequest( GetPartitionsByNamesRequest&& other883) {
  db_name = std::move(other883.db_name);
  tbl_name = std::move(other883.tbl_name);
  names = std::move(other883.names);
  get_col_stats = std::move(other883.get_col_stats);
  processorCapabilities = std::move(other883.processorCapabilities);
  processorIdentifier = std::move(other883.processorIdentifier);
  engine = std::move(other883.engine);
  validWriteIdList = std::move(other883.validWriteIdList);
  getFileMetadata = std::move(other883.getFileMetadata);
  id = std::move(other883.id);
  __isset = std::move(other883.__isset);
}
GetPartitionsByNamesRequest& GetPartitionsByNamesRequest::operator=(const GetPartitionsByNamesRequest& other884) {
  db_name = other884.db_name;
  tbl_name = other884.tbl_name;
  names = other884.names;
  get_col_stats = other884.get_col_stats;
  processorCapabilities = other884.processorCapabilities;
  processorIdentifier = other884.processorIdentifier;
  engine = other884.engine;
  validWriteIdList = other884.validWriteIdList;
  getFileMetadata = other884.getFileMetadata;
  id = other884.id;
  __isset = other884.__isset;
  return *this;
}
GetPartitionsByNamesRequest& GetPartitionsByNamesRequest::operator=(GetPartitionsByNamesRequest&& other885) {
  db_name = std::move(other885.db_name);
  tbl_name = std::move(other885.tbl_name);
  names = std::move(other885.names);
  get_col_stats = std::move(other885.get_col_stats);
  processorCapabilities = std::move(other885.processorCapabilities);
  processorIdentifier = std::move(other885.processorIdentifier);
  engine = std::move(other885.engine);
  validWriteIdList = std::move(other885.validWriteIdList);
  getFileMetadata = std::move(other885.getFileMetadata);
  id = std::move(other885.id);
  __isset = std::move(other885.__isset);
  return *this;
}
void GetPartitionsByNamesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPartitionsByNamesRequest(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "tbl_name=" << to_string(tbl_name);
  out << ", " << "names="; (__isset.names ? (out << to_string(names)) : (out << "<null>"));
  out << ", " << "get_col_stats="; (__isset.get_col_stats ? (out << to_string(get_col_stats)) : (out << "<null>"));
  out << ", " << "processorCapabilities="; (__isset.processorCapabilities ? (out << to_string(processorCapabilities)) : (out << "<null>"));
  out << ", " << "processorIdentifier="; (__isset.processorIdentifier ? (out << to_string(processorIdentifier)) : (out << "<null>"));
  out << ", " << "engine="; (__isset.engine ? (out << to_string(engine)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "getFileMetadata="; (__isset.getFileMetadata ? (out << to_string(getFileMetadata)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ")";
}


GetPartitionsByNamesResult::~GetPartitionsByNamesResult() throw() {
}


void GetPartitionsByNamesResult::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
}

void GetPartitionsByNamesResult::__set_dictionary(const ObjectDictionary& val) {
  this->dictionary = val;
__isset.dictionary = true;
}
std::ostream& operator<<(std::ostream& out, const GetPartitionsByNamesResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPartitionsByNamesResult &a, GetPartitionsByNamesResult &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
  swap(a.dictionary, b.dictionary);
  swap(a.__isset, b.__isset);
}

GetPartitionsByNamesResult::GetPartitionsByNamesResult(const GetPartitionsByNamesResult& other892) {
  partitions = other892.partitions;
  dictionary = other892.dictionary;
  __isset = other892.__isset;
}
GetPartitionsByNamesResult::GetPartitionsByNamesResult( GetPartitionsByNamesResult&& other893) {
  partitions = std::move(other893.partitions);
  dictionary = std::move(other893.dictionary);
  __isset = std::move(other893.__isset);
}
GetPartitionsByNamesResult& GetPartitionsByNamesResult::operator=(const GetPartitionsByNamesResult& other894) {
  partitions = other894.partitions;
  dictionary = other894.dictionary;
  __isset = other894.__isset;
  return *this;
}
GetPartitionsByNamesResult& GetPartitionsByNamesResult::operator=(GetPartitionsByNamesResult&& other895) {
  partitions = std::move(other895.partitions);
  dictionary = std::move(other895.dictionary);
  __isset = std::move(other895.__isset);
  return *this;
}
void GetPartitionsByNamesResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPartitionsByNamesResult(";
  out << "partitions=" << to_string(partitions);
  out << ", " << "dictionary="; (__isset.dictionary ? (out << to_string(dictionary)) : (out << "<null>"));
  out << ")";
}


ResourceUri::~ResourceUri() throw() {
}


void ResourceUri::__set_resourceType(const ResourceType::type val) {
  this->resourceType = val;
}

void ResourceUri::__set_uri(const std::string& val) {
  this->uri = val;
}
std::ostream& operator<<(std::ostream& out, const ResourceUri& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ResourceUri &a, ResourceUri &b) {
  using ::std::swap;
  swap(a.resourceType, b.resourceType);
  swap(a.uri, b.uri);
  swap(a.__isset, b.__isset);
}

ResourceUri::ResourceUri(const ResourceUri& other897) {
  resourceType = other897.resourceType;
  uri = other897.uri;
  __isset = other897.__isset;
}
ResourceUri::ResourceUri( ResourceUri&& other898) {
  resourceType = std::move(other898.resourceType);
  uri = std::move(other898.uri);
  __isset = std::move(other898.__isset);
}
ResourceUri& ResourceUri::operator=(const ResourceUri& other899) {
  resourceType = other899.resourceType;
  uri = other899.uri;
  __isset = other899.__isset;
  return *this;
}
ResourceUri& ResourceUri::operator=(ResourceUri&& other900) {
  resourceType = std::move(other900.resourceType);
  uri = std::move(other900.uri);
  __isset = std::move(other900.__isset);
  return *this;
}
void ResourceUri::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResourceUri(";
  out << "resourceType=" << to_string(resourceType);
  out << ", " << "uri=" << to_string(uri);
  out << ")";
}


Function::~Function() throw() {
}


void Function::__set_functionName(const std::string& val) {
  this->functionName = val;
}

void Function::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void Function::__set_className(const std::string& val) {
  this->className = val;
}

void Function::__set_ownerName(const std::string& val) {
  this->ownerName = val;
}

void Function::__set_ownerType(const PrincipalType::type val) {
  this->ownerType = val;
}

void Function::__set_createTime(const int32_t val) {
  this->createTime = val;
}

void Function::__set_functionType(const FunctionType::type val) {
  this->functionType = val;
}

void Function::__set_resourceUris(const std::vector<ResourceUri> & val) {
  this->resourceUris = val;
}

void Function::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}
std::ostream& operator<<(std::ostream& out, const Function& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Function &a, Function &b) {
  using ::std::swap;
  swap(a.functionName, b.functionName);
  swap(a.dbName, b.dbName);
  swap(a.className, b.className);
  swap(a.ownerName, b.ownerName);
  swap(a.ownerType, b.ownerType);
  swap(a.createTime, b.createTime);
  swap(a.functionType, b.functionType);
  swap(a.resourceUris, b.resourceUris);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

Function::Function(const Function& other909) {
  functionName = other909.functionName;
  dbName = other909.dbName;
  className = other909.className;
  ownerName = other909.ownerName;
  ownerType = other909.ownerType;
  createTime = other909.createTime;
  functionType = other909.functionType;
  resourceUris = other909.resourceUris;
  catName = other909.catName;
  __isset = other909.__isset;
}
Function::Function( Function&& other910) {
  functionName = std::move(other910.functionName);
  dbName = std::move(other910.dbName);
  className = std::move(other910.className);
  ownerName = std::move(other910.ownerName);
  ownerType = std::move(other910.ownerType);
  createTime = std::move(other910.createTime);
  functionType = std::move(other910.functionType);
  resourceUris = std::move(other910.resourceUris);
  catName = std::move(other910.catName);
  __isset = std::move(other910.__isset);
}
Function& Function::operator=(const Function& other911) {
  functionName = other911.functionName;
  dbName = other911.dbName;
  className = other911.className;
  ownerName = other911.ownerName;
  ownerType = other911.ownerType;
  createTime = other911.createTime;
  functionType = other911.functionType;
  resourceUris = other911.resourceUris;
  catName = other911.catName;
  __isset = other911.__isset;
  return *this;
}
Function& Function::operator=(Function&& other912) {
  functionName = std::move(other912.functionName);
  dbName = std::move(other912.dbName);
  className = std::move(other912.className);
  ownerName = std::move(other912.ownerName);
  ownerType = std::move(other912.ownerType);
  createTime = std::move(other912.createTime);
  functionType = std::move(other912.functionType);
  resourceUris = std::move(other912.resourceUris);
  catName = std::move(other912.catName);
  __isset = std::move(other912.__isset);
  return *this;
}
void Function::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Function(";
  out << "functionName=" << to_string(functionName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "className=" << to_string(className);
  out << ", " << "ownerName=" << to_string(ownerName);
  out << ", " << "ownerType=" << to_string(ownerType);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "functionType=" << to_string(functionType);
  out << ", " << "resourceUris=" << to_string(resourceUris);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


TxnInfo::~TxnInfo() throw() {
}


void TxnInfo::__set_id(const int64_t val) {
  this->id = val;
}

void TxnInfo::__set_state(const TxnState::type val) {
  this->state = val;
}

void TxnInfo::__set_user(const std::string& val) {
  this->user = val;
}

void TxnInfo::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void TxnInfo::__set_agentInfo(const std::string& val) {
  this->agentInfo = val;
__isset.agentInfo = true;
}

void TxnInfo::__set_heartbeatCount(const int32_t val) {
  this->heartbeatCount = val;
__isset.heartbeatCount = true;
}

void TxnInfo::__set_metaInfo(const std::string& val) {
  this->metaInfo = val;
__isset.metaInfo = true;
}

void TxnInfo::__set_startedTime(const int64_t val) {
  this->startedTime = val;
__isset.startedTime = true;
}

void TxnInfo::__set_lastHeartbeatTime(const int64_t val) {
  this->lastHeartbeatTime = val;
__isset.lastHeartbeatTime = true;
}
std::ostream& operator<<(std::ostream& out, const TxnInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TxnInfo &a, TxnInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.state, b.state);
  swap(a.user, b.user);
  swap(a.hostname, b.hostname);
  swap(a.agentInfo, b.agentInfo);
  swap(a.heartbeatCount, b.heartbeatCount);
  swap(a.metaInfo, b.metaInfo);
  swap(a.startedTime, b.startedTime);
  swap(a.lastHeartbeatTime, b.lastHeartbeatTime);
  swap(a.__isset, b.__isset);
}

TxnInfo::TxnInfo(const TxnInfo& other914) {
  id = other914.id;
  state = other914.state;
  user = other914.user;
  hostname = other914.hostname;
  agentInfo = other914.agentInfo;
  heartbeatCount = other914.heartbeatCount;
  metaInfo = other914.metaInfo;
  startedTime = other914.startedTime;
  lastHeartbeatTime = other914.lastHeartbeatTime;
  __isset = other914.__isset;
}
TxnInfo::TxnInfo( TxnInfo&& other915) {
  id = std::move(other915.id);
  state = std::move(other915.state);
  user = std::move(other915.user);
  hostname = std::move(other915.hostname);
  agentInfo = std::move(other915.agentInfo);
  heartbeatCount = std::move(other915.heartbeatCount);
  metaInfo = std::move(other915.metaInfo);
  startedTime = std::move(other915.startedTime);
  lastHeartbeatTime = std::move(other915.lastHeartbeatTime);
  __isset = std::move(other915.__isset);
}
TxnInfo& TxnInfo::operator=(const TxnInfo& other916) {
  id = other916.id;
  state = other916.state;
  user = other916.user;
  hostname = other916.hostname;
  agentInfo = other916.agentInfo;
  heartbeatCount = other916.heartbeatCount;
  metaInfo = other916.metaInfo;
  startedTime = other916.startedTime;
  lastHeartbeatTime = other916.lastHeartbeatTime;
  __isset = other916.__isset;
  return *this;
}
TxnInfo& TxnInfo::operator=(TxnInfo&& other917) {
  id = std::move(other917.id);
  state = std::move(other917.state);
  user = std::move(other917.user);
  hostname = std::move(other917.hostname);
  agentInfo = std::move(other917.agentInfo);
  heartbeatCount = std::move(other917.heartbeatCount);
  metaInfo = std::move(other917.metaInfo);
  startedTime = std::move(other917.startedTime);
  lastHeartbeatTime = std::move(other917.lastHeartbeatTime);
  __isset = std::move(other917.__isset);
  return *this;
}
void TxnInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TxnInfo(";
  out << "id=" << to_string(id);
  out << ", " << "state=" << to_string(state);
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "agentInfo="; (__isset.agentInfo ? (out << to_string(agentInfo)) : (out << "<null>"));
  out << ", " << "heartbeatCount="; (__isset.heartbeatCount ? (out << to_string(heartbeatCount)) : (out << "<null>"));
  out << ", " << "metaInfo="; (__isset.metaInfo ? (out << to_string(metaInfo)) : (out << "<null>"));
  out << ", " << "startedTime="; (__isset.startedTime ? (out << to_string(startedTime)) : (out << "<null>"));
  out << ", " << "lastHeartbeatTime="; (__isset.lastHeartbeatTime ? (out << to_string(lastHeartbeatTime)) : (out << "<null>"));
  out << ")";
}


GetOpenTxnsInfoResponse::~GetOpenTxnsInfoResponse() throw() {
}


void GetOpenTxnsInfoResponse::__set_txn_high_water_mark(const int64_t val) {
  this->txn_high_water_mark = val;
}

void GetOpenTxnsInfoResponse::__set_open_txns(const std::vector<TxnInfo> & val) {
  this->open_txns = val;
}
std::ostream& operator<<(std::ostream& out, const GetOpenTxnsInfoResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetOpenTxnsInfoResponse &a, GetOpenTxnsInfoResponse &b) {
  using ::std::swap;
  swap(a.txn_high_water_mark, b.txn_high_water_mark);
  swap(a.open_txns, b.open_txns);
}

GetOpenTxnsInfoResponse::GetOpenTxnsInfoResponse(const GetOpenTxnsInfoResponse& other924) {
  txn_high_water_mark = other924.txn_high_water_mark;
  open_txns = other924.open_txns;
}
GetOpenTxnsInfoResponse::GetOpenTxnsInfoResponse( GetOpenTxnsInfoResponse&& other925) {
  txn_high_water_mark = std::move(other925.txn_high_water_mark);
  open_txns = std::move(other925.open_txns);
}
GetOpenTxnsInfoResponse& GetOpenTxnsInfoResponse::operator=(const GetOpenTxnsInfoResponse& other926) {
  txn_high_water_mark = other926.txn_high_water_mark;
  open_txns = other926.open_txns;
  return *this;
}
GetOpenTxnsInfoResponse& GetOpenTxnsInfoResponse::operator=(GetOpenTxnsInfoResponse&& other927) {
  txn_high_water_mark = std::move(other927.txn_high_water_mark);
  open_txns = std::move(other927.open_txns);
  return *this;
}
void GetOpenTxnsInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetOpenTxnsInfoResponse(";
  out << "txn_high_water_mark=" << to_string(txn_high_water_mark);
  out << ", " << "open_txns=" << to_string(open_txns);
  out << ")";
}


GetOpenTxnsResponse::~GetOpenTxnsResponse() throw() {
}


void GetOpenTxnsResponse::__set_txn_high_water_mark(const int64_t val) {
  this->txn_high_water_mark = val;
}

void GetOpenTxnsResponse::__set_open_txns(const std::vector<int64_t> & val) {
  this->open_txns = val;
}

void GetOpenTxnsResponse::__set_min_open_txn(const int64_t val) {
  this->min_open_txn = val;
__isset.min_open_txn = true;
}

void GetOpenTxnsResponse::__set_abortedBits(const std::string& val) {
  this->abortedBits = val;
}
std::ostream& operator<<(std::ostream& out, const GetOpenTxnsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetOpenTxnsResponse &a, GetOpenTxnsResponse &b) {
  using ::std::swap;
  swap(a.txn_high_water_mark, b.txn_high_water_mark);
  swap(a.open_txns, b.open_txns);
  swap(a.min_open_txn, b.min_open_txn);
  swap(a.abortedBits, b.abortedBits);
  swap(a.__isset, b.__isset);
}

GetOpenTxnsResponse::GetOpenTxnsResponse(const GetOpenTxnsResponse& other934) {
  txn_high_water_mark = other934.txn_high_water_mark;
  open_txns = other934.open_txns;
  min_open_txn = other934.min_open_txn;
  abortedBits = other934.abortedBits;
  __isset = other934.__isset;
}
GetOpenTxnsResponse::GetOpenTxnsResponse( GetOpenTxnsResponse&& other935) {
  txn_high_water_mark = std::move(other935.txn_high_water_mark);
  open_txns = std::move(other935.open_txns);
  min_open_txn = std::move(other935.min_open_txn);
  abortedBits = std::move(other935.abortedBits);
  __isset = std::move(other935.__isset);
}
GetOpenTxnsResponse& GetOpenTxnsResponse::operator=(const GetOpenTxnsResponse& other936) {
  txn_high_water_mark = other936.txn_high_water_mark;
  open_txns = other936.open_txns;
  min_open_txn = other936.min_open_txn;
  abortedBits = other936.abortedBits;
  __isset = other936.__isset;
  return *this;
}
GetOpenTxnsResponse& GetOpenTxnsResponse::operator=(GetOpenTxnsResponse&& other937) {
  txn_high_water_mark = std::move(other937.txn_high_water_mark);
  open_txns = std::move(other937.open_txns);
  min_open_txn = std::move(other937.min_open_txn);
  abortedBits = std::move(other937.abortedBits);
  __isset = std::move(other937.__isset);
  return *this;
}
void GetOpenTxnsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetOpenTxnsResponse(";
  out << "txn_high_water_mark=" << to_string(txn_high_water_mark);
  out << ", " << "open_txns=" << to_string(open_txns);
  out << ", " << "min_open_txn="; (__isset.min_open_txn ? (out << to_string(min_open_txn)) : (out << "<null>"));
  out << ", " << "abortedBits=" << to_string(abortedBits);
  out << ")";
}


OpenTxnRequest::~OpenTxnRequest() throw() {
}


void OpenTxnRequest::__set_num_txns(const int32_t val) {
  this->num_txns = val;
}

void OpenTxnRequest::__set_user(const std::string& val) {
  this->user = val;
}

void OpenTxnRequest::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void OpenTxnRequest::__set_agentInfo(const std::string& val) {
  this->agentInfo = val;
__isset.agentInfo = true;
}

void OpenTxnRequest::__set_replPolicy(const std::string& val) {
  this->replPolicy = val;
__isset.replPolicy = true;
}

void OpenTxnRequest::__set_replSrcTxnIds(const std::vector<int64_t> & val) {
  this->replSrcTxnIds = val;
__isset.replSrcTxnIds = true;
}

void OpenTxnRequest::__set_txn_type(const TxnType::type val) {
  this->txn_type = val;
__isset.txn_type = true;
}
std::ostream& operator<<(std::ostream& out, const OpenTxnRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(OpenTxnRequest &a, OpenTxnRequest &b) {
  using ::std::swap;
  swap(a.num_txns, b.num_txns);
  swap(a.user, b.user);
  swap(a.hostname, b.hostname);
  swap(a.agentInfo, b.agentInfo);
  swap(a.replPolicy, b.replPolicy);
  swap(a.replSrcTxnIds, b.replSrcTxnIds);
  swap(a.txn_type, b.txn_type);
  swap(a.__isset, b.__isset);
}

OpenTxnRequest::OpenTxnRequest(const OpenTxnRequest& other945) {
  num_txns = other945.num_txns;
  user = other945.user;
  hostname = other945.hostname;
  agentInfo = other945.agentInfo;
  replPolicy = other945.replPolicy;
  replSrcTxnIds = other945.replSrcTxnIds;
  txn_type = other945.txn_type;
  __isset = other945.__isset;
}
OpenTxnRequest::OpenTxnRequest( OpenTxnRequest&& other946) {
  num_txns = std::move(other946.num_txns);
  user = std::move(other946.user);
  hostname = std::move(other946.hostname);
  agentInfo = std::move(other946.agentInfo);
  replPolicy = std::move(other946.replPolicy);
  replSrcTxnIds = std::move(other946.replSrcTxnIds);
  txn_type = std::move(other946.txn_type);
  __isset = std::move(other946.__isset);
}
OpenTxnRequest& OpenTxnRequest::operator=(const OpenTxnRequest& other947) {
  num_txns = other947.num_txns;
  user = other947.user;
  hostname = other947.hostname;
  agentInfo = other947.agentInfo;
  replPolicy = other947.replPolicy;
  replSrcTxnIds = other947.replSrcTxnIds;
  txn_type = other947.txn_type;
  __isset = other947.__isset;
  return *this;
}
OpenTxnRequest& OpenTxnRequest::operator=(OpenTxnRequest&& other948) {
  num_txns = std::move(other948.num_txns);
  user = std::move(other948.user);
  hostname = std::move(other948.hostname);
  agentInfo = std::move(other948.agentInfo);
  replPolicy = std::move(other948.replPolicy);
  replSrcTxnIds = std::move(other948.replSrcTxnIds);
  txn_type = std::move(other948.txn_type);
  __isset = std::move(other948.__isset);
  return *this;
}
void OpenTxnRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OpenTxnRequest(";
  out << "num_txns=" << to_string(num_txns);
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "agentInfo="; (__isset.agentInfo ? (out << to_string(agentInfo)) : (out << "<null>"));
  out << ", " << "replPolicy="; (__isset.replPolicy ? (out << to_string(replPolicy)) : (out << "<null>"));
  out << ", " << "replSrcTxnIds="; (__isset.replSrcTxnIds ? (out << to_string(replSrcTxnIds)) : (out << "<null>"));
  out << ", " << "txn_type="; (__isset.txn_type ? (out << to_string(txn_type)) : (out << "<null>"));
  out << ")";
}


OpenTxnsResponse::~OpenTxnsResponse() throw() {
}


void OpenTxnsResponse::__set_txn_ids(const std::vector<int64_t> & val) {
  this->txn_ids = val;
}
std::ostream& operator<<(std::ostream& out, const OpenTxnsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(OpenTxnsResponse &a, OpenTxnsResponse &b) {
  using ::std::swap;
  swap(a.txn_ids, b.txn_ids);
}

OpenTxnsResponse::OpenTxnsResponse(const OpenTxnsResponse& other955) {
  txn_ids = other955.txn_ids;
}
OpenTxnsResponse::OpenTxnsResponse( OpenTxnsResponse&& other956) {
  txn_ids = std::move(other956.txn_ids);
}
OpenTxnsResponse& OpenTxnsResponse::operator=(const OpenTxnsResponse& other957) {
  txn_ids = other957.txn_ids;
  return *this;
}
OpenTxnsResponse& OpenTxnsResponse::operator=(OpenTxnsResponse&& other958) {
  txn_ids = std::move(other958.txn_ids);
  return *this;
}
void OpenTxnsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OpenTxnsResponse(";
  out << "txn_ids=" << to_string(txn_ids);
  out << ")";
}


AbortTxnRequest::~AbortTxnRequest() throw() {
}


void AbortTxnRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
}

void AbortTxnRequest::__set_replPolicy(const std::string& val) {
  this->replPolicy = val;
__isset.replPolicy = true;
}
std::ostream& operator<<(std::ostream& out, const AbortTxnRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AbortTxnRequest &a, AbortTxnRequest &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
  swap(a.replPolicy, b.replPolicy);
  swap(a.__isset, b.__isset);
}

AbortTxnRequest::AbortTxnRequest(const AbortTxnRequest& other959) {
  txnid = other959.txnid;
  replPolicy = other959.replPolicy;
  __isset = other959.__isset;
}
AbortTxnRequest::AbortTxnRequest( AbortTxnRequest&& other960) {
  txnid = std::move(other960.txnid);
  replPolicy = std::move(other960.replPolicy);
  __isset = std::move(other960.__isset);
}
AbortTxnRequest& AbortTxnRequest::operator=(const AbortTxnRequest& other961) {
  txnid = other961.txnid;
  replPolicy = other961.replPolicy;
  __isset = other961.__isset;
  return *this;
}
AbortTxnRequest& AbortTxnRequest::operator=(AbortTxnRequest&& other962) {
  txnid = std::move(other962.txnid);
  replPolicy = std::move(other962.replPolicy);
  __isset = std::move(other962.__isset);
  return *this;
}
void AbortTxnRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AbortTxnRequest(";
  out << "txnid=" << to_string(txnid);
  out << ", " << "replPolicy="; (__isset.replPolicy ? (out << to_string(replPolicy)) : (out << "<null>"));
  out << ")";
}


AbortTxnsRequest::~AbortTxnsRequest() throw() {
}


void AbortTxnsRequest::__set_txn_ids(const std::vector<int64_t> & val) {
  this->txn_ids = val;
}
std::ostream& operator<<(std::ostream& out, const AbortTxnsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AbortTxnsRequest &a, AbortTxnsRequest &b) {
  using ::std::swap;
  swap(a.txn_ids, b.txn_ids);
}

AbortTxnsRequest::AbortTxnsRequest(const AbortTxnsRequest& other969) {
  txn_ids = other969.txn_ids;
}
AbortTxnsRequest::AbortTxnsRequest( AbortTxnsRequest&& other970) {
  txn_ids = std::move(other970.txn_ids);
}
AbortTxnsRequest& AbortTxnsRequest::operator=(const AbortTxnsRequest& other971) {
  txn_ids = other971.txn_ids;
  return *this;
}
AbortTxnsRequest& AbortTxnsRequest::operator=(AbortTxnsRequest&& other972) {
  txn_ids = std::move(other972.txn_ids);
  return *this;
}
void AbortTxnsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AbortTxnsRequest(";
  out << "txn_ids=" << to_string(txn_ids);
  out << ")";
}


WriteEventInfo::~WriteEventInfo() throw() {
}


void WriteEventInfo::__set_writeId(const int64_t val) {
  this->writeId = val;
}

void WriteEventInfo::__set_database(const std::string& val) {
  this->database = val;
}

void WriteEventInfo::__set_table(const std::string& val) {
  this->table = val;
}

void WriteEventInfo::__set_files(const std::string& val) {
  this->files = val;
}

void WriteEventInfo::__set_partition(const std::string& val) {
  this->partition = val;
__isset.partition = true;
}

void WriteEventInfo::__set_tableObj(const std::string& val) {
  this->tableObj = val;
__isset.tableObj = true;
}

void WriteEventInfo::__set_partitionObj(const std::string& val) {
  this->partitionObj = val;
__isset.partitionObj = true;
}
std::ostream& operator<<(std::ostream& out, const WriteEventInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WriteEventInfo &a, WriteEventInfo &b) {
  using ::std::swap;
  swap(a.writeId, b.writeId);
  swap(a.database, b.database);
  swap(a.table, b.table);
  swap(a.files, b.files);
  swap(a.partition, b.partition);
  swap(a.tableObj, b.tableObj);
  swap(a.partitionObj, b.partitionObj);
  swap(a.__isset, b.__isset);
}

WriteEventInfo::WriteEventInfo(const WriteEventInfo& other973) {
  writeId = other973.writeId;
  database = other973.database;
  table = other973.table;
  files = other973.files;
  partition = other973.partition;
  tableObj = other973.tableObj;
  partitionObj = other973.partitionObj;
  __isset = other973.__isset;
}
WriteEventInfo::WriteEventInfo( WriteEventInfo&& other974) {
  writeId = std::move(other974.writeId);
  database = std::move(other974.database);
  table = std::move(other974.table);
  files = std::move(other974.files);
  partition = std::move(other974.partition);
  tableObj = std::move(other974.tableObj);
  partitionObj = std::move(other974.partitionObj);
  __isset = std::move(other974.__isset);
}
WriteEventInfo& WriteEventInfo::operator=(const WriteEventInfo& other975) {
  writeId = other975.writeId;
  database = other975.database;
  table = other975.table;
  files = other975.files;
  partition = other975.partition;
  tableObj = other975.tableObj;
  partitionObj = other975.partitionObj;
  __isset = other975.__isset;
  return *this;
}
WriteEventInfo& WriteEventInfo::operator=(WriteEventInfo&& other976) {
  writeId = std::move(other976.writeId);
  database = std::move(other976.database);
  table = std::move(other976.table);
  files = std::move(other976.files);
  partition = std::move(other976.partition);
  tableObj = std::move(other976.tableObj);
  partitionObj = std::move(other976.partitionObj);
  __isset = std::move(other976.__isset);
  return *this;
}
void WriteEventInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WriteEventInfo(";
  out << "writeId=" << to_string(writeId);
  out << ", " << "database=" << to_string(database);
  out << ", " << "table=" << to_string(table);
  out << ", " << "files=" << to_string(files);
  out << ", " << "partition="; (__isset.partition ? (out << to_string(partition)) : (out << "<null>"));
  out << ", " << "tableObj="; (__isset.tableObj ? (out << to_string(tableObj)) : (out << "<null>"));
  out << ", " << "partitionObj="; (__isset.partitionObj ? (out << to_string(partitionObj)) : (out << "<null>"));
  out << ")";
}


ReplLastIdInfo::~ReplLastIdInfo() throw() {
}


void ReplLastIdInfo::__set_database(const std::string& val) {
  this->database = val;
}

void ReplLastIdInfo::__set_lastReplId(const int64_t val) {
  this->lastReplId = val;
}

void ReplLastIdInfo::__set_table(const std::string& val) {
  this->table = val;
__isset.table = true;
}

void ReplLastIdInfo::__set_catalog(const std::string& val) {
  this->catalog = val;
__isset.catalog = true;
}

void ReplLastIdInfo::__set_partitionList(const std::vector<std::string> & val) {
  this->partitionList = val;
__isset.partitionList = true;
}
std::ostream& operator<<(std::ostream& out, const ReplLastIdInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ReplLastIdInfo &a, ReplLastIdInfo &b) {
  using ::std::swap;
  swap(a.database, b.database);
  swap(a.lastReplId, b.lastReplId);
  swap(a.table, b.table);
  swap(a.catalog, b.catalog);
  swap(a.partitionList, b.partitionList);
  swap(a.__isset, b.__isset);
}

ReplLastIdInfo::ReplLastIdInfo(const ReplLastIdInfo& other983) {
  database = other983.database;
  lastReplId = other983.lastReplId;
  table = other983.table;
  catalog = other983.catalog;
  partitionList = other983.partitionList;
  __isset = other983.__isset;
}
ReplLastIdInfo::ReplLastIdInfo( ReplLastIdInfo&& other984) {
  database = std::move(other984.database);
  lastReplId = std::move(other984.lastReplId);
  table = std::move(other984.table);
  catalog = std::move(other984.catalog);
  partitionList = std::move(other984.partitionList);
  __isset = std::move(other984.__isset);
}
ReplLastIdInfo& ReplLastIdInfo::operator=(const ReplLastIdInfo& other985) {
  database = other985.database;
  lastReplId = other985.lastReplId;
  table = other985.table;
  catalog = other985.catalog;
  partitionList = other985.partitionList;
  __isset = other985.__isset;
  return *this;
}
ReplLastIdInfo& ReplLastIdInfo::operator=(ReplLastIdInfo&& other986) {
  database = std::move(other986.database);
  lastReplId = std::move(other986.lastReplId);
  table = std::move(other986.table);
  catalog = std::move(other986.catalog);
  partitionList = std::move(other986.partitionList);
  __isset = std::move(other986.__isset);
  return *this;
}
void ReplLastIdInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReplLastIdInfo(";
  out << "database=" << to_string(database);
  out << ", " << "lastReplId=" << to_string(lastReplId);
  out << ", " << "table="; (__isset.table ? (out << to_string(table)) : (out << "<null>"));
  out << ", " << "catalog="; (__isset.catalog ? (out << to_string(catalog)) : (out << "<null>"));
  out << ", " << "partitionList="; (__isset.partitionList ? (out << to_string(partitionList)) : (out << "<null>"));
  out << ")";
}


CommitTxnKeyValue::~CommitTxnKeyValue() throw() {
}


void CommitTxnKeyValue::__set_tableId(const int64_t val) {
  this->tableId = val;
}

void CommitTxnKeyValue::__set_key(const std::string& val) {
  this->key = val;
}

void CommitTxnKeyValue::__set_value(const std::string& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const CommitTxnKeyValue& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CommitTxnKeyValue &a, CommitTxnKeyValue &b) {
  using ::std::swap;
  swap(a.tableId, b.tableId);
  swap(a.key, b.key);
  swap(a.value, b.value);
}

CommitTxnKeyValue::CommitTxnKeyValue(const CommitTxnKeyValue& other987) {
  tableId = other987.tableId;
  key = other987.key;
  value = other987.value;
}
CommitTxnKeyValue::CommitTxnKeyValue( CommitTxnKeyValue&& other988) {
  tableId = std::move(other988.tableId);
  key = std::move(other988.key);
  value = std::move(other988.value);
}
CommitTxnKeyValue& CommitTxnKeyValue::operator=(const CommitTxnKeyValue& other989) {
  tableId = other989.tableId;
  key = other989.key;
  value = other989.value;
  return *this;
}
CommitTxnKeyValue& CommitTxnKeyValue::operator=(CommitTxnKeyValue&& other990) {
  tableId = std::move(other990.tableId);
  key = std::move(other990.key);
  value = std::move(other990.value);
  return *this;
}
void CommitTxnKeyValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommitTxnKeyValue(";
  out << "tableId=" << to_string(tableId);
  out << ", " << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


CommitTxnRequest::~CommitTxnRequest() throw() {
}


void CommitTxnRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
}

void CommitTxnRequest::__set_replPolicy(const std::string& val) {
  this->replPolicy = val;
__isset.replPolicy = true;
}

void CommitTxnRequest::__set_writeEventInfos(const std::vector<WriteEventInfo> & val) {
  this->writeEventInfos = val;
__isset.writeEventInfos = true;
}

void CommitTxnRequest::__set_replLastIdInfo(const ReplLastIdInfo& val) {
  this->replLastIdInfo = val;
__isset.replLastIdInfo = true;
}

void CommitTxnRequest::__set_keyValue(const CommitTxnKeyValue& val) {
  this->keyValue = val;
__isset.keyValue = true;
}

void CommitTxnRequest::__set_exclWriteEnabled(const bool val) {
  this->exclWriteEnabled = val;
__isset.exclWriteEnabled = true;
}
std::ostream& operator<<(std::ostream& out, const CommitTxnRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CommitTxnRequest &a, CommitTxnRequest &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
  swap(a.replPolicy, b.replPolicy);
  swap(a.writeEventInfos, b.writeEventInfos);
  swap(a.replLastIdInfo, b.replLastIdInfo);
  swap(a.keyValue, b.keyValue);
  swap(a.exclWriteEnabled, b.exclWriteEnabled);
  swap(a.__isset, b.__isset);
}

CommitTxnRequest::CommitTxnRequest(const CommitTxnRequest& other997) {
  txnid = other997.txnid;
  replPolicy = other997.replPolicy;
  writeEventInfos = other997.writeEventInfos;
  replLastIdInfo = other997.replLastIdInfo;
  keyValue = other997.keyValue;
  exclWriteEnabled = other997.exclWriteEnabled;
  __isset = other997.__isset;
}
CommitTxnRequest::CommitTxnRequest( CommitTxnRequest&& other998) {
  txnid = std::move(other998.txnid);
  replPolicy = std::move(other998.replPolicy);
  writeEventInfos = std::move(other998.writeEventInfos);
  replLastIdInfo = std::move(other998.replLastIdInfo);
  keyValue = std::move(other998.keyValue);
  exclWriteEnabled = std::move(other998.exclWriteEnabled);
  __isset = std::move(other998.__isset);
}
CommitTxnRequest& CommitTxnRequest::operator=(const CommitTxnRequest& other999) {
  txnid = other999.txnid;
  replPolicy = other999.replPolicy;
  writeEventInfos = other999.writeEventInfos;
  replLastIdInfo = other999.replLastIdInfo;
  keyValue = other999.keyValue;
  exclWriteEnabled = other999.exclWriteEnabled;
  __isset = other999.__isset;
  return *this;
}
CommitTxnRequest& CommitTxnRequest::operator=(CommitTxnRequest&& other1000) {
  txnid = std::move(other1000.txnid);
  replPolicy = std::move(other1000.replPolicy);
  writeEventInfos = std::move(other1000.writeEventInfos);
  replLastIdInfo = std::move(other1000.replLastIdInfo);
  keyValue = std::move(other1000.keyValue);
  exclWriteEnabled = std::move(other1000.exclWriteEnabled);
  __isset = std::move(other1000.__isset);
  return *this;
}
void CommitTxnRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CommitTxnRequest(";
  out << "txnid=" << to_string(txnid);
  out << ", " << "replPolicy="; (__isset.replPolicy ? (out << to_string(replPolicy)) : (out << "<null>"));
  out << ", " << "writeEventInfos="; (__isset.writeEventInfos ? (out << to_string(writeEventInfos)) : (out << "<null>"));
  out << ", " << "replLastIdInfo="; (__isset.replLastIdInfo ? (out << to_string(replLastIdInfo)) : (out << "<null>"));
  out << ", " << "keyValue="; (__isset.keyValue ? (out << to_string(keyValue)) : (out << "<null>"));
  out << ", " << "exclWriteEnabled="; (__isset.exclWriteEnabled ? (out << to_string(exclWriteEnabled)) : (out << "<null>"));
  out << ")";
}


ReplTblWriteIdStateRequest::~ReplTblWriteIdStateRequest() throw() {
}


void ReplTblWriteIdStateRequest::__set_validWriteIdlist(const std::string& val) {
  this->validWriteIdlist = val;
}

void ReplTblWriteIdStateRequest::__set_user(const std::string& val) {
  this->user = val;
}

void ReplTblWriteIdStateRequest::__set_hostName(const std::string& val) {
  this->hostName = val;
}

void ReplTblWriteIdStateRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void ReplTblWriteIdStateRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void ReplTblWriteIdStateRequest::__set_partNames(const std::vector<std::string> & val) {
  this->partNames = val;
__isset.partNames = true;
}
std::ostream& operator<<(std::ostream& out, const ReplTblWriteIdStateRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ReplTblWriteIdStateRequest &a, ReplTblWriteIdStateRequest &b) {
  using ::std::swap;
  swap(a.validWriteIdlist, b.validWriteIdlist);
  swap(a.user, b.user);
  swap(a.hostName, b.hostName);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.partNames, b.partNames);
  swap(a.__isset, b.__isset);
}

ReplTblWriteIdStateRequest::ReplTblWriteIdStateRequest(const ReplTblWriteIdStateRequest& other1007) {
  validWriteIdlist = other1007.validWriteIdlist;
  user = other1007.user;
  hostName = other1007.hostName;
  dbName = other1007.dbName;
  tableName = other1007.tableName;
  partNames = other1007.partNames;
  __isset = other1007.__isset;
}
ReplTblWriteIdStateRequest::ReplTblWriteIdStateRequest( ReplTblWriteIdStateRequest&& other1008) {
  validWriteIdlist = std::move(other1008.validWriteIdlist);
  user = std::move(other1008.user);
  hostName = std::move(other1008.hostName);
  dbName = std::move(other1008.dbName);
  tableName = std::move(other1008.tableName);
  partNames = std::move(other1008.partNames);
  __isset = std::move(other1008.__isset);
}
ReplTblWriteIdStateRequest& ReplTblWriteIdStateRequest::operator=(const ReplTblWriteIdStateRequest& other1009) {
  validWriteIdlist = other1009.validWriteIdlist;
  user = other1009.user;
  hostName = other1009.hostName;
  dbName = other1009.dbName;
  tableName = other1009.tableName;
  partNames = other1009.partNames;
  __isset = other1009.__isset;
  return *this;
}
ReplTblWriteIdStateRequest& ReplTblWriteIdStateRequest::operator=(ReplTblWriteIdStateRequest&& other1010) {
  validWriteIdlist = std::move(other1010.validWriteIdlist);
  user = std::move(other1010.user);
  hostName = std::move(other1010.hostName);
  dbName = std::move(other1010.dbName);
  tableName = std::move(other1010.tableName);
  partNames = std::move(other1010.partNames);
  __isset = std::move(other1010.__isset);
  return *this;
}
void ReplTblWriteIdStateRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReplTblWriteIdStateRequest(";
  out << "validWriteIdlist=" << to_string(validWriteIdlist);
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostName=" << to_string(hostName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "partNames="; (__isset.partNames ? (out << to_string(partNames)) : (out << "<null>"));
  out << ")";
}


GetValidWriteIdsRequest::~GetValidWriteIdsRequest() throw() {
}


void GetValidWriteIdsRequest::__set_fullTableNames(const std::vector<std::string> & val) {
  this->fullTableNames = val;
}

void GetValidWriteIdsRequest::__set_validTxnList(const std::string& val) {
  this->validTxnList = val;
__isset.validTxnList = true;
}

void GetValidWriteIdsRequest::__set_writeId(const int64_t val) {
  this->writeId = val;
__isset.writeId = true;
}
std::ostream& operator<<(std::ostream& out, const GetValidWriteIdsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetValidWriteIdsRequest &a, GetValidWriteIdsRequest &b) {
  using ::std::swap;
  swap(a.fullTableNames, b.fullTableNames);
  swap(a.validTxnList, b.validTxnList);
  swap(a.writeId, b.writeId);
  swap(a.__isset, b.__isset);
}

GetValidWriteIdsRequest::GetValidWriteIdsRequest(const GetValidWriteIdsRequest& other1017) {
  fullTableNames = other1017.fullTableNames;
  validTxnList = other1017.validTxnList;
  writeId = other1017.writeId;
  __isset = other1017.__isset;
}
GetValidWriteIdsRequest::GetValidWriteIdsRequest( GetValidWriteIdsRequest&& other1018) {
  fullTableNames = std::move(other1018.fullTableNames);
  validTxnList = std::move(other1018.validTxnList);
  writeId = std::move(other1018.writeId);
  __isset = std::move(other1018.__isset);
}
GetValidWriteIdsRequest& GetValidWriteIdsRequest::operator=(const GetValidWriteIdsRequest& other1019) {
  fullTableNames = other1019.fullTableNames;
  validTxnList = other1019.validTxnList;
  writeId = other1019.writeId;
  __isset = other1019.__isset;
  return *this;
}
GetValidWriteIdsRequest& GetValidWriteIdsRequest::operator=(GetValidWriteIdsRequest&& other1020) {
  fullTableNames = std::move(other1020.fullTableNames);
  validTxnList = std::move(other1020.validTxnList);
  writeId = std::move(other1020.writeId);
  __isset = std::move(other1020.__isset);
  return *this;
}
void GetValidWriteIdsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetValidWriteIdsRequest(";
  out << "fullTableNames=" << to_string(fullTableNames);
  out << ", " << "validTxnList="; (__isset.validTxnList ? (out << to_string(validTxnList)) : (out << "<null>"));
  out << ", " << "writeId="; (__isset.writeId ? (out << to_string(writeId)) : (out << "<null>"));
  out << ")";
}


TableValidWriteIds::~TableValidWriteIds() throw() {
}


void TableValidWriteIds::__set_fullTableName(const std::string& val) {
  this->fullTableName = val;
}

void TableValidWriteIds::__set_writeIdHighWaterMark(const int64_t val) {
  this->writeIdHighWaterMark = val;
}

void TableValidWriteIds::__set_invalidWriteIds(const std::vector<int64_t> & val) {
  this->invalidWriteIds = val;
}

void TableValidWriteIds::__set_minOpenWriteId(const int64_t val) {
  this->minOpenWriteId = val;
__isset.minOpenWriteId = true;
}

void TableValidWriteIds::__set_abortedBits(const std::string& val) {
  this->abortedBits = val;
}
std::ostream& operator<<(std::ostream& out, const TableValidWriteIds& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TableValidWriteIds &a, TableValidWriteIds &b) {
  using ::std::swap;
  swap(a.fullTableName, b.fullTableName);
  swap(a.writeIdHighWaterMark, b.writeIdHighWaterMark);
  swap(a.invalidWriteIds, b.invalidWriteIds);
  swap(a.minOpenWriteId, b.minOpenWriteId);
  swap(a.abortedBits, b.abortedBits);
  swap(a.__isset, b.__isset);
}

TableValidWriteIds::TableValidWriteIds(const TableValidWriteIds& other1027) {
  fullTableName = other1027.fullTableName;
  writeIdHighWaterMark = other1027.writeIdHighWaterMark;
  invalidWriteIds = other1027.invalidWriteIds;
  minOpenWriteId = other1027.minOpenWriteId;
  abortedBits = other1027.abortedBits;
  __isset = other1027.__isset;
}
TableValidWriteIds::TableValidWriteIds( TableValidWriteIds&& other1028) {
  fullTableName = std::move(other1028.fullTableName);
  writeIdHighWaterMark = std::move(other1028.writeIdHighWaterMark);
  invalidWriteIds = std::move(other1028.invalidWriteIds);
  minOpenWriteId = std::move(other1028.minOpenWriteId);
  abortedBits = std::move(other1028.abortedBits);
  __isset = std::move(other1028.__isset);
}
TableValidWriteIds& TableValidWriteIds::operator=(const TableValidWriteIds& other1029) {
  fullTableName = other1029.fullTableName;
  writeIdHighWaterMark = other1029.writeIdHighWaterMark;
  invalidWriteIds = other1029.invalidWriteIds;
  minOpenWriteId = other1029.minOpenWriteId;
  abortedBits = other1029.abortedBits;
  __isset = other1029.__isset;
  return *this;
}
TableValidWriteIds& TableValidWriteIds::operator=(TableValidWriteIds&& other1030) {
  fullTableName = std::move(other1030.fullTableName);
  writeIdHighWaterMark = std::move(other1030.writeIdHighWaterMark);
  invalidWriteIds = std::move(other1030.invalidWriteIds);
  minOpenWriteId = std::move(other1030.minOpenWriteId);
  abortedBits = std::move(other1030.abortedBits);
  __isset = std::move(other1030.__isset);
  return *this;
}
void TableValidWriteIds::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TableValidWriteIds(";
  out << "fullTableName=" << to_string(fullTableName);
  out << ", " << "writeIdHighWaterMark=" << to_string(writeIdHighWaterMark);
  out << ", " << "invalidWriteIds=" << to_string(invalidWriteIds);
  out << ", " << "minOpenWriteId="; (__isset.minOpenWriteId ? (out << to_string(minOpenWriteId)) : (out << "<null>"));
  out << ", " << "abortedBits=" << to_string(abortedBits);
  out << ")";
}


GetValidWriteIdsResponse::~GetValidWriteIdsResponse() throw() {
}


void GetValidWriteIdsResponse::__set_tblValidWriteIds(const std::vector<TableValidWriteIds> & val) {
  this->tblValidWriteIds = val;
}
std::ostream& operator<<(std::ostream& out, const GetValidWriteIdsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetValidWriteIdsResponse &a, GetValidWriteIdsResponse &b) {
  using ::std::swap;
  swap(a.tblValidWriteIds, b.tblValidWriteIds);
}

GetValidWriteIdsResponse::GetValidWriteIdsResponse(const GetValidWriteIdsResponse& other1037) {
  tblValidWriteIds = other1037.tblValidWriteIds;
}
GetValidWriteIdsResponse::GetValidWriteIdsResponse( GetValidWriteIdsResponse&& other1038) {
  tblValidWriteIds = std::move(other1038.tblValidWriteIds);
}
GetValidWriteIdsResponse& GetValidWriteIdsResponse::operator=(const GetValidWriteIdsResponse& other1039) {
  tblValidWriteIds = other1039.tblValidWriteIds;
  return *this;
}
GetValidWriteIdsResponse& GetValidWriteIdsResponse::operator=(GetValidWriteIdsResponse&& other1040) {
  tblValidWriteIds = std::move(other1040.tblValidWriteIds);
  return *this;
}
void GetValidWriteIdsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetValidWriteIdsResponse(";
  out << "tblValidWriteIds=" << to_string(tblValidWriteIds);
  out << ")";
}


TxnToWriteId::~TxnToWriteId() throw() {
}


void TxnToWriteId::__set_txnId(const int64_t val) {
  this->txnId = val;
}

void TxnToWriteId::__set_writeId(const int64_t val) {
  this->writeId = val;
}
std::ostream& operator<<(std::ostream& out, const TxnToWriteId& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TxnToWriteId &a, TxnToWriteId &b) {
  using ::std::swap;
  swap(a.txnId, b.txnId);
  swap(a.writeId, b.writeId);
}

TxnToWriteId::TxnToWriteId(const TxnToWriteId& other1041) {
  txnId = other1041.txnId;
  writeId = other1041.writeId;
}
TxnToWriteId::TxnToWriteId( TxnToWriteId&& other1042) {
  txnId = std::move(other1042.txnId);
  writeId = std::move(other1042.writeId);
}
TxnToWriteId& TxnToWriteId::operator=(const TxnToWriteId& other1043) {
  txnId = other1043.txnId;
  writeId = other1043.writeId;
  return *this;
}
TxnToWriteId& TxnToWriteId::operator=(TxnToWriteId&& other1044) {
  txnId = std::move(other1044.txnId);
  writeId = std::move(other1044.writeId);
  return *this;
}
void TxnToWriteId::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TxnToWriteId(";
  out << "txnId=" << to_string(txnId);
  out << ", " << "writeId=" << to_string(writeId);
  out << ")";
}


AllocateTableWriteIdsRequest::~AllocateTableWriteIdsRequest() throw() {
}


void AllocateTableWriteIdsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void AllocateTableWriteIdsRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void AllocateTableWriteIdsRequest::__set_txnIds(const std::vector<int64_t> & val) {
  this->txnIds = val;
__isset.txnIds = true;
}

void AllocateTableWriteIdsRequest::__set_replPolicy(const std::string& val) {
  this->replPolicy = val;
__isset.replPolicy = true;
}

void AllocateTableWriteIdsRequest::__set_srcTxnToWriteIdList(const std::vector<TxnToWriteId> & val) {
  this->srcTxnToWriteIdList = val;
__isset.srcTxnToWriteIdList = true;
}
std::ostream& operator<<(std::ostream& out, const AllocateTableWriteIdsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AllocateTableWriteIdsRequest &a, AllocateTableWriteIdsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.txnIds, b.txnIds);
  swap(a.replPolicy, b.replPolicy);
  swap(a.srcTxnToWriteIdList, b.srcTxnToWriteIdList);
  swap(a.__isset, b.__isset);
}

AllocateTableWriteIdsRequest::AllocateTableWriteIdsRequest(const AllocateTableWriteIdsRequest& other1057) {
  dbName = other1057.dbName;
  tableName = other1057.tableName;
  txnIds = other1057.txnIds;
  replPolicy = other1057.replPolicy;
  srcTxnToWriteIdList = other1057.srcTxnToWriteIdList;
  __isset = other1057.__isset;
}
AllocateTableWriteIdsRequest::AllocateTableWriteIdsRequest( AllocateTableWriteIdsRequest&& other1058) {
  dbName = std::move(other1058.dbName);
  tableName = std::move(other1058.tableName);
  txnIds = std::move(other1058.txnIds);
  replPolicy = std::move(other1058.replPolicy);
  srcTxnToWriteIdList = std::move(other1058.srcTxnToWriteIdList);
  __isset = std::move(other1058.__isset);
}
AllocateTableWriteIdsRequest& AllocateTableWriteIdsRequest::operator=(const AllocateTableWriteIdsRequest& other1059) {
  dbName = other1059.dbName;
  tableName = other1059.tableName;
  txnIds = other1059.txnIds;
  replPolicy = other1059.replPolicy;
  srcTxnToWriteIdList = other1059.srcTxnToWriteIdList;
  __isset = other1059.__isset;
  return *this;
}
AllocateTableWriteIdsRequest& AllocateTableWriteIdsRequest::operator=(AllocateTableWriteIdsRequest&& other1060) {
  dbName = std::move(other1060.dbName);
  tableName = std::move(other1060.tableName);
  txnIds = std::move(other1060.txnIds);
  replPolicy = std::move(other1060.replPolicy);
  srcTxnToWriteIdList = std::move(other1060.srcTxnToWriteIdList);
  __isset = std::move(other1060.__isset);
  return *this;
}
void AllocateTableWriteIdsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AllocateTableWriteIdsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "txnIds="; (__isset.txnIds ? (out << to_string(txnIds)) : (out << "<null>"));
  out << ", " << "replPolicy="; (__isset.replPolicy ? (out << to_string(replPolicy)) : (out << "<null>"));
  out << ", " << "srcTxnToWriteIdList="; (__isset.srcTxnToWriteIdList ? (out << to_string(srcTxnToWriteIdList)) : (out << "<null>"));
  out << ")";
}


AllocateTableWriteIdsResponse::~AllocateTableWriteIdsResponse() throw() {
}


void AllocateTableWriteIdsResponse::__set_txnToWriteIds(const std::vector<TxnToWriteId> & val) {
  this->txnToWriteIds = val;
}
std::ostream& operator<<(std::ostream& out, const AllocateTableWriteIdsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AllocateTableWriteIdsResponse &a, AllocateTableWriteIdsResponse &b) {
  using ::std::swap;
  swap(a.txnToWriteIds, b.txnToWriteIds);
}

AllocateTableWriteIdsResponse::AllocateTableWriteIdsResponse(const AllocateTableWriteIdsResponse& other1067) {
  txnToWriteIds = other1067.txnToWriteIds;
}
AllocateTableWriteIdsResponse::AllocateTableWriteIdsResponse( AllocateTableWriteIdsResponse&& other1068) {
  txnToWriteIds = std::move(other1068.txnToWriteIds);
}
AllocateTableWriteIdsResponse& AllocateTableWriteIdsResponse::operator=(const AllocateTableWriteIdsResponse& other1069) {
  txnToWriteIds = other1069.txnToWriteIds;
  return *this;
}
AllocateTableWriteIdsResponse& AllocateTableWriteIdsResponse::operator=(AllocateTableWriteIdsResponse&& other1070) {
  txnToWriteIds = std::move(other1070.txnToWriteIds);
  return *this;
}
void AllocateTableWriteIdsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AllocateTableWriteIdsResponse(";
  out << "txnToWriteIds=" << to_string(txnToWriteIds);
  out << ")";
}


MaxAllocatedTableWriteIdRequest::~MaxAllocatedTableWriteIdRequest() throw() {
}


void MaxAllocatedTableWriteIdRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void MaxAllocatedTableWriteIdRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
}
std::ostream& operator<<(std::ostream& out, const MaxAllocatedTableWriteIdRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(MaxAllocatedTableWriteIdRequest &a, MaxAllocatedTableWriteIdRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
}

MaxAllocatedTableWriteIdRequest::MaxAllocatedTableWriteIdRequest(const MaxAllocatedTableWriteIdRequest& other1071) {
  dbName = other1071.dbName;
  tableName = other1071.tableName;
}
MaxAllocatedTableWriteIdRequest::MaxAllocatedTableWriteIdRequest( MaxAllocatedTableWriteIdRequest&& other1072) {
  dbName = std::move(other1072.dbName);
  tableName = std::move(other1072.tableName);
}
MaxAllocatedTableWriteIdRequest& MaxAllocatedTableWriteIdRequest::operator=(const MaxAllocatedTableWriteIdRequest& other1073) {
  dbName = other1073.dbName;
  tableName = other1073.tableName;
  return *this;
}
MaxAllocatedTableWriteIdRequest& MaxAllocatedTableWriteIdRequest::operator=(MaxAllocatedTableWriteIdRequest&& other1074) {
  dbName = std::move(other1074.dbName);
  tableName = std::move(other1074.tableName);
  return *this;
}
void MaxAllocatedTableWriteIdRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MaxAllocatedTableWriteIdRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ")";
}


MaxAllocatedTableWriteIdResponse::~MaxAllocatedTableWriteIdResponse() throw() {
}


void MaxAllocatedTableWriteIdResponse::__set_maxWriteId(const int64_t val) {
  this->maxWriteId = val;
}
std::ostream& operator<<(std::ostream& out, const MaxAllocatedTableWriteIdResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(MaxAllocatedTableWriteIdResponse &a, MaxAllocatedTableWriteIdResponse &b) {
  using ::std::swap;
  swap(a.maxWriteId, b.maxWriteId);
}

MaxAllocatedTableWriteIdResponse::MaxAllocatedTableWriteIdResponse(const MaxAllocatedTableWriteIdResponse& other1075) {
  maxWriteId = other1075.maxWriteId;
}
MaxAllocatedTableWriteIdResponse::MaxAllocatedTableWriteIdResponse( MaxAllocatedTableWriteIdResponse&& other1076) {
  maxWriteId = std::move(other1076.maxWriteId);
}
MaxAllocatedTableWriteIdResponse& MaxAllocatedTableWriteIdResponse::operator=(const MaxAllocatedTableWriteIdResponse& other1077) {
  maxWriteId = other1077.maxWriteId;
  return *this;
}
MaxAllocatedTableWriteIdResponse& MaxAllocatedTableWriteIdResponse::operator=(MaxAllocatedTableWriteIdResponse&& other1078) {
  maxWriteId = std::move(other1078.maxWriteId);
  return *this;
}
void MaxAllocatedTableWriteIdResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MaxAllocatedTableWriteIdResponse(";
  out << "maxWriteId=" << to_string(maxWriteId);
  out << ")";
}


SeedTableWriteIdsRequest::~SeedTableWriteIdsRequest() throw() {
}


void SeedTableWriteIdsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void SeedTableWriteIdsRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void SeedTableWriteIdsRequest::__set_seedWriteId(const int64_t val) {
  this->seedWriteId = val;
}
std::ostream& operator<<(std::ostream& out, const SeedTableWriteIdsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SeedTableWriteIdsRequest &a, SeedTableWriteIdsRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.seedWriteId, b.seedWriteId);
}

SeedTableWriteIdsRequest::SeedTableWriteIdsRequest(const SeedTableWriteIdsRequest& other1079) {
  dbName = other1079.dbName;
  tableName = other1079.tableName;
  seedWriteId = other1079.seedWriteId;
}
SeedTableWriteIdsRequest::SeedTableWriteIdsRequest( SeedTableWriteIdsRequest&& other1080) {
  dbName = std::move(other1080.dbName);
  tableName = std::move(other1080.tableName);
  seedWriteId = std::move(other1080.seedWriteId);
}
SeedTableWriteIdsRequest& SeedTableWriteIdsRequest::operator=(const SeedTableWriteIdsRequest& other1081) {
  dbName = other1081.dbName;
  tableName = other1081.tableName;
  seedWriteId = other1081.seedWriteId;
  return *this;
}
SeedTableWriteIdsRequest& SeedTableWriteIdsRequest::operator=(SeedTableWriteIdsRequest&& other1082) {
  dbName = std::move(other1082.dbName);
  tableName = std::move(other1082.tableName);
  seedWriteId = std::move(other1082.seedWriteId);
  return *this;
}
void SeedTableWriteIdsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SeedTableWriteIdsRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "seedWriteId=" << to_string(seedWriteId);
  out << ")";
}


SeedTxnIdRequest::~SeedTxnIdRequest() throw() {
}


void SeedTxnIdRequest::__set_seedTxnId(const int64_t val) {
  this->seedTxnId = val;
}
std::ostream& operator<<(std::ostream& out, const SeedTxnIdRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SeedTxnIdRequest &a, SeedTxnIdRequest &b) {
  using ::std::swap;
  swap(a.seedTxnId, b.seedTxnId);
}

SeedTxnIdRequest::SeedTxnIdRequest(const SeedTxnIdRequest& other1083) {
  seedTxnId = other1083.seedTxnId;
}
SeedTxnIdRequest::SeedTxnIdRequest( SeedTxnIdRequest&& other1084) {
  seedTxnId = std::move(other1084.seedTxnId);
}
SeedTxnIdRequest& SeedTxnIdRequest::operator=(const SeedTxnIdRequest& other1085) {
  seedTxnId = other1085.seedTxnId;
  return *this;
}
SeedTxnIdRequest& SeedTxnIdRequest::operator=(SeedTxnIdRequest&& other1086) {
  seedTxnId = std::move(other1086.seedTxnId);
  return *this;
}
void SeedTxnIdRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SeedTxnIdRequest(";
  out << "seedTxnId=" << to_string(seedTxnId);
  out << ")";
}


LockComponent::~LockComponent() throw() {
}


void LockComponent::__set_type(const LockType::type val) {
  this->type = val;
}

void LockComponent::__set_level(const LockLevel::type val) {
  this->level = val;
}

void LockComponent::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void LockComponent::__set_tablename(const std::string& val) {
  this->tablename = val;
__isset.tablename = true;
}

void LockComponent::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}

void LockComponent::__set_operationType(const DataOperationType::type val) {
  this->operationType = val;
__isset.operationType = true;
}

void LockComponent::__set_isTransactional(const bool val) {
  this->isTransactional = val;
__isset.isTransactional = true;
}

void LockComponent::__set_isDynamicPartitionWrite(const bool val) {
  this->isDynamicPartitionWrite = val;
__isset.isDynamicPartitionWrite = true;
}
std::ostream& operator<<(std::ostream& out, const LockComponent& obj)
{
  obj.printTo(out);
  return out;
}


void swap(LockComponent &a, LockComponent &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.level, b.level);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.operationType, b.operationType);
  swap(a.isTransactional, b.isTransactional);
  swap(a.isDynamicPartitionWrite, b.isDynamicPartitionWrite);
  swap(a.__isset, b.__isset);
}

LockComponent::LockComponent(const LockComponent& other1090) {
  type = other1090.type;
  level = other1090.level;
  dbname = other1090.dbname;
  tablename = other1090.tablename;
  partitionname = other1090.partitionname;
  operationType = other1090.operationType;
  isTransactional = other1090.isTransactional;
  isDynamicPartitionWrite = other1090.isDynamicPartitionWrite;
  __isset = other1090.__isset;
}
LockComponent::LockComponent( LockComponent&& other1091) {
  type = std::move(other1091.type);
  level = std::move(other1091.level);
  dbname = std::move(other1091.dbname);
  tablename = std::move(other1091.tablename);
  partitionname = std::move(other1091.partitionname);
  operationType = std::move(other1091.operationType);
  isTransactional = std::move(other1091.isTransactional);
  isDynamicPartitionWrite = std::move(other1091.isDynamicPartitionWrite);
  __isset = std::move(other1091.__isset);
}
LockComponent& LockComponent::operator=(const LockComponent& other1092) {
  type = other1092.type;
  level = other1092.level;
  dbname = other1092.dbname;
  tablename = other1092.tablename;
  partitionname = other1092.partitionname;
  operationType = other1092.operationType;
  isTransactional = other1092.isTransactional;
  isDynamicPartitionWrite = other1092.isDynamicPartitionWrite;
  __isset = other1092.__isset;
  return *this;
}
LockComponent& LockComponent::operator=(LockComponent&& other1093) {
  type = std::move(other1093.type);
  level = std::move(other1093.level);
  dbname = std::move(other1093.dbname);
  tablename = std::move(other1093.tablename);
  partitionname = std::move(other1093.partitionname);
  operationType = std::move(other1093.operationType);
  isTransactional = std::move(other1093.isTransactional);
  isDynamicPartitionWrite = std::move(other1093.isDynamicPartitionWrite);
  __isset = std::move(other1093.__isset);
  return *this;
}
void LockComponent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LockComponent(";
  out << "type=" << to_string(type);
  out << ", " << "level=" << to_string(level);
  out << ", " << "dbname=" << to_string(dbname);
  out << ", " << "tablename="; (__isset.tablename ? (out << to_string(tablename)) : (out << "<null>"));
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ", " << "operationType="; (__isset.operationType ? (out << to_string(operationType)) : (out << "<null>"));
  out << ", " << "isTransactional="; (__isset.isTransactional ? (out << to_string(isTransactional)) : (out << "<null>"));
  out << ", " << "isDynamicPartitionWrite="; (__isset.isDynamicPartitionWrite ? (out << to_string(isDynamicPartitionWrite)) : (out << "<null>"));
  out << ")";
}


LockRequest::~LockRequest() throw() {
}


void LockRequest::__set_component(const std::vector<LockComponent> & val) {
  this->component = val;
}

void LockRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

void LockRequest::__set_user(const std::string& val) {
  this->user = val;
}

void LockRequest::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void LockRequest::__set_agentInfo(const std::string& val) {
  this->agentInfo = val;
__isset.agentInfo = true;
}

void LockRequest::__set_zeroWaitReadEnabled(const bool val) {
  this->zeroWaitReadEnabled = val;
__isset.zeroWaitReadEnabled = true;
}
std::ostream& operator<<(std::ostream& out, const LockRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(LockRequest &a, LockRequest &b) {
  using ::std::swap;
  swap(a.component, b.component);
  swap(a.txnid, b.txnid);
  swap(a.user, b.user);
  swap(a.hostname, b.hostname);
  swap(a.agentInfo, b.agentInfo);
  swap(a.zeroWaitReadEnabled, b.zeroWaitReadEnabled);
  swap(a.__isset, b.__isset);
}

LockRequest::LockRequest(const LockRequest& other1100) {
  component = other1100.component;
  txnid = other1100.txnid;
  user = other1100.user;
  hostname = other1100.hostname;
  agentInfo = other1100.agentInfo;
  zeroWaitReadEnabled = other1100.zeroWaitReadEnabled;
  __isset = other1100.__isset;
}
LockRequest::LockRequest( LockRequest&& other1101) {
  component = std::move(other1101.component);
  txnid = std::move(other1101.txnid);
  user = std::move(other1101.user);
  hostname = std::move(other1101.hostname);
  agentInfo = std::move(other1101.agentInfo);
  zeroWaitReadEnabled = std::move(other1101.zeroWaitReadEnabled);
  __isset = std::move(other1101.__isset);
}
LockRequest& LockRequest::operator=(const LockRequest& other1102) {
  component = other1102.component;
  txnid = other1102.txnid;
  user = other1102.user;
  hostname = other1102.hostname;
  agentInfo = other1102.agentInfo;
  zeroWaitReadEnabled = other1102.zeroWaitReadEnabled;
  __isset = other1102.__isset;
  return *this;
}
LockRequest& LockRequest::operator=(LockRequest&& other1103) {
  component = std::move(other1103.component);
  txnid = std::move(other1103.txnid);
  user = std::move(other1103.user);
  hostname = std::move(other1103.hostname);
  agentInfo = std::move(other1103.agentInfo);
  zeroWaitReadEnabled = std::move(other1103.zeroWaitReadEnabled);
  __isset = std::move(other1103.__isset);
  return *this;
}
void LockRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LockRequest(";
  out << "component=" << to_string(component);
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "agentInfo="; (__isset.agentInfo ? (out << to_string(agentInfo)) : (out << "<null>"));
  out << ", " << "zeroWaitReadEnabled="; (__isset.zeroWaitReadEnabled ? (out << to_string(zeroWaitReadEnabled)) : (out << "<null>"));
  out << ")";
}


LockResponse::~LockResponse() throw() {
}


void LockResponse::__set_lockid(const int64_t val) {
  this->lockid = val;
}

void LockResponse::__set_state(const LockState::type val) {
  this->state = val;
}

void LockResponse::__set_errorMessage(const std::string& val) {
  this->errorMessage = val;
__isset.errorMessage = true;
}
std::ostream& operator<<(std::ostream& out, const LockResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(LockResponse &a, LockResponse &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
  swap(a.state, b.state);
  swap(a.errorMessage, b.errorMessage);
  swap(a.__isset, b.__isset);
}

LockResponse::LockResponse(const LockResponse& other1105) {
  lockid = other1105.lockid;
  state = other1105.state;
  errorMessage = other1105.errorMessage;
  __isset = other1105.__isset;
}
LockResponse::LockResponse( LockResponse&& other1106) {
  lockid = std::move(other1106.lockid);
  state = std::move(other1106.state);
  errorMessage = std::move(other1106.errorMessage);
  __isset = std::move(other1106.__isset);
}
LockResponse& LockResponse::operator=(const LockResponse& other1107) {
  lockid = other1107.lockid;
  state = other1107.state;
  errorMessage = other1107.errorMessage;
  __isset = other1107.__isset;
  return *this;
}
LockResponse& LockResponse::operator=(LockResponse&& other1108) {
  lockid = std::move(other1108.lockid);
  state = std::move(other1108.state);
  errorMessage = std::move(other1108.errorMessage);
  __isset = std::move(other1108.__isset);
  return *this;
}
void LockResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LockResponse(";
  out << "lockid=" << to_string(lockid);
  out << ", " << "state=" << to_string(state);
  out << ", " << "errorMessage="; (__isset.errorMessage ? (out << to_string(errorMessage)) : (out << "<null>"));
  out << ")";
}


CheckLockRequest::~CheckLockRequest() throw() {
}


void CheckLockRequest::__set_lockid(const int64_t val) {
  this->lockid = val;
}

void CheckLockRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

void CheckLockRequest::__set_elapsed_ms(const int64_t val) {
  this->elapsed_ms = val;
__isset.elapsed_ms = true;
}
std::ostream& operator<<(std::ostream& out, const CheckLockRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CheckLockRequest &a, CheckLockRequest &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
  swap(a.txnid, b.txnid);
  swap(a.elapsed_ms, b.elapsed_ms);
  swap(a.__isset, b.__isset);
}

CheckLockRequest::CheckLockRequest(const CheckLockRequest& other1109) {
  lockid = other1109.lockid;
  txnid = other1109.txnid;
  elapsed_ms = other1109.elapsed_ms;
  __isset = other1109.__isset;
}
CheckLockRequest::CheckLockRequest( CheckLockRequest&& other1110) {
  lockid = std::move(other1110.lockid);
  txnid = std::move(other1110.txnid);
  elapsed_ms = std::move(other1110.elapsed_ms);
  __isset = std::move(other1110.__isset);
}
CheckLockRequest& CheckLockRequest::operator=(const CheckLockRequest& other1111) {
  lockid = other1111.lockid;
  txnid = other1111.txnid;
  elapsed_ms = other1111.elapsed_ms;
  __isset = other1111.__isset;
  return *this;
}
CheckLockRequest& CheckLockRequest::operator=(CheckLockRequest&& other1112) {
  lockid = std::move(other1112.lockid);
  txnid = std::move(other1112.txnid);
  elapsed_ms = std::move(other1112.elapsed_ms);
  __isset = std::move(other1112.__isset);
  return *this;
}
void CheckLockRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckLockRequest(";
  out << "lockid=" << to_string(lockid);
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ", " << "elapsed_ms="; (__isset.elapsed_ms ? (out << to_string(elapsed_ms)) : (out << "<null>"));
  out << ")";
}


UnlockRequest::~UnlockRequest() throw() {
}


void UnlockRequest::__set_lockid(const int64_t val) {
  this->lockid = val;
}
std::ostream& operator<<(std::ostream& out, const UnlockRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(UnlockRequest &a, UnlockRequest &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
}

UnlockRequest::UnlockRequest(const UnlockRequest& other1113) {
  lockid = other1113.lockid;
}
UnlockRequest::UnlockRequest( UnlockRequest&& other1114) {
  lockid = std::move(other1114.lockid);
}
UnlockRequest& UnlockRequest::operator=(const UnlockRequest& other1115) {
  lockid = other1115.lockid;
  return *this;
}
UnlockRequest& UnlockRequest::operator=(UnlockRequest&& other1116) {
  lockid = std::move(other1116.lockid);
  return *this;
}
void UnlockRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnlockRequest(";
  out << "lockid=" << to_string(lockid);
  out << ")";
}


ShowLocksRequest::~ShowLocksRequest() throw() {
}


void ShowLocksRequest::__set_dbname(const std::string& val) {
  this->dbname = val;
__isset.dbname = true;
}

void ShowLocksRequest::__set_tablename(const std::string& val) {
  this->tablename = val;
__isset.tablename = true;
}

void ShowLocksRequest::__set_partname(const std::string& val) {
  this->partname = val;
__isset.partname = true;
}

void ShowLocksRequest::__set_isExtended(const bool val) {
  this->isExtended = val;
__isset.isExtended = true;
}

void ShowLocksRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}
std::ostream& operator<<(std::ostream& out, const ShowLocksRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ShowLocksRequest &a, ShowLocksRequest &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partname, b.partname);
  swap(a.isExtended, b.isExtended);
  swap(a.txnid, b.txnid);
  swap(a.__isset, b.__isset);
}

ShowLocksRequest::ShowLocksRequest(const ShowLocksRequest& other1117) {
  dbname = other1117.dbname;
  tablename = other1117.tablename;
  partname = other1117.partname;
  isExtended = other1117.isExtended;
  txnid = other1117.txnid;
  __isset = other1117.__isset;
}
ShowLocksRequest::ShowLocksRequest( ShowLocksRequest&& other1118) {
  dbname = std::move(other1118.dbname);
  tablename = std::move(other1118.tablename);
  partname = std::move(other1118.partname);
  isExtended = std::move(other1118.isExtended);
  txnid = std::move(other1118.txnid);
  __isset = std::move(other1118.__isset);
}
ShowLocksRequest& ShowLocksRequest::operator=(const ShowLocksRequest& other1119) {
  dbname = other1119.dbname;
  tablename = other1119.tablename;
  partname = other1119.partname;
  isExtended = other1119.isExtended;
  txnid = other1119.txnid;
  __isset = other1119.__isset;
  return *this;
}
ShowLocksRequest& ShowLocksRequest::operator=(ShowLocksRequest&& other1120) {
  dbname = std::move(other1120.dbname);
  tablename = std::move(other1120.tablename);
  partname = std::move(other1120.partname);
  isExtended = std::move(other1120.isExtended);
  txnid = std::move(other1120.txnid);
  __isset = std::move(other1120.__isset);
  return *this;
}
void ShowLocksRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowLocksRequest(";
  out << "dbname="; (__isset.dbname ? (out << to_string(dbname)) : (out << "<null>"));
  out << ", " << "tablename="; (__isset.tablename ? (out << to_string(tablename)) : (out << "<null>"));
  out << ", " << "partname="; (__isset.partname ? (out << to_string(partname)) : (out << "<null>"));
  out << ", " << "isExtended="; (__isset.isExtended ? (out << to_string(isExtended)) : (out << "<null>"));
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ")";
}


ShowLocksResponseElement::~ShowLocksResponseElement() throw() {
}


void ShowLocksResponseElement::__set_lockid(const int64_t val) {
  this->lockid = val;
}

void ShowLocksResponseElement::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void ShowLocksResponseElement::__set_tablename(const std::string& val) {
  this->tablename = val;
__isset.tablename = true;
}

void ShowLocksResponseElement::__set_partname(const std::string& val) {
  this->partname = val;
__isset.partname = true;
}

void ShowLocksResponseElement::__set_state(const LockState::type val) {
  this->state = val;
}

void ShowLocksResponseElement::__set_type(const LockType::type val) {
  this->type = val;
}

void ShowLocksResponseElement::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

void ShowLocksResponseElement::__set_lastheartbeat(const int64_t val) {
  this->lastheartbeat = val;
}

void ShowLocksResponseElement::__set_acquiredat(const int64_t val) {
  this->acquiredat = val;
__isset.acquiredat = true;
}

void ShowLocksResponseElement::__set_user(const std::string& val) {
  this->user = val;
}

void ShowLocksResponseElement::__set_hostname(const std::string& val) {
  this->hostname = val;
}

void ShowLocksResponseElement::__set_heartbeatCount(const int32_t val) {
  this->heartbeatCount = val;
__isset.heartbeatCount = true;
}

void ShowLocksResponseElement::__set_agentInfo(const std::string& val) {
  this->agentInfo = val;
__isset.agentInfo = true;
}

void ShowLocksResponseElement::__set_blockedByExtId(const int64_t val) {
  this->blockedByExtId = val;
__isset.blockedByExtId = true;
}

void ShowLocksResponseElement::__set_blockedByIntId(const int64_t val) {
  this->blockedByIntId = val;
__isset.blockedByIntId = true;
}

void ShowLocksResponseElement::__set_lockIdInternal(const int64_t val) {
  this->lockIdInternal = val;
__isset.lockIdInternal = true;
}
std::ostream& operator<<(std::ostream& out, const ShowLocksResponseElement& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ShowLocksResponseElement &a, ShowLocksResponseElement &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partname, b.partname);
  swap(a.state, b.state);
  swap(a.type, b.type);
  swap(a.txnid, b.txnid);
  swap(a.lastheartbeat, b.lastheartbeat);
  swap(a.acquiredat, b.acquiredat);
  swap(a.user, b.user);
  swap(a.hostname, b.hostname);
  swap(a.heartbeatCount, b.heartbeatCount);
  swap(a.agentInfo, b.agentInfo);
  swap(a.blockedByExtId, b.blockedByExtId);
  swap(a.blockedByIntId, b.blockedByIntId);
  swap(a.lockIdInternal, b.lockIdInternal);
  swap(a.__isset, b.__isset);
}

ShowLocksResponseElement::ShowLocksResponseElement(const ShowLocksResponseElement& other1123) {
  lockid = other1123.lockid;
  dbname = other1123.dbname;
  tablename = other1123.tablename;
  partname = other1123.partname;
  state = other1123.state;
  type = other1123.type;
  txnid = other1123.txnid;
  lastheartbeat = other1123.lastheartbeat;
  acquiredat = other1123.acquiredat;
  user = other1123.user;
  hostname = other1123.hostname;
  heartbeatCount = other1123.heartbeatCount;
  agentInfo = other1123.agentInfo;
  blockedByExtId = other1123.blockedByExtId;
  blockedByIntId = other1123.blockedByIntId;
  lockIdInternal = other1123.lockIdInternal;
  __isset = other1123.__isset;
}
ShowLocksResponseElement::ShowLocksResponseElement( ShowLocksResponseElement&& other1124) {
  lockid = std::move(other1124.lockid);
  dbname = std::move(other1124.dbname);
  tablename = std::move(other1124.tablename);
  partname = std::move(other1124.partname);
  state = std::move(other1124.state);
  type = std::move(other1124.type);
  txnid = std::move(other1124.txnid);
  lastheartbeat = std::move(other1124.lastheartbeat);
  acquiredat = std::move(other1124.acquiredat);
  user = std::move(other1124.user);
  hostname = std::move(other1124.hostname);
  heartbeatCount = std::move(other1124.heartbeatCount);
  agentInfo = std::move(other1124.agentInfo);
  blockedByExtId = std::move(other1124.blockedByExtId);
  blockedByIntId = std::move(other1124.blockedByIntId);
  lockIdInternal = std::move(other1124.lockIdInternal);
  __isset = std::move(other1124.__isset);
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(const ShowLocksResponseElement& other1125) {
  lockid = other1125.lockid;
  dbname = other1125.dbname;
  tablename = other1125.tablename;
  partname = other1125.partname;
  state = other1125.state;
  type = other1125.type;
  txnid = other1125.txnid;
  lastheartbeat = other1125.lastheartbeat;
  acquiredat = other1125.acquiredat;
  user = other1125.user;
  hostname = other1125.hostname;
  heartbeatCount = other1125.heartbeatCount;
  agentInfo = other1125.agentInfo;
  blockedByExtId = other1125.blockedByExtId;
  blockedByIntId = other1125.blockedByIntId;
  lockIdInternal = other1125.lockIdInternal;
  __isset = other1125.__isset;
  return *this;
}
ShowLocksResponseElement& ShowLocksResponseElement::operator=(ShowLocksResponseElement&& other1126) {
  lockid = std::move(other1126.lockid);
  dbname = std::move(other1126.dbname);
  tablename = std::move(other1126.tablename);
  partname = std::move(other1126.partname);
  state = std::move(other1126.state);
  type = std::move(other1126.type);
  txnid = std::move(other1126.txnid);
  lastheartbeat = std::move(other1126.lastheartbeat);
  acquiredat = std::move(other1126.acquiredat);
  user = std::move(other1126.user);
  hostname = std::move(other1126.hostname);
  heartbeatCount = std::move(other1126.heartbeatCount);
  agentInfo = std::move(other1126.agentInfo);
  blockedByExtId = std::move(other1126.blockedByExtId);
  blockedByIntId = std::move(other1126.blockedByIntId);
  lockIdInternal = std::move(other1126.lockIdInternal);
  __isset = std::move(other1126.__isset);
  return *this;
}
void ShowLocksResponseElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowLocksResponseElement(";
  out << "lockid=" << to_string(lockid);
  out << ", " << "dbname=" << to_string(dbname);
  out << ", " << "tablename="; (__isset.tablename ? (out << to_string(tablename)) : (out << "<null>"));
  out << ", " << "partname="; (__isset.partname ? (out << to_string(partname)) : (out << "<null>"));
  out << ", " << "state=" << to_string(state);
  out << ", " << "type=" << to_string(type);
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ", " << "lastheartbeat=" << to_string(lastheartbeat);
  out << ", " << "acquiredat="; (__isset.acquiredat ? (out << to_string(acquiredat)) : (out << "<null>"));
  out << ", " << "user=" << to_string(user);
  out << ", " << "hostname=" << to_string(hostname);
  out << ", " << "heartbeatCount="; (__isset.heartbeatCount ? (out << to_string(heartbeatCount)) : (out << "<null>"));
  out << ", " << "agentInfo="; (__isset.agentInfo ? (out << to_string(agentInfo)) : (out << "<null>"));
  out << ", " << "blockedByExtId="; (__isset.blockedByExtId ? (out << to_string(blockedByExtId)) : (out << "<null>"));
  out << ", " << "blockedByIntId="; (__isset.blockedByIntId ? (out << to_string(blockedByIntId)) : (out << "<null>"));
  out << ", " << "lockIdInternal="; (__isset.lockIdInternal ? (out << to_string(lockIdInternal)) : (out << "<null>"));
  out << ")";
}


ShowLocksResponse::~ShowLocksResponse() throw() {
}


void ShowLocksResponse::__set_locks(const std::vector<ShowLocksResponseElement> & val) {
  this->locks = val;
}
std::ostream& operator<<(std::ostream& out, const ShowLocksResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ShowLocksResponse &a, ShowLocksResponse &b) {
  using ::std::swap;
  swap(a.locks, b.locks);
  swap(a.__isset, b.__isset);
}

ShowLocksResponse::ShowLocksResponse(const ShowLocksResponse& other1133) {
  locks = other1133.locks;
  __isset = other1133.__isset;
}
ShowLocksResponse::ShowLocksResponse( ShowLocksResponse&& other1134) {
  locks = std::move(other1134.locks);
  __isset = std::move(other1134.__isset);
}
ShowLocksResponse& ShowLocksResponse::operator=(const ShowLocksResponse& other1135) {
  locks = other1135.locks;
  __isset = other1135.__isset;
  return *this;
}
ShowLocksResponse& ShowLocksResponse::operator=(ShowLocksResponse&& other1136) {
  locks = std::move(other1136.locks);
  __isset = std::move(other1136.__isset);
  return *this;
}
void ShowLocksResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowLocksResponse(";
  out << "locks=" << to_string(locks);
  out << ")";
}


HeartbeatRequest::~HeartbeatRequest() throw() {
}


void HeartbeatRequest::__set_lockid(const int64_t val) {
  this->lockid = val;
__isset.lockid = true;
}

void HeartbeatRequest::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}
std::ostream& operator<<(std::ostream& out, const HeartbeatRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(HeartbeatRequest &a, HeartbeatRequest &b) {
  using ::std::swap;
  swap(a.lockid, b.lockid);
  swap(a.txnid, b.txnid);
  swap(a.__isset, b.__isset);
}

HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& other1137) {
  lockid = other1137.lockid;
  txnid = other1137.txnid;
  __isset = other1137.__isset;
}
HeartbeatRequest::HeartbeatRequest( HeartbeatRequest&& other1138) {
  lockid = std::move(other1138.lockid);
  txnid = std::move(other1138.txnid);
  __isset = std::move(other1138.__isset);
}
HeartbeatRequest& HeartbeatRequest::operator=(const HeartbeatRequest& other1139) {
  lockid = other1139.lockid;
  txnid = other1139.txnid;
  __isset = other1139.__isset;
  return *this;
}
HeartbeatRequest& HeartbeatRequest::operator=(HeartbeatRequest&& other1140) {
  lockid = std::move(other1140.lockid);
  txnid = std::move(other1140.txnid);
  __isset = std::move(other1140.__isset);
  return *this;
}
void HeartbeatRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeartbeatRequest(";
  out << "lockid="; (__isset.lockid ? (out << to_string(lockid)) : (out << "<null>"));
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ")";
}


HeartbeatTxnRangeRequest::~HeartbeatTxnRangeRequest() throw() {
}


void HeartbeatTxnRangeRequest::__set_min(const int64_t val) {
  this->min = val;
}

void HeartbeatTxnRangeRequest::__set_max(const int64_t val) {
  this->max = val;
}
std::ostream& operator<<(std::ostream& out, const HeartbeatTxnRangeRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(HeartbeatTxnRangeRequest &a, HeartbeatTxnRangeRequest &b) {
  using ::std::swap;
  swap(a.min, b.min);
  swap(a.max, b.max);
}

HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest& other1141) {
  min = other1141.min;
  max = other1141.max;
}
HeartbeatTxnRangeRequest::HeartbeatTxnRangeRequest( HeartbeatTxnRangeRequest&& other1142) {
  min = std::move(other1142.min);
  max = std::move(other1142.max);
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(const HeartbeatTxnRangeRequest& other1143) {
  min = other1143.min;
  max = other1143.max;
  return *this;
}
HeartbeatTxnRangeRequest& HeartbeatTxnRangeRequest::operator=(HeartbeatTxnRangeRequest&& other1144) {
  min = std::move(other1144.min);
  max = std::move(other1144.max);
  return *this;
}
void HeartbeatTxnRangeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeartbeatTxnRangeRequest(";
  out << "min=" << to_string(min);
  out << ", " << "max=" << to_string(max);
  out << ")";
}


HeartbeatTxnRangeResponse::~HeartbeatTxnRangeResponse() throw() {
}


void HeartbeatTxnRangeResponse::__set_aborted(const std::set<int64_t> & val) {
  this->aborted = val;
}

void HeartbeatTxnRangeResponse::__set_nosuch(const std::set<int64_t> & val) {
  this->nosuch = val;
}
std::ostream& operator<<(std::ostream& out, const HeartbeatTxnRangeResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(HeartbeatTxnRangeResponse &a, HeartbeatTxnRangeResponse &b) {
  using ::std::swap;
  swap(a.aborted, b.aborted);
  swap(a.nosuch, b.nosuch);
}

HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse& other1159) {
  aborted = other1159.aborted;
  nosuch = other1159.nosuch;
}
HeartbeatTxnRangeResponse::HeartbeatTxnRangeResponse( HeartbeatTxnRangeResponse&& other1160) {
  aborted = std::move(other1160.aborted);
  nosuch = std::move(other1160.nosuch);
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(const HeartbeatTxnRangeResponse& other1161) {
  aborted = other1161.aborted;
  nosuch = other1161.nosuch;
  return *this;
}
HeartbeatTxnRangeResponse& HeartbeatTxnRangeResponse::operator=(HeartbeatTxnRangeResponse&& other1162) {
  aborted = std::move(other1162.aborted);
  nosuch = std::move(other1162.nosuch);
  return *this;
}
void HeartbeatTxnRangeResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HeartbeatTxnRangeResponse(";
  out << "aborted=" << to_string(aborted);
  out << ", " << "nosuch=" << to_string(nosuch);
  out << ")";
}


CompactionRequest::~CompactionRequest() throw() {
}


void CompactionRequest::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void CompactionRequest::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void CompactionRequest::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}

void CompactionRequest::__set_type(const CompactionType::type val) {
  this->type = val;
}

void CompactionRequest::__set_runas(const std::string& val) {
  this->runas = val;
__isset.runas = true;
}

void CompactionRequest::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
__isset.properties = true;
}
std::ostream& operator<<(std::ostream& out, const CompactionRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CompactionRequest &a, CompactionRequest &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.type, b.type);
  swap(a.runas, b.runas);
  swap(a.properties, b.properties);
  swap(a.__isset, b.__isset);
}

CompactionRequest::CompactionRequest(const CompactionRequest& other1172) {
  dbname = other1172.dbname;
  tablename = other1172.tablename;
  partitionname = other1172.partitionname;
  type = other1172.type;
  runas = other1172.runas;
  properties = other1172.properties;
  __isset = other1172.__isset;
}
CompactionRequest::CompactionRequest( CompactionRequest&& other1173) {
  dbname = std::move(other1173.dbname);
  tablename = std::move(other1173.tablename);
  partitionname = std::move(other1173.partitionname);
  type = std::move(other1173.type);
  runas = std::move(other1173.runas);
  properties = std::move(other1173.properties);
  __isset = std::move(other1173.__isset);
}
CompactionRequest& CompactionRequest::operator=(const CompactionRequest& other1174) {
  dbname = other1174.dbname;
  tablename = other1174.tablename;
  partitionname = other1174.partitionname;
  type = other1174.type;
  runas = other1174.runas;
  properties = other1174.properties;
  __isset = other1174.__isset;
  return *this;
}
CompactionRequest& CompactionRequest::operator=(CompactionRequest&& other1175) {
  dbname = std::move(other1175.dbname);
  tablename = std::move(other1175.tablename);
  partitionname = std::move(other1175.partitionname);
  type = std::move(other1175.type);
  runas = std::move(other1175.runas);
  properties = std::move(other1175.properties);
  __isset = std::move(other1175.__isset);
  return *this;
}
void CompactionRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CompactionRequest(";
  out << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ", " << "type=" << to_string(type);
  out << ", " << "runas="; (__isset.runas ? (out << to_string(runas)) : (out << "<null>"));
  out << ", " << "properties="; (__isset.properties ? (out << to_string(properties)) : (out << "<null>"));
  out << ")";
}


CompactionInfoStruct::~CompactionInfoStruct() throw() {
}


void CompactionInfoStruct::__set_id(const int64_t val) {
  this->id = val;
}

void CompactionInfoStruct::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void CompactionInfoStruct::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void CompactionInfoStruct::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}

void CompactionInfoStruct::__set_type(const CompactionType::type val) {
  this->type = val;
}

void CompactionInfoStruct::__set_runas(const std::string& val) {
  this->runas = val;
__isset.runas = true;
}

void CompactionInfoStruct::__set_properties(const std::string& val) {
  this->properties = val;
__isset.properties = true;
}

void CompactionInfoStruct::__set_toomanyaborts(const bool val) {
  this->toomanyaborts = val;
__isset.toomanyaborts = true;
}

void CompactionInfoStruct::__set_state(const std::string& val) {
  this->state = val;
__isset.state = true;
}

void CompactionInfoStruct::__set_workerId(const std::string& val) {
  this->workerId = val;
__isset.workerId = true;
}

void CompactionInfoStruct::__set_start(const int64_t val) {
  this->start = val;
__isset.start = true;
}

void CompactionInfoStruct::__set_highestWriteId(const int64_t val) {
  this->highestWriteId = val;
__isset.highestWriteId = true;
}

void CompactionInfoStruct::__set_errorMessage(const std::string& val) {
  this->errorMessage = val;
__isset.errorMessage = true;
}

void CompactionInfoStruct::__set_hasoldabort(const bool val) {
  this->hasoldabort = val;
__isset.hasoldabort = true;
}

void CompactionInfoStruct::__set_enqueueTime(const int64_t val) {
  this->enqueueTime = val;
__isset.enqueueTime = true;
}
std::ostream& operator<<(std::ostream& out, const CompactionInfoStruct& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CompactionInfoStruct &a, CompactionInfoStruct &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.type, b.type);
  swap(a.runas, b.runas);
  swap(a.properties, b.properties);
  swap(a.toomanyaborts, b.toomanyaborts);
  swap(a.state, b.state);
  swap(a.workerId, b.workerId);
  swap(a.start, b.start);
  swap(a.highestWriteId, b.highestWriteId);
  swap(a.errorMessage, b.errorMessage);
  swap(a.hasoldabort, b.hasoldabort);
  swap(a.enqueueTime, b.enqueueTime);
  swap(a.__isset, b.__isset);
}

CompactionInfoStruct::CompactionInfoStruct(const CompactionInfoStruct& other1177) {
  id = other1177.id;
  dbname = other1177.dbname;
  tablename = other1177.tablename;
  partitionname = other1177.partitionname;
  type = other1177.type;
  runas = other1177.runas;
  properties = other1177.properties;
  toomanyaborts = other1177.toomanyaborts;
  state = other1177.state;
  workerId = other1177.workerId;
  start = other1177.start;
  highestWriteId = other1177.highestWriteId;
  errorMessage = other1177.errorMessage;
  hasoldabort = other1177.hasoldabort;
  enqueueTime = other1177.enqueueTime;
  __isset = other1177.__isset;
}
CompactionInfoStruct::CompactionInfoStruct( CompactionInfoStruct&& other1178) {
  id = std::move(other1178.id);
  dbname = std::move(other1178.dbname);
  tablename = std::move(other1178.tablename);
  partitionname = std::move(other1178.partitionname);
  type = std::move(other1178.type);
  runas = std::move(other1178.runas);
  properties = std::move(other1178.properties);
  toomanyaborts = std::move(other1178.toomanyaborts);
  state = std::move(other1178.state);
  workerId = std::move(other1178.workerId);
  start = std::move(other1178.start);
  highestWriteId = std::move(other1178.highestWriteId);
  errorMessage = std::move(other1178.errorMessage);
  hasoldabort = std::move(other1178.hasoldabort);
  enqueueTime = std::move(other1178.enqueueTime);
  __isset = std::move(other1178.__isset);
}
CompactionInfoStruct& CompactionInfoStruct::operator=(const CompactionInfoStruct& other1179) {
  id = other1179.id;
  dbname = other1179.dbname;
  tablename = other1179.tablename;
  partitionname = other1179.partitionname;
  type = other1179.type;
  runas = other1179.runas;
  properties = other1179.properties;
  toomanyaborts = other1179.toomanyaborts;
  state = other1179.state;
  workerId = other1179.workerId;
  start = other1179.start;
  highestWriteId = other1179.highestWriteId;
  errorMessage = other1179.errorMessage;
  hasoldabort = other1179.hasoldabort;
  enqueueTime = other1179.enqueueTime;
  __isset = other1179.__isset;
  return *this;
}
CompactionInfoStruct& CompactionInfoStruct::operator=(CompactionInfoStruct&& other1180) {
  id = std::move(other1180.id);
  dbname = std::move(other1180.dbname);
  tablename = std::move(other1180.tablename);
  partitionname = std::move(other1180.partitionname);
  type = std::move(other1180.type);
  runas = std::move(other1180.runas);
  properties = std::move(other1180.properties);
  toomanyaborts = std::move(other1180.toomanyaborts);
  state = std::move(other1180.state);
  workerId = std::move(other1180.workerId);
  start = std::move(other1180.start);
  highestWriteId = std::move(other1180.highestWriteId);
  errorMessage = std::move(other1180.errorMessage);
  hasoldabort = std::move(other1180.hasoldabort);
  enqueueTime = std::move(other1180.enqueueTime);
  __isset = std::move(other1180.__isset);
  return *this;
}
void CompactionInfoStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CompactionInfoStruct(";
  out << "id=" << to_string(id);
  out << ", " << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ", " << "type=" << to_string(type);
  out << ", " << "runas="; (__isset.runas ? (out << to_string(runas)) : (out << "<null>"));
  out << ", " << "properties="; (__isset.properties ? (out << to_string(properties)) : (out << "<null>"));
  out << ", " << "toomanyaborts="; (__isset.toomanyaborts ? (out << to_string(toomanyaborts)) : (out << "<null>"));
  out << ", " << "state="; (__isset.state ? (out << to_string(state)) : (out << "<null>"));
  out << ", " << "workerId="; (__isset.workerId ? (out << to_string(workerId)) : (out << "<null>"));
  out << ", " << "start="; (__isset.start ? (out << to_string(start)) : (out << "<null>"));
  out << ", " << "highestWriteId="; (__isset.highestWriteId ? (out << to_string(highestWriteId)) : (out << "<null>"));
  out << ", " << "errorMessage="; (__isset.errorMessage ? (out << to_string(errorMessage)) : (out << "<null>"));
  out << ", " << "hasoldabort="; (__isset.hasoldabort ? (out << to_string(hasoldabort)) : (out << "<null>"));
  out << ", " << "enqueueTime="; (__isset.enqueueTime ? (out << to_string(enqueueTime)) : (out << "<null>"));
  out << ")";
}


OptionalCompactionInfoStruct::~OptionalCompactionInfoStruct() throw() {
}


void OptionalCompactionInfoStruct::__set_ci(const CompactionInfoStruct& val) {
  this->ci = val;
__isset.ci = true;
}
std::ostream& operator<<(std::ostream& out, const OptionalCompactionInfoStruct& obj)
{
  obj.printTo(out);
  return out;
}


void swap(OptionalCompactionInfoStruct &a, OptionalCompactionInfoStruct &b) {
  using ::std::swap;
  swap(a.ci, b.ci);
  swap(a.__isset, b.__isset);
}

OptionalCompactionInfoStruct::OptionalCompactionInfoStruct(const OptionalCompactionInfoStruct& other1181) {
  ci = other1181.ci;
  __isset = other1181.__isset;
}
OptionalCompactionInfoStruct::OptionalCompactionInfoStruct( OptionalCompactionInfoStruct&& other1182) {
  ci = std::move(other1182.ci);
  __isset = std::move(other1182.__isset);
}
OptionalCompactionInfoStruct& OptionalCompactionInfoStruct::operator=(const OptionalCompactionInfoStruct& other1183) {
  ci = other1183.ci;
  __isset = other1183.__isset;
  return *this;
}
OptionalCompactionInfoStruct& OptionalCompactionInfoStruct::operator=(OptionalCompactionInfoStruct&& other1184) {
  ci = std::move(other1184.ci);
  __isset = std::move(other1184.__isset);
  return *this;
}
void OptionalCompactionInfoStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OptionalCompactionInfoStruct(";
  out << "ci="; (__isset.ci ? (out << to_string(ci)) : (out << "<null>"));
  out << ")";
}


CompactionResponse::~CompactionResponse() throw() {
}


void CompactionResponse::__set_id(const int64_t val) {
  this->id = val;
}

void CompactionResponse::__set_state(const std::string& val) {
  this->state = val;
}

void CompactionResponse::__set_accepted(const bool val) {
  this->accepted = val;
}
std::ostream& operator<<(std::ostream& out, const CompactionResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CompactionResponse &a, CompactionResponse &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.state, b.state);
  swap(a.accepted, b.accepted);
}

CompactionResponse::CompactionResponse(const CompactionResponse& other1185) {
  id = other1185.id;
  state = other1185.state;
  accepted = other1185.accepted;
}
CompactionResponse::CompactionResponse( CompactionResponse&& other1186) {
  id = std::move(other1186.id);
  state = std::move(other1186.state);
  accepted = std::move(other1186.accepted);
}
CompactionResponse& CompactionResponse::operator=(const CompactionResponse& other1187) {
  id = other1187.id;
  state = other1187.state;
  accepted = other1187.accepted;
  return *this;
}
CompactionResponse& CompactionResponse::operator=(CompactionResponse&& other1188) {
  id = std::move(other1188.id);
  state = std::move(other1188.state);
  accepted = std::move(other1188.accepted);
  return *this;
}
void CompactionResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CompactionResponse(";
  out << "id=" << to_string(id);
  out << ", " << "state=" << to_string(state);
  out << ", " << "accepted=" << to_string(accepted);
  out << ")";
}


ShowCompactRequest::~ShowCompactRequest() throw() {
}

std::ostream& operator<<(std::ostream& out, const ShowCompactRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ShowCompactRequest &a, ShowCompactRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ShowCompactRequest::ShowCompactRequest(const ShowCompactRequest& other1189) {
  (void) other1189;
}
ShowCompactRequest::ShowCompactRequest( ShowCompactRequest&& other1190) {
  (void) other1190;
}
ShowCompactRequest& ShowCompactRequest::operator=(const ShowCompactRequest& other1191) {
  (void) other1191;
  return *this;
}
ShowCompactRequest& ShowCompactRequest::operator=(ShowCompactRequest&& other1192) {
  (void) other1192;
  return *this;
}
void ShowCompactRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowCompactRequest(";
  out << ")";
}


ShowCompactResponseElement::~ShowCompactResponseElement() throw() {
}


void ShowCompactResponseElement::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void ShowCompactResponseElement::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void ShowCompactResponseElement::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}

void ShowCompactResponseElement::__set_type(const CompactionType::type val) {
  this->type = val;
}

void ShowCompactResponseElement::__set_state(const std::string& val) {
  this->state = val;
}

void ShowCompactResponseElement::__set_workerid(const std::string& val) {
  this->workerid = val;
__isset.workerid = true;
}

void ShowCompactResponseElement::__set_start(const int64_t val) {
  this->start = val;
__isset.start = true;
}

void ShowCompactResponseElement::__set_runAs(const std::string& val) {
  this->runAs = val;
__isset.runAs = true;
}

void ShowCompactResponseElement::__set_hightestTxnId(const int64_t val) {
  this->hightestTxnId = val;
__isset.hightestTxnId = true;
}

void ShowCompactResponseElement::__set_metaInfo(const std::string& val) {
  this->metaInfo = val;
__isset.metaInfo = true;
}

void ShowCompactResponseElement::__set_endTime(const int64_t val) {
  this->endTime = val;
__isset.endTime = true;
}

void ShowCompactResponseElement::__set_hadoopJobId(const std::string& val) {
  this->hadoopJobId = val;
__isset.hadoopJobId = true;
}

void ShowCompactResponseElement::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}

void ShowCompactResponseElement::__set_errorMessage(const std::string& val) {
  this->errorMessage = val;
__isset.errorMessage = true;
}

void ShowCompactResponseElement::__set_enqueueTime(const int64_t val) {
  this->enqueueTime = val;
__isset.enqueueTime = true;
}
std::ostream& operator<<(std::ostream& out, const ShowCompactResponseElement& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ShowCompactResponseElement &a, ShowCompactResponseElement &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.type, b.type);
  swap(a.state, b.state);
  swap(a.workerid, b.workerid);
  swap(a.start, b.start);
  swap(a.runAs, b.runAs);
  swap(a.hightestTxnId, b.hightestTxnId);
  swap(a.metaInfo, b.metaInfo);
  swap(a.endTime, b.endTime);
  swap(a.hadoopJobId, b.hadoopJobId);
  swap(a.id, b.id);
  swap(a.errorMessage, b.errorMessage);
  swap(a.enqueueTime, b.enqueueTime);
  swap(a.__isset, b.__isset);
}

ShowCompactResponseElement::ShowCompactResponseElement(const ShowCompactResponseElement& other1194) {
  dbname = other1194.dbname;
  tablename = other1194.tablename;
  partitionname = other1194.partitionname;
  type = other1194.type;
  state = other1194.state;
  workerid = other1194.workerid;
  start = other1194.start;
  runAs = other1194.runAs;
  hightestTxnId = other1194.hightestTxnId;
  metaInfo = other1194.metaInfo;
  endTime = other1194.endTime;
  hadoopJobId = other1194.hadoopJobId;
  id = other1194.id;
  errorMessage = other1194.errorMessage;
  enqueueTime = other1194.enqueueTime;
  __isset = other1194.__isset;
}
ShowCompactResponseElement::ShowCompactResponseElement( ShowCompactResponseElement&& other1195) {
  dbname = std::move(other1195.dbname);
  tablename = std::move(other1195.tablename);
  partitionname = std::move(other1195.partitionname);
  type = std::move(other1195.type);
  state = std::move(other1195.state);
  workerid = std::move(other1195.workerid);
  start = std::move(other1195.start);
  runAs = std::move(other1195.runAs);
  hightestTxnId = std::move(other1195.hightestTxnId);
  metaInfo = std::move(other1195.metaInfo);
  endTime = std::move(other1195.endTime);
  hadoopJobId = std::move(other1195.hadoopJobId);
  id = std::move(other1195.id);
  errorMessage = std::move(other1195.errorMessage);
  enqueueTime = std::move(other1195.enqueueTime);
  __isset = std::move(other1195.__isset);
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(const ShowCompactResponseElement& other1196) {
  dbname = other1196.dbname;
  tablename = other1196.tablename;
  partitionname = other1196.partitionname;
  type = other1196.type;
  state = other1196.state;
  workerid = other1196.workerid;
  start = other1196.start;
  runAs = other1196.runAs;
  hightestTxnId = other1196.hightestTxnId;
  metaInfo = other1196.metaInfo;
  endTime = other1196.endTime;
  hadoopJobId = other1196.hadoopJobId;
  id = other1196.id;
  errorMessage = other1196.errorMessage;
  enqueueTime = other1196.enqueueTime;
  __isset = other1196.__isset;
  return *this;
}
ShowCompactResponseElement& ShowCompactResponseElement::operator=(ShowCompactResponseElement&& other1197) {
  dbname = std::move(other1197.dbname);
  tablename = std::move(other1197.tablename);
  partitionname = std::move(other1197.partitionname);
  type = std::move(other1197.type);
  state = std::move(other1197.state);
  workerid = std::move(other1197.workerid);
  start = std::move(other1197.start);
  runAs = std::move(other1197.runAs);
  hightestTxnId = std::move(other1197.hightestTxnId);
  metaInfo = std::move(other1197.metaInfo);
  endTime = std::move(other1197.endTime);
  hadoopJobId = std::move(other1197.hadoopJobId);
  id = std::move(other1197.id);
  errorMessage = std::move(other1197.errorMessage);
  enqueueTime = std::move(other1197.enqueueTime);
  __isset = std::move(other1197.__isset);
  return *this;
}
void ShowCompactResponseElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowCompactResponseElement(";
  out << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ", " << "type=" << to_string(type);
  out << ", " << "state=" << to_string(state);
  out << ", " << "workerid="; (__isset.workerid ? (out << to_string(workerid)) : (out << "<null>"));
  out << ", " << "start="; (__isset.start ? (out << to_string(start)) : (out << "<null>"));
  out << ", " << "runAs="; (__isset.runAs ? (out << to_string(runAs)) : (out << "<null>"));
  out << ", " << "hightestTxnId="; (__isset.hightestTxnId ? (out << to_string(hightestTxnId)) : (out << "<null>"));
  out << ", " << "metaInfo="; (__isset.metaInfo ? (out << to_string(metaInfo)) : (out << "<null>"));
  out << ", " << "endTime="; (__isset.endTime ? (out << to_string(endTime)) : (out << "<null>"));
  out << ", " << "hadoopJobId="; (__isset.hadoopJobId ? (out << to_string(hadoopJobId)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "errorMessage="; (__isset.errorMessage ? (out << to_string(errorMessage)) : (out << "<null>"));
  out << ", " << "enqueueTime="; (__isset.enqueueTime ? (out << to_string(enqueueTime)) : (out << "<null>"));
  out << ")";
}


ShowCompactResponse::~ShowCompactResponse() throw() {
}


void ShowCompactResponse::__set_compacts(const std::vector<ShowCompactResponseElement> & val) {
  this->compacts = val;
}
std::ostream& operator<<(std::ostream& out, const ShowCompactResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ShowCompactResponse &a, ShowCompactResponse &b) {
  using ::std::swap;
  swap(a.compacts, b.compacts);
}

ShowCompactResponse::ShowCompactResponse(const ShowCompactResponse& other1204) {
  compacts = other1204.compacts;
}
ShowCompactResponse::ShowCompactResponse( ShowCompactResponse&& other1205) {
  compacts = std::move(other1205.compacts);
}
ShowCompactResponse& ShowCompactResponse::operator=(const ShowCompactResponse& other1206) {
  compacts = other1206.compacts;
  return *this;
}
ShowCompactResponse& ShowCompactResponse::operator=(ShowCompactResponse&& other1207) {
  compacts = std::move(other1207.compacts);
  return *this;
}
void ShowCompactResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ShowCompactResponse(";
  out << "compacts=" << to_string(compacts);
  out << ")";
}


GetLatestCommittedCompactionInfoRequest::~GetLatestCommittedCompactionInfoRequest() throw() {
}


void GetLatestCommittedCompactionInfoRequest::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void GetLatestCommittedCompactionInfoRequest::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void GetLatestCommittedCompactionInfoRequest::__set_partitionnames(const std::vector<std::string> & val) {
  this->partitionnames = val;
__isset.partitionnames = true;
}
std::ostream& operator<<(std::ostream& out, const GetLatestCommittedCompactionInfoRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetLatestCommittedCompactionInfoRequest &a, GetLatestCommittedCompactionInfoRequest &b) {
  using ::std::swap;
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionnames, b.partitionnames);
  swap(a.__isset, b.__isset);
}

GetLatestCommittedCompactionInfoRequest::GetLatestCommittedCompactionInfoRequest(const GetLatestCommittedCompactionInfoRequest& other1214) {
  dbname = other1214.dbname;
  tablename = other1214.tablename;
  partitionnames = other1214.partitionnames;
  __isset = other1214.__isset;
}
GetLatestCommittedCompactionInfoRequest::GetLatestCommittedCompactionInfoRequest( GetLatestCommittedCompactionInfoRequest&& other1215) {
  dbname = std::move(other1215.dbname);
  tablename = std::move(other1215.tablename);
  partitionnames = std::move(other1215.partitionnames);
  __isset = std::move(other1215.__isset);
}
GetLatestCommittedCompactionInfoRequest& GetLatestCommittedCompactionInfoRequest::operator=(const GetLatestCommittedCompactionInfoRequest& other1216) {
  dbname = other1216.dbname;
  tablename = other1216.tablename;
  partitionnames = other1216.partitionnames;
  __isset = other1216.__isset;
  return *this;
}
GetLatestCommittedCompactionInfoRequest& GetLatestCommittedCompactionInfoRequest::operator=(GetLatestCommittedCompactionInfoRequest&& other1217) {
  dbname = std::move(other1217.dbname);
  tablename = std::move(other1217.tablename);
  partitionnames = std::move(other1217.partitionnames);
  __isset = std::move(other1217.__isset);
  return *this;
}
void GetLatestCommittedCompactionInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetLatestCommittedCompactionInfoRequest(";
  out << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "partitionnames="; (__isset.partitionnames ? (out << to_string(partitionnames)) : (out << "<null>"));
  out << ")";
}


GetLatestCommittedCompactionInfoResponse::~GetLatestCommittedCompactionInfoResponse() throw() {
}


void GetLatestCommittedCompactionInfoResponse::__set_compactions(const std::vector<CompactionInfoStruct> & val) {
  this->compactions = val;
}
std::ostream& operator<<(std::ostream& out, const GetLatestCommittedCompactionInfoResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetLatestCommittedCompactionInfoResponse &a, GetLatestCommittedCompactionInfoResponse &b) {
  using ::std::swap;
  swap(a.compactions, b.compactions);
}

GetLatestCommittedCompactionInfoResponse::GetLatestCommittedCompactionInfoResponse(const GetLatestCommittedCompactionInfoResponse& other1224) {
  compactions = other1224.compactions;
}
GetLatestCommittedCompactionInfoResponse::GetLatestCommittedCompactionInfoResponse( GetLatestCommittedCompactionInfoResponse&& other1225) {
  compactions = std::move(other1225.compactions);
}
GetLatestCommittedCompactionInfoResponse& GetLatestCommittedCompactionInfoResponse::operator=(const GetLatestCommittedCompactionInfoResponse& other1226) {
  compactions = other1226.compactions;
  return *this;
}
GetLatestCommittedCompactionInfoResponse& GetLatestCommittedCompactionInfoResponse::operator=(GetLatestCommittedCompactionInfoResponse&& other1227) {
  compactions = std::move(other1227.compactions);
  return *this;
}
void GetLatestCommittedCompactionInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetLatestCommittedCompactionInfoResponse(";
  out << "compactions=" << to_string(compactions);
  out << ")";
}


AddDynamicPartitions::~AddDynamicPartitions() throw() {
}


void AddDynamicPartitions::__set_txnid(const int64_t val) {
  this->txnid = val;
}

void AddDynamicPartitions::__set_writeid(const int64_t val) {
  this->writeid = val;
}

void AddDynamicPartitions::__set_dbname(const std::string& val) {
  this->dbname = val;
}

void AddDynamicPartitions::__set_tablename(const std::string& val) {
  this->tablename = val;
}

void AddDynamicPartitions::__set_partitionnames(const std::vector<std::string> & val) {
  this->partitionnames = val;
}

void AddDynamicPartitions::__set_operationType(const DataOperationType::type val) {
  this->operationType = val;
__isset.operationType = true;
}
std::ostream& operator<<(std::ostream& out, const AddDynamicPartitions& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AddDynamicPartitions &a, AddDynamicPartitions &b) {
  using ::std::swap;
  swap(a.txnid, b.txnid);
  swap(a.writeid, b.writeid);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionnames, b.partitionnames);
  swap(a.operationType, b.operationType);
  swap(a.__isset, b.__isset);
}

AddDynamicPartitions::AddDynamicPartitions(const AddDynamicPartitions& other1235) {
  txnid = other1235.txnid;
  writeid = other1235.writeid;
  dbname = other1235.dbname;
  tablename = other1235.tablename;
  partitionnames = other1235.partitionnames;
  operationType = other1235.operationType;
  __isset = other1235.__isset;
}
AddDynamicPartitions::AddDynamicPartitions( AddDynamicPartitions&& other1236) {
  txnid = std::move(other1236.txnid);
  writeid = std::move(other1236.writeid);
  dbname = std::move(other1236.dbname);
  tablename = std::move(other1236.tablename);
  partitionnames = std::move(other1236.partitionnames);
  operationType = std::move(other1236.operationType);
  __isset = std::move(other1236.__isset);
}
AddDynamicPartitions& AddDynamicPartitions::operator=(const AddDynamicPartitions& other1237) {
  txnid = other1237.txnid;
  writeid = other1237.writeid;
  dbname = other1237.dbname;
  tablename = other1237.tablename;
  partitionnames = other1237.partitionnames;
  operationType = other1237.operationType;
  __isset = other1237.__isset;
  return *this;
}
AddDynamicPartitions& AddDynamicPartitions::operator=(AddDynamicPartitions&& other1238) {
  txnid = std::move(other1238.txnid);
  writeid = std::move(other1238.writeid);
  dbname = std::move(other1238.dbname);
  tablename = std::move(other1238.tablename);
  partitionnames = std::move(other1238.partitionnames);
  operationType = std::move(other1238.operationType);
  __isset = std::move(other1238.__isset);
  return *this;
}
void AddDynamicPartitions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddDynamicPartitions(";
  out << "txnid=" << to_string(txnid);
  out << ", " << "writeid=" << to_string(writeid);
  out << ", " << "dbname=" << to_string(dbname);
  out << ", " << "tablename=" << to_string(tablename);
  out << ", " << "partitionnames=" << to_string(partitionnames);
  out << ", " << "operationType="; (__isset.operationType ? (out << to_string(operationType)) : (out << "<null>"));
  out << ")";
}


BasicTxnInfo::~BasicTxnInfo() throw() {
}


void BasicTxnInfo::__set_isnull(const bool val) {
  this->isnull = val;
}

void BasicTxnInfo::__set_time(const int64_t val) {
  this->time = val;
__isset.time = true;
}

void BasicTxnInfo::__set_txnid(const int64_t val) {
  this->txnid = val;
__isset.txnid = true;
}

void BasicTxnInfo::__set_dbname(const std::string& val) {
  this->dbname = val;
__isset.dbname = true;
}

void BasicTxnInfo::__set_tablename(const std::string& val) {
  this->tablename = val;
__isset.tablename = true;
}

void BasicTxnInfo::__set_partitionname(const std::string& val) {
  this->partitionname = val;
__isset.partitionname = true;
}
std::ostream& operator<<(std::ostream& out, const BasicTxnInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(BasicTxnInfo &a, BasicTxnInfo &b) {
  using ::std::swap;
  swap(a.isnull, b.isnull);
  swap(a.time, b.time);
  swap(a.txnid, b.txnid);
  swap(a.dbname, b.dbname);
  swap(a.tablename, b.tablename);
  swap(a.partitionname, b.partitionname);
  swap(a.__isset, b.__isset);
}

BasicTxnInfo::BasicTxnInfo(const BasicTxnInfo& other1239) {
  isnull = other1239.isnull;
  time = other1239.time;
  txnid = other1239.txnid;
  dbname = other1239.dbname;
  tablename = other1239.tablename;
  partitionname = other1239.partitionname;
  __isset = other1239.__isset;
}
BasicTxnInfo::BasicTxnInfo( BasicTxnInfo&& other1240) {
  isnull = std::move(other1240.isnull);
  time = std::move(other1240.time);
  txnid = std::move(other1240.txnid);
  dbname = std::move(other1240.dbname);
  tablename = std::move(other1240.tablename);
  partitionname = std::move(other1240.partitionname);
  __isset = std::move(other1240.__isset);
}
BasicTxnInfo& BasicTxnInfo::operator=(const BasicTxnInfo& other1241) {
  isnull = other1241.isnull;
  time = other1241.time;
  txnid = other1241.txnid;
  dbname = other1241.dbname;
  tablename = other1241.tablename;
  partitionname = other1241.partitionname;
  __isset = other1241.__isset;
  return *this;
}
BasicTxnInfo& BasicTxnInfo::operator=(BasicTxnInfo&& other1242) {
  isnull = std::move(other1242.isnull);
  time = std::move(other1242.time);
  txnid = std::move(other1242.txnid);
  dbname = std::move(other1242.dbname);
  tablename = std::move(other1242.tablename);
  partitionname = std::move(other1242.partitionname);
  __isset = std::move(other1242.__isset);
  return *this;
}
void BasicTxnInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BasicTxnInfo(";
  out << "isnull=" << to_string(isnull);
  out << ", " << "time="; (__isset.time ? (out << to_string(time)) : (out << "<null>"));
  out << ", " << "txnid="; (__isset.txnid ? (out << to_string(txnid)) : (out << "<null>"));
  out << ", " << "dbname="; (__isset.dbname ? (out << to_string(dbname)) : (out << "<null>"));
  out << ", " << "tablename="; (__isset.tablename ? (out << to_string(tablename)) : (out << "<null>"));
  out << ", " << "partitionname="; (__isset.partitionname ? (out << to_string(partitionname)) : (out << "<null>"));
  out << ")";
}


NotificationEventRequest::~NotificationEventRequest() throw() {
}


void NotificationEventRequest::__set_lastEvent(const int64_t val) {
  this->lastEvent = val;
}

void NotificationEventRequest::__set_maxEvents(const int32_t val) {
  this->maxEvents = val;
__isset.maxEvents = true;
}

void NotificationEventRequest::__set_eventTypeSkipList(const std::vector<std::string> & val) {
  this->eventTypeSkipList = val;
__isset.eventTypeSkipList = true;
}
std::ostream& operator<<(std::ostream& out, const NotificationEventRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NotificationEventRequest &a, NotificationEventRequest &b) {
  using ::std::swap;
  swap(a.lastEvent, b.lastEvent);
  swap(a.maxEvents, b.maxEvents);
  swap(a.eventTypeSkipList, b.eventTypeSkipList);
  swap(a.__isset, b.__isset);
}

NotificationEventRequest::NotificationEventRequest(const NotificationEventRequest& other1249) {
  lastEvent = other1249.lastEvent;
  maxEvents = other1249.maxEvents;
  eventTypeSkipList = other1249.eventTypeSkipList;
  __isset = other1249.__isset;
}
NotificationEventRequest::NotificationEventRequest( NotificationEventRequest&& other1250) {
  lastEvent = std::move(other1250.lastEvent);
  maxEvents = std::move(other1250.maxEvents);
  eventTypeSkipList = std::move(other1250.eventTypeSkipList);
  __isset = std::move(other1250.__isset);
}
NotificationEventRequest& NotificationEventRequest::operator=(const NotificationEventRequest& other1251) {
  lastEvent = other1251.lastEvent;
  maxEvents = other1251.maxEvents;
  eventTypeSkipList = other1251.eventTypeSkipList;
  __isset = other1251.__isset;
  return *this;
}
NotificationEventRequest& NotificationEventRequest::operator=(NotificationEventRequest&& other1252) {
  lastEvent = std::move(other1252.lastEvent);
  maxEvents = std::move(other1252.maxEvents);
  eventTypeSkipList = std::move(other1252.eventTypeSkipList);
  __isset = std::move(other1252.__isset);
  return *this;
}
void NotificationEventRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEventRequest(";
  out << "lastEvent=" << to_string(lastEvent);
  out << ", " << "maxEvents="; (__isset.maxEvents ? (out << to_string(maxEvents)) : (out << "<null>"));
  out << ", " << "eventTypeSkipList="; (__isset.eventTypeSkipList ? (out << to_string(eventTypeSkipList)) : (out << "<null>"));
  out << ")";
}


NotificationEvent::~NotificationEvent() throw() {
}


void NotificationEvent::__set_eventId(const int64_t val) {
  this->eventId = val;
}

void NotificationEvent::__set_eventTime(const int32_t val) {
  this->eventTime = val;
}

void NotificationEvent::__set_eventType(const std::string& val) {
  this->eventType = val;
}

void NotificationEvent::__set_dbName(const std::string& val) {
  this->dbName = val;
__isset.dbName = true;
}

void NotificationEvent::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void NotificationEvent::__set_message(const std::string& val) {
  this->message = val;
}

void NotificationEvent::__set_messageFormat(const std::string& val) {
  this->messageFormat = val;
__isset.messageFormat = true;
}

void NotificationEvent::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}
std::ostream& operator<<(std::ostream& out, const NotificationEvent& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NotificationEvent &a, NotificationEvent &b) {
  using ::std::swap;
  swap(a.eventId, b.eventId);
  swap(a.eventTime, b.eventTime);
  swap(a.eventType, b.eventType);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.message, b.message);
  swap(a.messageFormat, b.messageFormat);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

NotificationEvent::NotificationEvent(const NotificationEvent& other1253) {
  eventId = other1253.eventId;
  eventTime = other1253.eventTime;
  eventType = other1253.eventType;
  dbName = other1253.dbName;
  tableName = other1253.tableName;
  message = other1253.message;
  messageFormat = other1253.messageFormat;
  catName = other1253.catName;
  __isset = other1253.__isset;
}
NotificationEvent::NotificationEvent( NotificationEvent&& other1254) {
  eventId = std::move(other1254.eventId);
  eventTime = std::move(other1254.eventTime);
  eventType = std::move(other1254.eventType);
  dbName = std::move(other1254.dbName);
  tableName = std::move(other1254.tableName);
  message = std::move(other1254.message);
  messageFormat = std::move(other1254.messageFormat);
  catName = std::move(other1254.catName);
  __isset = std::move(other1254.__isset);
}
NotificationEvent& NotificationEvent::operator=(const NotificationEvent& other1255) {
  eventId = other1255.eventId;
  eventTime = other1255.eventTime;
  eventType = other1255.eventType;
  dbName = other1255.dbName;
  tableName = other1255.tableName;
  message = other1255.message;
  messageFormat = other1255.messageFormat;
  catName = other1255.catName;
  __isset = other1255.__isset;
  return *this;
}
NotificationEvent& NotificationEvent::operator=(NotificationEvent&& other1256) {
  eventId = std::move(other1256.eventId);
  eventTime = std::move(other1256.eventTime);
  eventType = std::move(other1256.eventType);
  dbName = std::move(other1256.dbName);
  tableName = std::move(other1256.tableName);
  message = std::move(other1256.message);
  messageFormat = std::move(other1256.messageFormat);
  catName = std::move(other1256.catName);
  __isset = std::move(other1256.__isset);
  return *this;
}
void NotificationEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEvent(";
  out << "eventId=" << to_string(eventId);
  out << ", " << "eventTime=" << to_string(eventTime);
  out << ", " << "eventType=" << to_string(eventType);
  out << ", " << "dbName="; (__isset.dbName ? (out << to_string(dbName)) : (out << "<null>"));
  out << ", " << "tableName="; (__isset.tableName ? (out << to_string(tableName)) : (out << "<null>"));
  out << ", " << "message=" << to_string(message);
  out << ", " << "messageFormat="; (__isset.messageFormat ? (out << to_string(messageFormat)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


NotificationEventResponse::~NotificationEventResponse() throw() {
}


void NotificationEventResponse::__set_events(const std::vector<NotificationEvent> & val) {
  this->events = val;
}
std::ostream& operator<<(std::ostream& out, const NotificationEventResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NotificationEventResponse &a, NotificationEventResponse &b) {
  using ::std::swap;
  swap(a.events, b.events);
}

NotificationEventResponse::NotificationEventResponse(const NotificationEventResponse& other1263) {
  events = other1263.events;
}
NotificationEventResponse::NotificationEventResponse( NotificationEventResponse&& other1264) {
  events = std::move(other1264.events);
}
NotificationEventResponse& NotificationEventResponse::operator=(const NotificationEventResponse& other1265) {
  events = other1265.events;
  return *this;
}
NotificationEventResponse& NotificationEventResponse::operator=(NotificationEventResponse&& other1266) {
  events = std::move(other1266.events);
  return *this;
}
void NotificationEventResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEventResponse(";
  out << "events=" << to_string(events);
  out << ")";
}


CurrentNotificationEventId::~CurrentNotificationEventId() throw() {
}


void CurrentNotificationEventId::__set_eventId(const int64_t val) {
  this->eventId = val;
}
std::ostream& operator<<(std::ostream& out, const CurrentNotificationEventId& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CurrentNotificationEventId &a, CurrentNotificationEventId &b) {
  using ::std::swap;
  swap(a.eventId, b.eventId);
}

CurrentNotificationEventId::CurrentNotificationEventId(const CurrentNotificationEventId& other1267) {
  eventId = other1267.eventId;
}
CurrentNotificationEventId::CurrentNotificationEventId( CurrentNotificationEventId&& other1268) {
  eventId = std::move(other1268.eventId);
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(const CurrentNotificationEventId& other1269) {
  eventId = other1269.eventId;
  return *this;
}
CurrentNotificationEventId& CurrentNotificationEventId::operator=(CurrentNotificationEventId&& other1270) {
  eventId = std::move(other1270.eventId);
  return *this;
}
void CurrentNotificationEventId::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CurrentNotificationEventId(";
  out << "eventId=" << to_string(eventId);
  out << ")";
}


NotificationEventsCountRequest::~NotificationEventsCountRequest() throw() {
}


void NotificationEventsCountRequest::__set_fromEventId(const int64_t val) {
  this->fromEventId = val;
}

void NotificationEventsCountRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void NotificationEventsCountRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void NotificationEventsCountRequest::__set_toEventId(const int64_t val) {
  this->toEventId = val;
__isset.toEventId = true;
}

void NotificationEventsCountRequest::__set_limit(const int64_t val) {
  this->limit = val;
__isset.limit = true;
}
std::ostream& operator<<(std::ostream& out, const NotificationEventsCountRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NotificationEventsCountRequest &a, NotificationEventsCountRequest &b) {
  using ::std::swap;
  swap(a.fromEventId, b.fromEventId);
  swap(a.dbName, b.dbName);
  swap(a.catName, b.catName);
  swap(a.toEventId, b.toEventId);
  swap(a.limit, b.limit);
  swap(a.__isset, b.__isset);
}

NotificationEventsCountRequest::NotificationEventsCountRequest(const NotificationEventsCountRequest& other1271) {
  fromEventId = other1271.fromEventId;
  dbName = other1271.dbName;
  catName = other1271.catName;
  toEventId = other1271.toEventId;
  limit = other1271.limit;
  __isset = other1271.__isset;
}
NotificationEventsCountRequest::NotificationEventsCountRequest( NotificationEventsCountRequest&& other1272) {
  fromEventId = std::move(other1272.fromEventId);
  dbName = std::move(other1272.dbName);
  catName = std::move(other1272.catName);
  toEventId = std::move(other1272.toEventId);
  limit = std::move(other1272.limit);
  __isset = std::move(other1272.__isset);
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(const NotificationEventsCountRequest& other1273) {
  fromEventId = other1273.fromEventId;
  dbName = other1273.dbName;
  catName = other1273.catName;
  toEventId = other1273.toEventId;
  limit = other1273.limit;
  __isset = other1273.__isset;
  return *this;
}
NotificationEventsCountRequest& NotificationEventsCountRequest::operator=(NotificationEventsCountRequest&& other1274) {
  fromEventId = std::move(other1274.fromEventId);
  dbName = std::move(other1274.dbName);
  catName = std::move(other1274.catName);
  toEventId = std::move(other1274.toEventId);
  limit = std::move(other1274.limit);
  __isset = std::move(other1274.__isset);
  return *this;
}
void NotificationEventsCountRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEventsCountRequest(";
  out << "fromEventId=" << to_string(fromEventId);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "toEventId="; (__isset.toEventId ? (out << to_string(toEventId)) : (out << "<null>"));
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ")";
}


NotificationEventsCountResponse::~NotificationEventsCountResponse() throw() {
}


void NotificationEventsCountResponse::__set_eventsCount(const int64_t val) {
  this->eventsCount = val;
}
std::ostream& operator<<(std::ostream& out, const NotificationEventsCountResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NotificationEventsCountResponse &a, NotificationEventsCountResponse &b) {
  using ::std::swap;
  swap(a.eventsCount, b.eventsCount);
}

NotificationEventsCountResponse::NotificationEventsCountResponse(const NotificationEventsCountResponse& other1275) {
  eventsCount = other1275.eventsCount;
}
NotificationEventsCountResponse::NotificationEventsCountResponse( NotificationEventsCountResponse&& other1276) {
  eventsCount = std::move(other1276.eventsCount);
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(const NotificationEventsCountResponse& other1277) {
  eventsCount = other1277.eventsCount;
  return *this;
}
NotificationEventsCountResponse& NotificationEventsCountResponse::operator=(NotificationEventsCountResponse&& other1278) {
  eventsCount = std::move(other1278.eventsCount);
  return *this;
}
void NotificationEventsCountResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NotificationEventsCountResponse(";
  out << "eventsCount=" << to_string(eventsCount);
  out << ")";
}


InsertEventRequestData::~InsertEventRequestData() throw() {
}


void InsertEventRequestData::__set_replace(const bool val) {
  this->replace = val;
__isset.replace = true;
}

void InsertEventRequestData::__set_filesAdded(const std::vector<std::string> & val) {
  this->filesAdded = val;
}

void InsertEventRequestData::__set_filesAddedChecksum(const std::vector<std::string> & val) {
  this->filesAddedChecksum = val;
__isset.filesAddedChecksum = true;
}

void InsertEventRequestData::__set_subDirectoryList(const std::vector<std::string> & val) {
  this->subDirectoryList = val;
__isset.subDirectoryList = true;
}

void InsertEventRequestData::__set_partitionVal(const std::vector<std::string> & val) {
  this->partitionVal = val;
__isset.partitionVal = true;
}
std::ostream& operator<<(std::ostream& out, const InsertEventRequestData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(InsertEventRequestData &a, InsertEventRequestData &b) {
  using ::std::swap;
  swap(a.replace, b.replace);
  swap(a.filesAdded, b.filesAdded);
  swap(a.filesAddedChecksum, b.filesAddedChecksum);
  swap(a.subDirectoryList, b.subDirectoryList);
  swap(a.partitionVal, b.partitionVal);
  swap(a.__isset, b.__isset);
}

InsertEventRequestData::InsertEventRequestData(const InsertEventRequestData& other1303) {
  replace = other1303.replace;
  filesAdded = other1303.filesAdded;
  filesAddedChecksum = other1303.filesAddedChecksum;
  subDirectoryList = other1303.subDirectoryList;
  partitionVal = other1303.partitionVal;
  __isset = other1303.__isset;
}
InsertEventRequestData::InsertEventRequestData( InsertEventRequestData&& other1304) {
  replace = std::move(other1304.replace);
  filesAdded = std::move(other1304.filesAdded);
  filesAddedChecksum = std::move(other1304.filesAddedChecksum);
  subDirectoryList = std::move(other1304.subDirectoryList);
  partitionVal = std::move(other1304.partitionVal);
  __isset = std::move(other1304.__isset);
}
InsertEventRequestData& InsertEventRequestData::operator=(const InsertEventRequestData& other1305) {
  replace = other1305.replace;
  filesAdded = other1305.filesAdded;
  filesAddedChecksum = other1305.filesAddedChecksum;
  subDirectoryList = other1305.subDirectoryList;
  partitionVal = other1305.partitionVal;
  __isset = other1305.__isset;
  return *this;
}
InsertEventRequestData& InsertEventRequestData::operator=(InsertEventRequestData&& other1306) {
  replace = std::move(other1306.replace);
  filesAdded = std::move(other1306.filesAdded);
  filesAddedChecksum = std::move(other1306.filesAddedChecksum);
  subDirectoryList = std::move(other1306.subDirectoryList);
  partitionVal = std::move(other1306.partitionVal);
  __isset = std::move(other1306.__isset);
  return *this;
}
void InsertEventRequestData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InsertEventRequestData(";
  out << "replace="; (__isset.replace ? (out << to_string(replace)) : (out << "<null>"));
  out << ", " << "filesAdded=" << to_string(filesAdded);
  out << ", " << "filesAddedChecksum="; (__isset.filesAddedChecksum ? (out << to_string(filesAddedChecksum)) : (out << "<null>"));
  out << ", " << "subDirectoryList="; (__isset.subDirectoryList ? (out << to_string(subDirectoryList)) : (out << "<null>"));
  out << ", " << "partitionVal="; (__isset.partitionVal ? (out << to_string(partitionVal)) : (out << "<null>"));
  out << ")";
}


FireEventRequestData::~FireEventRequestData() throw() {
}


void FireEventRequestData::__set_insertData(const InsertEventRequestData& val) {
  this->insertData = val;
__isset.insertData = true;
}

void FireEventRequestData::__set_insertDatas(const std::vector<InsertEventRequestData> & val) {
  this->insertDatas = val;
__isset.insertDatas = true;
}
std::ostream& operator<<(std::ostream& out, const FireEventRequestData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(FireEventRequestData &a, FireEventRequestData &b) {
  using ::std::swap;
  swap(a.insertData, b.insertData);
  swap(a.insertDatas, b.insertDatas);
  swap(a.__isset, b.__isset);
}

FireEventRequestData::FireEventRequestData(const FireEventRequestData& other1313) {
  insertData = other1313.insertData;
  insertDatas = other1313.insertDatas;
  __isset = other1313.__isset;
}
FireEventRequestData::FireEventRequestData( FireEventRequestData&& other1314) {
  insertData = std::move(other1314.insertData);
  insertDatas = std::move(other1314.insertDatas);
  __isset = std::move(other1314.__isset);
}
FireEventRequestData& FireEventRequestData::operator=(const FireEventRequestData& other1315) {
  insertData = other1315.insertData;
  insertDatas = other1315.insertDatas;
  __isset = other1315.__isset;
  return *this;
}
FireEventRequestData& FireEventRequestData::operator=(FireEventRequestData&& other1316) {
  insertData = std::move(other1316.insertData);
  insertDatas = std::move(other1316.insertDatas);
  __isset = std::move(other1316.__isset);
  return *this;
}
void FireEventRequestData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FireEventRequestData(";
  out << "insertData="; (__isset.insertData ? (out << to_string(insertData)) : (out << "<null>"));
  out << ", " << "insertDatas="; (__isset.insertDatas ? (out << to_string(insertDatas)) : (out << "<null>"));
  out << ")";
}


FireEventRequest::~FireEventRequest() throw() {
}


void FireEventRequest::__set_successful(const bool val) {
  this->successful = val;
}

void FireEventRequest::__set_data(const FireEventRequestData& val) {
  this->data = val;
}

void FireEventRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
__isset.dbName = true;
}

void FireEventRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}

void FireEventRequest::__set_partitionVals(const std::vector<std::string> & val) {
  this->partitionVals = val;
__isset.partitionVals = true;
}

void FireEventRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}
std::ostream& operator<<(std::ostream& out, const FireEventRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(FireEventRequest &a, FireEventRequest &b) {
  using ::std::swap;
  swap(a.successful, b.successful);
  swap(a.data, b.data);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.partitionVals, b.partitionVals);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

FireEventRequest::FireEventRequest(const FireEventRequest& other1323) {
  successful = other1323.successful;
  data = other1323.data;
  dbName = other1323.dbName;
  tableName = other1323.tableName;
  partitionVals = other1323.partitionVals;
  catName = other1323.catName;
  __isset = other1323.__isset;
}
FireEventRequest::FireEventRequest( FireEventRequest&& other1324) {
  successful = std::move(other1324.successful);
  data = std::move(other1324.data);
  dbName = std::move(other1324.dbName);
  tableName = std::move(other1324.tableName);
  partitionVals = std::move(other1324.partitionVals);
  catName = std::move(other1324.catName);
  __isset = std::move(other1324.__isset);
}
FireEventRequest& FireEventRequest::operator=(const FireEventRequest& other1325) {
  successful = other1325.successful;
  data = other1325.data;
  dbName = other1325.dbName;
  tableName = other1325.tableName;
  partitionVals = other1325.partitionVals;
  catName = other1325.catName;
  __isset = other1325.__isset;
  return *this;
}
FireEventRequest& FireEventRequest::operator=(FireEventRequest&& other1326) {
  successful = std::move(other1326.successful);
  data = std::move(other1326.data);
  dbName = std::move(other1326.dbName);
  tableName = std::move(other1326.tableName);
  partitionVals = std::move(other1326.partitionVals);
  catName = std::move(other1326.catName);
  __isset = std::move(other1326.__isset);
  return *this;
}
void FireEventRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FireEventRequest(";
  out << "successful=" << to_string(successful);
  out << ", " << "data=" << to_string(data);
  out << ", " << "dbName="; (__isset.dbName ? (out << to_string(dbName)) : (out << "<null>"));
  out << ", " << "tableName="; (__isset.tableName ? (out << to_string(tableName)) : (out << "<null>"));
  out << ", " << "partitionVals="; (__isset.partitionVals ? (out << to_string(partitionVals)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


FireEventResponse::~FireEventResponse() throw() {
}


void FireEventResponse::__set_eventIds(const std::vector<int64_t> & val) {
  this->eventIds = val;
}
std::ostream& operator<<(std::ostream& out, const FireEventResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(FireEventResponse &a, FireEventResponse &b) {
  using ::std::swap;
  swap(a.eventIds, b.eventIds);
  swap(a.__isset, b.__isset);
}

FireEventResponse::FireEventResponse(const FireEventResponse& other1333) {
  eventIds = other1333.eventIds;
  __isset = other1333.__isset;
}
FireEventResponse::FireEventResponse( FireEventResponse&& other1334) {
  eventIds = std::move(other1334.eventIds);
  __isset = std::move(other1334.__isset);
}
FireEventResponse& FireEventResponse::operator=(const FireEventResponse& other1335) {
  eventIds = other1335.eventIds;
  __isset = other1335.__isset;
  return *this;
}
FireEventResponse& FireEventResponse::operator=(FireEventResponse&& other1336) {
  eventIds = std::move(other1336.eventIds);
  __isset = std::move(other1336.__isset);
  return *this;
}
void FireEventResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FireEventResponse(";
  out << "eventIds=" << to_string(eventIds);
  out << ")";
}


WriteNotificationLogRequest::~WriteNotificationLogRequest() throw() {
}


void WriteNotificationLogRequest::__set_txnId(const int64_t val) {
  this->txnId = val;
}

void WriteNotificationLogRequest::__set_writeId(const int64_t val) {
  this->writeId = val;
}

void WriteNotificationLogRequest::__set_db(const std::string& val) {
  this->db = val;
}

void WriteNotificationLogRequest::__set_table(const std::string& val) {
  this->table = val;
}

void WriteNotificationLogRequest::__set_fileInfo(const InsertEventRequestData& val) {
  this->fileInfo = val;
}

void WriteNotificationLogRequest::__set_partitionVals(const std::vector<std::string> & val) {
  this->partitionVals = val;
__isset.partitionVals = true;
}
std::ostream& operator<<(std::ostream& out, const WriteNotificationLogRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WriteNotificationLogRequest &a, WriteNotificationLogRequest &b) {
  using ::std::swap;
  swap(a.txnId, b.txnId);
  swap(a.writeId, b.writeId);
  swap(a.db, b.db);
  swap(a.table, b.table);
  swap(a.fileInfo, b.fileInfo);
  swap(a.partitionVals, b.partitionVals);
  swap(a.__isset, b.__isset);
}

WriteNotificationLogRequest::WriteNotificationLogRequest(const WriteNotificationLogRequest& other1343) {
  txnId = other1343.txnId;
  writeId = other1343.writeId;
  db = other1343.db;
  table = other1343.table;
  fileInfo = other1343.fileInfo;
  partitionVals = other1343.partitionVals;
  __isset = other1343.__isset;
}
WriteNotificationLogRequest::WriteNotificationLogRequest( WriteNotificationLogRequest&& other1344) {
  txnId = std::move(other1344.txnId);
  writeId = std::move(other1344.writeId);
  db = std::move(other1344.db);
  table = std::move(other1344.table);
  fileInfo = std::move(other1344.fileInfo);
  partitionVals = std::move(other1344.partitionVals);
  __isset = std::move(other1344.__isset);
}
WriteNotificationLogRequest& WriteNotificationLogRequest::operator=(const WriteNotificationLogRequest& other1345) {
  txnId = other1345.txnId;
  writeId = other1345.writeId;
  db = other1345.db;
  table = other1345.table;
  fileInfo = other1345.fileInfo;
  partitionVals = other1345.partitionVals;
  __isset = other1345.__isset;
  return *this;
}
WriteNotificationLogRequest& WriteNotificationLogRequest::operator=(WriteNotificationLogRequest&& other1346) {
  txnId = std::move(other1346.txnId);
  writeId = std::move(other1346.writeId);
  db = std::move(other1346.db);
  table = std::move(other1346.table);
  fileInfo = std::move(other1346.fileInfo);
  partitionVals = std::move(other1346.partitionVals);
  __isset = std::move(other1346.__isset);
  return *this;
}
void WriteNotificationLogRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WriteNotificationLogRequest(";
  out << "txnId=" << to_string(txnId);
  out << ", " << "writeId=" << to_string(writeId);
  out << ", " << "db=" << to_string(db);
  out << ", " << "table=" << to_string(table);
  out << ", " << "fileInfo=" << to_string(fileInfo);
  out << ", " << "partitionVals="; (__isset.partitionVals ? (out << to_string(partitionVals)) : (out << "<null>"));
  out << ")";
}


WriteNotificationLogResponse::~WriteNotificationLogResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const WriteNotificationLogResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WriteNotificationLogResponse &a, WriteNotificationLogResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WriteNotificationLogResponse::WriteNotificationLogResponse(const WriteNotificationLogResponse& other1347) {
  (void) other1347;
}
WriteNotificationLogResponse::WriteNotificationLogResponse( WriteNotificationLogResponse&& other1348) {
  (void) other1348;
}
WriteNotificationLogResponse& WriteNotificationLogResponse::operator=(const WriteNotificationLogResponse& other1349) {
  (void) other1349;
  return *this;
}
WriteNotificationLogResponse& WriteNotificationLogResponse::operator=(WriteNotificationLogResponse&& other1350) {
  (void) other1350;
  return *this;
}
void WriteNotificationLogResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WriteNotificationLogResponse(";
  out << ")";
}


MetadataPpdResult::~MetadataPpdResult() throw() {
}


void MetadataPpdResult::__set_metadata(const std::string& val) {
  this->metadata = val;
__isset.metadata = true;
}

void MetadataPpdResult::__set_includeBitset(const std::string& val) {
  this->includeBitset = val;
__isset.includeBitset = true;
}
std::ostream& operator<<(std::ostream& out, const MetadataPpdResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(MetadataPpdResult &a, MetadataPpdResult &b) {
  using ::std::swap;
  swap(a.metadata, b.metadata);
  swap(a.includeBitset, b.includeBitset);
  swap(a.__isset, b.__isset);
}

MetadataPpdResult::MetadataPpdResult(const MetadataPpdResult& other1351) {
  metadata = other1351.metadata;
  includeBitset = other1351.includeBitset;
  __isset = other1351.__isset;
}
MetadataPpdResult::MetadataPpdResult( MetadataPpdResult&& other1352) {
  metadata = std::move(other1352.metadata);
  includeBitset = std::move(other1352.includeBitset);
  __isset = std::move(other1352.__isset);
}
MetadataPpdResult& MetadataPpdResult::operator=(const MetadataPpdResult& other1353) {
  metadata = other1353.metadata;
  includeBitset = other1353.includeBitset;
  __isset = other1353.__isset;
  return *this;
}
MetadataPpdResult& MetadataPpdResult::operator=(MetadataPpdResult&& other1354) {
  metadata = std::move(other1354.metadata);
  includeBitset = std::move(other1354.includeBitset);
  __isset = std::move(other1354.__isset);
  return *this;
}
void MetadataPpdResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MetadataPpdResult(";
  out << "metadata="; (__isset.metadata ? (out << to_string(metadata)) : (out << "<null>"));
  out << ", " << "includeBitset="; (__isset.includeBitset ? (out << to_string(includeBitset)) : (out << "<null>"));
  out << ")";
}


GetFileMetadataByExprResult::~GetFileMetadataByExprResult() throw() {
}


void GetFileMetadataByExprResult::__set_metadata(const std::map<int64_t, MetadataPpdResult> & val) {
  this->metadata = val;
}

void GetFileMetadataByExprResult::__set_isSupported(const bool val) {
  this->isSupported = val;
}
std::ostream& operator<<(std::ostream& out, const GetFileMetadataByExprResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetFileMetadataByExprResult &a, GetFileMetadataByExprResult &b) {
  using ::std::swap;
  swap(a.metadata, b.metadata);
  swap(a.isSupported, b.isSupported);
}

GetFileMetadataByExprResult::GetFileMetadataByExprResult(const GetFileMetadataByExprResult& other1363) {
  metadata = other1363.metadata;
  isSupported = other1363.isSupported;
}
GetFileMetadataByExprResult::GetFileMetadataByExprResult( GetFileMetadataByExprResult&& other1364) {
  metadata = std::move(other1364.metadata);
  isSupported = std::move(other1364.isSupported);
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(const GetFileMetadataByExprResult& other1365) {
  metadata = other1365.metadata;
  isSupported = other1365.isSupported;
  return *this;
}
GetFileMetadataByExprResult& GetFileMetadataByExprResult::operator=(GetFileMetadataByExprResult&& other1366) {
  metadata = std::move(other1366.metadata);
  isSupported = std::move(other1366.isSupported);
  return *this;
}
void GetFileMetadataByExprResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFileMetadataByExprResult(";
  out << "metadata=" << to_string(metadata);
  out << ", " << "isSupported=" << to_string(isSupported);
  out << ")";
}


GetFileMetadataByExprRequest::~GetFileMetadataByExprRequest() throw() {
}


void GetFileMetadataByExprRequest::__set_fileIds(const std::vector<int64_t> & val) {
  this->fileIds = val;
}

void GetFileMetadataByExprRequest::__set_expr(const std::string& val) {
  this->expr = val;
}

void GetFileMetadataByExprRequest::__set_doGetFooters(const bool val) {
  this->doGetFooters = val;
__isset.doGetFooters = true;
}

void GetFileMetadataByExprRequest::__set_type(const FileMetadataExprType::type val) {
  this->type = val;
__isset.type = true;
}
std::ostream& operator<<(std::ostream& out, const GetFileMetadataByExprRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetFileMetadataByExprRequest &a, GetFileMetadataByExprRequest &b) {
  using ::std::swap;
  swap(a.fileIds, b.fileIds);
  swap(a.expr, b.expr);
  swap(a.doGetFooters, b.doGetFooters);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

GetFileMetadataByExprRequest::GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest& other1374) {
  fileIds = other1374.fileIds;
  expr = other1374.expr;
  doGetFooters = other1374.doGetFooters;
  type = other1374.type;
  __isset = other1374.__isset;
}
GetFileMetadataByExprRequest::GetFileMetadataByExprRequest( GetFileMetadataByExprRequest&& other1375) {
  fileIds = std::move(other1375.fileIds);
  expr = std::move(other1375.expr);
  doGetFooters = std::move(other1375.doGetFooters);
  type = std::move(other1375.type);
  __isset = std::move(other1375.__isset);
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(const GetFileMetadataByExprRequest& other1376) {
  fileIds = other1376.fileIds;
  expr = other1376.expr;
  doGetFooters = other1376.doGetFooters;
  type = other1376.type;
  __isset = other1376.__isset;
  return *this;
}
GetFileMetadataByExprRequest& GetFileMetadataByExprRequest::operator=(GetFileMetadataByExprRequest&& other1377) {
  fileIds = std::move(other1377.fileIds);
  expr = std::move(other1377.expr);
  doGetFooters = std::move(other1377.doGetFooters);
  type = std::move(other1377.type);
  __isset = std::move(other1377.__isset);
  return *this;
}
void GetFileMetadataByExprRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFileMetadataByExprRequest(";
  out << "fileIds=" << to_string(fileIds);
  out << ", " << "expr=" << to_string(expr);
  out << ", " << "doGetFooters="; (__isset.doGetFooters ? (out << to_string(doGetFooters)) : (out << "<null>"));
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ")";
}


GetFileMetadataResult::~GetFileMetadataResult() throw() {
}


void GetFileMetadataResult::__set_metadata(const std::map<int64_t, std::string> & val) {
  this->metadata = val;
}

void GetFileMetadataResult::__set_isSupported(const bool val) {
  this->isSupported = val;
}
std::ostream& operator<<(std::ostream& out, const GetFileMetadataResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetFileMetadataResult &a, GetFileMetadataResult &b) {
  using ::std::swap;
  swap(a.metadata, b.metadata);
  swap(a.isSupported, b.isSupported);
}

GetFileMetadataResult::GetFileMetadataResult(const GetFileMetadataResult& other1386) {
  metadata = other1386.metadata;
  isSupported = other1386.isSupported;
}
GetFileMetadataResult::GetFileMetadataResult( GetFileMetadataResult&& other1387) {
  metadata = std::move(other1387.metadata);
  isSupported = std::move(other1387.isSupported);
}
GetFileMetadataResult& GetFileMetadataResult::operator=(const GetFileMetadataResult& other1388) {
  metadata = other1388.metadata;
  isSupported = other1388.isSupported;
  return *this;
}
GetFileMetadataResult& GetFileMetadataResult::operator=(GetFileMetadataResult&& other1389) {
  metadata = std::move(other1389.metadata);
  isSupported = std::move(other1389.isSupported);
  return *this;
}
void GetFileMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFileMetadataResult(";
  out << "metadata=" << to_string(metadata);
  out << ", " << "isSupported=" << to_string(isSupported);
  out << ")";
}


GetFileMetadataRequest::~GetFileMetadataRequest() throw() {
}


void GetFileMetadataRequest::__set_fileIds(const std::vector<int64_t> & val) {
  this->fileIds = val;
}
std::ostream& operator<<(std::ostream& out, const GetFileMetadataRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetFileMetadataRequest &a, GetFileMetadataRequest &b) {
  using ::std::swap;
  swap(a.fileIds, b.fileIds);
}

GetFileMetadataRequest::GetFileMetadataRequest(const GetFileMetadataRequest& other1396) {
  fileIds = other1396.fileIds;
}
GetFileMetadataRequest::GetFileMetadataRequest( GetFileMetadataRequest&& other1397) {
  fileIds = std::move(other1397.fileIds);
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(const GetFileMetadataRequest& other1398) {
  fileIds = other1398.fileIds;
  return *this;
}
GetFileMetadataRequest& GetFileMetadataRequest::operator=(GetFileMetadataRequest&& other1399) {
  fileIds = std::move(other1399.fileIds);
  return *this;
}
void GetFileMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFileMetadataRequest(";
  out << "fileIds=" << to_string(fileIds);
  out << ")";
}


PutFileMetadataResult::~PutFileMetadataResult() throw() {
}

std::ostream& operator<<(std::ostream& out, const PutFileMetadataResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PutFileMetadataResult &a, PutFileMetadataResult &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

PutFileMetadataResult::PutFileMetadataResult(const PutFileMetadataResult& other1400) {
  (void) other1400;
}
PutFileMetadataResult::PutFileMetadataResult( PutFileMetadataResult&& other1401) {
  (void) other1401;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(const PutFileMetadataResult& other1402) {
  (void) other1402;
  return *this;
}
PutFileMetadataResult& PutFileMetadataResult::operator=(PutFileMetadataResult&& other1403) {
  (void) other1403;
  return *this;
}
void PutFileMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PutFileMetadataResult(";
  out << ")";
}


PutFileMetadataRequest::~PutFileMetadataRequest() throw() {
}


void PutFileMetadataRequest::__set_fileIds(const std::vector<int64_t> & val) {
  this->fileIds = val;
}

void PutFileMetadataRequest::__set_metadata(const std::vector<std::string> & val) {
  this->metadata = val;
}

void PutFileMetadataRequest::__set_type(const FileMetadataExprType::type val) {
  this->type = val;
__isset.type = true;
}
std::ostream& operator<<(std::ostream& out, const PutFileMetadataRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PutFileMetadataRequest &a, PutFileMetadataRequest &b) {
  using ::std::swap;
  swap(a.fileIds, b.fileIds);
  swap(a.metadata, b.metadata);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

PutFileMetadataRequest::PutFileMetadataRequest(const PutFileMetadataRequest& other1417) {
  fileIds = other1417.fileIds;
  metadata = other1417.metadata;
  type = other1417.type;
  __isset = other1417.__isset;
}
PutFileMetadataRequest::PutFileMetadataRequest( PutFileMetadataRequest&& other1418) {
  fileIds = std::move(other1418.fileIds);
  metadata = std::move(other1418.metadata);
  type = std::move(other1418.type);
  __isset = std::move(other1418.__isset);
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(const PutFileMetadataRequest& other1419) {
  fileIds = other1419.fileIds;
  metadata = other1419.metadata;
  type = other1419.type;
  __isset = other1419.__isset;
  return *this;
}
PutFileMetadataRequest& PutFileMetadataRequest::operator=(PutFileMetadataRequest&& other1420) {
  fileIds = std::move(other1420.fileIds);
  metadata = std::move(other1420.metadata);
  type = std::move(other1420.type);
  __isset = std::move(other1420.__isset);
  return *this;
}
void PutFileMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PutFileMetadataRequest(";
  out << "fileIds=" << to_string(fileIds);
  out << ", " << "metadata=" << to_string(metadata);
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ")";
}


ClearFileMetadataResult::~ClearFileMetadataResult() throw() {
}

std::ostream& operator<<(std::ostream& out, const ClearFileMetadataResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ClearFileMetadataResult &a, ClearFileMetadataResult &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ClearFileMetadataResult::ClearFileMetadataResult(const ClearFileMetadataResult& other1421) {
  (void) other1421;
}
ClearFileMetadataResult::ClearFileMetadataResult( ClearFileMetadataResult&& other1422) {
  (void) other1422;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(const ClearFileMetadataResult& other1423) {
  (void) other1423;
  return *this;
}
ClearFileMetadataResult& ClearFileMetadataResult::operator=(ClearFileMetadataResult&& other1424) {
  (void) other1424;
  return *this;
}
void ClearFileMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClearFileMetadataResult(";
  out << ")";
}


ClearFileMetadataRequest::~ClearFileMetadataRequest() throw() {
}


void ClearFileMetadataRequest::__set_fileIds(const std::vector<int64_t> & val) {
  this->fileIds = val;
}
std::ostream& operator<<(std::ostream& out, const ClearFileMetadataRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ClearFileMetadataRequest &a, ClearFileMetadataRequest &b) {
  using ::std::swap;
  swap(a.fileIds, b.fileIds);
}

ClearFileMetadataRequest::ClearFileMetadataRequest(const ClearFileMetadataRequest& other1431) {
  fileIds = other1431.fileIds;
}
ClearFileMetadataRequest::ClearFileMetadataRequest( ClearFileMetadataRequest&& other1432) {
  fileIds = std::move(other1432.fileIds);
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(const ClearFileMetadataRequest& other1433) {
  fileIds = other1433.fileIds;
  return *this;
}
ClearFileMetadataRequest& ClearFileMetadataRequest::operator=(ClearFileMetadataRequest&& other1434) {
  fileIds = std::move(other1434.fileIds);
  return *this;
}
void ClearFileMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClearFileMetadataRequest(";
  out << "fileIds=" << to_string(fileIds);
  out << ")";
}


CacheFileMetadataResult::~CacheFileMetadataResult() throw() {
}


void CacheFileMetadataResult::__set_isSupported(const bool val) {
  this->isSupported = val;
}
std::ostream& operator<<(std::ostream& out, const CacheFileMetadataResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CacheFileMetadataResult &a, CacheFileMetadataResult &b) {
  using ::std::swap;
  swap(a.isSupported, b.isSupported);
}

CacheFileMetadataResult::CacheFileMetadataResult(const CacheFileMetadataResult& other1435) {
  isSupported = other1435.isSupported;
}
CacheFileMetadataResult::CacheFileMetadataResult( CacheFileMetadataResult&& other1436) {
  isSupported = std::move(other1436.isSupported);
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(const CacheFileMetadataResult& other1437) {
  isSupported = other1437.isSupported;
  return *this;
}
CacheFileMetadataResult& CacheFileMetadataResult::operator=(CacheFileMetadataResult&& other1438) {
  isSupported = std::move(other1438.isSupported);
  return *this;
}
void CacheFileMetadataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CacheFileMetadataResult(";
  out << "isSupported=" << to_string(isSupported);
  out << ")";
}


CacheFileMetadataRequest::~CacheFileMetadataRequest() throw() {
}


void CacheFileMetadataRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void CacheFileMetadataRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void CacheFileMetadataRequest::__set_partName(const std::string& val) {
  this->partName = val;
__isset.partName = true;
}

void CacheFileMetadataRequest::__set_isAllParts(const bool val) {
  this->isAllParts = val;
__isset.isAllParts = true;
}
std::ostream& operator<<(std::ostream& out, const CacheFileMetadataRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CacheFileMetadataRequest &a, CacheFileMetadataRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.partName, b.partName);
  swap(a.isAllParts, b.isAllParts);
  swap(a.__isset, b.__isset);
}

CacheFileMetadataRequest::CacheFileMetadataRequest(const CacheFileMetadataRequest& other1439) {
  dbName = other1439.dbName;
  tblName = other1439.tblName;
  partName = other1439.partName;
  isAllParts = other1439.isAllParts;
  __isset = other1439.__isset;
}
CacheFileMetadataRequest::CacheFileMetadataRequest( CacheFileMetadataRequest&& other1440) {
  dbName = std::move(other1440.dbName);
  tblName = std::move(other1440.tblName);
  partName = std::move(other1440.partName);
  isAllParts = std::move(other1440.isAllParts);
  __isset = std::move(other1440.__isset);
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(const CacheFileMetadataRequest& other1441) {
  dbName = other1441.dbName;
  tblName = other1441.tblName;
  partName = other1441.partName;
  isAllParts = other1441.isAllParts;
  __isset = other1441.__isset;
  return *this;
}
CacheFileMetadataRequest& CacheFileMetadataRequest::operator=(CacheFileMetadataRequest&& other1442) {
  dbName = std::move(other1442.dbName);
  tblName = std::move(other1442.tblName);
  partName = std::move(other1442.partName);
  isAllParts = std::move(other1442.isAllParts);
  __isset = std::move(other1442.__isset);
  return *this;
}
void CacheFileMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CacheFileMetadataRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "partName="; (__isset.partName ? (out << to_string(partName)) : (out << "<null>"));
  out << ", " << "isAllParts="; (__isset.isAllParts ? (out << to_string(isAllParts)) : (out << "<null>"));
  out << ")";
}


GetAllFunctionsResponse::~GetAllFunctionsResponse() throw() {
}


void GetAllFunctionsResponse::__set_functions(const std::vector<Function> & val) {
  this->functions = val;
__isset.functions = true;
}
std::ostream& operator<<(std::ostream& out, const GetAllFunctionsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetAllFunctionsResponse &a, GetAllFunctionsResponse &b) {
  using ::std::swap;
  swap(a.functions, b.functions);
  swap(a.__isset, b.__isset);
}

GetAllFunctionsResponse::GetAllFunctionsResponse(const GetAllFunctionsResponse& other1449) {
  functions = other1449.functions;
  __isset = other1449.__isset;
}
GetAllFunctionsResponse::GetAllFunctionsResponse( GetAllFunctionsResponse&& other1450) {
  functions = std::move(other1450.functions);
  __isset = std::move(other1450.__isset);
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(const GetAllFunctionsResponse& other1451) {
  functions = other1451.functions;
  __isset = other1451.__isset;
  return *this;
}
GetAllFunctionsResponse& GetAllFunctionsResponse::operator=(GetAllFunctionsResponse&& other1452) {
  functions = std::move(other1452.functions);
  __isset = std::move(other1452.__isset);
  return *this;
}
void GetAllFunctionsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetAllFunctionsResponse(";
  out << "functions="; (__isset.functions ? (out << to_string(functions)) : (out << "<null>"));
  out << ")";
}


ClientCapabilities::~ClientCapabilities() throw() {
}


void ClientCapabilities::__set_values(const std::vector<ClientCapability::type> & val) {
  this->values = val;
}
std::ostream& operator<<(std::ostream& out, const ClientCapabilities& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ClientCapabilities &a, ClientCapabilities &b) {
  using ::std::swap;
  swap(a.values, b.values);
}

ClientCapabilities::ClientCapabilities(const ClientCapabilities& other1460) {
  values = other1460.values;
}
ClientCapabilities::ClientCapabilities( ClientCapabilities&& other1461) {
  values = std::move(other1461.values);
}
ClientCapabilities& ClientCapabilities::operator=(const ClientCapabilities& other1462) {
  values = other1462.values;
  return *this;
}
ClientCapabilities& ClientCapabilities::operator=(ClientCapabilities&& other1463) {
  values = std::move(other1463.values);
  return *this;
}
void ClientCapabilities::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ClientCapabilities(";
  out << "values=" << to_string(values);
  out << ")";
}


GetProjectionsSpec::~GetProjectionsSpec() throw() {
}


void GetProjectionsSpec::__set_fieldList(const std::vector<std::string> & val) {
  this->fieldList = val;
}

void GetProjectionsSpec::__set_includeParamKeyPattern(const std::string& val) {
  this->includeParamKeyPattern = val;
}

void GetProjectionsSpec::__set_excludeParamKeyPattern(const std::string& val) {
  this->excludeParamKeyPattern = val;
}
std::ostream& operator<<(std::ostream& out, const GetProjectionsSpec& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetProjectionsSpec &a, GetProjectionsSpec &b) {
  using ::std::swap;
  swap(a.fieldList, b.fieldList);
  swap(a.includeParamKeyPattern, b.includeParamKeyPattern);
  swap(a.excludeParamKeyPattern, b.excludeParamKeyPattern);
  swap(a.__isset, b.__isset);
}

GetProjectionsSpec::GetProjectionsSpec(const GetProjectionsSpec& other1470) {
  fieldList = other1470.fieldList;
  includeParamKeyPattern = other1470.includeParamKeyPattern;
  excludeParamKeyPattern = other1470.excludeParamKeyPattern;
  __isset = other1470.__isset;
}
GetProjectionsSpec::GetProjectionsSpec( GetProjectionsSpec&& other1471) {
  fieldList = std::move(other1471.fieldList);
  includeParamKeyPattern = std::move(other1471.includeParamKeyPattern);
  excludeParamKeyPattern = std::move(other1471.excludeParamKeyPattern);
  __isset = std::move(other1471.__isset);
}
GetProjectionsSpec& GetProjectionsSpec::operator=(const GetProjectionsSpec& other1472) {
  fieldList = other1472.fieldList;
  includeParamKeyPattern = other1472.includeParamKeyPattern;
  excludeParamKeyPattern = other1472.excludeParamKeyPattern;
  __isset = other1472.__isset;
  return *this;
}
GetProjectionsSpec& GetProjectionsSpec::operator=(GetProjectionsSpec&& other1473) {
  fieldList = std::move(other1473.fieldList);
  includeParamKeyPattern = std::move(other1473.includeParamKeyPattern);
  excludeParamKeyPattern = std::move(other1473.excludeParamKeyPattern);
  __isset = std::move(other1473.__isset);
  return *this;
}
void GetProjectionsSpec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetProjectionsSpec(";
  out << "fieldList=" << to_string(fieldList);
  out << ", " << "includeParamKeyPattern=" << to_string(includeParamKeyPattern);
  out << ", " << "excludeParamKeyPattern=" << to_string(excludeParamKeyPattern);
  out << ")";
}


GetTableRequest::~GetTableRequest() throw() {
}


void GetTableRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetTableRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void GetTableRequest::__set_capabilities(const ClientCapabilities& val) {
  this->capabilities = val;
__isset.capabilities = true;
}

void GetTableRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void GetTableRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void GetTableRequest::__set_getColumnStats(const bool val) {
  this->getColumnStats = val;
__isset.getColumnStats = true;
}

void GetTableRequest::__set_processorCapabilities(const std::vector<std::string> & val) {
  this->processorCapabilities = val;
__isset.processorCapabilities = true;
}

void GetTableRequest::__set_processorIdentifier(const std::string& val) {
  this->processorIdentifier = val;
__isset.processorIdentifier = true;
}

void GetTableRequest::__set_engine(const std::string& val) {
  this->engine = val;
__isset.engine = true;
}

void GetTableRequest::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}

void GetTableRequest::__set_getFileMetadata(const bool val) {
  this->getFileMetadata = val;
__isset.getFileMetadata = true;
}
std::ostream& operator<<(std::ostream& out, const GetTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetTableRequest &a, GetTableRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.capabilities, b.capabilities);
  swap(a.catName, b.catName);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.getColumnStats, b.getColumnStats);
  swap(a.processorCapabilities, b.processorCapabilities);
  swap(a.processorIdentifier, b.processorIdentifier);
  swap(a.engine, b.engine);
  swap(a.id, b.id);
  swap(a.getFileMetadata, b.getFileMetadata);
  swap(a.__isset, b.__isset);
}

GetTableRequest::GetTableRequest(const GetTableRequest& other1480) {
  dbName = other1480.dbName;
  tblName = other1480.tblName;
  capabilities = other1480.capabilities;
  catName = other1480.catName;
  validWriteIdList = other1480.validWriteIdList;
  getColumnStats = other1480.getColumnStats;
  processorCapabilities = other1480.processorCapabilities;
  processorIdentifier = other1480.processorIdentifier;
  engine = other1480.engine;
  id = other1480.id;
  getFileMetadata = other1480.getFileMetadata;
  __isset = other1480.__isset;
}
GetTableRequest::GetTableRequest( GetTableRequest&& other1481) {
  dbName = std::move(other1481.dbName);
  tblName = std::move(other1481.tblName);
  capabilities = std::move(other1481.capabilities);
  catName = std::move(other1481.catName);
  validWriteIdList = std::move(other1481.validWriteIdList);
  getColumnStats = std::move(other1481.getColumnStats);
  processorCapabilities = std::move(other1481.processorCapabilities);
  processorIdentifier = std::move(other1481.processorIdentifier);
  engine = std::move(other1481.engine);
  id = std::move(other1481.id);
  getFileMetadata = std::move(other1481.getFileMetadata);
  __isset = std::move(other1481.__isset);
}
GetTableRequest& GetTableRequest::operator=(const GetTableRequest& other1482) {
  dbName = other1482.dbName;
  tblName = other1482.tblName;
  capabilities = other1482.capabilities;
  catName = other1482.catName;
  validWriteIdList = other1482.validWriteIdList;
  getColumnStats = other1482.getColumnStats;
  processorCapabilities = other1482.processorCapabilities;
  processorIdentifier = other1482.processorIdentifier;
  engine = other1482.engine;
  id = other1482.id;
  getFileMetadata = other1482.getFileMetadata;
  __isset = other1482.__isset;
  return *this;
}
GetTableRequest& GetTableRequest::operator=(GetTableRequest&& other1483) {
  dbName = std::move(other1483.dbName);
  tblName = std::move(other1483.tblName);
  capabilities = std::move(other1483.capabilities);
  catName = std::move(other1483.catName);
  validWriteIdList = std::move(other1483.validWriteIdList);
  getColumnStats = std::move(other1483.getColumnStats);
  processorCapabilities = std::move(other1483.processorCapabilities);
  processorIdentifier = std::move(other1483.processorIdentifier);
  engine = std::move(other1483.engine);
  id = std::move(other1483.id);
  getFileMetadata = std::move(other1483.getFileMetadata);
  __isset = std::move(other1483.__isset);
  return *this;
}
void GetTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTableRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "capabilities="; (__isset.capabilities ? (out << to_string(capabilities)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "getColumnStats="; (__isset.getColumnStats ? (out << to_string(getColumnStats)) : (out << "<null>"));
  out << ", " << "processorCapabilities="; (__isset.processorCapabilities ? (out << to_string(processorCapabilities)) : (out << "<null>"));
  out << ", " << "processorIdentifier="; (__isset.processorIdentifier ? (out << to_string(processorIdentifier)) : (out << "<null>"));
  out << ", " << "engine="; (__isset.engine ? (out << to_string(engine)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "getFileMetadata="; (__isset.getFileMetadata ? (out << to_string(getFileMetadata)) : (out << "<null>"));
  out << ")";
}


GetTableResult::~GetTableResult() throw() {
}


void GetTableResult::__set_table(const Table& val) {
  this->table = val;
}

void GetTableResult::__set_isStatsCompliant(const bool val) {
  this->isStatsCompliant = val;
__isset.isStatsCompliant = true;
}
std::ostream& operator<<(std::ostream& out, const GetTableResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetTableResult &a, GetTableResult &b) {
  using ::std::swap;
  swap(a.table, b.table);
  swap(a.isStatsCompliant, b.isStatsCompliant);
  swap(a.__isset, b.__isset);
}

GetTableResult::GetTableResult(const GetTableResult& other1484) {
  table = other1484.table;
  isStatsCompliant = other1484.isStatsCompliant;
  __isset = other1484.__isset;
}
GetTableResult::GetTableResult( GetTableResult&& other1485) {
  table = std::move(other1485.table);
  isStatsCompliant = std::move(other1485.isStatsCompliant);
  __isset = std::move(other1485.__isset);
}
GetTableResult& GetTableResult::operator=(const GetTableResult& other1486) {
  table = other1486.table;
  isStatsCompliant = other1486.isStatsCompliant;
  __isset = other1486.__isset;
  return *this;
}
GetTableResult& GetTableResult::operator=(GetTableResult&& other1487) {
  table = std::move(other1487.table);
  isStatsCompliant = std::move(other1487.isStatsCompliant);
  __isset = std::move(other1487.__isset);
  return *this;
}
void GetTableResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTableResult(";
  out << "table=" << to_string(table);
  out << ", " << "isStatsCompliant="; (__isset.isStatsCompliant ? (out << to_string(isStatsCompliant)) : (out << "<null>"));
  out << ")";
}


GetTablesRequest::~GetTablesRequest() throw() {
}


void GetTablesRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetTablesRequest::__set_tblNames(const std::vector<std::string> & val) {
  this->tblNames = val;
__isset.tblNames = true;
}

void GetTablesRequest::__set_capabilities(const ClientCapabilities& val) {
  this->capabilities = val;
__isset.capabilities = true;
}

void GetTablesRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void GetTablesRequest::__set_processorCapabilities(const std::vector<std::string> & val) {
  this->processorCapabilities = val;
__isset.processorCapabilities = true;
}

void GetTablesRequest::__set_processorIdentifier(const std::string& val) {
  this->processorIdentifier = val;
__isset.processorIdentifier = true;
}

void GetTablesRequest::__set_projectionSpec(const GetProjectionsSpec& val) {
  this->projectionSpec = val;
__isset.projectionSpec = true;
}

void GetTablesRequest::__set_tablesPattern(const std::string& val) {
  this->tablesPattern = val;
__isset.tablesPattern = true;
}
std::ostream& operator<<(std::ostream& out, const GetTablesRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetTablesRequest &a, GetTablesRequest &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tblNames, b.tblNames);
  swap(a.capabilities, b.capabilities);
  swap(a.catName, b.catName);
  swap(a.processorCapabilities, b.processorCapabilities);
  swap(a.processorIdentifier, b.processorIdentifier);
  swap(a.projectionSpec, b.projectionSpec);
  swap(a.tablesPattern, b.tablesPattern);
  swap(a.__isset, b.__isset);
}

GetTablesRequest::GetTablesRequest(const GetTablesRequest& other1500) {
  dbName = other1500.dbName;
  tblNames = other1500.tblNames;
  capabilities = other1500.capabilities;
  catName = other1500.catName;
  processorCapabilities = other1500.processorCapabilities;
  processorIdentifier = other1500.processorIdentifier;
  projectionSpec = other1500.projectionSpec;
  tablesPattern = other1500.tablesPattern;
  __isset = other1500.__isset;
}
GetTablesRequest::GetTablesRequest( GetTablesRequest&& other1501) {
  dbName = std::move(other1501.dbName);
  tblNames = std::move(other1501.tblNames);
  capabilities = std::move(other1501.capabilities);
  catName = std::move(other1501.catName);
  processorCapabilities = std::move(other1501.processorCapabilities);
  processorIdentifier = std::move(other1501.processorIdentifier);
  projectionSpec = std::move(other1501.projectionSpec);
  tablesPattern = std::move(other1501.tablesPattern);
  __isset = std::move(other1501.__isset);
}
GetTablesRequest& GetTablesRequest::operator=(const GetTablesRequest& other1502) {
  dbName = other1502.dbName;
  tblNames = other1502.tblNames;
  capabilities = other1502.capabilities;
  catName = other1502.catName;
  processorCapabilities = other1502.processorCapabilities;
  processorIdentifier = other1502.processorIdentifier;
  projectionSpec = other1502.projectionSpec;
  tablesPattern = other1502.tablesPattern;
  __isset = other1502.__isset;
  return *this;
}
GetTablesRequest& GetTablesRequest::operator=(GetTablesRequest&& other1503) {
  dbName = std::move(other1503.dbName);
  tblNames = std::move(other1503.tblNames);
  capabilities = std::move(other1503.capabilities);
  catName = std::move(other1503.catName);
  processorCapabilities = std::move(other1503.processorCapabilities);
  processorIdentifier = std::move(other1503.processorIdentifier);
  projectionSpec = std::move(other1503.projectionSpec);
  tablesPattern = std::move(other1503.tablesPattern);
  __isset = std::move(other1503.__isset);
  return *this;
}
void GetTablesRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTablesRequest(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tblNames="; (__isset.tblNames ? (out << to_string(tblNames)) : (out << "<null>"));
  out << ", " << "capabilities="; (__isset.capabilities ? (out << to_string(capabilities)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "processorCapabilities="; (__isset.processorCapabilities ? (out << to_string(processorCapabilities)) : (out << "<null>"));
  out << ", " << "processorIdentifier="; (__isset.processorIdentifier ? (out << to_string(processorIdentifier)) : (out << "<null>"));
  out << ", " << "projectionSpec="; (__isset.projectionSpec ? (out << to_string(projectionSpec)) : (out << "<null>"));
  out << ", " << "tablesPattern="; (__isset.tablesPattern ? (out << to_string(tablesPattern)) : (out << "<null>"));
  out << ")";
}


GetTablesResult::~GetTablesResult() throw() {
}


void GetTablesResult::__set_tables(const std::vector<Table> & val) {
  this->tables = val;
}
std::ostream& operator<<(std::ostream& out, const GetTablesResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetTablesResult &a, GetTablesResult &b) {
  using ::std::swap;
  swap(a.tables, b.tables);
}

GetTablesResult::GetTablesResult(const GetTablesResult& other1510) {
  tables = other1510.tables;
}
GetTablesResult::GetTablesResult( GetTablesResult&& other1511) {
  tables = std::move(other1511.tables);
}
GetTablesResult& GetTablesResult::operator=(const GetTablesResult& other1512) {
  tables = other1512.tables;
  return *this;
}
GetTablesResult& GetTablesResult::operator=(GetTablesResult&& other1513) {
  tables = std::move(other1513.tables);
  return *this;
}
void GetTablesResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTablesResult(";
  out << "tables=" << to_string(tables);
  out << ")";
}


GetTablesExtRequest::~GetTablesExtRequest() throw() {
}


void GetTablesExtRequest::__set_catalog(const std::string& val) {
  this->catalog = val;
}

void GetTablesExtRequest::__set_database(const std::string& val) {
  this->database = val;
}

void GetTablesExtRequest::__set_tableNamePattern(const std::string& val) {
  this->tableNamePattern = val;
}

void GetTablesExtRequest::__set_requestedFields(const int32_t val) {
  this->requestedFields = val;
}

void GetTablesExtRequest::__set_limit(const int32_t val) {
  this->limit = val;
__isset.limit = true;
}

void GetTablesExtRequest::__set_processorCapabilities(const std::vector<std::string> & val) {
  this->processorCapabilities = val;
__isset.processorCapabilities = true;
}

void GetTablesExtRequest::__set_processorIdentifier(const std::string& val) {
  this->processorIdentifier = val;
__isset.processorIdentifier = true;
}
std::ostream& operator<<(std::ostream& out, const GetTablesExtRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetTablesExtRequest &a, GetTablesExtRequest &b) {
  using ::std::swap;
  swap(a.catalog, b.catalog);
  swap(a.database, b.database);
  swap(a.tableNamePattern, b.tableNamePattern);
  swap(a.requestedFields, b.requestedFields);
  swap(a.limit, b.limit);
  swap(a.processorCapabilities, b.processorCapabilities);
  swap(a.processorIdentifier, b.processorIdentifier);
  swap(a.__isset, b.__isset);
}

GetTablesExtRequest::GetTablesExtRequest(const GetTablesExtRequest& other1520) {
  catalog = other1520.catalog;
  database = other1520.database;
  tableNamePattern = other1520.tableNamePattern;
  requestedFields = other1520.requestedFields;
  limit = other1520.limit;
  processorCapabilities = other1520.processorCapabilities;
  processorIdentifier = other1520.processorIdentifier;
  __isset = other1520.__isset;
}
GetTablesExtRequest::GetTablesExtRequest( GetTablesExtRequest&& other1521) {
  catalog = std::move(other1521.catalog);
  database = std::move(other1521.database);
  tableNamePattern = std::move(other1521.tableNamePattern);
  requestedFields = std::move(other1521.requestedFields);
  limit = std::move(other1521.limit);
  processorCapabilities = std::move(other1521.processorCapabilities);
  processorIdentifier = std::move(other1521.processorIdentifier);
  __isset = std::move(other1521.__isset);
}
GetTablesExtRequest& GetTablesExtRequest::operator=(const GetTablesExtRequest& other1522) {
  catalog = other1522.catalog;
  database = other1522.database;
  tableNamePattern = other1522.tableNamePattern;
  requestedFields = other1522.requestedFields;
  limit = other1522.limit;
  processorCapabilities = other1522.processorCapabilities;
  processorIdentifier = other1522.processorIdentifier;
  __isset = other1522.__isset;
  return *this;
}
GetTablesExtRequest& GetTablesExtRequest::operator=(GetTablesExtRequest&& other1523) {
  catalog = std::move(other1523.catalog);
  database = std::move(other1523.database);
  tableNamePattern = std::move(other1523.tableNamePattern);
  requestedFields = std::move(other1523.requestedFields);
  limit = std::move(other1523.limit);
  processorCapabilities = std::move(other1523.processorCapabilities);
  processorIdentifier = std::move(other1523.processorIdentifier);
  __isset = std::move(other1523.__isset);
  return *this;
}
void GetTablesExtRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetTablesExtRequest(";
  out << "catalog=" << to_string(catalog);
  out << ", " << "database=" << to_string(database);
  out << ", " << "tableNamePattern=" << to_string(tableNamePattern);
  out << ", " << "requestedFields=" << to_string(requestedFields);
  out << ", " << "limit="; (__isset.limit ? (out << to_string(limit)) : (out << "<null>"));
  out << ", " << "processorCapabilities="; (__isset.processorCapabilities ? (out << to_string(processorCapabilities)) : (out << "<null>"));
  out << ", " << "processorIdentifier="; (__isset.processorIdentifier ? (out << to_string(processorIdentifier)) : (out << "<null>"));
  out << ")";
}


ExtendedTableInfo::~ExtendedTableInfo() throw() {
}


void ExtendedTableInfo::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void ExtendedTableInfo::__set_accessType(const int32_t val) {
  this->accessType = val;
__isset.accessType = true;
}

void ExtendedTableInfo::__set_requiredReadCapabilities(const std::vector<std::string> & val) {
  this->requiredReadCapabilities = val;
__isset.requiredReadCapabilities = true;
}

void ExtendedTableInfo::__set_requiredWriteCapabilities(const std::vector<std::string> & val) {
  this->requiredWriteCapabilities = val;
__isset.requiredWriteCapabilities = true;
}
std::ostream& operator<<(std::ostream& out, const ExtendedTableInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ExtendedTableInfo &a, ExtendedTableInfo &b) {
  using ::std::swap;
  swap(a.tblName, b.tblName);
  swap(a.accessType, b.accessType);
  swap(a.requiredReadCapabilities, b.requiredReadCapabilities);
  swap(a.requiredWriteCapabilities, b.requiredWriteCapabilities);
  swap(a.__isset, b.__isset);
}

ExtendedTableInfo::ExtendedTableInfo(const ExtendedTableInfo& other1536) {
  tblName = other1536.tblName;
  accessType = other1536.accessType;
  requiredReadCapabilities = other1536.requiredReadCapabilities;
  requiredWriteCapabilities = other1536.requiredWriteCapabilities;
  __isset = other1536.__isset;
}
ExtendedTableInfo::ExtendedTableInfo( ExtendedTableInfo&& other1537) {
  tblName = std::move(other1537.tblName);
  accessType = std::move(other1537.accessType);
  requiredReadCapabilities = std::move(other1537.requiredReadCapabilities);
  requiredWriteCapabilities = std::move(other1537.requiredWriteCapabilities);
  __isset = std::move(other1537.__isset);
}
ExtendedTableInfo& ExtendedTableInfo::operator=(const ExtendedTableInfo& other1538) {
  tblName = other1538.tblName;
  accessType = other1538.accessType;
  requiredReadCapabilities = other1538.requiredReadCapabilities;
  requiredWriteCapabilities = other1538.requiredWriteCapabilities;
  __isset = other1538.__isset;
  return *this;
}
ExtendedTableInfo& ExtendedTableInfo::operator=(ExtendedTableInfo&& other1539) {
  tblName = std::move(other1539.tblName);
  accessType = std::move(other1539.accessType);
  requiredReadCapabilities = std::move(other1539.requiredReadCapabilities);
  requiredWriteCapabilities = std::move(other1539.requiredWriteCapabilities);
  __isset = std::move(other1539.__isset);
  return *this;
}
void ExtendedTableInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExtendedTableInfo(";
  out << "tblName=" << to_string(tblName);
  out << ", " << "accessType="; (__isset.accessType ? (out << to_string(accessType)) : (out << "<null>"));
  out << ", " << "requiredReadCapabilities="; (__isset.requiredReadCapabilities ? (out << to_string(requiredReadCapabilities)) : (out << "<null>"));
  out << ", " << "requiredWriteCapabilities="; (__isset.requiredWriteCapabilities ? (out << to_string(requiredWriteCapabilities)) : (out << "<null>"));
  out << ")";
}


GetDatabaseRequest::~GetDatabaseRequest() throw() {
}


void GetDatabaseRequest::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void GetDatabaseRequest::__set_catalogName(const std::string& val) {
  this->catalogName = val;
__isset.catalogName = true;
}

void GetDatabaseRequest::__set_processorCapabilities(const std::vector<std::string> & val) {
  this->processorCapabilities = val;
__isset.processorCapabilities = true;
}

void GetDatabaseRequest::__set_processorIdentifier(const std::string& val) {
  this->processorIdentifier = val;
__isset.processorIdentifier = true;
}
std::ostream& operator<<(std::ostream& out, const GetDatabaseRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetDatabaseRequest &a, GetDatabaseRequest &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.catalogName, b.catalogName);
  swap(a.processorCapabilities, b.processorCapabilities);
  swap(a.processorIdentifier, b.processorIdentifier);
  swap(a.__isset, b.__isset);
}

GetDatabaseRequest::GetDatabaseRequest(const GetDatabaseRequest& other1546) {
  name = other1546.name;
  catalogName = other1546.catalogName;
  processorCapabilities = other1546.processorCapabilities;
  processorIdentifier = other1546.processorIdentifier;
  __isset = other1546.__isset;
}
GetDatabaseRequest::GetDatabaseRequest( GetDatabaseRequest&& other1547) {
  name = std::move(other1547.name);
  catalogName = std::move(other1547.catalogName);
  processorCapabilities = std::move(other1547.processorCapabilities);
  processorIdentifier = std::move(other1547.processorIdentifier);
  __isset = std::move(other1547.__isset);
}
GetDatabaseRequest& GetDatabaseRequest::operator=(const GetDatabaseRequest& other1548) {
  name = other1548.name;
  catalogName = other1548.catalogName;
  processorCapabilities = other1548.processorCapabilities;
  processorIdentifier = other1548.processorIdentifier;
  __isset = other1548.__isset;
  return *this;
}
GetDatabaseRequest& GetDatabaseRequest::operator=(GetDatabaseRequest&& other1549) {
  name = std::move(other1549.name);
  catalogName = std::move(other1549.catalogName);
  processorCapabilities = std::move(other1549.processorCapabilities);
  processorIdentifier = std::move(other1549.processorIdentifier);
  __isset = std::move(other1549.__isset);
  return *this;
}
void GetDatabaseRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetDatabaseRequest(";
  out << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "catalogName="; (__isset.catalogName ? (out << to_string(catalogName)) : (out << "<null>"));
  out << ", " << "processorCapabilities="; (__isset.processorCapabilities ? (out << to_string(processorCapabilities)) : (out << "<null>"));
  out << ", " << "processorIdentifier="; (__isset.processorIdentifier ? (out << to_string(processorIdentifier)) : (out << "<null>"));
  out << ")";
}


CmRecycleRequest::~CmRecycleRequest() throw() {
}


void CmRecycleRequest::__set_dataPath(const std::string& val) {
  this->dataPath = val;
}

void CmRecycleRequest::__set_purge(const bool val) {
  this->purge = val;
}
std::ostream& operator<<(std::ostream& out, const CmRecycleRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CmRecycleRequest &a, CmRecycleRequest &b) {
  using ::std::swap;
  swap(a.dataPath, b.dataPath);
  swap(a.purge, b.purge);
}

CmRecycleRequest::CmRecycleRequest(const CmRecycleRequest& other1550) {
  dataPath = other1550.dataPath;
  purge = other1550.purge;
}
CmRecycleRequest::CmRecycleRequest( CmRecycleRequest&& other1551) {
  dataPath = std::move(other1551.dataPath);
  purge = std::move(other1551.purge);
}
CmRecycleRequest& CmRecycleRequest::operator=(const CmRecycleRequest& other1552) {
  dataPath = other1552.dataPath;
  purge = other1552.purge;
  return *this;
}
CmRecycleRequest& CmRecycleRequest::operator=(CmRecycleRequest&& other1553) {
  dataPath = std::move(other1553.dataPath);
  purge = std::move(other1553.purge);
  return *this;
}
void CmRecycleRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CmRecycleRequest(";
  out << "dataPath=" << to_string(dataPath);
  out << ", " << "purge=" << to_string(purge);
  out << ")";
}


CmRecycleResponse::~CmRecycleResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const CmRecycleResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CmRecycleResponse &a, CmRecycleResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

CmRecycleResponse::CmRecycleResponse(const CmRecycleResponse& other1554) {
  (void) other1554;
}
CmRecycleResponse::CmRecycleResponse( CmRecycleResponse&& other1555) {
  (void) other1555;
}
CmRecycleResponse& CmRecycleResponse::operator=(const CmRecycleResponse& other1556) {
  (void) other1556;
  return *this;
}
CmRecycleResponse& CmRecycleResponse::operator=(CmRecycleResponse&& other1557) {
  (void) other1557;
  return *this;
}
void CmRecycleResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CmRecycleResponse(";
  out << ")";
}


TableMeta::~TableMeta() throw() {
}


void TableMeta::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void TableMeta::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void TableMeta::__set_tableType(const std::string& val) {
  this->tableType = val;
}

void TableMeta::__set_comments(const std::string& val) {
  this->comments = val;
__isset.comments = true;
}

void TableMeta::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}
std::ostream& operator<<(std::ostream& out, const TableMeta& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TableMeta &a, TableMeta &b) {
  using ::std::swap;
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.tableType, b.tableType);
  swap(a.comments, b.comments);
  swap(a.catName, b.catName);
  swap(a.__isset, b.__isset);
}

TableMeta::TableMeta(const TableMeta& other1558) {
  dbName = other1558.dbName;
  tableName = other1558.tableName;
  tableType = other1558.tableType;
  comments = other1558.comments;
  catName = other1558.catName;
  __isset = other1558.__isset;
}
TableMeta::TableMeta( TableMeta&& other1559) {
  dbName = std::move(other1559.dbName);
  tableName = std::move(other1559.tableName);
  tableType = std::move(other1559.tableType);
  comments = std::move(other1559.comments);
  catName = std::move(other1559.catName);
  __isset = std::move(other1559.__isset);
}
TableMeta& TableMeta::operator=(const TableMeta& other1560) {
  dbName = other1560.dbName;
  tableName = other1560.tableName;
  tableType = other1560.tableType;
  comments = other1560.comments;
  catName = other1560.catName;
  __isset = other1560.__isset;
  return *this;
}
TableMeta& TableMeta::operator=(TableMeta&& other1561) {
  dbName = std::move(other1561.dbName);
  tableName = std::move(other1561.tableName);
  tableType = std::move(other1561.tableType);
  comments = std::move(other1561.comments);
  catName = std::move(other1561.catName);
  __isset = std::move(other1561.__isset);
  return *this;
}
void TableMeta::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TableMeta(";
  out << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "tableType=" << to_string(tableType);
  out << ", " << "comments="; (__isset.comments ? (out << to_string(comments)) : (out << "<null>"));
  out << ", " << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ")";
}


Materialization::~Materialization() throw() {
}


void Materialization::__set_sourceTablesUpdateDeleteModified(const bool val) {
  this->sourceTablesUpdateDeleteModified = val;
}

void Materialization::__set_sourceTablesCompacted(const bool val) {
  this->sourceTablesCompacted = val;
}
std::ostream& operator<<(std::ostream& out, const Materialization& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Materialization &a, Materialization &b) {
  using ::std::swap;
  swap(a.sourceTablesUpdateDeleteModified, b.sourceTablesUpdateDeleteModified);
  swap(a.sourceTablesCompacted, b.sourceTablesCompacted);
}

Materialization::Materialization(const Materialization& other1562) {
  sourceTablesUpdateDeleteModified = other1562.sourceTablesUpdateDeleteModified;
  sourceTablesCompacted = other1562.sourceTablesCompacted;
}
Materialization::Materialization( Materialization&& other1563) {
  sourceTablesUpdateDeleteModified = std::move(other1563.sourceTablesUpdateDeleteModified);
  sourceTablesCompacted = std::move(other1563.sourceTablesCompacted);
}
Materialization& Materialization::operator=(const Materialization& other1564) {
  sourceTablesUpdateDeleteModified = other1564.sourceTablesUpdateDeleteModified;
  sourceTablesCompacted = other1564.sourceTablesCompacted;
  return *this;
}
Materialization& Materialization::operator=(Materialization&& other1565) {
  sourceTablesUpdateDeleteModified = std::move(other1565.sourceTablesUpdateDeleteModified);
  sourceTablesCompacted = std::move(other1565.sourceTablesCompacted);
  return *this;
}
void Materialization::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Materialization(";
  out << "sourceTablesUpdateDeleteModified=" << to_string(sourceTablesUpdateDeleteModified);
  out << ", " << "sourceTablesCompacted=" << to_string(sourceTablesCompacted);
  out << ")";
}


WMResourcePlan::~WMResourcePlan() throw() {
}


void WMResourcePlan::__set_name(const std::string& val) {
  this->name = val;
}

void WMResourcePlan::__set_status(const WMResourcePlanStatus::type val) {
  this->status = val;
__isset.status = true;
}

void WMResourcePlan::__set_queryParallelism(const int32_t val) {
  this->queryParallelism = val;
__isset.queryParallelism = true;
}

void WMResourcePlan::__set_defaultPoolPath(const std::string& val) {
  this->defaultPoolPath = val;
__isset.defaultPoolPath = true;
}
std::ostream& operator<<(std::ostream& out, const WMResourcePlan& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMResourcePlan &a, WMResourcePlan &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.status, b.status);
  swap(a.queryParallelism, b.queryParallelism);
  swap(a.defaultPoolPath, b.defaultPoolPath);
  swap(a.__isset, b.__isset);
}

WMResourcePlan::WMResourcePlan(const WMResourcePlan& other1567) {
  name = other1567.name;
  status = other1567.status;
  queryParallelism = other1567.queryParallelism;
  defaultPoolPath = other1567.defaultPoolPath;
  __isset = other1567.__isset;
}
WMResourcePlan::WMResourcePlan( WMResourcePlan&& other1568) {
  name = std::move(other1568.name);
  status = std::move(other1568.status);
  queryParallelism = std::move(other1568.queryParallelism);
  defaultPoolPath = std::move(other1568.defaultPoolPath);
  __isset = std::move(other1568.__isset);
}
WMResourcePlan& WMResourcePlan::operator=(const WMResourcePlan& other1569) {
  name = other1569.name;
  status = other1569.status;
  queryParallelism = other1569.queryParallelism;
  defaultPoolPath = other1569.defaultPoolPath;
  __isset = other1569.__isset;
  return *this;
}
WMResourcePlan& WMResourcePlan::operator=(WMResourcePlan&& other1570) {
  name = std::move(other1570.name);
  status = std::move(other1570.status);
  queryParallelism = std::move(other1570.queryParallelism);
  defaultPoolPath = std::move(other1570.defaultPoolPath);
  __isset = std::move(other1570.__isset);
  return *this;
}
void WMResourcePlan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMResourcePlan(";
  out << "name=" << to_string(name);
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "queryParallelism="; (__isset.queryParallelism ? (out << to_string(queryParallelism)) : (out << "<null>"));
  out << ", " << "defaultPoolPath="; (__isset.defaultPoolPath ? (out << to_string(defaultPoolPath)) : (out << "<null>"));
  out << ")";
}


WMNullableResourcePlan::~WMNullableResourcePlan() throw() {
}


void WMNullableResourcePlan::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void WMNullableResourcePlan::__set_status(const WMResourcePlanStatus::type val) {
  this->status = val;
__isset.status = true;
}

void WMNullableResourcePlan::__set_queryParallelism(const int32_t val) {
  this->queryParallelism = val;
__isset.queryParallelism = true;
}

void WMNullableResourcePlan::__set_isSetQueryParallelism(const bool val) {
  this->isSetQueryParallelism = val;
__isset.isSetQueryParallelism = true;
}

void WMNullableResourcePlan::__set_defaultPoolPath(const std::string& val) {
  this->defaultPoolPath = val;
__isset.defaultPoolPath = true;
}

void WMNullableResourcePlan::__set_isSetDefaultPoolPath(const bool val) {
  this->isSetDefaultPoolPath = val;
__isset.isSetDefaultPoolPath = true;
}
std::ostream& operator<<(std::ostream& out, const WMNullableResourcePlan& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMNullableResourcePlan &a, WMNullableResourcePlan &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.status, b.status);
  swap(a.queryParallelism, b.queryParallelism);
  swap(a.isSetQueryParallelism, b.isSetQueryParallelism);
  swap(a.defaultPoolPath, b.defaultPoolPath);
  swap(a.isSetDefaultPoolPath, b.isSetDefaultPoolPath);
  swap(a.__isset, b.__isset);
}

WMNullableResourcePlan::WMNullableResourcePlan(const WMNullableResourcePlan& other1572) {
  name = other1572.name;
  status = other1572.status;
  queryParallelism = other1572.queryParallelism;
  isSetQueryParallelism = other1572.isSetQueryParallelism;
  defaultPoolPath = other1572.defaultPoolPath;
  isSetDefaultPoolPath = other1572.isSetDefaultPoolPath;
  __isset = other1572.__isset;
}
WMNullableResourcePlan::WMNullableResourcePlan( WMNullableResourcePlan&& other1573) {
  name = std::move(other1573.name);
  status = std::move(other1573.status);
  queryParallelism = std::move(other1573.queryParallelism);
  isSetQueryParallelism = std::move(other1573.isSetQueryParallelism);
  defaultPoolPath = std::move(other1573.defaultPoolPath);
  isSetDefaultPoolPath = std::move(other1573.isSetDefaultPoolPath);
  __isset = std::move(other1573.__isset);
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(const WMNullableResourcePlan& other1574) {
  name = other1574.name;
  status = other1574.status;
  queryParallelism = other1574.queryParallelism;
  isSetQueryParallelism = other1574.isSetQueryParallelism;
  defaultPoolPath = other1574.defaultPoolPath;
  isSetDefaultPoolPath = other1574.isSetDefaultPoolPath;
  __isset = other1574.__isset;
  return *this;
}
WMNullableResourcePlan& WMNullableResourcePlan::operator=(WMNullableResourcePlan&& other1575) {
  name = std::move(other1575.name);
  status = std::move(other1575.status);
  queryParallelism = std::move(other1575.queryParallelism);
  isSetQueryParallelism = std::move(other1575.isSetQueryParallelism);
  defaultPoolPath = std::move(other1575.defaultPoolPath);
  isSetDefaultPoolPath = std::move(other1575.isSetDefaultPoolPath);
  __isset = std::move(other1575.__isset);
  return *this;
}
void WMNullableResourcePlan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMNullableResourcePlan(";
  out << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "queryParallelism="; (__isset.queryParallelism ? (out << to_string(queryParallelism)) : (out << "<null>"));
  out << ", " << "isSetQueryParallelism="; (__isset.isSetQueryParallelism ? (out << to_string(isSetQueryParallelism)) : (out << "<null>"));
  out << ", " << "defaultPoolPath="; (__isset.defaultPoolPath ? (out << to_string(defaultPoolPath)) : (out << "<null>"));
  out << ", " << "isSetDefaultPoolPath="; (__isset.isSetDefaultPoolPath ? (out << to_string(isSetDefaultPoolPath)) : (out << "<null>"));
  out << ")";
}


WMPool::~WMPool() throw() {
}


void WMPool::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
}

void WMPool::__set_poolPath(const std::string& val) {
  this->poolPath = val;
}

void WMPool::__set_allocFraction(const double val) {
  this->allocFraction = val;
__isset.allocFraction = true;
}

void WMPool::__set_queryParallelism(const int32_t val) {
  this->queryParallelism = val;
__isset.queryParallelism = true;
}

void WMPool::__set_schedulingPolicy(const std::string& val) {
  this->schedulingPolicy = val;
__isset.schedulingPolicy = true;
}
std::ostream& operator<<(std::ostream& out, const WMPool& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMPool &a, WMPool &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.poolPath, b.poolPath);
  swap(a.allocFraction, b.allocFraction);
  swap(a.queryParallelism, b.queryParallelism);
  swap(a.schedulingPolicy, b.schedulingPolicy);
  swap(a.__isset, b.__isset);
}

WMPool::WMPool(const WMPool& other1576) {
  resourcePlanName = other1576.resourcePlanName;
  poolPath = other1576.poolPath;
  allocFraction = other1576.allocFraction;
  queryParallelism = other1576.queryParallelism;
  schedulingPolicy = other1576.schedulingPolicy;
  __isset = other1576.__isset;
}
WMPool::WMPool( WMPool&& other1577) {
  resourcePlanName = std::move(other1577.resourcePlanName);
  poolPath = std::move(other1577.poolPath);
  allocFraction = std::move(other1577.allocFraction);
  queryParallelism = std::move(other1577.queryParallelism);
  schedulingPolicy = std::move(other1577.schedulingPolicy);
  __isset = std::move(other1577.__isset);
}
WMPool& WMPool::operator=(const WMPool& other1578) {
  resourcePlanName = other1578.resourcePlanName;
  poolPath = other1578.poolPath;
  allocFraction = other1578.allocFraction;
  queryParallelism = other1578.queryParallelism;
  schedulingPolicy = other1578.schedulingPolicy;
  __isset = other1578.__isset;
  return *this;
}
WMPool& WMPool::operator=(WMPool&& other1579) {
  resourcePlanName = std::move(other1579.resourcePlanName);
  poolPath = std::move(other1579.poolPath);
  allocFraction = std::move(other1579.allocFraction);
  queryParallelism = std::move(other1579.queryParallelism);
  schedulingPolicy = std::move(other1579.schedulingPolicy);
  __isset = std::move(other1579.__isset);
  return *this;
}
void WMPool::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMPool(";
  out << "resourcePlanName=" << to_string(resourcePlanName);
  out << ", " << "poolPath=" << to_string(poolPath);
  out << ", " << "allocFraction="; (__isset.allocFraction ? (out << to_string(allocFraction)) : (out << "<null>"));
  out << ", " << "queryParallelism="; (__isset.queryParallelism ? (out << to_string(queryParallelism)) : (out << "<null>"));
  out << ", " << "schedulingPolicy="; (__isset.schedulingPolicy ? (out << to_string(schedulingPolicy)) : (out << "<null>"));
  out << ")";
}


WMNullablePool::~WMNullablePool() throw() {
}


void WMNullablePool::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
}

void WMNullablePool::__set_poolPath(const std::string& val) {
  this->poolPath = val;
}

void WMNullablePool::__set_allocFraction(const double val) {
  this->allocFraction = val;
__isset.allocFraction = true;
}

void WMNullablePool::__set_queryParallelism(const int32_t val) {
  this->queryParallelism = val;
__isset.queryParallelism = true;
}

void WMNullablePool::__set_schedulingPolicy(const std::string& val) {
  this->schedulingPolicy = val;
__isset.schedulingPolicy = true;
}

void WMNullablePool::__set_isSetSchedulingPolicy(const bool val) {
  this->isSetSchedulingPolicy = val;
__isset.isSetSchedulingPolicy = true;
}
std::ostream& operator<<(std::ostream& out, const WMNullablePool& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMNullablePool &a, WMNullablePool &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.poolPath, b.poolPath);
  swap(a.allocFraction, b.allocFraction);
  swap(a.queryParallelism, b.queryParallelism);
  swap(a.schedulingPolicy, b.schedulingPolicy);
  swap(a.isSetSchedulingPolicy, b.isSetSchedulingPolicy);
  swap(a.__isset, b.__isset);
}

WMNullablePool::WMNullablePool(const WMNullablePool& other1580) {
  resourcePlanName = other1580.resourcePlanName;
  poolPath = other1580.poolPath;
  allocFraction = other1580.allocFraction;
  queryParallelism = other1580.queryParallelism;
  schedulingPolicy = other1580.schedulingPolicy;
  isSetSchedulingPolicy = other1580.isSetSchedulingPolicy;
  __isset = other1580.__isset;
}
WMNullablePool::WMNullablePool( WMNullablePool&& other1581) {
  resourcePlanName = std::move(other1581.resourcePlanName);
  poolPath = std::move(other1581.poolPath);
  allocFraction = std::move(other1581.allocFraction);
  queryParallelism = std::move(other1581.queryParallelism);
  schedulingPolicy = std::move(other1581.schedulingPolicy);
  isSetSchedulingPolicy = std::move(other1581.isSetSchedulingPolicy);
  __isset = std::move(other1581.__isset);
}
WMNullablePool& WMNullablePool::operator=(const WMNullablePool& other1582) {
  resourcePlanName = other1582.resourcePlanName;
  poolPath = other1582.poolPath;
  allocFraction = other1582.allocFraction;
  queryParallelism = other1582.queryParallelism;
  schedulingPolicy = other1582.schedulingPolicy;
  isSetSchedulingPolicy = other1582.isSetSchedulingPolicy;
  __isset = other1582.__isset;
  return *this;
}
WMNullablePool& WMNullablePool::operator=(WMNullablePool&& other1583) {
  resourcePlanName = std::move(other1583.resourcePlanName);
  poolPath = std::move(other1583.poolPath);
  allocFraction = std::move(other1583.allocFraction);
  queryParallelism = std::move(other1583.queryParallelism);
  schedulingPolicy = std::move(other1583.schedulingPolicy);
  isSetSchedulingPolicy = std::move(other1583.isSetSchedulingPolicy);
  __isset = std::move(other1583.__isset);
  return *this;
}
void WMNullablePool::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMNullablePool(";
  out << "resourcePlanName=" << to_string(resourcePlanName);
  out << ", " << "poolPath=" << to_string(poolPath);
  out << ", " << "allocFraction="; (__isset.allocFraction ? (out << to_string(allocFraction)) : (out << "<null>"));
  out << ", " << "queryParallelism="; (__isset.queryParallelism ? (out << to_string(queryParallelism)) : (out << "<null>"));
  out << ", " << "schedulingPolicy="; (__isset.schedulingPolicy ? (out << to_string(schedulingPolicy)) : (out << "<null>"));
  out << ", " << "isSetSchedulingPolicy="; (__isset.isSetSchedulingPolicy ? (out << to_string(isSetSchedulingPolicy)) : (out << "<null>"));
  out << ")";
}


WMTrigger::~WMTrigger() throw() {
}


void WMTrigger::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
}

void WMTrigger::__set_triggerName(const std::string& val) {
  this->triggerName = val;
}

void WMTrigger::__set_triggerExpression(const std::string& val) {
  this->triggerExpression = val;
__isset.triggerExpression = true;
}

void WMTrigger::__set_actionExpression(const std::string& val) {
  this->actionExpression = val;
__isset.actionExpression = true;
}

void WMTrigger::__set_isInUnmanaged(const bool val) {
  this->isInUnmanaged = val;
__isset.isInUnmanaged = true;
}
std::ostream& operator<<(std::ostream& out, const WMTrigger& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMTrigger &a, WMTrigger &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.triggerName, b.triggerName);
  swap(a.triggerExpression, b.triggerExpression);
  swap(a.actionExpression, b.actionExpression);
  swap(a.isInUnmanaged, b.isInUnmanaged);
  swap(a.__isset, b.__isset);
}

WMTrigger::WMTrigger(const WMTrigger& other1584) {
  resourcePlanName = other1584.resourcePlanName;
  triggerName = other1584.triggerName;
  triggerExpression = other1584.triggerExpression;
  actionExpression = other1584.actionExpression;
  isInUnmanaged = other1584.isInUnmanaged;
  __isset = other1584.__isset;
}
WMTrigger::WMTrigger( WMTrigger&& other1585) {
  resourcePlanName = std::move(other1585.resourcePlanName);
  triggerName = std::move(other1585.triggerName);
  triggerExpression = std::move(other1585.triggerExpression);
  actionExpression = std::move(other1585.actionExpression);
  isInUnmanaged = std::move(other1585.isInUnmanaged);
  __isset = std::move(other1585.__isset);
}
WMTrigger& WMTrigger::operator=(const WMTrigger& other1586) {
  resourcePlanName = other1586.resourcePlanName;
  triggerName = other1586.triggerName;
  triggerExpression = other1586.triggerExpression;
  actionExpression = other1586.actionExpression;
  isInUnmanaged = other1586.isInUnmanaged;
  __isset = other1586.__isset;
  return *this;
}
WMTrigger& WMTrigger::operator=(WMTrigger&& other1587) {
  resourcePlanName = std::move(other1587.resourcePlanName);
  triggerName = std::move(other1587.triggerName);
  triggerExpression = std::move(other1587.triggerExpression);
  actionExpression = std::move(other1587.actionExpression);
  isInUnmanaged = std::move(other1587.isInUnmanaged);
  __isset = std::move(other1587.__isset);
  return *this;
}
void WMTrigger::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMTrigger(";
  out << "resourcePlanName=" << to_string(resourcePlanName);
  out << ", " << "triggerName=" << to_string(triggerName);
  out << ", " << "triggerExpression="; (__isset.triggerExpression ? (out << to_string(triggerExpression)) : (out << "<null>"));
  out << ", " << "actionExpression="; (__isset.actionExpression ? (out << to_string(actionExpression)) : (out << "<null>"));
  out << ", " << "isInUnmanaged="; (__isset.isInUnmanaged ? (out << to_string(isInUnmanaged)) : (out << "<null>"));
  out << ")";
}


WMMapping::~WMMapping() throw() {
}


void WMMapping::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
}

void WMMapping::__set_entityType(const std::string& val) {
  this->entityType = val;
}

void WMMapping::__set_entityName(const std::string& val) {
  this->entityName = val;
}

void WMMapping::__set_poolPath(const std::string& val) {
  this->poolPath = val;
__isset.poolPath = true;
}

void WMMapping::__set_ordering(const int32_t val) {
  this->ordering = val;
__isset.ordering = true;
}
std::ostream& operator<<(std::ostream& out, const WMMapping& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMMapping &a, WMMapping &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.entityType, b.entityType);
  swap(a.entityName, b.entityName);
  swap(a.poolPath, b.poolPath);
  swap(a.ordering, b.ordering);
  swap(a.__isset, b.__isset);
}

WMMapping::WMMapping(const WMMapping& other1588) {
  resourcePlanName = other1588.resourcePlanName;
  entityType = other1588.entityType;
  entityName = other1588.entityName;
  poolPath = other1588.poolPath;
  ordering = other1588.ordering;
  __isset = other1588.__isset;
}
WMMapping::WMMapping( WMMapping&& other1589) {
  resourcePlanName = std::move(other1589.resourcePlanName);
  entityType = std::move(other1589.entityType);
  entityName = std::move(other1589.entityName);
  poolPath = std::move(other1589.poolPath);
  ordering = std::move(other1589.ordering);
  __isset = std::move(other1589.__isset);
}
WMMapping& WMMapping::operator=(const WMMapping& other1590) {
  resourcePlanName = other1590.resourcePlanName;
  entityType = other1590.entityType;
  entityName = other1590.entityName;
  poolPath = other1590.poolPath;
  ordering = other1590.ordering;
  __isset = other1590.__isset;
  return *this;
}
WMMapping& WMMapping::operator=(WMMapping&& other1591) {
  resourcePlanName = std::move(other1591.resourcePlanName);
  entityType = std::move(other1591.entityType);
  entityName = std::move(other1591.entityName);
  poolPath = std::move(other1591.poolPath);
  ordering = std::move(other1591.ordering);
  __isset = std::move(other1591.__isset);
  return *this;
}
void WMMapping::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMMapping(";
  out << "resourcePlanName=" << to_string(resourcePlanName);
  out << ", " << "entityType=" << to_string(entityType);
  out << ", " << "entityName=" << to_string(entityName);
  out << ", " << "poolPath="; (__isset.poolPath ? (out << to_string(poolPath)) : (out << "<null>"));
  out << ", " << "ordering="; (__isset.ordering ? (out << to_string(ordering)) : (out << "<null>"));
  out << ")";
}


WMPoolTrigger::~WMPoolTrigger() throw() {
}


void WMPoolTrigger::__set_pool(const std::string& val) {
  this->pool = val;
}

void WMPoolTrigger::__set_trigger(const std::string& val) {
  this->trigger = val;
}
std::ostream& operator<<(std::ostream& out, const WMPoolTrigger& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMPoolTrigger &a, WMPoolTrigger &b) {
  using ::std::swap;
  swap(a.pool, b.pool);
  swap(a.trigger, b.trigger);
}

WMPoolTrigger::WMPoolTrigger(const WMPoolTrigger& other1592) {
  pool = other1592.pool;
  trigger = other1592.trigger;
}
WMPoolTrigger::WMPoolTrigger( WMPoolTrigger&& other1593) {
  pool = std::move(other1593.pool);
  trigger = std::move(other1593.trigger);
}
WMPoolTrigger& WMPoolTrigger::operator=(const WMPoolTrigger& other1594) {
  pool = other1594.pool;
  trigger = other1594.trigger;
  return *this;
}
WMPoolTrigger& WMPoolTrigger::operator=(WMPoolTrigger&& other1595) {
  pool = std::move(other1595.pool);
  trigger = std::move(other1595.trigger);
  return *this;
}
void WMPoolTrigger::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMPoolTrigger(";
  out << "pool=" << to_string(pool);
  out << ", " << "trigger=" << to_string(trigger);
  out << ")";
}


WMFullResourcePlan::~WMFullResourcePlan() throw() {
}


void WMFullResourcePlan::__set_plan(const WMResourcePlan& val) {
  this->plan = val;
}

void WMFullResourcePlan::__set_pools(const std::vector<WMPool> & val) {
  this->pools = val;
}

void WMFullResourcePlan::__set_mappings(const std::vector<WMMapping> & val) {
  this->mappings = val;
__isset.mappings = true;
}

void WMFullResourcePlan::__set_triggers(const std::vector<WMTrigger> & val) {
  this->triggers = val;
__isset.triggers = true;
}

void WMFullResourcePlan::__set_poolTriggers(const std::vector<WMPoolTrigger> & val) {
  this->poolTriggers = val;
__isset.poolTriggers = true;
}
std::ostream& operator<<(std::ostream& out, const WMFullResourcePlan& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMFullResourcePlan &a, WMFullResourcePlan &b) {
  using ::std::swap;
  swap(a.plan, b.plan);
  swap(a.pools, b.pools);
  swap(a.mappings, b.mappings);
  swap(a.triggers, b.triggers);
  swap(a.poolTriggers, b.poolTriggers);
  swap(a.__isset, b.__isset);
}

WMFullResourcePlan::WMFullResourcePlan(const WMFullResourcePlan& other1620) {
  plan = other1620.plan;
  pools = other1620.pools;
  mappings = other1620.mappings;
  triggers = other1620.triggers;
  poolTriggers = other1620.poolTriggers;
  __isset = other1620.__isset;
}
WMFullResourcePlan::WMFullResourcePlan( WMFullResourcePlan&& other1621) {
  plan = std::move(other1621.plan);
  pools = std::move(other1621.pools);
  mappings = std::move(other1621.mappings);
  triggers = std::move(other1621.triggers);
  poolTriggers = std::move(other1621.poolTriggers);
  __isset = std::move(other1621.__isset);
}
WMFullResourcePlan& WMFullResourcePlan::operator=(const WMFullResourcePlan& other1622) {
  plan = other1622.plan;
  pools = other1622.pools;
  mappings = other1622.mappings;
  triggers = other1622.triggers;
  poolTriggers = other1622.poolTriggers;
  __isset = other1622.__isset;
  return *this;
}
WMFullResourcePlan& WMFullResourcePlan::operator=(WMFullResourcePlan&& other1623) {
  plan = std::move(other1623.plan);
  pools = std::move(other1623.pools);
  mappings = std::move(other1623.mappings);
  triggers = std::move(other1623.triggers);
  poolTriggers = std::move(other1623.poolTriggers);
  __isset = std::move(other1623.__isset);
  return *this;
}
void WMFullResourcePlan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMFullResourcePlan(";
  out << "plan=" << to_string(plan);
  out << ", " << "pools=" << to_string(pools);
  out << ", " << "mappings="; (__isset.mappings ? (out << to_string(mappings)) : (out << "<null>"));
  out << ", " << "triggers="; (__isset.triggers ? (out << to_string(triggers)) : (out << "<null>"));
  out << ", " << "poolTriggers="; (__isset.poolTriggers ? (out << to_string(poolTriggers)) : (out << "<null>"));
  out << ")";
}


WMCreateResourcePlanRequest::~WMCreateResourcePlanRequest() throw() {
}


void WMCreateResourcePlanRequest::__set_resourcePlan(const WMResourcePlan& val) {
  this->resourcePlan = val;
__isset.resourcePlan = true;
}

void WMCreateResourcePlanRequest::__set_copyFrom(const std::string& val) {
  this->copyFrom = val;
__isset.copyFrom = true;
}
std::ostream& operator<<(std::ostream& out, const WMCreateResourcePlanRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMCreateResourcePlanRequest &a, WMCreateResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlan, b.resourcePlan);
  swap(a.copyFrom, b.copyFrom);
  swap(a.__isset, b.__isset);
}

WMCreateResourcePlanRequest::WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest& other1624) {
  resourcePlan = other1624.resourcePlan;
  copyFrom = other1624.copyFrom;
  __isset = other1624.__isset;
}
WMCreateResourcePlanRequest::WMCreateResourcePlanRequest( WMCreateResourcePlanRequest&& other1625) {
  resourcePlan = std::move(other1625.resourcePlan);
  copyFrom = std::move(other1625.copyFrom);
  __isset = std::move(other1625.__isset);
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(const WMCreateResourcePlanRequest& other1626) {
  resourcePlan = other1626.resourcePlan;
  copyFrom = other1626.copyFrom;
  __isset = other1626.__isset;
  return *this;
}
WMCreateResourcePlanRequest& WMCreateResourcePlanRequest::operator=(WMCreateResourcePlanRequest&& other1627) {
  resourcePlan = std::move(other1627.resourcePlan);
  copyFrom = std::move(other1627.copyFrom);
  __isset = std::move(other1627.__isset);
  return *this;
}
void WMCreateResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateResourcePlanRequest(";
  out << "resourcePlan="; (__isset.resourcePlan ? (out << to_string(resourcePlan)) : (out << "<null>"));
  out << ", " << "copyFrom="; (__isset.copyFrom ? (out << to_string(copyFrom)) : (out << "<null>"));
  out << ")";
}


WMCreateResourcePlanResponse::~WMCreateResourcePlanResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMCreateResourcePlanResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMCreateResourcePlanResponse &a, WMCreateResourcePlanResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMCreateResourcePlanResponse::WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse& other1628) {
  (void) other1628;
}
WMCreateResourcePlanResponse::WMCreateResourcePlanResponse( WMCreateResourcePlanResponse&& other1629) {
  (void) other1629;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(const WMCreateResourcePlanResponse& other1630) {
  (void) other1630;
  return *this;
}
WMCreateResourcePlanResponse& WMCreateResourcePlanResponse::operator=(WMCreateResourcePlanResponse&& other1631) {
  (void) other1631;
  return *this;
}
void WMCreateResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateResourcePlanResponse(";
  out << ")";
}


WMGetActiveResourcePlanRequest::~WMGetActiveResourcePlanRequest() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMGetActiveResourcePlanRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMGetActiveResourcePlanRequest &a, WMGetActiveResourcePlanRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest& other1632) {
  (void) other1632;
}
WMGetActiveResourcePlanRequest::WMGetActiveResourcePlanRequest( WMGetActiveResourcePlanRequest&& other1633) {
  (void) other1633;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(const WMGetActiveResourcePlanRequest& other1634) {
  (void) other1634;
  return *this;
}
WMGetActiveResourcePlanRequest& WMGetActiveResourcePlanRequest::operator=(WMGetActiveResourcePlanRequest&& other1635) {
  (void) other1635;
  return *this;
}
void WMGetActiveResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetActiveResourcePlanRequest(";
  out << ")";
}


WMGetActiveResourcePlanResponse::~WMGetActiveResourcePlanResponse() throw() {
}


void WMGetActiveResourcePlanResponse::__set_resourcePlan(const WMFullResourcePlan& val) {
  this->resourcePlan = val;
__isset.resourcePlan = true;
}
std::ostream& operator<<(std::ostream& out, const WMGetActiveResourcePlanResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMGetActiveResourcePlanResponse &a, WMGetActiveResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.resourcePlan, b.resourcePlan);
  swap(a.__isset, b.__isset);
}

WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse& other1636) {
  resourcePlan = other1636.resourcePlan;
  __isset = other1636.__isset;
}
WMGetActiveResourcePlanResponse::WMGetActiveResourcePlanResponse( WMGetActiveResourcePlanResponse&& other1637) {
  resourcePlan = std::move(other1637.resourcePlan);
  __isset = std::move(other1637.__isset);
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(const WMGetActiveResourcePlanResponse& other1638) {
  resourcePlan = other1638.resourcePlan;
  __isset = other1638.__isset;
  return *this;
}
WMGetActiveResourcePlanResponse& WMGetActiveResourcePlanResponse::operator=(WMGetActiveResourcePlanResponse&& other1639) {
  resourcePlan = std::move(other1639.resourcePlan);
  __isset = std::move(other1639.__isset);
  return *this;
}
void WMGetActiveResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetActiveResourcePlanResponse(";
  out << "resourcePlan="; (__isset.resourcePlan ? (out << to_string(resourcePlan)) : (out << "<null>"));
  out << ")";
}


WMGetResourcePlanRequest::~WMGetResourcePlanRequest() throw() {
}


void WMGetResourcePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}
std::ostream& operator<<(std::ostream& out, const WMGetResourcePlanRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMGetResourcePlanRequest &a, WMGetResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.__isset, b.__isset);
}

WMGetResourcePlanRequest::WMGetResourcePlanRequest(const WMGetResourcePlanRequest& other1640) {
  resourcePlanName = other1640.resourcePlanName;
  __isset = other1640.__isset;
}
WMGetResourcePlanRequest::WMGetResourcePlanRequest( WMGetResourcePlanRequest&& other1641) {
  resourcePlanName = std::move(other1641.resourcePlanName);
  __isset = std::move(other1641.__isset);
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(const WMGetResourcePlanRequest& other1642) {
  resourcePlanName = other1642.resourcePlanName;
  __isset = other1642.__isset;
  return *this;
}
WMGetResourcePlanRequest& WMGetResourcePlanRequest::operator=(WMGetResourcePlanRequest&& other1643) {
  resourcePlanName = std::move(other1643.resourcePlanName);
  __isset = std::move(other1643.__isset);
  return *this;
}
void WMGetResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetResourcePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ")";
}


WMGetResourcePlanResponse::~WMGetResourcePlanResponse() throw() {
}


void WMGetResourcePlanResponse::__set_resourcePlan(const WMFullResourcePlan& val) {
  this->resourcePlan = val;
__isset.resourcePlan = true;
}
std::ostream& operator<<(std::ostream& out, const WMGetResourcePlanResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMGetResourcePlanResponse &a, WMGetResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.resourcePlan, b.resourcePlan);
  swap(a.__isset, b.__isset);
}

WMGetResourcePlanResponse::WMGetResourcePlanResponse(const WMGetResourcePlanResponse& other1644) {
  resourcePlan = other1644.resourcePlan;
  __isset = other1644.__isset;
}
WMGetResourcePlanResponse::WMGetResourcePlanResponse( WMGetResourcePlanResponse&& other1645) {
  resourcePlan = std::move(other1645.resourcePlan);
  __isset = std::move(other1645.__isset);
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(const WMGetResourcePlanResponse& other1646) {
  resourcePlan = other1646.resourcePlan;
  __isset = other1646.__isset;
  return *this;
}
WMGetResourcePlanResponse& WMGetResourcePlanResponse::operator=(WMGetResourcePlanResponse&& other1647) {
  resourcePlan = std::move(other1647.resourcePlan);
  __isset = std::move(other1647.__isset);
  return *this;
}
void WMGetResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetResourcePlanResponse(";
  out << "resourcePlan="; (__isset.resourcePlan ? (out << to_string(resourcePlan)) : (out << "<null>"));
  out << ")";
}


WMGetAllResourcePlanRequest::~WMGetAllResourcePlanRequest() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMGetAllResourcePlanRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMGetAllResourcePlanRequest &a, WMGetAllResourcePlanRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest& other1648) {
  (void) other1648;
}
WMGetAllResourcePlanRequest::WMGetAllResourcePlanRequest( WMGetAllResourcePlanRequest&& other1649) {
  (void) other1649;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(const WMGetAllResourcePlanRequest& other1650) {
  (void) other1650;
  return *this;
}
WMGetAllResourcePlanRequest& WMGetAllResourcePlanRequest::operator=(WMGetAllResourcePlanRequest&& other1651) {
  (void) other1651;
  return *this;
}
void WMGetAllResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetAllResourcePlanRequest(";
  out << ")";
}


WMGetAllResourcePlanResponse::~WMGetAllResourcePlanResponse() throw() {
}


void WMGetAllResourcePlanResponse::__set_resourcePlans(const std::vector<WMResourcePlan> & val) {
  this->resourcePlans = val;
__isset.resourcePlans = true;
}
std::ostream& operator<<(std::ostream& out, const WMGetAllResourcePlanResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMGetAllResourcePlanResponse &a, WMGetAllResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.resourcePlans, b.resourcePlans);
  swap(a.__isset, b.__isset);
}

WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse& other1658) {
  resourcePlans = other1658.resourcePlans;
  __isset = other1658.__isset;
}
WMGetAllResourcePlanResponse::WMGetAllResourcePlanResponse( WMGetAllResourcePlanResponse&& other1659) {
  resourcePlans = std::move(other1659.resourcePlans);
  __isset = std::move(other1659.__isset);
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(const WMGetAllResourcePlanResponse& other1660) {
  resourcePlans = other1660.resourcePlans;
  __isset = other1660.__isset;
  return *this;
}
WMGetAllResourcePlanResponse& WMGetAllResourcePlanResponse::operator=(WMGetAllResourcePlanResponse&& other1661) {
  resourcePlans = std::move(other1661.resourcePlans);
  __isset = std::move(other1661.__isset);
  return *this;
}
void WMGetAllResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetAllResourcePlanResponse(";
  out << "resourcePlans="; (__isset.resourcePlans ? (out << to_string(resourcePlans)) : (out << "<null>"));
  out << ")";
}


WMAlterResourcePlanRequest::~WMAlterResourcePlanRequest() throw() {
}


void WMAlterResourcePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

void WMAlterResourcePlanRequest::__set_resourcePlan(const WMNullableResourcePlan& val) {
  this->resourcePlan = val;
__isset.resourcePlan = true;
}

void WMAlterResourcePlanRequest::__set_isEnableAndActivate(const bool val) {
  this->isEnableAndActivate = val;
__isset.isEnableAndActivate = true;
}

void WMAlterResourcePlanRequest::__set_isForceDeactivate(const bool val) {
  this->isForceDeactivate = val;
__isset.isForceDeactivate = true;
}

void WMAlterResourcePlanRequest::__set_isReplace(const bool val) {
  this->isReplace = val;
__isset.isReplace = true;
}
std::ostream& operator<<(std::ostream& out, const WMAlterResourcePlanRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMAlterResourcePlanRequest &a, WMAlterResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.resourcePlan, b.resourcePlan);
  swap(a.isEnableAndActivate, b.isEnableAndActivate);
  swap(a.isForceDeactivate, b.isForceDeactivate);
  swap(a.isReplace, b.isReplace);
  swap(a.__isset, b.__isset);
}

WMAlterResourcePlanRequest::WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest& other1662) {
  resourcePlanName = other1662.resourcePlanName;
  resourcePlan = other1662.resourcePlan;
  isEnableAndActivate = other1662.isEnableAndActivate;
  isForceDeactivate = other1662.isForceDeactivate;
  isReplace = other1662.isReplace;
  __isset = other1662.__isset;
}
WMAlterResourcePlanRequest::WMAlterResourcePlanRequest( WMAlterResourcePlanRequest&& other1663) {
  resourcePlanName = std::move(other1663.resourcePlanName);
  resourcePlan = std::move(other1663.resourcePlan);
  isEnableAndActivate = std::move(other1663.isEnableAndActivate);
  isForceDeactivate = std::move(other1663.isForceDeactivate);
  isReplace = std::move(other1663.isReplace);
  __isset = std::move(other1663.__isset);
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(const WMAlterResourcePlanRequest& other1664) {
  resourcePlanName = other1664.resourcePlanName;
  resourcePlan = other1664.resourcePlan;
  isEnableAndActivate = other1664.isEnableAndActivate;
  isForceDeactivate = other1664.isForceDeactivate;
  isReplace = other1664.isReplace;
  __isset = other1664.__isset;
  return *this;
}
WMAlterResourcePlanRequest& WMAlterResourcePlanRequest::operator=(WMAlterResourcePlanRequest&& other1665) {
  resourcePlanName = std::move(other1665.resourcePlanName);
  resourcePlan = std::move(other1665.resourcePlan);
  isEnableAndActivate = std::move(other1665.isEnableAndActivate);
  isForceDeactivate = std::move(other1665.isForceDeactivate);
  isReplace = std::move(other1665.isReplace);
  __isset = std::move(other1665.__isset);
  return *this;
}
void WMAlterResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterResourcePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ", " << "resourcePlan="; (__isset.resourcePlan ? (out << to_string(resourcePlan)) : (out << "<null>"));
  out << ", " << "isEnableAndActivate="; (__isset.isEnableAndActivate ? (out << to_string(isEnableAndActivate)) : (out << "<null>"));
  out << ", " << "isForceDeactivate="; (__isset.isForceDeactivate ? (out << to_string(isForceDeactivate)) : (out << "<null>"));
  out << ", " << "isReplace="; (__isset.isReplace ? (out << to_string(isReplace)) : (out << "<null>"));
  out << ")";
}


WMAlterResourcePlanResponse::~WMAlterResourcePlanResponse() throw() {
}


void WMAlterResourcePlanResponse::__set_fullResourcePlan(const WMFullResourcePlan& val) {
  this->fullResourcePlan = val;
__isset.fullResourcePlan = true;
}
std::ostream& operator<<(std::ostream& out, const WMAlterResourcePlanResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMAlterResourcePlanResponse &a, WMAlterResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.fullResourcePlan, b.fullResourcePlan);
  swap(a.__isset, b.__isset);
}

WMAlterResourcePlanResponse::WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse& other1666) {
  fullResourcePlan = other1666.fullResourcePlan;
  __isset = other1666.__isset;
}
WMAlterResourcePlanResponse::WMAlterResourcePlanResponse( WMAlterResourcePlanResponse&& other1667) {
  fullResourcePlan = std::move(other1667.fullResourcePlan);
  __isset = std::move(other1667.__isset);
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(const WMAlterResourcePlanResponse& other1668) {
  fullResourcePlan = other1668.fullResourcePlan;
  __isset = other1668.__isset;
  return *this;
}
WMAlterResourcePlanResponse& WMAlterResourcePlanResponse::operator=(WMAlterResourcePlanResponse&& other1669) {
  fullResourcePlan = std::move(other1669.fullResourcePlan);
  __isset = std::move(other1669.__isset);
  return *this;
}
void WMAlterResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterResourcePlanResponse(";
  out << "fullResourcePlan="; (__isset.fullResourcePlan ? (out << to_string(fullResourcePlan)) : (out << "<null>"));
  out << ")";
}


WMValidateResourcePlanRequest::~WMValidateResourcePlanRequest() throw() {
}


void WMValidateResourcePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}
std::ostream& operator<<(std::ostream& out, const WMValidateResourcePlanRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMValidateResourcePlanRequest &a, WMValidateResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.__isset, b.__isset);
}

WMValidateResourcePlanRequest::WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest& other1670) {
  resourcePlanName = other1670.resourcePlanName;
  __isset = other1670.__isset;
}
WMValidateResourcePlanRequest::WMValidateResourcePlanRequest( WMValidateResourcePlanRequest&& other1671) {
  resourcePlanName = std::move(other1671.resourcePlanName);
  __isset = std::move(other1671.__isset);
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(const WMValidateResourcePlanRequest& other1672) {
  resourcePlanName = other1672.resourcePlanName;
  __isset = other1672.__isset;
  return *this;
}
WMValidateResourcePlanRequest& WMValidateResourcePlanRequest::operator=(WMValidateResourcePlanRequest&& other1673) {
  resourcePlanName = std::move(other1673.resourcePlanName);
  __isset = std::move(other1673.__isset);
  return *this;
}
void WMValidateResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMValidateResourcePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ")";
}


WMValidateResourcePlanResponse::~WMValidateResourcePlanResponse() throw() {
}


void WMValidateResourcePlanResponse::__set_errors(const std::vector<std::string> & val) {
  this->errors = val;
__isset.errors = true;
}

void WMValidateResourcePlanResponse::__set_warnings(const std::vector<std::string> & val) {
  this->warnings = val;
__isset.warnings = true;
}
std::ostream& operator<<(std::ostream& out, const WMValidateResourcePlanResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMValidateResourcePlanResponse &a, WMValidateResourcePlanResponse &b) {
  using ::std::swap;
  swap(a.errors, b.errors);
  swap(a.warnings, b.warnings);
  swap(a.__isset, b.__isset);
}

WMValidateResourcePlanResponse::WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse& other1686) {
  errors = other1686.errors;
  warnings = other1686.warnings;
  __isset = other1686.__isset;
}
WMValidateResourcePlanResponse::WMValidateResourcePlanResponse( WMValidateResourcePlanResponse&& other1687) {
  errors = std::move(other1687.errors);
  warnings = std::move(other1687.warnings);
  __isset = std::move(other1687.__isset);
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(const WMValidateResourcePlanResponse& other1688) {
  errors = other1688.errors;
  warnings = other1688.warnings;
  __isset = other1688.__isset;
  return *this;
}
WMValidateResourcePlanResponse& WMValidateResourcePlanResponse::operator=(WMValidateResourcePlanResponse&& other1689) {
  errors = std::move(other1689.errors);
  warnings = std::move(other1689.warnings);
  __isset = std::move(other1689.__isset);
  return *this;
}
void WMValidateResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMValidateResourcePlanResponse(";
  out << "errors="; (__isset.errors ? (out << to_string(errors)) : (out << "<null>"));
  out << ", " << "warnings="; (__isset.warnings ? (out << to_string(warnings)) : (out << "<null>"));
  out << ")";
}


WMDropResourcePlanRequest::~WMDropResourcePlanRequest() throw() {
}


void WMDropResourcePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}
std::ostream& operator<<(std::ostream& out, const WMDropResourcePlanRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMDropResourcePlanRequest &a, WMDropResourcePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.__isset, b.__isset);
}

WMDropResourcePlanRequest::WMDropResourcePlanRequest(const WMDropResourcePlanRequest& other1690) {
  resourcePlanName = other1690.resourcePlanName;
  __isset = other1690.__isset;
}
WMDropResourcePlanRequest::WMDropResourcePlanRequest( WMDropResourcePlanRequest&& other1691) {
  resourcePlanName = std::move(other1691.resourcePlanName);
  __isset = std::move(other1691.__isset);
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(const WMDropResourcePlanRequest& other1692) {
  resourcePlanName = other1692.resourcePlanName;
  __isset = other1692.__isset;
  return *this;
}
WMDropResourcePlanRequest& WMDropResourcePlanRequest::operator=(WMDropResourcePlanRequest&& other1693) {
  resourcePlanName = std::move(other1693.resourcePlanName);
  __isset = std::move(other1693.__isset);
  return *this;
}
void WMDropResourcePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropResourcePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ")";
}


WMDropResourcePlanResponse::~WMDropResourcePlanResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMDropResourcePlanResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMDropResourcePlanResponse &a, WMDropResourcePlanResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMDropResourcePlanResponse::WMDropResourcePlanResponse(const WMDropResourcePlanResponse& other1694) {
  (void) other1694;
}
WMDropResourcePlanResponse::WMDropResourcePlanResponse( WMDropResourcePlanResponse&& other1695) {
  (void) other1695;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(const WMDropResourcePlanResponse& other1696) {
  (void) other1696;
  return *this;
}
WMDropResourcePlanResponse& WMDropResourcePlanResponse::operator=(WMDropResourcePlanResponse&& other1697) {
  (void) other1697;
  return *this;
}
void WMDropResourcePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropResourcePlanResponse(";
  out << ")";
}


WMCreateTriggerRequest::~WMCreateTriggerRequest() throw() {
}


void WMCreateTriggerRequest::__set_trigger(const WMTrigger& val) {
  this->trigger = val;
__isset.trigger = true;
}
std::ostream& operator<<(std::ostream& out, const WMCreateTriggerRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMCreateTriggerRequest &a, WMCreateTriggerRequest &b) {
  using ::std::swap;
  swap(a.trigger, b.trigger);
  swap(a.__isset, b.__isset);
}

WMCreateTriggerRequest::WMCreateTriggerRequest(const WMCreateTriggerRequest& other1698) {
  trigger = other1698.trigger;
  __isset = other1698.__isset;
}
WMCreateTriggerRequest::WMCreateTriggerRequest( WMCreateTriggerRequest&& other1699) {
  trigger = std::move(other1699.trigger);
  __isset = std::move(other1699.__isset);
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(const WMCreateTriggerRequest& other1700) {
  trigger = other1700.trigger;
  __isset = other1700.__isset;
  return *this;
}
WMCreateTriggerRequest& WMCreateTriggerRequest::operator=(WMCreateTriggerRequest&& other1701) {
  trigger = std::move(other1701.trigger);
  __isset = std::move(other1701.__isset);
  return *this;
}
void WMCreateTriggerRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateTriggerRequest(";
  out << "trigger="; (__isset.trigger ? (out << to_string(trigger)) : (out << "<null>"));
  out << ")";
}


WMCreateTriggerResponse::~WMCreateTriggerResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMCreateTriggerResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMCreateTriggerResponse &a, WMCreateTriggerResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMCreateTriggerResponse::WMCreateTriggerResponse(const WMCreateTriggerResponse& other1702) {
  (void) other1702;
}
WMCreateTriggerResponse::WMCreateTriggerResponse( WMCreateTriggerResponse&& other1703) {
  (void) other1703;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(const WMCreateTriggerResponse& other1704) {
  (void) other1704;
  return *this;
}
WMCreateTriggerResponse& WMCreateTriggerResponse::operator=(WMCreateTriggerResponse&& other1705) {
  (void) other1705;
  return *this;
}
void WMCreateTriggerResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateTriggerResponse(";
  out << ")";
}


WMAlterTriggerRequest::~WMAlterTriggerRequest() throw() {
}


void WMAlterTriggerRequest::__set_trigger(const WMTrigger& val) {
  this->trigger = val;
__isset.trigger = true;
}
std::ostream& operator<<(std::ostream& out, const WMAlterTriggerRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMAlterTriggerRequest &a, WMAlterTriggerRequest &b) {
  using ::std::swap;
  swap(a.trigger, b.trigger);
  swap(a.__isset, b.__isset);
}

WMAlterTriggerRequest::WMAlterTriggerRequest(const WMAlterTriggerRequest& other1706) {
  trigger = other1706.trigger;
  __isset = other1706.__isset;
}
WMAlterTriggerRequest::WMAlterTriggerRequest( WMAlterTriggerRequest&& other1707) {
  trigger = std::move(other1707.trigger);
  __isset = std::move(other1707.__isset);
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(const WMAlterTriggerRequest& other1708) {
  trigger = other1708.trigger;
  __isset = other1708.__isset;
  return *this;
}
WMAlterTriggerRequest& WMAlterTriggerRequest::operator=(WMAlterTriggerRequest&& other1709) {
  trigger = std::move(other1709.trigger);
  __isset = std::move(other1709.__isset);
  return *this;
}
void WMAlterTriggerRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterTriggerRequest(";
  out << "trigger="; (__isset.trigger ? (out << to_string(trigger)) : (out << "<null>"));
  out << ")";
}


WMAlterTriggerResponse::~WMAlterTriggerResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMAlterTriggerResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMAlterTriggerResponse &a, WMAlterTriggerResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMAlterTriggerResponse::WMAlterTriggerResponse(const WMAlterTriggerResponse& other1710) {
  (void) other1710;
}
WMAlterTriggerResponse::WMAlterTriggerResponse( WMAlterTriggerResponse&& other1711) {
  (void) other1711;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(const WMAlterTriggerResponse& other1712) {
  (void) other1712;
  return *this;
}
WMAlterTriggerResponse& WMAlterTriggerResponse::operator=(WMAlterTriggerResponse&& other1713) {
  (void) other1713;
  return *this;
}
void WMAlterTriggerResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterTriggerResponse(";
  out << ")";
}


WMDropTriggerRequest::~WMDropTriggerRequest() throw() {
}


void WMDropTriggerRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

void WMDropTriggerRequest::__set_triggerName(const std::string& val) {
  this->triggerName = val;
__isset.triggerName = true;
}
std::ostream& operator<<(std::ostream& out, const WMDropTriggerRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMDropTriggerRequest &a, WMDropTriggerRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.triggerName, b.triggerName);
  swap(a.__isset, b.__isset);
}

WMDropTriggerRequest::WMDropTriggerRequest(const WMDropTriggerRequest& other1714) {
  resourcePlanName = other1714.resourcePlanName;
  triggerName = other1714.triggerName;
  __isset = other1714.__isset;
}
WMDropTriggerRequest::WMDropTriggerRequest( WMDropTriggerRequest&& other1715) {
  resourcePlanName = std::move(other1715.resourcePlanName);
  triggerName = std::move(other1715.triggerName);
  __isset = std::move(other1715.__isset);
}
WMDropTriggerRequest& WMDropTriggerRequest::operator=(const WMDropTriggerRequest& other1716) {
  resourcePlanName = other1716.resourcePlanName;
  triggerName = other1716.triggerName;
  __isset = other1716.__isset;
  return *this;
}
WMDropTriggerRequest& WMDropTriggerRequest::operator=(WMDropTriggerRequest&& other1717) {
  resourcePlanName = std::move(other1717.resourcePlanName);
  triggerName = std::move(other1717.triggerName);
  __isset = std::move(other1717.__isset);
  return *this;
}
void WMDropTriggerRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropTriggerRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ", " << "triggerName="; (__isset.triggerName ? (out << to_string(triggerName)) : (out << "<null>"));
  out << ")";
}


WMDropTriggerResponse::~WMDropTriggerResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMDropTriggerResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMDropTriggerResponse &a, WMDropTriggerResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMDropTriggerResponse::WMDropTriggerResponse(const WMDropTriggerResponse& other1718) {
  (void) other1718;
}
WMDropTriggerResponse::WMDropTriggerResponse( WMDropTriggerResponse&& other1719) {
  (void) other1719;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(const WMDropTriggerResponse& other1720) {
  (void) other1720;
  return *this;
}
WMDropTriggerResponse& WMDropTriggerResponse::operator=(WMDropTriggerResponse&& other1721) {
  (void) other1721;
  return *this;
}
void WMDropTriggerResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropTriggerResponse(";
  out << ")";
}


WMGetTriggersForResourePlanRequest::~WMGetTriggersForResourePlanRequest() throw() {
}


void WMGetTriggersForResourePlanRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}
std::ostream& operator<<(std::ostream& out, const WMGetTriggersForResourePlanRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMGetTriggersForResourePlanRequest &a, WMGetTriggersForResourePlanRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.__isset, b.__isset);
}

WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest& other1722) {
  resourcePlanName = other1722.resourcePlanName;
  __isset = other1722.__isset;
}
WMGetTriggersForResourePlanRequest::WMGetTriggersForResourePlanRequest( WMGetTriggersForResourePlanRequest&& other1723) {
  resourcePlanName = std::move(other1723.resourcePlanName);
  __isset = std::move(other1723.__isset);
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(const WMGetTriggersForResourePlanRequest& other1724) {
  resourcePlanName = other1724.resourcePlanName;
  __isset = other1724.__isset;
  return *this;
}
WMGetTriggersForResourePlanRequest& WMGetTriggersForResourePlanRequest::operator=(WMGetTriggersForResourePlanRequest&& other1725) {
  resourcePlanName = std::move(other1725.resourcePlanName);
  __isset = std::move(other1725.__isset);
  return *this;
}
void WMGetTriggersForResourePlanRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetTriggersForResourePlanRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ")";
}


WMGetTriggersForResourePlanResponse::~WMGetTriggersForResourePlanResponse() throw() {
}


void WMGetTriggersForResourePlanResponse::__set_triggers(const std::vector<WMTrigger> & val) {
  this->triggers = val;
__isset.triggers = true;
}
std::ostream& operator<<(std::ostream& out, const WMGetTriggersForResourePlanResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMGetTriggersForResourePlanResponse &a, WMGetTriggersForResourePlanResponse &b) {
  using ::std::swap;
  swap(a.triggers, b.triggers);
  swap(a.__isset, b.__isset);
}

WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse& other1732) {
  triggers = other1732.triggers;
  __isset = other1732.__isset;
}
WMGetTriggersForResourePlanResponse::WMGetTriggersForResourePlanResponse( WMGetTriggersForResourePlanResponse&& other1733) {
  triggers = std::move(other1733.triggers);
  __isset = std::move(other1733.__isset);
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(const WMGetTriggersForResourePlanResponse& other1734) {
  triggers = other1734.triggers;
  __isset = other1734.__isset;
  return *this;
}
WMGetTriggersForResourePlanResponse& WMGetTriggersForResourePlanResponse::operator=(WMGetTriggersForResourePlanResponse&& other1735) {
  triggers = std::move(other1735.triggers);
  __isset = std::move(other1735.__isset);
  return *this;
}
void WMGetTriggersForResourePlanResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMGetTriggersForResourePlanResponse(";
  out << "triggers="; (__isset.triggers ? (out << to_string(triggers)) : (out << "<null>"));
  out << ")";
}


WMCreatePoolRequest::~WMCreatePoolRequest() throw() {
}


void WMCreatePoolRequest::__set_pool(const WMPool& val) {
  this->pool = val;
__isset.pool = true;
}
std::ostream& operator<<(std::ostream& out, const WMCreatePoolRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMCreatePoolRequest &a, WMCreatePoolRequest &b) {
  using ::std::swap;
  swap(a.pool, b.pool);
  swap(a.__isset, b.__isset);
}

WMCreatePoolRequest::WMCreatePoolRequest(const WMCreatePoolRequest& other1736) {
  pool = other1736.pool;
  __isset = other1736.__isset;
}
WMCreatePoolRequest::WMCreatePoolRequest( WMCreatePoolRequest&& other1737) {
  pool = std::move(other1737.pool);
  __isset = std::move(other1737.__isset);
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(const WMCreatePoolRequest& other1738) {
  pool = other1738.pool;
  __isset = other1738.__isset;
  return *this;
}
WMCreatePoolRequest& WMCreatePoolRequest::operator=(WMCreatePoolRequest&& other1739) {
  pool = std::move(other1739.pool);
  __isset = std::move(other1739.__isset);
  return *this;
}
void WMCreatePoolRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreatePoolRequest(";
  out << "pool="; (__isset.pool ? (out << to_string(pool)) : (out << "<null>"));
  out << ")";
}


WMCreatePoolResponse::~WMCreatePoolResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMCreatePoolResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMCreatePoolResponse &a, WMCreatePoolResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMCreatePoolResponse::WMCreatePoolResponse(const WMCreatePoolResponse& other1740) {
  (void) other1740;
}
WMCreatePoolResponse::WMCreatePoolResponse( WMCreatePoolResponse&& other1741) {
  (void) other1741;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(const WMCreatePoolResponse& other1742) {
  (void) other1742;
  return *this;
}
WMCreatePoolResponse& WMCreatePoolResponse::operator=(WMCreatePoolResponse&& other1743) {
  (void) other1743;
  return *this;
}
void WMCreatePoolResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreatePoolResponse(";
  out << ")";
}


WMAlterPoolRequest::~WMAlterPoolRequest() throw() {
}


void WMAlterPoolRequest::__set_pool(const WMNullablePool& val) {
  this->pool = val;
__isset.pool = true;
}

void WMAlterPoolRequest::__set_poolPath(const std::string& val) {
  this->poolPath = val;
__isset.poolPath = true;
}
std::ostream& operator<<(std::ostream& out, const WMAlterPoolRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMAlterPoolRequest &a, WMAlterPoolRequest &b) {
  using ::std::swap;
  swap(a.pool, b.pool);
  swap(a.poolPath, b.poolPath);
  swap(a.__isset, b.__isset);
}

WMAlterPoolRequest::WMAlterPoolRequest(const WMAlterPoolRequest& other1744) {
  pool = other1744.pool;
  poolPath = other1744.poolPath;
  __isset = other1744.__isset;
}
WMAlterPoolRequest::WMAlterPoolRequest( WMAlterPoolRequest&& other1745) {
  pool = std::move(other1745.pool);
  poolPath = std::move(other1745.poolPath);
  __isset = std::move(other1745.__isset);
}
WMAlterPoolRequest& WMAlterPoolRequest::operator=(const WMAlterPoolRequest& other1746) {
  pool = other1746.pool;
  poolPath = other1746.poolPath;
  __isset = other1746.__isset;
  return *this;
}
WMAlterPoolRequest& WMAlterPoolRequest::operator=(WMAlterPoolRequest&& other1747) {
  pool = std::move(other1747.pool);
  poolPath = std::move(other1747.poolPath);
  __isset = std::move(other1747.__isset);
  return *this;
}
void WMAlterPoolRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterPoolRequest(";
  out << "pool="; (__isset.pool ? (out << to_string(pool)) : (out << "<null>"));
  out << ", " << "poolPath="; (__isset.poolPath ? (out << to_string(poolPath)) : (out << "<null>"));
  out << ")";
}


WMAlterPoolResponse::~WMAlterPoolResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMAlterPoolResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMAlterPoolResponse &a, WMAlterPoolResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMAlterPoolResponse::WMAlterPoolResponse(const WMAlterPoolResponse& other1748) {
  (void) other1748;
}
WMAlterPoolResponse::WMAlterPoolResponse( WMAlterPoolResponse&& other1749) {
  (void) other1749;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(const WMAlterPoolResponse& other1750) {
  (void) other1750;
  return *this;
}
WMAlterPoolResponse& WMAlterPoolResponse::operator=(WMAlterPoolResponse&& other1751) {
  (void) other1751;
  return *this;
}
void WMAlterPoolResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMAlterPoolResponse(";
  out << ")";
}


WMDropPoolRequest::~WMDropPoolRequest() throw() {
}


void WMDropPoolRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

void WMDropPoolRequest::__set_poolPath(const std::string& val) {
  this->poolPath = val;
__isset.poolPath = true;
}
std::ostream& operator<<(std::ostream& out, const WMDropPoolRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMDropPoolRequest &a, WMDropPoolRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.poolPath, b.poolPath);
  swap(a.__isset, b.__isset);
}

WMDropPoolRequest::WMDropPoolRequest(const WMDropPoolRequest& other1752) {
  resourcePlanName = other1752.resourcePlanName;
  poolPath = other1752.poolPath;
  __isset = other1752.__isset;
}
WMDropPoolRequest::WMDropPoolRequest( WMDropPoolRequest&& other1753) {
  resourcePlanName = std::move(other1753.resourcePlanName);
  poolPath = std::move(other1753.poolPath);
  __isset = std::move(other1753.__isset);
}
WMDropPoolRequest& WMDropPoolRequest::operator=(const WMDropPoolRequest& other1754) {
  resourcePlanName = other1754.resourcePlanName;
  poolPath = other1754.poolPath;
  __isset = other1754.__isset;
  return *this;
}
WMDropPoolRequest& WMDropPoolRequest::operator=(WMDropPoolRequest&& other1755) {
  resourcePlanName = std::move(other1755.resourcePlanName);
  poolPath = std::move(other1755.poolPath);
  __isset = std::move(other1755.__isset);
  return *this;
}
void WMDropPoolRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropPoolRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ", " << "poolPath="; (__isset.poolPath ? (out << to_string(poolPath)) : (out << "<null>"));
  out << ")";
}


WMDropPoolResponse::~WMDropPoolResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMDropPoolResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMDropPoolResponse &a, WMDropPoolResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMDropPoolResponse::WMDropPoolResponse(const WMDropPoolResponse& other1756) {
  (void) other1756;
}
WMDropPoolResponse::WMDropPoolResponse( WMDropPoolResponse&& other1757) {
  (void) other1757;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(const WMDropPoolResponse& other1758) {
  (void) other1758;
  return *this;
}
WMDropPoolResponse& WMDropPoolResponse::operator=(WMDropPoolResponse&& other1759) {
  (void) other1759;
  return *this;
}
void WMDropPoolResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropPoolResponse(";
  out << ")";
}


WMCreateOrUpdateMappingRequest::~WMCreateOrUpdateMappingRequest() throw() {
}


void WMCreateOrUpdateMappingRequest::__set_mapping(const WMMapping& val) {
  this->mapping = val;
__isset.mapping = true;
}

void WMCreateOrUpdateMappingRequest::__set_update(const bool val) {
  this->update = val;
__isset.update = true;
}
std::ostream& operator<<(std::ostream& out, const WMCreateOrUpdateMappingRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMCreateOrUpdateMappingRequest &a, WMCreateOrUpdateMappingRequest &b) {
  using ::std::swap;
  swap(a.mapping, b.mapping);
  swap(a.update, b.update);
  swap(a.__isset, b.__isset);
}

WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest& other1760) {
  mapping = other1760.mapping;
  update = other1760.update;
  __isset = other1760.__isset;
}
WMCreateOrUpdateMappingRequest::WMCreateOrUpdateMappingRequest( WMCreateOrUpdateMappingRequest&& other1761) {
  mapping = std::move(other1761.mapping);
  update = std::move(other1761.update);
  __isset = std::move(other1761.__isset);
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(const WMCreateOrUpdateMappingRequest& other1762) {
  mapping = other1762.mapping;
  update = other1762.update;
  __isset = other1762.__isset;
  return *this;
}
WMCreateOrUpdateMappingRequest& WMCreateOrUpdateMappingRequest::operator=(WMCreateOrUpdateMappingRequest&& other1763) {
  mapping = std::move(other1763.mapping);
  update = std::move(other1763.update);
  __isset = std::move(other1763.__isset);
  return *this;
}
void WMCreateOrUpdateMappingRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateOrUpdateMappingRequest(";
  out << "mapping="; (__isset.mapping ? (out << to_string(mapping)) : (out << "<null>"));
  out << ", " << "update="; (__isset.update ? (out << to_string(update)) : (out << "<null>"));
  out << ")";
}


WMCreateOrUpdateMappingResponse::~WMCreateOrUpdateMappingResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMCreateOrUpdateMappingResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMCreateOrUpdateMappingResponse &a, WMCreateOrUpdateMappingResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse& other1764) {
  (void) other1764;
}
WMCreateOrUpdateMappingResponse::WMCreateOrUpdateMappingResponse( WMCreateOrUpdateMappingResponse&& other1765) {
  (void) other1765;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(const WMCreateOrUpdateMappingResponse& other1766) {
  (void) other1766;
  return *this;
}
WMCreateOrUpdateMappingResponse& WMCreateOrUpdateMappingResponse::operator=(WMCreateOrUpdateMappingResponse&& other1767) {
  (void) other1767;
  return *this;
}
void WMCreateOrUpdateMappingResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateOrUpdateMappingResponse(";
  out << ")";
}


WMDropMappingRequest::~WMDropMappingRequest() throw() {
}


void WMDropMappingRequest::__set_mapping(const WMMapping& val) {
  this->mapping = val;
__isset.mapping = true;
}
std::ostream& operator<<(std::ostream& out, const WMDropMappingRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMDropMappingRequest &a, WMDropMappingRequest &b) {
  using ::std::swap;
  swap(a.mapping, b.mapping);
  swap(a.__isset, b.__isset);
}

WMDropMappingRequest::WMDropMappingRequest(const WMDropMappingRequest& other1768) {
  mapping = other1768.mapping;
  __isset = other1768.__isset;
}
WMDropMappingRequest::WMDropMappingRequest( WMDropMappingRequest&& other1769) {
  mapping = std::move(other1769.mapping);
  __isset = std::move(other1769.__isset);
}
WMDropMappingRequest& WMDropMappingRequest::operator=(const WMDropMappingRequest& other1770) {
  mapping = other1770.mapping;
  __isset = other1770.__isset;
  return *this;
}
WMDropMappingRequest& WMDropMappingRequest::operator=(WMDropMappingRequest&& other1771) {
  mapping = std::move(other1771.mapping);
  __isset = std::move(other1771.__isset);
  return *this;
}
void WMDropMappingRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropMappingRequest(";
  out << "mapping="; (__isset.mapping ? (out << to_string(mapping)) : (out << "<null>"));
  out << ")";
}


WMDropMappingResponse::~WMDropMappingResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMDropMappingResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMDropMappingResponse &a, WMDropMappingResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMDropMappingResponse::WMDropMappingResponse(const WMDropMappingResponse& other1772) {
  (void) other1772;
}
WMDropMappingResponse::WMDropMappingResponse( WMDropMappingResponse&& other1773) {
  (void) other1773;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(const WMDropMappingResponse& other1774) {
  (void) other1774;
  return *this;
}
WMDropMappingResponse& WMDropMappingResponse::operator=(WMDropMappingResponse&& other1775) {
  (void) other1775;
  return *this;
}
void WMDropMappingResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMDropMappingResponse(";
  out << ")";
}


WMCreateOrDropTriggerToPoolMappingRequest::~WMCreateOrDropTriggerToPoolMappingRequest() throw() {
}


void WMCreateOrDropTriggerToPoolMappingRequest::__set_resourcePlanName(const std::string& val) {
  this->resourcePlanName = val;
__isset.resourcePlanName = true;
}

void WMCreateOrDropTriggerToPoolMappingRequest::__set_triggerName(const std::string& val) {
  this->triggerName = val;
__isset.triggerName = true;
}

void WMCreateOrDropTriggerToPoolMappingRequest::__set_poolPath(const std::string& val) {
  this->poolPath = val;
__isset.poolPath = true;
}

void WMCreateOrDropTriggerToPoolMappingRequest::__set_drop(const bool val) {
  this->drop = val;
__isset.drop = true;
}
std::ostream& operator<<(std::ostream& out, const WMCreateOrDropTriggerToPoolMappingRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMCreateOrDropTriggerToPoolMappingRequest &a, WMCreateOrDropTriggerToPoolMappingRequest &b) {
  using ::std::swap;
  swap(a.resourcePlanName, b.resourcePlanName);
  swap(a.triggerName, b.triggerName);
  swap(a.poolPath, b.poolPath);
  swap(a.drop, b.drop);
  swap(a.__isset, b.__isset);
}

WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest& other1776) {
  resourcePlanName = other1776.resourcePlanName;
  triggerName = other1776.triggerName;
  poolPath = other1776.poolPath;
  drop = other1776.drop;
  __isset = other1776.__isset;
}
WMCreateOrDropTriggerToPoolMappingRequest::WMCreateOrDropTriggerToPoolMappingRequest( WMCreateOrDropTriggerToPoolMappingRequest&& other1777) {
  resourcePlanName = std::move(other1777.resourcePlanName);
  triggerName = std::move(other1777.triggerName);
  poolPath = std::move(other1777.poolPath);
  drop = std::move(other1777.drop);
  __isset = std::move(other1777.__isset);
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(const WMCreateOrDropTriggerToPoolMappingRequest& other1778) {
  resourcePlanName = other1778.resourcePlanName;
  triggerName = other1778.triggerName;
  poolPath = other1778.poolPath;
  drop = other1778.drop;
  __isset = other1778.__isset;
  return *this;
}
WMCreateOrDropTriggerToPoolMappingRequest& WMCreateOrDropTriggerToPoolMappingRequest::operator=(WMCreateOrDropTriggerToPoolMappingRequest&& other1779) {
  resourcePlanName = std::move(other1779.resourcePlanName);
  triggerName = std::move(other1779.triggerName);
  poolPath = std::move(other1779.poolPath);
  drop = std::move(other1779.drop);
  __isset = std::move(other1779.__isset);
  return *this;
}
void WMCreateOrDropTriggerToPoolMappingRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateOrDropTriggerToPoolMappingRequest(";
  out << "resourcePlanName="; (__isset.resourcePlanName ? (out << to_string(resourcePlanName)) : (out << "<null>"));
  out << ", " << "triggerName="; (__isset.triggerName ? (out << to_string(triggerName)) : (out << "<null>"));
  out << ", " << "poolPath="; (__isset.poolPath ? (out << to_string(poolPath)) : (out << "<null>"));
  out << ", " << "drop="; (__isset.drop ? (out << to_string(drop)) : (out << "<null>"));
  out << ")";
}


WMCreateOrDropTriggerToPoolMappingResponse::~WMCreateOrDropTriggerToPoolMappingResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const WMCreateOrDropTriggerToPoolMappingResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(WMCreateOrDropTriggerToPoolMappingResponse &a, WMCreateOrDropTriggerToPoolMappingResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse& other1780) {
  (void) other1780;
}
WMCreateOrDropTriggerToPoolMappingResponse::WMCreateOrDropTriggerToPoolMappingResponse( WMCreateOrDropTriggerToPoolMappingResponse&& other1781) {
  (void) other1781;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(const WMCreateOrDropTriggerToPoolMappingResponse& other1782) {
  (void) other1782;
  return *this;
}
WMCreateOrDropTriggerToPoolMappingResponse& WMCreateOrDropTriggerToPoolMappingResponse::operator=(WMCreateOrDropTriggerToPoolMappingResponse&& other1783) {
  (void) other1783;
  return *this;
}
void WMCreateOrDropTriggerToPoolMappingResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WMCreateOrDropTriggerToPoolMappingResponse(";
  out << ")";
}


ISchema::~ISchema() throw() {
}


void ISchema::__set_schemaType(const SchemaType::type val) {
  this->schemaType = val;
}

void ISchema::__set_name(const std::string& val) {
  this->name = val;
}

void ISchema::__set_catName(const std::string& val) {
  this->catName = val;
}

void ISchema::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void ISchema::__set_compatibility(const SchemaCompatibility::type val) {
  this->compatibility = val;
}

void ISchema::__set_validationLevel(const SchemaValidation::type val) {
  this->validationLevel = val;
}

void ISchema::__set_canEvolve(const bool val) {
  this->canEvolve = val;
}

void ISchema::__set_schemaGroup(const std::string& val) {
  this->schemaGroup = val;
__isset.schemaGroup = true;
}

void ISchema::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}
std::ostream& operator<<(std::ostream& out, const ISchema& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ISchema &a, ISchema &b) {
  using ::std::swap;
  swap(a.schemaType, b.schemaType);
  swap(a.name, b.name);
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.compatibility, b.compatibility);
  swap(a.validationLevel, b.validationLevel);
  swap(a.canEvolve, b.canEvolve);
  swap(a.schemaGroup, b.schemaGroup);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

ISchema::ISchema(const ISchema& other1787) {
  schemaType = other1787.schemaType;
  name = other1787.name;
  catName = other1787.catName;
  dbName = other1787.dbName;
  compatibility = other1787.compatibility;
  validationLevel = other1787.validationLevel;
  canEvolve = other1787.canEvolve;
  schemaGroup = other1787.schemaGroup;
  description = other1787.description;
  __isset = other1787.__isset;
}
ISchema::ISchema( ISchema&& other1788) {
  schemaType = std::move(other1788.schemaType);
  name = std::move(other1788.name);
  catName = std::move(other1788.catName);
  dbName = std::move(other1788.dbName);
  compatibility = std::move(other1788.compatibility);
  validationLevel = std::move(other1788.validationLevel);
  canEvolve = std::move(other1788.canEvolve);
  schemaGroup = std::move(other1788.schemaGroup);
  description = std::move(other1788.description);
  __isset = std::move(other1788.__isset);
}
ISchema& ISchema::operator=(const ISchema& other1789) {
  schemaType = other1789.schemaType;
  name = other1789.name;
  catName = other1789.catName;
  dbName = other1789.dbName;
  compatibility = other1789.compatibility;
  validationLevel = other1789.validationLevel;
  canEvolve = other1789.canEvolve;
  schemaGroup = other1789.schemaGroup;
  description = other1789.description;
  __isset = other1789.__isset;
  return *this;
}
ISchema& ISchema::operator=(ISchema&& other1790) {
  schemaType = std::move(other1790.schemaType);
  name = std::move(other1790.name);
  catName = std::move(other1790.catName);
  dbName = std::move(other1790.dbName);
  compatibility = std::move(other1790.compatibility);
  validationLevel = std::move(other1790.validationLevel);
  canEvolve = std::move(other1790.canEvolve);
  schemaGroup = std::move(other1790.schemaGroup);
  description = std::move(other1790.description);
  __isset = std::move(other1790.__isset);
  return *this;
}
void ISchema::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ISchema(";
  out << "schemaType=" << to_string(schemaType);
  out << ", " << "name=" << to_string(name);
  out << ", " << "catName=" << to_string(catName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "compatibility=" << to_string(compatibility);
  out << ", " << "validationLevel=" << to_string(validationLevel);
  out << ", " << "canEvolve=" << to_string(canEvolve);
  out << ", " << "schemaGroup="; (__isset.schemaGroup ? (out << to_string(schemaGroup)) : (out << "<null>"));
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ")";
}


ISchemaName::~ISchemaName() throw() {
}


void ISchemaName::__set_catName(const std::string& val) {
  this->catName = val;
}

void ISchemaName::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void ISchemaName::__set_schemaName(const std::string& val) {
  this->schemaName = val;
}
std::ostream& operator<<(std::ostream& out, const ISchemaName& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ISchemaName &a, ISchemaName &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.schemaName, b.schemaName);
  swap(a.__isset, b.__isset);
}

ISchemaName::ISchemaName(const ISchemaName& other1791) {
  catName = other1791.catName;
  dbName = other1791.dbName;
  schemaName = other1791.schemaName;
  __isset = other1791.__isset;
}
ISchemaName::ISchemaName( ISchemaName&& other1792) {
  catName = std::move(other1792.catName);
  dbName = std::move(other1792.dbName);
  schemaName = std::move(other1792.schemaName);
  __isset = std::move(other1792.__isset);
}
ISchemaName& ISchemaName::operator=(const ISchemaName& other1793) {
  catName = other1793.catName;
  dbName = other1793.dbName;
  schemaName = other1793.schemaName;
  __isset = other1793.__isset;
  return *this;
}
ISchemaName& ISchemaName::operator=(ISchemaName&& other1794) {
  catName = std::move(other1794.catName);
  dbName = std::move(other1794.dbName);
  schemaName = std::move(other1794.schemaName);
  __isset = std::move(other1794.__isset);
  return *this;
}
void ISchemaName::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ISchemaName(";
  out << "catName=" << to_string(catName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "schemaName=" << to_string(schemaName);
  out << ")";
}


AlterISchemaRequest::~AlterISchemaRequest() throw() {
}


void AlterISchemaRequest::__set_name(const ISchemaName& val) {
  this->name = val;
}

void AlterISchemaRequest::__set_newSchema(const ISchema& val) {
  this->newSchema = val;
}
std::ostream& operator<<(std::ostream& out, const AlterISchemaRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AlterISchemaRequest &a, AlterISchemaRequest &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.newSchema, b.newSchema);
  swap(a.__isset, b.__isset);
}

AlterISchemaRequest::AlterISchemaRequest(const AlterISchemaRequest& other1795) {
  name = other1795.name;
  newSchema = other1795.newSchema;
  __isset = other1795.__isset;
}
AlterISchemaRequest::AlterISchemaRequest( AlterISchemaRequest&& other1796) {
  name = std::move(other1796.name);
  newSchema = std::move(other1796.newSchema);
  __isset = std::move(other1796.__isset);
}
AlterISchemaRequest& AlterISchemaRequest::operator=(const AlterISchemaRequest& other1797) {
  name = other1797.name;
  newSchema = other1797.newSchema;
  __isset = other1797.__isset;
  return *this;
}
AlterISchemaRequest& AlterISchemaRequest::operator=(AlterISchemaRequest&& other1798) {
  name = std::move(other1798.name);
  newSchema = std::move(other1798.newSchema);
  __isset = std::move(other1798.__isset);
  return *this;
}
void AlterISchemaRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AlterISchemaRequest(";
  out << "name=" << to_string(name);
  out << ", " << "newSchema=" << to_string(newSchema);
  out << ")";
}


SchemaVersion::~SchemaVersion() throw() {
}


void SchemaVersion::__set_schema(const ISchemaName& val) {
  this->schema = val;
}

void SchemaVersion::__set_version(const int32_t val) {
  this->version = val;
}

void SchemaVersion::__set_createdAt(const int64_t val) {
  this->createdAt = val;
}

void SchemaVersion::__set_cols(const std::vector<FieldSchema> & val) {
  this->cols = val;
}

void SchemaVersion::__set_state(const SchemaVersionState::type val) {
  this->state = val;
__isset.state = true;
}

void SchemaVersion::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

void SchemaVersion::__set_schemaText(const std::string& val) {
  this->schemaText = val;
__isset.schemaText = true;
}

void SchemaVersion::__set_fingerprint(const std::string& val) {
  this->fingerprint = val;
__isset.fingerprint = true;
}

void SchemaVersion::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void SchemaVersion::__set_serDe(const SerDeInfo& val) {
  this->serDe = val;
__isset.serDe = true;
}
std::ostream& operator<<(std::ostream& out, const SchemaVersion& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SchemaVersion &a, SchemaVersion &b) {
  using ::std::swap;
  swap(a.schema, b.schema);
  swap(a.version, b.version);
  swap(a.createdAt, b.createdAt);
  swap(a.cols, b.cols);
  swap(a.state, b.state);
  swap(a.description, b.description);
  swap(a.schemaText, b.schemaText);
  swap(a.fingerprint, b.fingerprint);
  swap(a.name, b.name);
  swap(a.serDe, b.serDe);
  swap(a.__isset, b.__isset);
}

SchemaVersion::SchemaVersion(const SchemaVersion& other1806) {
  schema = other1806.schema;
  version = other1806.version;
  createdAt = other1806.createdAt;
  cols = other1806.cols;
  state = other1806.state;
  description = other1806.description;
  schemaText = other1806.schemaText;
  fingerprint = other1806.fingerprint;
  name = other1806.name;
  serDe = other1806.serDe;
  __isset = other1806.__isset;
}
SchemaVersion::SchemaVersion( SchemaVersion&& other1807) {
  schema = std::move(other1807.schema);
  version = std::move(other1807.version);
  createdAt = std::move(other1807.createdAt);
  cols = std::move(other1807.cols);
  state = std::move(other1807.state);
  description = std::move(other1807.description);
  schemaText = std::move(other1807.schemaText);
  fingerprint = std::move(other1807.fingerprint);
  name = std::move(other1807.name);
  serDe = std::move(other1807.serDe);
  __isset = std::move(other1807.__isset);
}
SchemaVersion& SchemaVersion::operator=(const SchemaVersion& other1808) {
  schema = other1808.schema;
  version = other1808.version;
  createdAt = other1808.createdAt;
  cols = other1808.cols;
  state = other1808.state;
  description = other1808.description;
  schemaText = other1808.schemaText;
  fingerprint = other1808.fingerprint;
  name = other1808.name;
  serDe = other1808.serDe;
  __isset = other1808.__isset;
  return *this;
}
SchemaVersion& SchemaVersion::operator=(SchemaVersion&& other1809) {
  schema = std::move(other1809.schema);
  version = std::move(other1809.version);
  createdAt = std::move(other1809.createdAt);
  cols = std::move(other1809.cols);
  state = std::move(other1809.state);
  description = std::move(other1809.description);
  schemaText = std::move(other1809.schemaText);
  fingerprint = std::move(other1809.fingerprint);
  name = std::move(other1809.name);
  serDe = std::move(other1809.serDe);
  __isset = std::move(other1809.__isset);
  return *this;
}
void SchemaVersion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SchemaVersion(";
  out << "schema=" << to_string(schema);
  out << ", " << "version=" << to_string(version);
  out << ", " << "createdAt=" << to_string(createdAt);
  out << ", " << "cols=" << to_string(cols);
  out << ", " << "state="; (__isset.state ? (out << to_string(state)) : (out << "<null>"));
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ", " << "schemaText="; (__isset.schemaText ? (out << to_string(schemaText)) : (out << "<null>"));
  out << ", " << "fingerprint="; (__isset.fingerprint ? (out << to_string(fingerprint)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "serDe="; (__isset.serDe ? (out << to_string(serDe)) : (out << "<null>"));
  out << ")";
}


SchemaVersionDescriptor::~SchemaVersionDescriptor() throw() {
}


void SchemaVersionDescriptor::__set_schema(const ISchemaName& val) {
  this->schema = val;
}

void SchemaVersionDescriptor::__set_version(const int32_t val) {
  this->version = val;
}
std::ostream& operator<<(std::ostream& out, const SchemaVersionDescriptor& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SchemaVersionDescriptor &a, SchemaVersionDescriptor &b) {
  using ::std::swap;
  swap(a.schema, b.schema);
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}

SchemaVersionDescriptor::SchemaVersionDescriptor(const SchemaVersionDescriptor& other1810) {
  schema = other1810.schema;
  version = other1810.version;
  __isset = other1810.__isset;
}
SchemaVersionDescriptor::SchemaVersionDescriptor( SchemaVersionDescriptor&& other1811) {
  schema = std::move(other1811.schema);
  version = std::move(other1811.version);
  __isset = std::move(other1811.__isset);
}
SchemaVersionDescriptor& SchemaVersionDescriptor::operator=(const SchemaVersionDescriptor& other1812) {
  schema = other1812.schema;
  version = other1812.version;
  __isset = other1812.__isset;
  return *this;
}
SchemaVersionDescriptor& SchemaVersionDescriptor::operator=(SchemaVersionDescriptor&& other1813) {
  schema = std::move(other1813.schema);
  version = std::move(other1813.version);
  __isset = std::move(other1813.__isset);
  return *this;
}
void SchemaVersionDescriptor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SchemaVersionDescriptor(";
  out << "schema=" << to_string(schema);
  out << ", " << "version=" << to_string(version);
  out << ")";
}


FindSchemasByColsRqst::~FindSchemasByColsRqst() throw() {
}


void FindSchemasByColsRqst::__set_colName(const std::string& val) {
  this->colName = val;
__isset.colName = true;
}

void FindSchemasByColsRqst::__set_colNamespace(const std::string& val) {
  this->colNamespace = val;
__isset.colNamespace = true;
}

void FindSchemasByColsRqst::__set_type(const std::string& val) {
  this->type = val;
__isset.type = true;
}
std::ostream& operator<<(std::ostream& out, const FindSchemasByColsRqst& obj)
{
  obj.printTo(out);
  return out;
}


void swap(FindSchemasByColsRqst &a, FindSchemasByColsRqst &b) {
  using ::std::swap;
  swap(a.colName, b.colName);
  swap(a.colNamespace, b.colNamespace);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

FindSchemasByColsRqst::FindSchemasByColsRqst(const FindSchemasByColsRqst& other1814) {
  colName = other1814.colName;
  colNamespace = other1814.colNamespace;
  type = other1814.type;
  __isset = other1814.__isset;
}
FindSchemasByColsRqst::FindSchemasByColsRqst( FindSchemasByColsRqst&& other1815) {
  colName = std::move(other1815.colName);
  colNamespace = std::move(other1815.colNamespace);
  type = std::move(other1815.type);
  __isset = std::move(other1815.__isset);
}
FindSchemasByColsRqst& FindSchemasByColsRqst::operator=(const FindSchemasByColsRqst& other1816) {
  colName = other1816.colName;
  colNamespace = other1816.colNamespace;
  type = other1816.type;
  __isset = other1816.__isset;
  return *this;
}
FindSchemasByColsRqst& FindSchemasByColsRqst::operator=(FindSchemasByColsRqst&& other1817) {
  colName = std::move(other1817.colName);
  colNamespace = std::move(other1817.colNamespace);
  type = std::move(other1817.type);
  __isset = std::move(other1817.__isset);
  return *this;
}
void FindSchemasByColsRqst::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FindSchemasByColsRqst(";
  out << "colName="; (__isset.colName ? (out << to_string(colName)) : (out << "<null>"));
  out << ", " << "colNamespace="; (__isset.colNamespace ? (out << to_string(colNamespace)) : (out << "<null>"));
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ")";
}


FindSchemasByColsResp::~FindSchemasByColsResp() throw() {
}


void FindSchemasByColsResp::__set_schemaVersions(const std::vector<SchemaVersionDescriptor> & val) {
  this->schemaVersions = val;
}
std::ostream& operator<<(std::ostream& out, const FindSchemasByColsResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(FindSchemasByColsResp &a, FindSchemasByColsResp &b) {
  using ::std::swap;
  swap(a.schemaVersions, b.schemaVersions);
  swap(a.__isset, b.__isset);
}

FindSchemasByColsResp::FindSchemasByColsResp(const FindSchemasByColsResp& other1824) {
  schemaVersions = other1824.schemaVersions;
  __isset = other1824.__isset;
}
FindSchemasByColsResp::FindSchemasByColsResp( FindSchemasByColsResp&& other1825) {
  schemaVersions = std::move(other1825.schemaVersions);
  __isset = std::move(other1825.__isset);
}
FindSchemasByColsResp& FindSchemasByColsResp::operator=(const FindSchemasByColsResp& other1826) {
  schemaVersions = other1826.schemaVersions;
  __isset = other1826.__isset;
  return *this;
}
FindSchemasByColsResp& FindSchemasByColsResp::operator=(FindSchemasByColsResp&& other1827) {
  schemaVersions = std::move(other1827.schemaVersions);
  __isset = std::move(other1827.__isset);
  return *this;
}
void FindSchemasByColsResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FindSchemasByColsResp(";
  out << "schemaVersions=" << to_string(schemaVersions);
  out << ")";
}


MapSchemaVersionToSerdeRequest::~MapSchemaVersionToSerdeRequest() throw() {
}


void MapSchemaVersionToSerdeRequest::__set_schemaVersion(const SchemaVersionDescriptor& val) {
  this->schemaVersion = val;
}

void MapSchemaVersionToSerdeRequest::__set_serdeName(const std::string& val) {
  this->serdeName = val;
}
std::ostream& operator<<(std::ostream& out, const MapSchemaVersionToSerdeRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(MapSchemaVersionToSerdeRequest &a, MapSchemaVersionToSerdeRequest &b) {
  using ::std::swap;
  swap(a.schemaVersion, b.schemaVersion);
  swap(a.serdeName, b.serdeName);
  swap(a.__isset, b.__isset);
}

MapSchemaVersionToSerdeRequest::MapSchemaVersionToSerdeRequest(const MapSchemaVersionToSerdeRequest& other1828) {
  schemaVersion = other1828.schemaVersion;
  serdeName = other1828.serdeName;
  __isset = other1828.__isset;
}
MapSchemaVersionToSerdeRequest::MapSchemaVersionToSerdeRequest( MapSchemaVersionToSerdeRequest&& other1829) {
  schemaVersion = std::move(other1829.schemaVersion);
  serdeName = std::move(other1829.serdeName);
  __isset = std::move(other1829.__isset);
}
MapSchemaVersionToSerdeRequest& MapSchemaVersionToSerdeRequest::operator=(const MapSchemaVersionToSerdeRequest& other1830) {
  schemaVersion = other1830.schemaVersion;
  serdeName = other1830.serdeName;
  __isset = other1830.__isset;
  return *this;
}
MapSchemaVersionToSerdeRequest& MapSchemaVersionToSerdeRequest::operator=(MapSchemaVersionToSerdeRequest&& other1831) {
  schemaVersion = std::move(other1831.schemaVersion);
  serdeName = std::move(other1831.serdeName);
  __isset = std::move(other1831.__isset);
  return *this;
}
void MapSchemaVersionToSerdeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MapSchemaVersionToSerdeRequest(";
  out << "schemaVersion=" << to_string(schemaVersion);
  out << ", " << "serdeName=" << to_string(serdeName);
  out << ")";
}


SetSchemaVersionStateRequest::~SetSchemaVersionStateRequest() throw() {
}


void SetSchemaVersionStateRequest::__set_schemaVersion(const SchemaVersionDescriptor& val) {
  this->schemaVersion = val;
}

void SetSchemaVersionStateRequest::__set_state(const SchemaVersionState::type val) {
  this->state = val;
}
std::ostream& operator<<(std::ostream& out, const SetSchemaVersionStateRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SetSchemaVersionStateRequest &a, SetSchemaVersionStateRequest &b) {
  using ::std::swap;
  swap(a.schemaVersion, b.schemaVersion);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

SetSchemaVersionStateRequest::SetSchemaVersionStateRequest(const SetSchemaVersionStateRequest& other1833) {
  schemaVersion = other1833.schemaVersion;
  state = other1833.state;
  __isset = other1833.__isset;
}
SetSchemaVersionStateRequest::SetSchemaVersionStateRequest( SetSchemaVersionStateRequest&& other1834) {
  schemaVersion = std::move(other1834.schemaVersion);
  state = std::move(other1834.state);
  __isset = std::move(other1834.__isset);
}
SetSchemaVersionStateRequest& SetSchemaVersionStateRequest::operator=(const SetSchemaVersionStateRequest& other1835) {
  schemaVersion = other1835.schemaVersion;
  state = other1835.state;
  __isset = other1835.__isset;
  return *this;
}
SetSchemaVersionStateRequest& SetSchemaVersionStateRequest::operator=(SetSchemaVersionStateRequest&& other1836) {
  schemaVersion = std::move(other1836.schemaVersion);
  state = std::move(other1836.state);
  __isset = std::move(other1836.__isset);
  return *this;
}
void SetSchemaVersionStateRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SetSchemaVersionStateRequest(";
  out << "schemaVersion=" << to_string(schemaVersion);
  out << ", " << "state=" << to_string(state);
  out << ")";
}


GetSerdeRequest::~GetSerdeRequest() throw() {
}


void GetSerdeRequest::__set_serdeName(const std::string& val) {
  this->serdeName = val;
}
std::ostream& operator<<(std::ostream& out, const GetSerdeRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetSerdeRequest &a, GetSerdeRequest &b) {
  using ::std::swap;
  swap(a.serdeName, b.serdeName);
  swap(a.__isset, b.__isset);
}

GetSerdeRequest::GetSerdeRequest(const GetSerdeRequest& other1837) {
  serdeName = other1837.serdeName;
  __isset = other1837.__isset;
}
GetSerdeRequest::GetSerdeRequest( GetSerdeRequest&& other1838) {
  serdeName = std::move(other1838.serdeName);
  __isset = std::move(other1838.__isset);
}
GetSerdeRequest& GetSerdeRequest::operator=(const GetSerdeRequest& other1839) {
  serdeName = other1839.serdeName;
  __isset = other1839.__isset;
  return *this;
}
GetSerdeRequest& GetSerdeRequest::operator=(GetSerdeRequest&& other1840) {
  serdeName = std::move(other1840.serdeName);
  __isset = std::move(other1840.__isset);
  return *this;
}
void GetSerdeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSerdeRequest(";
  out << "serdeName=" << to_string(serdeName);
  out << ")";
}


RuntimeStat::~RuntimeStat() throw() {
}


void RuntimeStat::__set_createTime(const int32_t val) {
  this->createTime = val;
__isset.createTime = true;
}

void RuntimeStat::__set_weight(const int32_t val) {
  this->weight = val;
}

void RuntimeStat::__set_payload(const std::string& val) {
  this->payload = val;
}
std::ostream& operator<<(std::ostream& out, const RuntimeStat& obj)
{
  obj.printTo(out);
  return out;
}


void swap(RuntimeStat &a, RuntimeStat &b) {
  using ::std::swap;
  swap(a.createTime, b.createTime);
  swap(a.weight, b.weight);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

RuntimeStat::RuntimeStat(const RuntimeStat& other1841) {
  createTime = other1841.createTime;
  weight = other1841.weight;
  payload = other1841.payload;
  __isset = other1841.__isset;
}
RuntimeStat::RuntimeStat( RuntimeStat&& other1842) {
  createTime = std::move(other1842.createTime);
  weight = std::move(other1842.weight);
  payload = std::move(other1842.payload);
  __isset = std::move(other1842.__isset);
}
RuntimeStat& RuntimeStat::operator=(const RuntimeStat& other1843) {
  createTime = other1843.createTime;
  weight = other1843.weight;
  payload = other1843.payload;
  __isset = other1843.__isset;
  return *this;
}
RuntimeStat& RuntimeStat::operator=(RuntimeStat&& other1844) {
  createTime = std::move(other1844.createTime);
  weight = std::move(other1844.weight);
  payload = std::move(other1844.payload);
  __isset = std::move(other1844.__isset);
  return *this;
}
void RuntimeStat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuntimeStat(";
  out << "createTime="; (__isset.createTime ? (out << to_string(createTime)) : (out << "<null>"));
  out << ", " << "weight=" << to_string(weight);
  out << ", " << "payload=" << to_string(payload);
  out << ")";
}


GetRuntimeStatsRequest::~GetRuntimeStatsRequest() throw() {
}


void GetRuntimeStatsRequest::__set_maxWeight(const int32_t val) {
  this->maxWeight = val;
}

void GetRuntimeStatsRequest::__set_maxCreateTime(const int32_t val) {
  this->maxCreateTime = val;
}
std::ostream& operator<<(std::ostream& out, const GetRuntimeStatsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetRuntimeStatsRequest &a, GetRuntimeStatsRequest &b) {
  using ::std::swap;
  swap(a.maxWeight, b.maxWeight);
  swap(a.maxCreateTime, b.maxCreateTime);
}

GetRuntimeStatsRequest::GetRuntimeStatsRequest(const GetRuntimeStatsRequest& other1845) {
  maxWeight = other1845.maxWeight;
  maxCreateTime = other1845.maxCreateTime;
}
GetRuntimeStatsRequest::GetRuntimeStatsRequest( GetRuntimeStatsRequest&& other1846) {
  maxWeight = std::move(other1846.maxWeight);
  maxCreateTime = std::move(other1846.maxCreateTime);
}
GetRuntimeStatsRequest& GetRuntimeStatsRequest::operator=(const GetRuntimeStatsRequest& other1847) {
  maxWeight = other1847.maxWeight;
  maxCreateTime = other1847.maxCreateTime;
  return *this;
}
GetRuntimeStatsRequest& GetRuntimeStatsRequest::operator=(GetRuntimeStatsRequest&& other1848) {
  maxWeight = std::move(other1848.maxWeight);
  maxCreateTime = std::move(other1848.maxCreateTime);
  return *this;
}
void GetRuntimeStatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetRuntimeStatsRequest(";
  out << "maxWeight=" << to_string(maxWeight);
  out << ", " << "maxCreateTime=" << to_string(maxCreateTime);
  out << ")";
}


CreateTableRequest::~CreateTableRequest() throw() {
}


void CreateTableRequest::__set_table(const Table& val) {
  this->table = val;
}

void CreateTableRequest::__set_envContext(const EnvironmentContext& val) {
  this->envContext = val;
__isset.envContext = true;
}

void CreateTableRequest::__set_primaryKeys(const std::vector<SQLPrimaryKey> & val) {
  this->primaryKeys = val;
__isset.primaryKeys = true;
}

void CreateTableRequest::__set_foreignKeys(const std::vector<SQLForeignKey> & val) {
  this->foreignKeys = val;
__isset.foreignKeys = true;
}

void CreateTableRequest::__set_uniqueConstraints(const std::vector<SQLUniqueConstraint> & val) {
  this->uniqueConstraints = val;
__isset.uniqueConstraints = true;
}

void CreateTableRequest::__set_notNullConstraints(const std::vector<SQLNotNullConstraint> & val) {
  this->notNullConstraints = val;
__isset.notNullConstraints = true;
}

void CreateTableRequest::__set_defaultConstraints(const std::vector<SQLDefaultConstraint> & val) {
  this->defaultConstraints = val;
__isset.defaultConstraints = true;
}

void CreateTableRequest::__set_checkConstraints(const std::vector<SQLCheckConstraint> & val) {
  this->checkConstraints = val;
__isset.checkConstraints = true;
}

void CreateTableRequest::__set_processorCapabilities(const std::vector<std::string> & val) {
  this->processorCapabilities = val;
__isset.processorCapabilities = true;
}

void CreateTableRequest::__set_processorIdentifier(const std::string& val) {
  this->processorIdentifier = val;
__isset.processorIdentifier = true;
}
std::ostream& operator<<(std::ostream& out, const CreateTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(CreateTableRequest &a, CreateTableRequest &b) {
  using ::std::swap;
  swap(a.table, b.table);
  swap(a.envContext, b.envContext);
  swap(a.primaryKeys, b.primaryKeys);
  swap(a.foreignKeys, b.foreignKeys);
  swap(a.uniqueConstraints, b.uniqueConstraints);
  swap(a.notNullConstraints, b.notNullConstraints);
  swap(a.defaultConstraints, b.defaultConstraints);
  swap(a.checkConstraints, b.checkConstraints);
  swap(a.processorCapabilities, b.processorCapabilities);
  swap(a.processorIdentifier, b.processorIdentifier);
  swap(a.__isset, b.__isset);
}

CreateTableRequest::CreateTableRequest(const CreateTableRequest& other1891) {
  table = other1891.table;
  envContext = other1891.envContext;
  primaryKeys = other1891.primaryKeys;
  foreignKeys = other1891.foreignKeys;
  uniqueConstraints = other1891.uniqueConstraints;
  notNullConstraints = other1891.notNullConstraints;
  defaultConstraints = other1891.defaultConstraints;
  checkConstraints = other1891.checkConstraints;
  processorCapabilities = other1891.processorCapabilities;
  processorIdentifier = other1891.processorIdentifier;
  __isset = other1891.__isset;
}
CreateTableRequest::CreateTableRequest( CreateTableRequest&& other1892) {
  table = std::move(other1892.table);
  envContext = std::move(other1892.envContext);
  primaryKeys = std::move(other1892.primaryKeys);
  foreignKeys = std::move(other1892.foreignKeys);
  uniqueConstraints = std::move(other1892.uniqueConstraints);
  notNullConstraints = std::move(other1892.notNullConstraints);
  defaultConstraints = std::move(other1892.defaultConstraints);
  checkConstraints = std::move(other1892.checkConstraints);
  processorCapabilities = std::move(other1892.processorCapabilities);
  processorIdentifier = std::move(other1892.processorIdentifier);
  __isset = std::move(other1892.__isset);
}
CreateTableRequest& CreateTableRequest::operator=(const CreateTableRequest& other1893) {
  table = other1893.table;
  envContext = other1893.envContext;
  primaryKeys = other1893.primaryKeys;
  foreignKeys = other1893.foreignKeys;
  uniqueConstraints = other1893.uniqueConstraints;
  notNullConstraints = other1893.notNullConstraints;
  defaultConstraints = other1893.defaultConstraints;
  checkConstraints = other1893.checkConstraints;
  processorCapabilities = other1893.processorCapabilities;
  processorIdentifier = other1893.processorIdentifier;
  __isset = other1893.__isset;
  return *this;
}
CreateTableRequest& CreateTableRequest::operator=(CreateTableRequest&& other1894) {
  table = std::move(other1894.table);
  envContext = std::move(other1894.envContext);
  primaryKeys = std::move(other1894.primaryKeys);
  foreignKeys = std::move(other1894.foreignKeys);
  uniqueConstraints = std::move(other1894.uniqueConstraints);
  notNullConstraints = std::move(other1894.notNullConstraints);
  defaultConstraints = std::move(other1894.defaultConstraints);
  checkConstraints = std::move(other1894.checkConstraints);
  processorCapabilities = std::move(other1894.processorCapabilities);
  processorIdentifier = std::move(other1894.processorIdentifier);
  __isset = std::move(other1894.__isset);
  return *this;
}
void CreateTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateTableRequest(";
  out << "table=" << to_string(table);
  out << ", " << "envContext="; (__isset.envContext ? (out << to_string(envContext)) : (out << "<null>"));
  out << ", " << "primaryKeys="; (__isset.primaryKeys ? (out << to_string(primaryKeys)) : (out << "<null>"));
  out << ", " << "foreignKeys="; (__isset.foreignKeys ? (out << to_string(foreignKeys)) : (out << "<null>"));
  out << ", " << "uniqueConstraints="; (__isset.uniqueConstraints ? (out << to_string(uniqueConstraints)) : (out << "<null>"));
  out << ", " << "notNullConstraints="; (__isset.notNullConstraints ? (out << to_string(notNullConstraints)) : (out << "<null>"));
  out << ", " << "defaultConstraints="; (__isset.defaultConstraints ? (out << to_string(defaultConstraints)) : (out << "<null>"));
  out << ", " << "checkConstraints="; (__isset.checkConstraints ? (out << to_string(checkConstraints)) : (out << "<null>"));
  out << ", " << "processorCapabilities="; (__isset.processorCapabilities ? (out << to_string(processorCapabilities)) : (out << "<null>"));
  out << ", " << "processorIdentifier="; (__isset.processorIdentifier ? (out << to_string(processorIdentifier)) : (out << "<null>"));
  out << ")";
}


ScheduledQueryPollRequest::~ScheduledQueryPollRequest() throw() {
}


void ScheduledQueryPollRequest::__set_clusterNamespace(const std::string& val) {
  this->clusterNamespace = val;
}
std::ostream& operator<<(std::ostream& out, const ScheduledQueryPollRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ScheduledQueryPollRequest &a, ScheduledQueryPollRequest &b) {
  using ::std::swap;
  swap(a.clusterNamespace, b.clusterNamespace);
}

ScheduledQueryPollRequest::ScheduledQueryPollRequest(const ScheduledQueryPollRequest& other1895) {
  clusterNamespace = other1895.clusterNamespace;
}
ScheduledQueryPollRequest::ScheduledQueryPollRequest( ScheduledQueryPollRequest&& other1896) {
  clusterNamespace = std::move(other1896.clusterNamespace);
}
ScheduledQueryPollRequest& ScheduledQueryPollRequest::operator=(const ScheduledQueryPollRequest& other1897) {
  clusterNamespace = other1897.clusterNamespace;
  return *this;
}
ScheduledQueryPollRequest& ScheduledQueryPollRequest::operator=(ScheduledQueryPollRequest&& other1898) {
  clusterNamespace = std::move(other1898.clusterNamespace);
  return *this;
}
void ScheduledQueryPollRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ScheduledQueryPollRequest(";
  out << "clusterNamespace=" << to_string(clusterNamespace);
  out << ")";
}


ScheduledQueryKey::~ScheduledQueryKey() throw() {
}


void ScheduledQueryKey::__set_scheduleName(const std::string& val) {
  this->scheduleName = val;
}

void ScheduledQueryKey::__set_clusterNamespace(const std::string& val) {
  this->clusterNamespace = val;
}
std::ostream& operator<<(std::ostream& out, const ScheduledQueryKey& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ScheduledQueryKey &a, ScheduledQueryKey &b) {
  using ::std::swap;
  swap(a.scheduleName, b.scheduleName);
  swap(a.clusterNamespace, b.clusterNamespace);
}

ScheduledQueryKey::ScheduledQueryKey(const ScheduledQueryKey& other1899) {
  scheduleName = other1899.scheduleName;
  clusterNamespace = other1899.clusterNamespace;
}
ScheduledQueryKey::ScheduledQueryKey( ScheduledQueryKey&& other1900) {
  scheduleName = std::move(other1900.scheduleName);
  clusterNamespace = std::move(other1900.clusterNamespace);
}
ScheduledQueryKey& ScheduledQueryKey::operator=(const ScheduledQueryKey& other1901) {
  scheduleName = other1901.scheduleName;
  clusterNamespace = other1901.clusterNamespace;
  return *this;
}
ScheduledQueryKey& ScheduledQueryKey::operator=(ScheduledQueryKey&& other1902) {
  scheduleName = std::move(other1902.scheduleName);
  clusterNamespace = std::move(other1902.clusterNamespace);
  return *this;
}
void ScheduledQueryKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ScheduledQueryKey(";
  out << "scheduleName=" << to_string(scheduleName);
  out << ", " << "clusterNamespace=" << to_string(clusterNamespace);
  out << ")";
}


ScheduledQueryPollResponse::~ScheduledQueryPollResponse() throw() {
}


void ScheduledQueryPollResponse::__set_scheduleKey(const ScheduledQueryKey& val) {
  this->scheduleKey = val;
__isset.scheduleKey = true;
}

void ScheduledQueryPollResponse::__set_executionId(const int64_t val) {
  this->executionId = val;
__isset.executionId = true;
}

void ScheduledQueryPollResponse::__set_query(const std::string& val) {
  this->query = val;
__isset.query = true;
}

void ScheduledQueryPollResponse::__set_user(const std::string& val) {
  this->user = val;
__isset.user = true;
}
std::ostream& operator<<(std::ostream& out, const ScheduledQueryPollResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ScheduledQueryPollResponse &a, ScheduledQueryPollResponse &b) {
  using ::std::swap;
  swap(a.scheduleKey, b.scheduleKey);
  swap(a.executionId, b.executionId);
  swap(a.query, b.query);
  swap(a.user, b.user);
  swap(a.__isset, b.__isset);
}

ScheduledQueryPollResponse::ScheduledQueryPollResponse(const ScheduledQueryPollResponse& other1903) {
  scheduleKey = other1903.scheduleKey;
  executionId = other1903.executionId;
  query = other1903.query;
  user = other1903.user;
  __isset = other1903.__isset;
}
ScheduledQueryPollResponse::ScheduledQueryPollResponse( ScheduledQueryPollResponse&& other1904) {
  scheduleKey = std::move(other1904.scheduleKey);
  executionId = std::move(other1904.executionId);
  query = std::move(other1904.query);
  user = std::move(other1904.user);
  __isset = std::move(other1904.__isset);
}
ScheduledQueryPollResponse& ScheduledQueryPollResponse::operator=(const ScheduledQueryPollResponse& other1905) {
  scheduleKey = other1905.scheduleKey;
  executionId = other1905.executionId;
  query = other1905.query;
  user = other1905.user;
  __isset = other1905.__isset;
  return *this;
}
ScheduledQueryPollResponse& ScheduledQueryPollResponse::operator=(ScheduledQueryPollResponse&& other1906) {
  scheduleKey = std::move(other1906.scheduleKey);
  executionId = std::move(other1906.executionId);
  query = std::move(other1906.query);
  user = std::move(other1906.user);
  __isset = std::move(other1906.__isset);
  return *this;
}
void ScheduledQueryPollResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ScheduledQueryPollResponse(";
  out << "scheduleKey="; (__isset.scheduleKey ? (out << to_string(scheduleKey)) : (out << "<null>"));
  out << ", " << "executionId="; (__isset.executionId ? (out << to_string(executionId)) : (out << "<null>"));
  out << ", " << "query="; (__isset.query ? (out << to_string(query)) : (out << "<null>"));
  out << ", " << "user="; (__isset.user ? (out << to_string(user)) : (out << "<null>"));
  out << ")";
}


ScheduledQuery::~ScheduledQuery() throw() {
}


void ScheduledQuery::__set_scheduleKey(const ScheduledQueryKey& val) {
  this->scheduleKey = val;
}

void ScheduledQuery::__set_enabled(const bool val) {
  this->enabled = val;
__isset.enabled = true;
}

void ScheduledQuery::__set_schedule(const std::string& val) {
  this->schedule = val;
__isset.schedule = true;
}

void ScheduledQuery::__set_user(const std::string& val) {
  this->user = val;
__isset.user = true;
}

void ScheduledQuery::__set_query(const std::string& val) {
  this->query = val;
__isset.query = true;
}

void ScheduledQuery::__set_nextExecution(const int32_t val) {
  this->nextExecution = val;
__isset.nextExecution = true;
}
std::ostream& operator<<(std::ostream& out, const ScheduledQuery& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ScheduledQuery &a, ScheduledQuery &b) {
  using ::std::swap;
  swap(a.scheduleKey, b.scheduleKey);
  swap(a.enabled, b.enabled);
  swap(a.schedule, b.schedule);
  swap(a.user, b.user);
  swap(a.query, b.query);
  swap(a.nextExecution, b.nextExecution);
  swap(a.__isset, b.__isset);
}

ScheduledQuery::ScheduledQuery(const ScheduledQuery& other1907) {
  scheduleKey = other1907.scheduleKey;
  enabled = other1907.enabled;
  schedule = other1907.schedule;
  user = other1907.user;
  query = other1907.query;
  nextExecution = other1907.nextExecution;
  __isset = other1907.__isset;
}
ScheduledQuery::ScheduledQuery( ScheduledQuery&& other1908) {
  scheduleKey = std::move(other1908.scheduleKey);
  enabled = std::move(other1908.enabled);
  schedule = std::move(other1908.schedule);
  user = std::move(other1908.user);
  query = std::move(other1908.query);
  nextExecution = std::move(other1908.nextExecution);
  __isset = std::move(other1908.__isset);
}
ScheduledQuery& ScheduledQuery::operator=(const ScheduledQuery& other1909) {
  scheduleKey = other1909.scheduleKey;
  enabled = other1909.enabled;
  schedule = other1909.schedule;
  user = other1909.user;
  query = other1909.query;
  nextExecution = other1909.nextExecution;
  __isset = other1909.__isset;
  return *this;
}
ScheduledQuery& ScheduledQuery::operator=(ScheduledQuery&& other1910) {
  scheduleKey = std::move(other1910.scheduleKey);
  enabled = std::move(other1910.enabled);
  schedule = std::move(other1910.schedule);
  user = std::move(other1910.user);
  query = std::move(other1910.query);
  nextExecution = std::move(other1910.nextExecution);
  __isset = std::move(other1910.__isset);
  return *this;
}
void ScheduledQuery::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ScheduledQuery(";
  out << "scheduleKey=" << to_string(scheduleKey);
  out << ", " << "enabled="; (__isset.enabled ? (out << to_string(enabled)) : (out << "<null>"));
  out << ", " << "schedule="; (__isset.schedule ? (out << to_string(schedule)) : (out << "<null>"));
  out << ", " << "user="; (__isset.user ? (out << to_string(user)) : (out << "<null>"));
  out << ", " << "query="; (__isset.query ? (out << to_string(query)) : (out << "<null>"));
  out << ", " << "nextExecution="; (__isset.nextExecution ? (out << to_string(nextExecution)) : (out << "<null>"));
  out << ")";
}


ScheduledQueryMaintenanceRequest::~ScheduledQueryMaintenanceRequest() throw() {
}


void ScheduledQueryMaintenanceRequest::__set_type(const ScheduledQueryMaintenanceRequestType::type val) {
  this->type = val;
}

void ScheduledQueryMaintenanceRequest::__set_scheduledQuery(const ScheduledQuery& val) {
  this->scheduledQuery = val;
}
std::ostream& operator<<(std::ostream& out, const ScheduledQueryMaintenanceRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ScheduledQueryMaintenanceRequest &a, ScheduledQueryMaintenanceRequest &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.scheduledQuery, b.scheduledQuery);
}

ScheduledQueryMaintenanceRequest::ScheduledQueryMaintenanceRequest(const ScheduledQueryMaintenanceRequest& other1912) {
  type = other1912.type;
  scheduledQuery = other1912.scheduledQuery;
}
ScheduledQueryMaintenanceRequest::ScheduledQueryMaintenanceRequest( ScheduledQueryMaintenanceRequest&& other1913) {
  type = std::move(other1913.type);
  scheduledQuery = std::move(other1913.scheduledQuery);
}
ScheduledQueryMaintenanceRequest& ScheduledQueryMaintenanceRequest::operator=(const ScheduledQueryMaintenanceRequest& other1914) {
  type = other1914.type;
  scheduledQuery = other1914.scheduledQuery;
  return *this;
}
ScheduledQueryMaintenanceRequest& ScheduledQueryMaintenanceRequest::operator=(ScheduledQueryMaintenanceRequest&& other1915) {
  type = std::move(other1915.type);
  scheduledQuery = std::move(other1915.scheduledQuery);
  return *this;
}
void ScheduledQueryMaintenanceRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ScheduledQueryMaintenanceRequest(";
  out << "type=" << to_string(type);
  out << ", " << "scheduledQuery=" << to_string(scheduledQuery);
  out << ")";
}


ScheduledQueryProgressInfo::~ScheduledQueryProgressInfo() throw() {
}


void ScheduledQueryProgressInfo::__set_scheduledExecutionId(const int64_t val) {
  this->scheduledExecutionId = val;
}

void ScheduledQueryProgressInfo::__set_state(const QueryState::type val) {
  this->state = val;
}

void ScheduledQueryProgressInfo::__set_executorQueryId(const std::string& val) {
  this->executorQueryId = val;
}

void ScheduledQueryProgressInfo::__set_errorMessage(const std::string& val) {
  this->errorMessage = val;
__isset.errorMessage = true;
}
std::ostream& operator<<(std::ostream& out, const ScheduledQueryProgressInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ScheduledQueryProgressInfo &a, ScheduledQueryProgressInfo &b) {
  using ::std::swap;
  swap(a.scheduledExecutionId, b.scheduledExecutionId);
  swap(a.state, b.state);
  swap(a.executorQueryId, b.executorQueryId);
  swap(a.errorMessage, b.errorMessage);
  swap(a.__isset, b.__isset);
}

ScheduledQueryProgressInfo::ScheduledQueryProgressInfo(const ScheduledQueryProgressInfo& other1917) {
  scheduledExecutionId = other1917.scheduledExecutionId;
  state = other1917.state;
  executorQueryId = other1917.executorQueryId;
  errorMessage = other1917.errorMessage;
  __isset = other1917.__isset;
}
ScheduledQueryProgressInfo::ScheduledQueryProgressInfo( ScheduledQueryProgressInfo&& other1918) {
  scheduledExecutionId = std::move(other1918.scheduledExecutionId);
  state = std::move(other1918.state);
  executorQueryId = std::move(other1918.executorQueryId);
  errorMessage = std::move(other1918.errorMessage);
  __isset = std::move(other1918.__isset);
}
ScheduledQueryProgressInfo& ScheduledQueryProgressInfo::operator=(const ScheduledQueryProgressInfo& other1919) {
  scheduledExecutionId = other1919.scheduledExecutionId;
  state = other1919.state;
  executorQueryId = other1919.executorQueryId;
  errorMessage = other1919.errorMessage;
  __isset = other1919.__isset;
  return *this;
}
ScheduledQueryProgressInfo& ScheduledQueryProgressInfo::operator=(ScheduledQueryProgressInfo&& other1920) {
  scheduledExecutionId = std::move(other1920.scheduledExecutionId);
  state = std::move(other1920.state);
  executorQueryId = std::move(other1920.executorQueryId);
  errorMessage = std::move(other1920.errorMessage);
  __isset = std::move(other1920.__isset);
  return *this;
}
void ScheduledQueryProgressInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ScheduledQueryProgressInfo(";
  out << "scheduledExecutionId=" << to_string(scheduledExecutionId);
  out << ", " << "state=" << to_string(state);
  out << ", " << "executorQueryId=" << to_string(executorQueryId);
  out << ", " << "errorMessage="; (__isset.errorMessage ? (out << to_string(errorMessage)) : (out << "<null>"));
  out << ")";
}


AlterPartitionsRequest::~AlterPartitionsRequest() throw() {
}


void AlterPartitionsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void AlterPartitionsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void AlterPartitionsRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void AlterPartitionsRequest::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
}

void AlterPartitionsRequest::__set_environmentContext(const EnvironmentContext& val) {
  this->environmentContext = val;
__isset.environmentContext = true;
}

void AlterPartitionsRequest::__set_writeId(const int64_t val) {
  this->writeId = val;
__isset.writeId = true;
}

void AlterPartitionsRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}
std::ostream& operator<<(std::ostream& out, const AlterPartitionsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AlterPartitionsRequest &a, AlterPartitionsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.partitions, b.partitions);
  swap(a.environmentContext, b.environmentContext);
  swap(a.writeId, b.writeId);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.__isset, b.__isset);
}

AlterPartitionsRequest::AlterPartitionsRequest(const AlterPartitionsRequest& other1927) {
  catName = other1927.catName;
  dbName = other1927.dbName;
  tableName = other1927.tableName;
  partitions = other1927.partitions;
  environmentContext = other1927.environmentContext;
  writeId = other1927.writeId;
  validWriteIdList = other1927.validWriteIdList;
  __isset = other1927.__isset;
}
AlterPartitionsRequest::AlterPartitionsRequest( AlterPartitionsRequest&& other1928) {
  catName = std::move(other1928.catName);
  dbName = std::move(other1928.dbName);
  tableName = std::move(other1928.tableName);
  partitions = std::move(other1928.partitions);
  environmentContext = std::move(other1928.environmentContext);
  writeId = std::move(other1928.writeId);
  validWriteIdList = std::move(other1928.validWriteIdList);
  __isset = std::move(other1928.__isset);
}
AlterPartitionsRequest& AlterPartitionsRequest::operator=(const AlterPartitionsRequest& other1929) {
  catName = other1929.catName;
  dbName = other1929.dbName;
  tableName = other1929.tableName;
  partitions = other1929.partitions;
  environmentContext = other1929.environmentContext;
  writeId = other1929.writeId;
  validWriteIdList = other1929.validWriteIdList;
  __isset = other1929.__isset;
  return *this;
}
AlterPartitionsRequest& AlterPartitionsRequest::operator=(AlterPartitionsRequest&& other1930) {
  catName = std::move(other1930.catName);
  dbName = std::move(other1930.dbName);
  tableName = std::move(other1930.tableName);
  partitions = std::move(other1930.partitions);
  environmentContext = std::move(other1930.environmentContext);
  writeId = std::move(other1930.writeId);
  validWriteIdList = std::move(other1930.validWriteIdList);
  __isset = std::move(other1930.__isset);
  return *this;
}
void AlterPartitionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AlterPartitionsRequest(";
  out << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "partitions=" << to_string(partitions);
  out << ", " << "environmentContext="; (__isset.environmentContext ? (out << to_string(environmentContext)) : (out << "<null>"));
  out << ", " << "writeId="; (__isset.writeId ? (out << to_string(writeId)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ")";
}


AlterPartitionsResponse::~AlterPartitionsResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const AlterPartitionsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AlterPartitionsResponse &a, AlterPartitionsResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

AlterPartitionsResponse::AlterPartitionsResponse(const AlterPartitionsResponse& other1931) {
  (void) other1931;
}
AlterPartitionsResponse::AlterPartitionsResponse( AlterPartitionsResponse&& other1932) {
  (void) other1932;
}
AlterPartitionsResponse& AlterPartitionsResponse::operator=(const AlterPartitionsResponse& other1933) {
  (void) other1933;
  return *this;
}
AlterPartitionsResponse& AlterPartitionsResponse::operator=(AlterPartitionsResponse&& other1934) {
  (void) other1934;
  return *this;
}
void AlterPartitionsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AlterPartitionsResponse(";
  out << ")";
}


RenamePartitionRequest::~RenamePartitionRequest() throw() {
}


void RenamePartitionRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void RenamePartitionRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void RenamePartitionRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void RenamePartitionRequest::__set_partVals(const std::vector<std::string> & val) {
  this->partVals = val;
}

void RenamePartitionRequest::__set_newPart(const Partition& val) {
  this->newPart = val;
}

void RenamePartitionRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}
std::ostream& operator<<(std::ostream& out, const RenamePartitionRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(RenamePartitionRequest &a, RenamePartitionRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.partVals, b.partVals);
  swap(a.newPart, b.newPart);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.__isset, b.__isset);
}

RenamePartitionRequest::RenamePartitionRequest(const RenamePartitionRequest& other1941) {
  catName = other1941.catName;
  dbName = other1941.dbName;
  tableName = other1941.tableName;
  partVals = other1941.partVals;
  newPart = other1941.newPart;
  validWriteIdList = other1941.validWriteIdList;
  __isset = other1941.__isset;
}
RenamePartitionRequest::RenamePartitionRequest( RenamePartitionRequest&& other1942) {
  catName = std::move(other1942.catName);
  dbName = std::move(other1942.dbName);
  tableName = std::move(other1942.tableName);
  partVals = std::move(other1942.partVals);
  newPart = std::move(other1942.newPart);
  validWriteIdList = std::move(other1942.validWriteIdList);
  __isset = std::move(other1942.__isset);
}
RenamePartitionRequest& RenamePartitionRequest::operator=(const RenamePartitionRequest& other1943) {
  catName = other1943.catName;
  dbName = other1943.dbName;
  tableName = other1943.tableName;
  partVals = other1943.partVals;
  newPart = other1943.newPart;
  validWriteIdList = other1943.validWriteIdList;
  __isset = other1943.__isset;
  return *this;
}
RenamePartitionRequest& RenamePartitionRequest::operator=(RenamePartitionRequest&& other1944) {
  catName = std::move(other1944.catName);
  dbName = std::move(other1944.dbName);
  tableName = std::move(other1944.tableName);
  partVals = std::move(other1944.partVals);
  newPart = std::move(other1944.newPart);
  validWriteIdList = std::move(other1944.validWriteIdList);
  __isset = std::move(other1944.__isset);
  return *this;
}
void RenamePartitionRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RenamePartitionRequest(";
  out << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "partVals=" << to_string(partVals);
  out << ", " << "newPart=" << to_string(newPart);
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ")";
}


RenamePartitionResponse::~RenamePartitionResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const RenamePartitionResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(RenamePartitionResponse &a, RenamePartitionResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

RenamePartitionResponse::RenamePartitionResponse(const RenamePartitionResponse& other1945) {
  (void) other1945;
}
RenamePartitionResponse::RenamePartitionResponse( RenamePartitionResponse&& other1946) {
  (void) other1946;
}
RenamePartitionResponse& RenamePartitionResponse::operator=(const RenamePartitionResponse& other1947) {
  (void) other1947;
  return *this;
}
RenamePartitionResponse& RenamePartitionResponse::operator=(RenamePartitionResponse&& other1948) {
  (void) other1948;
  return *this;
}
void RenamePartitionResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RenamePartitionResponse(";
  out << ")";
}


AlterTableRequest::~AlterTableRequest() throw() {
}


void AlterTableRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void AlterTableRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void AlterTableRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
}

void AlterTableRequest::__set_table(const Table& val) {
  this->table = val;
}

void AlterTableRequest::__set_environmentContext(const EnvironmentContext& val) {
  this->environmentContext = val;
__isset.environmentContext = true;
}

void AlterTableRequest::__set_writeId(const int64_t val) {
  this->writeId = val;
__isset.writeId = true;
}

void AlterTableRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void AlterTableRequest::__set_processorCapabilities(const std::vector<std::string> & val) {
  this->processorCapabilities = val;
__isset.processorCapabilities = true;
}

void AlterTableRequest::__set_processorIdentifier(const std::string& val) {
  this->processorIdentifier = val;
__isset.processorIdentifier = true;
}
std::ostream& operator<<(std::ostream& out, const AlterTableRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AlterTableRequest &a, AlterTableRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.table, b.table);
  swap(a.environmentContext, b.environmentContext);
  swap(a.writeId, b.writeId);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.processorCapabilities, b.processorCapabilities);
  swap(a.processorIdentifier, b.processorIdentifier);
  swap(a.__isset, b.__isset);
}

AlterTableRequest::AlterTableRequest(const AlterTableRequest& other1955) {
  catName = other1955.catName;
  dbName = other1955.dbName;
  tableName = other1955.tableName;
  table = other1955.table;
  environmentContext = other1955.environmentContext;
  writeId = other1955.writeId;
  validWriteIdList = other1955.validWriteIdList;
  processorCapabilities = other1955.processorCapabilities;
  processorIdentifier = other1955.processorIdentifier;
  __isset = other1955.__isset;
}
AlterTableRequest::AlterTableRequest( AlterTableRequest&& other1956) {
  catName = std::move(other1956.catName);
  dbName = std::move(other1956.dbName);
  tableName = std::move(other1956.tableName);
  table = std::move(other1956.table);
  environmentContext = std::move(other1956.environmentContext);
  writeId = std::move(other1956.writeId);
  validWriteIdList = std::move(other1956.validWriteIdList);
  processorCapabilities = std::move(other1956.processorCapabilities);
  processorIdentifier = std::move(other1956.processorIdentifier);
  __isset = std::move(other1956.__isset);
}
AlterTableRequest& AlterTableRequest::operator=(const AlterTableRequest& other1957) {
  catName = other1957.catName;
  dbName = other1957.dbName;
  tableName = other1957.tableName;
  table = other1957.table;
  environmentContext = other1957.environmentContext;
  writeId = other1957.writeId;
  validWriteIdList = other1957.validWriteIdList;
  processorCapabilities = other1957.processorCapabilities;
  processorIdentifier = other1957.processorIdentifier;
  __isset = other1957.__isset;
  return *this;
}
AlterTableRequest& AlterTableRequest::operator=(AlterTableRequest&& other1958) {
  catName = std::move(other1958.catName);
  dbName = std::move(other1958.dbName);
  tableName = std::move(other1958.tableName);
  table = std::move(other1958.table);
  environmentContext = std::move(other1958.environmentContext);
  writeId = std::move(other1958.writeId);
  validWriteIdList = std::move(other1958.validWriteIdList);
  processorCapabilities = std::move(other1958.processorCapabilities);
  processorIdentifier = std::move(other1958.processorIdentifier);
  __isset = std::move(other1958.__isset);
  return *this;
}
void AlterTableRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AlterTableRequest(";
  out << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tableName=" << to_string(tableName);
  out << ", " << "table=" << to_string(table);
  out << ", " << "environmentContext="; (__isset.environmentContext ? (out << to_string(environmentContext)) : (out << "<null>"));
  out << ", " << "writeId="; (__isset.writeId ? (out << to_string(writeId)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "processorCapabilities="; (__isset.processorCapabilities ? (out << to_string(processorCapabilities)) : (out << "<null>"));
  out << ", " << "processorIdentifier="; (__isset.processorIdentifier ? (out << to_string(processorIdentifier)) : (out << "<null>"));
  out << ")";
}


AlterTableResponse::~AlterTableResponse() throw() {
}

std::ostream& operator<<(std::ostream& out, const AlterTableResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AlterTableResponse &a, AlterTableResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

AlterTableResponse::AlterTableResponse(const AlterTableResponse& other1959) {
  (void) other1959;
}
AlterTableResponse::AlterTableResponse( AlterTableResponse&& other1960) {
  (void) other1960;
}
AlterTableResponse& AlterTableResponse::operator=(const AlterTableResponse& other1961) {
  (void) other1961;
  return *this;
}
AlterTableResponse& AlterTableResponse::operator=(AlterTableResponse&& other1962) {
  (void) other1962;
  return *this;
}
void AlterTableResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AlterTableResponse(";
  out << ")";
}


GetPartitionsFilterSpec::~GetPartitionsFilterSpec() throw() {
}


void GetPartitionsFilterSpec::__set_filterMode(const PartitionFilterMode::type val) {
  this->filterMode = val;
__isset.filterMode = true;
}

void GetPartitionsFilterSpec::__set_filters(const std::vector<std::string> & val) {
  this->filters = val;
__isset.filters = true;
}
std::ostream& operator<<(std::ostream& out, const GetPartitionsFilterSpec& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPartitionsFilterSpec &a, GetPartitionsFilterSpec &b) {
  using ::std::swap;
  swap(a.filterMode, b.filterMode);
  swap(a.filters, b.filters);
  swap(a.__isset, b.__isset);
}

GetPartitionsFilterSpec::GetPartitionsFilterSpec(const GetPartitionsFilterSpec& other1970) {
  filterMode = other1970.filterMode;
  filters = other1970.filters;
  __isset = other1970.__isset;
}
GetPartitionsFilterSpec::GetPartitionsFilterSpec( GetPartitionsFilterSpec&& other1971) {
  filterMode = std::move(other1971.filterMode);
  filters = std::move(other1971.filters);
  __isset = std::move(other1971.__isset);
}
GetPartitionsFilterSpec& GetPartitionsFilterSpec::operator=(const GetPartitionsFilterSpec& other1972) {
  filterMode = other1972.filterMode;
  filters = other1972.filters;
  __isset = other1972.__isset;
  return *this;
}
GetPartitionsFilterSpec& GetPartitionsFilterSpec::operator=(GetPartitionsFilterSpec&& other1973) {
  filterMode = std::move(other1973.filterMode);
  filters = std::move(other1973.filters);
  __isset = std::move(other1973.__isset);
  return *this;
}
void GetPartitionsFilterSpec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPartitionsFilterSpec(";
  out << "filterMode="; (__isset.filterMode ? (out << to_string(filterMode)) : (out << "<null>"));
  out << ", " << "filters="; (__isset.filters ? (out << to_string(filters)) : (out << "<null>"));
  out << ")";
}


GetPartitionsResponse::~GetPartitionsResponse() throw() {
}


void GetPartitionsResponse::__set_partitionSpec(const std::vector<PartitionSpec> & val) {
  this->partitionSpec = val;
}
std::ostream& operator<<(std::ostream& out, const GetPartitionsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPartitionsResponse &a, GetPartitionsResponse &b) {
  using ::std::swap;
  swap(a.partitionSpec, b.partitionSpec);
  swap(a.__isset, b.__isset);
}

GetPartitionsResponse::GetPartitionsResponse(const GetPartitionsResponse& other1980) {
  partitionSpec = other1980.partitionSpec;
  __isset = other1980.__isset;
}
GetPartitionsResponse::GetPartitionsResponse( GetPartitionsResponse&& other1981) {
  partitionSpec = std::move(other1981.partitionSpec);
  __isset = std::move(other1981.__isset);
}
GetPartitionsResponse& GetPartitionsResponse::operator=(const GetPartitionsResponse& other1982) {
  partitionSpec = other1982.partitionSpec;
  __isset = other1982.__isset;
  return *this;
}
GetPartitionsResponse& GetPartitionsResponse::operator=(GetPartitionsResponse&& other1983) {
  partitionSpec = std::move(other1983.partitionSpec);
  __isset = std::move(other1983.__isset);
  return *this;
}
void GetPartitionsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPartitionsResponse(";
  out << "partitionSpec=" << to_string(partitionSpec);
  out << ")";
}


GetPartitionsRequest::~GetPartitionsRequest() throw() {
}


void GetPartitionsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void GetPartitionsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetPartitionsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void GetPartitionsRequest::__set_withAuth(const bool val) {
  this->withAuth = val;
__isset.withAuth = true;
}

void GetPartitionsRequest::__set_user(const std::string& val) {
  this->user = val;
__isset.user = true;
}

void GetPartitionsRequest::__set_groupNames(const std::vector<std::string> & val) {
  this->groupNames = val;
__isset.groupNames = true;
}

void GetPartitionsRequest::__set_projectionSpec(const GetProjectionsSpec& val) {
  this->projectionSpec = val;
}

void GetPartitionsRequest::__set_filterSpec(const GetPartitionsFilterSpec& val) {
  this->filterSpec = val;
}

void GetPartitionsRequest::__set_processorCapabilities(const std::vector<std::string> & val) {
  this->processorCapabilities = val;
__isset.processorCapabilities = true;
}

void GetPartitionsRequest::__set_processorIdentifier(const std::string& val) {
  this->processorIdentifier = val;
__isset.processorIdentifier = true;
}

void GetPartitionsRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}
std::ostream& operator<<(std::ostream& out, const GetPartitionsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPartitionsRequest &a, GetPartitionsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.withAuth, b.withAuth);
  swap(a.user, b.user);
  swap(a.groupNames, b.groupNames);
  swap(a.projectionSpec, b.projectionSpec);
  swap(a.filterSpec, b.filterSpec);
  swap(a.processorCapabilities, b.processorCapabilities);
  swap(a.processorIdentifier, b.processorIdentifier);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.__isset, b.__isset);
}

GetPartitionsRequest::GetPartitionsRequest(const GetPartitionsRequest& other1996) {
  catName = other1996.catName;
  dbName = other1996.dbName;
  tblName = other1996.tblName;
  withAuth = other1996.withAuth;
  user = other1996.user;
  groupNames = other1996.groupNames;
  projectionSpec = other1996.projectionSpec;
  filterSpec = other1996.filterSpec;
  processorCapabilities = other1996.processorCapabilities;
  processorIdentifier = other1996.processorIdentifier;
  validWriteIdList = other1996.validWriteIdList;
  __isset = other1996.__isset;
}
GetPartitionsRequest::GetPartitionsRequest( GetPartitionsRequest&& other1997) {
  catName = std::move(other1997.catName);
  dbName = std::move(other1997.dbName);
  tblName = std::move(other1997.tblName);
  withAuth = std::move(other1997.withAuth);
  user = std::move(other1997.user);
  groupNames = std::move(other1997.groupNames);
  projectionSpec = std::move(other1997.projectionSpec);
  filterSpec = std::move(other1997.filterSpec);
  processorCapabilities = std::move(other1997.processorCapabilities);
  processorIdentifier = std::move(other1997.processorIdentifier);
  validWriteIdList = std::move(other1997.validWriteIdList);
  __isset = std::move(other1997.__isset);
}
GetPartitionsRequest& GetPartitionsRequest::operator=(const GetPartitionsRequest& other1998) {
  catName = other1998.catName;
  dbName = other1998.dbName;
  tblName = other1998.tblName;
  withAuth = other1998.withAuth;
  user = other1998.user;
  groupNames = other1998.groupNames;
  projectionSpec = other1998.projectionSpec;
  filterSpec = other1998.filterSpec;
  processorCapabilities = other1998.processorCapabilities;
  processorIdentifier = other1998.processorIdentifier;
  validWriteIdList = other1998.validWriteIdList;
  __isset = other1998.__isset;
  return *this;
}
GetPartitionsRequest& GetPartitionsRequest::operator=(GetPartitionsRequest&& other1999) {
  catName = std::move(other1999.catName);
  dbName = std::move(other1999.dbName);
  tblName = std::move(other1999.tblName);
  withAuth = std::move(other1999.withAuth);
  user = std::move(other1999.user);
  groupNames = std::move(other1999.groupNames);
  projectionSpec = std::move(other1999.projectionSpec);
  filterSpec = std::move(other1999.filterSpec);
  processorCapabilities = std::move(other1999.processorCapabilities);
  processorIdentifier = std::move(other1999.processorIdentifier);
  validWriteIdList = std::move(other1999.validWriteIdList);
  __isset = std::move(other1999.__isset);
  return *this;
}
void GetPartitionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPartitionsRequest(";
  out << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "withAuth="; (__isset.withAuth ? (out << to_string(withAuth)) : (out << "<null>"));
  out << ", " << "user="; (__isset.user ? (out << to_string(user)) : (out << "<null>"));
  out << ", " << "groupNames="; (__isset.groupNames ? (out << to_string(groupNames)) : (out << "<null>"));
  out << ", " << "projectionSpec=" << to_string(projectionSpec);
  out << ", " << "filterSpec=" << to_string(filterSpec);
  out << ", " << "processorCapabilities="; (__isset.processorCapabilities ? (out << to_string(processorCapabilities)) : (out << "<null>"));
  out << ", " << "processorIdentifier="; (__isset.processorIdentifier ? (out << to_string(processorIdentifier)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ")";
}


GetFieldsRequest::~GetFieldsRequest() throw() {
}


void GetFieldsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void GetFieldsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetFieldsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void GetFieldsRequest::__set_envContext(const EnvironmentContext& val) {
  this->envContext = val;
__isset.envContext = true;
}

void GetFieldsRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void GetFieldsRequest::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}
std::ostream& operator<<(std::ostream& out, const GetFieldsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetFieldsRequest &a, GetFieldsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.envContext, b.envContext);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

GetFieldsRequest::GetFieldsRequest(const GetFieldsRequest& other2000) {
  catName = other2000.catName;
  dbName = other2000.dbName;
  tblName = other2000.tblName;
  envContext = other2000.envContext;
  validWriteIdList = other2000.validWriteIdList;
  id = other2000.id;
  __isset = other2000.__isset;
}
GetFieldsRequest::GetFieldsRequest( GetFieldsRequest&& other2001) {
  catName = std::move(other2001.catName);
  dbName = std::move(other2001.dbName);
  tblName = std::move(other2001.tblName);
  envContext = std::move(other2001.envContext);
  validWriteIdList = std::move(other2001.validWriteIdList);
  id = std::move(other2001.id);
  __isset = std::move(other2001.__isset);
}
GetFieldsRequest& GetFieldsRequest::operator=(const GetFieldsRequest& other2002) {
  catName = other2002.catName;
  dbName = other2002.dbName;
  tblName = other2002.tblName;
  envContext = other2002.envContext;
  validWriteIdList = other2002.validWriteIdList;
  id = other2002.id;
  __isset = other2002.__isset;
  return *this;
}
GetFieldsRequest& GetFieldsRequest::operator=(GetFieldsRequest&& other2003) {
  catName = std::move(other2003.catName);
  dbName = std::move(other2003.dbName);
  tblName = std::move(other2003.tblName);
  envContext = std::move(other2003.envContext);
  validWriteIdList = std::move(other2003.validWriteIdList);
  id = std::move(other2003.id);
  __isset = std::move(other2003.__isset);
  return *this;
}
void GetFieldsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFieldsRequest(";
  out << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "envContext="; (__isset.envContext ? (out << to_string(envContext)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ")";
}


GetFieldsResponse::~GetFieldsResponse() throw() {
}


void GetFieldsResponse::__set_fields(const std::vector<FieldSchema> & val) {
  this->fields = val;
}
std::ostream& operator<<(std::ostream& out, const GetFieldsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetFieldsResponse &a, GetFieldsResponse &b) {
  using ::std::swap;
  swap(a.fields, b.fields);
}

GetFieldsResponse::GetFieldsResponse(const GetFieldsResponse& other2010) {
  fields = other2010.fields;
}
GetFieldsResponse::GetFieldsResponse( GetFieldsResponse&& other2011) {
  fields = std::move(other2011.fields);
}
GetFieldsResponse& GetFieldsResponse::operator=(const GetFieldsResponse& other2012) {
  fields = other2012.fields;
  return *this;
}
GetFieldsResponse& GetFieldsResponse::operator=(GetFieldsResponse&& other2013) {
  fields = std::move(other2013.fields);
  return *this;
}
void GetFieldsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetFieldsResponse(";
  out << "fields=" << to_string(fields);
  out << ")";
}


GetSchemaRequest::~GetSchemaRequest() throw() {
}


void GetSchemaRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void GetSchemaRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetSchemaRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void GetSchemaRequest::__set_envContext(const EnvironmentContext& val) {
  this->envContext = val;
__isset.envContext = true;
}

void GetSchemaRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void GetSchemaRequest::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}
std::ostream& operator<<(std::ostream& out, const GetSchemaRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetSchemaRequest &a, GetSchemaRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.envContext, b.envContext);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

GetSchemaRequest::GetSchemaRequest(const GetSchemaRequest& other2014) {
  catName = other2014.catName;
  dbName = other2014.dbName;
  tblName = other2014.tblName;
  envContext = other2014.envContext;
  validWriteIdList = other2014.validWriteIdList;
  id = other2014.id;
  __isset = other2014.__isset;
}
GetSchemaRequest::GetSchemaRequest( GetSchemaRequest&& other2015) {
  catName = std::move(other2015.catName);
  dbName = std::move(other2015.dbName);
  tblName = std::move(other2015.tblName);
  envContext = std::move(other2015.envContext);
  validWriteIdList = std::move(other2015.validWriteIdList);
  id = std::move(other2015.id);
  __isset = std::move(other2015.__isset);
}
GetSchemaRequest& GetSchemaRequest::operator=(const GetSchemaRequest& other2016) {
  catName = other2016.catName;
  dbName = other2016.dbName;
  tblName = other2016.tblName;
  envContext = other2016.envContext;
  validWriteIdList = other2016.validWriteIdList;
  id = other2016.id;
  __isset = other2016.__isset;
  return *this;
}
GetSchemaRequest& GetSchemaRequest::operator=(GetSchemaRequest&& other2017) {
  catName = std::move(other2017.catName);
  dbName = std::move(other2017.dbName);
  tblName = std::move(other2017.tblName);
  envContext = std::move(other2017.envContext);
  validWriteIdList = std::move(other2017.validWriteIdList);
  id = std::move(other2017.id);
  __isset = std::move(other2017.__isset);
  return *this;
}
void GetSchemaRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSchemaRequest(";
  out << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "envContext="; (__isset.envContext ? (out << to_string(envContext)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ")";
}


GetSchemaResponse::~GetSchemaResponse() throw() {
}


void GetSchemaResponse::__set_fields(const std::vector<FieldSchema> & val) {
  this->fields = val;
}
std::ostream& operator<<(std::ostream& out, const GetSchemaResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetSchemaResponse &a, GetSchemaResponse &b) {
  using ::std::swap;
  swap(a.fields, b.fields);
}

GetSchemaResponse::GetSchemaResponse(const GetSchemaResponse& other2024) {
  fields = other2024.fields;
}
GetSchemaResponse::GetSchemaResponse( GetSchemaResponse&& other2025) {
  fields = std::move(other2025.fields);
}
GetSchemaResponse& GetSchemaResponse::operator=(const GetSchemaResponse& other2026) {
  fields = other2026.fields;
  return *this;
}
GetSchemaResponse& GetSchemaResponse::operator=(GetSchemaResponse&& other2027) {
  fields = std::move(other2027.fields);
  return *this;
}
void GetSchemaResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetSchemaResponse(";
  out << "fields=" << to_string(fields);
  out << ")";
}


GetPartitionRequest::~GetPartitionRequest() throw() {
}


void GetPartitionRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void GetPartitionRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetPartitionRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void GetPartitionRequest::__set_partVals(const std::vector<std::string> & val) {
  this->partVals = val;
}

void GetPartitionRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void GetPartitionRequest::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}
std::ostream& operator<<(std::ostream& out, const GetPartitionRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPartitionRequest &a, GetPartitionRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.partVals, b.partVals);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

GetPartitionRequest::GetPartitionRequest(const GetPartitionRequest& other2034) {
  catName = other2034.catName;
  dbName = other2034.dbName;
  tblName = other2034.tblName;
  partVals = other2034.partVals;
  validWriteIdList = other2034.validWriteIdList;
  id = other2034.id;
  __isset = other2034.__isset;
}
GetPartitionRequest::GetPartitionRequest( GetPartitionRequest&& other2035) {
  catName = std::move(other2035.catName);
  dbName = std::move(other2035.dbName);
  tblName = std::move(other2035.tblName);
  partVals = std::move(other2035.partVals);
  validWriteIdList = std::move(other2035.validWriteIdList);
  id = std::move(other2035.id);
  __isset = std::move(other2035.__isset);
}
GetPartitionRequest& GetPartitionRequest::operator=(const GetPartitionRequest& other2036) {
  catName = other2036.catName;
  dbName = other2036.dbName;
  tblName = other2036.tblName;
  partVals = other2036.partVals;
  validWriteIdList = other2036.validWriteIdList;
  id = other2036.id;
  __isset = other2036.__isset;
  return *this;
}
GetPartitionRequest& GetPartitionRequest::operator=(GetPartitionRequest&& other2037) {
  catName = std::move(other2037.catName);
  dbName = std::move(other2037.dbName);
  tblName = std::move(other2037.tblName);
  partVals = std::move(other2037.partVals);
  validWriteIdList = std::move(other2037.validWriteIdList);
  id = std::move(other2037.id);
  __isset = std::move(other2037.__isset);
  return *this;
}
void GetPartitionRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPartitionRequest(";
  out << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "partVals=" << to_string(partVals);
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ")";
}


GetPartitionResponse::~GetPartitionResponse() throw() {
}


void GetPartitionResponse::__set_partition(const Partition& val) {
  this->partition = val;
}
std::ostream& operator<<(std::ostream& out, const GetPartitionResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPartitionResponse &a, GetPartitionResponse &b) {
  using ::std::swap;
  swap(a.partition, b.partition);
}

GetPartitionResponse::GetPartitionResponse(const GetPartitionResponse& other2038) {
  partition = other2038.partition;
}
GetPartitionResponse::GetPartitionResponse( GetPartitionResponse&& other2039) {
  partition = std::move(other2039.partition);
}
GetPartitionResponse& GetPartitionResponse::operator=(const GetPartitionResponse& other2040) {
  partition = other2040.partition;
  return *this;
}
GetPartitionResponse& GetPartitionResponse::operator=(GetPartitionResponse&& other2041) {
  partition = std::move(other2041.partition);
  return *this;
}
void GetPartitionResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPartitionResponse(";
  out << "partition=" << to_string(partition);
  out << ")";
}


PartitionsRequest::~PartitionsRequest() throw() {
}


void PartitionsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void PartitionsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void PartitionsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void PartitionsRequest::__set_maxParts(const int16_t val) {
  this->maxParts = val;
__isset.maxParts = true;
}

void PartitionsRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void PartitionsRequest::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}
std::ostream& operator<<(std::ostream& out, const PartitionsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionsRequest &a, PartitionsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.maxParts, b.maxParts);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

PartitionsRequest::PartitionsRequest(const PartitionsRequest& other2042) {
  catName = other2042.catName;
  dbName = other2042.dbName;
  tblName = other2042.tblName;
  maxParts = other2042.maxParts;
  validWriteIdList = other2042.validWriteIdList;
  id = other2042.id;
  __isset = other2042.__isset;
}
PartitionsRequest::PartitionsRequest( PartitionsRequest&& other2043) {
  catName = std::move(other2043.catName);
  dbName = std::move(other2043.dbName);
  tblName = std::move(other2043.tblName);
  maxParts = std::move(other2043.maxParts);
  validWriteIdList = std::move(other2043.validWriteIdList);
  id = std::move(other2043.id);
  __isset = std::move(other2043.__isset);
}
PartitionsRequest& PartitionsRequest::operator=(const PartitionsRequest& other2044) {
  catName = other2044.catName;
  dbName = other2044.dbName;
  tblName = other2044.tblName;
  maxParts = other2044.maxParts;
  validWriteIdList = other2044.validWriteIdList;
  id = other2044.id;
  __isset = other2044.__isset;
  return *this;
}
PartitionsRequest& PartitionsRequest::operator=(PartitionsRequest&& other2045) {
  catName = std::move(other2045.catName);
  dbName = std::move(other2045.dbName);
  tblName = std::move(other2045.tblName);
  maxParts = std::move(other2045.maxParts);
  validWriteIdList = std::move(other2045.validWriteIdList);
  id = std::move(other2045.id);
  __isset = std::move(other2045.__isset);
  return *this;
}
void PartitionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsRequest(";
  out << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "maxParts="; (__isset.maxParts ? (out << to_string(maxParts)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ")";
}


PartitionsResponse::~PartitionsResponse() throw() {
}


void PartitionsResponse::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
}
std::ostream& operator<<(std::ostream& out, const PartitionsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PartitionsResponse &a, PartitionsResponse &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
}

PartitionsResponse::PartitionsResponse(const PartitionsResponse& other2052) {
  partitions = other2052.partitions;
}
PartitionsResponse::PartitionsResponse( PartitionsResponse&& other2053) {
  partitions = std::move(other2053.partitions);
}
PartitionsResponse& PartitionsResponse::operator=(const PartitionsResponse& other2054) {
  partitions = other2054.partitions;
  return *this;
}
PartitionsResponse& PartitionsResponse::operator=(PartitionsResponse&& other2055) {
  partitions = std::move(other2055.partitions);
  return *this;
}
void PartitionsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PartitionsResponse(";
  out << "partitions=" << to_string(partitions);
  out << ")";
}


GetPartitionNamesPsRequest::~GetPartitionNamesPsRequest() throw() {
}


void GetPartitionNamesPsRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void GetPartitionNamesPsRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetPartitionNamesPsRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void GetPartitionNamesPsRequest::__set_partValues(const std::vector<std::string> & val) {
  this->partValues = val;
__isset.partValues = true;
}

void GetPartitionNamesPsRequest::__set_maxParts(const int16_t val) {
  this->maxParts = val;
__isset.maxParts = true;
}

void GetPartitionNamesPsRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void GetPartitionNamesPsRequest::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}
std::ostream& operator<<(std::ostream& out, const GetPartitionNamesPsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPartitionNamesPsRequest &a, GetPartitionNamesPsRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.partValues, b.partValues);
  swap(a.maxParts, b.maxParts);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

GetPartitionNamesPsRequest::GetPartitionNamesPsRequest(const GetPartitionNamesPsRequest& other2062) {
  catName = other2062.catName;
  dbName = other2062.dbName;
  tblName = other2062.tblName;
  partValues = other2062.partValues;
  maxParts = other2062.maxParts;
  validWriteIdList = other2062.validWriteIdList;
  id = other2062.id;
  __isset = other2062.__isset;
}
GetPartitionNamesPsRequest::GetPartitionNamesPsRequest( GetPartitionNamesPsRequest&& other2063) {
  catName = std::move(other2063.catName);
  dbName = std::move(other2063.dbName);
  tblName = std::move(other2063.tblName);
  partValues = std::move(other2063.partValues);
  maxParts = std::move(other2063.maxParts);
  validWriteIdList = std::move(other2063.validWriteIdList);
  id = std::move(other2063.id);
  __isset = std::move(other2063.__isset);
}
GetPartitionNamesPsRequest& GetPartitionNamesPsRequest::operator=(const GetPartitionNamesPsRequest& other2064) {
  catName = other2064.catName;
  dbName = other2064.dbName;
  tblName = other2064.tblName;
  partValues = other2064.partValues;
  maxParts = other2064.maxParts;
  validWriteIdList = other2064.validWriteIdList;
  id = other2064.id;
  __isset = other2064.__isset;
  return *this;
}
GetPartitionNamesPsRequest& GetPartitionNamesPsRequest::operator=(GetPartitionNamesPsRequest&& other2065) {
  catName = std::move(other2065.catName);
  dbName = std::move(other2065.dbName);
  tblName = std::move(other2065.tblName);
  partValues = std::move(other2065.partValues);
  maxParts = std::move(other2065.maxParts);
  validWriteIdList = std::move(other2065.validWriteIdList);
  id = std::move(other2065.id);
  __isset = std::move(other2065.__isset);
  return *this;
}
void GetPartitionNamesPsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPartitionNamesPsRequest(";
  out << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "partValues="; (__isset.partValues ? (out << to_string(partValues)) : (out << "<null>"));
  out << ", " << "maxParts="; (__isset.maxParts ? (out << to_string(maxParts)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ")";
}


GetPartitionNamesPsResponse::~GetPartitionNamesPsResponse() throw() {
}


void GetPartitionNamesPsResponse::__set_names(const std::vector<std::string> & val) {
  this->names = val;
}
std::ostream& operator<<(std::ostream& out, const GetPartitionNamesPsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPartitionNamesPsResponse &a, GetPartitionNamesPsResponse &b) {
  using ::std::swap;
  swap(a.names, b.names);
}

GetPartitionNamesPsResponse::GetPartitionNamesPsResponse(const GetPartitionNamesPsResponse& other2072) {
  names = other2072.names;
}
GetPartitionNamesPsResponse::GetPartitionNamesPsResponse( GetPartitionNamesPsResponse&& other2073) {
  names = std::move(other2073.names);
}
GetPartitionNamesPsResponse& GetPartitionNamesPsResponse::operator=(const GetPartitionNamesPsResponse& other2074) {
  names = other2074.names;
  return *this;
}
GetPartitionNamesPsResponse& GetPartitionNamesPsResponse::operator=(GetPartitionNamesPsResponse&& other2075) {
  names = std::move(other2075.names);
  return *this;
}
void GetPartitionNamesPsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPartitionNamesPsResponse(";
  out << "names=" << to_string(names);
  out << ")";
}


GetPartitionsPsWithAuthRequest::~GetPartitionsPsWithAuthRequest() throw() {
}


void GetPartitionsPsWithAuthRequest::__set_catName(const std::string& val) {
  this->catName = val;
__isset.catName = true;
}

void GetPartitionsPsWithAuthRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetPartitionsPsWithAuthRequest::__set_tblName(const std::string& val) {
  this->tblName = val;
}

void GetPartitionsPsWithAuthRequest::__set_partVals(const std::vector<std::string> & val) {
  this->partVals = val;
__isset.partVals = true;
}

void GetPartitionsPsWithAuthRequest::__set_maxParts(const int16_t val) {
  this->maxParts = val;
__isset.maxParts = true;
}

void GetPartitionsPsWithAuthRequest::__set_userName(const std::string& val) {
  this->userName = val;
__isset.userName = true;
}

void GetPartitionsPsWithAuthRequest::__set_groupNames(const std::vector<std::string> & val) {
  this->groupNames = val;
__isset.groupNames = true;
}

void GetPartitionsPsWithAuthRequest::__set_validWriteIdList(const std::string& val) {
  this->validWriteIdList = val;
__isset.validWriteIdList = true;
}

void GetPartitionsPsWithAuthRequest::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}
std::ostream& operator<<(std::ostream& out, const GetPartitionsPsWithAuthRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPartitionsPsWithAuthRequest &a, GetPartitionsPsWithAuthRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.tblName, b.tblName);
  swap(a.partVals, b.partVals);
  swap(a.maxParts, b.maxParts);
  swap(a.userName, b.userName);
  swap(a.groupNames, b.groupNames);
  swap(a.validWriteIdList, b.validWriteIdList);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

GetPartitionsPsWithAuthRequest::GetPartitionsPsWithAuthRequest(const GetPartitionsPsWithAuthRequest& other2088) {
  catName = other2088.catName;
  dbName = other2088.dbName;
  tblName = other2088.tblName;
  partVals = other2088.partVals;
  maxParts = other2088.maxParts;
  userName = other2088.userName;
  groupNames = other2088.groupNames;
  validWriteIdList = other2088.validWriteIdList;
  id = other2088.id;
  __isset = other2088.__isset;
}
GetPartitionsPsWithAuthRequest::GetPartitionsPsWithAuthRequest( GetPartitionsPsWithAuthRequest&& other2089) {
  catName = std::move(other2089.catName);
  dbName = std::move(other2089.dbName);
  tblName = std::move(other2089.tblName);
  partVals = std::move(other2089.partVals);
  maxParts = std::move(other2089.maxParts);
  userName = std::move(other2089.userName);
  groupNames = std::move(other2089.groupNames);
  validWriteIdList = std::move(other2089.validWriteIdList);
  id = std::move(other2089.id);
  __isset = std::move(other2089.__isset);
}
GetPartitionsPsWithAuthRequest& GetPartitionsPsWithAuthRequest::operator=(const GetPartitionsPsWithAuthRequest& other2090) {
  catName = other2090.catName;
  dbName = other2090.dbName;
  tblName = other2090.tblName;
  partVals = other2090.partVals;
  maxParts = other2090.maxParts;
  userName = other2090.userName;
  groupNames = other2090.groupNames;
  validWriteIdList = other2090.validWriteIdList;
  id = other2090.id;
  __isset = other2090.__isset;
  return *this;
}
GetPartitionsPsWithAuthRequest& GetPartitionsPsWithAuthRequest::operator=(GetPartitionsPsWithAuthRequest&& other2091) {
  catName = std::move(other2091.catName);
  dbName = std::move(other2091.dbName);
  tblName = std::move(other2091.tblName);
  partVals = std::move(other2091.partVals);
  maxParts = std::move(other2091.maxParts);
  userName = std::move(other2091.userName);
  groupNames = std::move(other2091.groupNames);
  validWriteIdList = std::move(other2091.validWriteIdList);
  id = std::move(other2091.id);
  __isset = std::move(other2091.__isset);
  return *this;
}
void GetPartitionsPsWithAuthRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPartitionsPsWithAuthRequest(";
  out << "catName="; (__isset.catName ? (out << to_string(catName)) : (out << "<null>"));
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "tblName=" << to_string(tblName);
  out << ", " << "partVals="; (__isset.partVals ? (out << to_string(partVals)) : (out << "<null>"));
  out << ", " << "maxParts="; (__isset.maxParts ? (out << to_string(maxParts)) : (out << "<null>"));
  out << ", " << "userName="; (__isset.userName ? (out << to_string(userName)) : (out << "<null>"));
  out << ", " << "groupNames="; (__isset.groupNames ? (out << to_string(groupNames)) : (out << "<null>"));
  out << ", " << "validWriteIdList="; (__isset.validWriteIdList ? (out << to_string(validWriteIdList)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ")";
}


GetPartitionsPsWithAuthResponse::~GetPartitionsPsWithAuthResponse() throw() {
}


void GetPartitionsPsWithAuthResponse::__set_partitions(const std::vector<Partition> & val) {
  this->partitions = val;
}
std::ostream& operator<<(std::ostream& out, const GetPartitionsPsWithAuthResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPartitionsPsWithAuthResponse &a, GetPartitionsPsWithAuthResponse &b) {
  using ::std::swap;
  swap(a.partitions, b.partitions);
}

GetPartitionsPsWithAuthResponse::GetPartitionsPsWithAuthResponse(const GetPartitionsPsWithAuthResponse& other2098) {
  partitions = other2098.partitions;
}
GetPartitionsPsWithAuthResponse::GetPartitionsPsWithAuthResponse( GetPartitionsPsWithAuthResponse&& other2099) {
  partitions = std::move(other2099.partitions);
}
GetPartitionsPsWithAuthResponse& GetPartitionsPsWithAuthResponse::operator=(const GetPartitionsPsWithAuthResponse& other2100) {
  partitions = other2100.partitions;
  return *this;
}
GetPartitionsPsWithAuthResponse& GetPartitionsPsWithAuthResponse::operator=(GetPartitionsPsWithAuthResponse&& other2101) {
  partitions = std::move(other2101.partitions);
  return *this;
}
void GetPartitionsPsWithAuthResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPartitionsPsWithAuthResponse(";
  out << "partitions=" << to_string(partitions);
  out << ")";
}


ReplicationMetrics::~ReplicationMetrics() throw() {
}


void ReplicationMetrics::__set_scheduledExecutionId(const int64_t val) {
  this->scheduledExecutionId = val;
}

void ReplicationMetrics::__set_policy(const std::string& val) {
  this->policy = val;
}

void ReplicationMetrics::__set_dumpExecutionId(const int64_t val) {
  this->dumpExecutionId = val;
}

void ReplicationMetrics::__set_metadata(const std::string& val) {
  this->metadata = val;
__isset.metadata = true;
}

void ReplicationMetrics::__set_progress(const std::string& val) {
  this->progress = val;
__isset.progress = true;
}
std::ostream& operator<<(std::ostream& out, const ReplicationMetrics& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ReplicationMetrics &a, ReplicationMetrics &b) {
  using ::std::swap;
  swap(a.scheduledExecutionId, b.scheduledExecutionId);
  swap(a.policy, b.policy);
  swap(a.dumpExecutionId, b.dumpExecutionId);
  swap(a.metadata, b.metadata);
  swap(a.progress, b.progress);
  swap(a.__isset, b.__isset);
}

ReplicationMetrics::ReplicationMetrics(const ReplicationMetrics& other2102) {
  scheduledExecutionId = other2102.scheduledExecutionId;
  policy = other2102.policy;
  dumpExecutionId = other2102.dumpExecutionId;
  metadata = other2102.metadata;
  progress = other2102.progress;
  __isset = other2102.__isset;
}
ReplicationMetrics::ReplicationMetrics( ReplicationMetrics&& other2103) {
  scheduledExecutionId = std::move(other2103.scheduledExecutionId);
  policy = std::move(other2103.policy);
  dumpExecutionId = std::move(other2103.dumpExecutionId);
  metadata = std::move(other2103.metadata);
  progress = std::move(other2103.progress);
  __isset = std::move(other2103.__isset);
}
ReplicationMetrics& ReplicationMetrics::operator=(const ReplicationMetrics& other2104) {
  scheduledExecutionId = other2104.scheduledExecutionId;
  policy = other2104.policy;
  dumpExecutionId = other2104.dumpExecutionId;
  metadata = other2104.metadata;
  progress = other2104.progress;
  __isset = other2104.__isset;
  return *this;
}
ReplicationMetrics& ReplicationMetrics::operator=(ReplicationMetrics&& other2105) {
  scheduledExecutionId = std::move(other2105.scheduledExecutionId);
  policy = std::move(other2105.policy);
  dumpExecutionId = std::move(other2105.dumpExecutionId);
  metadata = std::move(other2105.metadata);
  progress = std::move(other2105.progress);
  __isset = std::move(other2105.__isset);
  return *this;
}
void ReplicationMetrics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReplicationMetrics(";
  out << "scheduledExecutionId=" << to_string(scheduledExecutionId);
  out << ", " << "policy=" << to_string(policy);
  out << ", " << "dumpExecutionId=" << to_string(dumpExecutionId);
  out << ", " << "metadata="; (__isset.metadata ? (out << to_string(metadata)) : (out << "<null>"));
  out << ", " << "progress="; (__isset.progress ? (out << to_string(progress)) : (out << "<null>"));
  out << ")";
}


ReplicationMetricList::~ReplicationMetricList() throw() {
}


void ReplicationMetricList::__set_replicationMetricList(const std::vector<ReplicationMetrics> & val) {
  this->replicationMetricList = val;
}
std::ostream& operator<<(std::ostream& out, const ReplicationMetricList& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ReplicationMetricList &a, ReplicationMetricList &b) {
  using ::std::swap;
  swap(a.replicationMetricList, b.replicationMetricList);
}

ReplicationMetricList::ReplicationMetricList(const ReplicationMetricList& other2112) {
  replicationMetricList = other2112.replicationMetricList;
}
ReplicationMetricList::ReplicationMetricList( ReplicationMetricList&& other2113) {
  replicationMetricList = std::move(other2113.replicationMetricList);
}
ReplicationMetricList& ReplicationMetricList::operator=(const ReplicationMetricList& other2114) {
  replicationMetricList = other2114.replicationMetricList;
  return *this;
}
ReplicationMetricList& ReplicationMetricList::operator=(ReplicationMetricList&& other2115) {
  replicationMetricList = std::move(other2115.replicationMetricList);
  return *this;
}
void ReplicationMetricList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReplicationMetricList(";
  out << "replicationMetricList=" << to_string(replicationMetricList);
  out << ")";
}


GetReplicationMetricsRequest::~GetReplicationMetricsRequest() throw() {
}


void GetReplicationMetricsRequest::__set_scheduledExecutionId(const int64_t val) {
  this->scheduledExecutionId = val;
__isset.scheduledExecutionId = true;
}

void GetReplicationMetricsRequest::__set_policy(const std::string& val) {
  this->policy = val;
__isset.policy = true;
}

void GetReplicationMetricsRequest::__set_dumpExecutionId(const int64_t val) {
  this->dumpExecutionId = val;
__isset.dumpExecutionId = true;
}
std::ostream& operator<<(std::ostream& out, const GetReplicationMetricsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetReplicationMetricsRequest &a, GetReplicationMetricsRequest &b) {
  using ::std::swap;
  swap(a.scheduledExecutionId, b.scheduledExecutionId);
  swap(a.policy, b.policy);
  swap(a.dumpExecutionId, b.dumpExecutionId);
  swap(a.__isset, b.__isset);
}

GetReplicationMetricsRequest::GetReplicationMetricsRequest(const GetReplicationMetricsRequest& other2116) {
  scheduledExecutionId = other2116.scheduledExecutionId;
  policy = other2116.policy;
  dumpExecutionId = other2116.dumpExecutionId;
  __isset = other2116.__isset;
}
GetReplicationMetricsRequest::GetReplicationMetricsRequest( GetReplicationMetricsRequest&& other2117) {
  scheduledExecutionId = std::move(other2117.scheduledExecutionId);
  policy = std::move(other2117.policy);
  dumpExecutionId = std::move(other2117.dumpExecutionId);
  __isset = std::move(other2117.__isset);
}
GetReplicationMetricsRequest& GetReplicationMetricsRequest::operator=(const GetReplicationMetricsRequest& other2118) {
  scheduledExecutionId = other2118.scheduledExecutionId;
  policy = other2118.policy;
  dumpExecutionId = other2118.dumpExecutionId;
  __isset = other2118.__isset;
  return *this;
}
GetReplicationMetricsRequest& GetReplicationMetricsRequest::operator=(GetReplicationMetricsRequest&& other2119) {
  scheduledExecutionId = std::move(other2119.scheduledExecutionId);
  policy = std::move(other2119.policy);
  dumpExecutionId = std::move(other2119.dumpExecutionId);
  __isset = std::move(other2119.__isset);
  return *this;
}
void GetReplicationMetricsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetReplicationMetricsRequest(";
  out << "scheduledExecutionId="; (__isset.scheduledExecutionId ? (out << to_string(scheduledExecutionId)) : (out << "<null>"));
  out << ", " << "policy="; (__isset.policy ? (out << to_string(policy)) : (out << "<null>"));
  out << ", " << "dumpExecutionId="; (__isset.dumpExecutionId ? (out << to_string(dumpExecutionId)) : (out << "<null>"));
  out << ")";
}


GetOpenTxnsRequest::~GetOpenTxnsRequest() throw() {
}


void GetOpenTxnsRequest::__set_excludeTxnTypes(const std::vector<TxnType::type> & val) {
  this->excludeTxnTypes = val;
__isset.excludeTxnTypes = true;
}
std::ostream& operator<<(std::ostream& out, const GetOpenTxnsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetOpenTxnsRequest &a, GetOpenTxnsRequest &b) {
  using ::std::swap;
  swap(a.excludeTxnTypes, b.excludeTxnTypes);
  swap(a.__isset, b.__isset);
}

GetOpenTxnsRequest::GetOpenTxnsRequest(const GetOpenTxnsRequest& other2127) {
  excludeTxnTypes = other2127.excludeTxnTypes;
  __isset = other2127.__isset;
}
GetOpenTxnsRequest::GetOpenTxnsRequest( GetOpenTxnsRequest&& other2128) {
  excludeTxnTypes = std::move(other2128.excludeTxnTypes);
  __isset = std::move(other2128.__isset);
}
GetOpenTxnsRequest& GetOpenTxnsRequest::operator=(const GetOpenTxnsRequest& other2129) {
  excludeTxnTypes = other2129.excludeTxnTypes;
  __isset = other2129.__isset;
  return *this;
}
GetOpenTxnsRequest& GetOpenTxnsRequest::operator=(GetOpenTxnsRequest&& other2130) {
  excludeTxnTypes = std::move(other2130.excludeTxnTypes);
  __isset = std::move(other2130.__isset);
  return *this;
}
void GetOpenTxnsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetOpenTxnsRequest(";
  out << "excludeTxnTypes="; (__isset.excludeTxnTypes ? (out << to_string(excludeTxnTypes)) : (out << "<null>"));
  out << ")";
}


StoredProcedureRequest::~StoredProcedureRequest() throw() {
}


void StoredProcedureRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void StoredProcedureRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void StoredProcedureRequest::__set_procName(const std::string& val) {
  this->procName = val;
}
std::ostream& operator<<(std::ostream& out, const StoredProcedureRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(StoredProcedureRequest &a, StoredProcedureRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.procName, b.procName);
}

StoredProcedureRequest::StoredProcedureRequest(const StoredProcedureRequest& other2131) {
  catName = other2131.catName;
  dbName = other2131.dbName;
  procName = other2131.procName;
}
StoredProcedureRequest::StoredProcedureRequest( StoredProcedureRequest&& other2132) {
  catName = std::move(other2132.catName);
  dbName = std::move(other2132.dbName);
  procName = std::move(other2132.procName);
}
StoredProcedureRequest& StoredProcedureRequest::operator=(const StoredProcedureRequest& other2133) {
  catName = other2133.catName;
  dbName = other2133.dbName;
  procName = other2133.procName;
  return *this;
}
StoredProcedureRequest& StoredProcedureRequest::operator=(StoredProcedureRequest&& other2134) {
  catName = std::move(other2134.catName);
  dbName = std::move(other2134.dbName);
  procName = std::move(other2134.procName);
  return *this;
}
void StoredProcedureRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StoredProcedureRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "procName=" << to_string(procName);
  out << ")";
}


ListStoredProcedureRequest::~ListStoredProcedureRequest() throw() {
}


void ListStoredProcedureRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void ListStoredProcedureRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
__isset.dbName = true;
}
std::ostream& operator<<(std::ostream& out, const ListStoredProcedureRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ListStoredProcedureRequest &a, ListStoredProcedureRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.__isset, b.__isset);
}

ListStoredProcedureRequest::ListStoredProcedureRequest(const ListStoredProcedureRequest& other2135) {
  catName = other2135.catName;
  dbName = other2135.dbName;
  __isset = other2135.__isset;
}
ListStoredProcedureRequest::ListStoredProcedureRequest( ListStoredProcedureRequest&& other2136) {
  catName = std::move(other2136.catName);
  dbName = std::move(other2136.dbName);
  __isset = std::move(other2136.__isset);
}
ListStoredProcedureRequest& ListStoredProcedureRequest::operator=(const ListStoredProcedureRequest& other2137) {
  catName = other2137.catName;
  dbName = other2137.dbName;
  __isset = other2137.__isset;
  return *this;
}
ListStoredProcedureRequest& ListStoredProcedureRequest::operator=(ListStoredProcedureRequest&& other2138) {
  catName = std::move(other2138.catName);
  dbName = std::move(other2138.dbName);
  __isset = std::move(other2138.__isset);
  return *this;
}
void ListStoredProcedureRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListStoredProcedureRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "dbName="; (__isset.dbName ? (out << to_string(dbName)) : (out << "<null>"));
  out << ")";
}


StoredProcedure::~StoredProcedure() throw() {
}


void StoredProcedure::__set_name(const std::string& val) {
  this->name = val;
}

void StoredProcedure::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void StoredProcedure::__set_catName(const std::string& val) {
  this->catName = val;
}

void StoredProcedure::__set_ownerName(const std::string& val) {
  this->ownerName = val;
}

void StoredProcedure::__set_source(const std::string& val) {
  this->source = val;
}
std::ostream& operator<<(std::ostream& out, const StoredProcedure& obj)
{
  obj.printTo(out);
  return out;
}


void swap(StoredProcedure &a, StoredProcedure &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.dbName, b.dbName);
  swap(a.catName, b.catName);
  swap(a.ownerName, b.ownerName);
  swap(a.source, b.source);
  swap(a.__isset, b.__isset);
}

StoredProcedure::StoredProcedure(const StoredProcedure& other2139) {
  name = other2139.name;
  dbName = other2139.dbName;
  catName = other2139.catName;
  ownerName = other2139.ownerName;
  source = other2139.source;
  __isset = other2139.__isset;
}
StoredProcedure::StoredProcedure( StoredProcedure&& other2140) {
  name = std::move(other2140.name);
  dbName = std::move(other2140.dbName);
  catName = std::move(other2140.catName);
  ownerName = std::move(other2140.ownerName);
  source = std::move(other2140.source);
  __isset = std::move(other2140.__isset);
}
StoredProcedure& StoredProcedure::operator=(const StoredProcedure& other2141) {
  name = other2141.name;
  dbName = other2141.dbName;
  catName = other2141.catName;
  ownerName = other2141.ownerName;
  source = other2141.source;
  __isset = other2141.__isset;
  return *this;
}
StoredProcedure& StoredProcedure::operator=(StoredProcedure&& other2142) {
  name = std::move(other2142.name);
  dbName = std::move(other2142.dbName);
  catName = std::move(other2142.catName);
  ownerName = std::move(other2142.ownerName);
  source = std::move(other2142.source);
  __isset = std::move(other2142.__isset);
  return *this;
}
void StoredProcedure::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StoredProcedure(";
  out << "name=" << to_string(name);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "catName=" << to_string(catName);
  out << ", " << "ownerName=" << to_string(ownerName);
  out << ", " << "source=" << to_string(source);
  out << ")";
}


AddPackageRequest::~AddPackageRequest() throw() {
}


void AddPackageRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void AddPackageRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void AddPackageRequest::__set_packageName(const std::string& val) {
  this->packageName = val;
}

void AddPackageRequest::__set_ownerName(const std::string& val) {
  this->ownerName = val;
}

void AddPackageRequest::__set_header(const std::string& val) {
  this->header = val;
}

void AddPackageRequest::__set_body(const std::string& val) {
  this->body = val;
}
std::ostream& operator<<(std::ostream& out, const AddPackageRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AddPackageRequest &a, AddPackageRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.packageName, b.packageName);
  swap(a.ownerName, b.ownerName);
  swap(a.header, b.header);
  swap(a.body, b.body);
  swap(a.__isset, b.__isset);
}

AddPackageRequest::AddPackageRequest(const AddPackageRequest& other2143) {
  catName = other2143.catName;
  dbName = other2143.dbName;
  packageName = other2143.packageName;
  ownerName = other2143.ownerName;
  header = other2143.header;
  body = other2143.body;
  __isset = other2143.__isset;
}
AddPackageRequest::AddPackageRequest( AddPackageRequest&& other2144) {
  catName = std::move(other2144.catName);
  dbName = std::move(other2144.dbName);
  packageName = std::move(other2144.packageName);
  ownerName = std::move(other2144.ownerName);
  header = std::move(other2144.header);
  body = std::move(other2144.body);
  __isset = std::move(other2144.__isset);
}
AddPackageRequest& AddPackageRequest::operator=(const AddPackageRequest& other2145) {
  catName = other2145.catName;
  dbName = other2145.dbName;
  packageName = other2145.packageName;
  ownerName = other2145.ownerName;
  header = other2145.header;
  body = other2145.body;
  __isset = other2145.__isset;
  return *this;
}
AddPackageRequest& AddPackageRequest::operator=(AddPackageRequest&& other2146) {
  catName = std::move(other2146.catName);
  dbName = std::move(other2146.dbName);
  packageName = std::move(other2146.packageName);
  ownerName = std::move(other2146.ownerName);
  header = std::move(other2146.header);
  body = std::move(other2146.body);
  __isset = std::move(other2146.__isset);
  return *this;
}
void AddPackageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AddPackageRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "packageName=" << to_string(packageName);
  out << ", " << "ownerName=" << to_string(ownerName);
  out << ", " << "header=" << to_string(header);
  out << ", " << "body=" << to_string(body);
  out << ")";
}


GetPackageRequest::~GetPackageRequest() throw() {
}


void GetPackageRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void GetPackageRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void GetPackageRequest::__set_packageName(const std::string& val) {
  this->packageName = val;
}
std::ostream& operator<<(std::ostream& out, const GetPackageRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetPackageRequest &a, GetPackageRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.packageName, b.packageName);
}

GetPackageRequest::GetPackageRequest(const GetPackageRequest& other2147) {
  catName = other2147.catName;
  dbName = other2147.dbName;
  packageName = other2147.packageName;
}
GetPackageRequest::GetPackageRequest( GetPackageRequest&& other2148) {
  catName = std::move(other2148.catName);
  dbName = std::move(other2148.dbName);
  packageName = std::move(other2148.packageName);
}
GetPackageRequest& GetPackageRequest::operator=(const GetPackageRequest& other2149) {
  catName = other2149.catName;
  dbName = other2149.dbName;
  packageName = other2149.packageName;
  return *this;
}
GetPackageRequest& GetPackageRequest::operator=(GetPackageRequest&& other2150) {
  catName = std::move(other2150.catName);
  dbName = std::move(other2150.dbName);
  packageName = std::move(other2150.packageName);
  return *this;
}
void GetPackageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetPackageRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "packageName=" << to_string(packageName);
  out << ")";
}


DropPackageRequest::~DropPackageRequest() throw() {
}


void DropPackageRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void DropPackageRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void DropPackageRequest::__set_packageName(const std::string& val) {
  this->packageName = val;
}
std::ostream& operator<<(std::ostream& out, const DropPackageRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DropPackageRequest &a, DropPackageRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.packageName, b.packageName);
}

DropPackageRequest::DropPackageRequest(const DropPackageRequest& other2151) {
  catName = other2151.catName;
  dbName = other2151.dbName;
  packageName = other2151.packageName;
}
DropPackageRequest::DropPackageRequest( DropPackageRequest&& other2152) {
  catName = std::move(other2152.catName);
  dbName = std::move(other2152.dbName);
  packageName = std::move(other2152.packageName);
}
DropPackageRequest& DropPackageRequest::operator=(const DropPackageRequest& other2153) {
  catName = other2153.catName;
  dbName = other2153.dbName;
  packageName = other2153.packageName;
  return *this;
}
DropPackageRequest& DropPackageRequest::operator=(DropPackageRequest&& other2154) {
  catName = std::move(other2154.catName);
  dbName = std::move(other2154.dbName);
  packageName = std::move(other2154.packageName);
  return *this;
}
void DropPackageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DropPackageRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "packageName=" << to_string(packageName);
  out << ")";
}


ListPackageRequest::~ListPackageRequest() throw() {
}


void ListPackageRequest::__set_catName(const std::string& val) {
  this->catName = val;
}

void ListPackageRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
__isset.dbName = true;
}
std::ostream& operator<<(std::ostream& out, const ListPackageRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ListPackageRequest &a, ListPackageRequest &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.__isset, b.__isset);
}

ListPackageRequest::ListPackageRequest(const ListPackageRequest& other2155) {
  catName = other2155.catName;
  dbName = other2155.dbName;
  __isset = other2155.__isset;
}
ListPackageRequest::ListPackageRequest( ListPackageRequest&& other2156) {
  catName = std::move(other2156.catName);
  dbName = std::move(other2156.dbName);
  __isset = std::move(other2156.__isset);
}
ListPackageRequest& ListPackageRequest::operator=(const ListPackageRequest& other2157) {
  catName = other2157.catName;
  dbName = other2157.dbName;
  __isset = other2157.__isset;
  return *this;
}
ListPackageRequest& ListPackageRequest::operator=(ListPackageRequest&& other2158) {
  catName = std::move(other2158.catName);
  dbName = std::move(other2158.dbName);
  __isset = std::move(other2158.__isset);
  return *this;
}
void ListPackageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListPackageRequest(";
  out << "catName=" << to_string(catName);
  out << ", " << "dbName="; (__isset.dbName ? (out << to_string(dbName)) : (out << "<null>"));
  out << ")";
}


Package::~Package() throw() {
}


void Package::__set_catName(const std::string& val) {
  this->catName = val;
}

void Package::__set_dbName(const std::string& val) {
  this->dbName = val;
}

void Package::__set_packageName(const std::string& val) {
  this->packageName = val;
}

void Package::__set_ownerName(const std::string& val) {
  this->ownerName = val;
}

void Package::__set_header(const std::string& val) {
  this->header = val;
}

void Package::__set_body(const std::string& val) {
  this->body = val;
}
std::ostream& operator<<(std::ostream& out, const Package& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Package &a, Package &b) {
  using ::std::swap;
  swap(a.catName, b.catName);
  swap(a.dbName, b.dbName);
  swap(a.packageName, b.packageName);
  swap(a.ownerName, b.ownerName);
  swap(a.header, b.header);
  swap(a.body, b.body);
  swap(a.__isset, b.__isset);
}

Package::Package(const Package& other2159) {
  catName = other2159.catName;
  dbName = other2159.dbName;
  packageName = other2159.packageName;
  ownerName = other2159.ownerName;
  header = other2159.header;
  body = other2159.body;
  __isset = other2159.__isset;
}
Package::Package( Package&& other2160) {
  catName = std::move(other2160.catName);
  dbName = std::move(other2160.dbName);
  packageName = std::move(other2160.packageName);
  ownerName = std::move(other2160.ownerName);
  header = std::move(other2160.header);
  body = std::move(other2160.body);
  __isset = std::move(other2160.__isset);
}
Package& Package::operator=(const Package& other2161) {
  catName = other2161.catName;
  dbName = other2161.dbName;
  packageName = other2161.packageName;
  ownerName = other2161.ownerName;
  header = other2161.header;
  body = other2161.body;
  __isset = other2161.__isset;
  return *this;
}
Package& Package::operator=(Package&& other2162) {
  catName = std::move(other2162.catName);
  dbName = std::move(other2162.dbName);
  packageName = std::move(other2162.packageName);
  ownerName = std::move(other2162.ownerName);
  header = std::move(other2162.header);
  body = std::move(other2162.body);
  __isset = std::move(other2162.__isset);
  return *this;
}
void Package::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Package(";
  out << "catName=" << to_string(catName);
  out << ", " << "dbName=" << to_string(dbName);
  out << ", " << "packageName=" << to_string(packageName);
  out << ", " << "ownerName=" << to_string(ownerName);
  out << ", " << "header=" << to_string(header);
  out << ", " << "body=" << to_string(body);
  out << ")";
}


GetAllWriteEventInfoRequest::~GetAllWriteEventInfoRequest() throw() {
}


void GetAllWriteEventInfoRequest::__set_txnId(const int64_t val) {
  this->txnId = val;
}

void GetAllWriteEventInfoRequest::__set_dbName(const std::string& val) {
  this->dbName = val;
__isset.dbName = true;
}

void GetAllWriteEventInfoRequest::__set_tableName(const std::string& val) {
  this->tableName = val;
__isset.tableName = true;
}
std::ostream& operator<<(std::ostream& out, const GetAllWriteEventInfoRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GetAllWriteEventInfoRequest &a, GetAllWriteEventInfoRequest &b) {
  using ::std::swap;
  swap(a.txnId, b.txnId);
  swap(a.dbName, b.dbName);
  swap(a.tableName, b.tableName);
  swap(a.__isset, b.__isset);
}

GetAllWriteEventInfoRequest::GetAllWriteEventInfoRequest(const GetAllWriteEventInfoRequest& other2163) {
  txnId = other2163.txnId;
  dbName = other2163.dbName;
  tableName = other2163.tableName;
  __isset = other2163.__isset;
}
GetAllWriteEventInfoRequest::GetAllWriteEventInfoRequest( GetAllWriteEventInfoRequest&& other2164) {
  txnId = std::move(other2164.txnId);
  dbName = std::move(other2164.dbName);
  tableName = std::move(other2164.tableName);
  __isset = std::move(other2164.__isset);
}
GetAllWriteEventInfoRequest& GetAllWriteEventInfoRequest::operator=(const GetAllWriteEventInfoRequest& other2165) {
  txnId = other2165.txnId;
  dbName = other2165.dbName;
  tableName = other2165.tableName;
  __isset = other2165.__isset;
  return *this;
}
GetAllWriteEventInfoRequest& GetAllWriteEventInfoRequest::operator=(GetAllWriteEventInfoRequest&& other2166) {
  txnId = std::move(other2166.txnId);
  dbName = std::move(other2166.dbName);
  tableName = std::move(other2166.tableName);
  __isset = std::move(other2166.__isset);
  return *this;
}
void GetAllWriteEventInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetAllWriteEventInfoRequest(";
  out << "txnId=" << to_string(txnId);
  out << ", " << "dbName="; (__isset.dbName ? (out << to_string(dbName)) : (out << "<null>"));
  out << ", " << "tableName="; (__isset.tableName ? (out << to_string(tableName)) : (out << "<null>"));
  out << ")";
}


MetaException::~MetaException() throw() {
}


void MetaException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const MetaException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(MetaException &a, MetaException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

MetaException::MetaException(const MetaException& other2167) : TException() {
  message = other2167.message;
  __isset = other2167.__isset;
}
MetaException::MetaException( MetaException&& other2168) : TException() {
  message = std::move(other2168.message);
  __isset = std::move(other2168.__isset);
}
MetaException& MetaException::operator=(const MetaException& other2169) {
  message = other2169.message;
  __isset = other2169.__isset;
  return *this;
}
MetaException& MetaException::operator=(MetaException&& other2170) {
  message = std::move(other2170.message);
  __isset = std::move(other2170.__isset);
  return *this;
}
void MetaException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MetaException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* MetaException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: MetaException";
  }
}


UnknownTableException::~UnknownTableException() throw() {
}


void UnknownTableException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const UnknownTableException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(UnknownTableException &a, UnknownTableException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

UnknownTableException::UnknownTableException(const UnknownTableException& other2171) : TException() {
  message = other2171.message;
  __isset = other2171.__isset;
}
UnknownTableException::UnknownTableException( UnknownTableException&& other2172) : TException() {
  message = std::move(other2172.message);
  __isset = std::move(other2172.__isset);
}
UnknownTableException& UnknownTableException::operator=(const UnknownTableException& other2173) {
  message = other2173.message;
  __isset = other2173.__isset;
  return *this;
}
UnknownTableException& UnknownTableException::operator=(UnknownTableException&& other2174) {
  message = std::move(other2174.message);
  __isset = std::move(other2174.__isset);
  return *this;
}
void UnknownTableException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnknownTableException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* UnknownTableException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: UnknownTableException";
  }
}


UnknownDBException::~UnknownDBException() throw() {
}


void UnknownDBException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const UnknownDBException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(UnknownDBException &a, UnknownDBException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

UnknownDBException::UnknownDBException(const UnknownDBException& other2175) : TException() {
  message = other2175.message;
  __isset = other2175.__isset;
}
UnknownDBException::UnknownDBException( UnknownDBException&& other2176) : TException() {
  message = std::move(other2176.message);
  __isset = std::move(other2176.__isset);
}
UnknownDBException& UnknownDBException::operator=(const UnknownDBException& other2177) {
  message = other2177.message;
  __isset = other2177.__isset;
  return *this;
}
UnknownDBException& UnknownDBException::operator=(UnknownDBException&& other2178) {
  message = std::move(other2178.message);
  __isset = std::move(other2178.__isset);
  return *this;
}
void UnknownDBException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnknownDBException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* UnknownDBException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: UnknownDBException";
  }
}


AlreadyExistsException::~AlreadyExistsException() throw() {
}


void AlreadyExistsException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const AlreadyExistsException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AlreadyExistsException &a, AlreadyExistsException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

AlreadyExistsException::AlreadyExistsException(const AlreadyExistsException& other2179) : TException() {
  message = other2179.message;
  __isset = other2179.__isset;
}
AlreadyExistsException::AlreadyExistsException( AlreadyExistsException&& other2180) : TException() {
  message = std::move(other2180.message);
  __isset = std::move(other2180.__isset);
}
AlreadyExistsException& AlreadyExistsException::operator=(const AlreadyExistsException& other2181) {
  message = other2181.message;
  __isset = other2181.__isset;
  return *this;
}
AlreadyExistsException& AlreadyExistsException::operator=(AlreadyExistsException&& other2182) {
  message = std::move(other2182.message);
  __isset = std::move(other2182.__isset);
  return *this;
}
void AlreadyExistsException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AlreadyExistsException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* AlreadyExistsException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: AlreadyExistsException";
  }
}


InvalidPartitionException::~InvalidPartitionException() throw() {
}


void InvalidPartitionException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const InvalidPartitionException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(InvalidPartitionException &a, InvalidPartitionException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

InvalidPartitionException::InvalidPartitionException(const InvalidPartitionException& other2183) : TException() {
  message = other2183.message;
  __isset = other2183.__isset;
}
InvalidPartitionException::InvalidPartitionException( InvalidPartitionException&& other2184) : TException() {
  message = std::move(other2184.message);
  __isset = std::move(other2184.__isset);
}
InvalidPartitionException& InvalidPartitionException::operator=(const InvalidPartitionException& other2185) {
  message = other2185.message;
  __isset = other2185.__isset;
  return *this;
}
InvalidPartitionException& InvalidPartitionException::operator=(InvalidPartitionException&& other2186) {
  message = std::move(other2186.message);
  __isset = std::move(other2186.__isset);
  return *this;
}
void InvalidPartitionException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidPartitionException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* InvalidPartitionException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidPartitionException";
  }
}


UnknownPartitionException::~UnknownPartitionException() throw() {
}


void UnknownPartitionException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const UnknownPartitionException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(UnknownPartitionException &a, UnknownPartitionException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

UnknownPartitionException::UnknownPartitionException(const UnknownPartitionException& other2187) : TException() {
  message = other2187.message;
  __isset = other2187.__isset;
}
UnknownPartitionException::UnknownPartitionException( UnknownPartitionException&& other2188) : TException() {
  message = std::move(other2188.message);
  __isset = std::move(other2188.__isset);
}
UnknownPartitionException& UnknownPartitionException::operator=(const UnknownPartitionException& other2189) {
  message = other2189.message;
  __isset = other2189.__isset;
  return *this;
}
UnknownPartitionException& UnknownPartitionException::operator=(UnknownPartitionException&& other2190) {
  message = std::move(other2190.message);
  __isset = std::move(other2190.__isset);
  return *this;
}
void UnknownPartitionException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnknownPartitionException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* UnknownPartitionException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: UnknownPartitionException";
  }
}


InvalidObjectException::~InvalidObjectException() throw() {
}


void InvalidObjectException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const InvalidObjectException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(InvalidObjectException &a, InvalidObjectException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

InvalidObjectException::InvalidObjectException(const InvalidObjectException& other2191) : TException() {
  message = other2191.message;
  __isset = other2191.__isset;
}
InvalidObjectException::InvalidObjectException( InvalidObjectException&& other2192) : TException() {
  message = std::move(other2192.message);
  __isset = std::move(other2192.__isset);
}
InvalidObjectException& InvalidObjectException::operator=(const InvalidObjectException& other2193) {
  message = other2193.message;
  __isset = other2193.__isset;
  return *this;
}
InvalidObjectException& InvalidObjectException::operator=(InvalidObjectException&& other2194) {
  message = std::move(other2194.message);
  __isset = std::move(other2194.__isset);
  return *this;
}
void InvalidObjectException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidObjectException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* InvalidObjectException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidObjectException";
  }
}


NoSuchObjectException::~NoSuchObjectException() throw() {
}


void NoSuchObjectException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const NoSuchObjectException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NoSuchObjectException &a, NoSuchObjectException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

NoSuchObjectException::NoSuchObjectException(const NoSuchObjectException& other2195) : TException() {
  message = other2195.message;
  __isset = other2195.__isset;
}
NoSuchObjectException::NoSuchObjectException( NoSuchObjectException&& other2196) : TException() {
  message = std::move(other2196.message);
  __isset = std::move(other2196.__isset);
}
NoSuchObjectException& NoSuchObjectException::operator=(const NoSuchObjectException& other2197) {
  message = other2197.message;
  __isset = other2197.__isset;
  return *this;
}
NoSuchObjectException& NoSuchObjectException::operator=(NoSuchObjectException&& other2198) {
  message = std::move(other2198.message);
  __isset = std::move(other2198.__isset);
  return *this;
}
void NoSuchObjectException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoSuchObjectException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* NoSuchObjectException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: NoSuchObjectException";
  }
}


InvalidOperationException::~InvalidOperationException() throw() {
}


void InvalidOperationException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const InvalidOperationException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(InvalidOperationException &a, InvalidOperationException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

InvalidOperationException::InvalidOperationException(const InvalidOperationException& other2199) : TException() {
  message = other2199.message;
  __isset = other2199.__isset;
}
InvalidOperationException::InvalidOperationException( InvalidOperationException&& other2200) : TException() {
  message = std::move(other2200.message);
  __isset = std::move(other2200.__isset);
}
InvalidOperationException& InvalidOperationException::operator=(const InvalidOperationException& other2201) {
  message = other2201.message;
  __isset = other2201.__isset;
  return *this;
}
InvalidOperationException& InvalidOperationException::operator=(InvalidOperationException&& other2202) {
  message = std::move(other2202.message);
  __isset = std::move(other2202.__isset);
  return *this;
}
void InvalidOperationException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidOperationException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* InvalidOperationException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidOperationException";
  }
}


ConfigValSecurityException::~ConfigValSecurityException() throw() {
}


void ConfigValSecurityException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const ConfigValSecurityException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ConfigValSecurityException &a, ConfigValSecurityException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

ConfigValSecurityException::ConfigValSecurityException(const ConfigValSecurityException& other2203) : TException() {
  message = other2203.message;
  __isset = other2203.__isset;
}
ConfigValSecurityException::ConfigValSecurityException( ConfigValSecurityException&& other2204) : TException() {
  message = std::move(other2204.message);
  __isset = std::move(other2204.__isset);
}
ConfigValSecurityException& ConfigValSecurityException::operator=(const ConfigValSecurityException& other2205) {
  message = other2205.message;
  __isset = other2205.__isset;
  return *this;
}
ConfigValSecurityException& ConfigValSecurityException::operator=(ConfigValSecurityException&& other2206) {
  message = std::move(other2206.message);
  __isset = std::move(other2206.__isset);
  return *this;
}
void ConfigValSecurityException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConfigValSecurityException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* ConfigValSecurityException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ConfigValSecurityException";
  }
}


InvalidInputException::~InvalidInputException() throw() {
}


void InvalidInputException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const InvalidInputException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(InvalidInputException &a, InvalidInputException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

InvalidInputException::InvalidInputException(const InvalidInputException& other2207) : TException() {
  message = other2207.message;
  __isset = other2207.__isset;
}
InvalidInputException::InvalidInputException( InvalidInputException&& other2208) : TException() {
  message = std::move(other2208.message);
  __isset = std::move(other2208.__isset);
}
InvalidInputException& InvalidInputException::operator=(const InvalidInputException& other2209) {
  message = other2209.message;
  __isset = other2209.__isset;
  return *this;
}
InvalidInputException& InvalidInputException::operator=(InvalidInputException&& other2210) {
  message = std::move(other2210.message);
  __isset = std::move(other2210.__isset);
  return *this;
}
void InvalidInputException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidInputException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* InvalidInputException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidInputException";
  }
}


NoSuchTxnException::~NoSuchTxnException() throw() {
}


void NoSuchTxnException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const NoSuchTxnException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NoSuchTxnException &a, NoSuchTxnException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

NoSuchTxnException::NoSuchTxnException(const NoSuchTxnException& other2211) : TException() {
  message = other2211.message;
  __isset = other2211.__isset;
}
NoSuchTxnException::NoSuchTxnException( NoSuchTxnException&& other2212) : TException() {
  message = std::move(other2212.message);
  __isset = std::move(other2212.__isset);
}
NoSuchTxnException& NoSuchTxnException::operator=(const NoSuchTxnException& other2213) {
  message = other2213.message;
  __isset = other2213.__isset;
  return *this;
}
NoSuchTxnException& NoSuchTxnException::operator=(NoSuchTxnException&& other2214) {
  message = std::move(other2214.message);
  __isset = std::move(other2214.__isset);
  return *this;
}
void NoSuchTxnException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoSuchTxnException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* NoSuchTxnException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: NoSuchTxnException";
  }
}


TxnAbortedException::~TxnAbortedException() throw() {
}


void TxnAbortedException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const TxnAbortedException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TxnAbortedException &a, TxnAbortedException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

TxnAbortedException::TxnAbortedException(const TxnAbortedException& other2215) : TException() {
  message = other2215.message;
  __isset = other2215.__isset;
}
TxnAbortedException::TxnAbortedException( TxnAbortedException&& other2216) : TException() {
  message = std::move(other2216.message);
  __isset = std::move(other2216.__isset);
}
TxnAbortedException& TxnAbortedException::operator=(const TxnAbortedException& other2217) {
  message = other2217.message;
  __isset = other2217.__isset;
  return *this;
}
TxnAbortedException& TxnAbortedException::operator=(TxnAbortedException&& other2218) {
  message = std::move(other2218.message);
  __isset = std::move(other2218.__isset);
  return *this;
}
void TxnAbortedException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TxnAbortedException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* TxnAbortedException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: TxnAbortedException";
  }
}


TxnOpenException::~TxnOpenException() throw() {
}


void TxnOpenException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const TxnOpenException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TxnOpenException &a, TxnOpenException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

TxnOpenException::TxnOpenException(const TxnOpenException& other2219) : TException() {
  message = other2219.message;
  __isset = other2219.__isset;
}
TxnOpenException::TxnOpenException( TxnOpenException&& other2220) : TException() {
  message = std::move(other2220.message);
  __isset = std::move(other2220.__isset);
}
TxnOpenException& TxnOpenException::operator=(const TxnOpenException& other2221) {
  message = other2221.message;
  __isset = other2221.__isset;
  return *this;
}
TxnOpenException& TxnOpenException::operator=(TxnOpenException&& other2222) {
  message = std::move(other2222.message);
  __isset = std::move(other2222.__isset);
  return *this;
}
void TxnOpenException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TxnOpenException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* TxnOpenException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: TxnOpenException";
  }
}


NoSuchLockException::~NoSuchLockException() throw() {
}


void NoSuchLockException::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const NoSuchLockException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NoSuchLockException &a, NoSuchLockException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

NoSuchLockException::NoSuchLockException(const NoSuchLockException& other2223) : TException() {
  message = other2223.message;
  __isset = other2223.__isset;
}
NoSuchLockException::NoSuchLockException( NoSuchLockException&& other2224) : TException() {
  message = std::move(other2224.message);
  __isset = std::move(other2224.__isset);
}
NoSuchLockException& NoSuchLockException::operator=(const NoSuchLockException& other2225) {
  message = other2225.message;
  __isset = other2225.__isset;
  return *this;
}
NoSuchLockException& NoSuchLockException::operator=(NoSuchLockException&& other2226) {
  message = std::move(other2226.message);
  __isset = std::move(other2226.__isset);
  return *this;
}
void NoSuchLockException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NoSuchLockException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* NoSuchLockException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: NoSuchLockException";
  }
}

}}} // namespace
