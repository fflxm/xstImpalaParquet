// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planner.proto

#include "planner.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "kudu/util/protobuf-annotations.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_planner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBaseKeyRangePB_planner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HdfsFileSplitPB_planner_2eproto;
namespace impala {
class HdfsFileSplitPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HdfsFileSplitPB> _instance;
} _HdfsFileSplitPB_default_instance_;
class HBaseKeyRangePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HBaseKeyRangePB> _instance;
} _HBaseKeyRangePB_default_instance_;
class ScanRangePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanRangePB> _instance;
} _ScanRangePB_default_instance_;
}  // namespace impala
static void InitDefaultsscc_info_HBaseKeyRangePB_planner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_HBaseKeyRangePB_default_instance_;
    new (ptr) ::impala::HBaseKeyRangePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HBaseKeyRangePB_planner_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HBaseKeyRangePB_planner_2eproto}, {}};

static void InitDefaultsscc_info_HdfsFileSplitPB_planner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_HdfsFileSplitPB_default_instance_;
    new (ptr) ::impala::HdfsFileSplitPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HdfsFileSplitPB_planner_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HdfsFileSplitPB_planner_2eproto}, {}};

static void InitDefaultsscc_info_ScanRangePB_planner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ScanRangePB_default_instance_;
    new (ptr) ::impala::ScanRangePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScanRangePB_planner_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ScanRangePB_planner_2eproto}, {
      &scc_info_HdfsFileSplitPB_planner_2eproto.base,
      &scc_info_HBaseKeyRangePB_planner_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_planner_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_planner_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_planner_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_planner_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::impala::HdfsFileSplitPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::HdfsFileSplitPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::HdfsFileSplitPB, relative_path_),
  PROTOBUF_FIELD_OFFSET(::impala::HdfsFileSplitPB, offset_),
  PROTOBUF_FIELD_OFFSET(::impala::HdfsFileSplitPB, length_),
  PROTOBUF_FIELD_OFFSET(::impala::HdfsFileSplitPB, partition_id_),
  PROTOBUF_FIELD_OFFSET(::impala::HdfsFileSplitPB, file_length_),
  PROTOBUF_FIELD_OFFSET(::impala::HdfsFileSplitPB, file_compression_),
  PROTOBUF_FIELD_OFFSET(::impala::HdfsFileSplitPB, mtime_),
  PROTOBUF_FIELD_OFFSET(::impala::HdfsFileSplitPB, is_erasure_coded_),
  PROTOBUF_FIELD_OFFSET(::impala::HdfsFileSplitPB, partition_path_hash_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::impala::HBaseKeyRangePB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::HBaseKeyRangePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::HBaseKeyRangePB, startkey_),
  PROTOBUF_FIELD_OFFSET(::impala::HBaseKeyRangePB, stopkey_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangePB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangePB, hdfs_file_split_),
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangePB, hbase_key_range_),
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangePB, kudu_scan_token_),
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangePB, file_metadata_),
  2,
  3,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::impala::HdfsFileSplitPB)},
  { 23, 30, sizeof(::impala::HBaseKeyRangePB)},
  { 32, 41, sizeof(::impala::ScanRangePB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_HdfsFileSplitPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_HBaseKeyRangePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ScanRangePB_default_instance_),
};

const char descriptor_table_protodef_planner_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rplanner.proto\022\006impala\032\014common.proto\"\356\001"
  "\n\017HdfsFileSplitPB\022\025\n\rrelative_path\030\001 \001(\t"
  "\022\016\n\006offset\030\002 \001(\003\022\016\n\006length\030\003 \001(\003\022\024\n\014part"
  "ition_id\030\004 \001(\003\022\023\n\013file_length\030\005 \001(\003\0223\n\020f"
  "ile_compression\030\006 \001(\0162\031.impala.Compressi"
  "onTypePB\022\r\n\005mtime\030\007 \001(\003\022\030\n\020is_erasure_co"
  "ded\030\010 \001(\010\022\033\n\023partition_path_hash\030\t \001(\005\"4"
  "\n\017HBaseKeyRangePB\022\020\n\010startKey\030\001 \001(\t\022\017\n\007s"
  "topKey\030\002 \001(\t\"\241\001\n\013ScanRangePB\0220\n\017hdfs_fil"
  "e_split\030\001 \001(\0132\027.impala.HdfsFileSplitPB\0220"
  "\n\017hbase_key_range\030\002 \001(\0132\027.impala.HBaseKe"
  "yRangePB\022\027\n\017kudu_scan_token\030\003 \001(\014\022\025\n\rfil"
  "e_metadata\030\004 \001(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_planner_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_planner_2eproto_sccs[3] = {
  &scc_info_HBaseKeyRangePB_planner_2eproto.base,
  &scc_info_HdfsFileSplitPB_planner_2eproto.base,
  &scc_info_ScanRangePB_planner_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_planner_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planner_2eproto = {
  false, false, descriptor_table_protodef_planner_2eproto, "planner.proto", 496,
  &descriptor_table_planner_2eproto_once, descriptor_table_planner_2eproto_sccs, descriptor_table_planner_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_planner_2eproto::offsets,
  file_level_metadata_planner_2eproto, 3, file_level_enum_descriptors_planner_2eproto, file_level_service_descriptors_planner_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_planner_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_planner_2eproto)), true);
namespace impala {

// ===================================================================

class HdfsFileSplitPB::_Internal {
 public:
  using HasBits = decltype(std::declval<HdfsFileSplitPB>()._has_bits_);
  static void set_has_relative_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_partition_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_file_compression(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mtime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_erasure_coded(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_partition_path_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

HdfsFileSplitPB::HdfsFileSplitPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.HdfsFileSplitPB)
}
HdfsFileSplitPB::HdfsFileSplitPB(const HdfsFileSplitPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  relative_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_relative_path()) {
    relative_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_relative_path(), 
      GetArena());
  }
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&partition_path_hash_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(partition_path_hash_));
  // @@protoc_insertion_point(copy_constructor:impala.HdfsFileSplitPB)
}

void HdfsFileSplitPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HdfsFileSplitPB_planner_2eproto.base);
  relative_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&partition_path_hash_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(partition_path_hash_));
}

HdfsFileSplitPB::~HdfsFileSplitPB() {
  // @@protoc_insertion_point(destructor:impala.HdfsFileSplitPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HdfsFileSplitPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  relative_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HdfsFileSplitPB::ArenaDtor(void* object) {
  HdfsFileSplitPB* _this = reinterpret_cast< HdfsFileSplitPB* >(object);
  (void)_this;
}
void HdfsFileSplitPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HdfsFileSplitPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HdfsFileSplitPB& HdfsFileSplitPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HdfsFileSplitPB_planner_2eproto.base);
  return *internal_default_instance();
}


void HdfsFileSplitPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.HdfsFileSplitPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    relative_path_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_erasure_coded_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(is_erasure_coded_));
  }
  partition_path_hash_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HdfsFileSplitPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string relative_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_relative_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.HdfsFileSplitPB.relative_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 partition_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_partition_id(&has_bits);
          partition_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 file_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_file_length(&has_bits);
          file_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.CompressionTypePB file_compression = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::impala::CompressionTypePB_IsValid(val))) {
            _internal_set_file_compression(static_cast<::impala::CompressionTypePB>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 mtime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mtime(&has_bits);
          mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_erasure_coded = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_erasure_coded(&has_bits);
          is_erasure_coded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 partition_path_hash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_partition_path_hash(&has_bits);
          partition_path_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HdfsFileSplitPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.HdfsFileSplitPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string relative_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_relative_path().data(), static_cast<int>(this->_internal_relative_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.HdfsFileSplitPB.relative_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_relative_path(), target);
  }

  // optional int64 offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // optional int64 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_length(), target);
  }

  // optional int64 partition_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_partition_id(), target);
  }

  // optional int64 file_length = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_file_length(), target);
  }

  // optional .impala.CompressionTypePB file_compression = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_file_compression(), target);
  }

  // optional int64 mtime = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_mtime(), target);
  }

  // optional bool is_erasure_coded = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_erasure_coded(), target);
  }

  // optional int32 partition_path_hash = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_partition_path_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.HdfsFileSplitPB)
  return target;
}

size_t HdfsFileSplitPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.HdfsFileSplitPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string relative_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_relative_path());
    }

    // optional int64 offset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_offset());
    }

    // optional int64 length = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_length());
    }

    // optional int64 partition_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_partition_id());
    }

    // optional int64 file_length = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_file_length());
    }

    // optional int64 mtime = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_mtime());
    }

    // optional .impala.CompressionTypePB file_compression = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_file_compression());
    }

    // optional bool is_erasure_coded = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional int32 partition_path_hash = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_partition_path_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HdfsFileSplitPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.HdfsFileSplitPB)
  GOOGLE_DCHECK_NE(&from, this);
  const HdfsFileSplitPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HdfsFileSplitPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.HdfsFileSplitPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.HdfsFileSplitPB)
    MergeFrom(*source);
  }
}

void HdfsFileSplitPB::MergeFrom(const HdfsFileSplitPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.HdfsFileSplitPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_relative_path(from._internal_relative_path());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      partition_id_ = from.partition_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_length_ = from.file_length_;
    }
    if (cached_has_bits & 0x00000020u) {
      mtime_ = from.mtime_;
    }
    if (cached_has_bits & 0x00000040u) {
      file_compression_ = from.file_compression_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_erasure_coded_ = from.is_erasure_coded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_partition_path_hash(from._internal_partition_path_hash());
  }
}

void HdfsFileSplitPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.HdfsFileSplitPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HdfsFileSplitPB::CopyFrom(const HdfsFileSplitPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.HdfsFileSplitPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HdfsFileSplitPB::IsInitialized() const {
  return true;
}

void HdfsFileSplitPB::InternalSwap(HdfsFileSplitPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relative_path_.Swap(&other->relative_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HdfsFileSplitPB, partition_path_hash_)
      + sizeof(HdfsFileSplitPB::partition_path_hash_)
      - PROTOBUF_FIELD_OFFSET(HdfsFileSplitPB, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HdfsFileSplitPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HBaseKeyRangePB::_Internal {
 public:
  using HasBits = decltype(std::declval<HBaseKeyRangePB>()._has_bits_);
  static void set_has_startkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stopkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HBaseKeyRangePB::HBaseKeyRangePB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.HBaseKeyRangePB)
}
HBaseKeyRangePB::HBaseKeyRangePB(const HBaseKeyRangePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  startkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_startkey()) {
    startkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_startkey(), 
      GetArena());
  }
  stopkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stopkey()) {
    stopkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stopkey(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:impala.HBaseKeyRangePB)
}

void HBaseKeyRangePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HBaseKeyRangePB_planner_2eproto.base);
  startkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stopkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HBaseKeyRangePB::~HBaseKeyRangePB() {
  // @@protoc_insertion_point(destructor:impala.HBaseKeyRangePB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HBaseKeyRangePB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  startkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stopkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HBaseKeyRangePB::ArenaDtor(void* object) {
  HBaseKeyRangePB* _this = reinterpret_cast< HBaseKeyRangePB* >(object);
  (void)_this;
}
void HBaseKeyRangePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HBaseKeyRangePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HBaseKeyRangePB& HBaseKeyRangePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HBaseKeyRangePB_planner_2eproto.base);
  return *internal_default_instance();
}


void HBaseKeyRangePB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.HBaseKeyRangePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      startkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      stopkey_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HBaseKeyRangePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string startKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_startkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.HBaseKeyRangePB.startKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stopKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stopkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.HBaseKeyRangePB.stopKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HBaseKeyRangePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.HBaseKeyRangePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string startKey = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_startkey().data(), static_cast<int>(this->_internal_startkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.HBaseKeyRangePB.startKey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_startkey(), target);
  }

  // optional string stopKey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stopkey().data(), static_cast<int>(this->_internal_stopkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.HBaseKeyRangePB.stopKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stopkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.HBaseKeyRangePB)
  return target;
}

size_t HBaseKeyRangePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.HBaseKeyRangePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string startKey = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_startkey());
    }

    // optional string stopKey = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stopkey());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HBaseKeyRangePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.HBaseKeyRangePB)
  GOOGLE_DCHECK_NE(&from, this);
  const HBaseKeyRangePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HBaseKeyRangePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.HBaseKeyRangePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.HBaseKeyRangePB)
    MergeFrom(*source);
  }
}

void HBaseKeyRangePB::MergeFrom(const HBaseKeyRangePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.HBaseKeyRangePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_startkey(from._internal_startkey());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_stopkey(from._internal_stopkey());
    }
  }
}

void HBaseKeyRangePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.HBaseKeyRangePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HBaseKeyRangePB::CopyFrom(const HBaseKeyRangePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.HBaseKeyRangePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HBaseKeyRangePB::IsInitialized() const {
  return true;
}

void HBaseKeyRangePB::InternalSwap(HBaseKeyRangePB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  startkey_.Swap(&other->startkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stopkey_.Swap(&other->stopkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HBaseKeyRangePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScanRangePB::_Internal {
 public:
  using HasBits = decltype(std::declval<ScanRangePB>()._has_bits_);
  static const ::impala::HdfsFileSplitPB& hdfs_file_split(const ScanRangePB* msg);
  static void set_has_hdfs_file_split(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::impala::HBaseKeyRangePB& hbase_key_range(const ScanRangePB* msg);
  static void set_has_hbase_key_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kudu_scan_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::impala::HdfsFileSplitPB&
ScanRangePB::_Internal::hdfs_file_split(const ScanRangePB* msg) {
  return *msg->hdfs_file_split_;
}
const ::impala::HBaseKeyRangePB&
ScanRangePB::_Internal::hbase_key_range(const ScanRangePB* msg) {
  return *msg->hbase_key_range_;
}
ScanRangePB::ScanRangePB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.ScanRangePB)
}
ScanRangePB::ScanRangePB(const ScanRangePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kudu_scan_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kudu_scan_token()) {
    kudu_scan_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kudu_scan_token(), 
      GetArena());
  }
  file_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_metadata()) {
    file_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_metadata(), 
      GetArena());
  }
  if (from._internal_has_hdfs_file_split()) {
    hdfs_file_split_ = new ::impala::HdfsFileSplitPB(*from.hdfs_file_split_);
  } else {
    hdfs_file_split_ = nullptr;
  }
  if (from._internal_has_hbase_key_range()) {
    hbase_key_range_ = new ::impala::HBaseKeyRangePB(*from.hbase_key_range_);
  } else {
    hbase_key_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:impala.ScanRangePB)
}

void ScanRangePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanRangePB_planner_2eproto.base);
  kudu_scan_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hdfs_file_split_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&hbase_key_range_) -
      reinterpret_cast<char*>(&hdfs_file_split_)) + sizeof(hbase_key_range_));
}

ScanRangePB::~ScanRangePB() {
  // @@protoc_insertion_point(destructor:impala.ScanRangePB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScanRangePB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  kudu_scan_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdfs_file_split_;
  if (this != internal_default_instance()) delete hbase_key_range_;
}

void ScanRangePB::ArenaDtor(void* object) {
  ScanRangePB* _this = reinterpret_cast< ScanRangePB* >(object);
  (void)_this;
}
void ScanRangePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScanRangePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanRangePB& ScanRangePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanRangePB_planner_2eproto.base);
  return *internal_default_instance();
}


void ScanRangePB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.ScanRangePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      kudu_scan_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_metadata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(hdfs_file_split_ != nullptr);
      hdfs_file_split_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(hbase_key_range_ != nullptr);
      hbase_key_range_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScanRangePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.HdfsFileSplitPB hdfs_file_split = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdfs_file_split(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.HBaseKeyRangePB hbase_key_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hbase_key_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes kudu_scan_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_kudu_scan_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes file_metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_file_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanRangePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.ScanRangePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.HdfsFileSplitPB hdfs_file_split = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hdfs_file_split(this), target, stream);
  }

  // optional .impala.HBaseKeyRangePB hbase_key_range = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hbase_key_range(this), target, stream);
  }

  // optional bytes kudu_scan_token = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_kudu_scan_token(), target);
  }

  // optional bytes file_metadata = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_file_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.ScanRangePB)
  return target;
}

size_t ScanRangePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.ScanRangePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes kudu_scan_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_kudu_scan_token());
    }

    // optional bytes file_metadata = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_file_metadata());
    }

    // optional .impala.HdfsFileSplitPB hdfs_file_split = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hdfs_file_split_);
    }

    // optional .impala.HBaseKeyRangePB hbase_key_range = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hbase_key_range_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanRangePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.ScanRangePB)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanRangePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanRangePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.ScanRangePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.ScanRangePB)
    MergeFrom(*source);
  }
}

void ScanRangePB::MergeFrom(const ScanRangePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.ScanRangePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_kudu_scan_token(from._internal_kudu_scan_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_metadata(from._internal_file_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_hdfs_file_split()->::impala::HdfsFileSplitPB::MergeFrom(from._internal_hdfs_file_split());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_hbase_key_range()->::impala::HBaseKeyRangePB::MergeFrom(from._internal_hbase_key_range());
    }
  }
}

void ScanRangePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.ScanRangePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRangePB::CopyFrom(const ScanRangePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.ScanRangePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRangePB::IsInitialized() const {
  return true;
}

void ScanRangePB::InternalSwap(ScanRangePB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  kudu_scan_token_.Swap(&other->kudu_scan_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_metadata_.Swap(&other->file_metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScanRangePB, hbase_key_range_)
      + sizeof(ScanRangePB::hbase_key_range_)
      - PROTOBUF_FIELD_OFFSET(ScanRangePB, hdfs_file_split_)>(
          reinterpret_cast<char*>(&hdfs_file_split_),
          reinterpret_cast<char*>(&other->hdfs_file_split_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanRangePB::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace impala
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::impala::HdfsFileSplitPB* Arena::CreateMaybeMessage< ::impala::HdfsFileSplitPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::HdfsFileSplitPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::HBaseKeyRangePB* Arena::CreateMaybeMessage< ::impala::HBaseKeyRangePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::HBaseKeyRangePB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ScanRangePB* Arena::CreateMaybeMessage< ::impala::ScanRangePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ScanRangePB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
