// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_stream_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_5fstream_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_5fstream_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "row_batch.pb.h"
#include "kudu/rpc/rpc_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_5fstream_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_5fstream_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_5fstream_5fservice_2eproto;
namespace impala {
class BloomFilterPB;
class BloomFilterPBDefaultTypeInternal;
extern BloomFilterPBDefaultTypeInternal _BloomFilterPB_default_instance_;
class EndDataStreamRequestPB;
class EndDataStreamRequestPBDefaultTypeInternal;
extern EndDataStreamRequestPBDefaultTypeInternal _EndDataStreamRequestPB_default_instance_;
class EndDataStreamResponsePB;
class EndDataStreamResponsePBDefaultTypeInternal;
extern EndDataStreamResponsePBDefaultTypeInternal _EndDataStreamResponsePB_default_instance_;
class InListFilterPB;
class InListFilterPBDefaultTypeInternal;
extern InListFilterPBDefaultTypeInternal _InListFilterPB_default_instance_;
class MinMaxFilterPB;
class MinMaxFilterPBDefaultTypeInternal;
extern MinMaxFilterPBDefaultTypeInternal _MinMaxFilterPB_default_instance_;
class PublishFilterParamsPB;
class PublishFilterParamsPBDefaultTypeInternal;
extern PublishFilterParamsPBDefaultTypeInternal _PublishFilterParamsPB_default_instance_;
class PublishFilterResultPB;
class PublishFilterResultPBDefaultTypeInternal;
extern PublishFilterResultPBDefaultTypeInternal _PublishFilterResultPB_default_instance_;
class TransmitDataRequestPB;
class TransmitDataRequestPBDefaultTypeInternal;
extern TransmitDataRequestPBDefaultTypeInternal _TransmitDataRequestPB_default_instance_;
class TransmitDataResponsePB;
class TransmitDataResponsePBDefaultTypeInternal;
extern TransmitDataResponsePBDefaultTypeInternal _TransmitDataResponsePB_default_instance_;
class UpdateFilterParamsPB;
class UpdateFilterParamsPBDefaultTypeInternal;
extern UpdateFilterParamsPBDefaultTypeInternal _UpdateFilterParamsPB_default_instance_;
class UpdateFilterResultPB;
class UpdateFilterResultPBDefaultTypeInternal;
extern UpdateFilterResultPBDefaultTypeInternal _UpdateFilterResultPB_default_instance_;
}  // namespace impala
PROTOBUF_NAMESPACE_OPEN
template<> ::impala::BloomFilterPB* Arena::CreateMaybeMessage<::impala::BloomFilterPB>(Arena*);
template<> ::impala::EndDataStreamRequestPB* Arena::CreateMaybeMessage<::impala::EndDataStreamRequestPB>(Arena*);
template<> ::impala::EndDataStreamResponsePB* Arena::CreateMaybeMessage<::impala::EndDataStreamResponsePB>(Arena*);
template<> ::impala::InListFilterPB* Arena::CreateMaybeMessage<::impala::InListFilterPB>(Arena*);
template<> ::impala::MinMaxFilterPB* Arena::CreateMaybeMessage<::impala::MinMaxFilterPB>(Arena*);
template<> ::impala::PublishFilterParamsPB* Arena::CreateMaybeMessage<::impala::PublishFilterParamsPB>(Arena*);
template<> ::impala::PublishFilterResultPB* Arena::CreateMaybeMessage<::impala::PublishFilterResultPB>(Arena*);
template<> ::impala::TransmitDataRequestPB* Arena::CreateMaybeMessage<::impala::TransmitDataRequestPB>(Arena*);
template<> ::impala::TransmitDataResponsePB* Arena::CreateMaybeMessage<::impala::TransmitDataResponsePB>(Arena*);
template<> ::impala::UpdateFilterParamsPB* Arena::CreateMaybeMessage<::impala::UpdateFilterParamsPB>(Arena*);
template<> ::impala::UpdateFilterResultPB* Arena::CreateMaybeMessage<::impala::UpdateFilterResultPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace impala {

// ===================================================================

class TransmitDataRequestPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.TransmitDataRequestPB) */ {
 public:
  inline TransmitDataRequestPB() : TransmitDataRequestPB(nullptr) {}
  virtual ~TransmitDataRequestPB();

  TransmitDataRequestPB(const TransmitDataRequestPB& from);
  TransmitDataRequestPB(TransmitDataRequestPB&& from) noexcept
    : TransmitDataRequestPB() {
    *this = ::std::move(from);
  }

  inline TransmitDataRequestPB& operator=(const TransmitDataRequestPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransmitDataRequestPB& operator=(TransmitDataRequestPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransmitDataRequestPB& default_instance();

  static inline const TransmitDataRequestPB* internal_default_instance() {
    return reinterpret_cast<const TransmitDataRequestPB*>(
               &_TransmitDataRequestPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransmitDataRequestPB& a, TransmitDataRequestPB& b) {
    a.Swap(&b);
  }
  inline void Swap(TransmitDataRequestPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransmitDataRequestPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransmitDataRequestPB* New() const final {
    return CreateMaybeMessage<TransmitDataRequestPB>(nullptr);
  }

  TransmitDataRequestPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransmitDataRequestPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransmitDataRequestPB& from);
  void MergeFrom(const TransmitDataRequestPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransmitDataRequestPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.TransmitDataRequestPB";
  }
  protected:
  explicit TransmitDataRequestPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5fstream_5fservice_2eproto);
    return ::descriptor_table_data_5fstream_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestFragmentInstanceIdFieldNumber = 1,
    kRowBatchHeaderFieldNumber = 4,
    kSenderIdFieldNumber = 2,
    kDestNodeIdFieldNumber = 3,
    kTupleOffsetsSidecarIdxFieldNumber = 5,
    kTupleDataSidecarIdxFieldNumber = 6,
  };
  // optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
  bool has_dest_fragment_instance_id() const;
  private:
  bool _internal_has_dest_fragment_instance_id() const;
  public:
  void clear_dest_fragment_instance_id();
  const ::impala::UniqueIdPB& dest_fragment_instance_id() const;
  ::impala::UniqueIdPB* release_dest_fragment_instance_id();
  ::impala::UniqueIdPB* mutable_dest_fragment_instance_id();
  void set_allocated_dest_fragment_instance_id(::impala::UniqueIdPB* dest_fragment_instance_id);
  private:
  const ::impala::UniqueIdPB& _internal_dest_fragment_instance_id() const;
  ::impala::UniqueIdPB* _internal_mutable_dest_fragment_instance_id();
  public:
  void unsafe_arena_set_allocated_dest_fragment_instance_id(
      ::impala::UniqueIdPB* dest_fragment_instance_id);
  ::impala::UniqueIdPB* unsafe_arena_release_dest_fragment_instance_id();

  // optional .impala.RowBatchHeaderPB row_batch_header = 4;
  bool has_row_batch_header() const;
  private:
  bool _internal_has_row_batch_header() const;
  public:
  void clear_row_batch_header();
  const ::impala::RowBatchHeaderPB& row_batch_header() const;
  ::impala::RowBatchHeaderPB* release_row_batch_header();
  ::impala::RowBatchHeaderPB* mutable_row_batch_header();
  void set_allocated_row_batch_header(::impala::RowBatchHeaderPB* row_batch_header);
  private:
  const ::impala::RowBatchHeaderPB& _internal_row_batch_header() const;
  ::impala::RowBatchHeaderPB* _internal_mutable_row_batch_header();
  public:
  void unsafe_arena_set_allocated_row_batch_header(
      ::impala::RowBatchHeaderPB* row_batch_header);
  ::impala::RowBatchHeaderPB* unsafe_arena_release_row_batch_header();

  // optional int32 sender_id = 2;
  bool has_sender_id() const;
  private:
  bool _internal_has_sender_id() const;
  public:
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 dest_node_id = 3;
  bool has_dest_node_id() const;
  private:
  bool _internal_has_dest_node_id() const;
  public:
  void clear_dest_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 dest_node_id() const;
  void set_dest_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dest_node_id() const;
  void _internal_set_dest_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tuple_offsets_sidecar_idx = 5;
  bool has_tuple_offsets_sidecar_idx() const;
  private:
  bool _internal_has_tuple_offsets_sidecar_idx() const;
  public:
  void clear_tuple_offsets_sidecar_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 tuple_offsets_sidecar_idx() const;
  void set_tuple_offsets_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tuple_offsets_sidecar_idx() const;
  void _internal_set_tuple_offsets_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 tuple_data_sidecar_idx = 6;
  bool has_tuple_data_sidecar_idx() const;
  private:
  bool _internal_has_tuple_data_sidecar_idx() const;
  public:
  void clear_tuple_data_sidecar_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 tuple_data_sidecar_idx() const;
  void set_tuple_data_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tuple_data_sidecar_idx() const;
  void _internal_set_tuple_data_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.TransmitDataRequestPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::UniqueIdPB* dest_fragment_instance_id_;
  ::impala::RowBatchHeaderPB* row_batch_header_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 dest_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 tuple_offsets_sidecar_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 tuple_data_sidecar_idx_;
  friend struct ::TableStruct_data_5fstream_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TransmitDataResponsePB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.TransmitDataResponsePB) */ {
 public:
  inline TransmitDataResponsePB() : TransmitDataResponsePB(nullptr) {}
  virtual ~TransmitDataResponsePB();

  TransmitDataResponsePB(const TransmitDataResponsePB& from);
  TransmitDataResponsePB(TransmitDataResponsePB&& from) noexcept
    : TransmitDataResponsePB() {
    *this = ::std::move(from);
  }

  inline TransmitDataResponsePB& operator=(const TransmitDataResponsePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransmitDataResponsePB& operator=(TransmitDataResponsePB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransmitDataResponsePB& default_instance();

  static inline const TransmitDataResponsePB* internal_default_instance() {
    return reinterpret_cast<const TransmitDataResponsePB*>(
               &_TransmitDataResponsePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransmitDataResponsePB& a, TransmitDataResponsePB& b) {
    a.Swap(&b);
  }
  inline void Swap(TransmitDataResponsePB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransmitDataResponsePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransmitDataResponsePB* New() const final {
    return CreateMaybeMessage<TransmitDataResponsePB>(nullptr);
  }

  TransmitDataResponsePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransmitDataResponsePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransmitDataResponsePB& from);
  void MergeFrom(const TransmitDataResponsePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransmitDataResponsePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.TransmitDataResponsePB";
  }
  protected:
  explicit TransmitDataResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5fstream_5fservice_2eproto);
    return ::descriptor_table_data_5fstream_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kReceiverLatencyNsFieldNumber = 2,
  };
  // optional .impala.StatusPB status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::impala::StatusPB& status() const;
  ::impala::StatusPB* release_status();
  ::impala::StatusPB* mutable_status();
  void set_allocated_status(::impala::StatusPB* status);
  private:
  const ::impala::StatusPB& _internal_status() const;
  ::impala::StatusPB* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::impala::StatusPB* status);
  ::impala::StatusPB* unsafe_arena_release_status();

  // optional int64 receiver_latency_ns = 2;
  bool has_receiver_latency_ns() const;
  private:
  bool _internal_has_receiver_latency_ns() const;
  public:
  void clear_receiver_latency_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 receiver_latency_ns() const;
  void set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_receiver_latency_ns() const;
  void _internal_set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.TransmitDataResponsePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::StatusPB* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 receiver_latency_ns_;
  friend struct ::TableStruct_data_5fstream_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EndDataStreamRequestPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.EndDataStreamRequestPB) */ {
 public:
  inline EndDataStreamRequestPB() : EndDataStreamRequestPB(nullptr) {}
  virtual ~EndDataStreamRequestPB();

  EndDataStreamRequestPB(const EndDataStreamRequestPB& from);
  EndDataStreamRequestPB(EndDataStreamRequestPB&& from) noexcept
    : EndDataStreamRequestPB() {
    *this = ::std::move(from);
  }

  inline EndDataStreamRequestPB& operator=(const EndDataStreamRequestPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndDataStreamRequestPB& operator=(EndDataStreamRequestPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndDataStreamRequestPB& default_instance();

  static inline const EndDataStreamRequestPB* internal_default_instance() {
    return reinterpret_cast<const EndDataStreamRequestPB*>(
               &_EndDataStreamRequestPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EndDataStreamRequestPB& a, EndDataStreamRequestPB& b) {
    a.Swap(&b);
  }
  inline void Swap(EndDataStreamRequestPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndDataStreamRequestPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndDataStreamRequestPB* New() const final {
    return CreateMaybeMessage<EndDataStreamRequestPB>(nullptr);
  }

  EndDataStreamRequestPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndDataStreamRequestPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndDataStreamRequestPB& from);
  void MergeFrom(const EndDataStreamRequestPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndDataStreamRequestPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.EndDataStreamRequestPB";
  }
  protected:
  explicit EndDataStreamRequestPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5fstream_5fservice_2eproto);
    return ::descriptor_table_data_5fstream_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestFragmentInstanceIdFieldNumber = 1,
    kSenderIdFieldNumber = 2,
    kDestNodeIdFieldNumber = 3,
  };
  // optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
  bool has_dest_fragment_instance_id() const;
  private:
  bool _internal_has_dest_fragment_instance_id() const;
  public:
  void clear_dest_fragment_instance_id();
  const ::impala::UniqueIdPB& dest_fragment_instance_id() const;
  ::impala::UniqueIdPB* release_dest_fragment_instance_id();
  ::impala::UniqueIdPB* mutable_dest_fragment_instance_id();
  void set_allocated_dest_fragment_instance_id(::impala::UniqueIdPB* dest_fragment_instance_id);
  private:
  const ::impala::UniqueIdPB& _internal_dest_fragment_instance_id() const;
  ::impala::UniqueIdPB* _internal_mutable_dest_fragment_instance_id();
  public:
  void unsafe_arena_set_allocated_dest_fragment_instance_id(
      ::impala::UniqueIdPB* dest_fragment_instance_id);
  ::impala::UniqueIdPB* unsafe_arena_release_dest_fragment_instance_id();

  // optional int32 sender_id = 2;
  bool has_sender_id() const;
  private:
  bool _internal_has_sender_id() const;
  public:
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 dest_node_id = 3;
  bool has_dest_node_id() const;
  private:
  bool _internal_has_dest_node_id() const;
  public:
  void clear_dest_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 dest_node_id() const;
  void set_dest_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dest_node_id() const;
  void _internal_set_dest_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.EndDataStreamRequestPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::UniqueIdPB* dest_fragment_instance_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 dest_node_id_;
  friend struct ::TableStruct_data_5fstream_5fservice_2eproto;
};
// -------------------------------------------------------------------

class EndDataStreamResponsePB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.EndDataStreamResponsePB) */ {
 public:
  inline EndDataStreamResponsePB() : EndDataStreamResponsePB(nullptr) {}
  virtual ~EndDataStreamResponsePB();

  EndDataStreamResponsePB(const EndDataStreamResponsePB& from);
  EndDataStreamResponsePB(EndDataStreamResponsePB&& from) noexcept
    : EndDataStreamResponsePB() {
    *this = ::std::move(from);
  }

  inline EndDataStreamResponsePB& operator=(const EndDataStreamResponsePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndDataStreamResponsePB& operator=(EndDataStreamResponsePB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndDataStreamResponsePB& default_instance();

  static inline const EndDataStreamResponsePB* internal_default_instance() {
    return reinterpret_cast<const EndDataStreamResponsePB*>(
               &_EndDataStreamResponsePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EndDataStreamResponsePB& a, EndDataStreamResponsePB& b) {
    a.Swap(&b);
  }
  inline void Swap(EndDataStreamResponsePB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndDataStreamResponsePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndDataStreamResponsePB* New() const final {
    return CreateMaybeMessage<EndDataStreamResponsePB>(nullptr);
  }

  EndDataStreamResponsePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndDataStreamResponsePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndDataStreamResponsePB& from);
  void MergeFrom(const EndDataStreamResponsePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndDataStreamResponsePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.EndDataStreamResponsePB";
  }
  protected:
  explicit EndDataStreamResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5fstream_5fservice_2eproto);
    return ::descriptor_table_data_5fstream_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kReceiverLatencyNsFieldNumber = 2,
  };
  // optional .impala.StatusPB status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::impala::StatusPB& status() const;
  ::impala::StatusPB* release_status();
  ::impala::StatusPB* mutable_status();
  void set_allocated_status(::impala::StatusPB* status);
  private:
  const ::impala::StatusPB& _internal_status() const;
  ::impala::StatusPB* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::impala::StatusPB* status);
  ::impala::StatusPB* unsafe_arena_release_status();

  // optional int64 receiver_latency_ns = 2;
  bool has_receiver_latency_ns() const;
  private:
  bool _internal_has_receiver_latency_ns() const;
  public:
  void clear_receiver_latency_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 receiver_latency_ns() const;
  void set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_receiver_latency_ns() const;
  void _internal_set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.EndDataStreamResponsePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::StatusPB* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 receiver_latency_ns_;
  friend struct ::TableStruct_data_5fstream_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BloomFilterPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.BloomFilterPB) */ {
 public:
  inline BloomFilterPB() : BloomFilterPB(nullptr) {}
  virtual ~BloomFilterPB();

  BloomFilterPB(const BloomFilterPB& from);
  BloomFilterPB(BloomFilterPB&& from) noexcept
    : BloomFilterPB() {
    *this = ::std::move(from);
  }

  inline BloomFilterPB& operator=(const BloomFilterPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline BloomFilterPB& operator=(BloomFilterPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BloomFilterPB& default_instance();

  static inline const BloomFilterPB* internal_default_instance() {
    return reinterpret_cast<const BloomFilterPB*>(
               &_BloomFilterPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BloomFilterPB& a, BloomFilterPB& b) {
    a.Swap(&b);
  }
  inline void Swap(BloomFilterPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BloomFilterPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BloomFilterPB* New() const final {
    return CreateMaybeMessage<BloomFilterPB>(nullptr);
  }

  BloomFilterPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BloomFilterPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BloomFilterPB& from);
  void MergeFrom(const BloomFilterPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BloomFilterPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.BloomFilterPB";
  }
  protected:
  explicit BloomFilterPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5fstream_5fservice_2eproto);
    return ::descriptor_table_data_5fstream_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogBufferpoolSpaceFieldNumber = 1,
    kAlwaysTrueFieldNumber = 2,
    kAlwaysFalseFieldNumber = 3,
    kDirectorySidecarIdxFieldNumber = 4,
  };
  // optional int32 log_bufferpool_space = 1;
  bool has_log_bufferpool_space() const;
  private:
  bool _internal_has_log_bufferpool_space() const;
  public:
  void clear_log_bufferpool_space();
  ::PROTOBUF_NAMESPACE_ID::int32 log_bufferpool_space() const;
  void set_log_bufferpool_space(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_log_bufferpool_space() const;
  void _internal_set_log_bufferpool_space(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool always_true = 2;
  bool has_always_true() const;
  private:
  bool _internal_has_always_true() const;
  public:
  void clear_always_true();
  bool always_true() const;
  void set_always_true(bool value);
  private:
  bool _internal_always_true() const;
  void _internal_set_always_true(bool value);
  public:

  // optional bool always_false = 3;
  bool has_always_false() const;
  private:
  bool _internal_has_always_false() const;
  public:
  void clear_always_false();
  bool always_false() const;
  void set_always_false(bool value);
  private:
  bool _internal_always_false() const;
  void _internal_set_always_false(bool value);
  public:

  // optional int32 directory_sidecar_idx = 4;
  bool has_directory_sidecar_idx() const;
  private:
  bool _internal_has_directory_sidecar_idx() const;
  public:
  void clear_directory_sidecar_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 directory_sidecar_idx() const;
  void set_directory_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_directory_sidecar_idx() const;
  void _internal_set_directory_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.BloomFilterPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 log_bufferpool_space_;
  bool always_true_;
  bool always_false_;
  ::PROTOBUF_NAMESPACE_ID::int32 directory_sidecar_idx_;
  friend struct ::TableStruct_data_5fstream_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MinMaxFilterPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.MinMaxFilterPB) */ {
 public:
  inline MinMaxFilterPB() : MinMaxFilterPB(nullptr) {}
  virtual ~MinMaxFilterPB();

  MinMaxFilterPB(const MinMaxFilterPB& from);
  MinMaxFilterPB(MinMaxFilterPB&& from) noexcept
    : MinMaxFilterPB() {
    *this = ::std::move(from);
  }

  inline MinMaxFilterPB& operator=(const MinMaxFilterPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinMaxFilterPB& operator=(MinMaxFilterPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MinMaxFilterPB& default_instance();

  static inline const MinMaxFilterPB* internal_default_instance() {
    return reinterpret_cast<const MinMaxFilterPB*>(
               &_MinMaxFilterPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MinMaxFilterPB& a, MinMaxFilterPB& b) {
    a.Swap(&b);
  }
  inline void Swap(MinMaxFilterPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinMaxFilterPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MinMaxFilterPB* New() const final {
    return CreateMaybeMessage<MinMaxFilterPB>(nullptr);
  }

  MinMaxFilterPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MinMaxFilterPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MinMaxFilterPB& from);
  void MergeFrom(const MinMaxFilterPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinMaxFilterPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.MinMaxFilterPB";
  }
  protected:
  explicit MinMaxFilterPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5fstream_5fservice_2eproto);
    return ::descriptor_table_data_5fstream_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 3,
    kMaxFieldNumber = 4,
    kAlwaysTrueFieldNumber = 1,
    kAlwaysFalseFieldNumber = 2,
  };
  // optional .impala.ColumnValuePB min = 3;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  const ::impala::ColumnValuePB& min() const;
  ::impala::ColumnValuePB* release_min();
  ::impala::ColumnValuePB* mutable_min();
  void set_allocated_min(::impala::ColumnValuePB* min);
  private:
  const ::impala::ColumnValuePB& _internal_min() const;
  ::impala::ColumnValuePB* _internal_mutable_min();
  public:
  void unsafe_arena_set_allocated_min(
      ::impala::ColumnValuePB* min);
  ::impala::ColumnValuePB* unsafe_arena_release_min();

  // optional .impala.ColumnValuePB max = 4;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  const ::impala::ColumnValuePB& max() const;
  ::impala::ColumnValuePB* release_max();
  ::impala::ColumnValuePB* mutable_max();
  void set_allocated_max(::impala::ColumnValuePB* max);
  private:
  const ::impala::ColumnValuePB& _internal_max() const;
  ::impala::ColumnValuePB* _internal_mutable_max();
  public:
  void unsafe_arena_set_allocated_max(
      ::impala::ColumnValuePB* max);
  ::impala::ColumnValuePB* unsafe_arena_release_max();

  // optional bool always_true = 1;
  bool has_always_true() const;
  private:
  bool _internal_has_always_true() const;
  public:
  void clear_always_true();
  bool always_true() const;
  void set_always_true(bool value);
  private:
  bool _internal_always_true() const;
  void _internal_set_always_true(bool value);
  public:

  // optional bool always_false = 2;
  bool has_always_false() const;
  private:
  bool _internal_has_always_false() const;
  public:
  void clear_always_false();
  bool always_false() const;
  void set_always_false(bool value);
  private:
  bool _internal_always_false() const;
  void _internal_set_always_false(bool value);
  public:

  // @@protoc_insertion_point(class_scope:impala.MinMaxFilterPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::ColumnValuePB* min_;
  ::impala::ColumnValuePB* max_;
  bool always_true_;
  bool always_false_;
  friend struct ::TableStruct_data_5fstream_5fservice_2eproto;
};
// -------------------------------------------------------------------

class InListFilterPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.InListFilterPB) */ {
 public:
  inline InListFilterPB() : InListFilterPB(nullptr) {}
  virtual ~InListFilterPB();

  InListFilterPB(const InListFilterPB& from);
  InListFilterPB(InListFilterPB&& from) noexcept
    : InListFilterPB() {
    *this = ::std::move(from);
  }

  inline InListFilterPB& operator=(const InListFilterPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline InListFilterPB& operator=(InListFilterPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InListFilterPB& default_instance();

  static inline const InListFilterPB* internal_default_instance() {
    return reinterpret_cast<const InListFilterPB*>(
               &_InListFilterPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InListFilterPB& a, InListFilterPB& b) {
    a.Swap(&b);
  }
  inline void Swap(InListFilterPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InListFilterPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InListFilterPB* New() const final {
    return CreateMaybeMessage<InListFilterPB>(nullptr);
  }

  InListFilterPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InListFilterPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InListFilterPB& from);
  void MergeFrom(const InListFilterPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InListFilterPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.InListFilterPB";
  }
  protected:
  explicit InListFilterPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5fstream_5fservice_2eproto);
    return ::descriptor_table_data_5fstream_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kAlwaysTrueFieldNumber = 1,
    kContainsNullFieldNumber = 2,
  };
  // repeated .impala.ColumnValuePB value = 3;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::impala::ColumnValuePB* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ColumnValuePB >*
      mutable_value();
  private:
  const ::impala::ColumnValuePB& _internal_value(int index) const;
  ::impala::ColumnValuePB* _internal_add_value();
  public:
  const ::impala::ColumnValuePB& value(int index) const;
  ::impala::ColumnValuePB* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ColumnValuePB >&
      value() const;

  // optional bool always_true = 1;
  bool has_always_true() const;
  private:
  bool _internal_has_always_true() const;
  public:
  void clear_always_true();
  bool always_true() const;
  void set_always_true(bool value);
  private:
  bool _internal_always_true() const;
  void _internal_set_always_true(bool value);
  public:

  // optional bool contains_null = 2;
  bool has_contains_null() const;
  private:
  bool _internal_has_contains_null() const;
  public:
  void clear_contains_null();
  bool contains_null() const;
  void set_contains_null(bool value);
  private:
  bool _internal_contains_null() const;
  void _internal_set_contains_null(bool value);
  public:

  // @@protoc_insertion_point(class_scope:impala.InListFilterPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ColumnValuePB > value_;
  bool always_true_;
  bool contains_null_;
  friend struct ::TableStruct_data_5fstream_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateFilterParamsPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.UpdateFilterParamsPB) */ {
 public:
  inline UpdateFilterParamsPB() : UpdateFilterParamsPB(nullptr) {}
  virtual ~UpdateFilterParamsPB();

  UpdateFilterParamsPB(const UpdateFilterParamsPB& from);
  UpdateFilterParamsPB(UpdateFilterParamsPB&& from) noexcept
    : UpdateFilterParamsPB() {
    *this = ::std::move(from);
  }

  inline UpdateFilterParamsPB& operator=(const UpdateFilterParamsPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateFilterParamsPB& operator=(UpdateFilterParamsPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateFilterParamsPB& default_instance();

  static inline const UpdateFilterParamsPB* internal_default_instance() {
    return reinterpret_cast<const UpdateFilterParamsPB*>(
               &_UpdateFilterParamsPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateFilterParamsPB& a, UpdateFilterParamsPB& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateFilterParamsPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateFilterParamsPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateFilterParamsPB* New() const final {
    return CreateMaybeMessage<UpdateFilterParamsPB>(nullptr);
  }

  UpdateFilterParamsPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFilterParamsPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateFilterParamsPB& from);
  void MergeFrom(const UpdateFilterParamsPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFilterParamsPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.UpdateFilterParamsPB";
  }
  protected:
  explicit UpdateFilterParamsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5fstream_5fservice_2eproto);
    return ::descriptor_table_data_5fstream_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryIdFieldNumber = 2,
    kBloomFilterFieldNumber = 3,
    kMinMaxFilterFieldNumber = 4,
    kInListFilterFieldNumber = 5,
    kFilterIdFieldNumber = 1,
  };
  // optional .impala.UniqueIdPB query_id = 2;
  bool has_query_id() const;
  private:
  bool _internal_has_query_id() const;
  public:
  void clear_query_id();
  const ::impala::UniqueIdPB& query_id() const;
  ::impala::UniqueIdPB* release_query_id();
  ::impala::UniqueIdPB* mutable_query_id();
  void set_allocated_query_id(::impala::UniqueIdPB* query_id);
  private:
  const ::impala::UniqueIdPB& _internal_query_id() const;
  ::impala::UniqueIdPB* _internal_mutable_query_id();
  public:
  void unsafe_arena_set_allocated_query_id(
      ::impala::UniqueIdPB* query_id);
  ::impala::UniqueIdPB* unsafe_arena_release_query_id();

  // optional .impala.BloomFilterPB bloom_filter = 3;
  bool has_bloom_filter() const;
  private:
  bool _internal_has_bloom_filter() const;
  public:
  void clear_bloom_filter();
  const ::impala::BloomFilterPB& bloom_filter() const;
  ::impala::BloomFilterPB* release_bloom_filter();
  ::impala::BloomFilterPB* mutable_bloom_filter();
  void set_allocated_bloom_filter(::impala::BloomFilterPB* bloom_filter);
  private:
  const ::impala::BloomFilterPB& _internal_bloom_filter() const;
  ::impala::BloomFilterPB* _internal_mutable_bloom_filter();
  public:
  void unsafe_arena_set_allocated_bloom_filter(
      ::impala::BloomFilterPB* bloom_filter);
  ::impala::BloomFilterPB* unsafe_arena_release_bloom_filter();

  // optional .impala.MinMaxFilterPB min_max_filter = 4;
  bool has_min_max_filter() const;
  private:
  bool _internal_has_min_max_filter() const;
  public:
  void clear_min_max_filter();
  const ::impala::MinMaxFilterPB& min_max_filter() const;
  ::impala::MinMaxFilterPB* release_min_max_filter();
  ::impala::MinMaxFilterPB* mutable_min_max_filter();
  void set_allocated_min_max_filter(::impala::MinMaxFilterPB* min_max_filter);
  private:
  const ::impala::MinMaxFilterPB& _internal_min_max_filter() const;
  ::impala::MinMaxFilterPB* _internal_mutable_min_max_filter();
  public:
  void unsafe_arena_set_allocated_min_max_filter(
      ::impala::MinMaxFilterPB* min_max_filter);
  ::impala::MinMaxFilterPB* unsafe_arena_release_min_max_filter();

  // optional .impala.InListFilterPB in_list_filter = 5;
  bool has_in_list_filter() const;
  private:
  bool _internal_has_in_list_filter() const;
  public:
  void clear_in_list_filter();
  const ::impala::InListFilterPB& in_list_filter() const;
  ::impala::InListFilterPB* release_in_list_filter();
  ::impala::InListFilterPB* mutable_in_list_filter();
  void set_allocated_in_list_filter(::impala::InListFilterPB* in_list_filter);
  private:
  const ::impala::InListFilterPB& _internal_in_list_filter() const;
  ::impala::InListFilterPB* _internal_mutable_in_list_filter();
  public:
  void unsafe_arena_set_allocated_in_list_filter(
      ::impala::InListFilterPB* in_list_filter);
  ::impala::InListFilterPB* unsafe_arena_release_in_list_filter();

  // optional int32 filter_id = 1;
  bool has_filter_id() const;
  private:
  bool _internal_has_filter_id() const;
  public:
  void clear_filter_id();
  ::PROTOBUF_NAMESPACE_ID::int32 filter_id() const;
  void set_filter_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filter_id() const;
  void _internal_set_filter_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.UpdateFilterParamsPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::UniqueIdPB* query_id_;
  ::impala::BloomFilterPB* bloom_filter_;
  ::impala::MinMaxFilterPB* min_max_filter_;
  ::impala::InListFilterPB* in_list_filter_;
  ::PROTOBUF_NAMESPACE_ID::int32 filter_id_;
  friend struct ::TableStruct_data_5fstream_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateFilterResultPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.UpdateFilterResultPB) */ {
 public:
  inline UpdateFilterResultPB() : UpdateFilterResultPB(nullptr) {}
  virtual ~UpdateFilterResultPB();

  UpdateFilterResultPB(const UpdateFilterResultPB& from);
  UpdateFilterResultPB(UpdateFilterResultPB&& from) noexcept
    : UpdateFilterResultPB() {
    *this = ::std::move(from);
  }

  inline UpdateFilterResultPB& operator=(const UpdateFilterResultPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateFilterResultPB& operator=(UpdateFilterResultPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateFilterResultPB& default_instance();

  static inline const UpdateFilterResultPB* internal_default_instance() {
    return reinterpret_cast<const UpdateFilterResultPB*>(
               &_UpdateFilterResultPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateFilterResultPB& a, UpdateFilterResultPB& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateFilterResultPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateFilterResultPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateFilterResultPB* New() const final {
    return CreateMaybeMessage<UpdateFilterResultPB>(nullptr);
  }

  UpdateFilterResultPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateFilterResultPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateFilterResultPB& from);
  void MergeFrom(const UpdateFilterResultPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateFilterResultPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.UpdateFilterResultPB";
  }
  protected:
  explicit UpdateFilterResultPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5fstream_5fservice_2eproto);
    return ::descriptor_table_data_5fstream_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kReceiverLatencyNsFieldNumber = 2,
  };
  // optional .impala.StatusPB status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::impala::StatusPB& status() const;
  ::impala::StatusPB* release_status();
  ::impala::StatusPB* mutable_status();
  void set_allocated_status(::impala::StatusPB* status);
  private:
  const ::impala::StatusPB& _internal_status() const;
  ::impala::StatusPB* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::impala::StatusPB* status);
  ::impala::StatusPB* unsafe_arena_release_status();

  // optional int64 receiver_latency_ns = 2;
  bool has_receiver_latency_ns() const;
  private:
  bool _internal_has_receiver_latency_ns() const;
  public:
  void clear_receiver_latency_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 receiver_latency_ns() const;
  void set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_receiver_latency_ns() const;
  void _internal_set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.UpdateFilterResultPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::StatusPB* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 receiver_latency_ns_;
  friend struct ::TableStruct_data_5fstream_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PublishFilterParamsPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.PublishFilterParamsPB) */ {
 public:
  inline PublishFilterParamsPB() : PublishFilterParamsPB(nullptr) {}
  virtual ~PublishFilterParamsPB();

  PublishFilterParamsPB(const PublishFilterParamsPB& from);
  PublishFilterParamsPB(PublishFilterParamsPB&& from) noexcept
    : PublishFilterParamsPB() {
    *this = ::std::move(from);
  }

  inline PublishFilterParamsPB& operator=(const PublishFilterParamsPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishFilterParamsPB& operator=(PublishFilterParamsPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishFilterParamsPB& default_instance();

  static inline const PublishFilterParamsPB* internal_default_instance() {
    return reinterpret_cast<const PublishFilterParamsPB*>(
               &_PublishFilterParamsPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PublishFilterParamsPB& a, PublishFilterParamsPB& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishFilterParamsPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishFilterParamsPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishFilterParamsPB* New() const final {
    return CreateMaybeMessage<PublishFilterParamsPB>(nullptr);
  }

  PublishFilterParamsPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishFilterParamsPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishFilterParamsPB& from);
  void MergeFrom(const PublishFilterParamsPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishFilterParamsPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.PublishFilterParamsPB";
  }
  protected:
  explicit PublishFilterParamsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5fstream_5fservice_2eproto);
    return ::descriptor_table_data_5fstream_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDstQueryIdFieldNumber = 2,
    kBloomFilterFieldNumber = 3,
    kMinMaxFilterFieldNumber = 4,
    kInListFilterFieldNumber = 5,
    kFilterIdFieldNumber = 1,
  };
  // optional .impala.UniqueIdPB dst_query_id = 2;
  bool has_dst_query_id() const;
  private:
  bool _internal_has_dst_query_id() const;
  public:
  void clear_dst_query_id();
  const ::impala::UniqueIdPB& dst_query_id() const;
  ::impala::UniqueIdPB* release_dst_query_id();
  ::impala::UniqueIdPB* mutable_dst_query_id();
  void set_allocated_dst_query_id(::impala::UniqueIdPB* dst_query_id);
  private:
  const ::impala::UniqueIdPB& _internal_dst_query_id() const;
  ::impala::UniqueIdPB* _internal_mutable_dst_query_id();
  public:
  void unsafe_arena_set_allocated_dst_query_id(
      ::impala::UniqueIdPB* dst_query_id);
  ::impala::UniqueIdPB* unsafe_arena_release_dst_query_id();

  // optional .impala.BloomFilterPB bloom_filter = 3;
  bool has_bloom_filter() const;
  private:
  bool _internal_has_bloom_filter() const;
  public:
  void clear_bloom_filter();
  const ::impala::BloomFilterPB& bloom_filter() const;
  ::impala::BloomFilterPB* release_bloom_filter();
  ::impala::BloomFilterPB* mutable_bloom_filter();
  void set_allocated_bloom_filter(::impala::BloomFilterPB* bloom_filter);
  private:
  const ::impala::BloomFilterPB& _internal_bloom_filter() const;
  ::impala::BloomFilterPB* _internal_mutable_bloom_filter();
  public:
  void unsafe_arena_set_allocated_bloom_filter(
      ::impala::BloomFilterPB* bloom_filter);
  ::impala::BloomFilterPB* unsafe_arena_release_bloom_filter();

  // optional .impala.MinMaxFilterPB min_max_filter = 4;
  bool has_min_max_filter() const;
  private:
  bool _internal_has_min_max_filter() const;
  public:
  void clear_min_max_filter();
  const ::impala::MinMaxFilterPB& min_max_filter() const;
  ::impala::MinMaxFilterPB* release_min_max_filter();
  ::impala::MinMaxFilterPB* mutable_min_max_filter();
  void set_allocated_min_max_filter(::impala::MinMaxFilterPB* min_max_filter);
  private:
  const ::impala::MinMaxFilterPB& _internal_min_max_filter() const;
  ::impala::MinMaxFilterPB* _internal_mutable_min_max_filter();
  public:
  void unsafe_arena_set_allocated_min_max_filter(
      ::impala::MinMaxFilterPB* min_max_filter);
  ::impala::MinMaxFilterPB* unsafe_arena_release_min_max_filter();

  // optional .impala.InListFilterPB in_list_filter = 5;
  bool has_in_list_filter() const;
  private:
  bool _internal_has_in_list_filter() const;
  public:
  void clear_in_list_filter();
  const ::impala::InListFilterPB& in_list_filter() const;
  ::impala::InListFilterPB* release_in_list_filter();
  ::impala::InListFilterPB* mutable_in_list_filter();
  void set_allocated_in_list_filter(::impala::InListFilterPB* in_list_filter);
  private:
  const ::impala::InListFilterPB& _internal_in_list_filter() const;
  ::impala::InListFilterPB* _internal_mutable_in_list_filter();
  public:
  void unsafe_arena_set_allocated_in_list_filter(
      ::impala::InListFilterPB* in_list_filter);
  ::impala::InListFilterPB* unsafe_arena_release_in_list_filter();

  // optional int32 filter_id = 1;
  bool has_filter_id() const;
  private:
  bool _internal_has_filter_id() const;
  public:
  void clear_filter_id();
  ::PROTOBUF_NAMESPACE_ID::int32 filter_id() const;
  void set_filter_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_filter_id() const;
  void _internal_set_filter_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.PublishFilterParamsPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::UniqueIdPB* dst_query_id_;
  ::impala::BloomFilterPB* bloom_filter_;
  ::impala::MinMaxFilterPB* min_max_filter_;
  ::impala::InListFilterPB* in_list_filter_;
  ::PROTOBUF_NAMESPACE_ID::int32 filter_id_;
  friend struct ::TableStruct_data_5fstream_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PublishFilterResultPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.PublishFilterResultPB) */ {
 public:
  inline PublishFilterResultPB() : PublishFilterResultPB(nullptr) {}
  virtual ~PublishFilterResultPB();

  PublishFilterResultPB(const PublishFilterResultPB& from);
  PublishFilterResultPB(PublishFilterResultPB&& from) noexcept
    : PublishFilterResultPB() {
    *this = ::std::move(from);
  }

  inline PublishFilterResultPB& operator=(const PublishFilterResultPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishFilterResultPB& operator=(PublishFilterResultPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishFilterResultPB& default_instance();

  static inline const PublishFilterResultPB* internal_default_instance() {
    return reinterpret_cast<const PublishFilterResultPB*>(
               &_PublishFilterResultPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PublishFilterResultPB& a, PublishFilterResultPB& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishFilterResultPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishFilterResultPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishFilterResultPB* New() const final {
    return CreateMaybeMessage<PublishFilterResultPB>(nullptr);
  }

  PublishFilterResultPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishFilterResultPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishFilterResultPB& from);
  void MergeFrom(const PublishFilterResultPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishFilterResultPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.PublishFilterResultPB";
  }
  protected:
  explicit PublishFilterResultPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5fstream_5fservice_2eproto);
    return ::descriptor_table_data_5fstream_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kReceiverLatencyNsFieldNumber = 2,
  };
  // optional .impala.StatusPB status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::impala::StatusPB& status() const;
  ::impala::StatusPB* release_status();
  ::impala::StatusPB* mutable_status();
  void set_allocated_status(::impala::StatusPB* status);
  private:
  const ::impala::StatusPB& _internal_status() const;
  ::impala::StatusPB* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::impala::StatusPB* status);
  ::impala::StatusPB* unsafe_arena_release_status();

  // optional int64 receiver_latency_ns = 2;
  bool has_receiver_latency_ns() const;
  private:
  bool _internal_has_receiver_latency_ns() const;
  public:
  void clear_receiver_latency_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 receiver_latency_ns() const;
  void set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_receiver_latency_ns() const;
  void _internal_set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.PublishFilterResultPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::StatusPB* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 receiver_latency_ns_;
  friend struct ::TableStruct_data_5fstream_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransmitDataRequestPB

// optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
inline bool TransmitDataRequestPB::_internal_has_dest_fragment_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dest_fragment_instance_id_ != nullptr);
  return value;
}
inline bool TransmitDataRequestPB::has_dest_fragment_instance_id() const {
  return _internal_has_dest_fragment_instance_id();
}
inline const ::impala::UniqueIdPB& TransmitDataRequestPB::_internal_dest_fragment_instance_id() const {
  const ::impala::UniqueIdPB* p = dest_fragment_instance_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::UniqueIdPB&>(
      ::impala::_UniqueIdPB_default_instance_);
}
inline const ::impala::UniqueIdPB& TransmitDataRequestPB::dest_fragment_instance_id() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataRequestPB.dest_fragment_instance_id)
  return _internal_dest_fragment_instance_id();
}
inline void TransmitDataRequestPB::unsafe_arena_set_allocated_dest_fragment_instance_id(
    ::impala::UniqueIdPB* dest_fragment_instance_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_fragment_instance_id_);
  }
  dest_fragment_instance_id_ = dest_fragment_instance_id;
  if (dest_fragment_instance_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.TransmitDataRequestPB.dest_fragment_instance_id)
}
inline ::impala::UniqueIdPB* TransmitDataRequestPB::release_dest_fragment_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = dest_fragment_instance_id_;
  dest_fragment_instance_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::UniqueIdPB* TransmitDataRequestPB::unsafe_arena_release_dest_fragment_instance_id() {
  // @@protoc_insertion_point(field_release:impala.TransmitDataRequestPB.dest_fragment_instance_id)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = dest_fragment_instance_id_;
  dest_fragment_instance_id_ = nullptr;
  return temp;
}
inline ::impala::UniqueIdPB* TransmitDataRequestPB::_internal_mutable_dest_fragment_instance_id() {
  _has_bits_[0] |= 0x00000001u;
  if (dest_fragment_instance_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::UniqueIdPB>(GetArena());
    dest_fragment_instance_id_ = p;
  }
  return dest_fragment_instance_id_;
}
inline ::impala::UniqueIdPB* TransmitDataRequestPB::mutable_dest_fragment_instance_id() {
  // @@protoc_insertion_point(field_mutable:impala.TransmitDataRequestPB.dest_fragment_instance_id)
  return _internal_mutable_dest_fragment_instance_id();
}
inline void TransmitDataRequestPB::set_allocated_dest_fragment_instance_id(::impala::UniqueIdPB* dest_fragment_instance_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_fragment_instance_id_);
  }
  if (dest_fragment_instance_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_fragment_instance_id)->GetArena();
    if (message_arena != submessage_arena) {
      dest_fragment_instance_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_fragment_instance_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dest_fragment_instance_id_ = dest_fragment_instance_id;
  // @@protoc_insertion_point(field_set_allocated:impala.TransmitDataRequestPB.dest_fragment_instance_id)
}

// optional int32 sender_id = 2;
inline bool TransmitDataRequestPB::_internal_has_sender_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TransmitDataRequestPB::has_sender_id() const {
  return _internal_has_sender_id();
}
inline void TransmitDataRequestPB::clear_sender_id() {
  sender_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransmitDataRequestPB::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransmitDataRequestPB::sender_id() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataRequestPB.sender_id)
  return _internal_sender_id();
}
inline void TransmitDataRequestPB::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  sender_id_ = value;
}
inline void TransmitDataRequestPB::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:impala.TransmitDataRequestPB.sender_id)
}

// optional int32 dest_node_id = 3;
inline bool TransmitDataRequestPB::_internal_has_dest_node_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TransmitDataRequestPB::has_dest_node_id() const {
  return _internal_has_dest_node_id();
}
inline void TransmitDataRequestPB::clear_dest_node_id() {
  dest_node_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransmitDataRequestPB::_internal_dest_node_id() const {
  return dest_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransmitDataRequestPB::dest_node_id() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataRequestPB.dest_node_id)
  return _internal_dest_node_id();
}
inline void TransmitDataRequestPB::_internal_set_dest_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  dest_node_id_ = value;
}
inline void TransmitDataRequestPB::set_dest_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dest_node_id(value);
  // @@protoc_insertion_point(field_set:impala.TransmitDataRequestPB.dest_node_id)
}

// optional .impala.RowBatchHeaderPB row_batch_header = 4;
inline bool TransmitDataRequestPB::_internal_has_row_batch_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || row_batch_header_ != nullptr);
  return value;
}
inline bool TransmitDataRequestPB::has_row_batch_header() const {
  return _internal_has_row_batch_header();
}
inline const ::impala::RowBatchHeaderPB& TransmitDataRequestPB::_internal_row_batch_header() const {
  const ::impala::RowBatchHeaderPB* p = row_batch_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::RowBatchHeaderPB&>(
      ::impala::_RowBatchHeaderPB_default_instance_);
}
inline const ::impala::RowBatchHeaderPB& TransmitDataRequestPB::row_batch_header() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataRequestPB.row_batch_header)
  return _internal_row_batch_header();
}
inline void TransmitDataRequestPB::unsafe_arena_set_allocated_row_batch_header(
    ::impala::RowBatchHeaderPB* row_batch_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_batch_header_);
  }
  row_batch_header_ = row_batch_header;
  if (row_batch_header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.TransmitDataRequestPB.row_batch_header)
}
inline ::impala::RowBatchHeaderPB* TransmitDataRequestPB::release_row_batch_header() {
  _has_bits_[0] &= ~0x00000002u;
  ::impala::RowBatchHeaderPB* temp = row_batch_header_;
  row_batch_header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::RowBatchHeaderPB* TransmitDataRequestPB::unsafe_arena_release_row_batch_header() {
  // @@protoc_insertion_point(field_release:impala.TransmitDataRequestPB.row_batch_header)
  _has_bits_[0] &= ~0x00000002u;
  ::impala::RowBatchHeaderPB* temp = row_batch_header_;
  row_batch_header_ = nullptr;
  return temp;
}
inline ::impala::RowBatchHeaderPB* TransmitDataRequestPB::_internal_mutable_row_batch_header() {
  _has_bits_[0] |= 0x00000002u;
  if (row_batch_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::RowBatchHeaderPB>(GetArena());
    row_batch_header_ = p;
  }
  return row_batch_header_;
}
inline ::impala::RowBatchHeaderPB* TransmitDataRequestPB::mutable_row_batch_header() {
  // @@protoc_insertion_point(field_mutable:impala.TransmitDataRequestPB.row_batch_header)
  return _internal_mutable_row_batch_header();
}
inline void TransmitDataRequestPB::set_allocated_row_batch_header(::impala::RowBatchHeaderPB* row_batch_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_batch_header_);
  }
  if (row_batch_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row_batch_header)->GetArena();
    if (message_arena != submessage_arena) {
      row_batch_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row_batch_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  row_batch_header_ = row_batch_header;
  // @@protoc_insertion_point(field_set_allocated:impala.TransmitDataRequestPB.row_batch_header)
}

// optional int32 tuple_offsets_sidecar_idx = 5;
inline bool TransmitDataRequestPB::_internal_has_tuple_offsets_sidecar_idx() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TransmitDataRequestPB::has_tuple_offsets_sidecar_idx() const {
  return _internal_has_tuple_offsets_sidecar_idx();
}
inline void TransmitDataRequestPB::clear_tuple_offsets_sidecar_idx() {
  tuple_offsets_sidecar_idx_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransmitDataRequestPB::_internal_tuple_offsets_sidecar_idx() const {
  return tuple_offsets_sidecar_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransmitDataRequestPB::tuple_offsets_sidecar_idx() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataRequestPB.tuple_offsets_sidecar_idx)
  return _internal_tuple_offsets_sidecar_idx();
}
inline void TransmitDataRequestPB::_internal_set_tuple_offsets_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  tuple_offsets_sidecar_idx_ = value;
}
inline void TransmitDataRequestPB::set_tuple_offsets_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tuple_offsets_sidecar_idx(value);
  // @@protoc_insertion_point(field_set:impala.TransmitDataRequestPB.tuple_offsets_sidecar_idx)
}

// optional int32 tuple_data_sidecar_idx = 6;
inline bool TransmitDataRequestPB::_internal_has_tuple_data_sidecar_idx() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TransmitDataRequestPB::has_tuple_data_sidecar_idx() const {
  return _internal_has_tuple_data_sidecar_idx();
}
inline void TransmitDataRequestPB::clear_tuple_data_sidecar_idx() {
  tuple_data_sidecar_idx_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransmitDataRequestPB::_internal_tuple_data_sidecar_idx() const {
  return tuple_data_sidecar_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransmitDataRequestPB::tuple_data_sidecar_idx() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataRequestPB.tuple_data_sidecar_idx)
  return _internal_tuple_data_sidecar_idx();
}
inline void TransmitDataRequestPB::_internal_set_tuple_data_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  tuple_data_sidecar_idx_ = value;
}
inline void TransmitDataRequestPB::set_tuple_data_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tuple_data_sidecar_idx(value);
  // @@protoc_insertion_point(field_set:impala.TransmitDataRequestPB.tuple_data_sidecar_idx)
}

// -------------------------------------------------------------------

// TransmitDataResponsePB

// optional .impala.StatusPB status = 1;
inline bool TransmitDataResponsePB::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool TransmitDataResponsePB::has_status() const {
  return _internal_has_status();
}
inline const ::impala::StatusPB& TransmitDataResponsePB::_internal_status() const {
  const ::impala::StatusPB* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::StatusPB&>(
      ::impala::_StatusPB_default_instance_);
}
inline const ::impala::StatusPB& TransmitDataResponsePB::status() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataResponsePB.status)
  return _internal_status();
}
inline void TransmitDataResponsePB::unsafe_arena_set_allocated_status(
    ::impala::StatusPB* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.TransmitDataResponsePB.status)
}
inline ::impala::StatusPB* TransmitDataResponsePB::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::StatusPB* TransmitDataResponsePB::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:impala.TransmitDataResponsePB.status)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::impala::StatusPB* TransmitDataResponsePB::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::StatusPB>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::impala::StatusPB* TransmitDataResponsePB::mutable_status() {
  // @@protoc_insertion_point(field_mutable:impala.TransmitDataResponsePB.status)
  return _internal_mutable_status();
}
inline void TransmitDataResponsePB::set_allocated_status(::impala::StatusPB* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:impala.TransmitDataResponsePB.status)
}

// optional int64 receiver_latency_ns = 2;
inline bool TransmitDataResponsePB::_internal_has_receiver_latency_ns() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransmitDataResponsePB::has_receiver_latency_ns() const {
  return _internal_has_receiver_latency_ns();
}
inline void TransmitDataResponsePB::clear_receiver_latency_ns() {
  receiver_latency_ns_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransmitDataResponsePB::_internal_receiver_latency_ns() const {
  return receiver_latency_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransmitDataResponsePB::receiver_latency_ns() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataResponsePB.receiver_latency_ns)
  return _internal_receiver_latency_ns();
}
inline void TransmitDataResponsePB::_internal_set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  receiver_latency_ns_ = value;
}
inline void TransmitDataResponsePB::set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_receiver_latency_ns(value);
  // @@protoc_insertion_point(field_set:impala.TransmitDataResponsePB.receiver_latency_ns)
}

// -------------------------------------------------------------------

// EndDataStreamRequestPB

// optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
inline bool EndDataStreamRequestPB::_internal_has_dest_fragment_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dest_fragment_instance_id_ != nullptr);
  return value;
}
inline bool EndDataStreamRequestPB::has_dest_fragment_instance_id() const {
  return _internal_has_dest_fragment_instance_id();
}
inline const ::impala::UniqueIdPB& EndDataStreamRequestPB::_internal_dest_fragment_instance_id() const {
  const ::impala::UniqueIdPB* p = dest_fragment_instance_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::UniqueIdPB&>(
      ::impala::_UniqueIdPB_default_instance_);
}
inline const ::impala::UniqueIdPB& EndDataStreamRequestPB::dest_fragment_instance_id() const {
  // @@protoc_insertion_point(field_get:impala.EndDataStreamRequestPB.dest_fragment_instance_id)
  return _internal_dest_fragment_instance_id();
}
inline void EndDataStreamRequestPB::unsafe_arena_set_allocated_dest_fragment_instance_id(
    ::impala::UniqueIdPB* dest_fragment_instance_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_fragment_instance_id_);
  }
  dest_fragment_instance_id_ = dest_fragment_instance_id;
  if (dest_fragment_instance_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.EndDataStreamRequestPB.dest_fragment_instance_id)
}
inline ::impala::UniqueIdPB* EndDataStreamRequestPB::release_dest_fragment_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = dest_fragment_instance_id_;
  dest_fragment_instance_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::UniqueIdPB* EndDataStreamRequestPB::unsafe_arena_release_dest_fragment_instance_id() {
  // @@protoc_insertion_point(field_release:impala.EndDataStreamRequestPB.dest_fragment_instance_id)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = dest_fragment_instance_id_;
  dest_fragment_instance_id_ = nullptr;
  return temp;
}
inline ::impala::UniqueIdPB* EndDataStreamRequestPB::_internal_mutable_dest_fragment_instance_id() {
  _has_bits_[0] |= 0x00000001u;
  if (dest_fragment_instance_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::UniqueIdPB>(GetArena());
    dest_fragment_instance_id_ = p;
  }
  return dest_fragment_instance_id_;
}
inline ::impala::UniqueIdPB* EndDataStreamRequestPB::mutable_dest_fragment_instance_id() {
  // @@protoc_insertion_point(field_mutable:impala.EndDataStreamRequestPB.dest_fragment_instance_id)
  return _internal_mutable_dest_fragment_instance_id();
}
inline void EndDataStreamRequestPB::set_allocated_dest_fragment_instance_id(::impala::UniqueIdPB* dest_fragment_instance_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_fragment_instance_id_);
  }
  if (dest_fragment_instance_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_fragment_instance_id)->GetArena();
    if (message_arena != submessage_arena) {
      dest_fragment_instance_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_fragment_instance_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dest_fragment_instance_id_ = dest_fragment_instance_id;
  // @@protoc_insertion_point(field_set_allocated:impala.EndDataStreamRequestPB.dest_fragment_instance_id)
}

// optional int32 sender_id = 2;
inline bool EndDataStreamRequestPB::_internal_has_sender_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EndDataStreamRequestPB::has_sender_id() const {
  return _internal_has_sender_id();
}
inline void EndDataStreamRequestPB::clear_sender_id() {
  sender_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndDataStreamRequestPB::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndDataStreamRequestPB::sender_id() const {
  // @@protoc_insertion_point(field_get:impala.EndDataStreamRequestPB.sender_id)
  return _internal_sender_id();
}
inline void EndDataStreamRequestPB::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  sender_id_ = value;
}
inline void EndDataStreamRequestPB::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:impala.EndDataStreamRequestPB.sender_id)
}

// optional int32 dest_node_id = 3;
inline bool EndDataStreamRequestPB::_internal_has_dest_node_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EndDataStreamRequestPB::has_dest_node_id() const {
  return _internal_has_dest_node_id();
}
inline void EndDataStreamRequestPB::clear_dest_node_id() {
  dest_node_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndDataStreamRequestPB::_internal_dest_node_id() const {
  return dest_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndDataStreamRequestPB::dest_node_id() const {
  // @@protoc_insertion_point(field_get:impala.EndDataStreamRequestPB.dest_node_id)
  return _internal_dest_node_id();
}
inline void EndDataStreamRequestPB::_internal_set_dest_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  dest_node_id_ = value;
}
inline void EndDataStreamRequestPB::set_dest_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dest_node_id(value);
  // @@protoc_insertion_point(field_set:impala.EndDataStreamRequestPB.dest_node_id)
}

// -------------------------------------------------------------------

// EndDataStreamResponsePB

// optional .impala.StatusPB status = 1;
inline bool EndDataStreamResponsePB::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool EndDataStreamResponsePB::has_status() const {
  return _internal_has_status();
}
inline const ::impala::StatusPB& EndDataStreamResponsePB::_internal_status() const {
  const ::impala::StatusPB* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::StatusPB&>(
      ::impala::_StatusPB_default_instance_);
}
inline const ::impala::StatusPB& EndDataStreamResponsePB::status() const {
  // @@protoc_insertion_point(field_get:impala.EndDataStreamResponsePB.status)
  return _internal_status();
}
inline void EndDataStreamResponsePB::unsafe_arena_set_allocated_status(
    ::impala::StatusPB* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.EndDataStreamResponsePB.status)
}
inline ::impala::StatusPB* EndDataStreamResponsePB::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::StatusPB* EndDataStreamResponsePB::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:impala.EndDataStreamResponsePB.status)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::impala::StatusPB* EndDataStreamResponsePB::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::StatusPB>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::impala::StatusPB* EndDataStreamResponsePB::mutable_status() {
  // @@protoc_insertion_point(field_mutable:impala.EndDataStreamResponsePB.status)
  return _internal_mutable_status();
}
inline void EndDataStreamResponsePB::set_allocated_status(::impala::StatusPB* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:impala.EndDataStreamResponsePB.status)
}

// optional int64 receiver_latency_ns = 2;
inline bool EndDataStreamResponsePB::_internal_has_receiver_latency_ns() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EndDataStreamResponsePB::has_receiver_latency_ns() const {
  return _internal_has_receiver_latency_ns();
}
inline void EndDataStreamResponsePB::clear_receiver_latency_ns() {
  receiver_latency_ns_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EndDataStreamResponsePB::_internal_receiver_latency_ns() const {
  return receiver_latency_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EndDataStreamResponsePB::receiver_latency_ns() const {
  // @@protoc_insertion_point(field_get:impala.EndDataStreamResponsePB.receiver_latency_ns)
  return _internal_receiver_latency_ns();
}
inline void EndDataStreamResponsePB::_internal_set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  receiver_latency_ns_ = value;
}
inline void EndDataStreamResponsePB::set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_receiver_latency_ns(value);
  // @@protoc_insertion_point(field_set:impala.EndDataStreamResponsePB.receiver_latency_ns)
}

// -------------------------------------------------------------------

// BloomFilterPB

// optional int32 log_bufferpool_space = 1;
inline bool BloomFilterPB::_internal_has_log_bufferpool_space() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BloomFilterPB::has_log_bufferpool_space() const {
  return _internal_has_log_bufferpool_space();
}
inline void BloomFilterPB::clear_log_bufferpool_space() {
  log_bufferpool_space_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BloomFilterPB::_internal_log_bufferpool_space() const {
  return log_bufferpool_space_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BloomFilterPB::log_bufferpool_space() const {
  // @@protoc_insertion_point(field_get:impala.BloomFilterPB.log_bufferpool_space)
  return _internal_log_bufferpool_space();
}
inline void BloomFilterPB::_internal_set_log_bufferpool_space(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  log_bufferpool_space_ = value;
}
inline void BloomFilterPB::set_log_bufferpool_space(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_log_bufferpool_space(value);
  // @@protoc_insertion_point(field_set:impala.BloomFilterPB.log_bufferpool_space)
}

// optional bool always_true = 2;
inline bool BloomFilterPB::_internal_has_always_true() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BloomFilterPB::has_always_true() const {
  return _internal_has_always_true();
}
inline void BloomFilterPB::clear_always_true() {
  always_true_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BloomFilterPB::_internal_always_true() const {
  return always_true_;
}
inline bool BloomFilterPB::always_true() const {
  // @@protoc_insertion_point(field_get:impala.BloomFilterPB.always_true)
  return _internal_always_true();
}
inline void BloomFilterPB::_internal_set_always_true(bool value) {
  _has_bits_[0] |= 0x00000002u;
  always_true_ = value;
}
inline void BloomFilterPB::set_always_true(bool value) {
  _internal_set_always_true(value);
  // @@protoc_insertion_point(field_set:impala.BloomFilterPB.always_true)
}

// optional bool always_false = 3;
inline bool BloomFilterPB::_internal_has_always_false() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BloomFilterPB::has_always_false() const {
  return _internal_has_always_false();
}
inline void BloomFilterPB::clear_always_false() {
  always_false_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool BloomFilterPB::_internal_always_false() const {
  return always_false_;
}
inline bool BloomFilterPB::always_false() const {
  // @@protoc_insertion_point(field_get:impala.BloomFilterPB.always_false)
  return _internal_always_false();
}
inline void BloomFilterPB::_internal_set_always_false(bool value) {
  _has_bits_[0] |= 0x00000004u;
  always_false_ = value;
}
inline void BloomFilterPB::set_always_false(bool value) {
  _internal_set_always_false(value);
  // @@protoc_insertion_point(field_set:impala.BloomFilterPB.always_false)
}

// optional int32 directory_sidecar_idx = 4;
inline bool BloomFilterPB::_internal_has_directory_sidecar_idx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BloomFilterPB::has_directory_sidecar_idx() const {
  return _internal_has_directory_sidecar_idx();
}
inline void BloomFilterPB::clear_directory_sidecar_idx() {
  directory_sidecar_idx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BloomFilterPB::_internal_directory_sidecar_idx() const {
  return directory_sidecar_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BloomFilterPB::directory_sidecar_idx() const {
  // @@protoc_insertion_point(field_get:impala.BloomFilterPB.directory_sidecar_idx)
  return _internal_directory_sidecar_idx();
}
inline void BloomFilterPB::_internal_set_directory_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  directory_sidecar_idx_ = value;
}
inline void BloomFilterPB::set_directory_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_directory_sidecar_idx(value);
  // @@protoc_insertion_point(field_set:impala.BloomFilterPB.directory_sidecar_idx)
}

// -------------------------------------------------------------------

// MinMaxFilterPB

// optional bool always_true = 1;
inline bool MinMaxFilterPB::_internal_has_always_true() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MinMaxFilterPB::has_always_true() const {
  return _internal_has_always_true();
}
inline void MinMaxFilterPB::clear_always_true() {
  always_true_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MinMaxFilterPB::_internal_always_true() const {
  return always_true_;
}
inline bool MinMaxFilterPB::always_true() const {
  // @@protoc_insertion_point(field_get:impala.MinMaxFilterPB.always_true)
  return _internal_always_true();
}
inline void MinMaxFilterPB::_internal_set_always_true(bool value) {
  _has_bits_[0] |= 0x00000004u;
  always_true_ = value;
}
inline void MinMaxFilterPB::set_always_true(bool value) {
  _internal_set_always_true(value);
  // @@protoc_insertion_point(field_set:impala.MinMaxFilterPB.always_true)
}

// optional bool always_false = 2;
inline bool MinMaxFilterPB::_internal_has_always_false() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MinMaxFilterPB::has_always_false() const {
  return _internal_has_always_false();
}
inline void MinMaxFilterPB::clear_always_false() {
  always_false_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MinMaxFilterPB::_internal_always_false() const {
  return always_false_;
}
inline bool MinMaxFilterPB::always_false() const {
  // @@protoc_insertion_point(field_get:impala.MinMaxFilterPB.always_false)
  return _internal_always_false();
}
inline void MinMaxFilterPB::_internal_set_always_false(bool value) {
  _has_bits_[0] |= 0x00000008u;
  always_false_ = value;
}
inline void MinMaxFilterPB::set_always_false(bool value) {
  _internal_set_always_false(value);
  // @@protoc_insertion_point(field_set:impala.MinMaxFilterPB.always_false)
}

// optional .impala.ColumnValuePB min = 3;
inline bool MinMaxFilterPB::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || min_ != nullptr);
  return value;
}
inline bool MinMaxFilterPB::has_min() const {
  return _internal_has_min();
}
inline const ::impala::ColumnValuePB& MinMaxFilterPB::_internal_min() const {
  const ::impala::ColumnValuePB* p = min_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::ColumnValuePB&>(
      ::impala::_ColumnValuePB_default_instance_);
}
inline const ::impala::ColumnValuePB& MinMaxFilterPB::min() const {
  // @@protoc_insertion_point(field_get:impala.MinMaxFilterPB.min)
  return _internal_min();
}
inline void MinMaxFilterPB::unsafe_arena_set_allocated_min(
    ::impala::ColumnValuePB* min) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_);
  }
  min_ = min;
  if (min) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.MinMaxFilterPB.min)
}
inline ::impala::ColumnValuePB* MinMaxFilterPB::release_min() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::ColumnValuePB* temp = min_;
  min_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::ColumnValuePB* MinMaxFilterPB::unsafe_arena_release_min() {
  // @@protoc_insertion_point(field_release:impala.MinMaxFilterPB.min)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::ColumnValuePB* temp = min_;
  min_ = nullptr;
  return temp;
}
inline ::impala::ColumnValuePB* MinMaxFilterPB::_internal_mutable_min() {
  _has_bits_[0] |= 0x00000001u;
  if (min_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::ColumnValuePB>(GetArena());
    min_ = p;
  }
  return min_;
}
inline ::impala::ColumnValuePB* MinMaxFilterPB::mutable_min() {
  // @@protoc_insertion_point(field_mutable:impala.MinMaxFilterPB.min)
  return _internal_mutable_min();
}
inline void MinMaxFilterPB::set_allocated_min(::impala::ColumnValuePB* min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_);
  }
  if (min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min)->GetArena();
    if (message_arena != submessage_arena) {
      min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  min_ = min;
  // @@protoc_insertion_point(field_set_allocated:impala.MinMaxFilterPB.min)
}

// optional .impala.ColumnValuePB max = 4;
inline bool MinMaxFilterPB::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || max_ != nullptr);
  return value;
}
inline bool MinMaxFilterPB::has_max() const {
  return _internal_has_max();
}
inline const ::impala::ColumnValuePB& MinMaxFilterPB::_internal_max() const {
  const ::impala::ColumnValuePB* p = max_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::ColumnValuePB&>(
      ::impala::_ColumnValuePB_default_instance_);
}
inline const ::impala::ColumnValuePB& MinMaxFilterPB::max() const {
  // @@protoc_insertion_point(field_get:impala.MinMaxFilterPB.max)
  return _internal_max();
}
inline void MinMaxFilterPB::unsafe_arena_set_allocated_max(
    ::impala::ColumnValuePB* max) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_);
  }
  max_ = max;
  if (max) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.MinMaxFilterPB.max)
}
inline ::impala::ColumnValuePB* MinMaxFilterPB::release_max() {
  _has_bits_[0] &= ~0x00000002u;
  ::impala::ColumnValuePB* temp = max_;
  max_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::ColumnValuePB* MinMaxFilterPB::unsafe_arena_release_max() {
  // @@protoc_insertion_point(field_release:impala.MinMaxFilterPB.max)
  _has_bits_[0] &= ~0x00000002u;
  ::impala::ColumnValuePB* temp = max_;
  max_ = nullptr;
  return temp;
}
inline ::impala::ColumnValuePB* MinMaxFilterPB::_internal_mutable_max() {
  _has_bits_[0] |= 0x00000002u;
  if (max_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::ColumnValuePB>(GetArena());
    max_ = p;
  }
  return max_;
}
inline ::impala::ColumnValuePB* MinMaxFilterPB::mutable_max() {
  // @@protoc_insertion_point(field_mutable:impala.MinMaxFilterPB.max)
  return _internal_mutable_max();
}
inline void MinMaxFilterPB::set_allocated_max(::impala::ColumnValuePB* max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_);
  }
  if (max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max)->GetArena();
    if (message_arena != submessage_arena) {
      max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  max_ = max;
  // @@protoc_insertion_point(field_set_allocated:impala.MinMaxFilterPB.max)
}

// -------------------------------------------------------------------

// InListFilterPB

// optional bool always_true = 1;
inline bool InListFilterPB::_internal_has_always_true() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InListFilterPB::has_always_true() const {
  return _internal_has_always_true();
}
inline void InListFilterPB::clear_always_true() {
  always_true_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool InListFilterPB::_internal_always_true() const {
  return always_true_;
}
inline bool InListFilterPB::always_true() const {
  // @@protoc_insertion_point(field_get:impala.InListFilterPB.always_true)
  return _internal_always_true();
}
inline void InListFilterPB::_internal_set_always_true(bool value) {
  _has_bits_[0] |= 0x00000001u;
  always_true_ = value;
}
inline void InListFilterPB::set_always_true(bool value) {
  _internal_set_always_true(value);
  // @@protoc_insertion_point(field_set:impala.InListFilterPB.always_true)
}

// optional bool contains_null = 2;
inline bool InListFilterPB::_internal_has_contains_null() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InListFilterPB::has_contains_null() const {
  return _internal_has_contains_null();
}
inline void InListFilterPB::clear_contains_null() {
  contains_null_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool InListFilterPB::_internal_contains_null() const {
  return contains_null_;
}
inline bool InListFilterPB::contains_null() const {
  // @@protoc_insertion_point(field_get:impala.InListFilterPB.contains_null)
  return _internal_contains_null();
}
inline void InListFilterPB::_internal_set_contains_null(bool value) {
  _has_bits_[0] |= 0x00000002u;
  contains_null_ = value;
}
inline void InListFilterPB::set_contains_null(bool value) {
  _internal_set_contains_null(value);
  // @@protoc_insertion_point(field_set:impala.InListFilterPB.contains_null)
}

// repeated .impala.ColumnValuePB value = 3;
inline int InListFilterPB::_internal_value_size() const {
  return value_.size();
}
inline int InListFilterPB::value_size() const {
  return _internal_value_size();
}
inline ::impala::ColumnValuePB* InListFilterPB::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:impala.InListFilterPB.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ColumnValuePB >*
InListFilterPB::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:impala.InListFilterPB.value)
  return &value_;
}
inline const ::impala::ColumnValuePB& InListFilterPB::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::impala::ColumnValuePB& InListFilterPB::value(int index) const {
  // @@protoc_insertion_point(field_get:impala.InListFilterPB.value)
  return _internal_value(index);
}
inline ::impala::ColumnValuePB* InListFilterPB::_internal_add_value() {
  return value_.Add();
}
inline ::impala::ColumnValuePB* InListFilterPB::add_value() {
  // @@protoc_insertion_point(field_add:impala.InListFilterPB.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ColumnValuePB >&
InListFilterPB::value() const {
  // @@protoc_insertion_point(field_list:impala.InListFilterPB.value)
  return value_;
}

// -------------------------------------------------------------------

// UpdateFilterParamsPB

// optional int32 filter_id = 1;
inline bool UpdateFilterParamsPB::_internal_has_filter_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UpdateFilterParamsPB::has_filter_id() const {
  return _internal_has_filter_id();
}
inline void UpdateFilterParamsPB::clear_filter_id() {
  filter_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateFilterParamsPB::_internal_filter_id() const {
  return filter_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateFilterParamsPB::filter_id() const {
  // @@protoc_insertion_point(field_get:impala.UpdateFilterParamsPB.filter_id)
  return _internal_filter_id();
}
inline void UpdateFilterParamsPB::_internal_set_filter_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  filter_id_ = value;
}
inline void UpdateFilterParamsPB::set_filter_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filter_id(value);
  // @@protoc_insertion_point(field_set:impala.UpdateFilterParamsPB.filter_id)
}

// optional .impala.UniqueIdPB query_id = 2;
inline bool UpdateFilterParamsPB::_internal_has_query_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || query_id_ != nullptr);
  return value;
}
inline bool UpdateFilterParamsPB::has_query_id() const {
  return _internal_has_query_id();
}
inline const ::impala::UniqueIdPB& UpdateFilterParamsPB::_internal_query_id() const {
  const ::impala::UniqueIdPB* p = query_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::UniqueIdPB&>(
      ::impala::_UniqueIdPB_default_instance_);
}
inline const ::impala::UniqueIdPB& UpdateFilterParamsPB::query_id() const {
  // @@protoc_insertion_point(field_get:impala.UpdateFilterParamsPB.query_id)
  return _internal_query_id();
}
inline void UpdateFilterParamsPB::unsafe_arena_set_allocated_query_id(
    ::impala::UniqueIdPB* query_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_id_);
  }
  query_id_ = query_id;
  if (query_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.UpdateFilterParamsPB.query_id)
}
inline ::impala::UniqueIdPB* UpdateFilterParamsPB::release_query_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = query_id_;
  query_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::UniqueIdPB* UpdateFilterParamsPB::unsafe_arena_release_query_id() {
  // @@protoc_insertion_point(field_release:impala.UpdateFilterParamsPB.query_id)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = query_id_;
  query_id_ = nullptr;
  return temp;
}
inline ::impala::UniqueIdPB* UpdateFilterParamsPB::_internal_mutable_query_id() {
  _has_bits_[0] |= 0x00000001u;
  if (query_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::UniqueIdPB>(GetArena());
    query_id_ = p;
  }
  return query_id_;
}
inline ::impala::UniqueIdPB* UpdateFilterParamsPB::mutable_query_id() {
  // @@protoc_insertion_point(field_mutable:impala.UpdateFilterParamsPB.query_id)
  return _internal_mutable_query_id();
}
inline void UpdateFilterParamsPB::set_allocated_query_id(::impala::UniqueIdPB* query_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_id_);
  }
  if (query_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_id)->GetArena();
    if (message_arena != submessage_arena) {
      query_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  query_id_ = query_id;
  // @@protoc_insertion_point(field_set_allocated:impala.UpdateFilterParamsPB.query_id)
}

// optional .impala.BloomFilterPB bloom_filter = 3;
inline bool UpdateFilterParamsPB::_internal_has_bloom_filter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bloom_filter_ != nullptr);
  return value;
}
inline bool UpdateFilterParamsPB::has_bloom_filter() const {
  return _internal_has_bloom_filter();
}
inline void UpdateFilterParamsPB::clear_bloom_filter() {
  if (bloom_filter_ != nullptr) bloom_filter_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::impala::BloomFilterPB& UpdateFilterParamsPB::_internal_bloom_filter() const {
  const ::impala::BloomFilterPB* p = bloom_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::BloomFilterPB&>(
      ::impala::_BloomFilterPB_default_instance_);
}
inline const ::impala::BloomFilterPB& UpdateFilterParamsPB::bloom_filter() const {
  // @@protoc_insertion_point(field_get:impala.UpdateFilterParamsPB.bloom_filter)
  return _internal_bloom_filter();
}
inline void UpdateFilterParamsPB::unsafe_arena_set_allocated_bloom_filter(
    ::impala::BloomFilterPB* bloom_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloom_filter_);
  }
  bloom_filter_ = bloom_filter;
  if (bloom_filter) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.UpdateFilterParamsPB.bloom_filter)
}
inline ::impala::BloomFilterPB* UpdateFilterParamsPB::release_bloom_filter() {
  _has_bits_[0] &= ~0x00000002u;
  ::impala::BloomFilterPB* temp = bloom_filter_;
  bloom_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::BloomFilterPB* UpdateFilterParamsPB::unsafe_arena_release_bloom_filter() {
  // @@protoc_insertion_point(field_release:impala.UpdateFilterParamsPB.bloom_filter)
  _has_bits_[0] &= ~0x00000002u;
  ::impala::BloomFilterPB* temp = bloom_filter_;
  bloom_filter_ = nullptr;
  return temp;
}
inline ::impala::BloomFilterPB* UpdateFilterParamsPB::_internal_mutable_bloom_filter() {
  _has_bits_[0] |= 0x00000002u;
  if (bloom_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::BloomFilterPB>(GetArena());
    bloom_filter_ = p;
  }
  return bloom_filter_;
}
inline ::impala::BloomFilterPB* UpdateFilterParamsPB::mutable_bloom_filter() {
  // @@protoc_insertion_point(field_mutable:impala.UpdateFilterParamsPB.bloom_filter)
  return _internal_mutable_bloom_filter();
}
inline void UpdateFilterParamsPB::set_allocated_bloom_filter(::impala::BloomFilterPB* bloom_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bloom_filter_;
  }
  if (bloom_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bloom_filter);
    if (message_arena != submessage_arena) {
      bloom_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloom_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bloom_filter_ = bloom_filter;
  // @@protoc_insertion_point(field_set_allocated:impala.UpdateFilterParamsPB.bloom_filter)
}

// optional .impala.MinMaxFilterPB min_max_filter = 4;
inline bool UpdateFilterParamsPB::_internal_has_min_max_filter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || min_max_filter_ != nullptr);
  return value;
}
inline bool UpdateFilterParamsPB::has_min_max_filter() const {
  return _internal_has_min_max_filter();
}
inline void UpdateFilterParamsPB::clear_min_max_filter() {
  if (min_max_filter_ != nullptr) min_max_filter_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::impala::MinMaxFilterPB& UpdateFilterParamsPB::_internal_min_max_filter() const {
  const ::impala::MinMaxFilterPB* p = min_max_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::MinMaxFilterPB&>(
      ::impala::_MinMaxFilterPB_default_instance_);
}
inline const ::impala::MinMaxFilterPB& UpdateFilterParamsPB::min_max_filter() const {
  // @@protoc_insertion_point(field_get:impala.UpdateFilterParamsPB.min_max_filter)
  return _internal_min_max_filter();
}
inline void UpdateFilterParamsPB::unsafe_arena_set_allocated_min_max_filter(
    ::impala::MinMaxFilterPB* min_max_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_max_filter_);
  }
  min_max_filter_ = min_max_filter;
  if (min_max_filter) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.UpdateFilterParamsPB.min_max_filter)
}
inline ::impala::MinMaxFilterPB* UpdateFilterParamsPB::release_min_max_filter() {
  _has_bits_[0] &= ~0x00000004u;
  ::impala::MinMaxFilterPB* temp = min_max_filter_;
  min_max_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::MinMaxFilterPB* UpdateFilterParamsPB::unsafe_arena_release_min_max_filter() {
  // @@protoc_insertion_point(field_release:impala.UpdateFilterParamsPB.min_max_filter)
  _has_bits_[0] &= ~0x00000004u;
  ::impala::MinMaxFilterPB* temp = min_max_filter_;
  min_max_filter_ = nullptr;
  return temp;
}
inline ::impala::MinMaxFilterPB* UpdateFilterParamsPB::_internal_mutable_min_max_filter() {
  _has_bits_[0] |= 0x00000004u;
  if (min_max_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::MinMaxFilterPB>(GetArena());
    min_max_filter_ = p;
  }
  return min_max_filter_;
}
inline ::impala::MinMaxFilterPB* UpdateFilterParamsPB::mutable_min_max_filter() {
  // @@protoc_insertion_point(field_mutable:impala.UpdateFilterParamsPB.min_max_filter)
  return _internal_mutable_min_max_filter();
}
inline void UpdateFilterParamsPB::set_allocated_min_max_filter(::impala::MinMaxFilterPB* min_max_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete min_max_filter_;
  }
  if (min_max_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(min_max_filter);
    if (message_arena != submessage_arena) {
      min_max_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_max_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  min_max_filter_ = min_max_filter;
  // @@protoc_insertion_point(field_set_allocated:impala.UpdateFilterParamsPB.min_max_filter)
}

// optional .impala.InListFilterPB in_list_filter = 5;
inline bool UpdateFilterParamsPB::_internal_has_in_list_filter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || in_list_filter_ != nullptr);
  return value;
}
inline bool UpdateFilterParamsPB::has_in_list_filter() const {
  return _internal_has_in_list_filter();
}
inline void UpdateFilterParamsPB::clear_in_list_filter() {
  if (in_list_filter_ != nullptr) in_list_filter_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::impala::InListFilterPB& UpdateFilterParamsPB::_internal_in_list_filter() const {
  const ::impala::InListFilterPB* p = in_list_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::InListFilterPB&>(
      ::impala::_InListFilterPB_default_instance_);
}
inline const ::impala::InListFilterPB& UpdateFilterParamsPB::in_list_filter() const {
  // @@protoc_insertion_point(field_get:impala.UpdateFilterParamsPB.in_list_filter)
  return _internal_in_list_filter();
}
inline void UpdateFilterParamsPB::unsafe_arena_set_allocated_in_list_filter(
    ::impala::InListFilterPB* in_list_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_list_filter_);
  }
  in_list_filter_ = in_list_filter;
  if (in_list_filter) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.UpdateFilterParamsPB.in_list_filter)
}
inline ::impala::InListFilterPB* UpdateFilterParamsPB::release_in_list_filter() {
  _has_bits_[0] &= ~0x00000008u;
  ::impala::InListFilterPB* temp = in_list_filter_;
  in_list_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::InListFilterPB* UpdateFilterParamsPB::unsafe_arena_release_in_list_filter() {
  // @@protoc_insertion_point(field_release:impala.UpdateFilterParamsPB.in_list_filter)
  _has_bits_[0] &= ~0x00000008u;
  ::impala::InListFilterPB* temp = in_list_filter_;
  in_list_filter_ = nullptr;
  return temp;
}
inline ::impala::InListFilterPB* UpdateFilterParamsPB::_internal_mutable_in_list_filter() {
  _has_bits_[0] |= 0x00000008u;
  if (in_list_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::InListFilterPB>(GetArena());
    in_list_filter_ = p;
  }
  return in_list_filter_;
}
inline ::impala::InListFilterPB* UpdateFilterParamsPB::mutable_in_list_filter() {
  // @@protoc_insertion_point(field_mutable:impala.UpdateFilterParamsPB.in_list_filter)
  return _internal_mutable_in_list_filter();
}
inline void UpdateFilterParamsPB::set_allocated_in_list_filter(::impala::InListFilterPB* in_list_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete in_list_filter_;
  }
  if (in_list_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(in_list_filter);
    if (message_arena != submessage_arena) {
      in_list_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_list_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  in_list_filter_ = in_list_filter;
  // @@protoc_insertion_point(field_set_allocated:impala.UpdateFilterParamsPB.in_list_filter)
}

// -------------------------------------------------------------------

// UpdateFilterResultPB

// optional .impala.StatusPB status = 1;
inline bool UpdateFilterResultPB::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool UpdateFilterResultPB::has_status() const {
  return _internal_has_status();
}
inline const ::impala::StatusPB& UpdateFilterResultPB::_internal_status() const {
  const ::impala::StatusPB* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::StatusPB&>(
      ::impala::_StatusPB_default_instance_);
}
inline const ::impala::StatusPB& UpdateFilterResultPB::status() const {
  // @@protoc_insertion_point(field_get:impala.UpdateFilterResultPB.status)
  return _internal_status();
}
inline void UpdateFilterResultPB::unsafe_arena_set_allocated_status(
    ::impala::StatusPB* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.UpdateFilterResultPB.status)
}
inline ::impala::StatusPB* UpdateFilterResultPB::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::StatusPB* UpdateFilterResultPB::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:impala.UpdateFilterResultPB.status)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::impala::StatusPB* UpdateFilterResultPB::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::StatusPB>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::impala::StatusPB* UpdateFilterResultPB::mutable_status() {
  // @@protoc_insertion_point(field_mutable:impala.UpdateFilterResultPB.status)
  return _internal_mutable_status();
}
inline void UpdateFilterResultPB::set_allocated_status(::impala::StatusPB* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:impala.UpdateFilterResultPB.status)
}

// optional int64 receiver_latency_ns = 2;
inline bool UpdateFilterResultPB::_internal_has_receiver_latency_ns() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UpdateFilterResultPB::has_receiver_latency_ns() const {
  return _internal_has_receiver_latency_ns();
}
inline void UpdateFilterResultPB::clear_receiver_latency_ns() {
  receiver_latency_ns_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateFilterResultPB::_internal_receiver_latency_ns() const {
  return receiver_latency_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateFilterResultPB::receiver_latency_ns() const {
  // @@protoc_insertion_point(field_get:impala.UpdateFilterResultPB.receiver_latency_ns)
  return _internal_receiver_latency_ns();
}
inline void UpdateFilterResultPB::_internal_set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  receiver_latency_ns_ = value;
}
inline void UpdateFilterResultPB::set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_receiver_latency_ns(value);
  // @@protoc_insertion_point(field_set:impala.UpdateFilterResultPB.receiver_latency_ns)
}

// -------------------------------------------------------------------

// PublishFilterParamsPB

// optional int32 filter_id = 1;
inline bool PublishFilterParamsPB::_internal_has_filter_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PublishFilterParamsPB::has_filter_id() const {
  return _internal_has_filter_id();
}
inline void PublishFilterParamsPB::clear_filter_id() {
  filter_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PublishFilterParamsPB::_internal_filter_id() const {
  return filter_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PublishFilterParamsPB::filter_id() const {
  // @@protoc_insertion_point(field_get:impala.PublishFilterParamsPB.filter_id)
  return _internal_filter_id();
}
inline void PublishFilterParamsPB::_internal_set_filter_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  filter_id_ = value;
}
inline void PublishFilterParamsPB::set_filter_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_filter_id(value);
  // @@protoc_insertion_point(field_set:impala.PublishFilterParamsPB.filter_id)
}

// optional .impala.UniqueIdPB dst_query_id = 2;
inline bool PublishFilterParamsPB::_internal_has_dst_query_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dst_query_id_ != nullptr);
  return value;
}
inline bool PublishFilterParamsPB::has_dst_query_id() const {
  return _internal_has_dst_query_id();
}
inline const ::impala::UniqueIdPB& PublishFilterParamsPB::_internal_dst_query_id() const {
  const ::impala::UniqueIdPB* p = dst_query_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::UniqueIdPB&>(
      ::impala::_UniqueIdPB_default_instance_);
}
inline const ::impala::UniqueIdPB& PublishFilterParamsPB::dst_query_id() const {
  // @@protoc_insertion_point(field_get:impala.PublishFilterParamsPB.dst_query_id)
  return _internal_dst_query_id();
}
inline void PublishFilterParamsPB::unsafe_arena_set_allocated_dst_query_id(
    ::impala::UniqueIdPB* dst_query_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_query_id_);
  }
  dst_query_id_ = dst_query_id;
  if (dst_query_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.PublishFilterParamsPB.dst_query_id)
}
inline ::impala::UniqueIdPB* PublishFilterParamsPB::release_dst_query_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = dst_query_id_;
  dst_query_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::UniqueIdPB* PublishFilterParamsPB::unsafe_arena_release_dst_query_id() {
  // @@protoc_insertion_point(field_release:impala.PublishFilterParamsPB.dst_query_id)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = dst_query_id_;
  dst_query_id_ = nullptr;
  return temp;
}
inline ::impala::UniqueIdPB* PublishFilterParamsPB::_internal_mutable_dst_query_id() {
  _has_bits_[0] |= 0x00000001u;
  if (dst_query_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::UniqueIdPB>(GetArena());
    dst_query_id_ = p;
  }
  return dst_query_id_;
}
inline ::impala::UniqueIdPB* PublishFilterParamsPB::mutable_dst_query_id() {
  // @@protoc_insertion_point(field_mutable:impala.PublishFilterParamsPB.dst_query_id)
  return _internal_mutable_dst_query_id();
}
inline void PublishFilterParamsPB::set_allocated_dst_query_id(::impala::UniqueIdPB* dst_query_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_query_id_);
  }
  if (dst_query_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_query_id)->GetArena();
    if (message_arena != submessage_arena) {
      dst_query_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_query_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dst_query_id_ = dst_query_id;
  // @@protoc_insertion_point(field_set_allocated:impala.PublishFilterParamsPB.dst_query_id)
}

// optional .impala.BloomFilterPB bloom_filter = 3;
inline bool PublishFilterParamsPB::_internal_has_bloom_filter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bloom_filter_ != nullptr);
  return value;
}
inline bool PublishFilterParamsPB::has_bloom_filter() const {
  return _internal_has_bloom_filter();
}
inline void PublishFilterParamsPB::clear_bloom_filter() {
  if (bloom_filter_ != nullptr) bloom_filter_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::impala::BloomFilterPB& PublishFilterParamsPB::_internal_bloom_filter() const {
  const ::impala::BloomFilterPB* p = bloom_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::BloomFilterPB&>(
      ::impala::_BloomFilterPB_default_instance_);
}
inline const ::impala::BloomFilterPB& PublishFilterParamsPB::bloom_filter() const {
  // @@protoc_insertion_point(field_get:impala.PublishFilterParamsPB.bloom_filter)
  return _internal_bloom_filter();
}
inline void PublishFilterParamsPB::unsafe_arena_set_allocated_bloom_filter(
    ::impala::BloomFilterPB* bloom_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloom_filter_);
  }
  bloom_filter_ = bloom_filter;
  if (bloom_filter) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.PublishFilterParamsPB.bloom_filter)
}
inline ::impala::BloomFilterPB* PublishFilterParamsPB::release_bloom_filter() {
  _has_bits_[0] &= ~0x00000002u;
  ::impala::BloomFilterPB* temp = bloom_filter_;
  bloom_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::BloomFilterPB* PublishFilterParamsPB::unsafe_arena_release_bloom_filter() {
  // @@protoc_insertion_point(field_release:impala.PublishFilterParamsPB.bloom_filter)
  _has_bits_[0] &= ~0x00000002u;
  ::impala::BloomFilterPB* temp = bloom_filter_;
  bloom_filter_ = nullptr;
  return temp;
}
inline ::impala::BloomFilterPB* PublishFilterParamsPB::_internal_mutable_bloom_filter() {
  _has_bits_[0] |= 0x00000002u;
  if (bloom_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::BloomFilterPB>(GetArena());
    bloom_filter_ = p;
  }
  return bloom_filter_;
}
inline ::impala::BloomFilterPB* PublishFilterParamsPB::mutable_bloom_filter() {
  // @@protoc_insertion_point(field_mutable:impala.PublishFilterParamsPB.bloom_filter)
  return _internal_mutable_bloom_filter();
}
inline void PublishFilterParamsPB::set_allocated_bloom_filter(::impala::BloomFilterPB* bloom_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bloom_filter_;
  }
  if (bloom_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bloom_filter);
    if (message_arena != submessage_arena) {
      bloom_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloom_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bloom_filter_ = bloom_filter;
  // @@protoc_insertion_point(field_set_allocated:impala.PublishFilterParamsPB.bloom_filter)
}

// optional .impala.MinMaxFilterPB min_max_filter = 4;
inline bool PublishFilterParamsPB::_internal_has_min_max_filter() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || min_max_filter_ != nullptr);
  return value;
}
inline bool PublishFilterParamsPB::has_min_max_filter() const {
  return _internal_has_min_max_filter();
}
inline void PublishFilterParamsPB::clear_min_max_filter() {
  if (min_max_filter_ != nullptr) min_max_filter_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::impala::MinMaxFilterPB& PublishFilterParamsPB::_internal_min_max_filter() const {
  const ::impala::MinMaxFilterPB* p = min_max_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::MinMaxFilterPB&>(
      ::impala::_MinMaxFilterPB_default_instance_);
}
inline const ::impala::MinMaxFilterPB& PublishFilterParamsPB::min_max_filter() const {
  // @@protoc_insertion_point(field_get:impala.PublishFilterParamsPB.min_max_filter)
  return _internal_min_max_filter();
}
inline void PublishFilterParamsPB::unsafe_arena_set_allocated_min_max_filter(
    ::impala::MinMaxFilterPB* min_max_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_max_filter_);
  }
  min_max_filter_ = min_max_filter;
  if (min_max_filter) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.PublishFilterParamsPB.min_max_filter)
}
inline ::impala::MinMaxFilterPB* PublishFilterParamsPB::release_min_max_filter() {
  _has_bits_[0] &= ~0x00000004u;
  ::impala::MinMaxFilterPB* temp = min_max_filter_;
  min_max_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::MinMaxFilterPB* PublishFilterParamsPB::unsafe_arena_release_min_max_filter() {
  // @@protoc_insertion_point(field_release:impala.PublishFilterParamsPB.min_max_filter)
  _has_bits_[0] &= ~0x00000004u;
  ::impala::MinMaxFilterPB* temp = min_max_filter_;
  min_max_filter_ = nullptr;
  return temp;
}
inline ::impala::MinMaxFilterPB* PublishFilterParamsPB::_internal_mutable_min_max_filter() {
  _has_bits_[0] |= 0x00000004u;
  if (min_max_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::MinMaxFilterPB>(GetArena());
    min_max_filter_ = p;
  }
  return min_max_filter_;
}
inline ::impala::MinMaxFilterPB* PublishFilterParamsPB::mutable_min_max_filter() {
  // @@protoc_insertion_point(field_mutable:impala.PublishFilterParamsPB.min_max_filter)
  return _internal_mutable_min_max_filter();
}
inline void PublishFilterParamsPB::set_allocated_min_max_filter(::impala::MinMaxFilterPB* min_max_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete min_max_filter_;
  }
  if (min_max_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(min_max_filter);
    if (message_arena != submessage_arena) {
      min_max_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_max_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  min_max_filter_ = min_max_filter;
  // @@protoc_insertion_point(field_set_allocated:impala.PublishFilterParamsPB.min_max_filter)
}

// optional .impala.InListFilterPB in_list_filter = 5;
inline bool PublishFilterParamsPB::_internal_has_in_list_filter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || in_list_filter_ != nullptr);
  return value;
}
inline bool PublishFilterParamsPB::has_in_list_filter() const {
  return _internal_has_in_list_filter();
}
inline void PublishFilterParamsPB::clear_in_list_filter() {
  if (in_list_filter_ != nullptr) in_list_filter_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::impala::InListFilterPB& PublishFilterParamsPB::_internal_in_list_filter() const {
  const ::impala::InListFilterPB* p = in_list_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::InListFilterPB&>(
      ::impala::_InListFilterPB_default_instance_);
}
inline const ::impala::InListFilterPB& PublishFilterParamsPB::in_list_filter() const {
  // @@protoc_insertion_point(field_get:impala.PublishFilterParamsPB.in_list_filter)
  return _internal_in_list_filter();
}
inline void PublishFilterParamsPB::unsafe_arena_set_allocated_in_list_filter(
    ::impala::InListFilterPB* in_list_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_list_filter_);
  }
  in_list_filter_ = in_list_filter;
  if (in_list_filter) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.PublishFilterParamsPB.in_list_filter)
}
inline ::impala::InListFilterPB* PublishFilterParamsPB::release_in_list_filter() {
  _has_bits_[0] &= ~0x00000008u;
  ::impala::InListFilterPB* temp = in_list_filter_;
  in_list_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::InListFilterPB* PublishFilterParamsPB::unsafe_arena_release_in_list_filter() {
  // @@protoc_insertion_point(field_release:impala.PublishFilterParamsPB.in_list_filter)
  _has_bits_[0] &= ~0x00000008u;
  ::impala::InListFilterPB* temp = in_list_filter_;
  in_list_filter_ = nullptr;
  return temp;
}
inline ::impala::InListFilterPB* PublishFilterParamsPB::_internal_mutable_in_list_filter() {
  _has_bits_[0] |= 0x00000008u;
  if (in_list_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::InListFilterPB>(GetArena());
    in_list_filter_ = p;
  }
  return in_list_filter_;
}
inline ::impala::InListFilterPB* PublishFilterParamsPB::mutable_in_list_filter() {
  // @@protoc_insertion_point(field_mutable:impala.PublishFilterParamsPB.in_list_filter)
  return _internal_mutable_in_list_filter();
}
inline void PublishFilterParamsPB::set_allocated_in_list_filter(::impala::InListFilterPB* in_list_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete in_list_filter_;
  }
  if (in_list_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(in_list_filter);
    if (message_arena != submessage_arena) {
      in_list_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_list_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  in_list_filter_ = in_list_filter;
  // @@protoc_insertion_point(field_set_allocated:impala.PublishFilterParamsPB.in_list_filter)
}

// -------------------------------------------------------------------

// PublishFilterResultPB

// optional .impala.StatusPB status = 1;
inline bool PublishFilterResultPB::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool PublishFilterResultPB::has_status() const {
  return _internal_has_status();
}
inline const ::impala::StatusPB& PublishFilterResultPB::_internal_status() const {
  const ::impala::StatusPB* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::StatusPB&>(
      ::impala::_StatusPB_default_instance_);
}
inline const ::impala::StatusPB& PublishFilterResultPB::status() const {
  // @@protoc_insertion_point(field_get:impala.PublishFilterResultPB.status)
  return _internal_status();
}
inline void PublishFilterResultPB::unsafe_arena_set_allocated_status(
    ::impala::StatusPB* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.PublishFilterResultPB.status)
}
inline ::impala::StatusPB* PublishFilterResultPB::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::StatusPB* PublishFilterResultPB::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:impala.PublishFilterResultPB.status)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::impala::StatusPB* PublishFilterResultPB::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::StatusPB>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::impala::StatusPB* PublishFilterResultPB::mutable_status() {
  // @@protoc_insertion_point(field_mutable:impala.PublishFilterResultPB.status)
  return _internal_mutable_status();
}
inline void PublishFilterResultPB::set_allocated_status(::impala::StatusPB* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:impala.PublishFilterResultPB.status)
}

// optional int64 receiver_latency_ns = 2;
inline bool PublishFilterResultPB::_internal_has_receiver_latency_ns() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishFilterResultPB::has_receiver_latency_ns() const {
  return _internal_has_receiver_latency_ns();
}
inline void PublishFilterResultPB::clear_receiver_latency_ns() {
  receiver_latency_ns_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PublishFilterResultPB::_internal_receiver_latency_ns() const {
  return receiver_latency_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PublishFilterResultPB::receiver_latency_ns() const {
  // @@protoc_insertion_point(field_get:impala.PublishFilterResultPB.receiver_latency_ns)
  return _internal_receiver_latency_ns();
}
inline void PublishFilterResultPB::_internal_set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  receiver_latency_ns_ = value;
}
inline void PublishFilterResultPB::set_receiver_latency_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_receiver_latency_ns(value);
  // @@protoc_insertion_point(field_set:impala.PublishFilterResultPB.receiver_latency_ns)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace impala

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_5fstream_5fservice_2eproto
