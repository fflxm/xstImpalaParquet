/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Partitions_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {

int _kTPartitionTypeValues[] = {
  TPartitionType::UNPARTITIONED,
  TPartitionType::RANDOM,
  TPartitionType::HASH_PARTITIONED,
  TPartitionType::RANGE_PARTITIONED,
  TPartitionType::KUDU
};
const char* _kTPartitionTypeNames[] = {
  "UNPARTITIONED",
  "RANDOM",
  "HASH_PARTITIONED",
  "RANGE_PARTITIONED",
  "KUDU"
};
const std::map<int, const char*> _TPartitionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTPartitionTypeValues, _kTPartitionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TPartitionType::type& val) {
  std::map<int, const char*>::const_iterator it = _TPartitionType_VALUES_TO_NAMES.find(val);
  if (it != _TPartitionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TDataPartition::~TDataPartition() throw() {
}


void TDataPartition::__set_type(const TPartitionType::type val) {
  this->type = val;
}

void TDataPartition::__set_partition_exprs(const std::vector< ::impala::TExpr> & val) {
  this->partition_exprs = val;
__isset.partition_exprs = true;
}
std::ostream& operator<<(std::ostream& out, const TDataPartition& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDataPartition &a, TDataPartition &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.partition_exprs, b.partition_exprs);
  swap(a.__isset, b.__isset);
}

TDataPartition::TDataPartition(const TDataPartition& other7) {
  type = other7.type;
  partition_exprs = other7.partition_exprs;
  __isset = other7.__isset;
}
TDataPartition::TDataPartition( TDataPartition&& other8) {
  type = std::move(other8.type);
  partition_exprs = std::move(other8.partition_exprs);
  __isset = std::move(other8.__isset);
}
TDataPartition& TDataPartition::operator=(const TDataPartition& other9) {
  type = other9.type;
  partition_exprs = other9.partition_exprs;
  __isset = other9.__isset;
  return *this;
}
TDataPartition& TDataPartition::operator=(TDataPartition&& other10) {
  type = std::move(other10.type);
  partition_exprs = std::move(other10.partition_exprs);
  __isset = std::move(other10.__isset);
  return *this;
}
void TDataPartition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDataPartition(";
  out << "type=" << to_string(type);
  out << ", " << "partition_exprs="; (__isset.partition_exprs ? (out << to_string(partition_exprs)) : (out << "<null>"));
  out << ")";
}

} // namespace
