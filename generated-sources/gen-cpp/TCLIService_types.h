/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TCLIService_TYPES_H
#define TCLIService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace apache { namespace hive { namespace service { namespace cli { namespace thrift {

struct TProtocolVersion {
  enum type {
    HIVE_CLI_SERVICE_PROTOCOL_V1 = 0,
    HIVE_CLI_SERVICE_PROTOCOL_V2 = 1,
    HIVE_CLI_SERVICE_PROTOCOL_V3 = 2,
    HIVE_CLI_SERVICE_PROTOCOL_V4 = 3,
    HIVE_CLI_SERVICE_PROTOCOL_V5 = 4,
    HIVE_CLI_SERVICE_PROTOCOL_V6 = 5,
    HIVE_CLI_SERVICE_PROTOCOL_V7 = 6
  };
};

extern const std::map<int, const char*> _TProtocolVersion_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TProtocolVersion::type& val);

struct TTypeId {
  enum type {
    BOOLEAN_TYPE = 0,
    TINYINT_TYPE = 1,
    SMALLINT_TYPE = 2,
    INT_TYPE = 3,
    BIGINT_TYPE = 4,
    FLOAT_TYPE = 5,
    DOUBLE_TYPE = 6,
    STRING_TYPE = 7,
    TIMESTAMP_TYPE = 8,
    BINARY_TYPE = 9,
    ARRAY_TYPE = 10,
    MAP_TYPE = 11,
    STRUCT_TYPE = 12,
    UNION_TYPE = 13,
    USER_DEFINED_TYPE = 14,
    DECIMAL_TYPE = 15,
    NULL_TYPE = 16,
    DATE_TYPE = 17,
    VARCHAR_TYPE = 18,
    CHAR_TYPE = 19
  };
};

extern const std::map<int, const char*> _TTypeId_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TTypeId::type& val);

struct TStatusCode {
  enum type {
    SUCCESS_STATUS = 0,
    SUCCESS_WITH_INFO_STATUS = 1,
    STILL_EXECUTING_STATUS = 2,
    ERROR_STATUS = 3,
    INVALID_HANDLE_STATUS = 4
  };
};

extern const std::map<int, const char*> _TStatusCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TStatusCode::type& val);

struct TOperationState {
  enum type {
    INITIALIZED_STATE = 0,
    RUNNING_STATE = 1,
    FINISHED_STATE = 2,
    CANCELED_STATE = 3,
    CLOSED_STATE = 4,
    ERROR_STATE = 5,
    UKNOWN_STATE = 6,
    PENDING_STATE = 7
  };
};

extern const std::map<int, const char*> _TOperationState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TOperationState::type& val);

struct TOperationType {
  enum type {
    EXECUTE_STATEMENT = 0,
    GET_TYPE_INFO = 1,
    GET_CATALOGS = 2,
    GET_SCHEMAS = 3,
    GET_TABLES = 4,
    GET_TABLE_TYPES = 5,
    GET_COLUMNS = 6,
    GET_FUNCTIONS = 7,
    UNKNOWN = 8
  };
};

extern const std::map<int, const char*> _TOperationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TOperationType::type& val);

struct TGetInfoType {
  enum type {
    CLI_MAX_DRIVER_CONNECTIONS = 0,
    CLI_MAX_CONCURRENT_ACTIVITIES = 1,
    CLI_DATA_SOURCE_NAME = 2,
    CLI_FETCH_DIRECTION = 8,
    CLI_SERVER_NAME = 13,
    CLI_SEARCH_PATTERN_ESCAPE = 14,
    CLI_DBMS_NAME = 17,
    CLI_DBMS_VER = 18,
    CLI_ACCESSIBLE_TABLES = 19,
    CLI_ACCESSIBLE_PROCEDURES = 20,
    CLI_CURSOR_COMMIT_BEHAVIOR = 23,
    CLI_DATA_SOURCE_READ_ONLY = 25,
    CLI_DEFAULT_TXN_ISOLATION = 26,
    CLI_IDENTIFIER_CASE = 28,
    CLI_IDENTIFIER_QUOTE_CHAR = 29,
    CLI_MAX_COLUMN_NAME_LEN = 30,
    CLI_MAX_CURSOR_NAME_LEN = 31,
    CLI_MAX_SCHEMA_NAME_LEN = 32,
    CLI_MAX_CATALOG_NAME_LEN = 34,
    CLI_MAX_TABLE_NAME_LEN = 35,
    CLI_SCROLL_CONCURRENCY = 43,
    CLI_TXN_CAPABLE = 46,
    CLI_USER_NAME = 47,
    CLI_TXN_ISOLATION_OPTION = 72,
    CLI_INTEGRITY = 73,
    CLI_GETDATA_EXTENSIONS = 81,
    CLI_NULL_COLLATION = 85,
    CLI_ALTER_TABLE = 86,
    CLI_ORDER_BY_COLUMNS_IN_SELECT = 90,
    CLI_SPECIAL_CHARACTERS = 94,
    CLI_MAX_COLUMNS_IN_GROUP_BY = 97,
    CLI_MAX_COLUMNS_IN_INDEX = 98,
    CLI_MAX_COLUMNS_IN_ORDER_BY = 99,
    CLI_MAX_COLUMNS_IN_SELECT = 100,
    CLI_MAX_COLUMNS_IN_TABLE = 101,
    CLI_MAX_INDEX_SIZE = 102,
    CLI_MAX_ROW_SIZE = 104,
    CLI_MAX_STATEMENT_LEN = 105,
    CLI_MAX_TABLES_IN_SELECT = 106,
    CLI_MAX_USER_NAME_LEN = 107,
    CLI_OJ_CAPABILITIES = 115,
    CLI_XOPEN_CLI_YEAR = 10000,
    CLI_CURSOR_SENSITIVITY = 10001,
    CLI_DESCRIBE_PARAMETER = 10002,
    CLI_CATALOG_NAME = 10003,
    CLI_COLLATION_SEQ = 10004,
    CLI_MAX_IDENTIFIER_LEN = 10005
  };
};

extern const std::map<int, const char*> _TGetInfoType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TGetInfoType::type& val);

struct TFetchOrientation {
  enum type {
    FETCH_NEXT = 0,
    FETCH_PRIOR = 1,
    FETCH_RELATIVE = 2,
    FETCH_ABSOLUTE = 3,
    FETCH_FIRST = 4,
    FETCH_LAST = 5
  };
};

extern const std::map<int, const char*> _TFetchOrientation_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TFetchOrientation::type& val);

typedef int32_t TTypeEntryPtr;

typedef std::string TIdentifier;

typedef std::string TPattern;

typedef std::string TPatternOrIdentifier;

class TTypeQualifierValue;

class TTypeQualifiers;

class TPrimitiveTypeEntry;

class TArrayTypeEntry;

class TMapTypeEntry;

class TStructTypeEntry;

class TUnionTypeEntry;

class TUserDefinedTypeEntry;

class TTypeEntry;

class TTypeDesc;

class TColumnDesc;

class TTableSchema;

class TBoolValue;

class TByteValue;

class TI16Value;

class TI32Value;

class TI64Value;

class TDoubleValue;

class TStringValue;

class TColumnValue;

class TRow;

class TBoolColumn;

class TByteColumn;

class TI16Column;

class TI32Column;

class TI64Column;

class TDoubleColumn;

class TStringColumn;

class TBinaryColumn;

class TColumn;

class TRowSet;

class TStatus;

class THandleIdentifier;

class TSessionHandle;

class TOperationHandle;

class TOpenSessionReq;

class TOpenSessionResp;

class TCloseSessionReq;

class TCloseSessionResp;

class TGetInfoValue;

class TGetInfoReq;

class TGetInfoResp;

class TExecuteStatementReq;

class TExecuteStatementResp;

class TGetTypeInfoReq;

class TGetTypeInfoResp;

class TGetCatalogsReq;

class TGetCatalogsResp;

class TGetSchemasReq;

class TGetSchemasResp;

class TGetTablesReq;

class TGetTablesResp;

class TGetTableTypesReq;

class TGetTableTypesResp;

class TGetColumnsReq;

class TGetColumnsResp;

class TGetFunctionsReq;

class TGetFunctionsResp;

class TGetPrimaryKeysReq;

class TGetPrimaryKeysResp;

class TGetCrossReferenceReq;

class TGetCrossReferenceResp;

class TGetOperationStatusReq;

class TGetOperationStatusResp;

class TCancelOperationReq;

class TCancelOperationResp;

class TCloseOperationReq;

class TCloseOperationResp;

class TGetResultSetMetadataReq;

class TGetResultSetMetadataResp;

class TFetchResultsReq;

class TFetchResultsResp;

class TGetDelegationTokenReq;

class TGetDelegationTokenResp;

class TCancelDelegationTokenReq;

class TCancelDelegationTokenResp;

class TRenewDelegationTokenReq;

class TRenewDelegationTokenResp;

class TGetLogReq;

class TGetLogResp;

typedef struct _TTypeQualifierValue__isset {
  _TTypeQualifierValue__isset() : i32Value(false), stringValue(false) {}
  bool i32Value :1;
  bool stringValue :1;
} _TTypeQualifierValue__isset;

class TTypeQualifierValue {
 public:

  TTypeQualifierValue(const TTypeQualifierValue&);
  TTypeQualifierValue(TTypeQualifierValue&&);
  TTypeQualifierValue& operator=(const TTypeQualifierValue&);
  TTypeQualifierValue& operator=(TTypeQualifierValue&&);
  TTypeQualifierValue() : i32Value(0), stringValue() {
  }

  virtual ~TTypeQualifierValue() throw();
  int32_t i32Value;
  std::string stringValue;

  _TTypeQualifierValue__isset __isset;

  void __set_i32Value(const int32_t val);

  void __set_stringValue(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTypeQualifierValue &a, TTypeQualifierValue &b);

std::ostream& operator<<(std::ostream& out, const TTypeQualifierValue& obj);


class TTypeQualifiers {
 public:

  TTypeQualifiers(const TTypeQualifiers&);
  TTypeQualifiers(TTypeQualifiers&&);
  TTypeQualifiers& operator=(const TTypeQualifiers&);
  TTypeQualifiers& operator=(TTypeQualifiers&&);
  TTypeQualifiers() {
  }

  virtual ~TTypeQualifiers() throw();
  std::map<std::string, TTypeQualifierValue>  qualifiers;

  void __set_qualifiers(const std::map<std::string, TTypeQualifierValue> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTypeQualifiers &a, TTypeQualifiers &b);

std::ostream& operator<<(std::ostream& out, const TTypeQualifiers& obj);

typedef struct _TPrimitiveTypeEntry__isset {
  _TPrimitiveTypeEntry__isset() : typeQualifiers(false) {}
  bool typeQualifiers :1;
} _TPrimitiveTypeEntry__isset;

class TPrimitiveTypeEntry {
 public:

  TPrimitiveTypeEntry(const TPrimitiveTypeEntry&);
  TPrimitiveTypeEntry(TPrimitiveTypeEntry&&);
  TPrimitiveTypeEntry& operator=(const TPrimitiveTypeEntry&);
  TPrimitiveTypeEntry& operator=(TPrimitiveTypeEntry&&);
  TPrimitiveTypeEntry() : type((TTypeId::type)0) {
  }

  virtual ~TPrimitiveTypeEntry() throw();
  TTypeId::type type;
  TTypeQualifiers typeQualifiers;

  _TPrimitiveTypeEntry__isset __isset;

  void __set_type(const TTypeId::type val);

  void __set_typeQualifiers(const TTypeQualifiers& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPrimitiveTypeEntry &a, TPrimitiveTypeEntry &b);

std::ostream& operator<<(std::ostream& out, const TPrimitiveTypeEntry& obj);


class TArrayTypeEntry {
 public:

  TArrayTypeEntry(const TArrayTypeEntry&);
  TArrayTypeEntry(TArrayTypeEntry&&);
  TArrayTypeEntry& operator=(const TArrayTypeEntry&);
  TArrayTypeEntry& operator=(TArrayTypeEntry&&);
  TArrayTypeEntry() : objectTypePtr(0) {
  }

  virtual ~TArrayTypeEntry() throw();
  TTypeEntryPtr objectTypePtr;

  void __set_objectTypePtr(const TTypeEntryPtr val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TArrayTypeEntry &a, TArrayTypeEntry &b);

std::ostream& operator<<(std::ostream& out, const TArrayTypeEntry& obj);


class TMapTypeEntry {
 public:

  TMapTypeEntry(const TMapTypeEntry&);
  TMapTypeEntry(TMapTypeEntry&&);
  TMapTypeEntry& operator=(const TMapTypeEntry&);
  TMapTypeEntry& operator=(TMapTypeEntry&&);
  TMapTypeEntry() : keyTypePtr(0), valueTypePtr(0) {
  }

  virtual ~TMapTypeEntry() throw();
  TTypeEntryPtr keyTypePtr;
  TTypeEntryPtr valueTypePtr;

  void __set_keyTypePtr(const TTypeEntryPtr val);

  void __set_valueTypePtr(const TTypeEntryPtr val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMapTypeEntry &a, TMapTypeEntry &b);

std::ostream& operator<<(std::ostream& out, const TMapTypeEntry& obj);


class TStructTypeEntry {
 public:

  TStructTypeEntry(const TStructTypeEntry&);
  TStructTypeEntry(TStructTypeEntry&&);
  TStructTypeEntry& operator=(const TStructTypeEntry&);
  TStructTypeEntry& operator=(TStructTypeEntry&&);
  TStructTypeEntry() {
  }

  virtual ~TStructTypeEntry() throw();
  std::map<std::string, TTypeEntryPtr>  nameToTypePtr;

  void __set_nameToTypePtr(const std::map<std::string, TTypeEntryPtr> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TStructTypeEntry &a, TStructTypeEntry &b);

std::ostream& operator<<(std::ostream& out, const TStructTypeEntry& obj);


class TUnionTypeEntry {
 public:

  TUnionTypeEntry(const TUnionTypeEntry&);
  TUnionTypeEntry(TUnionTypeEntry&&);
  TUnionTypeEntry& operator=(const TUnionTypeEntry&);
  TUnionTypeEntry& operator=(TUnionTypeEntry&&);
  TUnionTypeEntry() {
  }

  virtual ~TUnionTypeEntry() throw();
  std::map<std::string, TTypeEntryPtr>  nameToTypePtr;

  void __set_nameToTypePtr(const std::map<std::string, TTypeEntryPtr> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TUnionTypeEntry &a, TUnionTypeEntry &b);

std::ostream& operator<<(std::ostream& out, const TUnionTypeEntry& obj);


class TUserDefinedTypeEntry {
 public:

  TUserDefinedTypeEntry(const TUserDefinedTypeEntry&);
  TUserDefinedTypeEntry(TUserDefinedTypeEntry&&);
  TUserDefinedTypeEntry& operator=(const TUserDefinedTypeEntry&);
  TUserDefinedTypeEntry& operator=(TUserDefinedTypeEntry&&);
  TUserDefinedTypeEntry() : typeClassName() {
  }

  virtual ~TUserDefinedTypeEntry() throw();
  std::string typeClassName;

  void __set_typeClassName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TUserDefinedTypeEntry &a, TUserDefinedTypeEntry &b);

std::ostream& operator<<(std::ostream& out, const TUserDefinedTypeEntry& obj);

typedef struct _TTypeEntry__isset {
  _TTypeEntry__isset() : primitiveEntry(false), arrayEntry(false), mapEntry(false), structEntry(false), unionEntry(false), userDefinedTypeEntry(false) {}
  bool primitiveEntry :1;
  bool arrayEntry :1;
  bool mapEntry :1;
  bool structEntry :1;
  bool unionEntry :1;
  bool userDefinedTypeEntry :1;
} _TTypeEntry__isset;

class TTypeEntry {
 public:

  TTypeEntry(const TTypeEntry&);
  TTypeEntry(TTypeEntry&&);
  TTypeEntry& operator=(const TTypeEntry&);
  TTypeEntry& operator=(TTypeEntry&&);
  TTypeEntry() {
  }

  virtual ~TTypeEntry() throw();
  TPrimitiveTypeEntry primitiveEntry;
  TArrayTypeEntry arrayEntry;
  TMapTypeEntry mapEntry;
  TStructTypeEntry structEntry;
  TUnionTypeEntry unionEntry;
  TUserDefinedTypeEntry userDefinedTypeEntry;

  _TTypeEntry__isset __isset;

  void __set_primitiveEntry(const TPrimitiveTypeEntry& val);

  void __set_arrayEntry(const TArrayTypeEntry& val);

  void __set_mapEntry(const TMapTypeEntry& val);

  void __set_structEntry(const TStructTypeEntry& val);

  void __set_unionEntry(const TUnionTypeEntry& val);

  void __set_userDefinedTypeEntry(const TUserDefinedTypeEntry& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTypeEntry &a, TTypeEntry &b);

std::ostream& operator<<(std::ostream& out, const TTypeEntry& obj);


class TTypeDesc {
 public:

  TTypeDesc(const TTypeDesc&);
  TTypeDesc(TTypeDesc&&);
  TTypeDesc& operator=(const TTypeDesc&);
  TTypeDesc& operator=(TTypeDesc&&);
  TTypeDesc() {
  }

  virtual ~TTypeDesc() throw();
  std::vector<TTypeEntry>  types;

  void __set_types(const std::vector<TTypeEntry> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTypeDesc &a, TTypeDesc &b);

std::ostream& operator<<(std::ostream& out, const TTypeDesc& obj);

typedef struct _TColumnDesc__isset {
  _TColumnDesc__isset() : comment(false) {}
  bool comment :1;
} _TColumnDesc__isset;

class TColumnDesc {
 public:

  TColumnDesc(const TColumnDesc&);
  TColumnDesc(TColumnDesc&&);
  TColumnDesc& operator=(const TColumnDesc&);
  TColumnDesc& operator=(TColumnDesc&&);
  TColumnDesc() : columnName(), position(0), comment() {
  }

  virtual ~TColumnDesc() throw();
  std::string columnName;
  TTypeDesc typeDesc;
  int32_t position;
  std::string comment;

  _TColumnDesc__isset __isset;

  void __set_columnName(const std::string& val);

  void __set_typeDesc(const TTypeDesc& val);

  void __set_position(const int32_t val);

  void __set_comment(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnDesc &a, TColumnDesc &b);

std::ostream& operator<<(std::ostream& out, const TColumnDesc& obj);


class TTableSchema {
 public:

  TTableSchema(const TTableSchema&);
  TTableSchema(TTableSchema&&);
  TTableSchema& operator=(const TTableSchema&);
  TTableSchema& operator=(TTableSchema&&);
  TTableSchema() {
  }

  virtual ~TTableSchema() throw();
  std::vector<TColumnDesc>  columns;

  void __set_columns(const std::vector<TColumnDesc> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTableSchema &a, TTableSchema &b);

std::ostream& operator<<(std::ostream& out, const TTableSchema& obj);

typedef struct _TBoolValue__isset {
  _TBoolValue__isset() : value(false) {}
  bool value :1;
} _TBoolValue__isset;

class TBoolValue {
 public:

  TBoolValue(const TBoolValue&);
  TBoolValue(TBoolValue&&);
  TBoolValue& operator=(const TBoolValue&);
  TBoolValue& operator=(TBoolValue&&);
  TBoolValue() : value(0) {
  }

  virtual ~TBoolValue() throw();
  bool value;

  _TBoolValue__isset __isset;

  void __set_value(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TBoolValue &a, TBoolValue &b);

std::ostream& operator<<(std::ostream& out, const TBoolValue& obj);

typedef struct _TByteValue__isset {
  _TByteValue__isset() : value(false) {}
  bool value :1;
} _TByteValue__isset;

class TByteValue {
 public:

  TByteValue(const TByteValue&);
  TByteValue(TByteValue&&);
  TByteValue& operator=(const TByteValue&);
  TByteValue& operator=(TByteValue&&);
  TByteValue() : value(0) {
  }

  virtual ~TByteValue() throw();
  int8_t value;

  _TByteValue__isset __isset;

  void __set_value(const int8_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TByteValue &a, TByteValue &b);

std::ostream& operator<<(std::ostream& out, const TByteValue& obj);

typedef struct _TI16Value__isset {
  _TI16Value__isset() : value(false) {}
  bool value :1;
} _TI16Value__isset;

class TI16Value {
 public:

  TI16Value(const TI16Value&);
  TI16Value(TI16Value&&);
  TI16Value& operator=(const TI16Value&);
  TI16Value& operator=(TI16Value&&);
  TI16Value() : value(0) {
  }

  virtual ~TI16Value() throw();
  int16_t value;

  _TI16Value__isset __isset;

  void __set_value(const int16_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TI16Value &a, TI16Value &b);

std::ostream& operator<<(std::ostream& out, const TI16Value& obj);

typedef struct _TI32Value__isset {
  _TI32Value__isset() : value(false) {}
  bool value :1;
} _TI32Value__isset;

class TI32Value {
 public:

  TI32Value(const TI32Value&);
  TI32Value(TI32Value&&);
  TI32Value& operator=(const TI32Value&);
  TI32Value& operator=(TI32Value&&);
  TI32Value() : value(0) {
  }

  virtual ~TI32Value() throw();
  int32_t value;

  _TI32Value__isset __isset;

  void __set_value(const int32_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TI32Value &a, TI32Value &b);

std::ostream& operator<<(std::ostream& out, const TI32Value& obj);

typedef struct _TI64Value__isset {
  _TI64Value__isset() : value(false) {}
  bool value :1;
} _TI64Value__isset;

class TI64Value {
 public:

  TI64Value(const TI64Value&);
  TI64Value(TI64Value&&);
  TI64Value& operator=(const TI64Value&);
  TI64Value& operator=(TI64Value&&);
  TI64Value() : value(0) {
  }

  virtual ~TI64Value() throw();
  int64_t value;

  _TI64Value__isset __isset;

  void __set_value(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TI64Value &a, TI64Value &b);

std::ostream& operator<<(std::ostream& out, const TI64Value& obj);

typedef struct _TDoubleValue__isset {
  _TDoubleValue__isset() : value(false) {}
  bool value :1;
} _TDoubleValue__isset;

class TDoubleValue {
 public:

  TDoubleValue(const TDoubleValue&);
  TDoubleValue(TDoubleValue&&);
  TDoubleValue& operator=(const TDoubleValue&);
  TDoubleValue& operator=(TDoubleValue&&);
  TDoubleValue() : value(0) {
  }

  virtual ~TDoubleValue() throw();
  double value;

  _TDoubleValue__isset __isset;

  void __set_value(const double val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDoubleValue &a, TDoubleValue &b);

std::ostream& operator<<(std::ostream& out, const TDoubleValue& obj);

typedef struct _TStringValue__isset {
  _TStringValue__isset() : value(false) {}
  bool value :1;
} _TStringValue__isset;

class TStringValue {
 public:

  TStringValue(const TStringValue&);
  TStringValue(TStringValue&&);
  TStringValue& operator=(const TStringValue&);
  TStringValue& operator=(TStringValue&&);
  TStringValue() : value() {
  }

  virtual ~TStringValue() throw();
  std::string value;

  _TStringValue__isset __isset;

  void __set_value(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TStringValue &a, TStringValue &b);

std::ostream& operator<<(std::ostream& out, const TStringValue& obj);

typedef struct _TColumnValue__isset {
  _TColumnValue__isset() : boolVal(false), byteVal(false), i16Val(false), i32Val(false), i64Val(false), doubleVal(false), stringVal(false) {}
  bool boolVal :1;
  bool byteVal :1;
  bool i16Val :1;
  bool i32Val :1;
  bool i64Val :1;
  bool doubleVal :1;
  bool stringVal :1;
} _TColumnValue__isset;

class TColumnValue {
 public:

  TColumnValue(const TColumnValue&);
  TColumnValue(TColumnValue&&);
  TColumnValue& operator=(const TColumnValue&);
  TColumnValue& operator=(TColumnValue&&);
  TColumnValue() {
  }

  virtual ~TColumnValue() throw();
  TBoolValue boolVal;
  TByteValue byteVal;
  TI16Value i16Val;
  TI32Value i32Val;
  TI64Value i64Val;
  TDoubleValue doubleVal;
  TStringValue stringVal;

  _TColumnValue__isset __isset;

  void __set_boolVal(const TBoolValue& val);

  void __set_byteVal(const TByteValue& val);

  void __set_i16Val(const TI16Value& val);

  void __set_i32Val(const TI32Value& val);

  void __set_i64Val(const TI64Value& val);

  void __set_doubleVal(const TDoubleValue& val);

  void __set_stringVal(const TStringValue& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnValue &a, TColumnValue &b);

std::ostream& operator<<(std::ostream& out, const TColumnValue& obj);


class TRow {
 public:

  TRow(const TRow&);
  TRow(TRow&&);
  TRow& operator=(const TRow&);
  TRow& operator=(TRow&&);
  TRow() {
  }

  virtual ~TRow() throw();
  std::vector<TColumnValue>  colVals;

  void __set_colVals(const std::vector<TColumnValue> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRow &a, TRow &b);

std::ostream& operator<<(std::ostream& out, const TRow& obj);


class TBoolColumn {
 public:

  TBoolColumn(const TBoolColumn&);
  TBoolColumn(TBoolColumn&&);
  TBoolColumn& operator=(const TBoolColumn&);
  TBoolColumn& operator=(TBoolColumn&&);
  TBoolColumn() : nulls() {
  }

  virtual ~TBoolColumn() throw();
  std::vector<bool>  values;
  std::string nulls;

  void __set_values(const std::vector<bool> & val);

  void __set_nulls(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TBoolColumn &a, TBoolColumn &b);

std::ostream& operator<<(std::ostream& out, const TBoolColumn& obj);


class TByteColumn {
 public:

  TByteColumn(const TByteColumn&);
  TByteColumn(TByteColumn&&);
  TByteColumn& operator=(const TByteColumn&);
  TByteColumn& operator=(TByteColumn&&);
  TByteColumn() : nulls() {
  }

  virtual ~TByteColumn() throw();
  std::vector<int8_t>  values;
  std::string nulls;

  void __set_values(const std::vector<int8_t> & val);

  void __set_nulls(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TByteColumn &a, TByteColumn &b);

std::ostream& operator<<(std::ostream& out, const TByteColumn& obj);


class TI16Column {
 public:

  TI16Column(const TI16Column&);
  TI16Column(TI16Column&&);
  TI16Column& operator=(const TI16Column&);
  TI16Column& operator=(TI16Column&&);
  TI16Column() : nulls() {
  }

  virtual ~TI16Column() throw();
  std::vector<int16_t>  values;
  std::string nulls;

  void __set_values(const std::vector<int16_t> & val);

  void __set_nulls(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TI16Column &a, TI16Column &b);

std::ostream& operator<<(std::ostream& out, const TI16Column& obj);


class TI32Column {
 public:

  TI32Column(const TI32Column&);
  TI32Column(TI32Column&&);
  TI32Column& operator=(const TI32Column&);
  TI32Column& operator=(TI32Column&&);
  TI32Column() : nulls() {
  }

  virtual ~TI32Column() throw();
  std::vector<int32_t>  values;
  std::string nulls;

  void __set_values(const std::vector<int32_t> & val);

  void __set_nulls(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TI32Column &a, TI32Column &b);

std::ostream& operator<<(std::ostream& out, const TI32Column& obj);


class TI64Column {
 public:

  TI64Column(const TI64Column&);
  TI64Column(TI64Column&&);
  TI64Column& operator=(const TI64Column&);
  TI64Column& operator=(TI64Column&&);
  TI64Column() : nulls() {
  }

  virtual ~TI64Column() throw();
  std::vector<int64_t>  values;
  std::string nulls;

  void __set_values(const std::vector<int64_t> & val);

  void __set_nulls(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TI64Column &a, TI64Column &b);

std::ostream& operator<<(std::ostream& out, const TI64Column& obj);


class TDoubleColumn {
 public:

  TDoubleColumn(const TDoubleColumn&);
  TDoubleColumn(TDoubleColumn&&);
  TDoubleColumn& operator=(const TDoubleColumn&);
  TDoubleColumn& operator=(TDoubleColumn&&);
  TDoubleColumn() : nulls() {
  }

  virtual ~TDoubleColumn() throw();
  std::vector<double>  values;
  std::string nulls;

  void __set_values(const std::vector<double> & val);

  void __set_nulls(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDoubleColumn &a, TDoubleColumn &b);

std::ostream& operator<<(std::ostream& out, const TDoubleColumn& obj);


class TStringColumn {
 public:

  TStringColumn(const TStringColumn&);
  TStringColumn(TStringColumn&&);
  TStringColumn& operator=(const TStringColumn&);
  TStringColumn& operator=(TStringColumn&&);
  TStringColumn() : nulls() {
  }

  virtual ~TStringColumn() throw();
  std::vector<std::string>  values;
  std::string nulls;

  void __set_values(const std::vector<std::string> & val);

  void __set_nulls(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TStringColumn &a, TStringColumn &b);

std::ostream& operator<<(std::ostream& out, const TStringColumn& obj);


class TBinaryColumn {
 public:

  TBinaryColumn(const TBinaryColumn&);
  TBinaryColumn(TBinaryColumn&&);
  TBinaryColumn& operator=(const TBinaryColumn&);
  TBinaryColumn& operator=(TBinaryColumn&&);
  TBinaryColumn() : nulls() {
  }

  virtual ~TBinaryColumn() throw();
  std::vector<std::string>  values;
  std::string nulls;

  void __set_values(const std::vector<std::string> & val);

  void __set_nulls(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TBinaryColumn &a, TBinaryColumn &b);

std::ostream& operator<<(std::ostream& out, const TBinaryColumn& obj);

typedef struct _TColumn__isset {
  _TColumn__isset() : boolVal(false), byteVal(false), i16Val(false), i32Val(false), i64Val(false), doubleVal(false), stringVal(false), binaryVal(false) {}
  bool boolVal :1;
  bool byteVal :1;
  bool i16Val :1;
  bool i32Val :1;
  bool i64Val :1;
  bool doubleVal :1;
  bool stringVal :1;
  bool binaryVal :1;
} _TColumn__isset;

class TColumn {
 public:

  TColumn(const TColumn&);
  TColumn(TColumn&&);
  TColumn& operator=(const TColumn&);
  TColumn& operator=(TColumn&&);
  TColumn() {
  }

  virtual ~TColumn() throw();
  TBoolColumn boolVal;
  TByteColumn byteVal;
  TI16Column i16Val;
  TI32Column i32Val;
  TI64Column i64Val;
  TDoubleColumn doubleVal;
  TStringColumn stringVal;
  TBinaryColumn binaryVal;

  _TColumn__isset __isset;

  void __set_boolVal(const TBoolColumn& val);

  void __set_byteVal(const TByteColumn& val);

  void __set_i16Val(const TI16Column& val);

  void __set_i32Val(const TI32Column& val);

  void __set_i64Val(const TI64Column& val);

  void __set_doubleVal(const TDoubleColumn& val);

  void __set_stringVal(const TStringColumn& val);

  void __set_binaryVal(const TBinaryColumn& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumn &a, TColumn &b);

std::ostream& operator<<(std::ostream& out, const TColumn& obj);

typedef struct _TRowSet__isset {
  _TRowSet__isset() : columns(false) {}
  bool columns :1;
} _TRowSet__isset;

class TRowSet {
 public:

  TRowSet(const TRowSet&);
  TRowSet(TRowSet&&);
  TRowSet& operator=(const TRowSet&);
  TRowSet& operator=(TRowSet&&);
  TRowSet() : startRowOffset(0) {
  }

  virtual ~TRowSet() throw();
  int64_t startRowOffset;
  std::vector<TRow>  rows;
  std::vector<TColumn>  columns;

  _TRowSet__isset __isset;

  void __set_startRowOffset(const int64_t val);

  void __set_rows(const std::vector<TRow> & val);

  void __set_columns(const std::vector<TColumn> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRowSet &a, TRowSet &b);

std::ostream& operator<<(std::ostream& out, const TRowSet& obj);

typedef struct _TStatus__isset {
  _TStatus__isset() : infoMessages(false), sqlState(false), errorCode(false), errorMessage(false) {}
  bool infoMessages :1;
  bool sqlState :1;
  bool errorCode :1;
  bool errorMessage :1;
} _TStatus__isset;

class TStatus {
 public:

  TStatus(const TStatus&);
  TStatus(TStatus&&);
  TStatus& operator=(const TStatus&);
  TStatus& operator=(TStatus&&);
  TStatus() : statusCode((TStatusCode::type)0), sqlState(), errorCode(0), errorMessage() {
  }

  virtual ~TStatus() throw();
  TStatusCode::type statusCode;
  std::vector<std::string>  infoMessages;
  std::string sqlState;
  int32_t errorCode;
  std::string errorMessage;

  _TStatus__isset __isset;

  void __set_statusCode(const TStatusCode::type val);

  void __set_infoMessages(const std::vector<std::string> & val);

  void __set_sqlState(const std::string& val);

  void __set_errorCode(const int32_t val);

  void __set_errorMessage(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TStatus &a, TStatus &b);

std::ostream& operator<<(std::ostream& out, const TStatus& obj);


class THandleIdentifier {
 public:

  THandleIdentifier(const THandleIdentifier&);
  THandleIdentifier(THandleIdentifier&&);
  THandleIdentifier& operator=(const THandleIdentifier&);
  THandleIdentifier& operator=(THandleIdentifier&&);
  THandleIdentifier() : guid(), secret() {
  }

  virtual ~THandleIdentifier() throw();
  std::string guid;
  std::string secret;

  void __set_guid(const std::string& val);

  void __set_secret(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(THandleIdentifier &a, THandleIdentifier &b);

std::ostream& operator<<(std::ostream& out, const THandleIdentifier& obj);


class TSessionHandle {
 public:

  TSessionHandle(const TSessionHandle&);
  TSessionHandle(TSessionHandle&&);
  TSessionHandle& operator=(const TSessionHandle&);
  TSessionHandle& operator=(TSessionHandle&&);
  TSessionHandle() {
  }

  virtual ~TSessionHandle() throw();
  THandleIdentifier sessionId;

  void __set_sessionId(const THandleIdentifier& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSessionHandle &a, TSessionHandle &b);

std::ostream& operator<<(std::ostream& out, const TSessionHandle& obj);

typedef struct _TOperationHandle__isset {
  _TOperationHandle__isset() : modifiedRowCount(false) {}
  bool modifiedRowCount :1;
} _TOperationHandle__isset;

class TOperationHandle {
 public:

  TOperationHandle(const TOperationHandle&);
  TOperationHandle(TOperationHandle&&);
  TOperationHandle& operator=(const TOperationHandle&);
  TOperationHandle& operator=(TOperationHandle&&);
  TOperationHandle() : operationType((TOperationType::type)0), hasResultSet(0), modifiedRowCount(0) {
  }

  virtual ~TOperationHandle() throw();
  THandleIdentifier operationId;
  TOperationType::type operationType;
  bool hasResultSet;
  double modifiedRowCount;

  _TOperationHandle__isset __isset;

  void __set_operationId(const THandleIdentifier& val);

  void __set_operationType(const TOperationType::type val);

  void __set_hasResultSet(const bool val);

  void __set_modifiedRowCount(const double val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TOperationHandle &a, TOperationHandle &b);

std::ostream& operator<<(std::ostream& out, const TOperationHandle& obj);

typedef struct _TOpenSessionReq__isset {
  _TOpenSessionReq__isset() : username(false), password(false), configuration(false) {}
  bool username :1;
  bool password :1;
  bool configuration :1;
} _TOpenSessionReq__isset;

class TOpenSessionReq {
 public:

  TOpenSessionReq(const TOpenSessionReq&);
  TOpenSessionReq(TOpenSessionReq&&);
  TOpenSessionReq& operator=(const TOpenSessionReq&);
  TOpenSessionReq& operator=(TOpenSessionReq&&);
  TOpenSessionReq() : client_protocol((TProtocolVersion::type)5), username(), password() {
    client_protocol = (TProtocolVersion::type)5;

  }

  virtual ~TOpenSessionReq() throw();
  TProtocolVersion::type client_protocol;
  std::string username;
  std::string password;
  std::map<std::string, std::string>  configuration;

  _TOpenSessionReq__isset __isset;

  void __set_client_protocol(const TProtocolVersion::type val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_configuration(const std::map<std::string, std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TOpenSessionReq &a, TOpenSessionReq &b);

std::ostream& operator<<(std::ostream& out, const TOpenSessionReq& obj);

typedef struct _TOpenSessionResp__isset {
  _TOpenSessionResp__isset() : sessionHandle(false), configuration(false) {}
  bool sessionHandle :1;
  bool configuration :1;
} _TOpenSessionResp__isset;

class TOpenSessionResp {
 public:

  TOpenSessionResp(const TOpenSessionResp&);
  TOpenSessionResp(TOpenSessionResp&&);
  TOpenSessionResp& operator=(const TOpenSessionResp&);
  TOpenSessionResp& operator=(TOpenSessionResp&&);
  TOpenSessionResp() : serverProtocolVersion((TProtocolVersion::type)5) {
    serverProtocolVersion = (TProtocolVersion::type)5;

  }

  virtual ~TOpenSessionResp() throw();
  TStatus status;
  TProtocolVersion::type serverProtocolVersion;
  TSessionHandle sessionHandle;
  std::map<std::string, std::string>  configuration;

  _TOpenSessionResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_serverProtocolVersion(const TProtocolVersion::type val);

  void __set_sessionHandle(const TSessionHandle& val);

  void __set_configuration(const std::map<std::string, std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TOpenSessionResp &a, TOpenSessionResp &b);

std::ostream& operator<<(std::ostream& out, const TOpenSessionResp& obj);


class TCloseSessionReq {
 public:

  TCloseSessionReq(const TCloseSessionReq&);
  TCloseSessionReq(TCloseSessionReq&&);
  TCloseSessionReq& operator=(const TCloseSessionReq&);
  TCloseSessionReq& operator=(TCloseSessionReq&&);
  TCloseSessionReq() {
  }

  virtual ~TCloseSessionReq() throw();
  TSessionHandle sessionHandle;

  void __set_sessionHandle(const TSessionHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCloseSessionReq &a, TCloseSessionReq &b);

std::ostream& operator<<(std::ostream& out, const TCloseSessionReq& obj);


class TCloseSessionResp {
 public:

  TCloseSessionResp(const TCloseSessionResp&);
  TCloseSessionResp(TCloseSessionResp&&);
  TCloseSessionResp& operator=(const TCloseSessionResp&);
  TCloseSessionResp& operator=(TCloseSessionResp&&);
  TCloseSessionResp() {
  }

  virtual ~TCloseSessionResp() throw();
  TStatus status;

  void __set_status(const TStatus& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCloseSessionResp &a, TCloseSessionResp &b);

std::ostream& operator<<(std::ostream& out, const TCloseSessionResp& obj);

typedef struct _TGetInfoValue__isset {
  _TGetInfoValue__isset() : stringValue(false), smallIntValue(false), integerBitmask(false), integerFlag(false), binaryValue(false), lenValue(false) {}
  bool stringValue :1;
  bool smallIntValue :1;
  bool integerBitmask :1;
  bool integerFlag :1;
  bool binaryValue :1;
  bool lenValue :1;
} _TGetInfoValue__isset;

class TGetInfoValue {
 public:

  TGetInfoValue(const TGetInfoValue&);
  TGetInfoValue(TGetInfoValue&&);
  TGetInfoValue& operator=(const TGetInfoValue&);
  TGetInfoValue& operator=(TGetInfoValue&&);
  TGetInfoValue() : stringValue(), smallIntValue(0), integerBitmask(0), integerFlag(0), binaryValue(0), lenValue(0) {
  }

  virtual ~TGetInfoValue() throw();
  std::string stringValue;
  int16_t smallIntValue;
  int32_t integerBitmask;
  int32_t integerFlag;
  int32_t binaryValue;
  int64_t lenValue;

  _TGetInfoValue__isset __isset;

  void __set_stringValue(const std::string& val);

  void __set_smallIntValue(const int16_t val);

  void __set_integerBitmask(const int32_t val);

  void __set_integerFlag(const int32_t val);

  void __set_binaryValue(const int32_t val);

  void __set_lenValue(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetInfoValue &a, TGetInfoValue &b);

std::ostream& operator<<(std::ostream& out, const TGetInfoValue& obj);


class TGetInfoReq {
 public:

  TGetInfoReq(const TGetInfoReq&);
  TGetInfoReq(TGetInfoReq&&);
  TGetInfoReq& operator=(const TGetInfoReq&);
  TGetInfoReq& operator=(TGetInfoReq&&);
  TGetInfoReq() : infoType((TGetInfoType::type)0) {
  }

  virtual ~TGetInfoReq() throw();
  TSessionHandle sessionHandle;
  TGetInfoType::type infoType;

  void __set_sessionHandle(const TSessionHandle& val);

  void __set_infoType(const TGetInfoType::type val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetInfoReq &a, TGetInfoReq &b);

std::ostream& operator<<(std::ostream& out, const TGetInfoReq& obj);


class TGetInfoResp {
 public:

  TGetInfoResp(const TGetInfoResp&);
  TGetInfoResp(TGetInfoResp&&);
  TGetInfoResp& operator=(const TGetInfoResp&);
  TGetInfoResp& operator=(TGetInfoResp&&);
  TGetInfoResp() {
  }

  virtual ~TGetInfoResp() throw();
  TStatus status;
  TGetInfoValue infoValue;

  void __set_status(const TStatus& val);

  void __set_infoValue(const TGetInfoValue& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetInfoResp &a, TGetInfoResp &b);

std::ostream& operator<<(std::ostream& out, const TGetInfoResp& obj);

typedef struct _TExecuteStatementReq__isset {
  _TExecuteStatementReq__isset() : confOverlay(false), runAsync(true) {}
  bool confOverlay :1;
  bool runAsync :1;
} _TExecuteStatementReq__isset;

class TExecuteStatementReq {
 public:

  TExecuteStatementReq(const TExecuteStatementReq&);
  TExecuteStatementReq(TExecuteStatementReq&&);
  TExecuteStatementReq& operator=(const TExecuteStatementReq&);
  TExecuteStatementReq& operator=(TExecuteStatementReq&&);
  TExecuteStatementReq() : statement(), runAsync(false) {
  }

  virtual ~TExecuteStatementReq() throw();
  TSessionHandle sessionHandle;
  std::string statement;
  std::map<std::string, std::string>  confOverlay;
  bool runAsync;

  _TExecuteStatementReq__isset __isset;

  void __set_sessionHandle(const TSessionHandle& val);

  void __set_statement(const std::string& val);

  void __set_confOverlay(const std::map<std::string, std::string> & val);

  void __set_runAsync(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TExecuteStatementReq &a, TExecuteStatementReq &b);

std::ostream& operator<<(std::ostream& out, const TExecuteStatementReq& obj);

typedef struct _TExecuteStatementResp__isset {
  _TExecuteStatementResp__isset() : operationHandle(false) {}
  bool operationHandle :1;
} _TExecuteStatementResp__isset;

class TExecuteStatementResp {
 public:

  TExecuteStatementResp(const TExecuteStatementResp&);
  TExecuteStatementResp(TExecuteStatementResp&&);
  TExecuteStatementResp& operator=(const TExecuteStatementResp&);
  TExecuteStatementResp& operator=(TExecuteStatementResp&&);
  TExecuteStatementResp() {
  }

  virtual ~TExecuteStatementResp() throw();
  TStatus status;
  TOperationHandle operationHandle;

  _TExecuteStatementResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TExecuteStatementResp &a, TExecuteStatementResp &b);

std::ostream& operator<<(std::ostream& out, const TExecuteStatementResp& obj);


class TGetTypeInfoReq {
 public:

  TGetTypeInfoReq(const TGetTypeInfoReq&);
  TGetTypeInfoReq(TGetTypeInfoReq&&);
  TGetTypeInfoReq& operator=(const TGetTypeInfoReq&);
  TGetTypeInfoReq& operator=(TGetTypeInfoReq&&);
  TGetTypeInfoReq() {
  }

  virtual ~TGetTypeInfoReq() throw();
  TSessionHandle sessionHandle;

  void __set_sessionHandle(const TSessionHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetTypeInfoReq &a, TGetTypeInfoReq &b);

std::ostream& operator<<(std::ostream& out, const TGetTypeInfoReq& obj);

typedef struct _TGetTypeInfoResp__isset {
  _TGetTypeInfoResp__isset() : operationHandle(false) {}
  bool operationHandle :1;
} _TGetTypeInfoResp__isset;

class TGetTypeInfoResp {
 public:

  TGetTypeInfoResp(const TGetTypeInfoResp&);
  TGetTypeInfoResp(TGetTypeInfoResp&&);
  TGetTypeInfoResp& operator=(const TGetTypeInfoResp&);
  TGetTypeInfoResp& operator=(TGetTypeInfoResp&&);
  TGetTypeInfoResp() {
  }

  virtual ~TGetTypeInfoResp() throw();
  TStatus status;
  TOperationHandle operationHandle;

  _TGetTypeInfoResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetTypeInfoResp &a, TGetTypeInfoResp &b);

std::ostream& operator<<(std::ostream& out, const TGetTypeInfoResp& obj);


class TGetCatalogsReq {
 public:

  TGetCatalogsReq(const TGetCatalogsReq&);
  TGetCatalogsReq(TGetCatalogsReq&&);
  TGetCatalogsReq& operator=(const TGetCatalogsReq&);
  TGetCatalogsReq& operator=(TGetCatalogsReq&&);
  TGetCatalogsReq() {
  }

  virtual ~TGetCatalogsReq() throw();
  TSessionHandle sessionHandle;

  void __set_sessionHandle(const TSessionHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetCatalogsReq &a, TGetCatalogsReq &b);

std::ostream& operator<<(std::ostream& out, const TGetCatalogsReq& obj);

typedef struct _TGetCatalogsResp__isset {
  _TGetCatalogsResp__isset() : operationHandle(false) {}
  bool operationHandle :1;
} _TGetCatalogsResp__isset;

class TGetCatalogsResp {
 public:

  TGetCatalogsResp(const TGetCatalogsResp&);
  TGetCatalogsResp(TGetCatalogsResp&&);
  TGetCatalogsResp& operator=(const TGetCatalogsResp&);
  TGetCatalogsResp& operator=(TGetCatalogsResp&&);
  TGetCatalogsResp() {
  }

  virtual ~TGetCatalogsResp() throw();
  TStatus status;
  TOperationHandle operationHandle;

  _TGetCatalogsResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetCatalogsResp &a, TGetCatalogsResp &b);

std::ostream& operator<<(std::ostream& out, const TGetCatalogsResp& obj);

typedef struct _TGetSchemasReq__isset {
  _TGetSchemasReq__isset() : catalogName(false), schemaName(false) {}
  bool catalogName :1;
  bool schemaName :1;
} _TGetSchemasReq__isset;

class TGetSchemasReq {
 public:

  TGetSchemasReq(const TGetSchemasReq&);
  TGetSchemasReq(TGetSchemasReq&&);
  TGetSchemasReq& operator=(const TGetSchemasReq&);
  TGetSchemasReq& operator=(TGetSchemasReq&&);
  TGetSchemasReq() : catalogName(), schemaName() {
  }

  virtual ~TGetSchemasReq() throw();
  TSessionHandle sessionHandle;
  TIdentifier catalogName;
  TPatternOrIdentifier schemaName;

  _TGetSchemasReq__isset __isset;

  void __set_sessionHandle(const TSessionHandle& val);

  void __set_catalogName(const TIdentifier& val);

  void __set_schemaName(const TPatternOrIdentifier& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetSchemasReq &a, TGetSchemasReq &b);

std::ostream& operator<<(std::ostream& out, const TGetSchemasReq& obj);

typedef struct _TGetSchemasResp__isset {
  _TGetSchemasResp__isset() : operationHandle(false) {}
  bool operationHandle :1;
} _TGetSchemasResp__isset;

class TGetSchemasResp {
 public:

  TGetSchemasResp(const TGetSchemasResp&);
  TGetSchemasResp(TGetSchemasResp&&);
  TGetSchemasResp& operator=(const TGetSchemasResp&);
  TGetSchemasResp& operator=(TGetSchemasResp&&);
  TGetSchemasResp() {
  }

  virtual ~TGetSchemasResp() throw();
  TStatus status;
  TOperationHandle operationHandle;

  _TGetSchemasResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetSchemasResp &a, TGetSchemasResp &b);

std::ostream& operator<<(std::ostream& out, const TGetSchemasResp& obj);

typedef struct _TGetTablesReq__isset {
  _TGetTablesReq__isset() : catalogName(false), schemaName(false), tableName(false), tableTypes(false) {}
  bool catalogName :1;
  bool schemaName :1;
  bool tableName :1;
  bool tableTypes :1;
} _TGetTablesReq__isset;

class TGetTablesReq {
 public:

  TGetTablesReq(const TGetTablesReq&);
  TGetTablesReq(TGetTablesReq&&);
  TGetTablesReq& operator=(const TGetTablesReq&);
  TGetTablesReq& operator=(TGetTablesReq&&);
  TGetTablesReq() : catalogName(), schemaName(), tableName() {
  }

  virtual ~TGetTablesReq() throw();
  TSessionHandle sessionHandle;
  TPatternOrIdentifier catalogName;
  TPatternOrIdentifier schemaName;
  TPatternOrIdentifier tableName;
  std::vector<std::string>  tableTypes;

  _TGetTablesReq__isset __isset;

  void __set_sessionHandle(const TSessionHandle& val);

  void __set_catalogName(const TPatternOrIdentifier& val);

  void __set_schemaName(const TPatternOrIdentifier& val);

  void __set_tableName(const TPatternOrIdentifier& val);

  void __set_tableTypes(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetTablesReq &a, TGetTablesReq &b);

std::ostream& operator<<(std::ostream& out, const TGetTablesReq& obj);

typedef struct _TGetTablesResp__isset {
  _TGetTablesResp__isset() : operationHandle(false) {}
  bool operationHandle :1;
} _TGetTablesResp__isset;

class TGetTablesResp {
 public:

  TGetTablesResp(const TGetTablesResp&);
  TGetTablesResp(TGetTablesResp&&);
  TGetTablesResp& operator=(const TGetTablesResp&);
  TGetTablesResp& operator=(TGetTablesResp&&);
  TGetTablesResp() {
  }

  virtual ~TGetTablesResp() throw();
  TStatus status;
  TOperationHandle operationHandle;

  _TGetTablesResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetTablesResp &a, TGetTablesResp &b);

std::ostream& operator<<(std::ostream& out, const TGetTablesResp& obj);


class TGetTableTypesReq {
 public:

  TGetTableTypesReq(const TGetTableTypesReq&);
  TGetTableTypesReq(TGetTableTypesReq&&);
  TGetTableTypesReq& operator=(const TGetTableTypesReq&);
  TGetTableTypesReq& operator=(TGetTableTypesReq&&);
  TGetTableTypesReq() {
  }

  virtual ~TGetTableTypesReq() throw();
  TSessionHandle sessionHandle;

  void __set_sessionHandle(const TSessionHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetTableTypesReq &a, TGetTableTypesReq &b);

std::ostream& operator<<(std::ostream& out, const TGetTableTypesReq& obj);

typedef struct _TGetTableTypesResp__isset {
  _TGetTableTypesResp__isset() : operationHandle(false) {}
  bool operationHandle :1;
} _TGetTableTypesResp__isset;

class TGetTableTypesResp {
 public:

  TGetTableTypesResp(const TGetTableTypesResp&);
  TGetTableTypesResp(TGetTableTypesResp&&);
  TGetTableTypesResp& operator=(const TGetTableTypesResp&);
  TGetTableTypesResp& operator=(TGetTableTypesResp&&);
  TGetTableTypesResp() {
  }

  virtual ~TGetTableTypesResp() throw();
  TStatus status;
  TOperationHandle operationHandle;

  _TGetTableTypesResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetTableTypesResp &a, TGetTableTypesResp &b);

std::ostream& operator<<(std::ostream& out, const TGetTableTypesResp& obj);

typedef struct _TGetColumnsReq__isset {
  _TGetColumnsReq__isset() : catalogName(false), schemaName(false), tableName(false), columnName(false) {}
  bool catalogName :1;
  bool schemaName :1;
  bool tableName :1;
  bool columnName :1;
} _TGetColumnsReq__isset;

class TGetColumnsReq {
 public:

  TGetColumnsReq(const TGetColumnsReq&);
  TGetColumnsReq(TGetColumnsReq&&);
  TGetColumnsReq& operator=(const TGetColumnsReq&);
  TGetColumnsReq& operator=(TGetColumnsReq&&);
  TGetColumnsReq() : catalogName(), schemaName(), tableName(), columnName() {
  }

  virtual ~TGetColumnsReq() throw();
  TSessionHandle sessionHandle;
  TIdentifier catalogName;
  TPatternOrIdentifier schemaName;
  TPatternOrIdentifier tableName;
  TPatternOrIdentifier columnName;

  _TGetColumnsReq__isset __isset;

  void __set_sessionHandle(const TSessionHandle& val);

  void __set_catalogName(const TIdentifier& val);

  void __set_schemaName(const TPatternOrIdentifier& val);

  void __set_tableName(const TPatternOrIdentifier& val);

  void __set_columnName(const TPatternOrIdentifier& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetColumnsReq &a, TGetColumnsReq &b);

std::ostream& operator<<(std::ostream& out, const TGetColumnsReq& obj);

typedef struct _TGetColumnsResp__isset {
  _TGetColumnsResp__isset() : operationHandle(false) {}
  bool operationHandle :1;
} _TGetColumnsResp__isset;

class TGetColumnsResp {
 public:

  TGetColumnsResp(const TGetColumnsResp&);
  TGetColumnsResp(TGetColumnsResp&&);
  TGetColumnsResp& operator=(const TGetColumnsResp&);
  TGetColumnsResp& operator=(TGetColumnsResp&&);
  TGetColumnsResp() {
  }

  virtual ~TGetColumnsResp() throw();
  TStatus status;
  TOperationHandle operationHandle;

  _TGetColumnsResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetColumnsResp &a, TGetColumnsResp &b);

std::ostream& operator<<(std::ostream& out, const TGetColumnsResp& obj);

typedef struct _TGetFunctionsReq__isset {
  _TGetFunctionsReq__isset() : catalogName(false), schemaName(false) {}
  bool catalogName :1;
  bool schemaName :1;
} _TGetFunctionsReq__isset;

class TGetFunctionsReq {
 public:

  TGetFunctionsReq(const TGetFunctionsReq&);
  TGetFunctionsReq(TGetFunctionsReq&&);
  TGetFunctionsReq& operator=(const TGetFunctionsReq&);
  TGetFunctionsReq& operator=(TGetFunctionsReq&&);
  TGetFunctionsReq() : catalogName(), schemaName(), functionName() {
  }

  virtual ~TGetFunctionsReq() throw();
  TSessionHandle sessionHandle;
  TIdentifier catalogName;
  TPatternOrIdentifier schemaName;
  TPatternOrIdentifier functionName;

  _TGetFunctionsReq__isset __isset;

  void __set_sessionHandle(const TSessionHandle& val);

  void __set_catalogName(const TIdentifier& val);

  void __set_schemaName(const TPatternOrIdentifier& val);

  void __set_functionName(const TPatternOrIdentifier& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetFunctionsReq &a, TGetFunctionsReq &b);

std::ostream& operator<<(std::ostream& out, const TGetFunctionsReq& obj);

typedef struct _TGetFunctionsResp__isset {
  _TGetFunctionsResp__isset() : operationHandle(false) {}
  bool operationHandle :1;
} _TGetFunctionsResp__isset;

class TGetFunctionsResp {
 public:

  TGetFunctionsResp(const TGetFunctionsResp&);
  TGetFunctionsResp(TGetFunctionsResp&&);
  TGetFunctionsResp& operator=(const TGetFunctionsResp&);
  TGetFunctionsResp& operator=(TGetFunctionsResp&&);
  TGetFunctionsResp() {
  }

  virtual ~TGetFunctionsResp() throw();
  TStatus status;
  TOperationHandle operationHandle;

  _TGetFunctionsResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetFunctionsResp &a, TGetFunctionsResp &b);

std::ostream& operator<<(std::ostream& out, const TGetFunctionsResp& obj);

typedef struct _TGetPrimaryKeysReq__isset {
  _TGetPrimaryKeysReq__isset() : catalogName(false), schemaName(false), tableName(false) {}
  bool catalogName :1;
  bool schemaName :1;
  bool tableName :1;
} _TGetPrimaryKeysReq__isset;

class TGetPrimaryKeysReq {
 public:

  TGetPrimaryKeysReq(const TGetPrimaryKeysReq&);
  TGetPrimaryKeysReq(TGetPrimaryKeysReq&&);
  TGetPrimaryKeysReq& operator=(const TGetPrimaryKeysReq&);
  TGetPrimaryKeysReq& operator=(TGetPrimaryKeysReq&&);
  TGetPrimaryKeysReq() : catalogName(), schemaName(), tableName() {
  }

  virtual ~TGetPrimaryKeysReq() throw();
  TSessionHandle sessionHandle;
  TIdentifier catalogName;
  TIdentifier schemaName;
  TIdentifier tableName;

  _TGetPrimaryKeysReq__isset __isset;

  void __set_sessionHandle(const TSessionHandle& val);

  void __set_catalogName(const TIdentifier& val);

  void __set_schemaName(const TIdentifier& val);

  void __set_tableName(const TIdentifier& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetPrimaryKeysReq &a, TGetPrimaryKeysReq &b);

std::ostream& operator<<(std::ostream& out, const TGetPrimaryKeysReq& obj);

typedef struct _TGetPrimaryKeysResp__isset {
  _TGetPrimaryKeysResp__isset() : operationHandle(false) {}
  bool operationHandle :1;
} _TGetPrimaryKeysResp__isset;

class TGetPrimaryKeysResp {
 public:

  TGetPrimaryKeysResp(const TGetPrimaryKeysResp&);
  TGetPrimaryKeysResp(TGetPrimaryKeysResp&&);
  TGetPrimaryKeysResp& operator=(const TGetPrimaryKeysResp&);
  TGetPrimaryKeysResp& operator=(TGetPrimaryKeysResp&&);
  TGetPrimaryKeysResp() {
  }

  virtual ~TGetPrimaryKeysResp() throw();
  TStatus status;
  TOperationHandle operationHandle;

  _TGetPrimaryKeysResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetPrimaryKeysResp &a, TGetPrimaryKeysResp &b);

std::ostream& operator<<(std::ostream& out, const TGetPrimaryKeysResp& obj);

typedef struct _TGetCrossReferenceReq__isset {
  _TGetCrossReferenceReq__isset() : parentCatalogName(false), parentSchemaName(false), parentTableName(false), foreignCatalogName(false), foreignSchemaName(false), foreignTableName(false) {}
  bool parentCatalogName :1;
  bool parentSchemaName :1;
  bool parentTableName :1;
  bool foreignCatalogName :1;
  bool foreignSchemaName :1;
  bool foreignTableName :1;
} _TGetCrossReferenceReq__isset;

class TGetCrossReferenceReq {
 public:

  TGetCrossReferenceReq(const TGetCrossReferenceReq&);
  TGetCrossReferenceReq(TGetCrossReferenceReq&&);
  TGetCrossReferenceReq& operator=(const TGetCrossReferenceReq&);
  TGetCrossReferenceReq& operator=(TGetCrossReferenceReq&&);
  TGetCrossReferenceReq() : parentCatalogName(), parentSchemaName(), parentTableName(), foreignCatalogName(), foreignSchemaName(), foreignTableName() {
  }

  virtual ~TGetCrossReferenceReq() throw();
  TSessionHandle sessionHandle;
  TIdentifier parentCatalogName;
  TIdentifier parentSchemaName;
  TIdentifier parentTableName;
  TIdentifier foreignCatalogName;
  TIdentifier foreignSchemaName;
  TIdentifier foreignTableName;

  _TGetCrossReferenceReq__isset __isset;

  void __set_sessionHandle(const TSessionHandle& val);

  void __set_parentCatalogName(const TIdentifier& val);

  void __set_parentSchemaName(const TIdentifier& val);

  void __set_parentTableName(const TIdentifier& val);

  void __set_foreignCatalogName(const TIdentifier& val);

  void __set_foreignSchemaName(const TIdentifier& val);

  void __set_foreignTableName(const TIdentifier& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetCrossReferenceReq &a, TGetCrossReferenceReq &b);

std::ostream& operator<<(std::ostream& out, const TGetCrossReferenceReq& obj);

typedef struct _TGetCrossReferenceResp__isset {
  _TGetCrossReferenceResp__isset() : operationHandle(false) {}
  bool operationHandle :1;
} _TGetCrossReferenceResp__isset;

class TGetCrossReferenceResp {
 public:

  TGetCrossReferenceResp(const TGetCrossReferenceResp&);
  TGetCrossReferenceResp(TGetCrossReferenceResp&&);
  TGetCrossReferenceResp& operator=(const TGetCrossReferenceResp&);
  TGetCrossReferenceResp& operator=(TGetCrossReferenceResp&&);
  TGetCrossReferenceResp() {
  }

  virtual ~TGetCrossReferenceResp() throw();
  TStatus status;
  TOperationHandle operationHandle;

  _TGetCrossReferenceResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetCrossReferenceResp &a, TGetCrossReferenceResp &b);

std::ostream& operator<<(std::ostream& out, const TGetCrossReferenceResp& obj);


class TGetOperationStatusReq {
 public:

  TGetOperationStatusReq(const TGetOperationStatusReq&);
  TGetOperationStatusReq(TGetOperationStatusReq&&);
  TGetOperationStatusReq& operator=(const TGetOperationStatusReq&);
  TGetOperationStatusReq& operator=(TGetOperationStatusReq&&);
  TGetOperationStatusReq() {
  }

  virtual ~TGetOperationStatusReq() throw();
  TOperationHandle operationHandle;

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetOperationStatusReq &a, TGetOperationStatusReq &b);

std::ostream& operator<<(std::ostream& out, const TGetOperationStatusReq& obj);

typedef struct _TGetOperationStatusResp__isset {
  _TGetOperationStatusResp__isset() : operationState(false), sqlState(false), errorCode(false), errorMessage(false) {}
  bool operationState :1;
  bool sqlState :1;
  bool errorCode :1;
  bool errorMessage :1;
} _TGetOperationStatusResp__isset;

class TGetOperationStatusResp {
 public:

  TGetOperationStatusResp(const TGetOperationStatusResp&);
  TGetOperationStatusResp(TGetOperationStatusResp&&);
  TGetOperationStatusResp& operator=(const TGetOperationStatusResp&);
  TGetOperationStatusResp& operator=(TGetOperationStatusResp&&);
  TGetOperationStatusResp() : operationState((TOperationState::type)0), sqlState(), errorCode(0), errorMessage() {
  }

  virtual ~TGetOperationStatusResp() throw();
  TStatus status;
  TOperationState::type operationState;
  std::string sqlState;
  int32_t errorCode;
  std::string errorMessage;

  _TGetOperationStatusResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_operationState(const TOperationState::type val);

  void __set_sqlState(const std::string& val);

  void __set_errorCode(const int32_t val);

  void __set_errorMessage(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetOperationStatusResp &a, TGetOperationStatusResp &b);

std::ostream& operator<<(std::ostream& out, const TGetOperationStatusResp& obj);


class TCancelOperationReq {
 public:

  TCancelOperationReq(const TCancelOperationReq&);
  TCancelOperationReq(TCancelOperationReq&&);
  TCancelOperationReq& operator=(const TCancelOperationReq&);
  TCancelOperationReq& operator=(TCancelOperationReq&&);
  TCancelOperationReq() {
  }

  virtual ~TCancelOperationReq() throw();
  TOperationHandle operationHandle;

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCancelOperationReq &a, TCancelOperationReq &b);

std::ostream& operator<<(std::ostream& out, const TCancelOperationReq& obj);


class TCancelOperationResp {
 public:

  TCancelOperationResp(const TCancelOperationResp&);
  TCancelOperationResp(TCancelOperationResp&&);
  TCancelOperationResp& operator=(const TCancelOperationResp&);
  TCancelOperationResp& operator=(TCancelOperationResp&&);
  TCancelOperationResp() {
  }

  virtual ~TCancelOperationResp() throw();
  TStatus status;

  void __set_status(const TStatus& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCancelOperationResp &a, TCancelOperationResp &b);

std::ostream& operator<<(std::ostream& out, const TCancelOperationResp& obj);


class TCloseOperationReq {
 public:

  TCloseOperationReq(const TCloseOperationReq&);
  TCloseOperationReq(TCloseOperationReq&&);
  TCloseOperationReq& operator=(const TCloseOperationReq&);
  TCloseOperationReq& operator=(TCloseOperationReq&&);
  TCloseOperationReq() {
  }

  virtual ~TCloseOperationReq() throw();
  TOperationHandle operationHandle;

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCloseOperationReq &a, TCloseOperationReq &b);

std::ostream& operator<<(std::ostream& out, const TCloseOperationReq& obj);


class TCloseOperationResp {
 public:

  TCloseOperationResp(const TCloseOperationResp&);
  TCloseOperationResp(TCloseOperationResp&&);
  TCloseOperationResp& operator=(const TCloseOperationResp&);
  TCloseOperationResp& operator=(TCloseOperationResp&&);
  TCloseOperationResp() {
  }

  virtual ~TCloseOperationResp() throw();
  TStatus status;

  void __set_status(const TStatus& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCloseOperationResp &a, TCloseOperationResp &b);

std::ostream& operator<<(std::ostream& out, const TCloseOperationResp& obj);


class TGetResultSetMetadataReq {
 public:

  TGetResultSetMetadataReq(const TGetResultSetMetadataReq&);
  TGetResultSetMetadataReq(TGetResultSetMetadataReq&&);
  TGetResultSetMetadataReq& operator=(const TGetResultSetMetadataReq&);
  TGetResultSetMetadataReq& operator=(TGetResultSetMetadataReq&&);
  TGetResultSetMetadataReq() {
  }

  virtual ~TGetResultSetMetadataReq() throw();
  TOperationHandle operationHandle;

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetResultSetMetadataReq &a, TGetResultSetMetadataReq &b);

std::ostream& operator<<(std::ostream& out, const TGetResultSetMetadataReq& obj);

typedef struct _TGetResultSetMetadataResp__isset {
  _TGetResultSetMetadataResp__isset() : schema(false) {}
  bool schema :1;
} _TGetResultSetMetadataResp__isset;

class TGetResultSetMetadataResp {
 public:

  TGetResultSetMetadataResp(const TGetResultSetMetadataResp&);
  TGetResultSetMetadataResp(TGetResultSetMetadataResp&&);
  TGetResultSetMetadataResp& operator=(const TGetResultSetMetadataResp&);
  TGetResultSetMetadataResp& operator=(TGetResultSetMetadataResp&&);
  TGetResultSetMetadataResp() {
  }

  virtual ~TGetResultSetMetadataResp() throw();
  TStatus status;
  TTableSchema schema;

  _TGetResultSetMetadataResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_schema(const TTableSchema& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetResultSetMetadataResp &a, TGetResultSetMetadataResp &b);

std::ostream& operator<<(std::ostream& out, const TGetResultSetMetadataResp& obj);

typedef struct _TFetchResultsReq__isset {
  _TFetchResultsReq__isset() : fetchType(true) {}
  bool fetchType :1;
} _TFetchResultsReq__isset;

class TFetchResultsReq {
 public:

  TFetchResultsReq(const TFetchResultsReq&);
  TFetchResultsReq(TFetchResultsReq&&);
  TFetchResultsReq& operator=(const TFetchResultsReq&);
  TFetchResultsReq& operator=(TFetchResultsReq&&);
  TFetchResultsReq() : orientation((TFetchOrientation::type)0), maxRows(0), fetchType(0) {
    orientation = (TFetchOrientation::type)0;

  }

  virtual ~TFetchResultsReq() throw();
  TOperationHandle operationHandle;
  TFetchOrientation::type orientation;
  int64_t maxRows;
  int16_t fetchType;

  _TFetchResultsReq__isset __isset;

  void __set_operationHandle(const TOperationHandle& val);

  void __set_orientation(const TFetchOrientation::type val);

  void __set_maxRows(const int64_t val);

  void __set_fetchType(const int16_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TFetchResultsReq &a, TFetchResultsReq &b);

std::ostream& operator<<(std::ostream& out, const TFetchResultsReq& obj);

typedef struct _TFetchResultsResp__isset {
  _TFetchResultsResp__isset() : hasMoreRows(false), results(false) {}
  bool hasMoreRows :1;
  bool results :1;
} _TFetchResultsResp__isset;

class TFetchResultsResp {
 public:

  TFetchResultsResp(const TFetchResultsResp&);
  TFetchResultsResp(TFetchResultsResp&&);
  TFetchResultsResp& operator=(const TFetchResultsResp&);
  TFetchResultsResp& operator=(TFetchResultsResp&&);
  TFetchResultsResp() : hasMoreRows(0) {
  }

  virtual ~TFetchResultsResp() throw();
  TStatus status;
  bool hasMoreRows;
  TRowSet results;

  _TFetchResultsResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_hasMoreRows(const bool val);

  void __set_results(const TRowSet& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TFetchResultsResp &a, TFetchResultsResp &b);

std::ostream& operator<<(std::ostream& out, const TFetchResultsResp& obj);


class TGetDelegationTokenReq {
 public:

  TGetDelegationTokenReq(const TGetDelegationTokenReq&);
  TGetDelegationTokenReq(TGetDelegationTokenReq&&);
  TGetDelegationTokenReq& operator=(const TGetDelegationTokenReq&);
  TGetDelegationTokenReq& operator=(TGetDelegationTokenReq&&);
  TGetDelegationTokenReq() : owner(), renewer() {
  }

  virtual ~TGetDelegationTokenReq() throw();
  TSessionHandle sessionHandle;
  std::string owner;
  std::string renewer;

  void __set_sessionHandle(const TSessionHandle& val);

  void __set_owner(const std::string& val);

  void __set_renewer(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetDelegationTokenReq &a, TGetDelegationTokenReq &b);

std::ostream& operator<<(std::ostream& out, const TGetDelegationTokenReq& obj);

typedef struct _TGetDelegationTokenResp__isset {
  _TGetDelegationTokenResp__isset() : delegationToken(false) {}
  bool delegationToken :1;
} _TGetDelegationTokenResp__isset;

class TGetDelegationTokenResp {
 public:

  TGetDelegationTokenResp(const TGetDelegationTokenResp&);
  TGetDelegationTokenResp(TGetDelegationTokenResp&&);
  TGetDelegationTokenResp& operator=(const TGetDelegationTokenResp&);
  TGetDelegationTokenResp& operator=(TGetDelegationTokenResp&&);
  TGetDelegationTokenResp() : delegationToken() {
  }

  virtual ~TGetDelegationTokenResp() throw();
  TStatus status;
  std::string delegationToken;

  _TGetDelegationTokenResp__isset __isset;

  void __set_status(const TStatus& val);

  void __set_delegationToken(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetDelegationTokenResp &a, TGetDelegationTokenResp &b);

std::ostream& operator<<(std::ostream& out, const TGetDelegationTokenResp& obj);


class TCancelDelegationTokenReq {
 public:

  TCancelDelegationTokenReq(const TCancelDelegationTokenReq&);
  TCancelDelegationTokenReq(TCancelDelegationTokenReq&&);
  TCancelDelegationTokenReq& operator=(const TCancelDelegationTokenReq&);
  TCancelDelegationTokenReq& operator=(TCancelDelegationTokenReq&&);
  TCancelDelegationTokenReq() : delegationToken() {
  }

  virtual ~TCancelDelegationTokenReq() throw();
  TSessionHandle sessionHandle;
  std::string delegationToken;

  void __set_sessionHandle(const TSessionHandle& val);

  void __set_delegationToken(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCancelDelegationTokenReq &a, TCancelDelegationTokenReq &b);

std::ostream& operator<<(std::ostream& out, const TCancelDelegationTokenReq& obj);


class TCancelDelegationTokenResp {
 public:

  TCancelDelegationTokenResp(const TCancelDelegationTokenResp&);
  TCancelDelegationTokenResp(TCancelDelegationTokenResp&&);
  TCancelDelegationTokenResp& operator=(const TCancelDelegationTokenResp&);
  TCancelDelegationTokenResp& operator=(TCancelDelegationTokenResp&&);
  TCancelDelegationTokenResp() {
  }

  virtual ~TCancelDelegationTokenResp() throw();
  TStatus status;

  void __set_status(const TStatus& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCancelDelegationTokenResp &a, TCancelDelegationTokenResp &b);

std::ostream& operator<<(std::ostream& out, const TCancelDelegationTokenResp& obj);


class TRenewDelegationTokenReq {
 public:

  TRenewDelegationTokenReq(const TRenewDelegationTokenReq&);
  TRenewDelegationTokenReq(TRenewDelegationTokenReq&&);
  TRenewDelegationTokenReq& operator=(const TRenewDelegationTokenReq&);
  TRenewDelegationTokenReq& operator=(TRenewDelegationTokenReq&&);
  TRenewDelegationTokenReq() : delegationToken() {
  }

  virtual ~TRenewDelegationTokenReq() throw();
  TSessionHandle sessionHandle;
  std::string delegationToken;

  void __set_sessionHandle(const TSessionHandle& val);

  void __set_delegationToken(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRenewDelegationTokenReq &a, TRenewDelegationTokenReq &b);

std::ostream& operator<<(std::ostream& out, const TRenewDelegationTokenReq& obj);


class TRenewDelegationTokenResp {
 public:

  TRenewDelegationTokenResp(const TRenewDelegationTokenResp&);
  TRenewDelegationTokenResp(TRenewDelegationTokenResp&&);
  TRenewDelegationTokenResp& operator=(const TRenewDelegationTokenResp&);
  TRenewDelegationTokenResp& operator=(TRenewDelegationTokenResp&&);
  TRenewDelegationTokenResp() {
  }

  virtual ~TRenewDelegationTokenResp() throw();
  TStatus status;

  void __set_status(const TStatus& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRenewDelegationTokenResp &a, TRenewDelegationTokenResp &b);

std::ostream& operator<<(std::ostream& out, const TRenewDelegationTokenResp& obj);


class TGetLogReq {
 public:

  TGetLogReq(const TGetLogReq&);
  TGetLogReq(TGetLogReq&&);
  TGetLogReq& operator=(const TGetLogReq&);
  TGetLogReq& operator=(TGetLogReq&&);
  TGetLogReq() {
  }

  virtual ~TGetLogReq() throw();
  TOperationHandle operationHandle;

  void __set_operationHandle(const TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetLogReq &a, TGetLogReq &b);

std::ostream& operator<<(std::ostream& out, const TGetLogReq& obj);


class TGetLogResp {
 public:

  TGetLogResp(const TGetLogResp&);
  TGetLogResp(TGetLogResp&&);
  TGetLogResp& operator=(const TGetLogResp&);
  TGetLogResp& operator=(TGetLogResp&&);
  TGetLogResp() : log() {
  }

  virtual ~TGetLogResp() throw();
  TStatus status;
  std::string log;

  void __set_status(const TStatus& val);

  void __set_log(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetLogResp &a, TGetLogResp &b);

std::ostream& operator<<(std::ostream& out, const TGetLogResp& obj);

}}}}} // namespace

#include "TCLIService_types.tcc"

#endif
