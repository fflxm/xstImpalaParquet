/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Status_TYPES_H
#define Status_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "ErrorCodes_types.h"


namespace impala {

class TStatus;

typedef struct _TStatus__isset {
  _TStatus__isset() : error_msgs(false) {}
  bool error_msgs :1;
} _TStatus__isset;

class TStatus {
 public:

  TStatus(const TStatus&);
  TStatus(TStatus&&);
  TStatus& operator=(const TStatus&);
  TStatus& operator=(TStatus&&);
  TStatus() : status_code(( ::impala::TErrorCode::type)0) {
  }

  virtual ~TStatus() throw();
   ::impala::TErrorCode::type status_code;
  std::vector<std::string>  error_msgs;

  _TStatus__isset __isset;

  void __set_status_code(const  ::impala::TErrorCode::type val);

  void __set_error_msgs(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TStatus &a, TStatus &b);

std::ostream& operator<<(std::ostream& out, const TStatus& obj);

} // namespace

#include "Status_types.tcc"

#endif
