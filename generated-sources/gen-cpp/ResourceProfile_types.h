/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ResourceProfile_TYPES_H
#define ResourceProfile_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace impala {

class TBackendResourceProfile;

typedef struct _TBackendResourceProfile__isset {
  _TBackendResourceProfile__isset() : spillable_buffer_size(false), max_row_buffer_size(false) {}
  bool spillable_buffer_size :1;
  bool max_row_buffer_size :1;
} _TBackendResourceProfile__isset;

class TBackendResourceProfile {
 public:

  TBackendResourceProfile(const TBackendResourceProfile&);
  TBackendResourceProfile(TBackendResourceProfile&&);
  TBackendResourceProfile& operator=(const TBackendResourceProfile&);
  TBackendResourceProfile& operator=(TBackendResourceProfile&&);
  TBackendResourceProfile() : min_reservation(0), max_reservation(0), spillable_buffer_size(0), max_row_buffer_size(0) {
  }

  virtual ~TBackendResourceProfile() throw();
  int64_t min_reservation;
  int64_t max_reservation;
  int64_t spillable_buffer_size;
  int64_t max_row_buffer_size;

  _TBackendResourceProfile__isset __isset;

  void __set_min_reservation(const int64_t val);

  void __set_max_reservation(const int64_t val);

  void __set_spillable_buffer_size(const int64_t val);

  void __set_max_row_buffer_size(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TBackendResourceProfile &a, TBackendResourceProfile &b);

std::ostream& operator<<(std::ostream& out, const TBackendResourceProfile& obj);

} // namespace

#include "ResourceProfile_types.tcc"

#endif
