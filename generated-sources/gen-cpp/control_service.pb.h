// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "planner.pb.h"
#include "kudu/rpc/rpc_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fservice_2eproto;
namespace impala {
class AuxErrorInfoPB;
class AuxErrorInfoPBDefaultTypeInternal;
extern AuxErrorInfoPBDefaultTypeInternal _AuxErrorInfoPB_default_instance_;
class CancelQueryFInstancesRequestPB;
class CancelQueryFInstancesRequestPBDefaultTypeInternal;
extern CancelQueryFInstancesRequestPBDefaultTypeInternal _CancelQueryFInstancesRequestPB_default_instance_;
class CancelQueryFInstancesResponsePB;
class CancelQueryFInstancesResponsePBDefaultTypeInternal;
extern CancelQueryFInstancesResponsePBDefaultTypeInternal _CancelQueryFInstancesResponsePB_default_instance_;
class DmlExecStatusPB;
class DmlExecStatusPBDefaultTypeInternal;
extern DmlExecStatusPBDefaultTypeInternal _DmlExecStatusPB_default_instance_;
class DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse;
class DmlExecStatusPB_PerPartitionStatusEntry_DoNotUseDefaultTypeInternal;
extern DmlExecStatusPB_PerPartitionStatusEntry_DoNotUseDefaultTypeInternal _DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse_default_instance_;
class DmlFileStatusPb;
class DmlFileStatusPbDefaultTypeInternal;
extern DmlFileStatusPbDefaultTypeInternal _DmlFileStatusPb_default_instance_;
class DmlPartitionStatusPB;
class DmlPartitionStatusPBDefaultTypeInternal;
extern DmlPartitionStatusPBDefaultTypeInternal _DmlPartitionStatusPB_default_instance_;
class DmlStatsPB;
class DmlStatsPBDefaultTypeInternal;
extern DmlStatsPBDefaultTypeInternal _DmlStatsPB_default_instance_;
class ErrorLogEntryPB;
class ErrorLogEntryPBDefaultTypeInternal;
extern ErrorLogEntryPBDefaultTypeInternal _ErrorLogEntryPB_default_instance_;
class ExecQueryFInstancesRequestPB;
class ExecQueryFInstancesRequestPBDefaultTypeInternal;
extern ExecQueryFInstancesRequestPBDefaultTypeInternal _ExecQueryFInstancesRequestPB_default_instance_;
class ExecQueryFInstancesResponsePB;
class ExecQueryFInstancesResponsePBDefaultTypeInternal;
extern ExecQueryFInstancesResponsePBDefaultTypeInternal _ExecQueryFInstancesResponsePB_default_instance_;
class ExecSummaryDataPB;
class ExecSummaryDataPBDefaultTypeInternal;
extern ExecSummaryDataPBDefaultTypeInternal _ExecSummaryDataPB_default_instance_;
class FragmentExecStatusPB;
class FragmentExecStatusPBDefaultTypeInternal;
extern FragmentExecStatusPBDefaultTypeInternal _FragmentExecStatusPB_default_instance_;
class FragmentInstanceExecStatusPB;
class FragmentInstanceExecStatusPBDefaultTypeInternal;
extern FragmentInstanceExecStatusPBDefaultTypeInternal _FragmentInstanceExecStatusPB_default_instance_;
class JoinBuildInputPB;
class JoinBuildInputPBDefaultTypeInternal;
extern JoinBuildInputPBDefaultTypeInternal _JoinBuildInputPB_default_instance_;
class KuduDmlStatsPB;
class KuduDmlStatsPBDefaultTypeInternal;
extern KuduDmlStatsPBDefaultTypeInternal _KuduDmlStatsPB_default_instance_;
class ParquetDmlStatsPB;
class ParquetDmlStatsPBDefaultTypeInternal;
extern ParquetDmlStatsPBDefaultTypeInternal _ParquetDmlStatsPB_default_instance_;
class ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse;
class ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUseDefaultTypeInternal;
extern ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUseDefaultTypeInternal _ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse_default_instance_;
class PlanFragmentCtxPB;
class PlanFragmentCtxPBDefaultTypeInternal;
extern PlanFragmentCtxPBDefaultTypeInternal _PlanFragmentCtxPB_default_instance_;
class PlanFragmentDestinationPB;
class PlanFragmentDestinationPBDefaultTypeInternal;
extern PlanFragmentDestinationPBDefaultTypeInternal _PlanFragmentDestinationPB_default_instance_;
class PlanFragmentInstanceCtxPB;
class PlanFragmentInstanceCtxPBDefaultTypeInternal;
extern PlanFragmentInstanceCtxPBDefaultTypeInternal _PlanFragmentInstanceCtxPB_default_instance_;
class PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse;
class PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUseDefaultTypeInternal;
extern PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUseDefaultTypeInternal _PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse_default_instance_;
class RPCErrorInfoPB;
class RPCErrorInfoPBDefaultTypeInternal;
extern RPCErrorInfoPBDefaultTypeInternal _RPCErrorInfoPB_default_instance_;
class RemoteShutdownParamsPB;
class RemoteShutdownParamsPBDefaultTypeInternal;
extern RemoteShutdownParamsPBDefaultTypeInternal _RemoteShutdownParamsPB_default_instance_;
class RemoteShutdownResultPB;
class RemoteShutdownResultPBDefaultTypeInternal;
extern RemoteShutdownResultPBDefaultTypeInternal _RemoteShutdownResultPB_default_instance_;
class ReportExecStatusRequestPB;
class ReportExecStatusRequestPBDefaultTypeInternal;
extern ReportExecStatusRequestPBDefaultTypeInternal _ReportExecStatusRequestPB_default_instance_;
class ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse;
class ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUseDefaultTypeInternal;
extern ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUseDefaultTypeInternal _ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse_default_instance_;
class ReportExecStatusResponsePB;
class ReportExecStatusResponsePBDefaultTypeInternal;
extern ReportExecStatusResponsePBDefaultTypeInternal _ReportExecStatusResponsePB_default_instance_;
class ScanRangeParamsPB;
class ScanRangeParamsPBDefaultTypeInternal;
extern ScanRangeParamsPBDefaultTypeInternal _ScanRangeParamsPB_default_instance_;
class ScanRangesPB;
class ScanRangesPBDefaultTypeInternal;
extern ScanRangesPBDefaultTypeInternal _ScanRangesPB_default_instance_;
class ShutdownStatusPB;
class ShutdownStatusPBDefaultTypeInternal;
extern ShutdownStatusPBDefaultTypeInternal _ShutdownStatusPB_default_instance_;
class StatefulStatusPB;
class StatefulStatusPBDefaultTypeInternal;
extern StatefulStatusPBDefaultTypeInternal _StatefulStatusPB_default_instance_;
class StatefulStatusPB_ErrorLogEntry_DoNotUse;
class StatefulStatusPB_ErrorLogEntry_DoNotUseDefaultTypeInternal;
extern StatefulStatusPB_ErrorLogEntry_DoNotUseDefaultTypeInternal _StatefulStatusPB_ErrorLogEntry_DoNotUse_default_instance_;
}  // namespace impala
PROTOBUF_NAMESPACE_OPEN
template<> ::impala::AuxErrorInfoPB* Arena::CreateMaybeMessage<::impala::AuxErrorInfoPB>(Arena*);
template<> ::impala::CancelQueryFInstancesRequestPB* Arena::CreateMaybeMessage<::impala::CancelQueryFInstancesRequestPB>(Arena*);
template<> ::impala::CancelQueryFInstancesResponsePB* Arena::CreateMaybeMessage<::impala::CancelQueryFInstancesResponsePB>(Arena*);
template<> ::impala::DmlExecStatusPB* Arena::CreateMaybeMessage<::impala::DmlExecStatusPB>(Arena*);
template<> ::impala::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse* Arena::CreateMaybeMessage<::impala::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse>(Arena*);
template<> ::impala::DmlFileStatusPb* Arena::CreateMaybeMessage<::impala::DmlFileStatusPb>(Arena*);
template<> ::impala::DmlPartitionStatusPB* Arena::CreateMaybeMessage<::impala::DmlPartitionStatusPB>(Arena*);
template<> ::impala::DmlStatsPB* Arena::CreateMaybeMessage<::impala::DmlStatsPB>(Arena*);
template<> ::impala::ErrorLogEntryPB* Arena::CreateMaybeMessage<::impala::ErrorLogEntryPB>(Arena*);
template<> ::impala::ExecQueryFInstancesRequestPB* Arena::CreateMaybeMessage<::impala::ExecQueryFInstancesRequestPB>(Arena*);
template<> ::impala::ExecQueryFInstancesResponsePB* Arena::CreateMaybeMessage<::impala::ExecQueryFInstancesResponsePB>(Arena*);
template<> ::impala::ExecSummaryDataPB* Arena::CreateMaybeMessage<::impala::ExecSummaryDataPB>(Arena*);
template<> ::impala::FragmentExecStatusPB* Arena::CreateMaybeMessage<::impala::FragmentExecStatusPB>(Arena*);
template<> ::impala::FragmentInstanceExecStatusPB* Arena::CreateMaybeMessage<::impala::FragmentInstanceExecStatusPB>(Arena*);
template<> ::impala::JoinBuildInputPB* Arena::CreateMaybeMessage<::impala::JoinBuildInputPB>(Arena*);
template<> ::impala::KuduDmlStatsPB* Arena::CreateMaybeMessage<::impala::KuduDmlStatsPB>(Arena*);
template<> ::impala::ParquetDmlStatsPB* Arena::CreateMaybeMessage<::impala::ParquetDmlStatsPB>(Arena*);
template<> ::impala::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse* Arena::CreateMaybeMessage<::impala::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse>(Arena*);
template<> ::impala::PlanFragmentCtxPB* Arena::CreateMaybeMessage<::impala::PlanFragmentCtxPB>(Arena*);
template<> ::impala::PlanFragmentDestinationPB* Arena::CreateMaybeMessage<::impala::PlanFragmentDestinationPB>(Arena*);
template<> ::impala::PlanFragmentInstanceCtxPB* Arena::CreateMaybeMessage<::impala::PlanFragmentInstanceCtxPB>(Arena*);
template<> ::impala::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse* Arena::CreateMaybeMessage<::impala::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse>(Arena*);
template<> ::impala::RPCErrorInfoPB* Arena::CreateMaybeMessage<::impala::RPCErrorInfoPB>(Arena*);
template<> ::impala::RemoteShutdownParamsPB* Arena::CreateMaybeMessage<::impala::RemoteShutdownParamsPB>(Arena*);
template<> ::impala::RemoteShutdownResultPB* Arena::CreateMaybeMessage<::impala::RemoteShutdownResultPB>(Arena*);
template<> ::impala::ReportExecStatusRequestPB* Arena::CreateMaybeMessage<::impala::ReportExecStatusRequestPB>(Arena*);
template<> ::impala::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse* Arena::CreateMaybeMessage<::impala::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse>(Arena*);
template<> ::impala::ReportExecStatusResponsePB* Arena::CreateMaybeMessage<::impala::ReportExecStatusResponsePB>(Arena*);
template<> ::impala::ScanRangeParamsPB* Arena::CreateMaybeMessage<::impala::ScanRangeParamsPB>(Arena*);
template<> ::impala::ScanRangesPB* Arena::CreateMaybeMessage<::impala::ScanRangesPB>(Arena*);
template<> ::impala::ShutdownStatusPB* Arena::CreateMaybeMessage<::impala::ShutdownStatusPB>(Arena*);
template<> ::impala::StatefulStatusPB* Arena::CreateMaybeMessage<::impala::StatefulStatusPB>(Arena*);
template<> ::impala::StatefulStatusPB_ErrorLogEntry_DoNotUse* Arena::CreateMaybeMessage<::impala::StatefulStatusPB_ErrorLogEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace impala {

enum FInstanceExecStatePB : int {
  WAITING_FOR_EXEC = 0,
  WAITING_FOR_PREPARE = 1,
  WAITING_FOR_CODEGEN = 2,
  WAITING_FOR_OPEN = 3,
  WAITING_FOR_FIRST_BATCH = 4,
  FIRST_BATCH_PRODUCED = 5,
  PRODUCING_DATA = 6,
  LAST_BATCH_SENT = 7,
  FINISHED = 8
};
bool FInstanceExecStatePB_IsValid(int value);
constexpr FInstanceExecStatePB FInstanceExecStatePB_MIN = WAITING_FOR_EXEC;
constexpr FInstanceExecStatePB FInstanceExecStatePB_MAX = FINISHED;
constexpr int FInstanceExecStatePB_ARRAYSIZE = FInstanceExecStatePB_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FInstanceExecStatePB_descriptor();
template<typename T>
inline const std::string& FInstanceExecStatePB_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FInstanceExecStatePB>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FInstanceExecStatePB_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FInstanceExecStatePB_descriptor(), enum_t_value);
}
inline bool FInstanceExecStatePB_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FInstanceExecStatePB* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FInstanceExecStatePB>(
    FInstanceExecStatePB_descriptor(), name, value);
}
// ===================================================================

class ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse();
  explicit ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse& other);
  static const ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse*>(&_ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "impala.ParquetDmlStatsPB.PerColumnSizeEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class ParquetDmlStatsPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.ParquetDmlStatsPB) */ {
 public:
  inline ParquetDmlStatsPB() : ParquetDmlStatsPB(nullptr) {}
  virtual ~ParquetDmlStatsPB();

  ParquetDmlStatsPB(const ParquetDmlStatsPB& from);
  ParquetDmlStatsPB(ParquetDmlStatsPB&& from) noexcept
    : ParquetDmlStatsPB() {
    *this = ::std::move(from);
  }

  inline ParquetDmlStatsPB& operator=(const ParquetDmlStatsPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParquetDmlStatsPB& operator=(ParquetDmlStatsPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParquetDmlStatsPB& default_instance();

  static inline const ParquetDmlStatsPB* internal_default_instance() {
    return reinterpret_cast<const ParquetDmlStatsPB*>(
               &_ParquetDmlStatsPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParquetDmlStatsPB& a, ParquetDmlStatsPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ParquetDmlStatsPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParquetDmlStatsPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParquetDmlStatsPB* New() const final {
    return CreateMaybeMessage<ParquetDmlStatsPB>(nullptr);
  }

  ParquetDmlStatsPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParquetDmlStatsPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParquetDmlStatsPB& from);
  void MergeFrom(const ParquetDmlStatsPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParquetDmlStatsPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.ParquetDmlStatsPB";
  }
  protected:
  explicit ParquetDmlStatsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPerColumnSizeFieldNumber = 1,
  };
  // map<string, int64> per_column_size = 1;
  int per_column_size_size() const;
  private:
  int _internal_per_column_size_size() const;
  public:
  void clear_per_column_size();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_per_column_size() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_per_column_size();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      per_column_size() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_per_column_size();

  // @@protoc_insertion_point(class_scope:impala.ParquetDmlStatsPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> per_column_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class KuduDmlStatsPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.KuduDmlStatsPB) */ {
 public:
  inline KuduDmlStatsPB() : KuduDmlStatsPB(nullptr) {}
  virtual ~KuduDmlStatsPB();

  KuduDmlStatsPB(const KuduDmlStatsPB& from);
  KuduDmlStatsPB(KuduDmlStatsPB&& from) noexcept
    : KuduDmlStatsPB() {
    *this = ::std::move(from);
  }

  inline KuduDmlStatsPB& operator=(const KuduDmlStatsPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline KuduDmlStatsPB& operator=(KuduDmlStatsPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KuduDmlStatsPB& default_instance();

  static inline const KuduDmlStatsPB* internal_default_instance() {
    return reinterpret_cast<const KuduDmlStatsPB*>(
               &_KuduDmlStatsPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KuduDmlStatsPB& a, KuduDmlStatsPB& b) {
    a.Swap(&b);
  }
  inline void Swap(KuduDmlStatsPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KuduDmlStatsPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KuduDmlStatsPB* New() const final {
    return CreateMaybeMessage<KuduDmlStatsPB>(nullptr);
  }

  KuduDmlStatsPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KuduDmlStatsPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KuduDmlStatsPB& from);
  void MergeFrom(const KuduDmlStatsPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KuduDmlStatsPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.KuduDmlStatsPB";
  }
  protected:
  explicit KuduDmlStatsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumRowErrorsFieldNumber = 1,
  };
  // optional int64 num_row_errors = 1;
  bool has_num_row_errors() const;
  private:
  bool _internal_has_num_row_errors() const;
  public:
  void clear_num_row_errors();
  ::PROTOBUF_NAMESPACE_ID::int64 num_row_errors() const;
  void set_num_row_errors(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_row_errors() const;
  void _internal_set_num_row_errors(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.KuduDmlStatsPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_row_errors_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DmlStatsPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.DmlStatsPB) */ {
 public:
  inline DmlStatsPB() : DmlStatsPB(nullptr) {}
  virtual ~DmlStatsPB();

  DmlStatsPB(const DmlStatsPB& from);
  DmlStatsPB(DmlStatsPB&& from) noexcept
    : DmlStatsPB() {
    *this = ::std::move(from);
  }

  inline DmlStatsPB& operator=(const DmlStatsPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmlStatsPB& operator=(DmlStatsPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DmlStatsPB& default_instance();

  static inline const DmlStatsPB* internal_default_instance() {
    return reinterpret_cast<const DmlStatsPB*>(
               &_DmlStatsPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DmlStatsPB& a, DmlStatsPB& b) {
    a.Swap(&b);
  }
  inline void Swap(DmlStatsPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmlStatsPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DmlStatsPB* New() const final {
    return CreateMaybeMessage<DmlStatsPB>(nullptr);
  }

  DmlStatsPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DmlStatsPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DmlStatsPB& from);
  void MergeFrom(const DmlStatsPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmlStatsPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.DmlStatsPB";
  }
  protected:
  explicit DmlStatsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParquetStatsFieldNumber = 2,
    kKuduStatsFieldNumber = 3,
    kBytesWrittenFieldNumber = 1,
  };
  // optional .impala.ParquetDmlStatsPB parquet_stats = 2;
  bool has_parquet_stats() const;
  private:
  bool _internal_has_parquet_stats() const;
  public:
  void clear_parquet_stats();
  const ::impala::ParquetDmlStatsPB& parquet_stats() const;
  ::impala::ParquetDmlStatsPB* release_parquet_stats();
  ::impala::ParquetDmlStatsPB* mutable_parquet_stats();
  void set_allocated_parquet_stats(::impala::ParquetDmlStatsPB* parquet_stats);
  private:
  const ::impala::ParquetDmlStatsPB& _internal_parquet_stats() const;
  ::impala::ParquetDmlStatsPB* _internal_mutable_parquet_stats();
  public:
  void unsafe_arena_set_allocated_parquet_stats(
      ::impala::ParquetDmlStatsPB* parquet_stats);
  ::impala::ParquetDmlStatsPB* unsafe_arena_release_parquet_stats();

  // optional .impala.KuduDmlStatsPB kudu_stats = 3;
  bool has_kudu_stats() const;
  private:
  bool _internal_has_kudu_stats() const;
  public:
  void clear_kudu_stats();
  const ::impala::KuduDmlStatsPB& kudu_stats() const;
  ::impala::KuduDmlStatsPB* release_kudu_stats();
  ::impala::KuduDmlStatsPB* mutable_kudu_stats();
  void set_allocated_kudu_stats(::impala::KuduDmlStatsPB* kudu_stats);
  private:
  const ::impala::KuduDmlStatsPB& _internal_kudu_stats() const;
  ::impala::KuduDmlStatsPB* _internal_mutable_kudu_stats();
  public:
  void unsafe_arena_set_allocated_kudu_stats(
      ::impala::KuduDmlStatsPB* kudu_stats);
  ::impala::KuduDmlStatsPB* unsafe_arena_release_kudu_stats();

  // optional int64 bytes_written = 1;
  bool has_bytes_written() const;
  private:
  bool _internal_has_bytes_written() const;
  public:
  void clear_bytes_written();
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_written() const;
  void set_bytes_written(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytes_written() const;
  void _internal_set_bytes_written(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.DmlStatsPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::ParquetDmlStatsPB* parquet_stats_;
  ::impala::KuduDmlStatsPB* kudu_stats_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_written_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DmlFileStatusPb PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.DmlFileStatusPb) */ {
 public:
  inline DmlFileStatusPb() : DmlFileStatusPb(nullptr) {}
  virtual ~DmlFileStatusPb();

  DmlFileStatusPb(const DmlFileStatusPb& from);
  DmlFileStatusPb(DmlFileStatusPb&& from) noexcept
    : DmlFileStatusPb() {
    *this = ::std::move(from);
  }

  inline DmlFileStatusPb& operator=(const DmlFileStatusPb& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmlFileStatusPb& operator=(DmlFileStatusPb&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DmlFileStatusPb& default_instance();

  static inline const DmlFileStatusPb* internal_default_instance() {
    return reinterpret_cast<const DmlFileStatusPb*>(
               &_DmlFileStatusPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DmlFileStatusPb& a, DmlFileStatusPb& b) {
    a.Swap(&b);
  }
  inline void Swap(DmlFileStatusPb* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmlFileStatusPb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DmlFileStatusPb* New() const final {
    return CreateMaybeMessage<DmlFileStatusPb>(nullptr);
  }

  DmlFileStatusPb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DmlFileStatusPb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DmlFileStatusPb& from);
  void MergeFrom(const DmlFileStatusPb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmlFileStatusPb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.DmlFileStatusPb";
  }
  protected:
  explicit DmlFileStatusPb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinalPathFieldNumber = 1,
    kStagingPathFieldNumber = 4,
    kIcebergDataFileFbFieldNumber = 5,
    kNumRowsFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // required string final_path = 1;
  bool has_final_path() const;
  private:
  bool _internal_has_final_path() const;
  public:
  void clear_final_path();
  const std::string& final_path() const;
  void set_final_path(const std::string& value);
  void set_final_path(std::string&& value);
  void set_final_path(const char* value);
  void set_final_path(const char* value, size_t size);
  std::string* mutable_final_path();
  std::string* release_final_path();
  void set_allocated_final_path(std::string* final_path);
  private:
  const std::string& _internal_final_path() const;
  void _internal_set_final_path(const std::string& value);
  std::string* _internal_mutable_final_path();
  public:

  // optional string staging_path = 4;
  bool has_staging_path() const;
  private:
  bool _internal_has_staging_path() const;
  public:
  void clear_staging_path();
  const std::string& staging_path() const;
  void set_staging_path(const std::string& value);
  void set_staging_path(std::string&& value);
  void set_staging_path(const char* value);
  void set_staging_path(const char* value, size_t size);
  std::string* mutable_staging_path();
  std::string* release_staging_path();
  void set_allocated_staging_path(std::string* staging_path);
  private:
  const std::string& _internal_staging_path() const;
  void _internal_set_staging_path(const std::string& value);
  std::string* _internal_mutable_staging_path();
  public:

  // optional bytes iceberg_data_file_fb = 5;
  bool has_iceberg_data_file_fb() const;
  private:
  bool _internal_has_iceberg_data_file_fb() const;
  public:
  void clear_iceberg_data_file_fb();
  const std::string& iceberg_data_file_fb() const;
  void set_iceberg_data_file_fb(const std::string& value);
  void set_iceberg_data_file_fb(std::string&& value);
  void set_iceberg_data_file_fb(const char* value);
  void set_iceberg_data_file_fb(const void* value, size_t size);
  std::string* mutable_iceberg_data_file_fb();
  std::string* release_iceberg_data_file_fb();
  void set_allocated_iceberg_data_file_fb(std::string* iceberg_data_file_fb);
  private:
  const std::string& _internal_iceberg_data_file_fb() const;
  void _internal_set_iceberg_data_file_fb(const std::string& value);
  std::string* _internal_mutable_iceberg_data_file_fb();
  public:

  // required int64 num_rows = 2;
  bool has_num_rows() const;
  private:
  bool _internal_has_num_rows() const;
  public:
  void clear_num_rows();
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows() const;
  void set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_rows() const;
  void _internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.DmlFileStatusPb)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr final_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr staging_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iceberg_data_file_fb_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_rows_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DmlPartitionStatusPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.DmlPartitionStatusPB) */ {
 public:
  inline DmlPartitionStatusPB() : DmlPartitionStatusPB(nullptr) {}
  virtual ~DmlPartitionStatusPB();

  DmlPartitionStatusPB(const DmlPartitionStatusPB& from);
  DmlPartitionStatusPB(DmlPartitionStatusPB&& from) noexcept
    : DmlPartitionStatusPB() {
    *this = ::std::move(from);
  }

  inline DmlPartitionStatusPB& operator=(const DmlPartitionStatusPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmlPartitionStatusPB& operator=(DmlPartitionStatusPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DmlPartitionStatusPB& default_instance();

  static inline const DmlPartitionStatusPB* internal_default_instance() {
    return reinterpret_cast<const DmlPartitionStatusPB*>(
               &_DmlPartitionStatusPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DmlPartitionStatusPB& a, DmlPartitionStatusPB& b) {
    a.Swap(&b);
  }
  inline void Swap(DmlPartitionStatusPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmlPartitionStatusPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DmlPartitionStatusPB* New() const final {
    return CreateMaybeMessage<DmlPartitionStatusPB>(nullptr);
  }

  DmlPartitionStatusPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DmlPartitionStatusPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DmlPartitionStatusPB& from);
  void MergeFrom(const DmlPartitionStatusPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmlPartitionStatusPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.DmlPartitionStatusPB";
  }
  protected:
  explicit DmlPartitionStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedFilesFieldNumber = 6,
    kPartitionBaseDirFieldNumber = 4,
    kStagingDirToCleanUpFieldNumber = 7,
    kStatsFieldNumber = 3,
    kIdFieldNumber = 1,
    kNumModifiedRowsFieldNumber = 2,
    kKuduLatestObservedTsFieldNumber = 5,
  };
  // repeated .impala.DmlFileStatusPb created_files = 6;
  int created_files_size() const;
  private:
  int _internal_created_files_size() const;
  public:
  void clear_created_files();
  ::impala::DmlFileStatusPb* mutable_created_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::DmlFileStatusPb >*
      mutable_created_files();
  private:
  const ::impala::DmlFileStatusPb& _internal_created_files(int index) const;
  ::impala::DmlFileStatusPb* _internal_add_created_files();
  public:
  const ::impala::DmlFileStatusPb& created_files(int index) const;
  ::impala::DmlFileStatusPb* add_created_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::DmlFileStatusPb >&
      created_files() const;

  // optional string partition_base_dir = 4;
  bool has_partition_base_dir() const;
  private:
  bool _internal_has_partition_base_dir() const;
  public:
  void clear_partition_base_dir();
  const std::string& partition_base_dir() const;
  void set_partition_base_dir(const std::string& value);
  void set_partition_base_dir(std::string&& value);
  void set_partition_base_dir(const char* value);
  void set_partition_base_dir(const char* value, size_t size);
  std::string* mutable_partition_base_dir();
  std::string* release_partition_base_dir();
  void set_allocated_partition_base_dir(std::string* partition_base_dir);
  private:
  const std::string& _internal_partition_base_dir() const;
  void _internal_set_partition_base_dir(const std::string& value);
  std::string* _internal_mutable_partition_base_dir();
  public:

  // optional string staging_dir_to_clean_up = 7;
  bool has_staging_dir_to_clean_up() const;
  private:
  bool _internal_has_staging_dir_to_clean_up() const;
  public:
  void clear_staging_dir_to_clean_up();
  const std::string& staging_dir_to_clean_up() const;
  void set_staging_dir_to_clean_up(const std::string& value);
  void set_staging_dir_to_clean_up(std::string&& value);
  void set_staging_dir_to_clean_up(const char* value);
  void set_staging_dir_to_clean_up(const char* value, size_t size);
  std::string* mutable_staging_dir_to_clean_up();
  std::string* release_staging_dir_to_clean_up();
  void set_allocated_staging_dir_to_clean_up(std::string* staging_dir_to_clean_up);
  private:
  const std::string& _internal_staging_dir_to_clean_up() const;
  void _internal_set_staging_dir_to_clean_up(const std::string& value);
  std::string* _internal_mutable_staging_dir_to_clean_up();
  public:

  // optional .impala.DmlStatsPB stats = 3;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::impala::DmlStatsPB& stats() const;
  ::impala::DmlStatsPB* release_stats();
  ::impala::DmlStatsPB* mutable_stats();
  void set_allocated_stats(::impala::DmlStatsPB* stats);
  private:
  const ::impala::DmlStatsPB& _internal_stats() const;
  ::impala::DmlStatsPB* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::impala::DmlStatsPB* stats);
  ::impala::DmlStatsPB* unsafe_arena_release_stats();

  // optional int64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 num_modified_rows = 2;
  bool has_num_modified_rows() const;
  private:
  bool _internal_has_num_modified_rows() const;
  public:
  void clear_num_modified_rows();
  ::PROTOBUF_NAMESPACE_ID::int64 num_modified_rows() const;
  void set_num_modified_rows(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_modified_rows() const;
  void _internal_set_num_modified_rows(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 kudu_latest_observed_ts = 5;
  bool has_kudu_latest_observed_ts() const;
  private:
  bool _internal_has_kudu_latest_observed_ts() const;
  public:
  void clear_kudu_latest_observed_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 kudu_latest_observed_ts() const;
  void set_kudu_latest_observed_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_kudu_latest_observed_ts() const;
  void _internal_set_kudu_latest_observed_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.DmlPartitionStatusPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::DmlFileStatusPb > created_files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_base_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr staging_dir_to_clean_up_;
  ::impala::DmlStatsPB* stats_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_modified_rows_;
  ::PROTOBUF_NAMESPACE_ID::int64 kudu_latest_observed_ts_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse, 
    std::string, ::impala::DmlPartitionStatusPB,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse, 
    std::string, ::impala::DmlPartitionStatusPB,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse();
  explicit DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse& other);
  static const DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse*>(&_DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "impala.DmlExecStatusPB.PerPartitionStatusEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class DmlExecStatusPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.DmlExecStatusPB) */ {
 public:
  inline DmlExecStatusPB() : DmlExecStatusPB(nullptr) {}
  virtual ~DmlExecStatusPB();

  DmlExecStatusPB(const DmlExecStatusPB& from);
  DmlExecStatusPB(DmlExecStatusPB&& from) noexcept
    : DmlExecStatusPB() {
    *this = ::std::move(from);
  }

  inline DmlExecStatusPB& operator=(const DmlExecStatusPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmlExecStatusPB& operator=(DmlExecStatusPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DmlExecStatusPB& default_instance();

  static inline const DmlExecStatusPB* internal_default_instance() {
    return reinterpret_cast<const DmlExecStatusPB*>(
               &_DmlExecStatusPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DmlExecStatusPB& a, DmlExecStatusPB& b) {
    a.Swap(&b);
  }
  inline void Swap(DmlExecStatusPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmlExecStatusPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DmlExecStatusPB* New() const final {
    return CreateMaybeMessage<DmlExecStatusPB>(nullptr);
  }

  DmlExecStatusPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DmlExecStatusPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DmlExecStatusPB& from);
  void MergeFrom(const DmlExecStatusPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmlExecStatusPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.DmlExecStatusPB";
  }
  protected:
  explicit DmlExecStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPerPartitionStatusFieldNumber = 1,
  };
  // map<string, .impala.DmlPartitionStatusPB> per_partition_status = 1;
  int per_partition_status_size() const;
  private:
  int _internal_per_partition_status_size() const;
  public:
  void clear_per_partition_status();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >&
      _internal_per_partition_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >*
      _internal_mutable_per_partition_status();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >&
      per_partition_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >*
      mutable_per_partition_status();

  // @@protoc_insertion_point(class_scope:impala.DmlExecStatusPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse,
      std::string, ::impala::DmlPartitionStatusPB,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> per_partition_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ErrorLogEntryPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.ErrorLogEntryPB) */ {
 public:
  inline ErrorLogEntryPB() : ErrorLogEntryPB(nullptr) {}
  virtual ~ErrorLogEntryPB();

  ErrorLogEntryPB(const ErrorLogEntryPB& from);
  ErrorLogEntryPB(ErrorLogEntryPB&& from) noexcept
    : ErrorLogEntryPB() {
    *this = ::std::move(from);
  }

  inline ErrorLogEntryPB& operator=(const ErrorLogEntryPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorLogEntryPB& operator=(ErrorLogEntryPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ErrorLogEntryPB& default_instance();

  static inline const ErrorLogEntryPB* internal_default_instance() {
    return reinterpret_cast<const ErrorLogEntryPB*>(
               &_ErrorLogEntryPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ErrorLogEntryPB& a, ErrorLogEntryPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorLogEntryPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorLogEntryPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorLogEntryPB* New() const final {
    return CreateMaybeMessage<ErrorLogEntryPB>(nullptr);
  }

  ErrorLogEntryPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorLogEntryPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorLogEntryPB& from);
  void MergeFrom(const ErrorLogEntryPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorLogEntryPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.ErrorLogEntryPB";
  }
  protected:
  explicit ErrorLogEntryPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kCountFieldNumber = 1,
  };
  // repeated string messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  const std::string& messages(int index) const;
  std::string* mutable_messages(int index);
  void set_messages(int index, const std::string& value);
  void set_messages(int index, std::string&& value);
  void set_messages(int index, const char* value);
  void set_messages(int index, const char* value, size_t size);
  std::string* add_messages();
  void add_messages(const std::string& value);
  void add_messages(std::string&& value);
  void add_messages(const char* value);
  void add_messages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_messages();
  private:
  const std::string& _internal_messages(int index) const;
  std::string* _internal_add_messages();
  public:

  // optional int32 count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.ErrorLogEntryPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> messages_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StatefulStatusPB_ErrorLogEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StatefulStatusPB_ErrorLogEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StatefulStatusPB_ErrorLogEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  StatefulStatusPB_ErrorLogEntry_DoNotUse();
  explicit StatefulStatusPB_ErrorLogEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StatefulStatusPB_ErrorLogEntry_DoNotUse& other);
  static const StatefulStatusPB_ErrorLogEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StatefulStatusPB_ErrorLogEntry_DoNotUse*>(&_StatefulStatusPB_ErrorLogEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class StatefulStatusPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.StatefulStatusPB) */ {
 public:
  inline StatefulStatusPB() : StatefulStatusPB(nullptr) {}
  virtual ~StatefulStatusPB();

  StatefulStatusPB(const StatefulStatusPB& from);
  StatefulStatusPB(StatefulStatusPB&& from) noexcept
    : StatefulStatusPB() {
    *this = ::std::move(from);
  }

  inline StatefulStatusPB& operator=(const StatefulStatusPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatefulStatusPB& operator=(StatefulStatusPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatefulStatusPB& default_instance();

  static inline const StatefulStatusPB* internal_default_instance() {
    return reinterpret_cast<const StatefulStatusPB*>(
               &_StatefulStatusPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StatefulStatusPB& a, StatefulStatusPB& b) {
    a.Swap(&b);
  }
  inline void Swap(StatefulStatusPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatefulStatusPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatefulStatusPB* New() const final {
    return CreateMaybeMessage<StatefulStatusPB>(nullptr);
  }

  StatefulStatusPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatefulStatusPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatefulStatusPB& from);
  void MergeFrom(const StatefulStatusPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatefulStatusPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.StatefulStatusPB";
  }
  protected:
  explicit StatefulStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kErrorLogFieldNumber = 2,
    kAuxErrorInfoFieldNumber = 3,
    kReportSeqNoFieldNumber = 1,
  };
  // map<int32, .impala.ErrorLogEntryPB> error_log = 2;
  int error_log_size() const;
  private:
  int _internal_error_log_size() const;
  public:
  void clear_error_log();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >&
      _internal_error_log() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >*
      _internal_mutable_error_log();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >&
      error_log() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >*
      mutable_error_log();

  // optional .impala.AuxErrorInfoPB aux_error_info = 3;
  bool has_aux_error_info() const;
  private:
  bool _internal_has_aux_error_info() const;
  public:
  void clear_aux_error_info();
  const ::impala::AuxErrorInfoPB& aux_error_info() const;
  ::impala::AuxErrorInfoPB* release_aux_error_info();
  ::impala::AuxErrorInfoPB* mutable_aux_error_info();
  void set_allocated_aux_error_info(::impala::AuxErrorInfoPB* aux_error_info);
  private:
  const ::impala::AuxErrorInfoPB& _internal_aux_error_info() const;
  ::impala::AuxErrorInfoPB* _internal_mutable_aux_error_info();
  public:
  void unsafe_arena_set_allocated_aux_error_info(
      ::impala::AuxErrorInfoPB* aux_error_info);
  ::impala::AuxErrorInfoPB* unsafe_arena_release_aux_error_info();

  // optional int64 report_seq_no = 1;
  bool has_report_seq_no() const;
  private:
  bool _internal_has_report_seq_no() const;
  public:
  void clear_report_seq_no();
  ::PROTOBUF_NAMESPACE_ID::int64 report_seq_no() const;
  void set_report_seq_no(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_report_seq_no() const;
  void _internal_set_report_seq_no(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.StatefulStatusPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StatefulStatusPB_ErrorLogEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> error_log_;
  ::impala::AuxErrorInfoPB* aux_error_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 report_seq_no_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ExecSummaryDataPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.ExecSummaryDataPB) */ {
 public:
  inline ExecSummaryDataPB() : ExecSummaryDataPB(nullptr) {}
  virtual ~ExecSummaryDataPB();

  ExecSummaryDataPB(const ExecSummaryDataPB& from);
  ExecSummaryDataPB(ExecSummaryDataPB&& from) noexcept
    : ExecSummaryDataPB() {
    *this = ::std::move(from);
  }

  inline ExecSummaryDataPB& operator=(const ExecSummaryDataPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecSummaryDataPB& operator=(ExecSummaryDataPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecSummaryDataPB& default_instance();

  static inline const ExecSummaryDataPB* internal_default_instance() {
    return reinterpret_cast<const ExecSummaryDataPB*>(
               &_ExecSummaryDataPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ExecSummaryDataPB& a, ExecSummaryDataPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecSummaryDataPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecSummaryDataPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecSummaryDataPB* New() const final {
    return CreateMaybeMessage<ExecSummaryDataPB>(nullptr);
  }

  ExecSummaryDataPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecSummaryDataPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecSummaryDataPB& from);
  void MergeFrom(const ExecSummaryDataPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecSummaryDataPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.ExecSummaryDataPB";
  }
  protected:
  explicit ExecSummaryDataPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanNodeIdFieldNumber = 1,
    kDataSinkIdFieldNumber = 2,
    kRowsReturnedFieldNumber = 3,
    kPeakMemUsageFieldNumber = 4,
    kLocalTimeNsFieldNumber = 5,
  };
  // optional int32 plan_node_id = 1;
  bool has_plan_node_id() const;
  private:
  bool _internal_has_plan_node_id() const;
  public:
  void clear_plan_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 plan_node_id() const;
  void set_plan_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plan_node_id() const;
  void _internal_set_plan_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 data_sink_id = 2;
  bool has_data_sink_id() const;
  private:
  bool _internal_has_data_sink_id() const;
  public:
  void clear_data_sink_id();
  ::PROTOBUF_NAMESPACE_ID::int32 data_sink_id() const;
  void set_data_sink_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_sink_id() const;
  void _internal_set_data_sink_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 rows_returned = 3;
  bool has_rows_returned() const;
  private:
  bool _internal_has_rows_returned() const;
  public:
  void clear_rows_returned();
  ::PROTOBUF_NAMESPACE_ID::int64 rows_returned() const;
  void set_rows_returned(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rows_returned() const;
  void _internal_set_rows_returned(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 peak_mem_usage = 4;
  bool has_peak_mem_usage() const;
  private:
  bool _internal_has_peak_mem_usage() const;
  public:
  void clear_peak_mem_usage();
  ::PROTOBUF_NAMESPACE_ID::int64 peak_mem_usage() const;
  void set_peak_mem_usage(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_peak_mem_usage() const;
  void _internal_set_peak_mem_usage(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 local_time_ns = 5;
  bool has_local_time_ns() const;
  private:
  bool _internal_has_local_time_ns() const;
  public:
  void clear_local_time_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 local_time_ns() const;
  void set_local_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_local_time_ns() const;
  void _internal_set_local_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.ExecSummaryDataPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 plan_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_sink_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 rows_returned_;
  ::PROTOBUF_NAMESPACE_ID::int64 peak_mem_usage_;
  ::PROTOBUF_NAMESPACE_ID::int64 local_time_ns_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RPCErrorInfoPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.RPCErrorInfoPB) */ {
 public:
  inline RPCErrorInfoPB() : RPCErrorInfoPB(nullptr) {}
  virtual ~RPCErrorInfoPB();

  RPCErrorInfoPB(const RPCErrorInfoPB& from);
  RPCErrorInfoPB(RPCErrorInfoPB&& from) noexcept
    : RPCErrorInfoPB() {
    *this = ::std::move(from);
  }

  inline RPCErrorInfoPB& operator=(const RPCErrorInfoPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline RPCErrorInfoPB& operator=(RPCErrorInfoPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RPCErrorInfoPB& default_instance();

  static inline const RPCErrorInfoPB* internal_default_instance() {
    return reinterpret_cast<const RPCErrorInfoPB*>(
               &_RPCErrorInfoPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RPCErrorInfoPB& a, RPCErrorInfoPB& b) {
    a.Swap(&b);
  }
  inline void Swap(RPCErrorInfoPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RPCErrorInfoPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RPCErrorInfoPB* New() const final {
    return CreateMaybeMessage<RPCErrorInfoPB>(nullptr);
  }

  RPCErrorInfoPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RPCErrorInfoPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RPCErrorInfoPB& from);
  void MergeFrom(const RPCErrorInfoPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCErrorInfoPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.RPCErrorInfoPB";
  }
  protected:
  explicit RPCErrorInfoPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestNodeFieldNumber = 1,
    kPosixErrorCodeFieldNumber = 2,
  };
  // required .impala.NetworkAddressPB dest_node = 1;
  bool has_dest_node() const;
  private:
  bool _internal_has_dest_node() const;
  public:
  void clear_dest_node();
  const ::impala::NetworkAddressPB& dest_node() const;
  ::impala::NetworkAddressPB* release_dest_node();
  ::impala::NetworkAddressPB* mutable_dest_node();
  void set_allocated_dest_node(::impala::NetworkAddressPB* dest_node);
  private:
  const ::impala::NetworkAddressPB& _internal_dest_node() const;
  ::impala::NetworkAddressPB* _internal_mutable_dest_node();
  public:
  void unsafe_arena_set_allocated_dest_node(
      ::impala::NetworkAddressPB* dest_node);
  ::impala::NetworkAddressPB* unsafe_arena_release_dest_node();

  // required int32 posix_error_code = 2;
  bool has_posix_error_code() const;
  private:
  bool _internal_has_posix_error_code() const;
  public:
  void clear_posix_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 posix_error_code() const;
  void set_posix_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_posix_error_code() const;
  void _internal_set_posix_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.RPCErrorInfoPB)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::NetworkAddressPB* dest_node_;
  ::PROTOBUF_NAMESPACE_ID::int32 posix_error_code_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AuxErrorInfoPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.AuxErrorInfoPB) */ {
 public:
  inline AuxErrorInfoPB() : AuxErrorInfoPB(nullptr) {}
  virtual ~AuxErrorInfoPB();

  AuxErrorInfoPB(const AuxErrorInfoPB& from);
  AuxErrorInfoPB(AuxErrorInfoPB&& from) noexcept
    : AuxErrorInfoPB() {
    *this = ::std::move(from);
  }

  inline AuxErrorInfoPB& operator=(const AuxErrorInfoPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuxErrorInfoPB& operator=(AuxErrorInfoPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuxErrorInfoPB& default_instance();

  static inline const AuxErrorInfoPB* internal_default_instance() {
    return reinterpret_cast<const AuxErrorInfoPB*>(
               &_AuxErrorInfoPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AuxErrorInfoPB& a, AuxErrorInfoPB& b) {
    a.Swap(&b);
  }
  inline void Swap(AuxErrorInfoPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuxErrorInfoPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuxErrorInfoPB* New() const final {
    return CreateMaybeMessage<AuxErrorInfoPB>(nullptr);
  }

  AuxErrorInfoPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuxErrorInfoPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuxErrorInfoPB& from);
  void MergeFrom(const AuxErrorInfoPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuxErrorInfoPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.AuxErrorInfoPB";
  }
  protected:
  explicit AuxErrorInfoPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpcErrorInfoFieldNumber = 1,
  };
  // optional .impala.RPCErrorInfoPB rpc_error_info = 1;
  bool has_rpc_error_info() const;
  private:
  bool _internal_has_rpc_error_info() const;
  public:
  void clear_rpc_error_info();
  const ::impala::RPCErrorInfoPB& rpc_error_info() const;
  ::impala::RPCErrorInfoPB* release_rpc_error_info();
  ::impala::RPCErrorInfoPB* mutable_rpc_error_info();
  void set_allocated_rpc_error_info(::impala::RPCErrorInfoPB* rpc_error_info);
  private:
  const ::impala::RPCErrorInfoPB& _internal_rpc_error_info() const;
  ::impala::RPCErrorInfoPB* _internal_mutable_rpc_error_info();
  public:
  void unsafe_arena_set_allocated_rpc_error_info(
      ::impala::RPCErrorInfoPB* rpc_error_info);
  ::impala::RPCErrorInfoPB* unsafe_arena_release_rpc_error_info();

  // @@protoc_insertion_point(class_scope:impala.AuxErrorInfoPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::RPCErrorInfoPB* rpc_error_info_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FragmentInstanceExecStatusPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.FragmentInstanceExecStatusPB) */ {
 public:
  inline FragmentInstanceExecStatusPB() : FragmentInstanceExecStatusPB(nullptr) {}
  virtual ~FragmentInstanceExecStatusPB();

  FragmentInstanceExecStatusPB(const FragmentInstanceExecStatusPB& from);
  FragmentInstanceExecStatusPB(FragmentInstanceExecStatusPB&& from) noexcept
    : FragmentInstanceExecStatusPB() {
    *this = ::std::move(from);
  }

  inline FragmentInstanceExecStatusPB& operator=(const FragmentInstanceExecStatusPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline FragmentInstanceExecStatusPB& operator=(FragmentInstanceExecStatusPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FragmentInstanceExecStatusPB& default_instance();

  static inline const FragmentInstanceExecStatusPB* internal_default_instance() {
    return reinterpret_cast<const FragmentInstanceExecStatusPB*>(
               &_FragmentInstanceExecStatusPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FragmentInstanceExecStatusPB& a, FragmentInstanceExecStatusPB& b) {
    a.Swap(&b);
  }
  inline void Swap(FragmentInstanceExecStatusPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FragmentInstanceExecStatusPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FragmentInstanceExecStatusPB* New() const final {
    return CreateMaybeMessage<FragmentInstanceExecStatusPB>(nullptr);
  }

  FragmentInstanceExecStatusPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FragmentInstanceExecStatusPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FragmentInstanceExecStatusPB& from);
  void MergeFrom(const FragmentInstanceExecStatusPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FragmentInstanceExecStatusPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.FragmentInstanceExecStatusPB";
  }
  protected:
  explicit FragmentInstanceExecStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatefulReportFieldNumber = 6,
    kExecSummaryDataFieldNumber = 7,
    kFragmentInstanceIdFieldNumber = 2,
    kDmlExecStatusFieldNumber = 5,
    kReportSeqNoFieldNumber = 1,
    kDoneFieldNumber = 3,
    kCurrentStateFieldNumber = 4,
  };
  // repeated .impala.StatefulStatusPB stateful_report = 6;
  int stateful_report_size() const;
  private:
  int _internal_stateful_report_size() const;
  public:
  void clear_stateful_report();
  ::impala::StatefulStatusPB* mutable_stateful_report(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::StatefulStatusPB >*
      mutable_stateful_report();
  private:
  const ::impala::StatefulStatusPB& _internal_stateful_report(int index) const;
  ::impala::StatefulStatusPB* _internal_add_stateful_report();
  public:
  const ::impala::StatefulStatusPB& stateful_report(int index) const;
  ::impala::StatefulStatusPB* add_stateful_report();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::StatefulStatusPB >&
      stateful_report() const;

  // repeated .impala.ExecSummaryDataPB exec_summary_data = 7;
  int exec_summary_data_size() const;
  private:
  int _internal_exec_summary_data_size() const;
  public:
  void clear_exec_summary_data();
  ::impala::ExecSummaryDataPB* mutable_exec_summary_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ExecSummaryDataPB >*
      mutable_exec_summary_data();
  private:
  const ::impala::ExecSummaryDataPB& _internal_exec_summary_data(int index) const;
  ::impala::ExecSummaryDataPB* _internal_add_exec_summary_data();
  public:
  const ::impala::ExecSummaryDataPB& exec_summary_data(int index) const;
  ::impala::ExecSummaryDataPB* add_exec_summary_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ExecSummaryDataPB >&
      exec_summary_data() const;

  // optional .impala.UniqueIdPB fragment_instance_id = 2;
  bool has_fragment_instance_id() const;
  private:
  bool _internal_has_fragment_instance_id() const;
  public:
  void clear_fragment_instance_id();
  const ::impala::UniqueIdPB& fragment_instance_id() const;
  ::impala::UniqueIdPB* release_fragment_instance_id();
  ::impala::UniqueIdPB* mutable_fragment_instance_id();
  void set_allocated_fragment_instance_id(::impala::UniqueIdPB* fragment_instance_id);
  private:
  const ::impala::UniqueIdPB& _internal_fragment_instance_id() const;
  ::impala::UniqueIdPB* _internal_mutable_fragment_instance_id();
  public:
  void unsafe_arena_set_allocated_fragment_instance_id(
      ::impala::UniqueIdPB* fragment_instance_id);
  ::impala::UniqueIdPB* unsafe_arena_release_fragment_instance_id();

  // optional .impala.DmlExecStatusPB dml_exec_status = 5;
  bool has_dml_exec_status() const;
  private:
  bool _internal_has_dml_exec_status() const;
  public:
  void clear_dml_exec_status();
  const ::impala::DmlExecStatusPB& dml_exec_status() const;
  ::impala::DmlExecStatusPB* release_dml_exec_status();
  ::impala::DmlExecStatusPB* mutable_dml_exec_status();
  void set_allocated_dml_exec_status(::impala::DmlExecStatusPB* dml_exec_status);
  private:
  const ::impala::DmlExecStatusPB& _internal_dml_exec_status() const;
  ::impala::DmlExecStatusPB* _internal_mutable_dml_exec_status();
  public:
  void unsafe_arena_set_allocated_dml_exec_status(
      ::impala::DmlExecStatusPB* dml_exec_status);
  ::impala::DmlExecStatusPB* unsafe_arena_release_dml_exec_status();

  // optional int64 report_seq_no = 1;
  bool has_report_seq_no() const;
  private:
  bool _internal_has_report_seq_no() const;
  public:
  void clear_report_seq_no();
  ::PROTOBUF_NAMESPACE_ID::int64 report_seq_no() const;
  void set_report_seq_no(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_report_seq_no() const;
  void _internal_set_report_seq_no(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool done = 3;
  bool has_done() const;
  private:
  bool _internal_has_done() const;
  public:
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // optional .impala.FInstanceExecStatePB current_state = 4;
  bool has_current_state() const;
  private:
  bool _internal_has_current_state() const;
  public:
  void clear_current_state();
  ::impala::FInstanceExecStatePB current_state() const;
  void set_current_state(::impala::FInstanceExecStatePB value);
  private:
  ::impala::FInstanceExecStatePB _internal_current_state() const;
  void _internal_set_current_state(::impala::FInstanceExecStatePB value);
  public:

  // @@protoc_insertion_point(class_scope:impala.FragmentInstanceExecStatusPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::StatefulStatusPB > stateful_report_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ExecSummaryDataPB > exec_summary_data_;
  ::impala::UniqueIdPB* fragment_instance_id_;
  ::impala::DmlExecStatusPB* dml_exec_status_;
  ::PROTOBUF_NAMESPACE_ID::int64 report_seq_no_;
  bool done_;
  int current_state_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FragmentExecStatusPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.FragmentExecStatusPB) */ {
 public:
  inline FragmentExecStatusPB() : FragmentExecStatusPB(nullptr) {}
  virtual ~FragmentExecStatusPB();

  FragmentExecStatusPB(const FragmentExecStatusPB& from);
  FragmentExecStatusPB(FragmentExecStatusPB&& from) noexcept
    : FragmentExecStatusPB() {
    *this = ::std::move(from);
  }

  inline FragmentExecStatusPB& operator=(const FragmentExecStatusPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline FragmentExecStatusPB& operator=(FragmentExecStatusPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FragmentExecStatusPB& default_instance();

  static inline const FragmentExecStatusPB* internal_default_instance() {
    return reinterpret_cast<const FragmentExecStatusPB*>(
               &_FragmentExecStatusPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FragmentExecStatusPB& a, FragmentExecStatusPB& b) {
    a.Swap(&b);
  }
  inline void Swap(FragmentExecStatusPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FragmentExecStatusPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FragmentExecStatusPB* New() const final {
    return CreateMaybeMessage<FragmentExecStatusPB>(nullptr);
  }

  FragmentExecStatusPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FragmentExecStatusPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FragmentExecStatusPB& from);
  void MergeFrom(const FragmentExecStatusPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FragmentExecStatusPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.FragmentExecStatusPB";
  }
  protected:
  explicit FragmentExecStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFragmentIdxFieldNumber = 1,
    kMinPerFragmentInstanceIdxFieldNumber = 2,
  };
  // optional int32 fragment_idx = 1;
  bool has_fragment_idx() const;
  private:
  bool _internal_has_fragment_idx() const;
  public:
  void clear_fragment_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_idx() const;
  void set_fragment_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fragment_idx() const;
  void _internal_set_fragment_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 min_per_fragment_instance_idx = 2;
  bool has_min_per_fragment_instance_idx() const;
  private:
  bool _internal_has_min_per_fragment_instance_idx() const;
  public:
  void clear_min_per_fragment_instance_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 min_per_fragment_instance_idx() const;
  void set_min_per_fragment_instance_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_per_fragment_instance_idx() const;
  void _internal_set_min_per_fragment_instance_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.FragmentExecStatusPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_per_fragment_instance_idx_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse();
  explicit ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse& other);
  static const ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse*>(&_ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[16];
  }

  public:
};

// -------------------------------------------------------------------

class ReportExecStatusRequestPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.ReportExecStatusRequestPB) */ {
 public:
  inline ReportExecStatusRequestPB() : ReportExecStatusRequestPB(nullptr) {}
  virtual ~ReportExecStatusRequestPB();

  ReportExecStatusRequestPB(const ReportExecStatusRequestPB& from);
  ReportExecStatusRequestPB(ReportExecStatusRequestPB&& from) noexcept
    : ReportExecStatusRequestPB() {
    *this = ::std::move(from);
  }

  inline ReportExecStatusRequestPB& operator=(const ReportExecStatusRequestPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportExecStatusRequestPB& operator=(ReportExecStatusRequestPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportExecStatusRequestPB& default_instance();

  static inline const ReportExecStatusRequestPB* internal_default_instance() {
    return reinterpret_cast<const ReportExecStatusRequestPB*>(
               &_ReportExecStatusRequestPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ReportExecStatusRequestPB& a, ReportExecStatusRequestPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportExecStatusRequestPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportExecStatusRequestPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportExecStatusRequestPB* New() const final {
    return CreateMaybeMessage<ReportExecStatusRequestPB>(nullptr);
  }

  ReportExecStatusRequestPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportExecStatusRequestPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportExecStatusRequestPB& from);
  void MergeFrom(const ReportExecStatusRequestPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportExecStatusRequestPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.ReportExecStatusRequestPB";
  }
  protected:
  explicit ReportExecStatusRequestPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInstanceExecStatusFieldNumber = 3,
    kFragmentExecStatusFieldNumber = 14,
    kPerJoinRowsProducedFieldNumber = 16,
    kQueryIdFieldNumber = 1,
    kOverallStatusFieldNumber = 5,
    kFragmentInstanceIdFieldNumber = 6,
    kCoordStateIdxFieldNumber = 2,
    kThriftProfilesSidecarIdxFieldNumber = 4,
    kPeakMemConsumptionFieldNumber = 7,
    kCpuUserNsFieldNumber = 8,
    kCpuSysNsFieldNumber = 9,
    kBytesReadFieldNumber = 10,
    kScanRangesCompleteFieldNumber = 11,
    kExchangeBytesSentFieldNumber = 12,
    kScanBytesSentFieldNumber = 13,
    kBackendReportSeqNoFieldNumber = 15,
    kLocalDiskFaultyFieldNumber = 17,
  };
  // repeated .impala.FragmentInstanceExecStatusPB instance_exec_status = 3;
  int instance_exec_status_size() const;
  private:
  int _internal_instance_exec_status_size() const;
  public:
  void clear_instance_exec_status();
  ::impala::FragmentInstanceExecStatusPB* mutable_instance_exec_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::FragmentInstanceExecStatusPB >*
      mutable_instance_exec_status();
  private:
  const ::impala::FragmentInstanceExecStatusPB& _internal_instance_exec_status(int index) const;
  ::impala::FragmentInstanceExecStatusPB* _internal_add_instance_exec_status();
  public:
  const ::impala::FragmentInstanceExecStatusPB& instance_exec_status(int index) const;
  ::impala::FragmentInstanceExecStatusPB* add_instance_exec_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::FragmentInstanceExecStatusPB >&
      instance_exec_status() const;

  // repeated .impala.FragmentExecStatusPB fragment_exec_status = 14;
  int fragment_exec_status_size() const;
  private:
  int _internal_fragment_exec_status_size() const;
  public:
  void clear_fragment_exec_status();
  ::impala::FragmentExecStatusPB* mutable_fragment_exec_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::FragmentExecStatusPB >*
      mutable_fragment_exec_status();
  private:
  const ::impala::FragmentExecStatusPB& _internal_fragment_exec_status(int index) const;
  ::impala::FragmentExecStatusPB* _internal_add_fragment_exec_status();
  public:
  const ::impala::FragmentExecStatusPB& fragment_exec_status(int index) const;
  ::impala::FragmentExecStatusPB* add_fragment_exec_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::FragmentExecStatusPB >&
      fragment_exec_status() const;

  // map<int32, int64> per_join_rows_produced = 16;
  int per_join_rows_produced_size() const;
  private:
  int _internal_per_join_rows_produced_size() const;
  public:
  void clear_per_join_rows_produced();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_per_join_rows_produced() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_per_join_rows_produced();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
      per_join_rows_produced() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_per_join_rows_produced();

  // optional .impala.UniqueIdPB query_id = 1;
  bool has_query_id() const;
  private:
  bool _internal_has_query_id() const;
  public:
  void clear_query_id();
  const ::impala::UniqueIdPB& query_id() const;
  ::impala::UniqueIdPB* release_query_id();
  ::impala::UniqueIdPB* mutable_query_id();
  void set_allocated_query_id(::impala::UniqueIdPB* query_id);
  private:
  const ::impala::UniqueIdPB& _internal_query_id() const;
  ::impala::UniqueIdPB* _internal_mutable_query_id();
  public:
  void unsafe_arena_set_allocated_query_id(
      ::impala::UniqueIdPB* query_id);
  ::impala::UniqueIdPB* unsafe_arena_release_query_id();

  // optional .impala.StatusPB overall_status = 5;
  bool has_overall_status() const;
  private:
  bool _internal_has_overall_status() const;
  public:
  void clear_overall_status();
  const ::impala::StatusPB& overall_status() const;
  ::impala::StatusPB* release_overall_status();
  ::impala::StatusPB* mutable_overall_status();
  void set_allocated_overall_status(::impala::StatusPB* overall_status);
  private:
  const ::impala::StatusPB& _internal_overall_status() const;
  ::impala::StatusPB* _internal_mutable_overall_status();
  public:
  void unsafe_arena_set_allocated_overall_status(
      ::impala::StatusPB* overall_status);
  ::impala::StatusPB* unsafe_arena_release_overall_status();

  // optional .impala.UniqueIdPB fragment_instance_id = 6;
  bool has_fragment_instance_id() const;
  private:
  bool _internal_has_fragment_instance_id() const;
  public:
  void clear_fragment_instance_id();
  const ::impala::UniqueIdPB& fragment_instance_id() const;
  ::impala::UniqueIdPB* release_fragment_instance_id();
  ::impala::UniqueIdPB* mutable_fragment_instance_id();
  void set_allocated_fragment_instance_id(::impala::UniqueIdPB* fragment_instance_id);
  private:
  const ::impala::UniqueIdPB& _internal_fragment_instance_id() const;
  ::impala::UniqueIdPB* _internal_mutable_fragment_instance_id();
  public:
  void unsafe_arena_set_allocated_fragment_instance_id(
      ::impala::UniqueIdPB* fragment_instance_id);
  ::impala::UniqueIdPB* unsafe_arena_release_fragment_instance_id();

  // optional int32 coord_state_idx = 2;
  bool has_coord_state_idx() const;
  private:
  bool _internal_has_coord_state_idx() const;
  public:
  void clear_coord_state_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 coord_state_idx() const;
  void set_coord_state_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coord_state_idx() const;
  void _internal_set_coord_state_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 thrift_profiles_sidecar_idx = 4;
  bool has_thrift_profiles_sidecar_idx() const;
  private:
  bool _internal_has_thrift_profiles_sidecar_idx() const;
  public:
  void clear_thrift_profiles_sidecar_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 thrift_profiles_sidecar_idx() const;
  void set_thrift_profiles_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_thrift_profiles_sidecar_idx() const;
  void _internal_set_thrift_profiles_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 peak_mem_consumption = 7;
  bool has_peak_mem_consumption() const;
  private:
  bool _internal_has_peak_mem_consumption() const;
  public:
  void clear_peak_mem_consumption();
  ::PROTOBUF_NAMESPACE_ID::int64 peak_mem_consumption() const;
  void set_peak_mem_consumption(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_peak_mem_consumption() const;
  void _internal_set_peak_mem_consumption(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 cpu_user_ns = 8;
  bool has_cpu_user_ns() const;
  private:
  bool _internal_has_cpu_user_ns() const;
  public:
  void clear_cpu_user_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_user_ns() const;
  void set_cpu_user_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cpu_user_ns() const;
  void _internal_set_cpu_user_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 cpu_sys_ns = 9;
  bool has_cpu_sys_ns() const;
  private:
  bool _internal_has_cpu_sys_ns() const;
  public:
  void clear_cpu_sys_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_sys_ns() const;
  void set_cpu_sys_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cpu_sys_ns() const;
  void _internal_set_cpu_sys_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 bytes_read = 10;
  bool has_bytes_read() const;
  private:
  bool _internal_has_bytes_read() const;
  public:
  void clear_bytes_read();
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_read() const;
  void set_bytes_read(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytes_read() const;
  void _internal_set_bytes_read(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 scan_ranges_complete = 11;
  bool has_scan_ranges_complete() const;
  private:
  bool _internal_has_scan_ranges_complete() const;
  public:
  void clear_scan_ranges_complete();
  ::PROTOBUF_NAMESPACE_ID::int64 scan_ranges_complete() const;
  void set_scan_ranges_complete(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_scan_ranges_complete() const;
  void _internal_set_scan_ranges_complete(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 exchange_bytes_sent = 12;
  bool has_exchange_bytes_sent() const;
  private:
  bool _internal_has_exchange_bytes_sent() const;
  public:
  void clear_exchange_bytes_sent();
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_bytes_sent() const;
  void set_exchange_bytes_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_exchange_bytes_sent() const;
  void _internal_set_exchange_bytes_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 scan_bytes_sent = 13;
  bool has_scan_bytes_sent() const;
  private:
  bool _internal_has_scan_bytes_sent() const;
  public:
  void clear_scan_bytes_sent();
  ::PROTOBUF_NAMESPACE_ID::int64 scan_bytes_sent() const;
  void set_scan_bytes_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_scan_bytes_sent() const;
  void _internal_set_scan_bytes_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 backend_report_seq_no = 15;
  bool has_backend_report_seq_no() const;
  private:
  bool _internal_has_backend_report_seq_no() const;
  public:
  void clear_backend_report_seq_no();
  ::PROTOBUF_NAMESPACE_ID::int64 backend_report_seq_no() const;
  void set_backend_report_seq_no(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_backend_report_seq_no() const;
  void _internal_set_backend_report_seq_no(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool local_disk_faulty = 17 [default = false];
  bool has_local_disk_faulty() const;
  private:
  bool _internal_has_local_disk_faulty() const;
  public:
  void clear_local_disk_faulty();
  bool local_disk_faulty() const;
  void set_local_disk_faulty(bool value);
  private:
  bool _internal_local_disk_faulty() const;
  void _internal_set_local_disk_faulty(bool value);
  public:

  // @@protoc_insertion_point(class_scope:impala.ReportExecStatusRequestPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::FragmentInstanceExecStatusPB > instance_exec_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::FragmentExecStatusPB > fragment_exec_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> per_join_rows_produced_;
  ::impala::UniqueIdPB* query_id_;
  ::impala::StatusPB* overall_status_;
  ::impala::UniqueIdPB* fragment_instance_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 coord_state_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 thrift_profiles_sidecar_idx_;
  ::PROTOBUF_NAMESPACE_ID::int64 peak_mem_consumption_;
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_user_ns_;
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_sys_ns_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_read_;
  ::PROTOBUF_NAMESPACE_ID::int64 scan_ranges_complete_;
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_bytes_sent_;
  ::PROTOBUF_NAMESPACE_ID::int64 scan_bytes_sent_;
  ::PROTOBUF_NAMESPACE_ID::int64 backend_report_seq_no_;
  bool local_disk_faulty_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReportExecStatusResponsePB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.ReportExecStatusResponsePB) */ {
 public:
  inline ReportExecStatusResponsePB() : ReportExecStatusResponsePB(nullptr) {}
  virtual ~ReportExecStatusResponsePB();

  ReportExecStatusResponsePB(const ReportExecStatusResponsePB& from);
  ReportExecStatusResponsePB(ReportExecStatusResponsePB&& from) noexcept
    : ReportExecStatusResponsePB() {
    *this = ::std::move(from);
  }

  inline ReportExecStatusResponsePB& operator=(const ReportExecStatusResponsePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportExecStatusResponsePB& operator=(ReportExecStatusResponsePB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportExecStatusResponsePB& default_instance();

  static inline const ReportExecStatusResponsePB* internal_default_instance() {
    return reinterpret_cast<const ReportExecStatusResponsePB*>(
               &_ReportExecStatusResponsePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReportExecStatusResponsePB& a, ReportExecStatusResponsePB& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportExecStatusResponsePB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportExecStatusResponsePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportExecStatusResponsePB* New() const final {
    return CreateMaybeMessage<ReportExecStatusResponsePB>(nullptr);
  }

  ReportExecStatusResponsePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportExecStatusResponsePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportExecStatusResponsePB& from);
  void MergeFrom(const ReportExecStatusResponsePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportExecStatusResponsePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.ReportExecStatusResponsePB";
  }
  protected:
  explicit ReportExecStatusResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .impala.StatusPB status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::impala::StatusPB& status() const;
  ::impala::StatusPB* release_status();
  ::impala::StatusPB* mutable_status();
  void set_allocated_status(::impala::StatusPB* status);
  private:
  const ::impala::StatusPB& _internal_status() const;
  ::impala::StatusPB* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::impala::StatusPB* status);
  ::impala::StatusPB* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:impala.ReportExecStatusResponsePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::StatusPB* status_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CancelQueryFInstancesRequestPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.CancelQueryFInstancesRequestPB) */ {
 public:
  inline CancelQueryFInstancesRequestPB() : CancelQueryFInstancesRequestPB(nullptr) {}
  virtual ~CancelQueryFInstancesRequestPB();

  CancelQueryFInstancesRequestPB(const CancelQueryFInstancesRequestPB& from);
  CancelQueryFInstancesRequestPB(CancelQueryFInstancesRequestPB&& from) noexcept
    : CancelQueryFInstancesRequestPB() {
    *this = ::std::move(from);
  }

  inline CancelQueryFInstancesRequestPB& operator=(const CancelQueryFInstancesRequestPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelQueryFInstancesRequestPB& operator=(CancelQueryFInstancesRequestPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelQueryFInstancesRequestPB& default_instance();

  static inline const CancelQueryFInstancesRequestPB* internal_default_instance() {
    return reinterpret_cast<const CancelQueryFInstancesRequestPB*>(
               &_CancelQueryFInstancesRequestPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CancelQueryFInstancesRequestPB& a, CancelQueryFInstancesRequestPB& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelQueryFInstancesRequestPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelQueryFInstancesRequestPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelQueryFInstancesRequestPB* New() const final {
    return CreateMaybeMessage<CancelQueryFInstancesRequestPB>(nullptr);
  }

  CancelQueryFInstancesRequestPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelQueryFInstancesRequestPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelQueryFInstancesRequestPB& from);
  void MergeFrom(const CancelQueryFInstancesRequestPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelQueryFInstancesRequestPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.CancelQueryFInstancesRequestPB";
  }
  protected:
  explicit CancelQueryFInstancesRequestPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryIdFieldNumber = 1,
  };
  // optional .impala.UniqueIdPB query_id = 1;
  bool has_query_id() const;
  private:
  bool _internal_has_query_id() const;
  public:
  void clear_query_id();
  const ::impala::UniqueIdPB& query_id() const;
  ::impala::UniqueIdPB* release_query_id();
  ::impala::UniqueIdPB* mutable_query_id();
  void set_allocated_query_id(::impala::UniqueIdPB* query_id);
  private:
  const ::impala::UniqueIdPB& _internal_query_id() const;
  ::impala::UniqueIdPB* _internal_mutable_query_id();
  public:
  void unsafe_arena_set_allocated_query_id(
      ::impala::UniqueIdPB* query_id);
  ::impala::UniqueIdPB* unsafe_arena_release_query_id();

  // @@protoc_insertion_point(class_scope:impala.CancelQueryFInstancesRequestPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::UniqueIdPB* query_id_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CancelQueryFInstancesResponsePB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.CancelQueryFInstancesResponsePB) */ {
 public:
  inline CancelQueryFInstancesResponsePB() : CancelQueryFInstancesResponsePB(nullptr) {}
  virtual ~CancelQueryFInstancesResponsePB();

  CancelQueryFInstancesResponsePB(const CancelQueryFInstancesResponsePB& from);
  CancelQueryFInstancesResponsePB(CancelQueryFInstancesResponsePB&& from) noexcept
    : CancelQueryFInstancesResponsePB() {
    *this = ::std::move(from);
  }

  inline CancelQueryFInstancesResponsePB& operator=(const CancelQueryFInstancesResponsePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelQueryFInstancesResponsePB& operator=(CancelQueryFInstancesResponsePB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelQueryFInstancesResponsePB& default_instance();

  static inline const CancelQueryFInstancesResponsePB* internal_default_instance() {
    return reinterpret_cast<const CancelQueryFInstancesResponsePB*>(
               &_CancelQueryFInstancesResponsePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CancelQueryFInstancesResponsePB& a, CancelQueryFInstancesResponsePB& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelQueryFInstancesResponsePB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelQueryFInstancesResponsePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelQueryFInstancesResponsePB* New() const final {
    return CreateMaybeMessage<CancelQueryFInstancesResponsePB>(nullptr);
  }

  CancelQueryFInstancesResponsePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelQueryFInstancesResponsePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelQueryFInstancesResponsePB& from);
  void MergeFrom(const CancelQueryFInstancesResponsePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelQueryFInstancesResponsePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.CancelQueryFInstancesResponsePB";
  }
  protected:
  explicit CancelQueryFInstancesResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .impala.StatusPB status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::impala::StatusPB& status() const;
  ::impala::StatusPB* release_status();
  ::impala::StatusPB* mutable_status();
  void set_allocated_status(::impala::StatusPB* status);
  private:
  const ::impala::StatusPB& _internal_status() const;
  ::impala::StatusPB* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::impala::StatusPB* status);
  ::impala::StatusPB* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:impala.CancelQueryFInstancesResponsePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::StatusPB* status_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoteShutdownParamsPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.RemoteShutdownParamsPB) */ {
 public:
  inline RemoteShutdownParamsPB() : RemoteShutdownParamsPB(nullptr) {}
  virtual ~RemoteShutdownParamsPB();

  RemoteShutdownParamsPB(const RemoteShutdownParamsPB& from);
  RemoteShutdownParamsPB(RemoteShutdownParamsPB&& from) noexcept
    : RemoteShutdownParamsPB() {
    *this = ::std::move(from);
  }

  inline RemoteShutdownParamsPB& operator=(const RemoteShutdownParamsPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteShutdownParamsPB& operator=(RemoteShutdownParamsPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteShutdownParamsPB& default_instance();

  static inline const RemoteShutdownParamsPB* internal_default_instance() {
    return reinterpret_cast<const RemoteShutdownParamsPB*>(
               &_RemoteShutdownParamsPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RemoteShutdownParamsPB& a, RemoteShutdownParamsPB& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteShutdownParamsPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteShutdownParamsPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteShutdownParamsPB* New() const final {
    return CreateMaybeMessage<RemoteShutdownParamsPB>(nullptr);
  }

  RemoteShutdownParamsPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteShutdownParamsPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteShutdownParamsPB& from);
  void MergeFrom(const RemoteShutdownParamsPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteShutdownParamsPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.RemoteShutdownParamsPB";
  }
  protected:
  explicit RemoteShutdownParamsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeadlineSFieldNumber = 1,
  };
  // optional int64 deadline_s = 1;
  bool has_deadline_s() const;
  private:
  bool _internal_has_deadline_s() const;
  public:
  void clear_deadline_s();
  ::PROTOBUF_NAMESPACE_ID::int64 deadline_s() const;
  void set_deadline_s(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deadline_s() const;
  void _internal_set_deadline_s(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.RemoteShutdownParamsPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 deadline_s_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ShutdownStatusPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.ShutdownStatusPB) */ {
 public:
  inline ShutdownStatusPB() : ShutdownStatusPB(nullptr) {}
  virtual ~ShutdownStatusPB();

  ShutdownStatusPB(const ShutdownStatusPB& from);
  ShutdownStatusPB(ShutdownStatusPB&& from) noexcept
    : ShutdownStatusPB() {
    *this = ::std::move(from);
  }

  inline ShutdownStatusPB& operator=(const ShutdownStatusPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownStatusPB& operator=(ShutdownStatusPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShutdownStatusPB& default_instance();

  static inline const ShutdownStatusPB* internal_default_instance() {
    return reinterpret_cast<const ShutdownStatusPB*>(
               &_ShutdownStatusPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ShutdownStatusPB& a, ShutdownStatusPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownStatusPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownStatusPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShutdownStatusPB* New() const final {
    return CreateMaybeMessage<ShutdownStatusPB>(nullptr);
  }

  ShutdownStatusPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutdownStatusPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShutdownStatusPB& from);
  void MergeFrom(const ShutdownStatusPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutdownStatusPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.ShutdownStatusPB";
  }
  protected:
  explicit ShutdownStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraceRemainingMsFieldNumber = 1,
    kDeadlineRemainingMsFieldNumber = 2,
    kFinstancesExecutingFieldNumber = 3,
    kClientRequestsRegisteredFieldNumber = 4,
    kBackendQueriesExecutingFieldNumber = 5,
  };
  // optional int64 grace_remaining_ms = 1;
  bool has_grace_remaining_ms() const;
  private:
  bool _internal_has_grace_remaining_ms() const;
  public:
  void clear_grace_remaining_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 grace_remaining_ms() const;
  void set_grace_remaining_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_grace_remaining_ms() const;
  void _internal_set_grace_remaining_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 deadline_remaining_ms = 2;
  bool has_deadline_remaining_ms() const;
  private:
  bool _internal_has_deadline_remaining_ms() const;
  public:
  void clear_deadline_remaining_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 deadline_remaining_ms() const;
  void set_deadline_remaining_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deadline_remaining_ms() const;
  void _internal_set_deadline_remaining_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 finstances_executing = 3;
  bool has_finstances_executing() const;
  private:
  bool _internal_has_finstances_executing() const;
  public:
  void clear_finstances_executing();
  ::PROTOBUF_NAMESPACE_ID::int64 finstances_executing() const;
  void set_finstances_executing(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_finstances_executing() const;
  void _internal_set_finstances_executing(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 client_requests_registered = 4;
  bool has_client_requests_registered() const;
  private:
  bool _internal_has_client_requests_registered() const;
  public:
  void clear_client_requests_registered();
  ::PROTOBUF_NAMESPACE_ID::int64 client_requests_registered() const;
  void set_client_requests_registered(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_client_requests_registered() const;
  void _internal_set_client_requests_registered(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 backend_queries_executing = 5;
  bool has_backend_queries_executing() const;
  private:
  bool _internal_has_backend_queries_executing() const;
  public:
  void clear_backend_queries_executing();
  ::PROTOBUF_NAMESPACE_ID::int64 backend_queries_executing() const;
  void set_backend_queries_executing(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_backend_queries_executing() const;
  void _internal_set_backend_queries_executing(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.ShutdownStatusPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 grace_remaining_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 deadline_remaining_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 finstances_executing_;
  ::PROTOBUF_NAMESPACE_ID::int64 client_requests_registered_;
  ::PROTOBUF_NAMESPACE_ID::int64 backend_queries_executing_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoteShutdownResultPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.RemoteShutdownResultPB) */ {
 public:
  inline RemoteShutdownResultPB() : RemoteShutdownResultPB(nullptr) {}
  virtual ~RemoteShutdownResultPB();

  RemoteShutdownResultPB(const RemoteShutdownResultPB& from);
  RemoteShutdownResultPB(RemoteShutdownResultPB&& from) noexcept
    : RemoteShutdownResultPB() {
    *this = ::std::move(from);
  }

  inline RemoteShutdownResultPB& operator=(const RemoteShutdownResultPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteShutdownResultPB& operator=(RemoteShutdownResultPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteShutdownResultPB& default_instance();

  static inline const RemoteShutdownResultPB* internal_default_instance() {
    return reinterpret_cast<const RemoteShutdownResultPB*>(
               &_RemoteShutdownResultPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(RemoteShutdownResultPB& a, RemoteShutdownResultPB& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteShutdownResultPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteShutdownResultPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteShutdownResultPB* New() const final {
    return CreateMaybeMessage<RemoteShutdownResultPB>(nullptr);
  }

  RemoteShutdownResultPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteShutdownResultPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteShutdownResultPB& from);
  void MergeFrom(const RemoteShutdownResultPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteShutdownResultPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.RemoteShutdownResultPB";
  }
  protected:
  explicit RemoteShutdownResultPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kShutdownStatusFieldNumber = 2,
  };
  // optional .impala.StatusPB status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::impala::StatusPB& status() const;
  ::impala::StatusPB* release_status();
  ::impala::StatusPB* mutable_status();
  void set_allocated_status(::impala::StatusPB* status);
  private:
  const ::impala::StatusPB& _internal_status() const;
  ::impala::StatusPB* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::impala::StatusPB* status);
  ::impala::StatusPB* unsafe_arena_release_status();

  // optional .impala.ShutdownStatusPB shutdown_status = 2;
  bool has_shutdown_status() const;
  private:
  bool _internal_has_shutdown_status() const;
  public:
  void clear_shutdown_status();
  const ::impala::ShutdownStatusPB& shutdown_status() const;
  ::impala::ShutdownStatusPB* release_shutdown_status();
  ::impala::ShutdownStatusPB* mutable_shutdown_status();
  void set_allocated_shutdown_status(::impala::ShutdownStatusPB* shutdown_status);
  private:
  const ::impala::ShutdownStatusPB& _internal_shutdown_status() const;
  ::impala::ShutdownStatusPB* _internal_mutable_shutdown_status();
  public:
  void unsafe_arena_set_allocated_shutdown_status(
      ::impala::ShutdownStatusPB* shutdown_status);
  ::impala::ShutdownStatusPB* unsafe_arena_release_shutdown_status();

  // @@protoc_insertion_point(class_scope:impala.RemoteShutdownResultPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::StatusPB* status_;
  ::impala::ShutdownStatusPB* shutdown_status_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PlanFragmentDestinationPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.PlanFragmentDestinationPB) */ {
 public:
  inline PlanFragmentDestinationPB() : PlanFragmentDestinationPB(nullptr) {}
  virtual ~PlanFragmentDestinationPB();

  PlanFragmentDestinationPB(const PlanFragmentDestinationPB& from);
  PlanFragmentDestinationPB(PlanFragmentDestinationPB&& from) noexcept
    : PlanFragmentDestinationPB() {
    *this = ::std::move(from);
  }

  inline PlanFragmentDestinationPB& operator=(const PlanFragmentDestinationPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanFragmentDestinationPB& operator=(PlanFragmentDestinationPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanFragmentDestinationPB& default_instance();

  static inline const PlanFragmentDestinationPB* internal_default_instance() {
    return reinterpret_cast<const PlanFragmentDestinationPB*>(
               &_PlanFragmentDestinationPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PlanFragmentDestinationPB& a, PlanFragmentDestinationPB& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanFragmentDestinationPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanFragmentDestinationPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanFragmentDestinationPB* New() const final {
    return CreateMaybeMessage<PlanFragmentDestinationPB>(nullptr);
  }

  PlanFragmentDestinationPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanFragmentDestinationPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanFragmentDestinationPB& from);
  void MergeFrom(const PlanFragmentDestinationPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanFragmentDestinationPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.PlanFragmentDestinationPB";
  }
  protected:
  explicit PlanFragmentDestinationPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFragmentInstanceIdFieldNumber = 1,
    kAddressFieldNumber = 2,
    kKrpcBackendFieldNumber = 3,
  };
  // optional .impala.UniqueIdPB fragment_instance_id = 1;
  bool has_fragment_instance_id() const;
  private:
  bool _internal_has_fragment_instance_id() const;
  public:
  void clear_fragment_instance_id();
  const ::impala::UniqueIdPB& fragment_instance_id() const;
  ::impala::UniqueIdPB* release_fragment_instance_id();
  ::impala::UniqueIdPB* mutable_fragment_instance_id();
  void set_allocated_fragment_instance_id(::impala::UniqueIdPB* fragment_instance_id);
  private:
  const ::impala::UniqueIdPB& _internal_fragment_instance_id() const;
  ::impala::UniqueIdPB* _internal_mutable_fragment_instance_id();
  public:
  void unsafe_arena_set_allocated_fragment_instance_id(
      ::impala::UniqueIdPB* fragment_instance_id);
  ::impala::UniqueIdPB* unsafe_arena_release_fragment_instance_id();

  // optional .impala.NetworkAddressPB address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::impala::NetworkAddressPB& address() const;
  ::impala::NetworkAddressPB* release_address();
  ::impala::NetworkAddressPB* mutable_address();
  void set_allocated_address(::impala::NetworkAddressPB* address);
  private:
  const ::impala::NetworkAddressPB& _internal_address() const;
  ::impala::NetworkAddressPB* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::impala::NetworkAddressPB* address);
  ::impala::NetworkAddressPB* unsafe_arena_release_address();

  // optional .impala.NetworkAddressPB krpc_backend = 3;
  bool has_krpc_backend() const;
  private:
  bool _internal_has_krpc_backend() const;
  public:
  void clear_krpc_backend();
  const ::impala::NetworkAddressPB& krpc_backend() const;
  ::impala::NetworkAddressPB* release_krpc_backend();
  ::impala::NetworkAddressPB* mutable_krpc_backend();
  void set_allocated_krpc_backend(::impala::NetworkAddressPB* krpc_backend);
  private:
  const ::impala::NetworkAddressPB& _internal_krpc_backend() const;
  ::impala::NetworkAddressPB* _internal_mutable_krpc_backend();
  public:
  void unsafe_arena_set_allocated_krpc_backend(
      ::impala::NetworkAddressPB* krpc_backend);
  ::impala::NetworkAddressPB* unsafe_arena_release_krpc_backend();

  // @@protoc_insertion_point(class_scope:impala.PlanFragmentDestinationPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::UniqueIdPB* fragment_instance_id_;
  ::impala::NetworkAddressPB* address_;
  ::impala::NetworkAddressPB* krpc_backend_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PlanFragmentCtxPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.PlanFragmentCtxPB) */ {
 public:
  inline PlanFragmentCtxPB() : PlanFragmentCtxPB(nullptr) {}
  virtual ~PlanFragmentCtxPB();

  PlanFragmentCtxPB(const PlanFragmentCtxPB& from);
  PlanFragmentCtxPB(PlanFragmentCtxPB&& from) noexcept
    : PlanFragmentCtxPB() {
    *this = ::std::move(from);
  }

  inline PlanFragmentCtxPB& operator=(const PlanFragmentCtxPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanFragmentCtxPB& operator=(PlanFragmentCtxPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanFragmentCtxPB& default_instance();

  static inline const PlanFragmentCtxPB* internal_default_instance() {
    return reinterpret_cast<const PlanFragmentCtxPB*>(
               &_PlanFragmentCtxPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PlanFragmentCtxPB& a, PlanFragmentCtxPB& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanFragmentCtxPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanFragmentCtxPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanFragmentCtxPB* New() const final {
    return CreateMaybeMessage<PlanFragmentCtxPB>(nullptr);
  }

  PlanFragmentCtxPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanFragmentCtxPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanFragmentCtxPB& from);
  void MergeFrom(const PlanFragmentCtxPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanFragmentCtxPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.PlanFragmentCtxPB";
  }
  protected:
  explicit PlanFragmentCtxPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationsFieldNumber = 2,
    kFragmentIdxFieldNumber = 1,
  };
  // repeated .impala.PlanFragmentDestinationPB destinations = 2;
  int destinations_size() const;
  private:
  int _internal_destinations_size() const;
  public:
  void clear_destinations();
  ::impala::PlanFragmentDestinationPB* mutable_destinations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentDestinationPB >*
      mutable_destinations();
  private:
  const ::impala::PlanFragmentDestinationPB& _internal_destinations(int index) const;
  ::impala::PlanFragmentDestinationPB* _internal_add_destinations();
  public:
  const ::impala::PlanFragmentDestinationPB& destinations(int index) const;
  ::impala::PlanFragmentDestinationPB* add_destinations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentDestinationPB >&
      destinations() const;

  // optional int32 fragment_idx = 1;
  bool has_fragment_idx() const;
  private:
  bool _internal_has_fragment_idx() const;
  public:
  void clear_fragment_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_idx() const;
  void set_fragment_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fragment_idx() const;
  void _internal_set_fragment_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.PlanFragmentCtxPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentDestinationPB > destinations_;
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_idx_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ScanRangeParamsPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.ScanRangeParamsPB) */ {
 public:
  inline ScanRangeParamsPB() : ScanRangeParamsPB(nullptr) {}
  virtual ~ScanRangeParamsPB();

  ScanRangeParamsPB(const ScanRangeParamsPB& from);
  ScanRangeParamsPB(ScanRangeParamsPB&& from) noexcept
    : ScanRangeParamsPB() {
    *this = ::std::move(from);
  }

  inline ScanRangeParamsPB& operator=(const ScanRangeParamsPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanRangeParamsPB& operator=(ScanRangeParamsPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanRangeParamsPB& default_instance();

  static inline const ScanRangeParamsPB* internal_default_instance() {
    return reinterpret_cast<const ScanRangeParamsPB*>(
               &_ScanRangeParamsPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ScanRangeParamsPB& a, ScanRangeParamsPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanRangeParamsPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanRangeParamsPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanRangeParamsPB* New() const final {
    return CreateMaybeMessage<ScanRangeParamsPB>(nullptr);
  }

  ScanRangeParamsPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanRangeParamsPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanRangeParamsPB& from);
  void MergeFrom(const ScanRangeParamsPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanRangeParamsPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.ScanRangeParamsPB";
  }
  protected:
  explicit ScanRangeParamsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScanRangeFieldNumber = 1,
    kTryHdfsCacheFieldNumber = 3,
    kIsRemoteFieldNumber = 4,
    kVolumeIdFieldNumber = 2,
  };
  // optional .impala.ScanRangePB scan_range = 1;
  bool has_scan_range() const;
  private:
  bool _internal_has_scan_range() const;
  public:
  void clear_scan_range();
  const ::impala::ScanRangePB& scan_range() const;
  ::impala::ScanRangePB* release_scan_range();
  ::impala::ScanRangePB* mutable_scan_range();
  void set_allocated_scan_range(::impala::ScanRangePB* scan_range);
  private:
  const ::impala::ScanRangePB& _internal_scan_range() const;
  ::impala::ScanRangePB* _internal_mutable_scan_range();
  public:
  void unsafe_arena_set_allocated_scan_range(
      ::impala::ScanRangePB* scan_range);
  ::impala::ScanRangePB* unsafe_arena_release_scan_range();

  // optional bool try_hdfs_cache = 3 [default = false];
  bool has_try_hdfs_cache() const;
  private:
  bool _internal_has_try_hdfs_cache() const;
  public:
  void clear_try_hdfs_cache();
  bool try_hdfs_cache() const;
  void set_try_hdfs_cache(bool value);
  private:
  bool _internal_try_hdfs_cache() const;
  void _internal_set_try_hdfs_cache(bool value);
  public:

  // optional bool is_remote = 4;
  bool has_is_remote() const;
  private:
  bool _internal_has_is_remote() const;
  public:
  void clear_is_remote();
  bool is_remote() const;
  void set_is_remote(bool value);
  private:
  bool _internal_is_remote() const;
  void _internal_set_is_remote(bool value);
  public:

  // optional int32 volume_id = 2 [default = -1];
  bool has_volume_id() const;
  private:
  bool _internal_has_volume_id() const;
  public:
  void clear_volume_id();
  ::PROTOBUF_NAMESPACE_ID::int32 volume_id() const;
  void set_volume_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_id() const;
  void _internal_set_volume_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.ScanRangeParamsPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::ScanRangePB* scan_range_;
  bool try_hdfs_cache_;
  bool is_remote_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_id_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ScanRangesPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.ScanRangesPB) */ {
 public:
  inline ScanRangesPB() : ScanRangesPB(nullptr) {}
  virtual ~ScanRangesPB();

  ScanRangesPB(const ScanRangesPB& from);
  ScanRangesPB(ScanRangesPB&& from) noexcept
    : ScanRangesPB() {
    *this = ::std::move(from);
  }

  inline ScanRangesPB& operator=(const ScanRangesPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanRangesPB& operator=(ScanRangesPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanRangesPB& default_instance();

  static inline const ScanRangesPB* internal_default_instance() {
    return reinterpret_cast<const ScanRangesPB*>(
               &_ScanRangesPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ScanRangesPB& a, ScanRangesPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanRangesPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanRangesPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanRangesPB* New() const final {
    return CreateMaybeMessage<ScanRangesPB>(nullptr);
  }

  ScanRangesPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanRangesPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanRangesPB& from);
  void MergeFrom(const ScanRangesPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanRangesPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.ScanRangesPB";
  }
  protected:
  explicit ScanRangesPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScanRangesFieldNumber = 1,
  };
  // repeated .impala.ScanRangeParamsPB scan_ranges = 1;
  int scan_ranges_size() const;
  private:
  int _internal_scan_ranges_size() const;
  public:
  void clear_scan_ranges();
  ::impala::ScanRangeParamsPB* mutable_scan_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ScanRangeParamsPB >*
      mutable_scan_ranges();
  private:
  const ::impala::ScanRangeParamsPB& _internal_scan_ranges(int index) const;
  ::impala::ScanRangeParamsPB* _internal_add_scan_ranges();
  public:
  const ::impala::ScanRangeParamsPB& scan_ranges(int index) const;
  ::impala::ScanRangeParamsPB* add_scan_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ScanRangeParamsPB >&
      scan_ranges() const;

  // @@protoc_insertion_point(class_scope:impala.ScanRangesPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ScanRangeParamsPB > scan_ranges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class JoinBuildInputPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.JoinBuildInputPB) */ {
 public:
  inline JoinBuildInputPB() : JoinBuildInputPB(nullptr) {}
  virtual ~JoinBuildInputPB();

  JoinBuildInputPB(const JoinBuildInputPB& from);
  JoinBuildInputPB(JoinBuildInputPB&& from) noexcept
    : JoinBuildInputPB() {
    *this = ::std::move(from);
  }

  inline JoinBuildInputPB& operator=(const JoinBuildInputPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinBuildInputPB& operator=(JoinBuildInputPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinBuildInputPB& default_instance();

  static inline const JoinBuildInputPB* internal_default_instance() {
    return reinterpret_cast<const JoinBuildInputPB*>(
               &_JoinBuildInputPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(JoinBuildInputPB& a, JoinBuildInputPB& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinBuildInputPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinBuildInputPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinBuildInputPB* New() const final {
    return CreateMaybeMessage<JoinBuildInputPB>(nullptr);
  }

  JoinBuildInputPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinBuildInputPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinBuildInputPB& from);
  void MergeFrom(const JoinBuildInputPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinBuildInputPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.JoinBuildInputPB";
  }
  protected:
  explicit JoinBuildInputPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFinstanceIdFieldNumber = 2,
    kJoinNodeIdFieldNumber = 1,
  };
  // optional .impala.UniqueIdPB input_finstance_id = 2;
  bool has_input_finstance_id() const;
  private:
  bool _internal_has_input_finstance_id() const;
  public:
  void clear_input_finstance_id();
  const ::impala::UniqueIdPB& input_finstance_id() const;
  ::impala::UniqueIdPB* release_input_finstance_id();
  ::impala::UniqueIdPB* mutable_input_finstance_id();
  void set_allocated_input_finstance_id(::impala::UniqueIdPB* input_finstance_id);
  private:
  const ::impala::UniqueIdPB& _internal_input_finstance_id() const;
  ::impala::UniqueIdPB* _internal_mutable_input_finstance_id();
  public:
  void unsafe_arena_set_allocated_input_finstance_id(
      ::impala::UniqueIdPB* input_finstance_id);
  ::impala::UniqueIdPB* unsafe_arena_release_input_finstance_id();

  // optional int32 join_node_id = 1;
  bool has_join_node_id() const;
  private:
  bool _internal_has_join_node_id() const;
  public:
  void clear_join_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 join_node_id() const;
  void set_join_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_join_node_id() const;
  void _internal_set_join_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.JoinBuildInputPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::UniqueIdPB* input_finstance_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 join_node_id_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse();
  explicit PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse& other);
  static const PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse*>(&_PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[29];
  }

  public:
};

// -------------------------------------------------------------------

class PlanFragmentInstanceCtxPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.PlanFragmentInstanceCtxPB) */ {
 public:
  inline PlanFragmentInstanceCtxPB() : PlanFragmentInstanceCtxPB(nullptr) {}
  virtual ~PlanFragmentInstanceCtxPB();

  PlanFragmentInstanceCtxPB(const PlanFragmentInstanceCtxPB& from);
  PlanFragmentInstanceCtxPB(PlanFragmentInstanceCtxPB&& from) noexcept
    : PlanFragmentInstanceCtxPB() {
    *this = ::std::move(from);
  }

  inline PlanFragmentInstanceCtxPB& operator=(const PlanFragmentInstanceCtxPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanFragmentInstanceCtxPB& operator=(PlanFragmentInstanceCtxPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanFragmentInstanceCtxPB& default_instance();

  static inline const PlanFragmentInstanceCtxPB* internal_default_instance() {
    return reinterpret_cast<const PlanFragmentInstanceCtxPB*>(
               &_PlanFragmentInstanceCtxPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PlanFragmentInstanceCtxPB& a, PlanFragmentInstanceCtxPB& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanFragmentInstanceCtxPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanFragmentInstanceCtxPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanFragmentInstanceCtxPB* New() const final {
    return CreateMaybeMessage<PlanFragmentInstanceCtxPB>(nullptr);
  }

  PlanFragmentInstanceCtxPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanFragmentInstanceCtxPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanFragmentInstanceCtxPB& from);
  void MergeFrom(const PlanFragmentInstanceCtxPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanFragmentInstanceCtxPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.PlanFragmentInstanceCtxPB";
  }
  protected:
  explicit PlanFragmentInstanceCtxPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPerNodeScanRangesFieldNumber = 2,
    kJoinBuildInputsFieldNumber = 3,
    kFragmentIdxFieldNumber = 1,
  };
  // map<int32, .impala.ScanRangesPB> per_node_scan_ranges = 2;
  int per_node_scan_ranges_size() const;
  private:
  int _internal_per_node_scan_ranges_size() const;
  public:
  void clear_per_node_scan_ranges();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >&
      _internal_per_node_scan_ranges() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >*
      _internal_mutable_per_node_scan_ranges();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >&
      per_node_scan_ranges() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >*
      mutable_per_node_scan_ranges();

  // repeated .impala.JoinBuildInputPB join_build_inputs = 3;
  int join_build_inputs_size() const;
  private:
  int _internal_join_build_inputs_size() const;
  public:
  void clear_join_build_inputs();
  ::impala::JoinBuildInputPB* mutable_join_build_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::JoinBuildInputPB >*
      mutable_join_build_inputs();
  private:
  const ::impala::JoinBuildInputPB& _internal_join_build_inputs(int index) const;
  ::impala::JoinBuildInputPB* _internal_add_join_build_inputs();
  public:
  const ::impala::JoinBuildInputPB& join_build_inputs(int index) const;
  ::impala::JoinBuildInputPB* add_join_build_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::JoinBuildInputPB >&
      join_build_inputs() const;

  // optional int32 fragment_idx = 1;
  bool has_fragment_idx() const;
  private:
  bool _internal_has_fragment_idx() const;
  public:
  void clear_fragment_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_idx() const;
  void set_fragment_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fragment_idx() const;
  void _internal_set_fragment_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.PlanFragmentInstanceCtxPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> per_node_scan_ranges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::JoinBuildInputPB > join_build_inputs_;
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_idx_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ExecQueryFInstancesRequestPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.ExecQueryFInstancesRequestPB) */ {
 public:
  inline ExecQueryFInstancesRequestPB() : ExecQueryFInstancesRequestPB(nullptr) {}
  virtual ~ExecQueryFInstancesRequestPB();

  ExecQueryFInstancesRequestPB(const ExecQueryFInstancesRequestPB& from);
  ExecQueryFInstancesRequestPB(ExecQueryFInstancesRequestPB&& from) noexcept
    : ExecQueryFInstancesRequestPB() {
    *this = ::std::move(from);
  }

  inline ExecQueryFInstancesRequestPB& operator=(const ExecQueryFInstancesRequestPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecQueryFInstancesRequestPB& operator=(ExecQueryFInstancesRequestPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecQueryFInstancesRequestPB& default_instance();

  static inline const ExecQueryFInstancesRequestPB* internal_default_instance() {
    return reinterpret_cast<const ExecQueryFInstancesRequestPB*>(
               &_ExecQueryFInstancesRequestPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ExecQueryFInstancesRequestPB& a, ExecQueryFInstancesRequestPB& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecQueryFInstancesRequestPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecQueryFInstancesRequestPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecQueryFInstancesRequestPB* New() const final {
    return CreateMaybeMessage<ExecQueryFInstancesRequestPB>(nullptr);
  }

  ExecQueryFInstancesRequestPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecQueryFInstancesRequestPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecQueryFInstancesRequestPB& from);
  void MergeFrom(const ExecQueryFInstancesRequestPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecQueryFInstancesRequestPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.ExecQueryFInstancesRequestPB";
  }
  protected:
  explicit ExecQueryFInstancesRequestPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFragmentCtxsFieldNumber = 7,
    kFragmentInstanceCtxsFieldNumber = 8,
    kCoordStateIdxFieldNumber = 1,
    kQueryCtxSidecarIdxFieldNumber = 2,
    kMinMemReservationBytesFieldNumber = 4,
    kInitialMemReservationTotalClaimsFieldNumber = 5,
    kPerBackendMemLimitFieldNumber = 6,
    kPlanFragmentInfoSidecarIdxFieldNumber = 3,
  };
  // repeated .impala.PlanFragmentCtxPB fragment_ctxs = 7;
  int fragment_ctxs_size() const;
  private:
  int _internal_fragment_ctxs_size() const;
  public:
  void clear_fragment_ctxs();
  ::impala::PlanFragmentCtxPB* mutable_fragment_ctxs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentCtxPB >*
      mutable_fragment_ctxs();
  private:
  const ::impala::PlanFragmentCtxPB& _internal_fragment_ctxs(int index) const;
  ::impala::PlanFragmentCtxPB* _internal_add_fragment_ctxs();
  public:
  const ::impala::PlanFragmentCtxPB& fragment_ctxs(int index) const;
  ::impala::PlanFragmentCtxPB* add_fragment_ctxs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentCtxPB >&
      fragment_ctxs() const;

  // repeated .impala.PlanFragmentInstanceCtxPB fragment_instance_ctxs = 8;
  int fragment_instance_ctxs_size() const;
  private:
  int _internal_fragment_instance_ctxs_size() const;
  public:
  void clear_fragment_instance_ctxs();
  ::impala::PlanFragmentInstanceCtxPB* mutable_fragment_instance_ctxs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentInstanceCtxPB >*
      mutable_fragment_instance_ctxs();
  private:
  const ::impala::PlanFragmentInstanceCtxPB& _internal_fragment_instance_ctxs(int index) const;
  ::impala::PlanFragmentInstanceCtxPB* _internal_add_fragment_instance_ctxs();
  public:
  const ::impala::PlanFragmentInstanceCtxPB& fragment_instance_ctxs(int index) const;
  ::impala::PlanFragmentInstanceCtxPB* add_fragment_instance_ctxs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentInstanceCtxPB >&
      fragment_instance_ctxs() const;

  // optional int32 coord_state_idx = 1;
  bool has_coord_state_idx() const;
  private:
  bool _internal_has_coord_state_idx() const;
  public:
  void clear_coord_state_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 coord_state_idx() const;
  void set_coord_state_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coord_state_idx() const;
  void _internal_set_coord_state_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 query_ctx_sidecar_idx = 2;
  bool has_query_ctx_sidecar_idx() const;
  private:
  bool _internal_has_query_ctx_sidecar_idx() const;
  public:
  void clear_query_ctx_sidecar_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 query_ctx_sidecar_idx() const;
  void set_query_ctx_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_query_ctx_sidecar_idx() const;
  void _internal_set_query_ctx_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 min_mem_reservation_bytes = 4;
  bool has_min_mem_reservation_bytes() const;
  private:
  bool _internal_has_min_mem_reservation_bytes() const;
  public:
  void clear_min_mem_reservation_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 min_mem_reservation_bytes() const;
  void set_min_mem_reservation_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_min_mem_reservation_bytes() const;
  void _internal_set_min_mem_reservation_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 initial_mem_reservation_total_claims = 5;
  bool has_initial_mem_reservation_total_claims() const;
  private:
  bool _internal_has_initial_mem_reservation_total_claims() const;
  public:
  void clear_initial_mem_reservation_total_claims();
  ::PROTOBUF_NAMESPACE_ID::int64 initial_mem_reservation_total_claims() const;
  void set_initial_mem_reservation_total_claims(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_initial_mem_reservation_total_claims() const;
  void _internal_set_initial_mem_reservation_total_claims(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 per_backend_mem_limit = 6;
  bool has_per_backend_mem_limit() const;
  private:
  bool _internal_has_per_backend_mem_limit() const;
  public:
  void clear_per_backend_mem_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 per_backend_mem_limit() const;
  void set_per_backend_mem_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_per_backend_mem_limit() const;
  void _internal_set_per_backend_mem_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 plan_fragment_info_sidecar_idx = 3;
  bool has_plan_fragment_info_sidecar_idx() const;
  private:
  bool _internal_has_plan_fragment_info_sidecar_idx() const;
  public:
  void clear_plan_fragment_info_sidecar_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 plan_fragment_info_sidecar_idx() const;
  void set_plan_fragment_info_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plan_fragment_info_sidecar_idx() const;
  void _internal_set_plan_fragment_info_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.ExecQueryFInstancesRequestPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentCtxPB > fragment_ctxs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentInstanceCtxPB > fragment_instance_ctxs_;
  ::PROTOBUF_NAMESPACE_ID::int32 coord_state_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 query_ctx_sidecar_idx_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_mem_reservation_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 initial_mem_reservation_total_claims_;
  ::PROTOBUF_NAMESPACE_ID::int64 per_backend_mem_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 plan_fragment_info_sidecar_idx_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ExecQueryFInstancesResponsePB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.ExecQueryFInstancesResponsePB) */ {
 public:
  inline ExecQueryFInstancesResponsePB() : ExecQueryFInstancesResponsePB(nullptr) {}
  virtual ~ExecQueryFInstancesResponsePB();

  ExecQueryFInstancesResponsePB(const ExecQueryFInstancesResponsePB& from);
  ExecQueryFInstancesResponsePB(ExecQueryFInstancesResponsePB&& from) noexcept
    : ExecQueryFInstancesResponsePB() {
    *this = ::std::move(from);
  }

  inline ExecQueryFInstancesResponsePB& operator=(const ExecQueryFInstancesResponsePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecQueryFInstancesResponsePB& operator=(ExecQueryFInstancesResponsePB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecQueryFInstancesResponsePB& default_instance();

  static inline const ExecQueryFInstancesResponsePB* internal_default_instance() {
    return reinterpret_cast<const ExecQueryFInstancesResponsePB*>(
               &_ExecQueryFInstancesResponsePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ExecQueryFInstancesResponsePB& a, ExecQueryFInstancesResponsePB& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecQueryFInstancesResponsePB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecQueryFInstancesResponsePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecQueryFInstancesResponsePB* New() const final {
    return CreateMaybeMessage<ExecQueryFInstancesResponsePB>(nullptr);
  }

  ExecQueryFInstancesResponsePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecQueryFInstancesResponsePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecQueryFInstancesResponsePB& from);
  void MergeFrom(const ExecQueryFInstancesResponsePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecQueryFInstancesResponsePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.ExecQueryFInstancesResponsePB";
  }
  protected:
  explicit ExecQueryFInstancesResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fservice_2eproto);
    return ::descriptor_table_control_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .impala.StatusPB status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::impala::StatusPB& status() const;
  ::impala::StatusPB* release_status();
  ::impala::StatusPB* mutable_status();
  void set_allocated_status(::impala::StatusPB* status);
  private:
  const ::impala::StatusPB& _internal_status() const;
  ::impala::StatusPB* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::impala::StatusPB* status);
  ::impala::StatusPB* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:impala.ExecQueryFInstancesResponsePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::impala::StatusPB* status_;
  friend struct ::TableStruct_control_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ParquetDmlStatsPB

// map<string, int64> per_column_size = 1;
inline int ParquetDmlStatsPB::_internal_per_column_size_size() const {
  return per_column_size_.size();
}
inline int ParquetDmlStatsPB::per_column_size_size() const {
  return _internal_per_column_size_size();
}
inline void ParquetDmlStatsPB::clear_per_column_size() {
  per_column_size_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
ParquetDmlStatsPB::_internal_per_column_size() const {
  return per_column_size_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
ParquetDmlStatsPB::per_column_size() const {
  // @@protoc_insertion_point(field_map:impala.ParquetDmlStatsPB.per_column_size)
  return _internal_per_column_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
ParquetDmlStatsPB::_internal_mutable_per_column_size() {
  return per_column_size_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
ParquetDmlStatsPB::mutable_per_column_size() {
  // @@protoc_insertion_point(field_mutable_map:impala.ParquetDmlStatsPB.per_column_size)
  return _internal_mutable_per_column_size();
}

// -------------------------------------------------------------------

// KuduDmlStatsPB

// optional int64 num_row_errors = 1;
inline bool KuduDmlStatsPB::_internal_has_num_row_errors() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KuduDmlStatsPB::has_num_row_errors() const {
  return _internal_has_num_row_errors();
}
inline void KuduDmlStatsPB::clear_num_row_errors() {
  num_row_errors_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KuduDmlStatsPB::_internal_num_row_errors() const {
  return num_row_errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KuduDmlStatsPB::num_row_errors() const {
  // @@protoc_insertion_point(field_get:impala.KuduDmlStatsPB.num_row_errors)
  return _internal_num_row_errors();
}
inline void KuduDmlStatsPB::_internal_set_num_row_errors(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  num_row_errors_ = value;
}
inline void KuduDmlStatsPB::set_num_row_errors(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_row_errors(value);
  // @@protoc_insertion_point(field_set:impala.KuduDmlStatsPB.num_row_errors)
}

// -------------------------------------------------------------------

// DmlStatsPB

// optional int64 bytes_written = 1;
inline bool DmlStatsPB::_internal_has_bytes_written() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DmlStatsPB::has_bytes_written() const {
  return _internal_has_bytes_written();
}
inline void DmlStatsPB::clear_bytes_written() {
  bytes_written_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmlStatsPB::_internal_bytes_written() const {
  return bytes_written_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmlStatsPB::bytes_written() const {
  // @@protoc_insertion_point(field_get:impala.DmlStatsPB.bytes_written)
  return _internal_bytes_written();
}
inline void DmlStatsPB::_internal_set_bytes_written(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  bytes_written_ = value;
}
inline void DmlStatsPB::set_bytes_written(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytes_written(value);
  // @@protoc_insertion_point(field_set:impala.DmlStatsPB.bytes_written)
}

// optional .impala.ParquetDmlStatsPB parquet_stats = 2;
inline bool DmlStatsPB::_internal_has_parquet_stats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || parquet_stats_ != nullptr);
  return value;
}
inline bool DmlStatsPB::has_parquet_stats() const {
  return _internal_has_parquet_stats();
}
inline void DmlStatsPB::clear_parquet_stats() {
  if (parquet_stats_ != nullptr) parquet_stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::impala::ParquetDmlStatsPB& DmlStatsPB::_internal_parquet_stats() const {
  const ::impala::ParquetDmlStatsPB* p = parquet_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::ParquetDmlStatsPB&>(
      ::impala::_ParquetDmlStatsPB_default_instance_);
}
inline const ::impala::ParquetDmlStatsPB& DmlStatsPB::parquet_stats() const {
  // @@protoc_insertion_point(field_get:impala.DmlStatsPB.parquet_stats)
  return _internal_parquet_stats();
}
inline void DmlStatsPB::unsafe_arena_set_allocated_parquet_stats(
    ::impala::ParquetDmlStatsPB* parquet_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parquet_stats_);
  }
  parquet_stats_ = parquet_stats;
  if (parquet_stats) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.DmlStatsPB.parquet_stats)
}
inline ::impala::ParquetDmlStatsPB* DmlStatsPB::release_parquet_stats() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::ParquetDmlStatsPB* temp = parquet_stats_;
  parquet_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::ParquetDmlStatsPB* DmlStatsPB::unsafe_arena_release_parquet_stats() {
  // @@protoc_insertion_point(field_release:impala.DmlStatsPB.parquet_stats)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::ParquetDmlStatsPB* temp = parquet_stats_;
  parquet_stats_ = nullptr;
  return temp;
}
inline ::impala::ParquetDmlStatsPB* DmlStatsPB::_internal_mutable_parquet_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (parquet_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::ParquetDmlStatsPB>(GetArena());
    parquet_stats_ = p;
  }
  return parquet_stats_;
}
inline ::impala::ParquetDmlStatsPB* DmlStatsPB::mutable_parquet_stats() {
  // @@protoc_insertion_point(field_mutable:impala.DmlStatsPB.parquet_stats)
  return _internal_mutable_parquet_stats();
}
inline void DmlStatsPB::set_allocated_parquet_stats(::impala::ParquetDmlStatsPB* parquet_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete parquet_stats_;
  }
  if (parquet_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parquet_stats);
    if (message_arena != submessage_arena) {
      parquet_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parquet_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parquet_stats_ = parquet_stats;
  // @@protoc_insertion_point(field_set_allocated:impala.DmlStatsPB.parquet_stats)
}

// optional .impala.KuduDmlStatsPB kudu_stats = 3;
inline bool DmlStatsPB::_internal_has_kudu_stats() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || kudu_stats_ != nullptr);
  return value;
}
inline bool DmlStatsPB::has_kudu_stats() const {
  return _internal_has_kudu_stats();
}
inline void DmlStatsPB::clear_kudu_stats() {
  if (kudu_stats_ != nullptr) kudu_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::impala::KuduDmlStatsPB& DmlStatsPB::_internal_kudu_stats() const {
  const ::impala::KuduDmlStatsPB* p = kudu_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::KuduDmlStatsPB&>(
      ::impala::_KuduDmlStatsPB_default_instance_);
}
inline const ::impala::KuduDmlStatsPB& DmlStatsPB::kudu_stats() const {
  // @@protoc_insertion_point(field_get:impala.DmlStatsPB.kudu_stats)
  return _internal_kudu_stats();
}
inline void DmlStatsPB::unsafe_arena_set_allocated_kudu_stats(
    ::impala::KuduDmlStatsPB* kudu_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kudu_stats_);
  }
  kudu_stats_ = kudu_stats;
  if (kudu_stats) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.DmlStatsPB.kudu_stats)
}
inline ::impala::KuduDmlStatsPB* DmlStatsPB::release_kudu_stats() {
  _has_bits_[0] &= ~0x00000002u;
  ::impala::KuduDmlStatsPB* temp = kudu_stats_;
  kudu_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::KuduDmlStatsPB* DmlStatsPB::unsafe_arena_release_kudu_stats() {
  // @@protoc_insertion_point(field_release:impala.DmlStatsPB.kudu_stats)
  _has_bits_[0] &= ~0x00000002u;
  ::impala::KuduDmlStatsPB* temp = kudu_stats_;
  kudu_stats_ = nullptr;
  return temp;
}
inline ::impala::KuduDmlStatsPB* DmlStatsPB::_internal_mutable_kudu_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (kudu_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::KuduDmlStatsPB>(GetArena());
    kudu_stats_ = p;
  }
  return kudu_stats_;
}
inline ::impala::KuduDmlStatsPB* DmlStatsPB::mutable_kudu_stats() {
  // @@protoc_insertion_point(field_mutable:impala.DmlStatsPB.kudu_stats)
  return _internal_mutable_kudu_stats();
}
inline void DmlStatsPB::set_allocated_kudu_stats(::impala::KuduDmlStatsPB* kudu_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete kudu_stats_;
  }
  if (kudu_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kudu_stats);
    if (message_arena != submessage_arena) {
      kudu_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kudu_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  kudu_stats_ = kudu_stats;
  // @@protoc_insertion_point(field_set_allocated:impala.DmlStatsPB.kudu_stats)
}

// -------------------------------------------------------------------

// DmlFileStatusPb

// required string final_path = 1;
inline bool DmlFileStatusPb::_internal_has_final_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DmlFileStatusPb::has_final_path() const {
  return _internal_has_final_path();
}
inline void DmlFileStatusPb::clear_final_path() {
  final_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DmlFileStatusPb::final_path() const {
  // @@protoc_insertion_point(field_get:impala.DmlFileStatusPb.final_path)
  return _internal_final_path();
}
inline void DmlFileStatusPb::set_final_path(const std::string& value) {
  _internal_set_final_path(value);
  // @@protoc_insertion_point(field_set:impala.DmlFileStatusPb.final_path)
}
inline std::string* DmlFileStatusPb::mutable_final_path() {
  // @@protoc_insertion_point(field_mutable:impala.DmlFileStatusPb.final_path)
  return _internal_mutable_final_path();
}
inline const std::string& DmlFileStatusPb::_internal_final_path() const {
  return final_path_.Get();
}
inline void DmlFileStatusPb::_internal_set_final_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  final_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DmlFileStatusPb::set_final_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  final_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.DmlFileStatusPb.final_path)
}
inline void DmlFileStatusPb::set_final_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  final_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.DmlFileStatusPb.final_path)
}
inline void DmlFileStatusPb::set_final_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  final_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.DmlFileStatusPb.final_path)
}
inline std::string* DmlFileStatusPb::_internal_mutable_final_path() {
  _has_bits_[0] |= 0x00000001u;
  return final_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DmlFileStatusPb::release_final_path() {
  // @@protoc_insertion_point(field_release:impala.DmlFileStatusPb.final_path)
  if (!_internal_has_final_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return final_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DmlFileStatusPb::set_allocated_final_path(std::string* final_path) {
  if (final_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  final_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), final_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.DmlFileStatusPb.final_path)
}

// required int64 num_rows = 2;
inline bool DmlFileStatusPb::_internal_has_num_rows() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DmlFileStatusPb::has_num_rows() const {
  return _internal_has_num_rows();
}
inline void DmlFileStatusPb::clear_num_rows() {
  num_rows_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmlFileStatusPb::_internal_num_rows() const {
  return num_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmlFileStatusPb::num_rows() const {
  // @@protoc_insertion_point(field_get:impala.DmlFileStatusPb.num_rows)
  return _internal_num_rows();
}
inline void DmlFileStatusPb::_internal_set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  num_rows_ = value;
}
inline void DmlFileStatusPb::set_num_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:impala.DmlFileStatusPb.num_rows)
}

// required int64 size = 3;
inline bool DmlFileStatusPb::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DmlFileStatusPb::has_size() const {
  return _internal_has_size();
}
inline void DmlFileStatusPb::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmlFileStatusPb::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmlFileStatusPb::size() const {
  // @@protoc_insertion_point(field_get:impala.DmlFileStatusPb.size)
  return _internal_size();
}
inline void DmlFileStatusPb::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  size_ = value;
}
inline void DmlFileStatusPb::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:impala.DmlFileStatusPb.size)
}

// optional string staging_path = 4;
inline bool DmlFileStatusPb::_internal_has_staging_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DmlFileStatusPb::has_staging_path() const {
  return _internal_has_staging_path();
}
inline void DmlFileStatusPb::clear_staging_path() {
  staging_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DmlFileStatusPb::staging_path() const {
  // @@protoc_insertion_point(field_get:impala.DmlFileStatusPb.staging_path)
  return _internal_staging_path();
}
inline void DmlFileStatusPb::set_staging_path(const std::string& value) {
  _internal_set_staging_path(value);
  // @@protoc_insertion_point(field_set:impala.DmlFileStatusPb.staging_path)
}
inline std::string* DmlFileStatusPb::mutable_staging_path() {
  // @@protoc_insertion_point(field_mutable:impala.DmlFileStatusPb.staging_path)
  return _internal_mutable_staging_path();
}
inline const std::string& DmlFileStatusPb::_internal_staging_path() const {
  return staging_path_.Get();
}
inline void DmlFileStatusPb::_internal_set_staging_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  staging_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DmlFileStatusPb::set_staging_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  staging_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.DmlFileStatusPb.staging_path)
}
inline void DmlFileStatusPb::set_staging_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  staging_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.DmlFileStatusPb.staging_path)
}
inline void DmlFileStatusPb::set_staging_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  staging_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.DmlFileStatusPb.staging_path)
}
inline std::string* DmlFileStatusPb::_internal_mutable_staging_path() {
  _has_bits_[0] |= 0x00000002u;
  return staging_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DmlFileStatusPb::release_staging_path() {
  // @@protoc_insertion_point(field_release:impala.DmlFileStatusPb.staging_path)
  if (!_internal_has_staging_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return staging_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DmlFileStatusPb::set_allocated_staging_path(std::string* staging_path) {
  if (staging_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  staging_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), staging_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.DmlFileStatusPb.staging_path)
}

// optional bytes iceberg_data_file_fb = 5;
inline bool DmlFileStatusPb::_internal_has_iceberg_data_file_fb() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DmlFileStatusPb::has_iceberg_data_file_fb() const {
  return _internal_has_iceberg_data_file_fb();
}
inline void DmlFileStatusPb::clear_iceberg_data_file_fb() {
  iceberg_data_file_fb_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DmlFileStatusPb::iceberg_data_file_fb() const {
  // @@protoc_insertion_point(field_get:impala.DmlFileStatusPb.iceberg_data_file_fb)
  return _internal_iceberg_data_file_fb();
}
inline void DmlFileStatusPb::set_iceberg_data_file_fb(const std::string& value) {
  _internal_set_iceberg_data_file_fb(value);
  // @@protoc_insertion_point(field_set:impala.DmlFileStatusPb.iceberg_data_file_fb)
}
inline std::string* DmlFileStatusPb::mutable_iceberg_data_file_fb() {
  // @@protoc_insertion_point(field_mutable:impala.DmlFileStatusPb.iceberg_data_file_fb)
  return _internal_mutable_iceberg_data_file_fb();
}
inline const std::string& DmlFileStatusPb::_internal_iceberg_data_file_fb() const {
  return iceberg_data_file_fb_.Get();
}
inline void DmlFileStatusPb::_internal_set_iceberg_data_file_fb(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  iceberg_data_file_fb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DmlFileStatusPb::set_iceberg_data_file_fb(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  iceberg_data_file_fb_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.DmlFileStatusPb.iceberg_data_file_fb)
}
inline void DmlFileStatusPb::set_iceberg_data_file_fb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  iceberg_data_file_fb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.DmlFileStatusPb.iceberg_data_file_fb)
}
inline void DmlFileStatusPb::set_iceberg_data_file_fb(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  iceberg_data_file_fb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.DmlFileStatusPb.iceberg_data_file_fb)
}
inline std::string* DmlFileStatusPb::_internal_mutable_iceberg_data_file_fb() {
  _has_bits_[0] |= 0x00000004u;
  return iceberg_data_file_fb_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DmlFileStatusPb::release_iceberg_data_file_fb() {
  // @@protoc_insertion_point(field_release:impala.DmlFileStatusPb.iceberg_data_file_fb)
  if (!_internal_has_iceberg_data_file_fb()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return iceberg_data_file_fb_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DmlFileStatusPb::set_allocated_iceberg_data_file_fb(std::string* iceberg_data_file_fb) {
  if (iceberg_data_file_fb != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  iceberg_data_file_fb_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iceberg_data_file_fb,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.DmlFileStatusPb.iceberg_data_file_fb)
}

// -------------------------------------------------------------------

// DmlPartitionStatusPB

// optional int64 id = 1;
inline bool DmlPartitionStatusPB::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DmlPartitionStatusPB::has_id() const {
  return _internal_has_id();
}
inline void DmlPartitionStatusPB::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmlPartitionStatusPB::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmlPartitionStatusPB::id() const {
  // @@protoc_insertion_point(field_get:impala.DmlPartitionStatusPB.id)
  return _internal_id();
}
inline void DmlPartitionStatusPB::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void DmlPartitionStatusPB::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:impala.DmlPartitionStatusPB.id)
}

// optional int64 num_modified_rows = 2;
inline bool DmlPartitionStatusPB::_internal_has_num_modified_rows() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DmlPartitionStatusPB::has_num_modified_rows() const {
  return _internal_has_num_modified_rows();
}
inline void DmlPartitionStatusPB::clear_num_modified_rows() {
  num_modified_rows_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmlPartitionStatusPB::_internal_num_modified_rows() const {
  return num_modified_rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmlPartitionStatusPB::num_modified_rows() const {
  // @@protoc_insertion_point(field_get:impala.DmlPartitionStatusPB.num_modified_rows)
  return _internal_num_modified_rows();
}
inline void DmlPartitionStatusPB::_internal_set_num_modified_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  num_modified_rows_ = value;
}
inline void DmlPartitionStatusPB::set_num_modified_rows(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_modified_rows(value);
  // @@protoc_insertion_point(field_set:impala.DmlPartitionStatusPB.num_modified_rows)
}

// optional .impala.DmlStatsPB stats = 3;
inline bool DmlPartitionStatusPB::_internal_has_stats() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || stats_ != nullptr);
  return value;
}
inline bool DmlPartitionStatusPB::has_stats() const {
  return _internal_has_stats();
}
inline void DmlPartitionStatusPB::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::impala::DmlStatsPB& DmlPartitionStatusPB::_internal_stats() const {
  const ::impala::DmlStatsPB* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::DmlStatsPB&>(
      ::impala::_DmlStatsPB_default_instance_);
}
inline const ::impala::DmlStatsPB& DmlPartitionStatusPB::stats() const {
  // @@protoc_insertion_point(field_get:impala.DmlPartitionStatusPB.stats)
  return _internal_stats();
}
inline void DmlPartitionStatusPB::unsafe_arena_set_allocated_stats(
    ::impala::DmlStatsPB* stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.DmlPartitionStatusPB.stats)
}
inline ::impala::DmlStatsPB* DmlPartitionStatusPB::release_stats() {
  _has_bits_[0] &= ~0x00000004u;
  ::impala::DmlStatsPB* temp = stats_;
  stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::DmlStatsPB* DmlPartitionStatusPB::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:impala.DmlPartitionStatusPB.stats)
  _has_bits_[0] &= ~0x00000004u;
  ::impala::DmlStatsPB* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::impala::DmlStatsPB* DmlPartitionStatusPB::_internal_mutable_stats() {
  _has_bits_[0] |= 0x00000004u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::DmlStatsPB>(GetArena());
    stats_ = p;
  }
  return stats_;
}
inline ::impala::DmlStatsPB* DmlPartitionStatusPB::mutable_stats() {
  // @@protoc_insertion_point(field_mutable:impala.DmlPartitionStatusPB.stats)
  return _internal_mutable_stats();
}
inline void DmlPartitionStatusPB::set_allocated_stats(::impala::DmlStatsPB* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:impala.DmlPartitionStatusPB.stats)
}

// optional string partition_base_dir = 4;
inline bool DmlPartitionStatusPB::_internal_has_partition_base_dir() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DmlPartitionStatusPB::has_partition_base_dir() const {
  return _internal_has_partition_base_dir();
}
inline void DmlPartitionStatusPB::clear_partition_base_dir() {
  partition_base_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DmlPartitionStatusPB::partition_base_dir() const {
  // @@protoc_insertion_point(field_get:impala.DmlPartitionStatusPB.partition_base_dir)
  return _internal_partition_base_dir();
}
inline void DmlPartitionStatusPB::set_partition_base_dir(const std::string& value) {
  _internal_set_partition_base_dir(value);
  // @@protoc_insertion_point(field_set:impala.DmlPartitionStatusPB.partition_base_dir)
}
inline std::string* DmlPartitionStatusPB::mutable_partition_base_dir() {
  // @@protoc_insertion_point(field_mutable:impala.DmlPartitionStatusPB.partition_base_dir)
  return _internal_mutable_partition_base_dir();
}
inline const std::string& DmlPartitionStatusPB::_internal_partition_base_dir() const {
  return partition_base_dir_.Get();
}
inline void DmlPartitionStatusPB::_internal_set_partition_base_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  partition_base_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DmlPartitionStatusPB::set_partition_base_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  partition_base_dir_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.DmlPartitionStatusPB.partition_base_dir)
}
inline void DmlPartitionStatusPB::set_partition_base_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  partition_base_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.DmlPartitionStatusPB.partition_base_dir)
}
inline void DmlPartitionStatusPB::set_partition_base_dir(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  partition_base_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.DmlPartitionStatusPB.partition_base_dir)
}
inline std::string* DmlPartitionStatusPB::_internal_mutable_partition_base_dir() {
  _has_bits_[0] |= 0x00000001u;
  return partition_base_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DmlPartitionStatusPB::release_partition_base_dir() {
  // @@protoc_insertion_point(field_release:impala.DmlPartitionStatusPB.partition_base_dir)
  if (!_internal_has_partition_base_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return partition_base_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DmlPartitionStatusPB::set_allocated_partition_base_dir(std::string* partition_base_dir) {
  if (partition_base_dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  partition_base_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partition_base_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.DmlPartitionStatusPB.partition_base_dir)
}

// optional int64 kudu_latest_observed_ts = 5;
inline bool DmlPartitionStatusPB::_internal_has_kudu_latest_observed_ts() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DmlPartitionStatusPB::has_kudu_latest_observed_ts() const {
  return _internal_has_kudu_latest_observed_ts();
}
inline void DmlPartitionStatusPB::clear_kudu_latest_observed_ts() {
  kudu_latest_observed_ts_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmlPartitionStatusPB::_internal_kudu_latest_observed_ts() const {
  return kudu_latest_observed_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmlPartitionStatusPB::kudu_latest_observed_ts() const {
  // @@protoc_insertion_point(field_get:impala.DmlPartitionStatusPB.kudu_latest_observed_ts)
  return _internal_kudu_latest_observed_ts();
}
inline void DmlPartitionStatusPB::_internal_set_kudu_latest_observed_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  kudu_latest_observed_ts_ = value;
}
inline void DmlPartitionStatusPB::set_kudu_latest_observed_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_kudu_latest_observed_ts(value);
  // @@protoc_insertion_point(field_set:impala.DmlPartitionStatusPB.kudu_latest_observed_ts)
}

// repeated .impala.DmlFileStatusPb created_files = 6;
inline int DmlPartitionStatusPB::_internal_created_files_size() const {
  return created_files_.size();
}
inline int DmlPartitionStatusPB::created_files_size() const {
  return _internal_created_files_size();
}
inline void DmlPartitionStatusPB::clear_created_files() {
  created_files_.Clear();
}
inline ::impala::DmlFileStatusPb* DmlPartitionStatusPB::mutable_created_files(int index) {
  // @@protoc_insertion_point(field_mutable:impala.DmlPartitionStatusPB.created_files)
  return created_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::DmlFileStatusPb >*
DmlPartitionStatusPB::mutable_created_files() {
  // @@protoc_insertion_point(field_mutable_list:impala.DmlPartitionStatusPB.created_files)
  return &created_files_;
}
inline const ::impala::DmlFileStatusPb& DmlPartitionStatusPB::_internal_created_files(int index) const {
  return created_files_.Get(index);
}
inline const ::impala::DmlFileStatusPb& DmlPartitionStatusPB::created_files(int index) const {
  // @@protoc_insertion_point(field_get:impala.DmlPartitionStatusPB.created_files)
  return _internal_created_files(index);
}
inline ::impala::DmlFileStatusPb* DmlPartitionStatusPB::_internal_add_created_files() {
  return created_files_.Add();
}
inline ::impala::DmlFileStatusPb* DmlPartitionStatusPB::add_created_files() {
  // @@protoc_insertion_point(field_add:impala.DmlPartitionStatusPB.created_files)
  return _internal_add_created_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::DmlFileStatusPb >&
DmlPartitionStatusPB::created_files() const {
  // @@protoc_insertion_point(field_list:impala.DmlPartitionStatusPB.created_files)
  return created_files_;
}

// optional string staging_dir_to_clean_up = 7;
inline bool DmlPartitionStatusPB::_internal_has_staging_dir_to_clean_up() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DmlPartitionStatusPB::has_staging_dir_to_clean_up() const {
  return _internal_has_staging_dir_to_clean_up();
}
inline void DmlPartitionStatusPB::clear_staging_dir_to_clean_up() {
  staging_dir_to_clean_up_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DmlPartitionStatusPB::staging_dir_to_clean_up() const {
  // @@protoc_insertion_point(field_get:impala.DmlPartitionStatusPB.staging_dir_to_clean_up)
  return _internal_staging_dir_to_clean_up();
}
inline void DmlPartitionStatusPB::set_staging_dir_to_clean_up(const std::string& value) {
  _internal_set_staging_dir_to_clean_up(value);
  // @@protoc_insertion_point(field_set:impala.DmlPartitionStatusPB.staging_dir_to_clean_up)
}
inline std::string* DmlPartitionStatusPB::mutable_staging_dir_to_clean_up() {
  // @@protoc_insertion_point(field_mutable:impala.DmlPartitionStatusPB.staging_dir_to_clean_up)
  return _internal_mutable_staging_dir_to_clean_up();
}
inline const std::string& DmlPartitionStatusPB::_internal_staging_dir_to_clean_up() const {
  return staging_dir_to_clean_up_.Get();
}
inline void DmlPartitionStatusPB::_internal_set_staging_dir_to_clean_up(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  staging_dir_to_clean_up_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DmlPartitionStatusPB::set_staging_dir_to_clean_up(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  staging_dir_to_clean_up_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.DmlPartitionStatusPB.staging_dir_to_clean_up)
}
inline void DmlPartitionStatusPB::set_staging_dir_to_clean_up(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  staging_dir_to_clean_up_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.DmlPartitionStatusPB.staging_dir_to_clean_up)
}
inline void DmlPartitionStatusPB::set_staging_dir_to_clean_up(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  staging_dir_to_clean_up_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.DmlPartitionStatusPB.staging_dir_to_clean_up)
}
inline std::string* DmlPartitionStatusPB::_internal_mutable_staging_dir_to_clean_up() {
  _has_bits_[0] |= 0x00000002u;
  return staging_dir_to_clean_up_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DmlPartitionStatusPB::release_staging_dir_to_clean_up() {
  // @@protoc_insertion_point(field_release:impala.DmlPartitionStatusPB.staging_dir_to_clean_up)
  if (!_internal_has_staging_dir_to_clean_up()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return staging_dir_to_clean_up_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DmlPartitionStatusPB::set_allocated_staging_dir_to_clean_up(std::string* staging_dir_to_clean_up) {
  if (staging_dir_to_clean_up != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  staging_dir_to_clean_up_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), staging_dir_to_clean_up,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.DmlPartitionStatusPB.staging_dir_to_clean_up)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DmlExecStatusPB

// map<string, .impala.DmlPartitionStatusPB> per_partition_status = 1;
inline int DmlExecStatusPB::_internal_per_partition_status_size() const {
  return per_partition_status_.size();
}
inline int DmlExecStatusPB::per_partition_status_size() const {
  return _internal_per_partition_status_size();
}
inline void DmlExecStatusPB::clear_per_partition_status() {
  per_partition_status_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >&
DmlExecStatusPB::_internal_per_partition_status() const {
  return per_partition_status_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >&
DmlExecStatusPB::per_partition_status() const {
  // @@protoc_insertion_point(field_map:impala.DmlExecStatusPB.per_partition_status)
  return _internal_per_partition_status();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >*
DmlExecStatusPB::_internal_mutable_per_partition_status() {
  return per_partition_status_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >*
DmlExecStatusPB::mutable_per_partition_status() {
  // @@protoc_insertion_point(field_mutable_map:impala.DmlExecStatusPB.per_partition_status)
  return _internal_mutable_per_partition_status();
}

// -------------------------------------------------------------------

// ErrorLogEntryPB

// optional int32 count = 1;
inline bool ErrorLogEntryPB::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ErrorLogEntryPB::has_count() const {
  return _internal_has_count();
}
inline void ErrorLogEntryPB::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorLogEntryPB::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ErrorLogEntryPB::count() const {
  // @@protoc_insertion_point(field_get:impala.ErrorLogEntryPB.count)
  return _internal_count();
}
inline void ErrorLogEntryPB::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void ErrorLogEntryPB::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:impala.ErrorLogEntryPB.count)
}

// repeated string messages = 2;
inline int ErrorLogEntryPB::_internal_messages_size() const {
  return messages_.size();
}
inline int ErrorLogEntryPB::messages_size() const {
  return _internal_messages_size();
}
inline void ErrorLogEntryPB::clear_messages() {
  messages_.Clear();
}
inline std::string* ErrorLogEntryPB::add_messages() {
  // @@protoc_insertion_point(field_add_mutable:impala.ErrorLogEntryPB.messages)
  return _internal_add_messages();
}
inline const std::string& ErrorLogEntryPB::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const std::string& ErrorLogEntryPB::messages(int index) const {
  // @@protoc_insertion_point(field_get:impala.ErrorLogEntryPB.messages)
  return _internal_messages(index);
}
inline std::string* ErrorLogEntryPB::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:impala.ErrorLogEntryPB.messages)
  return messages_.Mutable(index);
}
inline void ErrorLogEntryPB::set_messages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:impala.ErrorLogEntryPB.messages)
  messages_.Mutable(index)->assign(value);
}
inline void ErrorLogEntryPB::set_messages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:impala.ErrorLogEntryPB.messages)
  messages_.Mutable(index)->assign(std::move(value));
}
inline void ErrorLogEntryPB::set_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:impala.ErrorLogEntryPB.messages)
}
inline void ErrorLogEntryPB::set_messages(int index, const char* value, size_t size) {
  messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:impala.ErrorLogEntryPB.messages)
}
inline std::string* ErrorLogEntryPB::_internal_add_messages() {
  return messages_.Add();
}
inline void ErrorLogEntryPB::add_messages(const std::string& value) {
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:impala.ErrorLogEntryPB.messages)
}
inline void ErrorLogEntryPB::add_messages(std::string&& value) {
  messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:impala.ErrorLogEntryPB.messages)
}
inline void ErrorLogEntryPB::add_messages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:impala.ErrorLogEntryPB.messages)
}
inline void ErrorLogEntryPB::add_messages(const char* value, size_t size) {
  messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:impala.ErrorLogEntryPB.messages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ErrorLogEntryPB::messages() const {
  // @@protoc_insertion_point(field_list:impala.ErrorLogEntryPB.messages)
  return messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ErrorLogEntryPB::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:impala.ErrorLogEntryPB.messages)
  return &messages_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StatefulStatusPB

// optional int64 report_seq_no = 1;
inline bool StatefulStatusPB::_internal_has_report_seq_no() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatefulStatusPB::has_report_seq_no() const {
  return _internal_has_report_seq_no();
}
inline void StatefulStatusPB::clear_report_seq_no() {
  report_seq_no_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatefulStatusPB::_internal_report_seq_no() const {
  return report_seq_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatefulStatusPB::report_seq_no() const {
  // @@protoc_insertion_point(field_get:impala.StatefulStatusPB.report_seq_no)
  return _internal_report_seq_no();
}
inline void StatefulStatusPB::_internal_set_report_seq_no(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  report_seq_no_ = value;
}
inline void StatefulStatusPB::set_report_seq_no(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_report_seq_no(value);
  // @@protoc_insertion_point(field_set:impala.StatefulStatusPB.report_seq_no)
}

// map<int32, .impala.ErrorLogEntryPB> error_log = 2;
inline int StatefulStatusPB::_internal_error_log_size() const {
  return error_log_.size();
}
inline int StatefulStatusPB::error_log_size() const {
  return _internal_error_log_size();
}
inline void StatefulStatusPB::clear_error_log() {
  error_log_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >&
StatefulStatusPB::_internal_error_log() const {
  return error_log_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >&
StatefulStatusPB::error_log() const {
  // @@protoc_insertion_point(field_map:impala.StatefulStatusPB.error_log)
  return _internal_error_log();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >*
StatefulStatusPB::_internal_mutable_error_log() {
  return error_log_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >*
StatefulStatusPB::mutable_error_log() {
  // @@protoc_insertion_point(field_mutable_map:impala.StatefulStatusPB.error_log)
  return _internal_mutable_error_log();
}

// optional .impala.AuxErrorInfoPB aux_error_info = 3;
inline bool StatefulStatusPB::_internal_has_aux_error_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || aux_error_info_ != nullptr);
  return value;
}
inline bool StatefulStatusPB::has_aux_error_info() const {
  return _internal_has_aux_error_info();
}
inline void StatefulStatusPB::clear_aux_error_info() {
  if (aux_error_info_ != nullptr) aux_error_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::impala::AuxErrorInfoPB& StatefulStatusPB::_internal_aux_error_info() const {
  const ::impala::AuxErrorInfoPB* p = aux_error_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::AuxErrorInfoPB&>(
      ::impala::_AuxErrorInfoPB_default_instance_);
}
inline const ::impala::AuxErrorInfoPB& StatefulStatusPB::aux_error_info() const {
  // @@protoc_insertion_point(field_get:impala.StatefulStatusPB.aux_error_info)
  return _internal_aux_error_info();
}
inline void StatefulStatusPB::unsafe_arena_set_allocated_aux_error_info(
    ::impala::AuxErrorInfoPB* aux_error_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aux_error_info_);
  }
  aux_error_info_ = aux_error_info;
  if (aux_error_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.StatefulStatusPB.aux_error_info)
}
inline ::impala::AuxErrorInfoPB* StatefulStatusPB::release_aux_error_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::AuxErrorInfoPB* temp = aux_error_info_;
  aux_error_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::AuxErrorInfoPB* StatefulStatusPB::unsafe_arena_release_aux_error_info() {
  // @@protoc_insertion_point(field_release:impala.StatefulStatusPB.aux_error_info)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::AuxErrorInfoPB* temp = aux_error_info_;
  aux_error_info_ = nullptr;
  return temp;
}
inline ::impala::AuxErrorInfoPB* StatefulStatusPB::_internal_mutable_aux_error_info() {
  _has_bits_[0] |= 0x00000001u;
  if (aux_error_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::AuxErrorInfoPB>(GetArena());
    aux_error_info_ = p;
  }
  return aux_error_info_;
}
inline ::impala::AuxErrorInfoPB* StatefulStatusPB::mutable_aux_error_info() {
  // @@protoc_insertion_point(field_mutable:impala.StatefulStatusPB.aux_error_info)
  return _internal_mutable_aux_error_info();
}
inline void StatefulStatusPB::set_allocated_aux_error_info(::impala::AuxErrorInfoPB* aux_error_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete aux_error_info_;
  }
  if (aux_error_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aux_error_info);
    if (message_arena != submessage_arena) {
      aux_error_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aux_error_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  aux_error_info_ = aux_error_info;
  // @@protoc_insertion_point(field_set_allocated:impala.StatefulStatusPB.aux_error_info)
}

// -------------------------------------------------------------------

// ExecSummaryDataPB

// optional int32 plan_node_id = 1;
inline bool ExecSummaryDataPB::_internal_has_plan_node_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExecSummaryDataPB::has_plan_node_id() const {
  return _internal_has_plan_node_id();
}
inline void ExecSummaryDataPB::clear_plan_node_id() {
  plan_node_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecSummaryDataPB::_internal_plan_node_id() const {
  return plan_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecSummaryDataPB::plan_node_id() const {
  // @@protoc_insertion_point(field_get:impala.ExecSummaryDataPB.plan_node_id)
  return _internal_plan_node_id();
}
inline void ExecSummaryDataPB::_internal_set_plan_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  plan_node_id_ = value;
}
inline void ExecSummaryDataPB::set_plan_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plan_node_id(value);
  // @@protoc_insertion_point(field_set:impala.ExecSummaryDataPB.plan_node_id)
}

// optional int32 data_sink_id = 2;
inline bool ExecSummaryDataPB::_internal_has_data_sink_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExecSummaryDataPB::has_data_sink_id() const {
  return _internal_has_data_sink_id();
}
inline void ExecSummaryDataPB::clear_data_sink_id() {
  data_sink_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecSummaryDataPB::_internal_data_sink_id() const {
  return data_sink_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecSummaryDataPB::data_sink_id() const {
  // @@protoc_insertion_point(field_get:impala.ExecSummaryDataPB.data_sink_id)
  return _internal_data_sink_id();
}
inline void ExecSummaryDataPB::_internal_set_data_sink_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  data_sink_id_ = value;
}
inline void ExecSummaryDataPB::set_data_sink_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_sink_id(value);
  // @@protoc_insertion_point(field_set:impala.ExecSummaryDataPB.data_sink_id)
}

// optional int64 rows_returned = 3;
inline bool ExecSummaryDataPB::_internal_has_rows_returned() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExecSummaryDataPB::has_rows_returned() const {
  return _internal_has_rows_returned();
}
inline void ExecSummaryDataPB::clear_rows_returned() {
  rows_returned_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecSummaryDataPB::_internal_rows_returned() const {
  return rows_returned_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecSummaryDataPB::rows_returned() const {
  // @@protoc_insertion_point(field_get:impala.ExecSummaryDataPB.rows_returned)
  return _internal_rows_returned();
}
inline void ExecSummaryDataPB::_internal_set_rows_returned(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  rows_returned_ = value;
}
inline void ExecSummaryDataPB::set_rows_returned(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rows_returned(value);
  // @@protoc_insertion_point(field_set:impala.ExecSummaryDataPB.rows_returned)
}

// optional int64 peak_mem_usage = 4;
inline bool ExecSummaryDataPB::_internal_has_peak_mem_usage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExecSummaryDataPB::has_peak_mem_usage() const {
  return _internal_has_peak_mem_usage();
}
inline void ExecSummaryDataPB::clear_peak_mem_usage() {
  peak_mem_usage_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecSummaryDataPB::_internal_peak_mem_usage() const {
  return peak_mem_usage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecSummaryDataPB::peak_mem_usage() const {
  // @@protoc_insertion_point(field_get:impala.ExecSummaryDataPB.peak_mem_usage)
  return _internal_peak_mem_usage();
}
inline void ExecSummaryDataPB::_internal_set_peak_mem_usage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  peak_mem_usage_ = value;
}
inline void ExecSummaryDataPB::set_peak_mem_usage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_peak_mem_usage(value);
  // @@protoc_insertion_point(field_set:impala.ExecSummaryDataPB.peak_mem_usage)
}

// optional int64 local_time_ns = 5;
inline bool ExecSummaryDataPB::_internal_has_local_time_ns() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExecSummaryDataPB::has_local_time_ns() const {
  return _internal_has_local_time_ns();
}
inline void ExecSummaryDataPB::clear_local_time_ns() {
  local_time_ns_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecSummaryDataPB::_internal_local_time_ns() const {
  return local_time_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecSummaryDataPB::local_time_ns() const {
  // @@protoc_insertion_point(field_get:impala.ExecSummaryDataPB.local_time_ns)
  return _internal_local_time_ns();
}
inline void ExecSummaryDataPB::_internal_set_local_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  local_time_ns_ = value;
}
inline void ExecSummaryDataPB::set_local_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_local_time_ns(value);
  // @@protoc_insertion_point(field_set:impala.ExecSummaryDataPB.local_time_ns)
}

// -------------------------------------------------------------------

// RPCErrorInfoPB

// required .impala.NetworkAddressPB dest_node = 1;
inline bool RPCErrorInfoPB::_internal_has_dest_node() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dest_node_ != nullptr);
  return value;
}
inline bool RPCErrorInfoPB::has_dest_node() const {
  return _internal_has_dest_node();
}
inline const ::impala::NetworkAddressPB& RPCErrorInfoPB::_internal_dest_node() const {
  const ::impala::NetworkAddressPB* p = dest_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::NetworkAddressPB&>(
      ::impala::_NetworkAddressPB_default_instance_);
}
inline const ::impala::NetworkAddressPB& RPCErrorInfoPB::dest_node() const {
  // @@protoc_insertion_point(field_get:impala.RPCErrorInfoPB.dest_node)
  return _internal_dest_node();
}
inline void RPCErrorInfoPB::unsafe_arena_set_allocated_dest_node(
    ::impala::NetworkAddressPB* dest_node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_node_);
  }
  dest_node_ = dest_node;
  if (dest_node) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.RPCErrorInfoPB.dest_node)
}
inline ::impala::NetworkAddressPB* RPCErrorInfoPB::release_dest_node() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::NetworkAddressPB* temp = dest_node_;
  dest_node_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::NetworkAddressPB* RPCErrorInfoPB::unsafe_arena_release_dest_node() {
  // @@protoc_insertion_point(field_release:impala.RPCErrorInfoPB.dest_node)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::NetworkAddressPB* temp = dest_node_;
  dest_node_ = nullptr;
  return temp;
}
inline ::impala::NetworkAddressPB* RPCErrorInfoPB::_internal_mutable_dest_node() {
  _has_bits_[0] |= 0x00000001u;
  if (dest_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::NetworkAddressPB>(GetArena());
    dest_node_ = p;
  }
  return dest_node_;
}
inline ::impala::NetworkAddressPB* RPCErrorInfoPB::mutable_dest_node() {
  // @@protoc_insertion_point(field_mutable:impala.RPCErrorInfoPB.dest_node)
  return _internal_mutable_dest_node();
}
inline void RPCErrorInfoPB::set_allocated_dest_node(::impala::NetworkAddressPB* dest_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_node_);
  }
  if (dest_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dest_node)->GetArena();
    if (message_arena != submessage_arena) {
      dest_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dest_node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dest_node_ = dest_node;
  // @@protoc_insertion_point(field_set_allocated:impala.RPCErrorInfoPB.dest_node)
}

// required int32 posix_error_code = 2;
inline bool RPCErrorInfoPB::_internal_has_posix_error_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RPCErrorInfoPB::has_posix_error_code() const {
  return _internal_has_posix_error_code();
}
inline void RPCErrorInfoPB::clear_posix_error_code() {
  posix_error_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RPCErrorInfoPB::_internal_posix_error_code() const {
  return posix_error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RPCErrorInfoPB::posix_error_code() const {
  // @@protoc_insertion_point(field_get:impala.RPCErrorInfoPB.posix_error_code)
  return _internal_posix_error_code();
}
inline void RPCErrorInfoPB::_internal_set_posix_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  posix_error_code_ = value;
}
inline void RPCErrorInfoPB::set_posix_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_posix_error_code(value);
  // @@protoc_insertion_point(field_set:impala.RPCErrorInfoPB.posix_error_code)
}

// -------------------------------------------------------------------

// AuxErrorInfoPB

// optional .impala.RPCErrorInfoPB rpc_error_info = 1;
inline bool AuxErrorInfoPB::_internal_has_rpc_error_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || rpc_error_info_ != nullptr);
  return value;
}
inline bool AuxErrorInfoPB::has_rpc_error_info() const {
  return _internal_has_rpc_error_info();
}
inline void AuxErrorInfoPB::clear_rpc_error_info() {
  if (rpc_error_info_ != nullptr) rpc_error_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::impala::RPCErrorInfoPB& AuxErrorInfoPB::_internal_rpc_error_info() const {
  const ::impala::RPCErrorInfoPB* p = rpc_error_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::RPCErrorInfoPB&>(
      ::impala::_RPCErrorInfoPB_default_instance_);
}
inline const ::impala::RPCErrorInfoPB& AuxErrorInfoPB::rpc_error_info() const {
  // @@protoc_insertion_point(field_get:impala.AuxErrorInfoPB.rpc_error_info)
  return _internal_rpc_error_info();
}
inline void AuxErrorInfoPB::unsafe_arena_set_allocated_rpc_error_info(
    ::impala::RPCErrorInfoPB* rpc_error_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rpc_error_info_);
  }
  rpc_error_info_ = rpc_error_info;
  if (rpc_error_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.AuxErrorInfoPB.rpc_error_info)
}
inline ::impala::RPCErrorInfoPB* AuxErrorInfoPB::release_rpc_error_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::RPCErrorInfoPB* temp = rpc_error_info_;
  rpc_error_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::RPCErrorInfoPB* AuxErrorInfoPB::unsafe_arena_release_rpc_error_info() {
  // @@protoc_insertion_point(field_release:impala.AuxErrorInfoPB.rpc_error_info)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::RPCErrorInfoPB* temp = rpc_error_info_;
  rpc_error_info_ = nullptr;
  return temp;
}
inline ::impala::RPCErrorInfoPB* AuxErrorInfoPB::_internal_mutable_rpc_error_info() {
  _has_bits_[0] |= 0x00000001u;
  if (rpc_error_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::RPCErrorInfoPB>(GetArena());
    rpc_error_info_ = p;
  }
  return rpc_error_info_;
}
inline ::impala::RPCErrorInfoPB* AuxErrorInfoPB::mutable_rpc_error_info() {
  // @@protoc_insertion_point(field_mutable:impala.AuxErrorInfoPB.rpc_error_info)
  return _internal_mutable_rpc_error_info();
}
inline void AuxErrorInfoPB::set_allocated_rpc_error_info(::impala::RPCErrorInfoPB* rpc_error_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rpc_error_info_;
  }
  if (rpc_error_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rpc_error_info);
    if (message_arena != submessage_arena) {
      rpc_error_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc_error_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rpc_error_info_ = rpc_error_info;
  // @@protoc_insertion_point(field_set_allocated:impala.AuxErrorInfoPB.rpc_error_info)
}

// -------------------------------------------------------------------

// FragmentInstanceExecStatusPB

// optional int64 report_seq_no = 1;
inline bool FragmentInstanceExecStatusPB::_internal_has_report_seq_no() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FragmentInstanceExecStatusPB::has_report_seq_no() const {
  return _internal_has_report_seq_no();
}
inline void FragmentInstanceExecStatusPB::clear_report_seq_no() {
  report_seq_no_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FragmentInstanceExecStatusPB::_internal_report_seq_no() const {
  return report_seq_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FragmentInstanceExecStatusPB::report_seq_no() const {
  // @@protoc_insertion_point(field_get:impala.FragmentInstanceExecStatusPB.report_seq_no)
  return _internal_report_seq_no();
}
inline void FragmentInstanceExecStatusPB::_internal_set_report_seq_no(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  report_seq_no_ = value;
}
inline void FragmentInstanceExecStatusPB::set_report_seq_no(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_report_seq_no(value);
  // @@protoc_insertion_point(field_set:impala.FragmentInstanceExecStatusPB.report_seq_no)
}

// optional .impala.UniqueIdPB fragment_instance_id = 2;
inline bool FragmentInstanceExecStatusPB::_internal_has_fragment_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || fragment_instance_id_ != nullptr);
  return value;
}
inline bool FragmentInstanceExecStatusPB::has_fragment_instance_id() const {
  return _internal_has_fragment_instance_id();
}
inline const ::impala::UniqueIdPB& FragmentInstanceExecStatusPB::_internal_fragment_instance_id() const {
  const ::impala::UniqueIdPB* p = fragment_instance_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::UniqueIdPB&>(
      ::impala::_UniqueIdPB_default_instance_);
}
inline const ::impala::UniqueIdPB& FragmentInstanceExecStatusPB::fragment_instance_id() const {
  // @@protoc_insertion_point(field_get:impala.FragmentInstanceExecStatusPB.fragment_instance_id)
  return _internal_fragment_instance_id();
}
inline void FragmentInstanceExecStatusPB::unsafe_arena_set_allocated_fragment_instance_id(
    ::impala::UniqueIdPB* fragment_instance_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fragment_instance_id_);
  }
  fragment_instance_id_ = fragment_instance_id;
  if (fragment_instance_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.FragmentInstanceExecStatusPB.fragment_instance_id)
}
inline ::impala::UniqueIdPB* FragmentInstanceExecStatusPB::release_fragment_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = fragment_instance_id_;
  fragment_instance_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::UniqueIdPB* FragmentInstanceExecStatusPB::unsafe_arena_release_fragment_instance_id() {
  // @@protoc_insertion_point(field_release:impala.FragmentInstanceExecStatusPB.fragment_instance_id)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = fragment_instance_id_;
  fragment_instance_id_ = nullptr;
  return temp;
}
inline ::impala::UniqueIdPB* FragmentInstanceExecStatusPB::_internal_mutable_fragment_instance_id() {
  _has_bits_[0] |= 0x00000001u;
  if (fragment_instance_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::UniqueIdPB>(GetArena());
    fragment_instance_id_ = p;
  }
  return fragment_instance_id_;
}
inline ::impala::UniqueIdPB* FragmentInstanceExecStatusPB::mutable_fragment_instance_id() {
  // @@protoc_insertion_point(field_mutable:impala.FragmentInstanceExecStatusPB.fragment_instance_id)
  return _internal_mutable_fragment_instance_id();
}
inline void FragmentInstanceExecStatusPB::set_allocated_fragment_instance_id(::impala::UniqueIdPB* fragment_instance_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fragment_instance_id_);
  }
  if (fragment_instance_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fragment_instance_id)->GetArena();
    if (message_arena != submessage_arena) {
      fragment_instance_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fragment_instance_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fragment_instance_id_ = fragment_instance_id;
  // @@protoc_insertion_point(field_set_allocated:impala.FragmentInstanceExecStatusPB.fragment_instance_id)
}

// optional bool done = 3;
inline bool FragmentInstanceExecStatusPB::_internal_has_done() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FragmentInstanceExecStatusPB::has_done() const {
  return _internal_has_done();
}
inline void FragmentInstanceExecStatusPB::clear_done() {
  done_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool FragmentInstanceExecStatusPB::_internal_done() const {
  return done_;
}
inline bool FragmentInstanceExecStatusPB::done() const {
  // @@protoc_insertion_point(field_get:impala.FragmentInstanceExecStatusPB.done)
  return _internal_done();
}
inline void FragmentInstanceExecStatusPB::_internal_set_done(bool value) {
  _has_bits_[0] |= 0x00000008u;
  done_ = value;
}
inline void FragmentInstanceExecStatusPB::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:impala.FragmentInstanceExecStatusPB.done)
}

// optional .impala.FInstanceExecStatePB current_state = 4;
inline bool FragmentInstanceExecStatusPB::_internal_has_current_state() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FragmentInstanceExecStatusPB::has_current_state() const {
  return _internal_has_current_state();
}
inline void FragmentInstanceExecStatusPB::clear_current_state() {
  current_state_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::impala::FInstanceExecStatePB FragmentInstanceExecStatusPB::_internal_current_state() const {
  return static_cast< ::impala::FInstanceExecStatePB >(current_state_);
}
inline ::impala::FInstanceExecStatePB FragmentInstanceExecStatusPB::current_state() const {
  // @@protoc_insertion_point(field_get:impala.FragmentInstanceExecStatusPB.current_state)
  return _internal_current_state();
}
inline void FragmentInstanceExecStatusPB::_internal_set_current_state(::impala::FInstanceExecStatePB value) {
  assert(::impala::FInstanceExecStatePB_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  current_state_ = value;
}
inline void FragmentInstanceExecStatusPB::set_current_state(::impala::FInstanceExecStatePB value) {
  _internal_set_current_state(value);
  // @@protoc_insertion_point(field_set:impala.FragmentInstanceExecStatusPB.current_state)
}

// optional .impala.DmlExecStatusPB dml_exec_status = 5;
inline bool FragmentInstanceExecStatusPB::_internal_has_dml_exec_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || dml_exec_status_ != nullptr);
  return value;
}
inline bool FragmentInstanceExecStatusPB::has_dml_exec_status() const {
  return _internal_has_dml_exec_status();
}
inline void FragmentInstanceExecStatusPB::clear_dml_exec_status() {
  if (dml_exec_status_ != nullptr) dml_exec_status_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::impala::DmlExecStatusPB& FragmentInstanceExecStatusPB::_internal_dml_exec_status() const {
  const ::impala::DmlExecStatusPB* p = dml_exec_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::DmlExecStatusPB&>(
      ::impala::_DmlExecStatusPB_default_instance_);
}
inline const ::impala::DmlExecStatusPB& FragmentInstanceExecStatusPB::dml_exec_status() const {
  // @@protoc_insertion_point(field_get:impala.FragmentInstanceExecStatusPB.dml_exec_status)
  return _internal_dml_exec_status();
}
inline void FragmentInstanceExecStatusPB::unsafe_arena_set_allocated_dml_exec_status(
    ::impala::DmlExecStatusPB* dml_exec_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dml_exec_status_);
  }
  dml_exec_status_ = dml_exec_status;
  if (dml_exec_status) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.FragmentInstanceExecStatusPB.dml_exec_status)
}
inline ::impala::DmlExecStatusPB* FragmentInstanceExecStatusPB::release_dml_exec_status() {
  _has_bits_[0] &= ~0x00000002u;
  ::impala::DmlExecStatusPB* temp = dml_exec_status_;
  dml_exec_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::DmlExecStatusPB* FragmentInstanceExecStatusPB::unsafe_arena_release_dml_exec_status() {
  // @@protoc_insertion_point(field_release:impala.FragmentInstanceExecStatusPB.dml_exec_status)
  _has_bits_[0] &= ~0x00000002u;
  ::impala::DmlExecStatusPB* temp = dml_exec_status_;
  dml_exec_status_ = nullptr;
  return temp;
}
inline ::impala::DmlExecStatusPB* FragmentInstanceExecStatusPB::_internal_mutable_dml_exec_status() {
  _has_bits_[0] |= 0x00000002u;
  if (dml_exec_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::DmlExecStatusPB>(GetArena());
    dml_exec_status_ = p;
  }
  return dml_exec_status_;
}
inline ::impala::DmlExecStatusPB* FragmentInstanceExecStatusPB::mutable_dml_exec_status() {
  // @@protoc_insertion_point(field_mutable:impala.FragmentInstanceExecStatusPB.dml_exec_status)
  return _internal_mutable_dml_exec_status();
}
inline void FragmentInstanceExecStatusPB::set_allocated_dml_exec_status(::impala::DmlExecStatusPB* dml_exec_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dml_exec_status_;
  }
  if (dml_exec_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dml_exec_status);
    if (message_arena != submessage_arena) {
      dml_exec_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dml_exec_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dml_exec_status_ = dml_exec_status;
  // @@protoc_insertion_point(field_set_allocated:impala.FragmentInstanceExecStatusPB.dml_exec_status)
}

// repeated .impala.StatefulStatusPB stateful_report = 6;
inline int FragmentInstanceExecStatusPB::_internal_stateful_report_size() const {
  return stateful_report_.size();
}
inline int FragmentInstanceExecStatusPB::stateful_report_size() const {
  return _internal_stateful_report_size();
}
inline void FragmentInstanceExecStatusPB::clear_stateful_report() {
  stateful_report_.Clear();
}
inline ::impala::StatefulStatusPB* FragmentInstanceExecStatusPB::mutable_stateful_report(int index) {
  // @@protoc_insertion_point(field_mutable:impala.FragmentInstanceExecStatusPB.stateful_report)
  return stateful_report_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::StatefulStatusPB >*
FragmentInstanceExecStatusPB::mutable_stateful_report() {
  // @@protoc_insertion_point(field_mutable_list:impala.FragmentInstanceExecStatusPB.stateful_report)
  return &stateful_report_;
}
inline const ::impala::StatefulStatusPB& FragmentInstanceExecStatusPB::_internal_stateful_report(int index) const {
  return stateful_report_.Get(index);
}
inline const ::impala::StatefulStatusPB& FragmentInstanceExecStatusPB::stateful_report(int index) const {
  // @@protoc_insertion_point(field_get:impala.FragmentInstanceExecStatusPB.stateful_report)
  return _internal_stateful_report(index);
}
inline ::impala::StatefulStatusPB* FragmentInstanceExecStatusPB::_internal_add_stateful_report() {
  return stateful_report_.Add();
}
inline ::impala::StatefulStatusPB* FragmentInstanceExecStatusPB::add_stateful_report() {
  // @@protoc_insertion_point(field_add:impala.FragmentInstanceExecStatusPB.stateful_report)
  return _internal_add_stateful_report();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::StatefulStatusPB >&
FragmentInstanceExecStatusPB::stateful_report() const {
  // @@protoc_insertion_point(field_list:impala.FragmentInstanceExecStatusPB.stateful_report)
  return stateful_report_;
}

// repeated .impala.ExecSummaryDataPB exec_summary_data = 7;
inline int FragmentInstanceExecStatusPB::_internal_exec_summary_data_size() const {
  return exec_summary_data_.size();
}
inline int FragmentInstanceExecStatusPB::exec_summary_data_size() const {
  return _internal_exec_summary_data_size();
}
inline void FragmentInstanceExecStatusPB::clear_exec_summary_data() {
  exec_summary_data_.Clear();
}
inline ::impala::ExecSummaryDataPB* FragmentInstanceExecStatusPB::mutable_exec_summary_data(int index) {
  // @@protoc_insertion_point(field_mutable:impala.FragmentInstanceExecStatusPB.exec_summary_data)
  return exec_summary_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ExecSummaryDataPB >*
FragmentInstanceExecStatusPB::mutable_exec_summary_data() {
  // @@protoc_insertion_point(field_mutable_list:impala.FragmentInstanceExecStatusPB.exec_summary_data)
  return &exec_summary_data_;
}
inline const ::impala::ExecSummaryDataPB& FragmentInstanceExecStatusPB::_internal_exec_summary_data(int index) const {
  return exec_summary_data_.Get(index);
}
inline const ::impala::ExecSummaryDataPB& FragmentInstanceExecStatusPB::exec_summary_data(int index) const {
  // @@protoc_insertion_point(field_get:impala.FragmentInstanceExecStatusPB.exec_summary_data)
  return _internal_exec_summary_data(index);
}
inline ::impala::ExecSummaryDataPB* FragmentInstanceExecStatusPB::_internal_add_exec_summary_data() {
  return exec_summary_data_.Add();
}
inline ::impala::ExecSummaryDataPB* FragmentInstanceExecStatusPB::add_exec_summary_data() {
  // @@protoc_insertion_point(field_add:impala.FragmentInstanceExecStatusPB.exec_summary_data)
  return _internal_add_exec_summary_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ExecSummaryDataPB >&
FragmentInstanceExecStatusPB::exec_summary_data() const {
  // @@protoc_insertion_point(field_list:impala.FragmentInstanceExecStatusPB.exec_summary_data)
  return exec_summary_data_;
}

// -------------------------------------------------------------------

// FragmentExecStatusPB

// optional int32 fragment_idx = 1;
inline bool FragmentExecStatusPB::_internal_has_fragment_idx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FragmentExecStatusPB::has_fragment_idx() const {
  return _internal_has_fragment_idx();
}
inline void FragmentExecStatusPB::clear_fragment_idx() {
  fragment_idx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FragmentExecStatusPB::_internal_fragment_idx() const {
  return fragment_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FragmentExecStatusPB::fragment_idx() const {
  // @@protoc_insertion_point(field_get:impala.FragmentExecStatusPB.fragment_idx)
  return _internal_fragment_idx();
}
inline void FragmentExecStatusPB::_internal_set_fragment_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  fragment_idx_ = value;
}
inline void FragmentExecStatusPB::set_fragment_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fragment_idx(value);
  // @@protoc_insertion_point(field_set:impala.FragmentExecStatusPB.fragment_idx)
}

// optional int32 min_per_fragment_instance_idx = 2;
inline bool FragmentExecStatusPB::_internal_has_min_per_fragment_instance_idx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FragmentExecStatusPB::has_min_per_fragment_instance_idx() const {
  return _internal_has_min_per_fragment_instance_idx();
}
inline void FragmentExecStatusPB::clear_min_per_fragment_instance_idx() {
  min_per_fragment_instance_idx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FragmentExecStatusPB::_internal_min_per_fragment_instance_idx() const {
  return min_per_fragment_instance_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FragmentExecStatusPB::min_per_fragment_instance_idx() const {
  // @@protoc_insertion_point(field_get:impala.FragmentExecStatusPB.min_per_fragment_instance_idx)
  return _internal_min_per_fragment_instance_idx();
}
inline void FragmentExecStatusPB::_internal_set_min_per_fragment_instance_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  min_per_fragment_instance_idx_ = value;
}
inline void FragmentExecStatusPB::set_min_per_fragment_instance_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_per_fragment_instance_idx(value);
  // @@protoc_insertion_point(field_set:impala.FragmentExecStatusPB.min_per_fragment_instance_idx)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ReportExecStatusRequestPB

// optional .impala.UniqueIdPB query_id = 1;
inline bool ReportExecStatusRequestPB::_internal_has_query_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || query_id_ != nullptr);
  return value;
}
inline bool ReportExecStatusRequestPB::has_query_id() const {
  return _internal_has_query_id();
}
inline const ::impala::UniqueIdPB& ReportExecStatusRequestPB::_internal_query_id() const {
  const ::impala::UniqueIdPB* p = query_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::UniqueIdPB&>(
      ::impala::_UniqueIdPB_default_instance_);
}
inline const ::impala::UniqueIdPB& ReportExecStatusRequestPB::query_id() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.query_id)
  return _internal_query_id();
}
inline void ReportExecStatusRequestPB::unsafe_arena_set_allocated_query_id(
    ::impala::UniqueIdPB* query_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_id_);
  }
  query_id_ = query_id;
  if (query_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.ReportExecStatusRequestPB.query_id)
}
inline ::impala::UniqueIdPB* ReportExecStatusRequestPB::release_query_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = query_id_;
  query_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::UniqueIdPB* ReportExecStatusRequestPB::unsafe_arena_release_query_id() {
  // @@protoc_insertion_point(field_release:impala.ReportExecStatusRequestPB.query_id)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = query_id_;
  query_id_ = nullptr;
  return temp;
}
inline ::impala::UniqueIdPB* ReportExecStatusRequestPB::_internal_mutable_query_id() {
  _has_bits_[0] |= 0x00000001u;
  if (query_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::UniqueIdPB>(GetArena());
    query_id_ = p;
  }
  return query_id_;
}
inline ::impala::UniqueIdPB* ReportExecStatusRequestPB::mutable_query_id() {
  // @@protoc_insertion_point(field_mutable:impala.ReportExecStatusRequestPB.query_id)
  return _internal_mutable_query_id();
}
inline void ReportExecStatusRequestPB::set_allocated_query_id(::impala::UniqueIdPB* query_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_id_);
  }
  if (query_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_id)->GetArena();
    if (message_arena != submessage_arena) {
      query_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  query_id_ = query_id;
  // @@protoc_insertion_point(field_set_allocated:impala.ReportExecStatusRequestPB.query_id)
}

// optional int32 coord_state_idx = 2;
inline bool ReportExecStatusRequestPB::_internal_has_coord_state_idx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReportExecStatusRequestPB::has_coord_state_idx() const {
  return _internal_has_coord_state_idx();
}
inline void ReportExecStatusRequestPB::clear_coord_state_idx() {
  coord_state_idx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportExecStatusRequestPB::_internal_coord_state_idx() const {
  return coord_state_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportExecStatusRequestPB::coord_state_idx() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.coord_state_idx)
  return _internal_coord_state_idx();
}
inline void ReportExecStatusRequestPB::_internal_set_coord_state_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  coord_state_idx_ = value;
}
inline void ReportExecStatusRequestPB::set_coord_state_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coord_state_idx(value);
  // @@protoc_insertion_point(field_set:impala.ReportExecStatusRequestPB.coord_state_idx)
}

// repeated .impala.FragmentInstanceExecStatusPB instance_exec_status = 3;
inline int ReportExecStatusRequestPB::_internal_instance_exec_status_size() const {
  return instance_exec_status_.size();
}
inline int ReportExecStatusRequestPB::instance_exec_status_size() const {
  return _internal_instance_exec_status_size();
}
inline void ReportExecStatusRequestPB::clear_instance_exec_status() {
  instance_exec_status_.Clear();
}
inline ::impala::FragmentInstanceExecStatusPB* ReportExecStatusRequestPB::mutable_instance_exec_status(int index) {
  // @@protoc_insertion_point(field_mutable:impala.ReportExecStatusRequestPB.instance_exec_status)
  return instance_exec_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::FragmentInstanceExecStatusPB >*
ReportExecStatusRequestPB::mutable_instance_exec_status() {
  // @@protoc_insertion_point(field_mutable_list:impala.ReportExecStatusRequestPB.instance_exec_status)
  return &instance_exec_status_;
}
inline const ::impala::FragmentInstanceExecStatusPB& ReportExecStatusRequestPB::_internal_instance_exec_status(int index) const {
  return instance_exec_status_.Get(index);
}
inline const ::impala::FragmentInstanceExecStatusPB& ReportExecStatusRequestPB::instance_exec_status(int index) const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.instance_exec_status)
  return _internal_instance_exec_status(index);
}
inline ::impala::FragmentInstanceExecStatusPB* ReportExecStatusRequestPB::_internal_add_instance_exec_status() {
  return instance_exec_status_.Add();
}
inline ::impala::FragmentInstanceExecStatusPB* ReportExecStatusRequestPB::add_instance_exec_status() {
  // @@protoc_insertion_point(field_add:impala.ReportExecStatusRequestPB.instance_exec_status)
  return _internal_add_instance_exec_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::FragmentInstanceExecStatusPB >&
ReportExecStatusRequestPB::instance_exec_status() const {
  // @@protoc_insertion_point(field_list:impala.ReportExecStatusRequestPB.instance_exec_status)
  return instance_exec_status_;
}

// optional int32 thrift_profiles_sidecar_idx = 4;
inline bool ReportExecStatusRequestPB::_internal_has_thrift_profiles_sidecar_idx() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReportExecStatusRequestPB::has_thrift_profiles_sidecar_idx() const {
  return _internal_has_thrift_profiles_sidecar_idx();
}
inline void ReportExecStatusRequestPB::clear_thrift_profiles_sidecar_idx() {
  thrift_profiles_sidecar_idx_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportExecStatusRequestPB::_internal_thrift_profiles_sidecar_idx() const {
  return thrift_profiles_sidecar_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReportExecStatusRequestPB::thrift_profiles_sidecar_idx() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.thrift_profiles_sidecar_idx)
  return _internal_thrift_profiles_sidecar_idx();
}
inline void ReportExecStatusRequestPB::_internal_set_thrift_profiles_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  thrift_profiles_sidecar_idx_ = value;
}
inline void ReportExecStatusRequestPB::set_thrift_profiles_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_thrift_profiles_sidecar_idx(value);
  // @@protoc_insertion_point(field_set:impala.ReportExecStatusRequestPB.thrift_profiles_sidecar_idx)
}

// optional .impala.StatusPB overall_status = 5;
inline bool ReportExecStatusRequestPB::_internal_has_overall_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || overall_status_ != nullptr);
  return value;
}
inline bool ReportExecStatusRequestPB::has_overall_status() const {
  return _internal_has_overall_status();
}
inline const ::impala::StatusPB& ReportExecStatusRequestPB::_internal_overall_status() const {
  const ::impala::StatusPB* p = overall_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::StatusPB&>(
      ::impala::_StatusPB_default_instance_);
}
inline const ::impala::StatusPB& ReportExecStatusRequestPB::overall_status() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.overall_status)
  return _internal_overall_status();
}
inline void ReportExecStatusRequestPB::unsafe_arena_set_allocated_overall_status(
    ::impala::StatusPB* overall_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overall_status_);
  }
  overall_status_ = overall_status;
  if (overall_status) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.ReportExecStatusRequestPB.overall_status)
}
inline ::impala::StatusPB* ReportExecStatusRequestPB::release_overall_status() {
  _has_bits_[0] &= ~0x00000002u;
  ::impala::StatusPB* temp = overall_status_;
  overall_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::StatusPB* ReportExecStatusRequestPB::unsafe_arena_release_overall_status() {
  // @@protoc_insertion_point(field_release:impala.ReportExecStatusRequestPB.overall_status)
  _has_bits_[0] &= ~0x00000002u;
  ::impala::StatusPB* temp = overall_status_;
  overall_status_ = nullptr;
  return temp;
}
inline ::impala::StatusPB* ReportExecStatusRequestPB::_internal_mutable_overall_status() {
  _has_bits_[0] |= 0x00000002u;
  if (overall_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::StatusPB>(GetArena());
    overall_status_ = p;
  }
  return overall_status_;
}
inline ::impala::StatusPB* ReportExecStatusRequestPB::mutable_overall_status() {
  // @@protoc_insertion_point(field_mutable:impala.ReportExecStatusRequestPB.overall_status)
  return _internal_mutable_overall_status();
}
inline void ReportExecStatusRequestPB::set_allocated_overall_status(::impala::StatusPB* overall_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(overall_status_);
  }
  if (overall_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overall_status)->GetArena();
    if (message_arena != submessage_arena) {
      overall_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overall_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  overall_status_ = overall_status;
  // @@protoc_insertion_point(field_set_allocated:impala.ReportExecStatusRequestPB.overall_status)
}

// optional .impala.UniqueIdPB fragment_instance_id = 6;
inline bool ReportExecStatusRequestPB::_internal_has_fragment_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || fragment_instance_id_ != nullptr);
  return value;
}
inline bool ReportExecStatusRequestPB::has_fragment_instance_id() const {
  return _internal_has_fragment_instance_id();
}
inline const ::impala::UniqueIdPB& ReportExecStatusRequestPB::_internal_fragment_instance_id() const {
  const ::impala::UniqueIdPB* p = fragment_instance_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::UniqueIdPB&>(
      ::impala::_UniqueIdPB_default_instance_);
}
inline const ::impala::UniqueIdPB& ReportExecStatusRequestPB::fragment_instance_id() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.fragment_instance_id)
  return _internal_fragment_instance_id();
}
inline void ReportExecStatusRequestPB::unsafe_arena_set_allocated_fragment_instance_id(
    ::impala::UniqueIdPB* fragment_instance_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fragment_instance_id_);
  }
  fragment_instance_id_ = fragment_instance_id;
  if (fragment_instance_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.ReportExecStatusRequestPB.fragment_instance_id)
}
inline ::impala::UniqueIdPB* ReportExecStatusRequestPB::release_fragment_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::impala::UniqueIdPB* temp = fragment_instance_id_;
  fragment_instance_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::UniqueIdPB* ReportExecStatusRequestPB::unsafe_arena_release_fragment_instance_id() {
  // @@protoc_insertion_point(field_release:impala.ReportExecStatusRequestPB.fragment_instance_id)
  _has_bits_[0] &= ~0x00000004u;
  ::impala::UniqueIdPB* temp = fragment_instance_id_;
  fragment_instance_id_ = nullptr;
  return temp;
}
inline ::impala::UniqueIdPB* ReportExecStatusRequestPB::_internal_mutable_fragment_instance_id() {
  _has_bits_[0] |= 0x00000004u;
  if (fragment_instance_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::UniqueIdPB>(GetArena());
    fragment_instance_id_ = p;
  }
  return fragment_instance_id_;
}
inline ::impala::UniqueIdPB* ReportExecStatusRequestPB::mutable_fragment_instance_id() {
  // @@protoc_insertion_point(field_mutable:impala.ReportExecStatusRequestPB.fragment_instance_id)
  return _internal_mutable_fragment_instance_id();
}
inline void ReportExecStatusRequestPB::set_allocated_fragment_instance_id(::impala::UniqueIdPB* fragment_instance_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fragment_instance_id_);
  }
  if (fragment_instance_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fragment_instance_id)->GetArena();
    if (message_arena != submessage_arena) {
      fragment_instance_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fragment_instance_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fragment_instance_id_ = fragment_instance_id;
  // @@protoc_insertion_point(field_set_allocated:impala.ReportExecStatusRequestPB.fragment_instance_id)
}

// optional int64 peak_mem_consumption = 7;
inline bool ReportExecStatusRequestPB::_internal_has_peak_mem_consumption() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReportExecStatusRequestPB::has_peak_mem_consumption() const {
  return _internal_has_peak_mem_consumption();
}
inline void ReportExecStatusRequestPB::clear_peak_mem_consumption() {
  peak_mem_consumption_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::_internal_peak_mem_consumption() const {
  return peak_mem_consumption_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::peak_mem_consumption() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.peak_mem_consumption)
  return _internal_peak_mem_consumption();
}
inline void ReportExecStatusRequestPB::_internal_set_peak_mem_consumption(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  peak_mem_consumption_ = value;
}
inline void ReportExecStatusRequestPB::set_peak_mem_consumption(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_peak_mem_consumption(value);
  // @@protoc_insertion_point(field_set:impala.ReportExecStatusRequestPB.peak_mem_consumption)
}

// optional int64 cpu_user_ns = 8;
inline bool ReportExecStatusRequestPB::_internal_has_cpu_user_ns() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReportExecStatusRequestPB::has_cpu_user_ns() const {
  return _internal_has_cpu_user_ns();
}
inline void ReportExecStatusRequestPB::clear_cpu_user_ns() {
  cpu_user_ns_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::_internal_cpu_user_ns() const {
  return cpu_user_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::cpu_user_ns() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.cpu_user_ns)
  return _internal_cpu_user_ns();
}
inline void ReportExecStatusRequestPB::_internal_set_cpu_user_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  cpu_user_ns_ = value;
}
inline void ReportExecStatusRequestPB::set_cpu_user_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cpu_user_ns(value);
  // @@protoc_insertion_point(field_set:impala.ReportExecStatusRequestPB.cpu_user_ns)
}

// optional int64 cpu_sys_ns = 9;
inline bool ReportExecStatusRequestPB::_internal_has_cpu_sys_ns() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ReportExecStatusRequestPB::has_cpu_sys_ns() const {
  return _internal_has_cpu_sys_ns();
}
inline void ReportExecStatusRequestPB::clear_cpu_sys_ns() {
  cpu_sys_ns_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::_internal_cpu_sys_ns() const {
  return cpu_sys_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::cpu_sys_ns() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.cpu_sys_ns)
  return _internal_cpu_sys_ns();
}
inline void ReportExecStatusRequestPB::_internal_set_cpu_sys_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  cpu_sys_ns_ = value;
}
inline void ReportExecStatusRequestPB::set_cpu_sys_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cpu_sys_ns(value);
  // @@protoc_insertion_point(field_set:impala.ReportExecStatusRequestPB.cpu_sys_ns)
}

// optional int64 bytes_read = 10;
inline bool ReportExecStatusRequestPB::_internal_has_bytes_read() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ReportExecStatusRequestPB::has_bytes_read() const {
  return _internal_has_bytes_read();
}
inline void ReportExecStatusRequestPB::clear_bytes_read() {
  bytes_read_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::_internal_bytes_read() const {
  return bytes_read_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::bytes_read() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.bytes_read)
  return _internal_bytes_read();
}
inline void ReportExecStatusRequestPB::_internal_set_bytes_read(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  bytes_read_ = value;
}
inline void ReportExecStatusRequestPB::set_bytes_read(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytes_read(value);
  // @@protoc_insertion_point(field_set:impala.ReportExecStatusRequestPB.bytes_read)
}

// optional int64 scan_ranges_complete = 11;
inline bool ReportExecStatusRequestPB::_internal_has_scan_ranges_complete() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ReportExecStatusRequestPB::has_scan_ranges_complete() const {
  return _internal_has_scan_ranges_complete();
}
inline void ReportExecStatusRequestPB::clear_scan_ranges_complete() {
  scan_ranges_complete_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::_internal_scan_ranges_complete() const {
  return scan_ranges_complete_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::scan_ranges_complete() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.scan_ranges_complete)
  return _internal_scan_ranges_complete();
}
inline void ReportExecStatusRequestPB::_internal_set_scan_ranges_complete(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  scan_ranges_complete_ = value;
}
inline void ReportExecStatusRequestPB::set_scan_ranges_complete(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_scan_ranges_complete(value);
  // @@protoc_insertion_point(field_set:impala.ReportExecStatusRequestPB.scan_ranges_complete)
}

// optional int64 exchange_bytes_sent = 12;
inline bool ReportExecStatusRequestPB::_internal_has_exchange_bytes_sent() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ReportExecStatusRequestPB::has_exchange_bytes_sent() const {
  return _internal_has_exchange_bytes_sent();
}
inline void ReportExecStatusRequestPB::clear_exchange_bytes_sent() {
  exchange_bytes_sent_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::_internal_exchange_bytes_sent() const {
  return exchange_bytes_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::exchange_bytes_sent() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.exchange_bytes_sent)
  return _internal_exchange_bytes_sent();
}
inline void ReportExecStatusRequestPB::_internal_set_exchange_bytes_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  exchange_bytes_sent_ = value;
}
inline void ReportExecStatusRequestPB::set_exchange_bytes_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_exchange_bytes_sent(value);
  // @@protoc_insertion_point(field_set:impala.ReportExecStatusRequestPB.exchange_bytes_sent)
}

// optional int64 scan_bytes_sent = 13;
inline bool ReportExecStatusRequestPB::_internal_has_scan_bytes_sent() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ReportExecStatusRequestPB::has_scan_bytes_sent() const {
  return _internal_has_scan_bytes_sent();
}
inline void ReportExecStatusRequestPB::clear_scan_bytes_sent() {
  scan_bytes_sent_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::_internal_scan_bytes_sent() const {
  return scan_bytes_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::scan_bytes_sent() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.scan_bytes_sent)
  return _internal_scan_bytes_sent();
}
inline void ReportExecStatusRequestPB::_internal_set_scan_bytes_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  scan_bytes_sent_ = value;
}
inline void ReportExecStatusRequestPB::set_scan_bytes_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_scan_bytes_sent(value);
  // @@protoc_insertion_point(field_set:impala.ReportExecStatusRequestPB.scan_bytes_sent)
}

// repeated .impala.FragmentExecStatusPB fragment_exec_status = 14;
inline int ReportExecStatusRequestPB::_internal_fragment_exec_status_size() const {
  return fragment_exec_status_.size();
}
inline int ReportExecStatusRequestPB::fragment_exec_status_size() const {
  return _internal_fragment_exec_status_size();
}
inline void ReportExecStatusRequestPB::clear_fragment_exec_status() {
  fragment_exec_status_.Clear();
}
inline ::impala::FragmentExecStatusPB* ReportExecStatusRequestPB::mutable_fragment_exec_status(int index) {
  // @@protoc_insertion_point(field_mutable:impala.ReportExecStatusRequestPB.fragment_exec_status)
  return fragment_exec_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::FragmentExecStatusPB >*
ReportExecStatusRequestPB::mutable_fragment_exec_status() {
  // @@protoc_insertion_point(field_mutable_list:impala.ReportExecStatusRequestPB.fragment_exec_status)
  return &fragment_exec_status_;
}
inline const ::impala::FragmentExecStatusPB& ReportExecStatusRequestPB::_internal_fragment_exec_status(int index) const {
  return fragment_exec_status_.Get(index);
}
inline const ::impala::FragmentExecStatusPB& ReportExecStatusRequestPB::fragment_exec_status(int index) const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.fragment_exec_status)
  return _internal_fragment_exec_status(index);
}
inline ::impala::FragmentExecStatusPB* ReportExecStatusRequestPB::_internal_add_fragment_exec_status() {
  return fragment_exec_status_.Add();
}
inline ::impala::FragmentExecStatusPB* ReportExecStatusRequestPB::add_fragment_exec_status() {
  // @@protoc_insertion_point(field_add:impala.ReportExecStatusRequestPB.fragment_exec_status)
  return _internal_add_fragment_exec_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::FragmentExecStatusPB >&
ReportExecStatusRequestPB::fragment_exec_status() const {
  // @@protoc_insertion_point(field_list:impala.ReportExecStatusRequestPB.fragment_exec_status)
  return fragment_exec_status_;
}

// optional int64 backend_report_seq_no = 15;
inline bool ReportExecStatusRequestPB::_internal_has_backend_report_seq_no() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ReportExecStatusRequestPB::has_backend_report_seq_no() const {
  return _internal_has_backend_report_seq_no();
}
inline void ReportExecStatusRequestPB::clear_backend_report_seq_no() {
  backend_report_seq_no_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::_internal_backend_report_seq_no() const {
  return backend_report_seq_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReportExecStatusRequestPB::backend_report_seq_no() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.backend_report_seq_no)
  return _internal_backend_report_seq_no();
}
inline void ReportExecStatusRequestPB::_internal_set_backend_report_seq_no(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  backend_report_seq_no_ = value;
}
inline void ReportExecStatusRequestPB::set_backend_report_seq_no(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_backend_report_seq_no(value);
  // @@protoc_insertion_point(field_set:impala.ReportExecStatusRequestPB.backend_report_seq_no)
}

// map<int32, int64> per_join_rows_produced = 16;
inline int ReportExecStatusRequestPB::_internal_per_join_rows_produced_size() const {
  return per_join_rows_produced_.size();
}
inline int ReportExecStatusRequestPB::per_join_rows_produced_size() const {
  return _internal_per_join_rows_produced_size();
}
inline void ReportExecStatusRequestPB::clear_per_join_rows_produced() {
  per_join_rows_produced_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
ReportExecStatusRequestPB::_internal_per_join_rows_produced() const {
  return per_join_rows_produced_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
ReportExecStatusRequestPB::per_join_rows_produced() const {
  // @@protoc_insertion_point(field_map:impala.ReportExecStatusRequestPB.per_join_rows_produced)
  return _internal_per_join_rows_produced();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
ReportExecStatusRequestPB::_internal_mutable_per_join_rows_produced() {
  return per_join_rows_produced_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
ReportExecStatusRequestPB::mutable_per_join_rows_produced() {
  // @@protoc_insertion_point(field_mutable_map:impala.ReportExecStatusRequestPB.per_join_rows_produced)
  return _internal_mutable_per_join_rows_produced();
}

// optional bool local_disk_faulty = 17 [default = false];
inline bool ReportExecStatusRequestPB::_internal_has_local_disk_faulty() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ReportExecStatusRequestPB::has_local_disk_faulty() const {
  return _internal_has_local_disk_faulty();
}
inline void ReportExecStatusRequestPB::clear_local_disk_faulty() {
  local_disk_faulty_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ReportExecStatusRequestPB::_internal_local_disk_faulty() const {
  return local_disk_faulty_;
}
inline bool ReportExecStatusRequestPB::local_disk_faulty() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusRequestPB.local_disk_faulty)
  return _internal_local_disk_faulty();
}
inline void ReportExecStatusRequestPB::_internal_set_local_disk_faulty(bool value) {
  _has_bits_[0] |= 0x00002000u;
  local_disk_faulty_ = value;
}
inline void ReportExecStatusRequestPB::set_local_disk_faulty(bool value) {
  _internal_set_local_disk_faulty(value);
  // @@protoc_insertion_point(field_set:impala.ReportExecStatusRequestPB.local_disk_faulty)
}

// -------------------------------------------------------------------

// ReportExecStatusResponsePB

// optional .impala.StatusPB status = 1;
inline bool ReportExecStatusResponsePB::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool ReportExecStatusResponsePB::has_status() const {
  return _internal_has_status();
}
inline const ::impala::StatusPB& ReportExecStatusResponsePB::_internal_status() const {
  const ::impala::StatusPB* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::StatusPB&>(
      ::impala::_StatusPB_default_instance_);
}
inline const ::impala::StatusPB& ReportExecStatusResponsePB::status() const {
  // @@protoc_insertion_point(field_get:impala.ReportExecStatusResponsePB.status)
  return _internal_status();
}
inline void ReportExecStatusResponsePB::unsafe_arena_set_allocated_status(
    ::impala::StatusPB* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.ReportExecStatusResponsePB.status)
}
inline ::impala::StatusPB* ReportExecStatusResponsePB::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::StatusPB* ReportExecStatusResponsePB::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:impala.ReportExecStatusResponsePB.status)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::impala::StatusPB* ReportExecStatusResponsePB::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::StatusPB>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::impala::StatusPB* ReportExecStatusResponsePB::mutable_status() {
  // @@protoc_insertion_point(field_mutable:impala.ReportExecStatusResponsePB.status)
  return _internal_mutable_status();
}
inline void ReportExecStatusResponsePB::set_allocated_status(::impala::StatusPB* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:impala.ReportExecStatusResponsePB.status)
}

// -------------------------------------------------------------------

// CancelQueryFInstancesRequestPB

// optional .impala.UniqueIdPB query_id = 1;
inline bool CancelQueryFInstancesRequestPB::_internal_has_query_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || query_id_ != nullptr);
  return value;
}
inline bool CancelQueryFInstancesRequestPB::has_query_id() const {
  return _internal_has_query_id();
}
inline const ::impala::UniqueIdPB& CancelQueryFInstancesRequestPB::_internal_query_id() const {
  const ::impala::UniqueIdPB* p = query_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::UniqueIdPB&>(
      ::impala::_UniqueIdPB_default_instance_);
}
inline const ::impala::UniqueIdPB& CancelQueryFInstancesRequestPB::query_id() const {
  // @@protoc_insertion_point(field_get:impala.CancelQueryFInstancesRequestPB.query_id)
  return _internal_query_id();
}
inline void CancelQueryFInstancesRequestPB::unsafe_arena_set_allocated_query_id(
    ::impala::UniqueIdPB* query_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_id_);
  }
  query_id_ = query_id;
  if (query_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.CancelQueryFInstancesRequestPB.query_id)
}
inline ::impala::UniqueIdPB* CancelQueryFInstancesRequestPB::release_query_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = query_id_;
  query_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::UniqueIdPB* CancelQueryFInstancesRequestPB::unsafe_arena_release_query_id() {
  // @@protoc_insertion_point(field_release:impala.CancelQueryFInstancesRequestPB.query_id)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = query_id_;
  query_id_ = nullptr;
  return temp;
}
inline ::impala::UniqueIdPB* CancelQueryFInstancesRequestPB::_internal_mutable_query_id() {
  _has_bits_[0] |= 0x00000001u;
  if (query_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::UniqueIdPB>(GetArena());
    query_id_ = p;
  }
  return query_id_;
}
inline ::impala::UniqueIdPB* CancelQueryFInstancesRequestPB::mutable_query_id() {
  // @@protoc_insertion_point(field_mutable:impala.CancelQueryFInstancesRequestPB.query_id)
  return _internal_mutable_query_id();
}
inline void CancelQueryFInstancesRequestPB::set_allocated_query_id(::impala::UniqueIdPB* query_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_id_);
  }
  if (query_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_id)->GetArena();
    if (message_arena != submessage_arena) {
      query_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  query_id_ = query_id;
  // @@protoc_insertion_point(field_set_allocated:impala.CancelQueryFInstancesRequestPB.query_id)
}

// -------------------------------------------------------------------

// CancelQueryFInstancesResponsePB

// optional .impala.StatusPB status = 1;
inline bool CancelQueryFInstancesResponsePB::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool CancelQueryFInstancesResponsePB::has_status() const {
  return _internal_has_status();
}
inline const ::impala::StatusPB& CancelQueryFInstancesResponsePB::_internal_status() const {
  const ::impala::StatusPB* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::StatusPB&>(
      ::impala::_StatusPB_default_instance_);
}
inline const ::impala::StatusPB& CancelQueryFInstancesResponsePB::status() const {
  // @@protoc_insertion_point(field_get:impala.CancelQueryFInstancesResponsePB.status)
  return _internal_status();
}
inline void CancelQueryFInstancesResponsePB::unsafe_arena_set_allocated_status(
    ::impala::StatusPB* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.CancelQueryFInstancesResponsePB.status)
}
inline ::impala::StatusPB* CancelQueryFInstancesResponsePB::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::StatusPB* CancelQueryFInstancesResponsePB::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:impala.CancelQueryFInstancesResponsePB.status)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::impala::StatusPB* CancelQueryFInstancesResponsePB::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::StatusPB>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::impala::StatusPB* CancelQueryFInstancesResponsePB::mutable_status() {
  // @@protoc_insertion_point(field_mutable:impala.CancelQueryFInstancesResponsePB.status)
  return _internal_mutable_status();
}
inline void CancelQueryFInstancesResponsePB::set_allocated_status(::impala::StatusPB* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:impala.CancelQueryFInstancesResponsePB.status)
}

// -------------------------------------------------------------------

// RemoteShutdownParamsPB

// optional int64 deadline_s = 1;
inline bool RemoteShutdownParamsPB::_internal_has_deadline_s() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RemoteShutdownParamsPB::has_deadline_s() const {
  return _internal_has_deadline_s();
}
inline void RemoteShutdownParamsPB::clear_deadline_s() {
  deadline_s_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoteShutdownParamsPB::_internal_deadline_s() const {
  return deadline_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoteShutdownParamsPB::deadline_s() const {
  // @@protoc_insertion_point(field_get:impala.RemoteShutdownParamsPB.deadline_s)
  return _internal_deadline_s();
}
inline void RemoteShutdownParamsPB::_internal_set_deadline_s(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  deadline_s_ = value;
}
inline void RemoteShutdownParamsPB::set_deadline_s(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deadline_s(value);
  // @@protoc_insertion_point(field_set:impala.RemoteShutdownParamsPB.deadline_s)
}

// -------------------------------------------------------------------

// ShutdownStatusPB

// optional int64 grace_remaining_ms = 1;
inline bool ShutdownStatusPB::_internal_has_grace_remaining_ms() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShutdownStatusPB::has_grace_remaining_ms() const {
  return _internal_has_grace_remaining_ms();
}
inline void ShutdownStatusPB::clear_grace_remaining_ms() {
  grace_remaining_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShutdownStatusPB::_internal_grace_remaining_ms() const {
  return grace_remaining_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShutdownStatusPB::grace_remaining_ms() const {
  // @@protoc_insertion_point(field_get:impala.ShutdownStatusPB.grace_remaining_ms)
  return _internal_grace_remaining_ms();
}
inline void ShutdownStatusPB::_internal_set_grace_remaining_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  grace_remaining_ms_ = value;
}
inline void ShutdownStatusPB::set_grace_remaining_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_grace_remaining_ms(value);
  // @@protoc_insertion_point(field_set:impala.ShutdownStatusPB.grace_remaining_ms)
}

// optional int64 deadline_remaining_ms = 2;
inline bool ShutdownStatusPB::_internal_has_deadline_remaining_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShutdownStatusPB::has_deadline_remaining_ms() const {
  return _internal_has_deadline_remaining_ms();
}
inline void ShutdownStatusPB::clear_deadline_remaining_ms() {
  deadline_remaining_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShutdownStatusPB::_internal_deadline_remaining_ms() const {
  return deadline_remaining_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShutdownStatusPB::deadline_remaining_ms() const {
  // @@protoc_insertion_point(field_get:impala.ShutdownStatusPB.deadline_remaining_ms)
  return _internal_deadline_remaining_ms();
}
inline void ShutdownStatusPB::_internal_set_deadline_remaining_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  deadline_remaining_ms_ = value;
}
inline void ShutdownStatusPB::set_deadline_remaining_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deadline_remaining_ms(value);
  // @@protoc_insertion_point(field_set:impala.ShutdownStatusPB.deadline_remaining_ms)
}

// optional int64 finstances_executing = 3;
inline bool ShutdownStatusPB::_internal_has_finstances_executing() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShutdownStatusPB::has_finstances_executing() const {
  return _internal_has_finstances_executing();
}
inline void ShutdownStatusPB::clear_finstances_executing() {
  finstances_executing_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShutdownStatusPB::_internal_finstances_executing() const {
  return finstances_executing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShutdownStatusPB::finstances_executing() const {
  // @@protoc_insertion_point(field_get:impala.ShutdownStatusPB.finstances_executing)
  return _internal_finstances_executing();
}
inline void ShutdownStatusPB::_internal_set_finstances_executing(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  finstances_executing_ = value;
}
inline void ShutdownStatusPB::set_finstances_executing(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_finstances_executing(value);
  // @@protoc_insertion_point(field_set:impala.ShutdownStatusPB.finstances_executing)
}

// optional int64 client_requests_registered = 4;
inline bool ShutdownStatusPB::_internal_has_client_requests_registered() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShutdownStatusPB::has_client_requests_registered() const {
  return _internal_has_client_requests_registered();
}
inline void ShutdownStatusPB::clear_client_requests_registered() {
  client_requests_registered_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShutdownStatusPB::_internal_client_requests_registered() const {
  return client_requests_registered_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShutdownStatusPB::client_requests_registered() const {
  // @@protoc_insertion_point(field_get:impala.ShutdownStatusPB.client_requests_registered)
  return _internal_client_requests_registered();
}
inline void ShutdownStatusPB::_internal_set_client_requests_registered(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  client_requests_registered_ = value;
}
inline void ShutdownStatusPB::set_client_requests_registered(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_client_requests_registered(value);
  // @@protoc_insertion_point(field_set:impala.ShutdownStatusPB.client_requests_registered)
}

// optional int64 backend_queries_executing = 5;
inline bool ShutdownStatusPB::_internal_has_backend_queries_executing() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShutdownStatusPB::has_backend_queries_executing() const {
  return _internal_has_backend_queries_executing();
}
inline void ShutdownStatusPB::clear_backend_queries_executing() {
  backend_queries_executing_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShutdownStatusPB::_internal_backend_queries_executing() const {
  return backend_queries_executing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShutdownStatusPB::backend_queries_executing() const {
  // @@protoc_insertion_point(field_get:impala.ShutdownStatusPB.backend_queries_executing)
  return _internal_backend_queries_executing();
}
inline void ShutdownStatusPB::_internal_set_backend_queries_executing(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  backend_queries_executing_ = value;
}
inline void ShutdownStatusPB::set_backend_queries_executing(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_backend_queries_executing(value);
  // @@protoc_insertion_point(field_set:impala.ShutdownStatusPB.backend_queries_executing)
}

// -------------------------------------------------------------------

// RemoteShutdownResultPB

// optional .impala.StatusPB status = 1;
inline bool RemoteShutdownResultPB::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool RemoteShutdownResultPB::has_status() const {
  return _internal_has_status();
}
inline const ::impala::StatusPB& RemoteShutdownResultPB::_internal_status() const {
  const ::impala::StatusPB* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::StatusPB&>(
      ::impala::_StatusPB_default_instance_);
}
inline const ::impala::StatusPB& RemoteShutdownResultPB::status() const {
  // @@protoc_insertion_point(field_get:impala.RemoteShutdownResultPB.status)
  return _internal_status();
}
inline void RemoteShutdownResultPB::unsafe_arena_set_allocated_status(
    ::impala::StatusPB* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.RemoteShutdownResultPB.status)
}
inline ::impala::StatusPB* RemoteShutdownResultPB::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::StatusPB* RemoteShutdownResultPB::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:impala.RemoteShutdownResultPB.status)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::impala::StatusPB* RemoteShutdownResultPB::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::StatusPB>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::impala::StatusPB* RemoteShutdownResultPB::mutable_status() {
  // @@protoc_insertion_point(field_mutable:impala.RemoteShutdownResultPB.status)
  return _internal_mutable_status();
}
inline void RemoteShutdownResultPB::set_allocated_status(::impala::StatusPB* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:impala.RemoteShutdownResultPB.status)
}

// optional .impala.ShutdownStatusPB shutdown_status = 2;
inline bool RemoteShutdownResultPB::_internal_has_shutdown_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || shutdown_status_ != nullptr);
  return value;
}
inline bool RemoteShutdownResultPB::has_shutdown_status() const {
  return _internal_has_shutdown_status();
}
inline void RemoteShutdownResultPB::clear_shutdown_status() {
  if (shutdown_status_ != nullptr) shutdown_status_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::impala::ShutdownStatusPB& RemoteShutdownResultPB::_internal_shutdown_status() const {
  const ::impala::ShutdownStatusPB* p = shutdown_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::ShutdownStatusPB&>(
      ::impala::_ShutdownStatusPB_default_instance_);
}
inline const ::impala::ShutdownStatusPB& RemoteShutdownResultPB::shutdown_status() const {
  // @@protoc_insertion_point(field_get:impala.RemoteShutdownResultPB.shutdown_status)
  return _internal_shutdown_status();
}
inline void RemoteShutdownResultPB::unsafe_arena_set_allocated_shutdown_status(
    ::impala::ShutdownStatusPB* shutdown_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shutdown_status_);
  }
  shutdown_status_ = shutdown_status;
  if (shutdown_status) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.RemoteShutdownResultPB.shutdown_status)
}
inline ::impala::ShutdownStatusPB* RemoteShutdownResultPB::release_shutdown_status() {
  _has_bits_[0] &= ~0x00000002u;
  ::impala::ShutdownStatusPB* temp = shutdown_status_;
  shutdown_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::ShutdownStatusPB* RemoteShutdownResultPB::unsafe_arena_release_shutdown_status() {
  // @@protoc_insertion_point(field_release:impala.RemoteShutdownResultPB.shutdown_status)
  _has_bits_[0] &= ~0x00000002u;
  ::impala::ShutdownStatusPB* temp = shutdown_status_;
  shutdown_status_ = nullptr;
  return temp;
}
inline ::impala::ShutdownStatusPB* RemoteShutdownResultPB::_internal_mutable_shutdown_status() {
  _has_bits_[0] |= 0x00000002u;
  if (shutdown_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::ShutdownStatusPB>(GetArena());
    shutdown_status_ = p;
  }
  return shutdown_status_;
}
inline ::impala::ShutdownStatusPB* RemoteShutdownResultPB::mutable_shutdown_status() {
  // @@protoc_insertion_point(field_mutable:impala.RemoteShutdownResultPB.shutdown_status)
  return _internal_mutable_shutdown_status();
}
inline void RemoteShutdownResultPB::set_allocated_shutdown_status(::impala::ShutdownStatusPB* shutdown_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shutdown_status_;
  }
  if (shutdown_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shutdown_status);
    if (message_arena != submessage_arena) {
      shutdown_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shutdown_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shutdown_status_ = shutdown_status;
  // @@protoc_insertion_point(field_set_allocated:impala.RemoteShutdownResultPB.shutdown_status)
}

// -------------------------------------------------------------------

// PlanFragmentDestinationPB

// optional .impala.UniqueIdPB fragment_instance_id = 1;
inline bool PlanFragmentDestinationPB::_internal_has_fragment_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || fragment_instance_id_ != nullptr);
  return value;
}
inline bool PlanFragmentDestinationPB::has_fragment_instance_id() const {
  return _internal_has_fragment_instance_id();
}
inline const ::impala::UniqueIdPB& PlanFragmentDestinationPB::_internal_fragment_instance_id() const {
  const ::impala::UniqueIdPB* p = fragment_instance_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::UniqueIdPB&>(
      ::impala::_UniqueIdPB_default_instance_);
}
inline const ::impala::UniqueIdPB& PlanFragmentDestinationPB::fragment_instance_id() const {
  // @@protoc_insertion_point(field_get:impala.PlanFragmentDestinationPB.fragment_instance_id)
  return _internal_fragment_instance_id();
}
inline void PlanFragmentDestinationPB::unsafe_arena_set_allocated_fragment_instance_id(
    ::impala::UniqueIdPB* fragment_instance_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fragment_instance_id_);
  }
  fragment_instance_id_ = fragment_instance_id;
  if (fragment_instance_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.PlanFragmentDestinationPB.fragment_instance_id)
}
inline ::impala::UniqueIdPB* PlanFragmentDestinationPB::release_fragment_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = fragment_instance_id_;
  fragment_instance_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::UniqueIdPB* PlanFragmentDestinationPB::unsafe_arena_release_fragment_instance_id() {
  // @@protoc_insertion_point(field_release:impala.PlanFragmentDestinationPB.fragment_instance_id)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = fragment_instance_id_;
  fragment_instance_id_ = nullptr;
  return temp;
}
inline ::impala::UniqueIdPB* PlanFragmentDestinationPB::_internal_mutable_fragment_instance_id() {
  _has_bits_[0] |= 0x00000001u;
  if (fragment_instance_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::UniqueIdPB>(GetArena());
    fragment_instance_id_ = p;
  }
  return fragment_instance_id_;
}
inline ::impala::UniqueIdPB* PlanFragmentDestinationPB::mutable_fragment_instance_id() {
  // @@protoc_insertion_point(field_mutable:impala.PlanFragmentDestinationPB.fragment_instance_id)
  return _internal_mutable_fragment_instance_id();
}
inline void PlanFragmentDestinationPB::set_allocated_fragment_instance_id(::impala::UniqueIdPB* fragment_instance_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fragment_instance_id_);
  }
  if (fragment_instance_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fragment_instance_id)->GetArena();
    if (message_arena != submessage_arena) {
      fragment_instance_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fragment_instance_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fragment_instance_id_ = fragment_instance_id;
  // @@protoc_insertion_point(field_set_allocated:impala.PlanFragmentDestinationPB.fragment_instance_id)
}

// optional .impala.NetworkAddressPB address = 2;
inline bool PlanFragmentDestinationPB::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || address_ != nullptr);
  return value;
}
inline bool PlanFragmentDestinationPB::has_address() const {
  return _internal_has_address();
}
inline const ::impala::NetworkAddressPB& PlanFragmentDestinationPB::_internal_address() const {
  const ::impala::NetworkAddressPB* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::NetworkAddressPB&>(
      ::impala::_NetworkAddressPB_default_instance_);
}
inline const ::impala::NetworkAddressPB& PlanFragmentDestinationPB::address() const {
  // @@protoc_insertion_point(field_get:impala.PlanFragmentDestinationPB.address)
  return _internal_address();
}
inline void PlanFragmentDestinationPB::unsafe_arena_set_allocated_address(
    ::impala::NetworkAddressPB* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.PlanFragmentDestinationPB.address)
}
inline ::impala::NetworkAddressPB* PlanFragmentDestinationPB::release_address() {
  _has_bits_[0] &= ~0x00000002u;
  ::impala::NetworkAddressPB* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::NetworkAddressPB* PlanFragmentDestinationPB::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:impala.PlanFragmentDestinationPB.address)
  _has_bits_[0] &= ~0x00000002u;
  ::impala::NetworkAddressPB* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::impala::NetworkAddressPB* PlanFragmentDestinationPB::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000002u;
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::NetworkAddressPB>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::impala::NetworkAddressPB* PlanFragmentDestinationPB::mutable_address() {
  // @@protoc_insertion_point(field_mutable:impala.PlanFragmentDestinationPB.address)
  return _internal_mutable_address();
}
inline void PlanFragmentDestinationPB::set_allocated_address(::impala::NetworkAddressPB* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address)->GetArena();
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:impala.PlanFragmentDestinationPB.address)
}

// optional .impala.NetworkAddressPB krpc_backend = 3;
inline bool PlanFragmentDestinationPB::_internal_has_krpc_backend() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || krpc_backend_ != nullptr);
  return value;
}
inline bool PlanFragmentDestinationPB::has_krpc_backend() const {
  return _internal_has_krpc_backend();
}
inline const ::impala::NetworkAddressPB& PlanFragmentDestinationPB::_internal_krpc_backend() const {
  const ::impala::NetworkAddressPB* p = krpc_backend_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::NetworkAddressPB&>(
      ::impala::_NetworkAddressPB_default_instance_);
}
inline const ::impala::NetworkAddressPB& PlanFragmentDestinationPB::krpc_backend() const {
  // @@protoc_insertion_point(field_get:impala.PlanFragmentDestinationPB.krpc_backend)
  return _internal_krpc_backend();
}
inline void PlanFragmentDestinationPB::unsafe_arena_set_allocated_krpc_backend(
    ::impala::NetworkAddressPB* krpc_backend) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(krpc_backend_);
  }
  krpc_backend_ = krpc_backend;
  if (krpc_backend) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.PlanFragmentDestinationPB.krpc_backend)
}
inline ::impala::NetworkAddressPB* PlanFragmentDestinationPB::release_krpc_backend() {
  _has_bits_[0] &= ~0x00000004u;
  ::impala::NetworkAddressPB* temp = krpc_backend_;
  krpc_backend_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::NetworkAddressPB* PlanFragmentDestinationPB::unsafe_arena_release_krpc_backend() {
  // @@protoc_insertion_point(field_release:impala.PlanFragmentDestinationPB.krpc_backend)
  _has_bits_[0] &= ~0x00000004u;
  ::impala::NetworkAddressPB* temp = krpc_backend_;
  krpc_backend_ = nullptr;
  return temp;
}
inline ::impala::NetworkAddressPB* PlanFragmentDestinationPB::_internal_mutable_krpc_backend() {
  _has_bits_[0] |= 0x00000004u;
  if (krpc_backend_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::NetworkAddressPB>(GetArena());
    krpc_backend_ = p;
  }
  return krpc_backend_;
}
inline ::impala::NetworkAddressPB* PlanFragmentDestinationPB::mutable_krpc_backend() {
  // @@protoc_insertion_point(field_mutable:impala.PlanFragmentDestinationPB.krpc_backend)
  return _internal_mutable_krpc_backend();
}
inline void PlanFragmentDestinationPB::set_allocated_krpc_backend(::impala::NetworkAddressPB* krpc_backend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(krpc_backend_);
  }
  if (krpc_backend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(krpc_backend)->GetArena();
    if (message_arena != submessage_arena) {
      krpc_backend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, krpc_backend, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  krpc_backend_ = krpc_backend;
  // @@protoc_insertion_point(field_set_allocated:impala.PlanFragmentDestinationPB.krpc_backend)
}

// -------------------------------------------------------------------

// PlanFragmentCtxPB

// optional int32 fragment_idx = 1;
inline bool PlanFragmentCtxPB::_internal_has_fragment_idx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlanFragmentCtxPB::has_fragment_idx() const {
  return _internal_has_fragment_idx();
}
inline void PlanFragmentCtxPB::clear_fragment_idx() {
  fragment_idx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanFragmentCtxPB::_internal_fragment_idx() const {
  return fragment_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanFragmentCtxPB::fragment_idx() const {
  // @@protoc_insertion_point(field_get:impala.PlanFragmentCtxPB.fragment_idx)
  return _internal_fragment_idx();
}
inline void PlanFragmentCtxPB::_internal_set_fragment_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  fragment_idx_ = value;
}
inline void PlanFragmentCtxPB::set_fragment_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fragment_idx(value);
  // @@protoc_insertion_point(field_set:impala.PlanFragmentCtxPB.fragment_idx)
}

// repeated .impala.PlanFragmentDestinationPB destinations = 2;
inline int PlanFragmentCtxPB::_internal_destinations_size() const {
  return destinations_.size();
}
inline int PlanFragmentCtxPB::destinations_size() const {
  return _internal_destinations_size();
}
inline void PlanFragmentCtxPB::clear_destinations() {
  destinations_.Clear();
}
inline ::impala::PlanFragmentDestinationPB* PlanFragmentCtxPB::mutable_destinations(int index) {
  // @@protoc_insertion_point(field_mutable:impala.PlanFragmentCtxPB.destinations)
  return destinations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentDestinationPB >*
PlanFragmentCtxPB::mutable_destinations() {
  // @@protoc_insertion_point(field_mutable_list:impala.PlanFragmentCtxPB.destinations)
  return &destinations_;
}
inline const ::impala::PlanFragmentDestinationPB& PlanFragmentCtxPB::_internal_destinations(int index) const {
  return destinations_.Get(index);
}
inline const ::impala::PlanFragmentDestinationPB& PlanFragmentCtxPB::destinations(int index) const {
  // @@protoc_insertion_point(field_get:impala.PlanFragmentCtxPB.destinations)
  return _internal_destinations(index);
}
inline ::impala::PlanFragmentDestinationPB* PlanFragmentCtxPB::_internal_add_destinations() {
  return destinations_.Add();
}
inline ::impala::PlanFragmentDestinationPB* PlanFragmentCtxPB::add_destinations() {
  // @@protoc_insertion_point(field_add:impala.PlanFragmentCtxPB.destinations)
  return _internal_add_destinations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentDestinationPB >&
PlanFragmentCtxPB::destinations() const {
  // @@protoc_insertion_point(field_list:impala.PlanFragmentCtxPB.destinations)
  return destinations_;
}

// -------------------------------------------------------------------

// ScanRangeParamsPB

// optional .impala.ScanRangePB scan_range = 1;
inline bool ScanRangeParamsPB::_internal_has_scan_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || scan_range_ != nullptr);
  return value;
}
inline bool ScanRangeParamsPB::has_scan_range() const {
  return _internal_has_scan_range();
}
inline const ::impala::ScanRangePB& ScanRangeParamsPB::_internal_scan_range() const {
  const ::impala::ScanRangePB* p = scan_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::ScanRangePB&>(
      ::impala::_ScanRangePB_default_instance_);
}
inline const ::impala::ScanRangePB& ScanRangeParamsPB::scan_range() const {
  // @@protoc_insertion_point(field_get:impala.ScanRangeParamsPB.scan_range)
  return _internal_scan_range();
}
inline void ScanRangeParamsPB::unsafe_arena_set_allocated_scan_range(
    ::impala::ScanRangePB* scan_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_range_);
  }
  scan_range_ = scan_range;
  if (scan_range) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.ScanRangeParamsPB.scan_range)
}
inline ::impala::ScanRangePB* ScanRangeParamsPB::release_scan_range() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::ScanRangePB* temp = scan_range_;
  scan_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::ScanRangePB* ScanRangeParamsPB::unsafe_arena_release_scan_range() {
  // @@protoc_insertion_point(field_release:impala.ScanRangeParamsPB.scan_range)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::ScanRangePB* temp = scan_range_;
  scan_range_ = nullptr;
  return temp;
}
inline ::impala::ScanRangePB* ScanRangeParamsPB::_internal_mutable_scan_range() {
  _has_bits_[0] |= 0x00000001u;
  if (scan_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::ScanRangePB>(GetArena());
    scan_range_ = p;
  }
  return scan_range_;
}
inline ::impala::ScanRangePB* ScanRangeParamsPB::mutable_scan_range() {
  // @@protoc_insertion_point(field_mutable:impala.ScanRangeParamsPB.scan_range)
  return _internal_mutable_scan_range();
}
inline void ScanRangeParamsPB::set_allocated_scan_range(::impala::ScanRangePB* scan_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_range_);
  }
  if (scan_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_range)->GetArena();
    if (message_arena != submessage_arena) {
      scan_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan_range, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scan_range_ = scan_range;
  // @@protoc_insertion_point(field_set_allocated:impala.ScanRangeParamsPB.scan_range)
}

// optional int32 volume_id = 2 [default = -1];
inline bool ScanRangeParamsPB::_internal_has_volume_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScanRangeParamsPB::has_volume_id() const {
  return _internal_has_volume_id();
}
inline void ScanRangeParamsPB::clear_volume_id() {
  volume_id_ = -1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScanRangeParamsPB::_internal_volume_id() const {
  return volume_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScanRangeParamsPB::volume_id() const {
  // @@protoc_insertion_point(field_get:impala.ScanRangeParamsPB.volume_id)
  return _internal_volume_id();
}
inline void ScanRangeParamsPB::_internal_set_volume_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  volume_id_ = value;
}
inline void ScanRangeParamsPB::set_volume_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume_id(value);
  // @@protoc_insertion_point(field_set:impala.ScanRangeParamsPB.volume_id)
}

// optional bool try_hdfs_cache = 3 [default = false];
inline bool ScanRangeParamsPB::_internal_has_try_hdfs_cache() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScanRangeParamsPB::has_try_hdfs_cache() const {
  return _internal_has_try_hdfs_cache();
}
inline void ScanRangeParamsPB::clear_try_hdfs_cache() {
  try_hdfs_cache_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ScanRangeParamsPB::_internal_try_hdfs_cache() const {
  return try_hdfs_cache_;
}
inline bool ScanRangeParamsPB::try_hdfs_cache() const {
  // @@protoc_insertion_point(field_get:impala.ScanRangeParamsPB.try_hdfs_cache)
  return _internal_try_hdfs_cache();
}
inline void ScanRangeParamsPB::_internal_set_try_hdfs_cache(bool value) {
  _has_bits_[0] |= 0x00000002u;
  try_hdfs_cache_ = value;
}
inline void ScanRangeParamsPB::set_try_hdfs_cache(bool value) {
  _internal_set_try_hdfs_cache(value);
  // @@protoc_insertion_point(field_set:impala.ScanRangeParamsPB.try_hdfs_cache)
}

// optional bool is_remote = 4;
inline bool ScanRangeParamsPB::_internal_has_is_remote() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScanRangeParamsPB::has_is_remote() const {
  return _internal_has_is_remote();
}
inline void ScanRangeParamsPB::clear_is_remote() {
  is_remote_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ScanRangeParamsPB::_internal_is_remote() const {
  return is_remote_;
}
inline bool ScanRangeParamsPB::is_remote() const {
  // @@protoc_insertion_point(field_get:impala.ScanRangeParamsPB.is_remote)
  return _internal_is_remote();
}
inline void ScanRangeParamsPB::_internal_set_is_remote(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_remote_ = value;
}
inline void ScanRangeParamsPB::set_is_remote(bool value) {
  _internal_set_is_remote(value);
  // @@protoc_insertion_point(field_set:impala.ScanRangeParamsPB.is_remote)
}

// -------------------------------------------------------------------

// ScanRangesPB

// repeated .impala.ScanRangeParamsPB scan_ranges = 1;
inline int ScanRangesPB::_internal_scan_ranges_size() const {
  return scan_ranges_.size();
}
inline int ScanRangesPB::scan_ranges_size() const {
  return _internal_scan_ranges_size();
}
inline void ScanRangesPB::clear_scan_ranges() {
  scan_ranges_.Clear();
}
inline ::impala::ScanRangeParamsPB* ScanRangesPB::mutable_scan_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:impala.ScanRangesPB.scan_ranges)
  return scan_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ScanRangeParamsPB >*
ScanRangesPB::mutable_scan_ranges() {
  // @@protoc_insertion_point(field_mutable_list:impala.ScanRangesPB.scan_ranges)
  return &scan_ranges_;
}
inline const ::impala::ScanRangeParamsPB& ScanRangesPB::_internal_scan_ranges(int index) const {
  return scan_ranges_.Get(index);
}
inline const ::impala::ScanRangeParamsPB& ScanRangesPB::scan_ranges(int index) const {
  // @@protoc_insertion_point(field_get:impala.ScanRangesPB.scan_ranges)
  return _internal_scan_ranges(index);
}
inline ::impala::ScanRangeParamsPB* ScanRangesPB::_internal_add_scan_ranges() {
  return scan_ranges_.Add();
}
inline ::impala::ScanRangeParamsPB* ScanRangesPB::add_scan_ranges() {
  // @@protoc_insertion_point(field_add:impala.ScanRangesPB.scan_ranges)
  return _internal_add_scan_ranges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::ScanRangeParamsPB >&
ScanRangesPB::scan_ranges() const {
  // @@protoc_insertion_point(field_list:impala.ScanRangesPB.scan_ranges)
  return scan_ranges_;
}

// -------------------------------------------------------------------

// JoinBuildInputPB

// optional int32 join_node_id = 1;
inline bool JoinBuildInputPB::_internal_has_join_node_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool JoinBuildInputPB::has_join_node_id() const {
  return _internal_has_join_node_id();
}
inline void JoinBuildInputPB::clear_join_node_id() {
  join_node_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinBuildInputPB::_internal_join_node_id() const {
  return join_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinBuildInputPB::join_node_id() const {
  // @@protoc_insertion_point(field_get:impala.JoinBuildInputPB.join_node_id)
  return _internal_join_node_id();
}
inline void JoinBuildInputPB::_internal_set_join_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  join_node_id_ = value;
}
inline void JoinBuildInputPB::set_join_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_join_node_id(value);
  // @@protoc_insertion_point(field_set:impala.JoinBuildInputPB.join_node_id)
}

// optional .impala.UniqueIdPB input_finstance_id = 2;
inline bool JoinBuildInputPB::_internal_has_input_finstance_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || input_finstance_id_ != nullptr);
  return value;
}
inline bool JoinBuildInputPB::has_input_finstance_id() const {
  return _internal_has_input_finstance_id();
}
inline const ::impala::UniqueIdPB& JoinBuildInputPB::_internal_input_finstance_id() const {
  const ::impala::UniqueIdPB* p = input_finstance_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::UniqueIdPB&>(
      ::impala::_UniqueIdPB_default_instance_);
}
inline const ::impala::UniqueIdPB& JoinBuildInputPB::input_finstance_id() const {
  // @@protoc_insertion_point(field_get:impala.JoinBuildInputPB.input_finstance_id)
  return _internal_input_finstance_id();
}
inline void JoinBuildInputPB::unsafe_arena_set_allocated_input_finstance_id(
    ::impala::UniqueIdPB* input_finstance_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_finstance_id_);
  }
  input_finstance_id_ = input_finstance_id;
  if (input_finstance_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.JoinBuildInputPB.input_finstance_id)
}
inline ::impala::UniqueIdPB* JoinBuildInputPB::release_input_finstance_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = input_finstance_id_;
  input_finstance_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::UniqueIdPB* JoinBuildInputPB::unsafe_arena_release_input_finstance_id() {
  // @@protoc_insertion_point(field_release:impala.JoinBuildInputPB.input_finstance_id)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::UniqueIdPB* temp = input_finstance_id_;
  input_finstance_id_ = nullptr;
  return temp;
}
inline ::impala::UniqueIdPB* JoinBuildInputPB::_internal_mutable_input_finstance_id() {
  _has_bits_[0] |= 0x00000001u;
  if (input_finstance_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::UniqueIdPB>(GetArena());
    input_finstance_id_ = p;
  }
  return input_finstance_id_;
}
inline ::impala::UniqueIdPB* JoinBuildInputPB::mutable_input_finstance_id() {
  // @@protoc_insertion_point(field_mutable:impala.JoinBuildInputPB.input_finstance_id)
  return _internal_mutable_input_finstance_id();
}
inline void JoinBuildInputPB::set_allocated_input_finstance_id(::impala::UniqueIdPB* input_finstance_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_finstance_id_);
  }
  if (input_finstance_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_finstance_id)->GetArena();
    if (message_arena != submessage_arena) {
      input_finstance_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_finstance_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  input_finstance_id_ = input_finstance_id;
  // @@protoc_insertion_point(field_set_allocated:impala.JoinBuildInputPB.input_finstance_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PlanFragmentInstanceCtxPB

// optional int32 fragment_idx = 1;
inline bool PlanFragmentInstanceCtxPB::_internal_has_fragment_idx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlanFragmentInstanceCtxPB::has_fragment_idx() const {
  return _internal_has_fragment_idx();
}
inline void PlanFragmentInstanceCtxPB::clear_fragment_idx() {
  fragment_idx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanFragmentInstanceCtxPB::_internal_fragment_idx() const {
  return fragment_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanFragmentInstanceCtxPB::fragment_idx() const {
  // @@protoc_insertion_point(field_get:impala.PlanFragmentInstanceCtxPB.fragment_idx)
  return _internal_fragment_idx();
}
inline void PlanFragmentInstanceCtxPB::_internal_set_fragment_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  fragment_idx_ = value;
}
inline void PlanFragmentInstanceCtxPB::set_fragment_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fragment_idx(value);
  // @@protoc_insertion_point(field_set:impala.PlanFragmentInstanceCtxPB.fragment_idx)
}

// map<int32, .impala.ScanRangesPB> per_node_scan_ranges = 2;
inline int PlanFragmentInstanceCtxPB::_internal_per_node_scan_ranges_size() const {
  return per_node_scan_ranges_.size();
}
inline int PlanFragmentInstanceCtxPB::per_node_scan_ranges_size() const {
  return _internal_per_node_scan_ranges_size();
}
inline void PlanFragmentInstanceCtxPB::clear_per_node_scan_ranges() {
  per_node_scan_ranges_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >&
PlanFragmentInstanceCtxPB::_internal_per_node_scan_ranges() const {
  return per_node_scan_ranges_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >&
PlanFragmentInstanceCtxPB::per_node_scan_ranges() const {
  // @@protoc_insertion_point(field_map:impala.PlanFragmentInstanceCtxPB.per_node_scan_ranges)
  return _internal_per_node_scan_ranges();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >*
PlanFragmentInstanceCtxPB::_internal_mutable_per_node_scan_ranges() {
  return per_node_scan_ranges_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >*
PlanFragmentInstanceCtxPB::mutable_per_node_scan_ranges() {
  // @@protoc_insertion_point(field_mutable_map:impala.PlanFragmentInstanceCtxPB.per_node_scan_ranges)
  return _internal_mutable_per_node_scan_ranges();
}

// repeated .impala.JoinBuildInputPB join_build_inputs = 3;
inline int PlanFragmentInstanceCtxPB::_internal_join_build_inputs_size() const {
  return join_build_inputs_.size();
}
inline int PlanFragmentInstanceCtxPB::join_build_inputs_size() const {
  return _internal_join_build_inputs_size();
}
inline void PlanFragmentInstanceCtxPB::clear_join_build_inputs() {
  join_build_inputs_.Clear();
}
inline ::impala::JoinBuildInputPB* PlanFragmentInstanceCtxPB::mutable_join_build_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:impala.PlanFragmentInstanceCtxPB.join_build_inputs)
  return join_build_inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::JoinBuildInputPB >*
PlanFragmentInstanceCtxPB::mutable_join_build_inputs() {
  // @@protoc_insertion_point(field_mutable_list:impala.PlanFragmentInstanceCtxPB.join_build_inputs)
  return &join_build_inputs_;
}
inline const ::impala::JoinBuildInputPB& PlanFragmentInstanceCtxPB::_internal_join_build_inputs(int index) const {
  return join_build_inputs_.Get(index);
}
inline const ::impala::JoinBuildInputPB& PlanFragmentInstanceCtxPB::join_build_inputs(int index) const {
  // @@protoc_insertion_point(field_get:impala.PlanFragmentInstanceCtxPB.join_build_inputs)
  return _internal_join_build_inputs(index);
}
inline ::impala::JoinBuildInputPB* PlanFragmentInstanceCtxPB::_internal_add_join_build_inputs() {
  return join_build_inputs_.Add();
}
inline ::impala::JoinBuildInputPB* PlanFragmentInstanceCtxPB::add_join_build_inputs() {
  // @@protoc_insertion_point(field_add:impala.PlanFragmentInstanceCtxPB.join_build_inputs)
  return _internal_add_join_build_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::JoinBuildInputPB >&
PlanFragmentInstanceCtxPB::join_build_inputs() const {
  // @@protoc_insertion_point(field_list:impala.PlanFragmentInstanceCtxPB.join_build_inputs)
  return join_build_inputs_;
}

// -------------------------------------------------------------------

// ExecQueryFInstancesRequestPB

// optional int32 coord_state_idx = 1;
inline bool ExecQueryFInstancesRequestPB::_internal_has_coord_state_idx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExecQueryFInstancesRequestPB::has_coord_state_idx() const {
  return _internal_has_coord_state_idx();
}
inline void ExecQueryFInstancesRequestPB::clear_coord_state_idx() {
  coord_state_idx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecQueryFInstancesRequestPB::_internal_coord_state_idx() const {
  return coord_state_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecQueryFInstancesRequestPB::coord_state_idx() const {
  // @@protoc_insertion_point(field_get:impala.ExecQueryFInstancesRequestPB.coord_state_idx)
  return _internal_coord_state_idx();
}
inline void ExecQueryFInstancesRequestPB::_internal_set_coord_state_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  coord_state_idx_ = value;
}
inline void ExecQueryFInstancesRequestPB::set_coord_state_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coord_state_idx(value);
  // @@protoc_insertion_point(field_set:impala.ExecQueryFInstancesRequestPB.coord_state_idx)
}

// optional int32 query_ctx_sidecar_idx = 2;
inline bool ExecQueryFInstancesRequestPB::_internal_has_query_ctx_sidecar_idx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExecQueryFInstancesRequestPB::has_query_ctx_sidecar_idx() const {
  return _internal_has_query_ctx_sidecar_idx();
}
inline void ExecQueryFInstancesRequestPB::clear_query_ctx_sidecar_idx() {
  query_ctx_sidecar_idx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecQueryFInstancesRequestPB::_internal_query_ctx_sidecar_idx() const {
  return query_ctx_sidecar_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecQueryFInstancesRequestPB::query_ctx_sidecar_idx() const {
  // @@protoc_insertion_point(field_get:impala.ExecQueryFInstancesRequestPB.query_ctx_sidecar_idx)
  return _internal_query_ctx_sidecar_idx();
}
inline void ExecQueryFInstancesRequestPB::_internal_set_query_ctx_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  query_ctx_sidecar_idx_ = value;
}
inline void ExecQueryFInstancesRequestPB::set_query_ctx_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_query_ctx_sidecar_idx(value);
  // @@protoc_insertion_point(field_set:impala.ExecQueryFInstancesRequestPB.query_ctx_sidecar_idx)
}

// optional int32 plan_fragment_info_sidecar_idx = 3;
inline bool ExecQueryFInstancesRequestPB::_internal_has_plan_fragment_info_sidecar_idx() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ExecQueryFInstancesRequestPB::has_plan_fragment_info_sidecar_idx() const {
  return _internal_has_plan_fragment_info_sidecar_idx();
}
inline void ExecQueryFInstancesRequestPB::clear_plan_fragment_info_sidecar_idx() {
  plan_fragment_info_sidecar_idx_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecQueryFInstancesRequestPB::_internal_plan_fragment_info_sidecar_idx() const {
  return plan_fragment_info_sidecar_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecQueryFInstancesRequestPB::plan_fragment_info_sidecar_idx() const {
  // @@protoc_insertion_point(field_get:impala.ExecQueryFInstancesRequestPB.plan_fragment_info_sidecar_idx)
  return _internal_plan_fragment_info_sidecar_idx();
}
inline void ExecQueryFInstancesRequestPB::_internal_set_plan_fragment_info_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  plan_fragment_info_sidecar_idx_ = value;
}
inline void ExecQueryFInstancesRequestPB::set_plan_fragment_info_sidecar_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plan_fragment_info_sidecar_idx(value);
  // @@protoc_insertion_point(field_set:impala.ExecQueryFInstancesRequestPB.plan_fragment_info_sidecar_idx)
}

// optional int64 min_mem_reservation_bytes = 4;
inline bool ExecQueryFInstancesRequestPB::_internal_has_min_mem_reservation_bytes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExecQueryFInstancesRequestPB::has_min_mem_reservation_bytes() const {
  return _internal_has_min_mem_reservation_bytes();
}
inline void ExecQueryFInstancesRequestPB::clear_min_mem_reservation_bytes() {
  min_mem_reservation_bytes_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecQueryFInstancesRequestPB::_internal_min_mem_reservation_bytes() const {
  return min_mem_reservation_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecQueryFInstancesRequestPB::min_mem_reservation_bytes() const {
  // @@protoc_insertion_point(field_get:impala.ExecQueryFInstancesRequestPB.min_mem_reservation_bytes)
  return _internal_min_mem_reservation_bytes();
}
inline void ExecQueryFInstancesRequestPB::_internal_set_min_mem_reservation_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  min_mem_reservation_bytes_ = value;
}
inline void ExecQueryFInstancesRequestPB::set_min_mem_reservation_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_min_mem_reservation_bytes(value);
  // @@protoc_insertion_point(field_set:impala.ExecQueryFInstancesRequestPB.min_mem_reservation_bytes)
}

// optional int64 initial_mem_reservation_total_claims = 5;
inline bool ExecQueryFInstancesRequestPB::_internal_has_initial_mem_reservation_total_claims() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExecQueryFInstancesRequestPB::has_initial_mem_reservation_total_claims() const {
  return _internal_has_initial_mem_reservation_total_claims();
}
inline void ExecQueryFInstancesRequestPB::clear_initial_mem_reservation_total_claims() {
  initial_mem_reservation_total_claims_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecQueryFInstancesRequestPB::_internal_initial_mem_reservation_total_claims() const {
  return initial_mem_reservation_total_claims_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecQueryFInstancesRequestPB::initial_mem_reservation_total_claims() const {
  // @@protoc_insertion_point(field_get:impala.ExecQueryFInstancesRequestPB.initial_mem_reservation_total_claims)
  return _internal_initial_mem_reservation_total_claims();
}
inline void ExecQueryFInstancesRequestPB::_internal_set_initial_mem_reservation_total_claims(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  initial_mem_reservation_total_claims_ = value;
}
inline void ExecQueryFInstancesRequestPB::set_initial_mem_reservation_total_claims(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_initial_mem_reservation_total_claims(value);
  // @@protoc_insertion_point(field_set:impala.ExecQueryFInstancesRequestPB.initial_mem_reservation_total_claims)
}

// optional int64 per_backend_mem_limit = 6;
inline bool ExecQueryFInstancesRequestPB::_internal_has_per_backend_mem_limit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExecQueryFInstancesRequestPB::has_per_backend_mem_limit() const {
  return _internal_has_per_backend_mem_limit();
}
inline void ExecQueryFInstancesRequestPB::clear_per_backend_mem_limit() {
  per_backend_mem_limit_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecQueryFInstancesRequestPB::_internal_per_backend_mem_limit() const {
  return per_backend_mem_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExecQueryFInstancesRequestPB::per_backend_mem_limit() const {
  // @@protoc_insertion_point(field_get:impala.ExecQueryFInstancesRequestPB.per_backend_mem_limit)
  return _internal_per_backend_mem_limit();
}
inline void ExecQueryFInstancesRequestPB::_internal_set_per_backend_mem_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  per_backend_mem_limit_ = value;
}
inline void ExecQueryFInstancesRequestPB::set_per_backend_mem_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_per_backend_mem_limit(value);
  // @@protoc_insertion_point(field_set:impala.ExecQueryFInstancesRequestPB.per_backend_mem_limit)
}

// repeated .impala.PlanFragmentCtxPB fragment_ctxs = 7;
inline int ExecQueryFInstancesRequestPB::_internal_fragment_ctxs_size() const {
  return fragment_ctxs_.size();
}
inline int ExecQueryFInstancesRequestPB::fragment_ctxs_size() const {
  return _internal_fragment_ctxs_size();
}
inline void ExecQueryFInstancesRequestPB::clear_fragment_ctxs() {
  fragment_ctxs_.Clear();
}
inline ::impala::PlanFragmentCtxPB* ExecQueryFInstancesRequestPB::mutable_fragment_ctxs(int index) {
  // @@protoc_insertion_point(field_mutable:impala.ExecQueryFInstancesRequestPB.fragment_ctxs)
  return fragment_ctxs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentCtxPB >*
ExecQueryFInstancesRequestPB::mutable_fragment_ctxs() {
  // @@protoc_insertion_point(field_mutable_list:impala.ExecQueryFInstancesRequestPB.fragment_ctxs)
  return &fragment_ctxs_;
}
inline const ::impala::PlanFragmentCtxPB& ExecQueryFInstancesRequestPB::_internal_fragment_ctxs(int index) const {
  return fragment_ctxs_.Get(index);
}
inline const ::impala::PlanFragmentCtxPB& ExecQueryFInstancesRequestPB::fragment_ctxs(int index) const {
  // @@protoc_insertion_point(field_get:impala.ExecQueryFInstancesRequestPB.fragment_ctxs)
  return _internal_fragment_ctxs(index);
}
inline ::impala::PlanFragmentCtxPB* ExecQueryFInstancesRequestPB::_internal_add_fragment_ctxs() {
  return fragment_ctxs_.Add();
}
inline ::impala::PlanFragmentCtxPB* ExecQueryFInstancesRequestPB::add_fragment_ctxs() {
  // @@protoc_insertion_point(field_add:impala.ExecQueryFInstancesRequestPB.fragment_ctxs)
  return _internal_add_fragment_ctxs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentCtxPB >&
ExecQueryFInstancesRequestPB::fragment_ctxs() const {
  // @@protoc_insertion_point(field_list:impala.ExecQueryFInstancesRequestPB.fragment_ctxs)
  return fragment_ctxs_;
}

// repeated .impala.PlanFragmentInstanceCtxPB fragment_instance_ctxs = 8;
inline int ExecQueryFInstancesRequestPB::_internal_fragment_instance_ctxs_size() const {
  return fragment_instance_ctxs_.size();
}
inline int ExecQueryFInstancesRequestPB::fragment_instance_ctxs_size() const {
  return _internal_fragment_instance_ctxs_size();
}
inline void ExecQueryFInstancesRequestPB::clear_fragment_instance_ctxs() {
  fragment_instance_ctxs_.Clear();
}
inline ::impala::PlanFragmentInstanceCtxPB* ExecQueryFInstancesRequestPB::mutable_fragment_instance_ctxs(int index) {
  // @@protoc_insertion_point(field_mutable:impala.ExecQueryFInstancesRequestPB.fragment_instance_ctxs)
  return fragment_instance_ctxs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentInstanceCtxPB >*
ExecQueryFInstancesRequestPB::mutable_fragment_instance_ctxs() {
  // @@protoc_insertion_point(field_mutable_list:impala.ExecQueryFInstancesRequestPB.fragment_instance_ctxs)
  return &fragment_instance_ctxs_;
}
inline const ::impala::PlanFragmentInstanceCtxPB& ExecQueryFInstancesRequestPB::_internal_fragment_instance_ctxs(int index) const {
  return fragment_instance_ctxs_.Get(index);
}
inline const ::impala::PlanFragmentInstanceCtxPB& ExecQueryFInstancesRequestPB::fragment_instance_ctxs(int index) const {
  // @@protoc_insertion_point(field_get:impala.ExecQueryFInstancesRequestPB.fragment_instance_ctxs)
  return _internal_fragment_instance_ctxs(index);
}
inline ::impala::PlanFragmentInstanceCtxPB* ExecQueryFInstancesRequestPB::_internal_add_fragment_instance_ctxs() {
  return fragment_instance_ctxs_.Add();
}
inline ::impala::PlanFragmentInstanceCtxPB* ExecQueryFInstancesRequestPB::add_fragment_instance_ctxs() {
  // @@protoc_insertion_point(field_add:impala.ExecQueryFInstancesRequestPB.fragment_instance_ctxs)
  return _internal_add_fragment_instance_ctxs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::impala::PlanFragmentInstanceCtxPB >&
ExecQueryFInstancesRequestPB::fragment_instance_ctxs() const {
  // @@protoc_insertion_point(field_list:impala.ExecQueryFInstancesRequestPB.fragment_instance_ctxs)
  return fragment_instance_ctxs_;
}

// -------------------------------------------------------------------

// ExecQueryFInstancesResponsePB

// optional .impala.StatusPB status = 1;
inline bool ExecQueryFInstancesResponsePB::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool ExecQueryFInstancesResponsePB::has_status() const {
  return _internal_has_status();
}
inline const ::impala::StatusPB& ExecQueryFInstancesResponsePB::_internal_status() const {
  const ::impala::StatusPB* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::impala::StatusPB&>(
      ::impala::_StatusPB_default_instance_);
}
inline const ::impala::StatusPB& ExecQueryFInstancesResponsePB::status() const {
  // @@protoc_insertion_point(field_get:impala.ExecQueryFInstancesResponsePB.status)
  return _internal_status();
}
inline void ExecQueryFInstancesResponsePB::unsafe_arena_set_allocated_status(
    ::impala::StatusPB* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:impala.ExecQueryFInstancesResponsePB.status)
}
inline ::impala::StatusPB* ExecQueryFInstancesResponsePB::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::impala::StatusPB* ExecQueryFInstancesResponsePB::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:impala.ExecQueryFInstancesResponsePB.status)
  _has_bits_[0] &= ~0x00000001u;
  ::impala::StatusPB* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::impala::StatusPB* ExecQueryFInstancesResponsePB::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::impala::StatusPB>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::impala::StatusPB* ExecQueryFInstancesResponsePB::mutable_status() {
  // @@protoc_insertion_point(field_mutable:impala.ExecQueryFInstancesResponsePB.status)
  return _internal_mutable_status();
}
inline void ExecQueryFInstancesResponsePB::set_allocated_status(::impala::StatusPB* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:impala.ExecQueryFInstancesResponsePB.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace impala

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::impala::FInstanceExecStatePB> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::impala::FInstanceExecStatePB>() {
  return ::impala::FInstanceExecStatePB_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fservice_2eproto
