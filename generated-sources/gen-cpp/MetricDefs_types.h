/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MetricDefs_TYPES_H
#define MetricDefs_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Metrics_types.h"


namespace impala {

class TMetricDef;

typedef struct _TMetricDef__isset {
  _TMetricDef__isset() : key(false), kind(false), units(false), contexts(false), label(false), description(false) {}
  bool key :1;
  bool kind :1;
  bool units :1;
  bool contexts :1;
  bool label :1;
  bool description :1;
} _TMetricDef__isset;

class TMetricDef {
 public:

  TMetricDef(const TMetricDef&);
  TMetricDef(TMetricDef&&);
  TMetricDef& operator=(const TMetricDef&);
  TMetricDef& operator=(TMetricDef&&);
  TMetricDef() : key(), kind(( ::impala::TMetricKind::type)0), units(( ::impala::TUnit::type)0), label(), description() {
  }

  virtual ~TMetricDef() throw();
  std::string key;
   ::impala::TMetricKind::type kind;
   ::impala::TUnit::type units;
  std::vector<std::string>  contexts;
  std::string label;
  std::string description;

  _TMetricDef__isset __isset;

  void __set_key(const std::string& val);

  void __set_kind(const  ::impala::TMetricKind::type val);

  void __set_units(const  ::impala::TUnit::type val);

  void __set_contexts(const std::vector<std::string> & val);

  void __set_label(const std::string& val);

  void __set_description(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMetricDef &a, TMetricDef &b);

std::ostream& operator<<(std::ostream& out, const TMetricDef& obj);

} // namespace

#include "MetricDefs_types.tcc"

#endif
