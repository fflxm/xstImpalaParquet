// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace impala {
class ColumnValuePB;
class ColumnValuePBDefaultTypeInternal;
extern ColumnValuePBDefaultTypeInternal _ColumnValuePB_default_instance_;
class NetworkAddressPB;
class NetworkAddressPBDefaultTypeInternal;
extern NetworkAddressPBDefaultTypeInternal _NetworkAddressPB_default_instance_;
class StatusPB;
class StatusPBDefaultTypeInternal;
extern StatusPBDefaultTypeInternal _StatusPB_default_instance_;
class UniqueIdPB;
class UniqueIdPBDefaultTypeInternal;
extern UniqueIdPBDefaultTypeInternal _UniqueIdPB_default_instance_;
}  // namespace impala
PROTOBUF_NAMESPACE_OPEN
template<> ::impala::ColumnValuePB* Arena::CreateMaybeMessage<::impala::ColumnValuePB>(Arena*);
template<> ::impala::NetworkAddressPB* Arena::CreateMaybeMessage<::impala::NetworkAddressPB>(Arena*);
template<> ::impala::StatusPB* Arena::CreateMaybeMessage<::impala::StatusPB>(Arena*);
template<> ::impala::UniqueIdPB* Arena::CreateMaybeMessage<::impala::UniqueIdPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace impala {

enum CompressionTypePB : int {
  NONE = 0,
  DEFAULT = 1,
  GZIP = 2,
  DEFLATE = 3,
  BZIP2 = 4,
  SNAPPY = 5,
  SNAPPY_BLOCKED = 6,
  LZO = 7,
  LZ4 = 8,
  ZLIB = 9,
  ZSTD = 10,
  BROTLI = 11,
  LZ4_BLOCKED = 12
};
bool CompressionTypePB_IsValid(int value);
constexpr CompressionTypePB CompressionTypePB_MIN = NONE;
constexpr CompressionTypePB CompressionTypePB_MAX = LZ4_BLOCKED;
constexpr int CompressionTypePB_ARRAYSIZE = CompressionTypePB_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionTypePB_descriptor();
template<typename T>
inline const std::string& CompressionTypePB_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompressionTypePB>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompressionTypePB_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompressionTypePB_descriptor(), enum_t_value);
}
inline bool CompressionTypePB_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompressionTypePB* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompressionTypePB>(
    CompressionTypePB_descriptor(), name, value);
}
// ===================================================================

class NetworkAddressPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.NetworkAddressPB) */ {
 public:
  inline NetworkAddressPB() : NetworkAddressPB(nullptr) {}
  virtual ~NetworkAddressPB();

  NetworkAddressPB(const NetworkAddressPB& from);
  NetworkAddressPB(NetworkAddressPB&& from) noexcept
    : NetworkAddressPB() {
    *this = ::std::move(from);
  }

  inline NetworkAddressPB& operator=(const NetworkAddressPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkAddressPB& operator=(NetworkAddressPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkAddressPB& default_instance();

  static inline const NetworkAddressPB* internal_default_instance() {
    return reinterpret_cast<const NetworkAddressPB*>(
               &_NetworkAddressPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkAddressPB& a, NetworkAddressPB& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkAddressPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkAddressPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkAddressPB* New() const final {
    return CreateMaybeMessage<NetworkAddressPB>(nullptr);
  }

  NetworkAddressPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkAddressPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkAddressPB& from);
  void MergeFrom(const NetworkAddressPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkAddressPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.NetworkAddressPB";
  }
  protected:
  explicit NetworkAddressPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // required string hostname = 1;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // required int32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.NetworkAddressPB)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class StatusPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.StatusPB) */ {
 public:
  inline StatusPB() : StatusPB(nullptr) {}
  virtual ~StatusPB();

  StatusPB(const StatusPB& from);
  StatusPB(StatusPB&& from) noexcept
    : StatusPB() {
    *this = ::std::move(from);
  }

  inline StatusPB& operator=(const StatusPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusPB& operator=(StatusPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusPB& default_instance();

  static inline const StatusPB* internal_default_instance() {
    return reinterpret_cast<const StatusPB*>(
               &_StatusPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StatusPB& a, StatusPB& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusPB* New() const final {
    return CreateMaybeMessage<StatusPB>(nullptr);
  }

  StatusPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusPB& from);
  void MergeFrom(const StatusPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.StatusPB";
  }
  protected:
  explicit StatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgsFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
  };
  // repeated string error_msgs = 2;
  int error_msgs_size() const;
  private:
  int _internal_error_msgs_size() const;
  public:
  void clear_error_msgs();
  const std::string& error_msgs(int index) const;
  std::string* mutable_error_msgs(int index);
  void set_error_msgs(int index, const std::string& value);
  void set_error_msgs(int index, std::string&& value);
  void set_error_msgs(int index, const char* value);
  void set_error_msgs(int index, const char* value, size_t size);
  std::string* add_error_msgs();
  void add_error_msgs(const std::string& value);
  void add_error_msgs(std::string&& value);
  void add_error_msgs(const char* value);
  void add_error_msgs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& error_msgs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_error_msgs();
  private:
  const std::string& _internal_error_msgs(int index) const;
  std::string* _internal_add_error_msgs();
  public:

  // optional int32 status_code = 1;
  bool has_status_code() const;
  private:
  bool _internal_has_status_code() const;
  public:
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.StatusPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> error_msgs_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class UniqueIdPB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.UniqueIdPB) */ {
 public:
  inline UniqueIdPB() : UniqueIdPB(nullptr) {}
  virtual ~UniqueIdPB();

  UniqueIdPB(const UniqueIdPB& from);
  UniqueIdPB(UniqueIdPB&& from) noexcept
    : UniqueIdPB() {
    *this = ::std::move(from);
  }

  inline UniqueIdPB& operator=(const UniqueIdPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniqueIdPB& operator=(UniqueIdPB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UniqueIdPB& default_instance();

  static inline const UniqueIdPB* internal_default_instance() {
    return reinterpret_cast<const UniqueIdPB*>(
               &_UniqueIdPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UniqueIdPB& a, UniqueIdPB& b) {
    a.Swap(&b);
  }
  inline void Swap(UniqueIdPB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniqueIdPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniqueIdPB* New() const final {
    return CreateMaybeMessage<UniqueIdPB>(nullptr);
  }

  UniqueIdPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniqueIdPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UniqueIdPB& from);
  void MergeFrom(const UniqueIdPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UniqueIdPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.UniqueIdPB";
  }
  protected:
  explicit UniqueIdPB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiFieldNumber = 1,
    kLoFieldNumber = 2,
  };
  // required fixed64 hi = 1;
  bool has_hi() const;
  private:
  bool _internal_has_hi() const;
  public:
  void clear_hi();
  ::PROTOBUF_NAMESPACE_ID::uint64 hi() const;
  void set_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hi() const;
  void _internal_set_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required fixed64 lo = 2;
  bool has_lo() const;
  private:
  bool _internal_has_lo() const;
  public:
  void clear_lo();
  ::PROTOBUF_NAMESPACE_ID::uint64 lo() const;
  void set_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lo() const;
  void _internal_set_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.UniqueIdPB)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hi_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lo_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ColumnValuePB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:impala.ColumnValuePB) */ {
 public:
  inline ColumnValuePB() : ColumnValuePB(nullptr) {}
  virtual ~ColumnValuePB();

  ColumnValuePB(const ColumnValuePB& from);
  ColumnValuePB(ColumnValuePB&& from) noexcept
    : ColumnValuePB() {
    *this = ::std::move(from);
  }

  inline ColumnValuePB& operator=(const ColumnValuePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnValuePB& operator=(ColumnValuePB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColumnValuePB& default_instance();

  static inline const ColumnValuePB* internal_default_instance() {
    return reinterpret_cast<const ColumnValuePB*>(
               &_ColumnValuePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ColumnValuePB& a, ColumnValuePB& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnValuePB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnValuePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColumnValuePB* New() const final {
    return CreateMaybeMessage<ColumnValuePB>(nullptr);
  }

  ColumnValuePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColumnValuePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColumnValuePB& from);
  void MergeFrom(const ColumnValuePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnValuePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "impala.ColumnValuePB";
  }
  protected:
  explicit ColumnValuePB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValFieldNumber = 5,
    kBinaryValFieldNumber = 8,
    kTimestampValFieldNumber = 9,
    kDecimalValFieldNumber = 10,
    kBoolValFieldNumber = 1,
    kIntValFieldNumber = 2,
    kLongValFieldNumber = 3,
    kDoubleValFieldNumber = 4,
    kByteValFieldNumber = 6,
    kShortValFieldNumber = 7,
    kDateValFieldNumber = 11,
  };
  // optional string string_val = 5;
  bool has_string_val() const;
  private:
  bool _internal_has_string_val() const;
  public:
  void clear_string_val();
  const std::string& string_val() const;
  void set_string_val(const std::string& value);
  void set_string_val(std::string&& value);
  void set_string_val(const char* value);
  void set_string_val(const char* value, size_t size);
  std::string* mutable_string_val();
  std::string* release_string_val();
  void set_allocated_string_val(std::string* string_val);
  private:
  const std::string& _internal_string_val() const;
  void _internal_set_string_val(const std::string& value);
  std::string* _internal_mutable_string_val();
  public:

  // optional string binary_val = 8;
  bool has_binary_val() const;
  private:
  bool _internal_has_binary_val() const;
  public:
  void clear_binary_val();
  const std::string& binary_val() const;
  void set_binary_val(const std::string& value);
  void set_binary_val(std::string&& value);
  void set_binary_val(const char* value);
  void set_binary_val(const char* value, size_t size);
  std::string* mutable_binary_val();
  std::string* release_binary_val();
  void set_allocated_binary_val(std::string* binary_val);
  private:
  const std::string& _internal_binary_val() const;
  void _internal_set_binary_val(const std::string& value);
  std::string* _internal_mutable_binary_val();
  public:

  // optional string timestamp_val = 9;
  bool has_timestamp_val() const;
  private:
  bool _internal_has_timestamp_val() const;
  public:
  void clear_timestamp_val();
  const std::string& timestamp_val() const;
  void set_timestamp_val(const std::string& value);
  void set_timestamp_val(std::string&& value);
  void set_timestamp_val(const char* value);
  void set_timestamp_val(const char* value, size_t size);
  std::string* mutable_timestamp_val();
  std::string* release_timestamp_val();
  void set_allocated_timestamp_val(std::string* timestamp_val);
  private:
  const std::string& _internal_timestamp_val() const;
  void _internal_set_timestamp_val(const std::string& value);
  std::string* _internal_mutable_timestamp_val();
  public:

  // optional bytes decimal_val = 10;
  bool has_decimal_val() const;
  private:
  bool _internal_has_decimal_val() const;
  public:
  void clear_decimal_val();
  const std::string& decimal_val() const;
  void set_decimal_val(const std::string& value);
  void set_decimal_val(std::string&& value);
  void set_decimal_val(const char* value);
  void set_decimal_val(const void* value, size_t size);
  std::string* mutable_decimal_val();
  std::string* release_decimal_val();
  void set_allocated_decimal_val(std::string* decimal_val);
  private:
  const std::string& _internal_decimal_val() const;
  void _internal_set_decimal_val(const std::string& value);
  std::string* _internal_mutable_decimal_val();
  public:

  // optional bool bool_val = 1;
  bool has_bool_val() const;
  private:
  bool _internal_has_bool_val() const;
  public:
  void clear_bool_val();
  bool bool_val() const;
  void set_bool_val(bool value);
  private:
  bool _internal_bool_val() const;
  void _internal_set_bool_val(bool value);
  public:

  // optional int32 int_val = 2;
  bool has_int_val() const;
  private:
  bool _internal_has_int_val() const;
  public:
  void clear_int_val();
  ::PROTOBUF_NAMESPACE_ID::int32 int_val() const;
  void set_int_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_val() const;
  void _internal_set_int_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 long_val = 3;
  bool has_long_val() const;
  private:
  bool _internal_has_long_val() const;
  public:
  void clear_long_val();
  ::PROTOBUF_NAMESPACE_ID::int64 long_val() const;
  void set_long_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_long_val() const;
  void _internal_set_long_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double double_val = 4;
  bool has_double_val() const;
  private:
  bool _internal_has_double_val() const;
  public:
  void clear_double_val();
  double double_val() const;
  void set_double_val(double value);
  private:
  double _internal_double_val() const;
  void _internal_set_double_val(double value);
  public:

  // optional int32 byte_val = 6;
  bool has_byte_val() const;
  private:
  bool _internal_has_byte_val() const;
  public:
  void clear_byte_val();
  ::PROTOBUF_NAMESPACE_ID::int32 byte_val() const;
  void set_byte_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_byte_val() const;
  void _internal_set_byte_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 short_val = 7;
  bool has_short_val() const;
  private:
  bool _internal_has_short_val() const;
  public:
  void clear_short_val();
  ::PROTOBUF_NAMESPACE_ID::int32 short_val() const;
  void set_short_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_short_val() const;
  void _internal_set_short_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 date_val = 11;
  bool has_date_val() const;
  private:
  bool _internal_has_date_val() const;
  public:
  void clear_date_val();
  ::PROTOBUF_NAMESPACE_ID::int32 date_val() const;
  void set_date_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_date_val() const;
  void _internal_set_date_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:impala.ColumnValuePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decimal_val_;
  bool bool_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 int_val_;
  ::PROTOBUF_NAMESPACE_ID::int64 long_val_;
  double double_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 byte_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 short_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 date_val_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkAddressPB

// required string hostname = 1;
inline bool NetworkAddressPB::_internal_has_hostname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkAddressPB::has_hostname() const {
  return _internal_has_hostname();
}
inline void NetworkAddressPB::clear_hostname() {
  hostname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkAddressPB::hostname() const {
  // @@protoc_insertion_point(field_get:impala.NetworkAddressPB.hostname)
  return _internal_hostname();
}
inline void NetworkAddressPB::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:impala.NetworkAddressPB.hostname)
}
inline std::string* NetworkAddressPB::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:impala.NetworkAddressPB.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& NetworkAddressPB::_internal_hostname() const {
  return hostname_.Get();
}
inline void NetworkAddressPB::_internal_set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkAddressPB::set_hostname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.NetworkAddressPB.hostname)
}
inline void NetworkAddressPB::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.NetworkAddressPB.hostname)
}
inline void NetworkAddressPB::set_hostname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.NetworkAddressPB.hostname)
}
inline std::string* NetworkAddressPB::_internal_mutable_hostname() {
  _has_bits_[0] |= 0x00000001u;
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkAddressPB::release_hostname() {
  // @@protoc_insertion_point(field_release:impala.NetworkAddressPB.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hostname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkAddressPB::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.NetworkAddressPB.hostname)
}

// required int32 port = 2;
inline bool NetworkAddressPB::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkAddressPB::has_port() const {
  return _internal_has_port();
}
inline void NetworkAddressPB::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkAddressPB::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkAddressPB::port() const {
  // @@protoc_insertion_point(field_get:impala.NetworkAddressPB.port)
  return _internal_port();
}
inline void NetworkAddressPB::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
}
inline void NetworkAddressPB::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:impala.NetworkAddressPB.port)
}

// -------------------------------------------------------------------

// StatusPB

// optional int32 status_code = 1;
inline bool StatusPB::_internal_has_status_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatusPB::has_status_code() const {
  return _internal_has_status_code();
}
inline void StatusPB::clear_status_code() {
  status_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusPB::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatusPB::status_code() const {
  // @@protoc_insertion_point(field_get:impala.StatusPB.status_code)
  return _internal_status_code();
}
inline void StatusPB::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  status_code_ = value;
}
inline void StatusPB::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:impala.StatusPB.status_code)
}

// repeated string error_msgs = 2;
inline int StatusPB::_internal_error_msgs_size() const {
  return error_msgs_.size();
}
inline int StatusPB::error_msgs_size() const {
  return _internal_error_msgs_size();
}
inline void StatusPB::clear_error_msgs() {
  error_msgs_.Clear();
}
inline std::string* StatusPB::add_error_msgs() {
  // @@protoc_insertion_point(field_add_mutable:impala.StatusPB.error_msgs)
  return _internal_add_error_msgs();
}
inline const std::string& StatusPB::_internal_error_msgs(int index) const {
  return error_msgs_.Get(index);
}
inline const std::string& StatusPB::error_msgs(int index) const {
  // @@protoc_insertion_point(field_get:impala.StatusPB.error_msgs)
  return _internal_error_msgs(index);
}
inline std::string* StatusPB::mutable_error_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:impala.StatusPB.error_msgs)
  return error_msgs_.Mutable(index);
}
inline void StatusPB::set_error_msgs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:impala.StatusPB.error_msgs)
  error_msgs_.Mutable(index)->assign(value);
}
inline void StatusPB::set_error_msgs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:impala.StatusPB.error_msgs)
  error_msgs_.Mutable(index)->assign(std::move(value));
}
inline void StatusPB::set_error_msgs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:impala.StatusPB.error_msgs)
}
inline void StatusPB::set_error_msgs(int index, const char* value, size_t size) {
  error_msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:impala.StatusPB.error_msgs)
}
inline std::string* StatusPB::_internal_add_error_msgs() {
  return error_msgs_.Add();
}
inline void StatusPB::add_error_msgs(const std::string& value) {
  error_msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:impala.StatusPB.error_msgs)
}
inline void StatusPB::add_error_msgs(std::string&& value) {
  error_msgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:impala.StatusPB.error_msgs)
}
inline void StatusPB::add_error_msgs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:impala.StatusPB.error_msgs)
}
inline void StatusPB::add_error_msgs(const char* value, size_t size) {
  error_msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:impala.StatusPB.error_msgs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatusPB::error_msgs() const {
  // @@protoc_insertion_point(field_list:impala.StatusPB.error_msgs)
  return error_msgs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatusPB::mutable_error_msgs() {
  // @@protoc_insertion_point(field_mutable_list:impala.StatusPB.error_msgs)
  return &error_msgs_;
}

// -------------------------------------------------------------------

// UniqueIdPB

// required fixed64 hi = 1;
inline bool UniqueIdPB::_internal_has_hi() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UniqueIdPB::has_hi() const {
  return _internal_has_hi();
}
inline void UniqueIdPB::clear_hi() {
  hi_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniqueIdPB::_internal_hi() const {
  return hi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniqueIdPB::hi() const {
  // @@protoc_insertion_point(field_get:impala.UniqueIdPB.hi)
  return _internal_hi();
}
inline void UniqueIdPB::_internal_set_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  hi_ = value;
}
inline void UniqueIdPB::set_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hi(value);
  // @@protoc_insertion_point(field_set:impala.UniqueIdPB.hi)
}

// required fixed64 lo = 2;
inline bool UniqueIdPB::_internal_has_lo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UniqueIdPB::has_lo() const {
  return _internal_has_lo();
}
inline void UniqueIdPB::clear_lo() {
  lo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniqueIdPB::_internal_lo() const {
  return lo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniqueIdPB::lo() const {
  // @@protoc_insertion_point(field_get:impala.UniqueIdPB.lo)
  return _internal_lo();
}
inline void UniqueIdPB::_internal_set_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  lo_ = value;
}
inline void UniqueIdPB::set_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lo(value);
  // @@protoc_insertion_point(field_set:impala.UniqueIdPB.lo)
}

// -------------------------------------------------------------------

// ColumnValuePB

// optional bool bool_val = 1;
inline bool ColumnValuePB::_internal_has_bool_val() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ColumnValuePB::has_bool_val() const {
  return _internal_has_bool_val();
}
inline void ColumnValuePB::clear_bool_val() {
  bool_val_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ColumnValuePB::_internal_bool_val() const {
  return bool_val_;
}
inline bool ColumnValuePB::bool_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.bool_val)
  return _internal_bool_val();
}
inline void ColumnValuePB::_internal_set_bool_val(bool value) {
  _has_bits_[0] |= 0x00000010u;
  bool_val_ = value;
}
inline void ColumnValuePB::set_bool_val(bool value) {
  _internal_set_bool_val(value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.bool_val)
}

// optional int32 byte_val = 6;
inline bool ColumnValuePB::_internal_has_byte_val() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ColumnValuePB::has_byte_val() const {
  return _internal_has_byte_val();
}
inline void ColumnValuePB::clear_byte_val() {
  byte_val_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::_internal_byte_val() const {
  return byte_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::byte_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.byte_val)
  return _internal_byte_val();
}
inline void ColumnValuePB::_internal_set_byte_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  byte_val_ = value;
}
inline void ColumnValuePB::set_byte_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_byte_val(value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.byte_val)
}

// optional int32 short_val = 7;
inline bool ColumnValuePB::_internal_has_short_val() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ColumnValuePB::has_short_val() const {
  return _internal_has_short_val();
}
inline void ColumnValuePB::clear_short_val() {
  short_val_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::_internal_short_val() const {
  return short_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::short_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.short_val)
  return _internal_short_val();
}
inline void ColumnValuePB::_internal_set_short_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  short_val_ = value;
}
inline void ColumnValuePB::set_short_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_short_val(value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.short_val)
}

// optional int32 int_val = 2;
inline bool ColumnValuePB::_internal_has_int_val() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ColumnValuePB::has_int_val() const {
  return _internal_has_int_val();
}
inline void ColumnValuePB::clear_int_val() {
  int_val_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::_internal_int_val() const {
  return int_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::int_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.int_val)
  return _internal_int_val();
}
inline void ColumnValuePB::_internal_set_int_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  int_val_ = value;
}
inline void ColumnValuePB::set_int_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_val(value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.int_val)
}

// optional int64 long_val = 3;
inline bool ColumnValuePB::_internal_has_long_val() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ColumnValuePB::has_long_val() const {
  return _internal_has_long_val();
}
inline void ColumnValuePB::clear_long_val() {
  long_val_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ColumnValuePB::_internal_long_val() const {
  return long_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ColumnValuePB::long_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.long_val)
  return _internal_long_val();
}
inline void ColumnValuePB::_internal_set_long_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  long_val_ = value;
}
inline void ColumnValuePB::set_long_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_long_val(value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.long_val)
}

// optional double double_val = 4;
inline bool ColumnValuePB::_internal_has_double_val() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ColumnValuePB::has_double_val() const {
  return _internal_has_double_val();
}
inline void ColumnValuePB::clear_double_val() {
  double_val_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double ColumnValuePB::_internal_double_val() const {
  return double_val_;
}
inline double ColumnValuePB::double_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.double_val)
  return _internal_double_val();
}
inline void ColumnValuePB::_internal_set_double_val(double value) {
  _has_bits_[0] |= 0x00000080u;
  double_val_ = value;
}
inline void ColumnValuePB::set_double_val(double value) {
  _internal_set_double_val(value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.double_val)
}

// optional string string_val = 5;
inline bool ColumnValuePB::_internal_has_string_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColumnValuePB::has_string_val() const {
  return _internal_has_string_val();
}
inline void ColumnValuePB::clear_string_val() {
  string_val_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ColumnValuePB::string_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.string_val)
  return _internal_string_val();
}
inline void ColumnValuePB::set_string_val(const std::string& value) {
  _internal_set_string_val(value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.string_val)
}
inline std::string* ColumnValuePB::mutable_string_val() {
  // @@protoc_insertion_point(field_mutable:impala.ColumnValuePB.string_val)
  return _internal_mutable_string_val();
}
inline const std::string& ColumnValuePB::_internal_string_val() const {
  return string_val_.Get();
}
inline void ColumnValuePB::_internal_set_string_val(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ColumnValuePB::set_string_val(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  string_val_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.ColumnValuePB.string_val)
}
inline void ColumnValuePB::set_string_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  string_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.ColumnValuePB.string_val)
}
inline void ColumnValuePB::set_string_val(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  string_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.ColumnValuePB.string_val)
}
inline std::string* ColumnValuePB::_internal_mutable_string_val() {
  _has_bits_[0] |= 0x00000001u;
  return string_val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ColumnValuePB::release_string_val() {
  // @@protoc_insertion_point(field_release:impala.ColumnValuePB.string_val)
  if (!_internal_has_string_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ColumnValuePB::set_allocated_string_val(std::string* string_val) {
  if (string_val != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.ColumnValuePB.string_val)
}

// optional string binary_val = 8;
inline bool ColumnValuePB::_internal_has_binary_val() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColumnValuePB::has_binary_val() const {
  return _internal_has_binary_val();
}
inline void ColumnValuePB::clear_binary_val() {
  binary_val_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ColumnValuePB::binary_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.binary_val)
  return _internal_binary_val();
}
inline void ColumnValuePB::set_binary_val(const std::string& value) {
  _internal_set_binary_val(value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.binary_val)
}
inline std::string* ColumnValuePB::mutable_binary_val() {
  // @@protoc_insertion_point(field_mutable:impala.ColumnValuePB.binary_val)
  return _internal_mutable_binary_val();
}
inline const std::string& ColumnValuePB::_internal_binary_val() const {
  return binary_val_.Get();
}
inline void ColumnValuePB::_internal_set_binary_val(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  binary_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ColumnValuePB::set_binary_val(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  binary_val_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.ColumnValuePB.binary_val)
}
inline void ColumnValuePB::set_binary_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  binary_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.ColumnValuePB.binary_val)
}
inline void ColumnValuePB::set_binary_val(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  binary_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.ColumnValuePB.binary_val)
}
inline std::string* ColumnValuePB::_internal_mutable_binary_val() {
  _has_bits_[0] |= 0x00000002u;
  return binary_val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ColumnValuePB::release_binary_val() {
  // @@protoc_insertion_point(field_release:impala.ColumnValuePB.binary_val)
  if (!_internal_has_binary_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return binary_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ColumnValuePB::set_allocated_binary_val(std::string* binary_val) {
  if (binary_val != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  binary_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), binary_val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.ColumnValuePB.binary_val)
}

// optional string timestamp_val = 9;
inline bool ColumnValuePB::_internal_has_timestamp_val() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ColumnValuePB::has_timestamp_val() const {
  return _internal_has_timestamp_val();
}
inline void ColumnValuePB::clear_timestamp_val() {
  timestamp_val_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ColumnValuePB::timestamp_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.timestamp_val)
  return _internal_timestamp_val();
}
inline void ColumnValuePB::set_timestamp_val(const std::string& value) {
  _internal_set_timestamp_val(value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.timestamp_val)
}
inline std::string* ColumnValuePB::mutable_timestamp_val() {
  // @@protoc_insertion_point(field_mutable:impala.ColumnValuePB.timestamp_val)
  return _internal_mutable_timestamp_val();
}
inline const std::string& ColumnValuePB::_internal_timestamp_val() const {
  return timestamp_val_.Get();
}
inline void ColumnValuePB::_internal_set_timestamp_val(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ColumnValuePB::set_timestamp_val(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_val_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.ColumnValuePB.timestamp_val)
}
inline void ColumnValuePB::set_timestamp_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  timestamp_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.ColumnValuePB.timestamp_val)
}
inline void ColumnValuePB::set_timestamp_val(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.ColumnValuePB.timestamp_val)
}
inline std::string* ColumnValuePB::_internal_mutable_timestamp_val() {
  _has_bits_[0] |= 0x00000004u;
  return timestamp_val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ColumnValuePB::release_timestamp_val() {
  // @@protoc_insertion_point(field_release:impala.ColumnValuePB.timestamp_val)
  if (!_internal_has_timestamp_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return timestamp_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ColumnValuePB::set_allocated_timestamp_val(std::string* timestamp_val) {
  if (timestamp_val != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  timestamp_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp_val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.ColumnValuePB.timestamp_val)
}

// optional bytes decimal_val = 10;
inline bool ColumnValuePB::_internal_has_decimal_val() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ColumnValuePB::has_decimal_val() const {
  return _internal_has_decimal_val();
}
inline void ColumnValuePB::clear_decimal_val() {
  decimal_val_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ColumnValuePB::decimal_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.decimal_val)
  return _internal_decimal_val();
}
inline void ColumnValuePB::set_decimal_val(const std::string& value) {
  _internal_set_decimal_val(value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.decimal_val)
}
inline std::string* ColumnValuePB::mutable_decimal_val() {
  // @@protoc_insertion_point(field_mutable:impala.ColumnValuePB.decimal_val)
  return _internal_mutable_decimal_val();
}
inline const std::string& ColumnValuePB::_internal_decimal_val() const {
  return decimal_val_.Get();
}
inline void ColumnValuePB::_internal_set_decimal_val(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  decimal_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ColumnValuePB::set_decimal_val(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  decimal_val_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:impala.ColumnValuePB.decimal_val)
}
inline void ColumnValuePB::set_decimal_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  decimal_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:impala.ColumnValuePB.decimal_val)
}
inline void ColumnValuePB::set_decimal_val(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  decimal_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:impala.ColumnValuePB.decimal_val)
}
inline std::string* ColumnValuePB::_internal_mutable_decimal_val() {
  _has_bits_[0] |= 0x00000008u;
  return decimal_val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ColumnValuePB::release_decimal_val() {
  // @@protoc_insertion_point(field_release:impala.ColumnValuePB.decimal_val)
  if (!_internal_has_decimal_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return decimal_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ColumnValuePB::set_allocated_decimal_val(std::string* decimal_val) {
  if (decimal_val != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  decimal_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decimal_val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:impala.ColumnValuePB.decimal_val)
}

// optional int32 date_val = 11;
inline bool ColumnValuePB::_internal_has_date_val() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ColumnValuePB::has_date_val() const {
  return _internal_has_date_val();
}
inline void ColumnValuePB::clear_date_val() {
  date_val_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::_internal_date_val() const {
  return date_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColumnValuePB::date_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.date_val)
  return _internal_date_val();
}
inline void ColumnValuePB::_internal_set_date_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  date_val_ = value;
}
inline void ColumnValuePB::set_date_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_date_val(value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.date_val)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace impala

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::impala::CompressionTypePB> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::impala::CompressionTypePB>() {
  return ::impala::CompressionTypePB_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
