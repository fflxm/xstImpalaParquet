// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_service.proto

#include "control_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "kudu/util/protobuf-annotations.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuxErrorInfoPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DmlExecStatusPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DmlFileStatusPb_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DmlPartitionStatusPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DmlStatsPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorLogEntryPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecSummaryDataPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FragmentExecStatusPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_FragmentInstanceExecStatusPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinBuildInputPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KuduDmlStatsPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkAddressPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParquetDmlStatsPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlanFragmentCtxPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlanFragmentDestinationPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlanFragmentInstanceCtxPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RPCErrorInfoPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScanRangePB_planner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScanRangeParamsPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScanRangesPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShutdownStatusPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StatefulStatusPB_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_control_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatefulStatusPB_ErrorLogEntry_DoNotUse_control_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusPB_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniqueIdPB_common_2eproto;
namespace impala {
class ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse> _instance;
} _ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse_default_instance_;
class ParquetDmlStatsPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParquetDmlStatsPB> _instance;
} _ParquetDmlStatsPB_default_instance_;
class KuduDmlStatsPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KuduDmlStatsPB> _instance;
} _KuduDmlStatsPB_default_instance_;
class DmlStatsPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DmlStatsPB> _instance;
} _DmlStatsPB_default_instance_;
class DmlFileStatusPbDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DmlFileStatusPb> _instance;
} _DmlFileStatusPb_default_instance_;
class DmlPartitionStatusPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DmlPartitionStatusPB> _instance;
} _DmlPartitionStatusPB_default_instance_;
class DmlExecStatusPB_PerPartitionStatusEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse> _instance;
} _DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse_default_instance_;
class DmlExecStatusPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DmlExecStatusPB> _instance;
} _DmlExecStatusPB_default_instance_;
class ErrorLogEntryPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorLogEntryPB> _instance;
} _ErrorLogEntryPB_default_instance_;
class StatefulStatusPB_ErrorLogEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatefulStatusPB_ErrorLogEntry_DoNotUse> _instance;
} _StatefulStatusPB_ErrorLogEntry_DoNotUse_default_instance_;
class StatefulStatusPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatefulStatusPB> _instance;
} _StatefulStatusPB_default_instance_;
class ExecSummaryDataPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecSummaryDataPB> _instance;
} _ExecSummaryDataPB_default_instance_;
class RPCErrorInfoPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RPCErrorInfoPB> _instance;
} _RPCErrorInfoPB_default_instance_;
class AuxErrorInfoPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuxErrorInfoPB> _instance;
} _AuxErrorInfoPB_default_instance_;
class FragmentInstanceExecStatusPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FragmentInstanceExecStatusPB> _instance;
} _FragmentInstanceExecStatusPB_default_instance_;
class FragmentExecStatusPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FragmentExecStatusPB> _instance;
} _FragmentExecStatusPB_default_instance_;
class ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse> _instance;
} _ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse_default_instance_;
class ReportExecStatusRequestPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportExecStatusRequestPB> _instance;
} _ReportExecStatusRequestPB_default_instance_;
class ReportExecStatusResponsePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportExecStatusResponsePB> _instance;
} _ReportExecStatusResponsePB_default_instance_;
class CancelQueryFInstancesRequestPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelQueryFInstancesRequestPB> _instance;
} _CancelQueryFInstancesRequestPB_default_instance_;
class CancelQueryFInstancesResponsePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelQueryFInstancesResponsePB> _instance;
} _CancelQueryFInstancesResponsePB_default_instance_;
class RemoteShutdownParamsPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteShutdownParamsPB> _instance;
} _RemoteShutdownParamsPB_default_instance_;
class ShutdownStatusPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShutdownStatusPB> _instance;
} _ShutdownStatusPB_default_instance_;
class RemoteShutdownResultPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteShutdownResultPB> _instance;
} _RemoteShutdownResultPB_default_instance_;
class PlanFragmentDestinationPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanFragmentDestinationPB> _instance;
} _PlanFragmentDestinationPB_default_instance_;
class PlanFragmentCtxPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanFragmentCtxPB> _instance;
} _PlanFragmentCtxPB_default_instance_;
class ScanRangeParamsPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanRangeParamsPB> _instance;
} _ScanRangeParamsPB_default_instance_;
class ScanRangesPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanRangesPB> _instance;
} _ScanRangesPB_default_instance_;
class JoinBuildInputPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinBuildInputPB> _instance;
} _JoinBuildInputPB_default_instance_;
class PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse> _instance;
} _PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse_default_instance_;
class PlanFragmentInstanceCtxPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanFragmentInstanceCtxPB> _instance;
} _PlanFragmentInstanceCtxPB_default_instance_;
class ExecQueryFInstancesRequestPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecQueryFInstancesRequestPB> _instance;
} _ExecQueryFInstancesRequestPB_default_instance_;
class ExecQueryFInstancesResponsePBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecQueryFInstancesResponsePB> _instance;
} _ExecQueryFInstancesResponsePB_default_instance_;
}  // namespace impala
static void InitDefaultsscc_info_AuxErrorInfoPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_AuxErrorInfoPB_default_instance_;
    new (ptr) ::impala::AuxErrorInfoPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuxErrorInfoPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuxErrorInfoPB_control_5fservice_2eproto}, {
      &scc_info_RPCErrorInfoPB_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_CancelQueryFInstancesRequestPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_CancelQueryFInstancesRequestPB_default_instance_;
    new (ptr) ::impala::CancelQueryFInstancesRequestPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CancelQueryFInstancesRequestPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CancelQueryFInstancesRequestPB_control_5fservice_2eproto}, {
      &scc_info_UniqueIdPB_common_2eproto.base,}};

static void InitDefaultsscc_info_CancelQueryFInstancesResponsePB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_CancelQueryFInstancesResponsePB_default_instance_;
    new (ptr) ::impala::CancelQueryFInstancesResponsePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CancelQueryFInstancesResponsePB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CancelQueryFInstancesResponsePB_control_5fservice_2eproto}, {
      &scc_info_StatusPB_common_2eproto.base,}};

static void InitDefaultsscc_info_DmlExecStatusPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_DmlExecStatusPB_default_instance_;
    new (ptr) ::impala::DmlExecStatusPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DmlExecStatusPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DmlExecStatusPB_control_5fservice_2eproto}, {
      &scc_info_DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse_default_instance_;
    new (ptr) ::impala::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse_control_5fservice_2eproto}, {
      &scc_info_DmlPartitionStatusPB_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_DmlFileStatusPb_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_DmlFileStatusPb_default_instance_;
    new (ptr) ::impala::DmlFileStatusPb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DmlFileStatusPb_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DmlFileStatusPb_control_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_DmlPartitionStatusPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_DmlPartitionStatusPB_default_instance_;
    new (ptr) ::impala::DmlPartitionStatusPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DmlPartitionStatusPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DmlPartitionStatusPB_control_5fservice_2eproto}, {
      &scc_info_DmlStatsPB_control_5fservice_2eproto.base,
      &scc_info_DmlFileStatusPb_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_DmlStatsPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_DmlStatsPB_default_instance_;
    new (ptr) ::impala::DmlStatsPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DmlStatsPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DmlStatsPB_control_5fservice_2eproto}, {
      &scc_info_ParquetDmlStatsPB_control_5fservice_2eproto.base,
      &scc_info_KuduDmlStatsPB_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ErrorLogEntryPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ErrorLogEntryPB_default_instance_;
    new (ptr) ::impala::ErrorLogEntryPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorLogEntryPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorLogEntryPB_control_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ExecQueryFInstancesRequestPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ExecQueryFInstancesRequestPB_default_instance_;
    new (ptr) ::impala::ExecQueryFInstancesRequestPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExecQueryFInstancesRequestPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ExecQueryFInstancesRequestPB_control_5fservice_2eproto}, {
      &scc_info_PlanFragmentCtxPB_control_5fservice_2eproto.base,
      &scc_info_PlanFragmentInstanceCtxPB_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ExecQueryFInstancesResponsePB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ExecQueryFInstancesResponsePB_default_instance_;
    new (ptr) ::impala::ExecQueryFInstancesResponsePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExecQueryFInstancesResponsePB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExecQueryFInstancesResponsePB_control_5fservice_2eproto}, {
      &scc_info_StatusPB_common_2eproto.base,}};

static void InitDefaultsscc_info_ExecSummaryDataPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ExecSummaryDataPB_default_instance_;
    new (ptr) ::impala::ExecSummaryDataPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecSummaryDataPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExecSummaryDataPB_control_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FragmentExecStatusPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_FragmentExecStatusPB_default_instance_;
    new (ptr) ::impala::FragmentExecStatusPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FragmentExecStatusPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FragmentExecStatusPB_control_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FragmentInstanceExecStatusPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_FragmentInstanceExecStatusPB_default_instance_;
    new (ptr) ::impala::FragmentInstanceExecStatusPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_FragmentInstanceExecStatusPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_FragmentInstanceExecStatusPB_control_5fservice_2eproto}, {
      &scc_info_UniqueIdPB_common_2eproto.base,
      &scc_info_DmlExecStatusPB_control_5fservice_2eproto.base,
      &scc_info_StatefulStatusPB_control_5fservice_2eproto.base,
      &scc_info_ExecSummaryDataPB_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_JoinBuildInputPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_JoinBuildInputPB_default_instance_;
    new (ptr) ::impala::JoinBuildInputPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinBuildInputPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JoinBuildInputPB_control_5fservice_2eproto}, {
      &scc_info_UniqueIdPB_common_2eproto.base,}};

static void InitDefaultsscc_info_KuduDmlStatsPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_KuduDmlStatsPB_default_instance_;
    new (ptr) ::impala::KuduDmlStatsPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KuduDmlStatsPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KuduDmlStatsPB_control_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ParquetDmlStatsPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ParquetDmlStatsPB_default_instance_;
    new (ptr) ::impala::ParquetDmlStatsPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ParquetDmlStatsPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ParquetDmlStatsPB_control_5fservice_2eproto}, {
      &scc_info_ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse_default_instance_;
    new (ptr) ::impala::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse_control_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_PlanFragmentCtxPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_PlanFragmentCtxPB_default_instance_;
    new (ptr) ::impala::PlanFragmentCtxPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlanFragmentCtxPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlanFragmentCtxPB_control_5fservice_2eproto}, {
      &scc_info_PlanFragmentDestinationPB_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_PlanFragmentDestinationPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_PlanFragmentDestinationPB_default_instance_;
    new (ptr) ::impala::PlanFragmentDestinationPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlanFragmentDestinationPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PlanFragmentDestinationPB_control_5fservice_2eproto}, {
      &scc_info_UniqueIdPB_common_2eproto.base,
      &scc_info_NetworkAddressPB_common_2eproto.base,}};

static void InitDefaultsscc_info_PlanFragmentInstanceCtxPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_PlanFragmentInstanceCtxPB_default_instance_;
    new (ptr) ::impala::PlanFragmentInstanceCtxPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlanFragmentInstanceCtxPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PlanFragmentInstanceCtxPB_control_5fservice_2eproto}, {
      &scc_info_PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse_control_5fservice_2eproto.base,
      &scc_info_JoinBuildInputPB_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse_default_instance_;
    new (ptr) ::impala::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse_control_5fservice_2eproto}, {
      &scc_info_ScanRangesPB_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_RPCErrorInfoPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_RPCErrorInfoPB_default_instance_;
    new (ptr) ::impala::RPCErrorInfoPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RPCErrorInfoPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RPCErrorInfoPB_control_5fservice_2eproto}, {
      &scc_info_NetworkAddressPB_common_2eproto.base,}};

static void InitDefaultsscc_info_RemoteShutdownParamsPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_RemoteShutdownParamsPB_default_instance_;
    new (ptr) ::impala::RemoteShutdownParamsPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteShutdownParamsPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteShutdownParamsPB_control_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_RemoteShutdownResultPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_RemoteShutdownResultPB_default_instance_;
    new (ptr) ::impala::RemoteShutdownResultPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RemoteShutdownResultPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RemoteShutdownResultPB_control_5fservice_2eproto}, {
      &scc_info_StatusPB_common_2eproto.base,
      &scc_info_ShutdownStatusPB_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ReportExecStatusRequestPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ReportExecStatusRequestPB_default_instance_;
    new (ptr) ::impala::ReportExecStatusRequestPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ReportExecStatusRequestPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ReportExecStatusRequestPB_control_5fservice_2eproto}, {
      &scc_info_UniqueIdPB_common_2eproto.base,
      &scc_info_FragmentInstanceExecStatusPB_control_5fservice_2eproto.base,
      &scc_info_StatusPB_common_2eproto.base,
      &scc_info_FragmentExecStatusPB_control_5fservice_2eproto.base,
      &scc_info_ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse_default_instance_;
    new (ptr) ::impala::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse_control_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ReportExecStatusResponsePB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ReportExecStatusResponsePB_default_instance_;
    new (ptr) ::impala::ReportExecStatusResponsePB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReportExecStatusResponsePB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReportExecStatusResponsePB_control_5fservice_2eproto}, {
      &scc_info_StatusPB_common_2eproto.base,}};

static void InitDefaultsscc_info_ScanRangeParamsPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ScanRangeParamsPB_default_instance_;
    new (ptr) ::impala::ScanRangeParamsPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScanRangeParamsPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScanRangeParamsPB_control_5fservice_2eproto}, {
      &scc_info_ScanRangePB_planner_2eproto.base,}};

static void InitDefaultsscc_info_ScanRangesPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ScanRangesPB_default_instance_;
    new (ptr) ::impala::ScanRangesPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScanRangesPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ScanRangesPB_control_5fservice_2eproto}, {
      &scc_info_ScanRangeParamsPB_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_ShutdownStatusPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_ShutdownStatusPB_default_instance_;
    new (ptr) ::impala::ShutdownStatusPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShutdownStatusPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShutdownStatusPB_control_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_StatefulStatusPB_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_StatefulStatusPB_default_instance_;
    new (ptr) ::impala::StatefulStatusPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StatefulStatusPB_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StatefulStatusPB_control_5fservice_2eproto}, {
      &scc_info_StatefulStatusPB_ErrorLogEntry_DoNotUse_control_5fservice_2eproto.base,
      &scc_info_AuxErrorInfoPB_control_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_StatefulStatusPB_ErrorLogEntry_DoNotUse_control_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::impala::_StatefulStatusPB_ErrorLogEntry_DoNotUse_default_instance_;
    new (ptr) ::impala::StatefulStatusPB_ErrorLogEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatefulStatusPB_ErrorLogEntry_DoNotUse_control_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatefulStatusPB_ErrorLogEntry_DoNotUse_control_5fservice_2eproto}, {
      &scc_info_ErrorLogEntryPB_control_5fservice_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fservice_2eproto[33];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_control_5fservice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::impala::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::impala::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::impala::ParquetDmlStatsPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ParquetDmlStatsPB, per_column_size_),
  PROTOBUF_FIELD_OFFSET(::impala::KuduDmlStatsPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::KuduDmlStatsPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::KuduDmlStatsPB, num_row_errors_),
  0,
  PROTOBUF_FIELD_OFFSET(::impala::DmlStatsPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlStatsPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::DmlStatsPB, bytes_written_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlStatsPB, parquet_stats_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlStatsPB, kudu_stats_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::DmlFileStatusPb, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlFileStatusPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::DmlFileStatusPb, final_path_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlFileStatusPb, num_rows_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlFileStatusPb, size_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlFileStatusPb, staging_path_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlFileStatusPb, iceberg_data_file_fb_),
  0,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::impala::DmlPartitionStatusPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlPartitionStatusPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::DmlPartitionStatusPB, id_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlPartitionStatusPB, num_modified_rows_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlPartitionStatusPB, stats_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlPartitionStatusPB, partition_base_dir_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlPartitionStatusPB, kudu_latest_observed_ts_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlPartitionStatusPB, created_files_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlPartitionStatusPB, staging_dir_to_clean_up_),
  3,
  4,
  2,
  0,
  5,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::impala::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::impala::DmlExecStatusPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::DmlExecStatusPB, per_partition_status_),
  PROTOBUF_FIELD_OFFSET(::impala::ErrorLogEntryPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::ErrorLogEntryPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ErrorLogEntryPB, count_),
  PROTOBUF_FIELD_OFFSET(::impala::ErrorLogEntryPB, messages_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::impala::StatefulStatusPB_ErrorLogEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::StatefulStatusPB_ErrorLogEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::StatefulStatusPB_ErrorLogEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::impala::StatefulStatusPB_ErrorLogEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::StatefulStatusPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::StatefulStatusPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::StatefulStatusPB, report_seq_no_),
  PROTOBUF_FIELD_OFFSET(::impala::StatefulStatusPB, error_log_),
  PROTOBUF_FIELD_OFFSET(::impala::StatefulStatusPB, aux_error_info_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::impala::ExecSummaryDataPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecSummaryDataPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ExecSummaryDataPB, plan_node_id_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecSummaryDataPB, data_sink_id_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecSummaryDataPB, rows_returned_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecSummaryDataPB, peak_mem_usage_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecSummaryDataPB, local_time_ns_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::impala::RPCErrorInfoPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::RPCErrorInfoPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::RPCErrorInfoPB, dest_node_),
  PROTOBUF_FIELD_OFFSET(::impala::RPCErrorInfoPB, posix_error_code_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::AuxErrorInfoPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::AuxErrorInfoPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::AuxErrorInfoPB, rpc_error_info_),
  0,
  PROTOBUF_FIELD_OFFSET(::impala::FragmentInstanceExecStatusPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::FragmentInstanceExecStatusPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::FragmentInstanceExecStatusPB, report_seq_no_),
  PROTOBUF_FIELD_OFFSET(::impala::FragmentInstanceExecStatusPB, fragment_instance_id_),
  PROTOBUF_FIELD_OFFSET(::impala::FragmentInstanceExecStatusPB, done_),
  PROTOBUF_FIELD_OFFSET(::impala::FragmentInstanceExecStatusPB, current_state_),
  PROTOBUF_FIELD_OFFSET(::impala::FragmentInstanceExecStatusPB, dml_exec_status_),
  PROTOBUF_FIELD_OFFSET(::impala::FragmentInstanceExecStatusPB, stateful_report_),
  PROTOBUF_FIELD_OFFSET(::impala::FragmentInstanceExecStatusPB, exec_summary_data_),
  2,
  0,
  3,
  4,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::impala::FragmentExecStatusPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::FragmentExecStatusPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::FragmentExecStatusPB, fragment_idx_),
  PROTOBUF_FIELD_OFFSET(::impala::FragmentExecStatusPB, min_per_fragment_instance_idx_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, query_id_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, coord_state_idx_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, instance_exec_status_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, thrift_profiles_sidecar_idx_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, overall_status_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, fragment_instance_id_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, peak_mem_consumption_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, cpu_user_ns_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, cpu_sys_ns_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, bytes_read_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, scan_ranges_complete_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, exchange_bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, scan_bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, fragment_exec_status_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, backend_report_seq_no_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, per_join_rows_produced_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusRequestPB, local_disk_faulty_),
  0,
  3,
  ~0u,
  4,
  1,
  2,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  ~0u,
  12,
  ~0u,
  13,
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusResponsePB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ReportExecStatusResponsePB, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::impala::CancelQueryFInstancesRequestPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::CancelQueryFInstancesRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::CancelQueryFInstancesRequestPB, query_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::impala::CancelQueryFInstancesResponsePB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::CancelQueryFInstancesResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::CancelQueryFInstancesResponsePB, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::impala::RemoteShutdownParamsPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::RemoteShutdownParamsPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::RemoteShutdownParamsPB, deadline_s_),
  0,
  PROTOBUF_FIELD_OFFSET(::impala::ShutdownStatusPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::ShutdownStatusPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ShutdownStatusPB, grace_remaining_ms_),
  PROTOBUF_FIELD_OFFSET(::impala::ShutdownStatusPB, deadline_remaining_ms_),
  PROTOBUF_FIELD_OFFSET(::impala::ShutdownStatusPB, finstances_executing_),
  PROTOBUF_FIELD_OFFSET(::impala::ShutdownStatusPB, client_requests_registered_),
  PROTOBUF_FIELD_OFFSET(::impala::ShutdownStatusPB, backend_queries_executing_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::impala::RemoteShutdownResultPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::RemoteShutdownResultPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::RemoteShutdownResultPB, status_),
  PROTOBUF_FIELD_OFFSET(::impala::RemoteShutdownResultPB, shutdown_status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentDestinationPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentDestinationPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentDestinationPB, fragment_instance_id_),
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentDestinationPB, address_),
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentDestinationPB, krpc_backend_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentCtxPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentCtxPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentCtxPB, fragment_idx_),
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentCtxPB, destinations_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangeParamsPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangeParamsPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangeParamsPB, scan_range_),
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangeParamsPB, volume_id_),
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangeParamsPB, try_hdfs_cache_),
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangeParamsPB, is_remote_),
  0,
  3,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangesPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ScanRangesPB, scan_ranges_),
  PROTOBUF_FIELD_OFFSET(::impala::JoinBuildInputPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::JoinBuildInputPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::JoinBuildInputPB, join_node_id_),
  PROTOBUF_FIELD_OFFSET(::impala::JoinBuildInputPB, input_finstance_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentInstanceCtxPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentInstanceCtxPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentInstanceCtxPB, fragment_idx_),
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentInstanceCtxPB, per_node_scan_ranges_),
  PROTOBUF_FIELD_OFFSET(::impala::PlanFragmentInstanceCtxPB, join_build_inputs_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesRequestPB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesRequestPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesRequestPB, coord_state_idx_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesRequestPB, query_ctx_sidecar_idx_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesRequestPB, plan_fragment_info_sidecar_idx_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesRequestPB, min_mem_reservation_bytes_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesRequestPB, initial_mem_reservation_total_claims_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesRequestPB, per_backend_mem_limit_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesRequestPB, fragment_ctxs_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesRequestPB, fragment_instance_ctxs_),
  0,
  1,
  5,
  2,
  3,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesResponsePB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesResponsePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::impala::ExecQueryFInstancesResponsePB, status_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::impala::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse)},
  { 9, -1, sizeof(::impala::ParquetDmlStatsPB)},
  { 15, 21, sizeof(::impala::KuduDmlStatsPB)},
  { 22, 30, sizeof(::impala::DmlStatsPB)},
  { 33, 43, sizeof(::impala::DmlFileStatusPb)},
  { 48, 60, sizeof(::impala::DmlPartitionStatusPB)},
  { 67, 74, sizeof(::impala::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse)},
  { 76, -1, sizeof(::impala::DmlExecStatusPB)},
  { 82, 89, sizeof(::impala::ErrorLogEntryPB)},
  { 91, 98, sizeof(::impala::StatefulStatusPB_ErrorLogEntry_DoNotUse)},
  { 100, 108, sizeof(::impala::StatefulStatusPB)},
  { 111, 121, sizeof(::impala::ExecSummaryDataPB)},
  { 126, 133, sizeof(::impala::RPCErrorInfoPB)},
  { 135, 141, sizeof(::impala::AuxErrorInfoPB)},
  { 142, 154, sizeof(::impala::FragmentInstanceExecStatusPB)},
  { 161, 168, sizeof(::impala::FragmentExecStatusPB)},
  { 170, 177, sizeof(::impala::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse)},
  { 179, 201, sizeof(::impala::ReportExecStatusRequestPB)},
  { 218, 224, sizeof(::impala::ReportExecStatusResponsePB)},
  { 225, 231, sizeof(::impala::CancelQueryFInstancesRequestPB)},
  { 232, 238, sizeof(::impala::CancelQueryFInstancesResponsePB)},
  { 239, 245, sizeof(::impala::RemoteShutdownParamsPB)},
  { 246, 256, sizeof(::impala::ShutdownStatusPB)},
  { 261, 268, sizeof(::impala::RemoteShutdownResultPB)},
  { 270, 278, sizeof(::impala::PlanFragmentDestinationPB)},
  { 281, 288, sizeof(::impala::PlanFragmentCtxPB)},
  { 290, 299, sizeof(::impala::ScanRangeParamsPB)},
  { 303, -1, sizeof(::impala::ScanRangesPB)},
  { 309, 316, sizeof(::impala::JoinBuildInputPB)},
  { 318, 325, sizeof(::impala::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse)},
  { 327, 335, sizeof(::impala::PlanFragmentInstanceCtxPB)},
  { 338, 351, sizeof(::impala::ExecQueryFInstancesRequestPB)},
  { 359, 365, sizeof(::impala::ExecQueryFInstancesResponsePB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ParquetDmlStatsPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_KuduDmlStatsPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_DmlStatsPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_DmlFileStatusPb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_DmlPartitionStatusPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_DmlExecStatusPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ErrorLogEntryPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_StatefulStatusPB_ErrorLogEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_StatefulStatusPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ExecSummaryDataPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_RPCErrorInfoPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_AuxErrorInfoPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_FragmentInstanceExecStatusPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_FragmentExecStatusPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ReportExecStatusRequestPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ReportExecStatusResponsePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_CancelQueryFInstancesRequestPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_CancelQueryFInstancesResponsePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_RemoteShutdownParamsPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ShutdownStatusPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_RemoteShutdownResultPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_PlanFragmentDestinationPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_PlanFragmentCtxPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ScanRangeParamsPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ScanRangesPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_JoinBuildInputPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_PlanFragmentInstanceCtxPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ExecQueryFInstancesRequestPB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::impala::_ExecQueryFInstancesResponsePB_default_instance_),
};

const char descriptor_table_protodef_control_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025control_service.proto\022\006impala\032\014common."
  "proto\032\rplanner.proto\032\031kudu/rpc/rpc_heade"
  "r.proto\"\220\001\n\021ParquetDmlStatsPB\022E\n\017per_col"
  "umn_size\030\001 \003(\0132,.impala.ParquetDmlStatsP"
  "B.PerColumnSizeEntry\0324\n\022PerColumnSizeEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\"(\n\016Ku"
  "duDmlStatsPB\022\026\n\016num_row_errors\030\001 \001(\003\"\201\001\n"
  "\nDmlStatsPB\022\025\n\rbytes_written\030\001 \001(\003\0220\n\rpa"
  "rquet_stats\030\002 \001(\0132\031.impala.ParquetDmlSta"
  "tsPB\022*\n\nkudu_stats\030\003 \001(\0132\026.impala.KuduDm"
  "lStatsPB\"y\n\017DmlFileStatusPb\022\022\n\nfinal_pat"
  "h\030\001 \002(\t\022\020\n\010num_rows\030\002 \002(\003\022\014\n\004size\030\003 \002(\003\022"
  "\024\n\014staging_path\030\004 \001(\t\022\034\n\024iceberg_data_fi"
  "le_fb\030\005 \001(\014\"\356\001\n\024DmlPartitionStatusPB\022\n\n\002"
  "id\030\001 \001(\003\022\031\n\021num_modified_rows\030\002 \001(\003\022!\n\005s"
  "tats\030\003 \001(\0132\022.impala.DmlStatsPB\022\032\n\022partit"
  "ion_base_dir\030\004 \001(\t\022\037\n\027kudu_latest_observ"
  "ed_ts\030\005 \001(\003\022.\n\rcreated_files\030\006 \003(\0132\027.imp"
  "ala.DmlFileStatusPb\022\037\n\027staging_dir_to_cl"
  "ean_up\030\007 \001(\t\"\271\001\n\017DmlExecStatusPB\022M\n\024per_"
  "partition_status\030\001 \003(\0132/.impala.DmlExecS"
  "tatusPB.PerPartitionStatusEntry\032W\n\027PerPa"
  "rtitionStatusEntry\022\013\n\003key\030\001 \001(\t\022+\n\005value"
  "\030\002 \001(\0132\034.impala.DmlPartitionStatusPB:\0028\001"
  "\"2\n\017ErrorLogEntryPB\022\r\n\005count\030\001 \001(\005\022\020\n\010me"
  "ssages\030\002 \003(\t\"\336\001\n\020StatefulStatusPB\022\025\n\rrep"
  "ort_seq_no\030\001 \001(\003\0229\n\terror_log\030\002 \003(\0132&.im"
  "pala.StatefulStatusPB.ErrorLogEntry\022.\n\016a"
  "ux_error_info\030\003 \001(\0132\026.impala.AuxErrorInf"
  "oPB\032H\n\rErrorLogEntry\022\013\n\003key\030\001 \001(\005\022&\n\005val"
  "ue\030\002 \001(\0132\027.impala.ErrorLogEntryPB:\0028\001\"\205\001"
  "\n\021ExecSummaryDataPB\022\024\n\014plan_node_id\030\001 \001("
  "\005\022\024\n\014data_sink_id\030\002 \001(\005\022\025\n\rrows_returned"
  "\030\003 \001(\003\022\026\n\016peak_mem_usage\030\004 \001(\003\022\025\n\rlocal_"
  "time_ns\030\005 \001(\003\"W\n\016RPCErrorInfoPB\022+\n\tdest_"
  "node\030\001 \002(\0132\030.impala.NetworkAddressPB\022\030\n\020"
  "posix_error_code\030\002 \002(\005\"@\n\016AuxErrorInfoPB"
  "\022.\n\016rpc_error_info\030\001 \001(\0132\026.impala.RPCErr"
  "orInfoPB\"\305\002\n\034FragmentInstanceExecStatusP"
  "B\022\025\n\rreport_seq_no\030\001 \001(\003\0220\n\024fragment_ins"
  "tance_id\030\002 \001(\0132\022.impala.UniqueIdPB\022\014\n\004do"
  "ne\030\003 \001(\010\0223\n\rcurrent_state\030\004 \001(\0162\034.impala"
  ".FInstanceExecStatePB\0220\n\017dml_exec_status"
  "\030\005 \001(\0132\027.impala.DmlExecStatusPB\0221\n\017state"
  "ful_report\030\006 \003(\0132\030.impala.StatefulStatus"
  "PB\0224\n\021exec_summary_data\030\007 \003(\0132\031.impala.E"
  "xecSummaryDataPB\"S\n\024FragmentExecStatusPB"
  "\022\024\n\014fragment_idx\030\001 \001(\005\022%\n\035min_per_fragme"
  "nt_instance_idx\030\002 \001(\005\"\343\005\n\031ReportExecStat"
  "usRequestPB\022$\n\010query_id\030\001 \001(\0132\022.impala.U"
  "niqueIdPB\022\027\n\017coord_state_idx\030\002 \001(\005\022B\n\024in"
  "stance_exec_status\030\003 \003(\0132$.impala.Fragme"
  "ntInstanceExecStatusPB\022#\n\033thrift_profile"
  "s_sidecar_idx\030\004 \001(\005\022(\n\016overall_status\030\005 "
  "\001(\0132\020.impala.StatusPB\0220\n\024fragment_instan"
  "ce_id\030\006 \001(\0132\022.impala.UniqueIdPB\022\034\n\024peak_"
  "mem_consumption\030\007 \001(\003\022\023\n\013cpu_user_ns\030\010 \001"
  "(\003\022\022\n\ncpu_sys_ns\030\t \001(\003\022\022\n\nbytes_read\030\n \001"
  "(\003\022\034\n\024scan_ranges_complete\030\013 \001(\003\022\033\n\023exch"
  "ange_bytes_sent\030\014 \001(\003\022\027\n\017scan_bytes_sent"
  "\030\r \001(\003\022:\n\024fragment_exec_status\030\016 \003(\0132\034.i"
  "mpala.FragmentExecStatusPB\022\035\n\025backend_re"
  "port_seq_no\030\017 \001(\003\022Z\n\026per_join_rows_produ"
  "ced\030\020 \003(\0132:.impala.ReportExecStatusReque"
  "stPB.PerJoinRowsProducedEntry\022 \n\021local_d"
  "isk_faulty\030\021 \001(\010:\005false\032:\n\030PerJoinRowsPr"
  "oducedEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\003:"
  "\0028\001\">\n\032ReportExecStatusResponsePB\022 \n\006sta"
  "tus\030\001 \001(\0132\020.impala.StatusPB\"F\n\036CancelQue"
  "ryFInstancesRequestPB\022$\n\010query_id\030\001 \001(\0132"
  "\022.impala.UniqueIdPB\"C\n\037CancelQueryFInsta"
  "ncesResponsePB\022 \n\006status\030\001 \001(\0132\020.impala."
  "StatusPB\",\n\026RemoteShutdownParamsPB\022\022\n\nde"
  "adline_s\030\001 \001(\003\"\262\001\n\020ShutdownStatusPB\022\032\n\022g"
  "race_remaining_ms\030\001 \001(\003\022\035\n\025deadline_rema"
  "ining_ms\030\002 \001(\003\022\034\n\024finstances_executing\030\003"
  " \001(\003\022\"\n\032client_requests_registered\030\004 \001(\003"
  "\022!\n\031backend_queries_executing\030\005 \001(\003\"m\n\026R"
  "emoteShutdownResultPB\022 \n\006status\030\001 \001(\0132\020."
  "impala.StatusPB\0221\n\017shutdown_status\030\002 \001(\013"
  "2\030.impala.ShutdownStatusPB\"\250\001\n\031PlanFragm"
  "entDestinationPB\0220\n\024fragment_instance_id"
  "\030\001 \001(\0132\022.impala.UniqueIdPB\022)\n\007address\030\002 "
  "\001(\0132\030.impala.NetworkAddressPB\022.\n\014krpc_ba"
  "ckend\030\003 \001(\0132\030.impala.NetworkAddressPB\"b\n"
  "\021PlanFragmentCtxPB\022\024\n\014fragment_idx\030\001 \001(\005"
  "\0227\n\014destinations\030\002 \003(\0132!.impala.PlanFrag"
  "mentDestinationPB\"\205\001\n\021ScanRangeParamsPB\022"
  "\'\n\nscan_range\030\001 \001(\0132\023.impala.ScanRangePB"
  "\022\025\n\tvolume_id\030\002 \001(\005:\002-1\022\035\n\016try_hdfs_cach"
  "e\030\003 \001(\010:\005false\022\021\n\tis_remote\030\004 \001(\010\">\n\014Sca"
  "nRangesPB\022.\n\013scan_ranges\030\001 \003(\0132\031.impala."
  "ScanRangeParamsPB\"X\n\020JoinBuildInputPB\022\024\n"
  "\014join_node_id\030\001 \001(\005\022.\n\022input_finstance_i"
  "d\030\002 \001(\0132\022.impala.UniqueIdPB\"\216\002\n\031PlanFrag"
  "mentInstanceCtxPB\022\024\n\014fragment_idx\030\001 \001(\005\022"
  "V\n\024per_node_scan_ranges\030\002 \003(\01328.impala.P"
  "lanFragmentInstanceCtxPB.PerNodeScanRang"
  "esEntry\0223\n\021join_build_inputs\030\003 \003(\0132\030.imp"
  "ala.JoinBuildInputPB\032N\n\026PerNodeScanRange"
  "sEntry\022\013\n\003key\030\001 \001(\005\022#\n\005value\030\002 \001(\0132\024.imp"
  "ala.ScanRangesPB:\0028\001\"\343\002\n\034ExecQueryFInsta"
  "ncesRequestPB\022\027\n\017coord_state_idx\030\001 \001(\005\022\035"
  "\n\025query_ctx_sidecar_idx\030\002 \001(\005\022&\n\036plan_fr"
  "agment_info_sidecar_idx\030\003 \001(\005\022!\n\031min_mem"
  "_reservation_bytes\030\004 \001(\003\022,\n$initial_mem_"
  "reservation_total_claims\030\005 \001(\003\022\035\n\025per_ba"
  "ckend_mem_limit\030\006 \001(\003\0220\n\rfragment_ctxs\030\007"
  " \003(\0132\031.impala.PlanFragmentCtxPB\022A\n\026fragm"
  "ent_instance_ctxs\030\010 \003(\0132!.impala.PlanFra"
  "gmentInstanceCtxPB\"A\n\035ExecQueryFInstance"
  "sResponsePB\022 \n\006status\030\001 \001(\0132\020.impala.Sta"
  "tusPB*\342\001\n\024FInstanceExecStatePB\022\024\n\020WAITIN"
  "G_FOR_EXEC\020\000\022\027\n\023WAITING_FOR_PREPARE\020\001\022\027\n"
  "\023WAITING_FOR_CODEGEN\020\002\022\024\n\020WAITING_FOR_OP"
  "EN\020\003\022\033\n\027WAITING_FOR_FIRST_BATCH\020\004\022\030\n\024FIR"
  "ST_BATCH_PRODUCED\020\005\022\022\n\016PRODUCING_DATA\020\006\022"
  "\023\n\017LAST_BATCH_SENT\020\007\022\014\n\010FINISHED\020\0102\232\003\n\016C"
  "ontrolService\022b\n\023ExecQueryFInstances\022$.i"
  "mpala.ExecQueryFInstancesRequestPB\032%.imp"
  "ala.ExecQueryFInstancesResponsePB\022Y\n\020Rep"
  "ortExecStatus\022!.impala.ReportExecStatusR"
  "equestPB\032\".impala.ReportExecStatusRespon"
  "sePB\022h\n\025CancelQueryFInstances\022&.impala.C"
  "ancelQueryFInstancesRequestPB\032\'.impala.C"
  "ancelQueryFInstancesResponsePB\022P\n\016Remote"
  "Shutdown\022\036.impala.RemoteShutdownParamsPB"
  "\032\036.impala.RemoteShutdownResultPB\032\r\272\265\030\tAu"
  "thorize"
  ;
/*modify by ff
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fservice_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_kudu_2frpc_2frpc_5fheader_2eproto,
  &::descriptor_table_planner_2eproto,
};*/
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fservice_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_common_2eproto,
  &::descriptor_table_planner_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fservice_2eproto_sccs[33] = {
  &scc_info_AuxErrorInfoPB_control_5fservice_2eproto.base,
  &scc_info_CancelQueryFInstancesRequestPB_control_5fservice_2eproto.base,
  &scc_info_CancelQueryFInstancesResponsePB_control_5fservice_2eproto.base,
  &scc_info_DmlExecStatusPB_control_5fservice_2eproto.base,
  &scc_info_DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse_control_5fservice_2eproto.base,
  &scc_info_DmlFileStatusPb_control_5fservice_2eproto.base,
  &scc_info_DmlPartitionStatusPB_control_5fservice_2eproto.base,
  &scc_info_DmlStatsPB_control_5fservice_2eproto.base,
  &scc_info_ErrorLogEntryPB_control_5fservice_2eproto.base,
  &scc_info_ExecQueryFInstancesRequestPB_control_5fservice_2eproto.base,
  &scc_info_ExecQueryFInstancesResponsePB_control_5fservice_2eproto.base,
  &scc_info_ExecSummaryDataPB_control_5fservice_2eproto.base,
  &scc_info_FragmentExecStatusPB_control_5fservice_2eproto.base,
  &scc_info_FragmentInstanceExecStatusPB_control_5fservice_2eproto.base,
  &scc_info_JoinBuildInputPB_control_5fservice_2eproto.base,
  &scc_info_KuduDmlStatsPB_control_5fservice_2eproto.base,
  &scc_info_ParquetDmlStatsPB_control_5fservice_2eproto.base,
  &scc_info_ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse_control_5fservice_2eproto.base,
  &scc_info_PlanFragmentCtxPB_control_5fservice_2eproto.base,
  &scc_info_PlanFragmentDestinationPB_control_5fservice_2eproto.base,
  &scc_info_PlanFragmentInstanceCtxPB_control_5fservice_2eproto.base,
  &scc_info_PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse_control_5fservice_2eproto.base,
  &scc_info_RPCErrorInfoPB_control_5fservice_2eproto.base,
  &scc_info_RemoteShutdownParamsPB_control_5fservice_2eproto.base,
  &scc_info_RemoteShutdownResultPB_control_5fservice_2eproto.base,
  &scc_info_ReportExecStatusRequestPB_control_5fservice_2eproto.base,
  &scc_info_ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse_control_5fservice_2eproto.base,
  &scc_info_ReportExecStatusResponsePB_control_5fservice_2eproto.base,
  &scc_info_ScanRangeParamsPB_control_5fservice_2eproto.base,
  &scc_info_ScanRangesPB_control_5fservice_2eproto.base,
  &scc_info_ShutdownStatusPB_control_5fservice_2eproto.base,
  &scc_info_StatefulStatusPB_control_5fservice_2eproto.base,
  &scc_info_StatefulStatusPB_ErrorLogEntry_DoNotUse_control_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fservice_2eproto = {
  false, false, descriptor_table_protodef_control_5fservice_2eproto, "control_service.proto", 5127,
  &descriptor_table_control_5fservice_2eproto_once, descriptor_table_control_5fservice_2eproto_sccs, descriptor_table_control_5fservice_2eproto_deps, 33, 3,
  schemas, file_default_instances, TableStruct_control_5fservice_2eproto::offsets,
  file_level_metadata_control_5fservice_2eproto, 33, file_level_enum_descriptors_control_5fservice_2eproto, file_level_service_descriptors_control_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fservice_2eproto)), true);
namespace impala {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FInstanceExecStatePB_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_5fservice_2eproto);
  return file_level_enum_descriptors_control_5fservice_2eproto[0];
}
bool FInstanceExecStatePB_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse() {}
ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse::MergeFrom(const ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ParquetDmlStatsPB::_Internal {
 public:
};

ParquetDmlStatsPB::ParquetDmlStatsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  per_column_size_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.ParquetDmlStatsPB)
}
ParquetDmlStatsPB::ParquetDmlStatsPB(const ParquetDmlStatsPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  per_column_size_.MergeFrom(from.per_column_size_);
  // @@protoc_insertion_point(copy_constructor:impala.ParquetDmlStatsPB)
}

void ParquetDmlStatsPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParquetDmlStatsPB_control_5fservice_2eproto.base);
}

ParquetDmlStatsPB::~ParquetDmlStatsPB() {
  // @@protoc_insertion_point(destructor:impala.ParquetDmlStatsPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParquetDmlStatsPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParquetDmlStatsPB::ArenaDtor(void* object) {
  ParquetDmlStatsPB* _this = reinterpret_cast< ParquetDmlStatsPB* >(object);
  (void)_this;
}
void ParquetDmlStatsPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParquetDmlStatsPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParquetDmlStatsPB& ParquetDmlStatsPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParquetDmlStatsPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ParquetDmlStatsPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.ParquetDmlStatsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  per_column_size_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParquetDmlStatsPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, int64> per_column_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&per_column_size_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParquetDmlStatsPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.ParquetDmlStatsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int64> per_column_size = 1;
  if (!this->_internal_per_column_size().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "impala.ParquetDmlStatsPB.PerColumnSizeEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_per_column_size().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_per_column_size().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_per_column_size().begin();
          it != this->_internal_per_column_size().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_per_column_size().begin();
          it != this->_internal_per_column_size().end(); ++it) {
        target = ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.ParquetDmlStatsPB)
  return target;
}

size_t ParquetDmlStatsPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.ParquetDmlStatsPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> per_column_size = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_per_column_size_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_per_column_size().begin();
      it != this->_internal_per_column_size().end(); ++it) {
    total_size += ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParquetDmlStatsPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.ParquetDmlStatsPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ParquetDmlStatsPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParquetDmlStatsPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.ParquetDmlStatsPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.ParquetDmlStatsPB)
    MergeFrom(*source);
  }
}

void ParquetDmlStatsPB::MergeFrom(const ParquetDmlStatsPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.ParquetDmlStatsPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  per_column_size_.MergeFrom(from.per_column_size_);
}

void ParquetDmlStatsPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.ParquetDmlStatsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParquetDmlStatsPB::CopyFrom(const ParquetDmlStatsPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.ParquetDmlStatsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParquetDmlStatsPB::IsInitialized() const {
  return true;
}

void ParquetDmlStatsPB::InternalSwap(ParquetDmlStatsPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  per_column_size_.Swap(&other->per_column_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParquetDmlStatsPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KuduDmlStatsPB::_Internal {
 public:
  using HasBits = decltype(std::declval<KuduDmlStatsPB>()._has_bits_);
  static void set_has_num_row_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KuduDmlStatsPB::KuduDmlStatsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.KuduDmlStatsPB)
}
KuduDmlStatsPB::KuduDmlStatsPB(const KuduDmlStatsPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_row_errors_ = from.num_row_errors_;
  // @@protoc_insertion_point(copy_constructor:impala.KuduDmlStatsPB)
}

void KuduDmlStatsPB::SharedCtor() {
  num_row_errors_ = PROTOBUF_LONGLONG(0);
}

KuduDmlStatsPB::~KuduDmlStatsPB() {
  // @@protoc_insertion_point(destructor:impala.KuduDmlStatsPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KuduDmlStatsPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KuduDmlStatsPB::ArenaDtor(void* object) {
  KuduDmlStatsPB* _this = reinterpret_cast< KuduDmlStatsPB* >(object);
  (void)_this;
}
void KuduDmlStatsPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KuduDmlStatsPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KuduDmlStatsPB& KuduDmlStatsPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KuduDmlStatsPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void KuduDmlStatsPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.KuduDmlStatsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_row_errors_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KuduDmlStatsPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 num_row_errors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_row_errors(&has_bits);
          num_row_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KuduDmlStatsPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.KuduDmlStatsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 num_row_errors = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_num_row_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.KuduDmlStatsPB)
  return target;
}

size_t KuduDmlStatsPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.KuduDmlStatsPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 num_row_errors = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_row_errors());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KuduDmlStatsPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.KuduDmlStatsPB)
  GOOGLE_DCHECK_NE(&from, this);
  const KuduDmlStatsPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KuduDmlStatsPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.KuduDmlStatsPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.KuduDmlStatsPB)
    MergeFrom(*source);
  }
}

void KuduDmlStatsPB::MergeFrom(const KuduDmlStatsPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.KuduDmlStatsPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_num_row_errors()) {
    _internal_set_num_row_errors(from._internal_num_row_errors());
  }
}

void KuduDmlStatsPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.KuduDmlStatsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KuduDmlStatsPB::CopyFrom(const KuduDmlStatsPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.KuduDmlStatsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KuduDmlStatsPB::IsInitialized() const {
  return true;
}

void KuduDmlStatsPB::InternalSwap(KuduDmlStatsPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_row_errors_, other->num_row_errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KuduDmlStatsPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DmlStatsPB::_Internal {
 public:
  using HasBits = decltype(std::declval<DmlStatsPB>()._has_bits_);
  static void set_has_bytes_written(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::impala::ParquetDmlStatsPB& parquet_stats(const DmlStatsPB* msg);
  static void set_has_parquet_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::impala::KuduDmlStatsPB& kudu_stats(const DmlStatsPB* msg);
  static void set_has_kudu_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::impala::ParquetDmlStatsPB&
DmlStatsPB::_Internal::parquet_stats(const DmlStatsPB* msg) {
  return *msg->parquet_stats_;
}
const ::impala::KuduDmlStatsPB&
DmlStatsPB::_Internal::kudu_stats(const DmlStatsPB* msg) {
  return *msg->kudu_stats_;
}
DmlStatsPB::DmlStatsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.DmlStatsPB)
}
DmlStatsPB::DmlStatsPB(const DmlStatsPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parquet_stats()) {
    parquet_stats_ = new ::impala::ParquetDmlStatsPB(*from.parquet_stats_);
  } else {
    parquet_stats_ = nullptr;
  }
  if (from._internal_has_kudu_stats()) {
    kudu_stats_ = new ::impala::KuduDmlStatsPB(*from.kudu_stats_);
  } else {
    kudu_stats_ = nullptr;
  }
  bytes_written_ = from.bytes_written_;
  // @@protoc_insertion_point(copy_constructor:impala.DmlStatsPB)
}

void DmlStatsPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DmlStatsPB_control_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&parquet_stats_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bytes_written_) -
      reinterpret_cast<char*>(&parquet_stats_)) + sizeof(bytes_written_));
}

DmlStatsPB::~DmlStatsPB() {
  // @@protoc_insertion_point(destructor:impala.DmlStatsPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DmlStatsPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete parquet_stats_;
  if (this != internal_default_instance()) delete kudu_stats_;
}

void DmlStatsPB::ArenaDtor(void* object) {
  DmlStatsPB* _this = reinterpret_cast< DmlStatsPB* >(object);
  (void)_this;
}
void DmlStatsPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DmlStatsPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DmlStatsPB& DmlStatsPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DmlStatsPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DmlStatsPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.DmlStatsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(parquet_stats_ != nullptr);
      parquet_stats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(kudu_stats_ != nullptr);
      kudu_stats_->Clear();
    }
  }
  bytes_written_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmlStatsPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 bytes_written = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bytes_written(&has_bits);
          bytes_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.ParquetDmlStatsPB parquet_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parquet_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.KuduDmlStatsPB kudu_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_kudu_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DmlStatsPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.DmlStatsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 bytes_written = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_bytes_written(), target);
  }

  // optional .impala.ParquetDmlStatsPB parquet_stats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parquet_stats(this), target, stream);
  }

  // optional .impala.KuduDmlStatsPB kudu_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::kudu_stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.DmlStatsPB)
  return target;
}

size_t DmlStatsPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.DmlStatsPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .impala.ParquetDmlStatsPB parquet_stats = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parquet_stats_);
    }

    // optional .impala.KuduDmlStatsPB kudu_stats = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kudu_stats_);
    }

    // optional int64 bytes_written = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_bytes_written());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DmlStatsPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.DmlStatsPB)
  GOOGLE_DCHECK_NE(&from, this);
  const DmlStatsPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DmlStatsPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.DmlStatsPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.DmlStatsPB)
    MergeFrom(*source);
  }
}

void DmlStatsPB::MergeFrom(const DmlStatsPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.DmlStatsPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_parquet_stats()->::impala::ParquetDmlStatsPB::MergeFrom(from._internal_parquet_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_kudu_stats()->::impala::KuduDmlStatsPB::MergeFrom(from._internal_kudu_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      bytes_written_ = from.bytes_written_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DmlStatsPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.DmlStatsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DmlStatsPB::CopyFrom(const DmlStatsPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.DmlStatsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmlStatsPB::IsInitialized() const {
  return true;
}

void DmlStatsPB::InternalSwap(DmlStatsPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmlStatsPB, bytes_written_)
      + sizeof(DmlStatsPB::bytes_written_)
      - PROTOBUF_FIELD_OFFSET(DmlStatsPB, parquet_stats_)>(
          reinterpret_cast<char*>(&parquet_stats_),
          reinterpret_cast<char*>(&other->parquet_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmlStatsPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DmlFileStatusPb::_Internal {
 public:
  using HasBits = decltype(std::declval<DmlFileStatusPb>()._has_bits_);
  static void set_has_final_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_staging_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_iceberg_data_file_fb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000019) ^ 0x00000019) != 0;
  }
};

DmlFileStatusPb::DmlFileStatusPb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.DmlFileStatusPb)
}
DmlFileStatusPb::DmlFileStatusPb(const DmlFileStatusPb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  final_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_final_path()) {
    final_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_final_path(), 
      GetArena());
  }
  staging_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_staging_path()) {
    staging_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staging_path(), 
      GetArena());
  }
  iceberg_data_file_fb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_iceberg_data_file_fb()) {
    iceberg_data_file_fb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_iceberg_data_file_fb(), 
      GetArena());
  }
  ::memcpy(&num_rows_, &from.num_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&num_rows_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:impala.DmlFileStatusPb)
}

void DmlFileStatusPb::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DmlFileStatusPb_control_5fservice_2eproto.base);
  final_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staging_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iceberg_data_file_fb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&num_rows_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&num_rows_)) + sizeof(size_));
}

DmlFileStatusPb::~DmlFileStatusPb() {
  // @@protoc_insertion_point(destructor:impala.DmlFileStatusPb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DmlFileStatusPb::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  final_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staging_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iceberg_data_file_fb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DmlFileStatusPb::ArenaDtor(void* object) {
  DmlFileStatusPb* _this = reinterpret_cast< DmlFileStatusPb* >(object);
  (void)_this;
}
void DmlFileStatusPb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DmlFileStatusPb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DmlFileStatusPb& DmlFileStatusPb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DmlFileStatusPb_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DmlFileStatusPb::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.DmlFileStatusPb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      final_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      staging_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      iceberg_data_file_fb_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&num_rows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&num_rows_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmlFileStatusPb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string final_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_final_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.DmlFileStatusPb.final_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 num_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_rows(&has_bits);
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string staging_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_staging_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.DmlFileStatusPb.staging_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes iceberg_data_file_fb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_iceberg_data_file_fb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DmlFileStatusPb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.DmlFileStatusPb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string final_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_final_path().data(), static_cast<int>(this->_internal_final_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.DmlFileStatusPb.final_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_final_path(), target);
  }

  // required int64 num_rows = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_rows(), target);
  }

  // required int64 size = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  // optional string staging_path = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_staging_path().data(), static_cast<int>(this->_internal_staging_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.DmlFileStatusPb.staging_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_staging_path(), target);
  }

  // optional bytes iceberg_data_file_fb = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_iceberg_data_file_fb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.DmlFileStatusPb)
  return target;
}

size_t DmlFileStatusPb::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:impala.DmlFileStatusPb)
  size_t total_size = 0;

  if (_internal_has_final_path()) {
    // required string final_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_final_path());
  }

  if (_internal_has_num_rows()) {
    // required int64 num_rows = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_rows());
  }

  if (_internal_has_size()) {
    // required int64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  return total_size;
}
size_t DmlFileStatusPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.DmlFileStatusPb)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required string final_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_final_path());

    // required int64 num_rows = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_rows());

    // required int64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string staging_path = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_staging_path());
    }

    // optional bytes iceberg_data_file_fb = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_iceberg_data_file_fb());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DmlFileStatusPb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.DmlFileStatusPb)
  GOOGLE_DCHECK_NE(&from, this);
  const DmlFileStatusPb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DmlFileStatusPb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.DmlFileStatusPb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.DmlFileStatusPb)
    MergeFrom(*source);
  }
}

void DmlFileStatusPb::MergeFrom(const DmlFileStatusPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.DmlFileStatusPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_final_path(from._internal_final_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_staging_path(from._internal_staging_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_iceberg_data_file_fb(from._internal_iceberg_data_file_fb());
    }
    if (cached_has_bits & 0x00000008u) {
      num_rows_ = from.num_rows_;
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DmlFileStatusPb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.DmlFileStatusPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DmlFileStatusPb::CopyFrom(const DmlFileStatusPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.DmlFileStatusPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmlFileStatusPb::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DmlFileStatusPb::InternalSwap(DmlFileStatusPb* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  final_path_.Swap(&other->final_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  staging_path_.Swap(&other->staging_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iceberg_data_file_fb_.Swap(&other->iceberg_data_file_fb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmlFileStatusPb, size_)
      + sizeof(DmlFileStatusPb::size_)
      - PROTOBUF_FIELD_OFFSET(DmlFileStatusPb, num_rows_)>(
          reinterpret_cast<char*>(&num_rows_),
          reinterpret_cast<char*>(&other->num_rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmlFileStatusPb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DmlPartitionStatusPB::_Internal {
 public:
  using HasBits = decltype(std::declval<DmlPartitionStatusPB>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_modified_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::impala::DmlStatsPB& stats(const DmlPartitionStatusPB* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_partition_base_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kudu_latest_observed_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_staging_dir_to_clean_up(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::impala::DmlStatsPB&
DmlPartitionStatusPB::_Internal::stats(const DmlPartitionStatusPB* msg) {
  return *msg->stats_;
}
DmlPartitionStatusPB::DmlPartitionStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  created_files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.DmlPartitionStatusPB)
}
DmlPartitionStatusPB::DmlPartitionStatusPB(const DmlPartitionStatusPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      created_files_(from.created_files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partition_base_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_partition_base_dir()) {
    partition_base_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partition_base_dir(), 
      GetArena());
  }
  staging_dir_to_clean_up_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_staging_dir_to_clean_up()) {
    staging_dir_to_clean_up_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_staging_dir_to_clean_up(), 
      GetArena());
  }
  if (from._internal_has_stats()) {
    stats_ = new ::impala::DmlStatsPB(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kudu_latest_observed_ts_) -
    reinterpret_cast<char*>(&id_)) + sizeof(kudu_latest_observed_ts_));
  // @@protoc_insertion_point(copy_constructor:impala.DmlPartitionStatusPB)
}

void DmlPartitionStatusPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DmlPartitionStatusPB_control_5fservice_2eproto.base);
  partition_base_dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staging_dir_to_clean_up_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&stats_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&kudu_latest_observed_ts_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(kudu_latest_observed_ts_));
}

DmlPartitionStatusPB::~DmlPartitionStatusPB() {
  // @@protoc_insertion_point(destructor:impala.DmlPartitionStatusPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DmlPartitionStatusPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  partition_base_dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  staging_dir_to_clean_up_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stats_;
}

void DmlPartitionStatusPB::ArenaDtor(void* object) {
  DmlPartitionStatusPB* _this = reinterpret_cast< DmlPartitionStatusPB* >(object);
  (void)_this;
}
void DmlPartitionStatusPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DmlPartitionStatusPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DmlPartitionStatusPB& DmlPartitionStatusPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DmlPartitionStatusPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DmlPartitionStatusPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.DmlPartitionStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  created_files_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      partition_base_dir_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      staging_dir_to_clean_up_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stats_ != nullptr);
      stats_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kudu_latest_observed_ts_) -
        reinterpret_cast<char*>(&id_)) + sizeof(kudu_latest_observed_ts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmlPartitionStatusPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 num_modified_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_modified_rows(&has_bits);
          num_modified_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.DmlStatsPB stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string partition_base_dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_partition_base_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.DmlPartitionStatusPB.partition_base_dir");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 kudu_latest_observed_ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_kudu_latest_observed_ts(&has_bits);
          kudu_latest_observed_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .impala.DmlFileStatusPb created_files = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_created_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string staging_dir_to_clean_up = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_staging_dir_to_clean_up();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.DmlPartitionStatusPB.staging_dir_to_clean_up");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DmlPartitionStatusPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.DmlPartitionStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional int64 num_modified_rows = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_modified_rows(), target);
  }

  // optional .impala.DmlStatsPB stats = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stats(this), target, stream);
  }

  // optional string partition_base_dir = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_partition_base_dir().data(), static_cast<int>(this->_internal_partition_base_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.DmlPartitionStatusPB.partition_base_dir");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_partition_base_dir(), target);
  }

  // optional int64 kudu_latest_observed_ts = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_kudu_latest_observed_ts(), target);
  }

  // repeated .impala.DmlFileStatusPb created_files = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_created_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_created_files(i), target, stream);
  }

  // optional string staging_dir_to_clean_up = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_staging_dir_to_clean_up().data(), static_cast<int>(this->_internal_staging_dir_to_clean_up().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.DmlPartitionStatusPB.staging_dir_to_clean_up");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_staging_dir_to_clean_up(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.DmlPartitionStatusPB)
  return target;
}

size_t DmlPartitionStatusPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.DmlPartitionStatusPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .impala.DmlFileStatusPb created_files = 6;
  total_size += 1UL * this->_internal_created_files_size();
  for (const auto& msg : this->created_files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string partition_base_dir = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_partition_base_dir());
    }

    // optional string staging_dir_to_clean_up = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_staging_dir_to_clean_up());
    }

    // optional .impala.DmlStatsPB stats = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_id());
    }

    // optional int64 num_modified_rows = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_num_modified_rows());
    }

    // optional int64 kudu_latest_observed_ts = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_kudu_latest_observed_ts());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DmlPartitionStatusPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.DmlPartitionStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  const DmlPartitionStatusPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DmlPartitionStatusPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.DmlPartitionStatusPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.DmlPartitionStatusPB)
    MergeFrom(*source);
  }
}

void DmlPartitionStatusPB::MergeFrom(const DmlPartitionStatusPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.DmlPartitionStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  created_files_.MergeFrom(from.created_files_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_partition_base_dir(from._internal_partition_base_dir());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_staging_dir_to_clean_up(from._internal_staging_dir_to_clean_up());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stats()->::impala::DmlStatsPB::MergeFrom(from._internal_stats());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_modified_rows_ = from.num_modified_rows_;
    }
    if (cached_has_bits & 0x00000020u) {
      kudu_latest_observed_ts_ = from.kudu_latest_observed_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DmlPartitionStatusPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.DmlPartitionStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DmlPartitionStatusPB::CopyFrom(const DmlPartitionStatusPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.DmlPartitionStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmlPartitionStatusPB::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(created_files_)) return false;
  return true;
}

void DmlPartitionStatusPB::InternalSwap(DmlPartitionStatusPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  created_files_.InternalSwap(&other->created_files_);
  partition_base_dir_.Swap(&other->partition_base_dir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  staging_dir_to_clean_up_.Swap(&other->staging_dir_to_clean_up_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmlPartitionStatusPB, kudu_latest_observed_ts_)
      + sizeof(DmlPartitionStatusPB::kudu_latest_observed_ts_)
      - PROTOBUF_FIELD_OFFSET(DmlPartitionStatusPB, stats_)>(
          reinterpret_cast<char*>(&stats_),
          reinterpret_cast<char*>(&other->stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmlPartitionStatusPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse() {}
DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse::MergeFrom(const DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class DmlExecStatusPB::_Internal {
 public:
};

DmlExecStatusPB::DmlExecStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  per_partition_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.DmlExecStatusPB)
}
DmlExecStatusPB::DmlExecStatusPB(const DmlExecStatusPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  per_partition_status_.MergeFrom(from.per_partition_status_);
  // @@protoc_insertion_point(copy_constructor:impala.DmlExecStatusPB)
}

void DmlExecStatusPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DmlExecStatusPB_control_5fservice_2eproto.base);
}

DmlExecStatusPB::~DmlExecStatusPB() {
  // @@protoc_insertion_point(destructor:impala.DmlExecStatusPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DmlExecStatusPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DmlExecStatusPB::ArenaDtor(void* object) {
  DmlExecStatusPB* _this = reinterpret_cast< DmlExecStatusPB* >(object);
  (void)_this;
}
void DmlExecStatusPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DmlExecStatusPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DmlExecStatusPB& DmlExecStatusPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DmlExecStatusPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DmlExecStatusPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.DmlExecStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  per_partition_status_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmlExecStatusPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .impala.DmlPartitionStatusPB> per_partition_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&per_partition_status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DmlExecStatusPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.DmlExecStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .impala.DmlPartitionStatusPB> per_partition_status = 1;
  if (!this->_internal_per_partition_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "impala.DmlExecStatusPB.PerPartitionStatusEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_per_partition_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_per_partition_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >::const_iterator
          it = this->_internal_per_partition_status().begin();
          it != this->_internal_per_partition_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >::const_iterator
          it = this->_internal_per_partition_status().begin();
          it != this->_internal_per_partition_status().end(); ++it) {
        target = DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.DmlExecStatusPB)
  return target;
}

size_t DmlExecStatusPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.DmlExecStatusPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .impala.DmlPartitionStatusPB> per_partition_status = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_per_partition_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::impala::DmlPartitionStatusPB >::const_iterator
      it = this->_internal_per_partition_status().begin();
      it != this->_internal_per_partition_status().end(); ++it) {
    total_size += DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DmlExecStatusPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.DmlExecStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  const DmlExecStatusPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DmlExecStatusPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.DmlExecStatusPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.DmlExecStatusPB)
    MergeFrom(*source);
  }
}

void DmlExecStatusPB::MergeFrom(const DmlExecStatusPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.DmlExecStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  per_partition_status_.MergeFrom(from.per_partition_status_);
}

void DmlExecStatusPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.DmlExecStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DmlExecStatusPB::CopyFrom(const DmlExecStatusPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.DmlExecStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmlExecStatusPB::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(per_partition_status_)) return false;
  return true;
}

void DmlExecStatusPB::InternalSwap(DmlExecStatusPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  per_partition_status_.Swap(&other->per_partition_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DmlExecStatusPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ErrorLogEntryPB::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorLogEntryPB>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ErrorLogEntryPB::ErrorLogEntryPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.ErrorLogEntryPB)
}
ErrorLogEntryPB::ErrorLogEntryPB(const ErrorLogEntryPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:impala.ErrorLogEntryPB)
}

void ErrorLogEntryPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorLogEntryPB_control_5fservice_2eproto.base);
  count_ = 0;
}

ErrorLogEntryPB::~ErrorLogEntryPB() {
  // @@protoc_insertion_point(destructor:impala.ErrorLogEntryPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorLogEntryPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ErrorLogEntryPB::ArenaDtor(void* object) {
  ErrorLogEntryPB* _this = reinterpret_cast< ErrorLogEntryPB* >(object);
  (void)_this;
}
void ErrorLogEntryPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorLogEntryPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorLogEntryPB& ErrorLogEntryPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorLogEntryPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ErrorLogEntryPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.ErrorLogEntryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorLogEntryPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "impala.ErrorLogEntryPB.messages");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorLogEntryPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.ErrorLogEntryPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // repeated string messages = 2;
  for (int i = 0, n = this->_internal_messages_size(); i < n; i++) {
    const auto& s = this->_internal_messages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "impala.ErrorLogEntryPB.messages");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.ErrorLogEntryPB)
  return target;
}

size_t ErrorLogEntryPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.ErrorLogEntryPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string messages = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(messages_.size());
  for (int i = 0, n = messages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      messages_.Get(i));
  }

  // optional int32 count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorLogEntryPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.ErrorLogEntryPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorLogEntryPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorLogEntryPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.ErrorLogEntryPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.ErrorLogEntryPB)
    MergeFrom(*source);
  }
}

void ErrorLogEntryPB::MergeFrom(const ErrorLogEntryPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.ErrorLogEntryPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from._internal_has_count()) {
    _internal_set_count(from._internal_count());
  }
}

void ErrorLogEntryPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.ErrorLogEntryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorLogEntryPB::CopyFrom(const ErrorLogEntryPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.ErrorLogEntryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorLogEntryPB::IsInitialized() const {
  return true;
}

void ErrorLogEntryPB::InternalSwap(ErrorLogEntryPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messages_.InternalSwap(&other->messages_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorLogEntryPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

StatefulStatusPB_ErrorLogEntry_DoNotUse::StatefulStatusPB_ErrorLogEntry_DoNotUse() {}
StatefulStatusPB_ErrorLogEntry_DoNotUse::StatefulStatusPB_ErrorLogEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StatefulStatusPB_ErrorLogEntry_DoNotUse::MergeFrom(const StatefulStatusPB_ErrorLogEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StatefulStatusPB_ErrorLogEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void StatefulStatusPB_ErrorLogEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class StatefulStatusPB::_Internal {
 public:
  using HasBits = decltype(std::declval<StatefulStatusPB>()._has_bits_);
  static void set_has_report_seq_no(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::impala::AuxErrorInfoPB& aux_error_info(const StatefulStatusPB* msg);
  static void set_has_aux_error_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::impala::AuxErrorInfoPB&
StatefulStatusPB::_Internal::aux_error_info(const StatefulStatusPB* msg) {
  return *msg->aux_error_info_;
}
StatefulStatusPB::StatefulStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  error_log_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.StatefulStatusPB)
}
StatefulStatusPB::StatefulStatusPB(const StatefulStatusPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_log_.MergeFrom(from.error_log_);
  if (from._internal_has_aux_error_info()) {
    aux_error_info_ = new ::impala::AuxErrorInfoPB(*from.aux_error_info_);
  } else {
    aux_error_info_ = nullptr;
  }
  report_seq_no_ = from.report_seq_no_;
  // @@protoc_insertion_point(copy_constructor:impala.StatefulStatusPB)
}

void StatefulStatusPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatefulStatusPB_control_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&aux_error_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&report_seq_no_) -
      reinterpret_cast<char*>(&aux_error_info_)) + sizeof(report_seq_no_));
}

StatefulStatusPB::~StatefulStatusPB() {
  // @@protoc_insertion_point(destructor:impala.StatefulStatusPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StatefulStatusPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete aux_error_info_;
}

void StatefulStatusPB::ArenaDtor(void* object) {
  StatefulStatusPB* _this = reinterpret_cast< StatefulStatusPB* >(object);
  (void)_this;
}
void StatefulStatusPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatefulStatusPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatefulStatusPB& StatefulStatusPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatefulStatusPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void StatefulStatusPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.StatefulStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_log_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(aux_error_info_ != nullptr);
    aux_error_info_->Clear();
  }
  report_seq_no_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatefulStatusPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 report_seq_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_report_seq_no(&has_bits);
          report_seq_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .impala.ErrorLogEntryPB> error_log = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&error_log_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .impala.AuxErrorInfoPB aux_error_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_aux_error_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatefulStatusPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.StatefulStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 report_seq_no = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_report_seq_no(), target);
  }

  // map<int32, .impala.ErrorLogEntryPB> error_log = 2;
  if (!this->_internal_error_log().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_error_log().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_error_log().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >::const_iterator
          it = this->_internal_error_log().begin();
          it != this->_internal_error_log().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StatefulStatusPB_ErrorLogEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >::const_iterator
          it = this->_internal_error_log().begin();
          it != this->_internal_error_log().end(); ++it) {
        target = StatefulStatusPB_ErrorLogEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // optional .impala.AuxErrorInfoPB aux_error_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::aux_error_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.StatefulStatusPB)
  return target;
}

size_t StatefulStatusPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.StatefulStatusPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .impala.ErrorLogEntryPB> error_log = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_error_log_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ErrorLogEntryPB >::const_iterator
      it = this->_internal_error_log().begin();
      it != this->_internal_error_log().end(); ++it) {
    total_size += StatefulStatusPB_ErrorLogEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .impala.AuxErrorInfoPB aux_error_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aux_error_info_);
    }

    // optional int64 report_seq_no = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_report_seq_no());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatefulStatusPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.StatefulStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  const StatefulStatusPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatefulStatusPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.StatefulStatusPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.StatefulStatusPB)
    MergeFrom(*source);
  }
}

void StatefulStatusPB::MergeFrom(const StatefulStatusPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.StatefulStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  error_log_.MergeFrom(from.error_log_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_aux_error_info()->::impala::AuxErrorInfoPB::MergeFrom(from._internal_aux_error_info());
    }
    if (cached_has_bits & 0x00000002u) {
      report_seq_no_ = from.report_seq_no_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatefulStatusPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.StatefulStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatefulStatusPB::CopyFrom(const StatefulStatusPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.StatefulStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatefulStatusPB::IsInitialized() const {
  if (_internal_has_aux_error_info()) {
    if (!aux_error_info_->IsInitialized()) return false;
  }
  return true;
}

void StatefulStatusPB::InternalSwap(StatefulStatusPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_log_.Swap(&other->error_log_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatefulStatusPB, report_seq_no_)
      + sizeof(StatefulStatusPB::report_seq_no_)
      - PROTOBUF_FIELD_OFFSET(StatefulStatusPB, aux_error_info_)>(
          reinterpret_cast<char*>(&aux_error_info_),
          reinterpret_cast<char*>(&other->aux_error_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatefulStatusPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecSummaryDataPB::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecSummaryDataPB>()._has_bits_);
  static void set_has_plan_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data_sink_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rows_returned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_peak_mem_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_local_time_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ExecSummaryDataPB::ExecSummaryDataPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.ExecSummaryDataPB)
}
ExecSummaryDataPB::ExecSummaryDataPB(const ExecSummaryDataPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&plan_node_id_, &from.plan_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_time_ns_) -
    reinterpret_cast<char*>(&plan_node_id_)) + sizeof(local_time_ns_));
  // @@protoc_insertion_point(copy_constructor:impala.ExecSummaryDataPB)
}

void ExecSummaryDataPB::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&plan_node_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&local_time_ns_) -
      reinterpret_cast<char*>(&plan_node_id_)) + sizeof(local_time_ns_));
}

ExecSummaryDataPB::~ExecSummaryDataPB() {
  // @@protoc_insertion_point(destructor:impala.ExecSummaryDataPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecSummaryDataPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExecSummaryDataPB::ArenaDtor(void* object) {
  ExecSummaryDataPB* _this = reinterpret_cast< ExecSummaryDataPB* >(object);
  (void)_this;
}
void ExecSummaryDataPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecSummaryDataPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecSummaryDataPB& ExecSummaryDataPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecSummaryDataPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ExecSummaryDataPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.ExecSummaryDataPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&plan_node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_time_ns_) -
        reinterpret_cast<char*>(&plan_node_id_)) + sizeof(local_time_ns_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecSummaryDataPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 plan_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_plan_node_id(&has_bits);
          plan_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 data_sink_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_data_sink_id(&has_bits);
          data_sink_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rows_returned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rows_returned(&has_bits);
          rows_returned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 peak_mem_usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_peak_mem_usage(&has_bits);
          peak_mem_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 local_time_ns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_local_time_ns(&has_bits);
          local_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecSummaryDataPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.ExecSummaryDataPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 plan_node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_plan_node_id(), target);
  }

  // optional int32 data_sink_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_data_sink_id(), target);
  }

  // optional int64 rows_returned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_rows_returned(), target);
  }

  // optional int64 peak_mem_usage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_peak_mem_usage(), target);
  }

  // optional int64 local_time_ns = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_local_time_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.ExecSummaryDataPB)
  return target;
}

size_t ExecSummaryDataPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.ExecSummaryDataPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 plan_node_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_plan_node_id());
    }

    // optional int32 data_sink_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_data_sink_id());
    }

    // optional int64 rows_returned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_rows_returned());
    }

    // optional int64 peak_mem_usage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_peak_mem_usage());
    }

    // optional int64 local_time_ns = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_local_time_ns());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecSummaryDataPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.ExecSummaryDataPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecSummaryDataPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecSummaryDataPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.ExecSummaryDataPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.ExecSummaryDataPB)
    MergeFrom(*source);
  }
}

void ExecSummaryDataPB::MergeFrom(const ExecSummaryDataPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.ExecSummaryDataPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      plan_node_id_ = from.plan_node_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_sink_id_ = from.data_sink_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      rows_returned_ = from.rows_returned_;
    }
    if (cached_has_bits & 0x00000008u) {
      peak_mem_usage_ = from.peak_mem_usage_;
    }
    if (cached_has_bits & 0x00000010u) {
      local_time_ns_ = from.local_time_ns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExecSummaryDataPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.ExecSummaryDataPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecSummaryDataPB::CopyFrom(const ExecSummaryDataPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.ExecSummaryDataPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecSummaryDataPB::IsInitialized() const {
  return true;
}

void ExecSummaryDataPB::InternalSwap(ExecSummaryDataPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecSummaryDataPB, local_time_ns_)
      + sizeof(ExecSummaryDataPB::local_time_ns_)
      - PROTOBUF_FIELD_OFFSET(ExecSummaryDataPB, plan_node_id_)>(
          reinterpret_cast<char*>(&plan_node_id_),
          reinterpret_cast<char*>(&other->plan_node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecSummaryDataPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RPCErrorInfoPB::_Internal {
 public:
  using HasBits = decltype(std::declval<RPCErrorInfoPB>()._has_bits_);
  static const ::impala::NetworkAddressPB& dest_node(const RPCErrorInfoPB* msg);
  static void set_has_dest_node(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_posix_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::impala::NetworkAddressPB&
RPCErrorInfoPB::_Internal::dest_node(const RPCErrorInfoPB* msg) {
  return *msg->dest_node_;
}
void RPCErrorInfoPB::clear_dest_node() {
  if (dest_node_ != nullptr) dest_node_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RPCErrorInfoPB::RPCErrorInfoPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.RPCErrorInfoPB)
}
RPCErrorInfoPB::RPCErrorInfoPB(const RPCErrorInfoPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dest_node()) {
    dest_node_ = new ::impala::NetworkAddressPB(*from.dest_node_);
  } else {
    dest_node_ = nullptr;
  }
  posix_error_code_ = from.posix_error_code_;
  // @@protoc_insertion_point(copy_constructor:impala.RPCErrorInfoPB)
}

void RPCErrorInfoPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RPCErrorInfoPB_control_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dest_node_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&posix_error_code_) -
      reinterpret_cast<char*>(&dest_node_)) + sizeof(posix_error_code_));
}

RPCErrorInfoPB::~RPCErrorInfoPB() {
  // @@protoc_insertion_point(destructor:impala.RPCErrorInfoPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RPCErrorInfoPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dest_node_;
}

void RPCErrorInfoPB::ArenaDtor(void* object) {
  RPCErrorInfoPB* _this = reinterpret_cast< RPCErrorInfoPB* >(object);
  (void)_this;
}
void RPCErrorInfoPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RPCErrorInfoPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RPCErrorInfoPB& RPCErrorInfoPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RPCErrorInfoPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RPCErrorInfoPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.RPCErrorInfoPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dest_node_ != nullptr);
    dest_node_->Clear();
  }
  posix_error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCErrorInfoPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .impala.NetworkAddressPB dest_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 posix_error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_posix_error_code(&has_bits);
          posix_error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RPCErrorInfoPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.RPCErrorInfoPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .impala.NetworkAddressPB dest_node = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dest_node(this), target, stream);
  }

  // required int32 posix_error_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_posix_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.RPCErrorInfoPB)
  return target;
}

size_t RPCErrorInfoPB::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:impala.RPCErrorInfoPB)
  size_t total_size = 0;

  if (_internal_has_dest_node()) {
    // required .impala.NetworkAddressPB dest_node = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_node_);
  }

  if (_internal_has_posix_error_code()) {
    // required int32 posix_error_code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_posix_error_code());
  }

  return total_size;
}
size_t RPCErrorInfoPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.RPCErrorInfoPB)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .impala.NetworkAddressPB dest_node = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_node_);

    // required int32 posix_error_code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_posix_error_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RPCErrorInfoPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.RPCErrorInfoPB)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCErrorInfoPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RPCErrorInfoPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.RPCErrorInfoPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.RPCErrorInfoPB)
    MergeFrom(*source);
  }
}

void RPCErrorInfoPB::MergeFrom(const RPCErrorInfoPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.RPCErrorInfoPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dest_node()->::impala::NetworkAddressPB::MergeFrom(from._internal_dest_node());
    }
    if (cached_has_bits & 0x00000002u) {
      posix_error_code_ = from.posix_error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RPCErrorInfoPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.RPCErrorInfoPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCErrorInfoPB::CopyFrom(const RPCErrorInfoPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.RPCErrorInfoPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCErrorInfoPB::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_dest_node()) {
    if (!dest_node_->IsInitialized()) return false;
  }
  return true;
}

void RPCErrorInfoPB::InternalSwap(RPCErrorInfoPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPCErrorInfoPB, posix_error_code_)
      + sizeof(RPCErrorInfoPB::posix_error_code_)
      - PROTOBUF_FIELD_OFFSET(RPCErrorInfoPB, dest_node_)>(
          reinterpret_cast<char*>(&dest_node_),
          reinterpret_cast<char*>(&other->dest_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCErrorInfoPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AuxErrorInfoPB::_Internal {
 public:
  using HasBits = decltype(std::declval<AuxErrorInfoPB>()._has_bits_);
  static const ::impala::RPCErrorInfoPB& rpc_error_info(const AuxErrorInfoPB* msg);
  static void set_has_rpc_error_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::impala::RPCErrorInfoPB&
AuxErrorInfoPB::_Internal::rpc_error_info(const AuxErrorInfoPB* msg) {
  return *msg->rpc_error_info_;
}
AuxErrorInfoPB::AuxErrorInfoPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.AuxErrorInfoPB)
}
AuxErrorInfoPB::AuxErrorInfoPB(const AuxErrorInfoPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rpc_error_info()) {
    rpc_error_info_ = new ::impala::RPCErrorInfoPB(*from.rpc_error_info_);
  } else {
    rpc_error_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:impala.AuxErrorInfoPB)
}

void AuxErrorInfoPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuxErrorInfoPB_control_5fservice_2eproto.base);
  rpc_error_info_ = nullptr;
}

AuxErrorInfoPB::~AuxErrorInfoPB() {
  // @@protoc_insertion_point(destructor:impala.AuxErrorInfoPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuxErrorInfoPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rpc_error_info_;
}

void AuxErrorInfoPB::ArenaDtor(void* object) {
  AuxErrorInfoPB* _this = reinterpret_cast< AuxErrorInfoPB* >(object);
  (void)_this;
}
void AuxErrorInfoPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuxErrorInfoPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuxErrorInfoPB& AuxErrorInfoPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuxErrorInfoPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AuxErrorInfoPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.AuxErrorInfoPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rpc_error_info_ != nullptr);
    rpc_error_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuxErrorInfoPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.RPCErrorInfoPB rpc_error_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpc_error_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuxErrorInfoPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.AuxErrorInfoPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.RPCErrorInfoPB rpc_error_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rpc_error_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.AuxErrorInfoPB)
  return target;
}

size_t AuxErrorInfoPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.AuxErrorInfoPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .impala.RPCErrorInfoPB rpc_error_info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rpc_error_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuxErrorInfoPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.AuxErrorInfoPB)
  GOOGLE_DCHECK_NE(&from, this);
  const AuxErrorInfoPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuxErrorInfoPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.AuxErrorInfoPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.AuxErrorInfoPB)
    MergeFrom(*source);
  }
}

void AuxErrorInfoPB::MergeFrom(const AuxErrorInfoPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.AuxErrorInfoPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rpc_error_info()) {
    _internal_mutable_rpc_error_info()->::impala::RPCErrorInfoPB::MergeFrom(from._internal_rpc_error_info());
  }
}

void AuxErrorInfoPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.AuxErrorInfoPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuxErrorInfoPB::CopyFrom(const AuxErrorInfoPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.AuxErrorInfoPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuxErrorInfoPB::IsInitialized() const {
  if (_internal_has_rpc_error_info()) {
    if (!rpc_error_info_->IsInitialized()) return false;
  }
  return true;
}

void AuxErrorInfoPB::InternalSwap(AuxErrorInfoPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rpc_error_info_, other->rpc_error_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuxErrorInfoPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FragmentInstanceExecStatusPB::_Internal {
 public:
  using HasBits = decltype(std::declval<FragmentInstanceExecStatusPB>()._has_bits_);
  static void set_has_report_seq_no(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::impala::UniqueIdPB& fragment_instance_id(const FragmentInstanceExecStatusPB* msg);
  static void set_has_fragment_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_done(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_current_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::impala::DmlExecStatusPB& dml_exec_status(const FragmentInstanceExecStatusPB* msg);
  static void set_has_dml_exec_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::impala::UniqueIdPB&
FragmentInstanceExecStatusPB::_Internal::fragment_instance_id(const FragmentInstanceExecStatusPB* msg) {
  return *msg->fragment_instance_id_;
}
const ::impala::DmlExecStatusPB&
FragmentInstanceExecStatusPB::_Internal::dml_exec_status(const FragmentInstanceExecStatusPB* msg) {
  return *msg->dml_exec_status_;
}
void FragmentInstanceExecStatusPB::clear_fragment_instance_id() {
  if (fragment_instance_id_ != nullptr) fragment_instance_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FragmentInstanceExecStatusPB::FragmentInstanceExecStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stateful_report_(arena),
  exec_summary_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.FragmentInstanceExecStatusPB)
}
FragmentInstanceExecStatusPB::FragmentInstanceExecStatusPB(const FragmentInstanceExecStatusPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stateful_report_(from.stateful_report_),
      exec_summary_data_(from.exec_summary_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fragment_instance_id()) {
    fragment_instance_id_ = new ::impala::UniqueIdPB(*from.fragment_instance_id_);
  } else {
    fragment_instance_id_ = nullptr;
  }
  if (from._internal_has_dml_exec_status()) {
    dml_exec_status_ = new ::impala::DmlExecStatusPB(*from.dml_exec_status_);
  } else {
    dml_exec_status_ = nullptr;
  }
  ::memcpy(&report_seq_no_, &from.report_seq_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_state_) -
    reinterpret_cast<char*>(&report_seq_no_)) + sizeof(current_state_));
  // @@protoc_insertion_point(copy_constructor:impala.FragmentInstanceExecStatusPB)
}

void FragmentInstanceExecStatusPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FragmentInstanceExecStatusPB_control_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fragment_instance_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&current_state_) -
      reinterpret_cast<char*>(&fragment_instance_id_)) + sizeof(current_state_));
}

FragmentInstanceExecStatusPB::~FragmentInstanceExecStatusPB() {
  // @@protoc_insertion_point(destructor:impala.FragmentInstanceExecStatusPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FragmentInstanceExecStatusPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fragment_instance_id_;
  if (this != internal_default_instance()) delete dml_exec_status_;
}

void FragmentInstanceExecStatusPB::ArenaDtor(void* object) {
  FragmentInstanceExecStatusPB* _this = reinterpret_cast< FragmentInstanceExecStatusPB* >(object);
  (void)_this;
}
void FragmentInstanceExecStatusPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FragmentInstanceExecStatusPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FragmentInstanceExecStatusPB& FragmentInstanceExecStatusPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FragmentInstanceExecStatusPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FragmentInstanceExecStatusPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.FragmentInstanceExecStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stateful_report_.Clear();
  exec_summary_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fragment_instance_id_ != nullptr);
      fragment_instance_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dml_exec_status_ != nullptr);
      dml_exec_status_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&report_seq_no_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_state_) -
        reinterpret_cast<char*>(&report_seq_no_)) + sizeof(current_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FragmentInstanceExecStatusPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 report_seq_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_report_seq_no(&has_bits);
          report_seq_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.UniqueIdPB fragment_instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fragment_instance_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool done = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_done(&has_bits);
          done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.FInstanceExecStatePB current_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::impala::FInstanceExecStatePB_IsValid(val))) {
            _internal_set_current_state(static_cast<::impala::FInstanceExecStatePB>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .impala.DmlExecStatusPB dml_exec_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dml_exec_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .impala.StatefulStatusPB stateful_report = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stateful_report(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .impala.ExecSummaryDataPB exec_summary_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exec_summary_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FragmentInstanceExecStatusPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.FragmentInstanceExecStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 report_seq_no = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_report_seq_no(), target);
  }

  // optional .impala.UniqueIdPB fragment_instance_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fragment_instance_id(this), target, stream);
  }

  // optional bool done = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_done(), target);
  }

  // optional .impala.FInstanceExecStatePB current_state = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_current_state(), target);
  }

  // optional .impala.DmlExecStatusPB dml_exec_status = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dml_exec_status(this), target, stream);
  }

  // repeated .impala.StatefulStatusPB stateful_report = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stateful_report_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_stateful_report(i), target, stream);
  }

  // repeated .impala.ExecSummaryDataPB exec_summary_data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exec_summary_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_exec_summary_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.FragmentInstanceExecStatusPB)
  return target;
}

size_t FragmentInstanceExecStatusPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.FragmentInstanceExecStatusPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .impala.StatefulStatusPB stateful_report = 6;
  total_size += 1UL * this->_internal_stateful_report_size();
  for (const auto& msg : this->stateful_report_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .impala.ExecSummaryDataPB exec_summary_data = 7;
  total_size += 1UL * this->_internal_exec_summary_data_size();
  for (const auto& msg : this->exec_summary_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .impala.UniqueIdPB fragment_instance_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fragment_instance_id_);
    }

    // optional .impala.DmlExecStatusPB dml_exec_status = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dml_exec_status_);
    }

    // optional int64 report_seq_no = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_report_seq_no());
    }

    // optional bool done = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .impala.FInstanceExecStatePB current_state = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_current_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FragmentInstanceExecStatusPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.FragmentInstanceExecStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  const FragmentInstanceExecStatusPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FragmentInstanceExecStatusPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.FragmentInstanceExecStatusPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.FragmentInstanceExecStatusPB)
    MergeFrom(*source);
  }
}

void FragmentInstanceExecStatusPB::MergeFrom(const FragmentInstanceExecStatusPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.FragmentInstanceExecStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stateful_report_.MergeFrom(from.stateful_report_);
  exec_summary_data_.MergeFrom(from.exec_summary_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fragment_instance_id()->::impala::UniqueIdPB::MergeFrom(from._internal_fragment_instance_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dml_exec_status()->::impala::DmlExecStatusPB::MergeFrom(from._internal_dml_exec_status());
    }
    if (cached_has_bits & 0x00000004u) {
      report_seq_no_ = from.report_seq_no_;
    }
    if (cached_has_bits & 0x00000008u) {
      done_ = from.done_;
    }
    if (cached_has_bits & 0x00000010u) {
      current_state_ = from.current_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FragmentInstanceExecStatusPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.FragmentInstanceExecStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FragmentInstanceExecStatusPB::CopyFrom(const FragmentInstanceExecStatusPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.FragmentInstanceExecStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FragmentInstanceExecStatusPB::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(stateful_report_)) return false;
  if (_internal_has_fragment_instance_id()) {
    if (!fragment_instance_id_->IsInitialized()) return false;
  }
  if (_internal_has_dml_exec_status()) {
    if (!dml_exec_status_->IsInitialized()) return false;
  }
  return true;
}

void FragmentInstanceExecStatusPB::InternalSwap(FragmentInstanceExecStatusPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stateful_report_.InternalSwap(&other->stateful_report_);
  exec_summary_data_.InternalSwap(&other->exec_summary_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FragmentInstanceExecStatusPB, current_state_)
      + sizeof(FragmentInstanceExecStatusPB::current_state_)
      - PROTOBUF_FIELD_OFFSET(FragmentInstanceExecStatusPB, fragment_instance_id_)>(
          reinterpret_cast<char*>(&fragment_instance_id_),
          reinterpret_cast<char*>(&other->fragment_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FragmentInstanceExecStatusPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FragmentExecStatusPB::_Internal {
 public:
  using HasBits = decltype(std::declval<FragmentExecStatusPB>()._has_bits_);
  static void set_has_fragment_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_per_fragment_instance_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FragmentExecStatusPB::FragmentExecStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.FragmentExecStatusPB)
}
FragmentExecStatusPB::FragmentExecStatusPB(const FragmentExecStatusPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fragment_idx_, &from.fragment_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_per_fragment_instance_idx_) -
    reinterpret_cast<char*>(&fragment_idx_)) + sizeof(min_per_fragment_instance_idx_));
  // @@protoc_insertion_point(copy_constructor:impala.FragmentExecStatusPB)
}

void FragmentExecStatusPB::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fragment_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&min_per_fragment_instance_idx_) -
      reinterpret_cast<char*>(&fragment_idx_)) + sizeof(min_per_fragment_instance_idx_));
}

FragmentExecStatusPB::~FragmentExecStatusPB() {
  // @@protoc_insertion_point(destructor:impala.FragmentExecStatusPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FragmentExecStatusPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FragmentExecStatusPB::ArenaDtor(void* object) {
  FragmentExecStatusPB* _this = reinterpret_cast< FragmentExecStatusPB* >(object);
  (void)_this;
}
void FragmentExecStatusPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FragmentExecStatusPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FragmentExecStatusPB& FragmentExecStatusPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FragmentExecStatusPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FragmentExecStatusPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.FragmentExecStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&fragment_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_per_fragment_instance_idx_) -
        reinterpret_cast<char*>(&fragment_idx_)) + sizeof(min_per_fragment_instance_idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FragmentExecStatusPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 fragment_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fragment_idx(&has_bits);
          fragment_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_per_fragment_instance_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_min_per_fragment_instance_idx(&has_bits);
          min_per_fragment_instance_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FragmentExecStatusPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.FragmentExecStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fragment_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fragment_idx(), target);
  }

  // optional int32 min_per_fragment_instance_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min_per_fragment_instance_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.FragmentExecStatusPB)
  return target;
}

size_t FragmentExecStatusPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.FragmentExecStatusPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 fragment_idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fragment_idx());
    }

    // optional int32 min_per_fragment_instance_idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_per_fragment_instance_idx());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FragmentExecStatusPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.FragmentExecStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  const FragmentExecStatusPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FragmentExecStatusPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.FragmentExecStatusPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.FragmentExecStatusPB)
    MergeFrom(*source);
  }
}

void FragmentExecStatusPB::MergeFrom(const FragmentExecStatusPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.FragmentExecStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fragment_idx_ = from.fragment_idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_per_fragment_instance_idx_ = from.min_per_fragment_instance_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FragmentExecStatusPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.FragmentExecStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FragmentExecStatusPB::CopyFrom(const FragmentExecStatusPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.FragmentExecStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FragmentExecStatusPB::IsInitialized() const {
  return true;
}

void FragmentExecStatusPB::InternalSwap(FragmentExecStatusPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FragmentExecStatusPB, min_per_fragment_instance_idx_)
      + sizeof(FragmentExecStatusPB::min_per_fragment_instance_idx_)
      - PROTOBUF_FIELD_OFFSET(FragmentExecStatusPB, fragment_idx_)>(
          reinterpret_cast<char*>(&fragment_idx_),
          reinterpret_cast<char*>(&other->fragment_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FragmentExecStatusPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse() {}
ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse::MergeFrom(const ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ReportExecStatusRequestPB::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportExecStatusRequestPB>()._has_bits_);
  static const ::impala::UniqueIdPB& query_id(const ReportExecStatusRequestPB* msg);
  static void set_has_query_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coord_state_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_thrift_profiles_sidecar_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::impala::StatusPB& overall_status(const ReportExecStatusRequestPB* msg);
  static void set_has_overall_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::impala::UniqueIdPB& fragment_instance_id(const ReportExecStatusRequestPB* msg);
  static void set_has_fragment_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_peak_mem_consumption(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cpu_user_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cpu_sys_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bytes_read(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_scan_ranges_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_exchange_bytes_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_scan_bytes_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_backend_report_seq_no(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_local_disk_faulty(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::impala::UniqueIdPB&
ReportExecStatusRequestPB::_Internal::query_id(const ReportExecStatusRequestPB* msg) {
  return *msg->query_id_;
}
const ::impala::StatusPB&
ReportExecStatusRequestPB::_Internal::overall_status(const ReportExecStatusRequestPB* msg) {
  return *msg->overall_status_;
}
const ::impala::UniqueIdPB&
ReportExecStatusRequestPB::_Internal::fragment_instance_id(const ReportExecStatusRequestPB* msg) {
  return *msg->fragment_instance_id_;
}
void ReportExecStatusRequestPB::clear_query_id() {
  if (query_id_ != nullptr) query_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ReportExecStatusRequestPB::clear_overall_status() {
  if (overall_status_ != nullptr) overall_status_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ReportExecStatusRequestPB::clear_fragment_instance_id() {
  if (fragment_instance_id_ != nullptr) fragment_instance_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ReportExecStatusRequestPB::ReportExecStatusRequestPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  instance_exec_status_(arena),
  fragment_exec_status_(arena),
  per_join_rows_produced_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.ReportExecStatusRequestPB)
}
ReportExecStatusRequestPB::ReportExecStatusRequestPB(const ReportExecStatusRequestPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      instance_exec_status_(from.instance_exec_status_),
      fragment_exec_status_(from.fragment_exec_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  per_join_rows_produced_.MergeFrom(from.per_join_rows_produced_);
  if (from._internal_has_query_id()) {
    query_id_ = new ::impala::UniqueIdPB(*from.query_id_);
  } else {
    query_id_ = nullptr;
  }
  if (from._internal_has_overall_status()) {
    overall_status_ = new ::impala::StatusPB(*from.overall_status_);
  } else {
    overall_status_ = nullptr;
  }
  if (from._internal_has_fragment_instance_id()) {
    fragment_instance_id_ = new ::impala::UniqueIdPB(*from.fragment_instance_id_);
  } else {
    fragment_instance_id_ = nullptr;
  }
  ::memcpy(&coord_state_idx_, &from.coord_state_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_disk_faulty_) -
    reinterpret_cast<char*>(&coord_state_idx_)) + sizeof(local_disk_faulty_));
  // @@protoc_insertion_point(copy_constructor:impala.ReportExecStatusRequestPB)
}

void ReportExecStatusRequestPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportExecStatusRequestPB_control_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&query_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&local_disk_faulty_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(local_disk_faulty_));
}

ReportExecStatusRequestPB::~ReportExecStatusRequestPB() {
  // @@protoc_insertion_point(destructor:impala.ReportExecStatusRequestPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReportExecStatusRequestPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete query_id_;
  if (this != internal_default_instance()) delete overall_status_;
  if (this != internal_default_instance()) delete fragment_instance_id_;
}

void ReportExecStatusRequestPB::ArenaDtor(void* object) {
  ReportExecStatusRequestPB* _this = reinterpret_cast< ReportExecStatusRequestPB* >(object);
  (void)_this;
}
void ReportExecStatusRequestPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportExecStatusRequestPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportExecStatusRequestPB& ReportExecStatusRequestPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportExecStatusRequestPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ReportExecStatusRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.ReportExecStatusRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_exec_status_.Clear();
  fragment_exec_status_.Clear();
  per_join_rows_produced_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(query_id_ != nullptr);
      query_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(overall_status_ != nullptr);
      overall_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fragment_instance_id_ != nullptr);
      fragment_instance_id_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&coord_state_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cpu_sys_ns_) -
        reinterpret_cast<char*>(&coord_state_idx_)) + sizeof(cpu_sys_ns_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&bytes_read_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&local_disk_faulty_) -
        reinterpret_cast<char*>(&bytes_read_)) + sizeof(local_disk_faulty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportExecStatusRequestPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.UniqueIdPB query_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 coord_state_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_coord_state_idx(&has_bits);
          coord_state_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .impala.FragmentInstanceExecStatusPB instance_exec_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instance_exec_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 thrift_profiles_sidecar_idx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_thrift_profiles_sidecar_idx(&has_bits);
          thrift_profiles_sidecar_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.StatusPB overall_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_overall_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.UniqueIdPB fragment_instance_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fragment_instance_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 peak_mem_consumption = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_peak_mem_consumption(&has_bits);
          peak_mem_consumption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 cpu_user_ns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_cpu_user_ns(&has_bits);
          cpu_user_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 cpu_sys_ns = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_cpu_sys_ns(&has_bits);
          cpu_sys_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 bytes_read = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_bytes_read(&has_bits);
          bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 scan_ranges_complete = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_scan_ranges_complete(&has_bits);
          scan_ranges_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 exchange_bytes_sent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_exchange_bytes_sent(&has_bits);
          exchange_bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 scan_bytes_sent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_scan_bytes_sent(&has_bits);
          scan_bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .impala.FragmentExecStatusPB fragment_exec_status = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fragment_exec_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 backend_report_seq_no = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_backend_report_seq_no(&has_bits);
          backend_report_seq_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, int64> per_join_rows_produced = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&per_join_rows_produced_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool local_disk_faulty = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_local_disk_faulty(&has_bits);
          local_disk_faulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportExecStatusRequestPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.ReportExecStatusRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.UniqueIdPB query_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::query_id(this), target, stream);
  }

  // optional int32 coord_state_idx = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_coord_state_idx(), target);
  }

  // repeated .impala.FragmentInstanceExecStatusPB instance_exec_status = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instance_exec_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_instance_exec_status(i), target, stream);
  }

  // optional int32 thrift_profiles_sidecar_idx = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_thrift_profiles_sidecar_idx(), target);
  }

  // optional .impala.StatusPB overall_status = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::overall_status(this), target, stream);
  }

  // optional .impala.UniqueIdPB fragment_instance_id = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::fragment_instance_id(this), target, stream);
  }

  // optional int64 peak_mem_consumption = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_peak_mem_consumption(), target);
  }

  // optional int64 cpu_user_ns = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_cpu_user_ns(), target);
  }

  // optional int64 cpu_sys_ns = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_cpu_sys_ns(), target);
  }

  // optional int64 bytes_read = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_bytes_read(), target);
  }

  // optional int64 scan_ranges_complete = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_scan_ranges_complete(), target);
  }

  // optional int64 exchange_bytes_sent = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_exchange_bytes_sent(), target);
  }

  // optional int64 scan_bytes_sent = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_scan_bytes_sent(), target);
  }

  // repeated .impala.FragmentExecStatusPB fragment_exec_status = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fragment_exec_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_fragment_exec_status(i), target, stream);
  }

  // optional int64 backend_report_seq_no = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_backend_report_seq_no(), target);
  }

  // map<int32, int64> per_join_rows_produced = 16;
  if (!this->_internal_per_join_rows_produced().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_per_join_rows_produced().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_per_join_rows_produced().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_per_join_rows_produced().begin();
          it != this->_internal_per_join_rows_produced().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse::Funcs::InternalSerialize(16, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_per_join_rows_produced().begin();
          it != this->_internal_per_join_rows_produced().end(); ++it) {
        target = ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse::Funcs::InternalSerialize(16, it->first, it->second, target, stream);
      }
    }
  }

  // optional bool local_disk_faulty = 17 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_local_disk_faulty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.ReportExecStatusRequestPB)
  return target;
}

size_t ReportExecStatusRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.ReportExecStatusRequestPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .impala.FragmentInstanceExecStatusPB instance_exec_status = 3;
  total_size += 1UL * this->_internal_instance_exec_status_size();
  for (const auto& msg : this->instance_exec_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .impala.FragmentExecStatusPB fragment_exec_status = 14;
  total_size += 1UL * this->_internal_fragment_exec_status_size();
  for (const auto& msg : this->fragment_exec_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, int64> per_join_rows_produced = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_per_join_rows_produced_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_per_join_rows_produced().begin();
      it != this->_internal_per_join_rows_produced().end(); ++it) {
    total_size += ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .impala.UniqueIdPB query_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_id_);
    }

    // optional .impala.StatusPB overall_status = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overall_status_);
    }

    // optional .impala.UniqueIdPB fragment_instance_id = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fragment_instance_id_);
    }

    // optional int32 coord_state_idx = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_coord_state_idx());
    }

    // optional int32 thrift_profiles_sidecar_idx = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_thrift_profiles_sidecar_idx());
    }

    // optional int64 peak_mem_consumption = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_peak_mem_consumption());
    }

    // optional int64 cpu_user_ns = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_cpu_user_ns());
    }

    // optional int64 cpu_sys_ns = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_cpu_sys_ns());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional int64 bytes_read = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_bytes_read());
    }

    // optional int64 scan_ranges_complete = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_scan_ranges_complete());
    }

    // optional int64 exchange_bytes_sent = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_exchange_bytes_sent());
    }

    // optional int64 scan_bytes_sent = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_scan_bytes_sent());
    }

    // optional int64 backend_report_seq_no = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_backend_report_seq_no());
    }

    // optional bool local_disk_faulty = 17 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportExecStatusRequestPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.ReportExecStatusRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportExecStatusRequestPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportExecStatusRequestPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.ReportExecStatusRequestPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.ReportExecStatusRequestPB)
    MergeFrom(*source);
  }
}

void ReportExecStatusRequestPB::MergeFrom(const ReportExecStatusRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.ReportExecStatusRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instance_exec_status_.MergeFrom(from.instance_exec_status_);
  fragment_exec_status_.MergeFrom(from.fragment_exec_status_);
  per_join_rows_produced_.MergeFrom(from.per_join_rows_produced_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_query_id()->::impala::UniqueIdPB::MergeFrom(from._internal_query_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_overall_status()->::impala::StatusPB::MergeFrom(from._internal_overall_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_fragment_instance_id()->::impala::UniqueIdPB::MergeFrom(from._internal_fragment_instance_id());
    }
    if (cached_has_bits & 0x00000008u) {
      coord_state_idx_ = from.coord_state_idx_;
    }
    if (cached_has_bits & 0x00000010u) {
      thrift_profiles_sidecar_idx_ = from.thrift_profiles_sidecar_idx_;
    }
    if (cached_has_bits & 0x00000020u) {
      peak_mem_consumption_ = from.peak_mem_consumption_;
    }
    if (cached_has_bits & 0x00000040u) {
      cpu_user_ns_ = from.cpu_user_ns_;
    }
    if (cached_has_bits & 0x00000080u) {
      cpu_sys_ns_ = from.cpu_sys_ns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      bytes_read_ = from.bytes_read_;
    }
    if (cached_has_bits & 0x00000200u) {
      scan_ranges_complete_ = from.scan_ranges_complete_;
    }
    if (cached_has_bits & 0x00000400u) {
      exchange_bytes_sent_ = from.exchange_bytes_sent_;
    }
    if (cached_has_bits & 0x00000800u) {
      scan_bytes_sent_ = from.scan_bytes_sent_;
    }
    if (cached_has_bits & 0x00001000u) {
      backend_report_seq_no_ = from.backend_report_seq_no_;
    }
    if (cached_has_bits & 0x00002000u) {
      local_disk_faulty_ = from.local_disk_faulty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportExecStatusRequestPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.ReportExecStatusRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportExecStatusRequestPB::CopyFrom(const ReportExecStatusRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.ReportExecStatusRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportExecStatusRequestPB::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(instance_exec_status_)) return false;
  if (_internal_has_query_id()) {
    if (!query_id_->IsInitialized()) return false;
  }
  if (_internal_has_fragment_instance_id()) {
    if (!fragment_instance_id_->IsInitialized()) return false;
  }
  return true;
}

void ReportExecStatusRequestPB::InternalSwap(ReportExecStatusRequestPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  instance_exec_status_.InternalSwap(&other->instance_exec_status_);
  fragment_exec_status_.InternalSwap(&other->fragment_exec_status_);
  per_join_rows_produced_.Swap(&other->per_join_rows_produced_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportExecStatusRequestPB, local_disk_faulty_)
      + sizeof(ReportExecStatusRequestPB::local_disk_faulty_)
      - PROTOBUF_FIELD_OFFSET(ReportExecStatusRequestPB, query_id_)>(
          reinterpret_cast<char*>(&query_id_),
          reinterpret_cast<char*>(&other->query_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportExecStatusRequestPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReportExecStatusResponsePB::_Internal {
 public:
  using HasBits = decltype(std::declval<ReportExecStatusResponsePB>()._has_bits_);
  static const ::impala::StatusPB& status(const ReportExecStatusResponsePB* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::impala::StatusPB&
ReportExecStatusResponsePB::_Internal::status(const ReportExecStatusResponsePB* msg) {
  return *msg->status_;
}
void ReportExecStatusResponsePB::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ReportExecStatusResponsePB::ReportExecStatusResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.ReportExecStatusResponsePB)
}
ReportExecStatusResponsePB::ReportExecStatusResponsePB(const ReportExecStatusResponsePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::impala::StatusPB(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:impala.ReportExecStatusResponsePB)
}

void ReportExecStatusResponsePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportExecStatusResponsePB_control_5fservice_2eproto.base);
  status_ = nullptr;
}

ReportExecStatusResponsePB::~ReportExecStatusResponsePB() {
  // @@protoc_insertion_point(destructor:impala.ReportExecStatusResponsePB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReportExecStatusResponsePB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ReportExecStatusResponsePB::ArenaDtor(void* object) {
  ReportExecStatusResponsePB* _this = reinterpret_cast< ReportExecStatusResponsePB* >(object);
  (void)_this;
}
void ReportExecStatusResponsePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportExecStatusResponsePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportExecStatusResponsePB& ReportExecStatusResponsePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportExecStatusResponsePB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ReportExecStatusResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.ReportExecStatusResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportExecStatusResponsePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.StatusPB status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportExecStatusResponsePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.ReportExecStatusResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.StatusPB status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.ReportExecStatusResponsePB)
  return target;
}

size_t ReportExecStatusResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.ReportExecStatusResponsePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .impala.StatusPB status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportExecStatusResponsePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.ReportExecStatusResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportExecStatusResponsePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportExecStatusResponsePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.ReportExecStatusResponsePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.ReportExecStatusResponsePB)
    MergeFrom(*source);
  }
}

void ReportExecStatusResponsePB::MergeFrom(const ReportExecStatusResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.ReportExecStatusResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::impala::StatusPB::MergeFrom(from._internal_status());
  }
}

void ReportExecStatusResponsePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.ReportExecStatusResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportExecStatusResponsePB::CopyFrom(const ReportExecStatusResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.ReportExecStatusResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportExecStatusResponsePB::IsInitialized() const {
  return true;
}

void ReportExecStatusResponsePB::InternalSwap(ReportExecStatusResponsePB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportExecStatusResponsePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelQueryFInstancesRequestPB::_Internal {
 public:
  using HasBits = decltype(std::declval<CancelQueryFInstancesRequestPB>()._has_bits_);
  static const ::impala::UniqueIdPB& query_id(const CancelQueryFInstancesRequestPB* msg);
  static void set_has_query_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::impala::UniqueIdPB&
CancelQueryFInstancesRequestPB::_Internal::query_id(const CancelQueryFInstancesRequestPB* msg) {
  return *msg->query_id_;
}
void CancelQueryFInstancesRequestPB::clear_query_id() {
  if (query_id_ != nullptr) query_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CancelQueryFInstancesRequestPB::CancelQueryFInstancesRequestPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.CancelQueryFInstancesRequestPB)
}
CancelQueryFInstancesRequestPB::CancelQueryFInstancesRequestPB(const CancelQueryFInstancesRequestPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_query_id()) {
    query_id_ = new ::impala::UniqueIdPB(*from.query_id_);
  } else {
    query_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:impala.CancelQueryFInstancesRequestPB)
}

void CancelQueryFInstancesRequestPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelQueryFInstancesRequestPB_control_5fservice_2eproto.base);
  query_id_ = nullptr;
}

CancelQueryFInstancesRequestPB::~CancelQueryFInstancesRequestPB() {
  // @@protoc_insertion_point(destructor:impala.CancelQueryFInstancesRequestPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelQueryFInstancesRequestPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete query_id_;
}

void CancelQueryFInstancesRequestPB::ArenaDtor(void* object) {
  CancelQueryFInstancesRequestPB* _this = reinterpret_cast< CancelQueryFInstancesRequestPB* >(object);
  (void)_this;
}
void CancelQueryFInstancesRequestPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelQueryFInstancesRequestPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelQueryFInstancesRequestPB& CancelQueryFInstancesRequestPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelQueryFInstancesRequestPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CancelQueryFInstancesRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.CancelQueryFInstancesRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(query_id_ != nullptr);
    query_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelQueryFInstancesRequestPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.UniqueIdPB query_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelQueryFInstancesRequestPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.CancelQueryFInstancesRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.UniqueIdPB query_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::query_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.CancelQueryFInstancesRequestPB)
  return target;
}

size_t CancelQueryFInstancesRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.CancelQueryFInstancesRequestPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .impala.UniqueIdPB query_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelQueryFInstancesRequestPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.CancelQueryFInstancesRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelQueryFInstancesRequestPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelQueryFInstancesRequestPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.CancelQueryFInstancesRequestPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.CancelQueryFInstancesRequestPB)
    MergeFrom(*source);
  }
}

void CancelQueryFInstancesRequestPB::MergeFrom(const CancelQueryFInstancesRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.CancelQueryFInstancesRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_query_id()) {
    _internal_mutable_query_id()->::impala::UniqueIdPB::MergeFrom(from._internal_query_id());
  }
}

void CancelQueryFInstancesRequestPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.CancelQueryFInstancesRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelQueryFInstancesRequestPB::CopyFrom(const CancelQueryFInstancesRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.CancelQueryFInstancesRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelQueryFInstancesRequestPB::IsInitialized() const {
  if (_internal_has_query_id()) {
    if (!query_id_->IsInitialized()) return false;
  }
  return true;
}

void CancelQueryFInstancesRequestPB::InternalSwap(CancelQueryFInstancesRequestPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(query_id_, other->query_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelQueryFInstancesRequestPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelQueryFInstancesResponsePB::_Internal {
 public:
  using HasBits = decltype(std::declval<CancelQueryFInstancesResponsePB>()._has_bits_);
  static const ::impala::StatusPB& status(const CancelQueryFInstancesResponsePB* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::impala::StatusPB&
CancelQueryFInstancesResponsePB::_Internal::status(const CancelQueryFInstancesResponsePB* msg) {
  return *msg->status_;
}
void CancelQueryFInstancesResponsePB::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CancelQueryFInstancesResponsePB::CancelQueryFInstancesResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.CancelQueryFInstancesResponsePB)
}
CancelQueryFInstancesResponsePB::CancelQueryFInstancesResponsePB(const CancelQueryFInstancesResponsePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::impala::StatusPB(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:impala.CancelQueryFInstancesResponsePB)
}

void CancelQueryFInstancesResponsePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelQueryFInstancesResponsePB_control_5fservice_2eproto.base);
  status_ = nullptr;
}

CancelQueryFInstancesResponsePB::~CancelQueryFInstancesResponsePB() {
  // @@protoc_insertion_point(destructor:impala.CancelQueryFInstancesResponsePB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelQueryFInstancesResponsePB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void CancelQueryFInstancesResponsePB::ArenaDtor(void* object) {
  CancelQueryFInstancesResponsePB* _this = reinterpret_cast< CancelQueryFInstancesResponsePB* >(object);
  (void)_this;
}
void CancelQueryFInstancesResponsePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelQueryFInstancesResponsePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelQueryFInstancesResponsePB& CancelQueryFInstancesResponsePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelQueryFInstancesResponsePB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CancelQueryFInstancesResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.CancelQueryFInstancesResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelQueryFInstancesResponsePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.StatusPB status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelQueryFInstancesResponsePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.CancelQueryFInstancesResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.StatusPB status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.CancelQueryFInstancesResponsePB)
  return target;
}

size_t CancelQueryFInstancesResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.CancelQueryFInstancesResponsePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .impala.StatusPB status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelQueryFInstancesResponsePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.CancelQueryFInstancesResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelQueryFInstancesResponsePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelQueryFInstancesResponsePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.CancelQueryFInstancesResponsePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.CancelQueryFInstancesResponsePB)
    MergeFrom(*source);
  }
}

void CancelQueryFInstancesResponsePB::MergeFrom(const CancelQueryFInstancesResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.CancelQueryFInstancesResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::impala::StatusPB::MergeFrom(from._internal_status());
  }
}

void CancelQueryFInstancesResponsePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.CancelQueryFInstancesResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelQueryFInstancesResponsePB::CopyFrom(const CancelQueryFInstancesResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.CancelQueryFInstancesResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelQueryFInstancesResponsePB::IsInitialized() const {
  return true;
}

void CancelQueryFInstancesResponsePB::InternalSwap(CancelQueryFInstancesResponsePB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelQueryFInstancesResponsePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemoteShutdownParamsPB::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteShutdownParamsPB>()._has_bits_);
  static void set_has_deadline_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RemoteShutdownParamsPB::RemoteShutdownParamsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.RemoteShutdownParamsPB)
}
RemoteShutdownParamsPB::RemoteShutdownParamsPB(const RemoteShutdownParamsPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deadline_s_ = from.deadline_s_;
  // @@protoc_insertion_point(copy_constructor:impala.RemoteShutdownParamsPB)
}

void RemoteShutdownParamsPB::SharedCtor() {
  deadline_s_ = PROTOBUF_LONGLONG(0);
}

RemoteShutdownParamsPB::~RemoteShutdownParamsPB() {
  // @@protoc_insertion_point(destructor:impala.RemoteShutdownParamsPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteShutdownParamsPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoteShutdownParamsPB::ArenaDtor(void* object) {
  RemoteShutdownParamsPB* _this = reinterpret_cast< RemoteShutdownParamsPB* >(object);
  (void)_this;
}
void RemoteShutdownParamsPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteShutdownParamsPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteShutdownParamsPB& RemoteShutdownParamsPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteShutdownParamsPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RemoteShutdownParamsPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.RemoteShutdownParamsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deadline_s_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteShutdownParamsPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 deadline_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_deadline_s(&has_bits);
          deadline_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteShutdownParamsPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.RemoteShutdownParamsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 deadline_s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_deadline_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.RemoteShutdownParamsPB)
  return target;
}

size_t RemoteShutdownParamsPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.RemoteShutdownParamsPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 deadline_s = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deadline_s());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteShutdownParamsPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.RemoteShutdownParamsPB)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteShutdownParamsPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteShutdownParamsPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.RemoteShutdownParamsPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.RemoteShutdownParamsPB)
    MergeFrom(*source);
  }
}

void RemoteShutdownParamsPB::MergeFrom(const RemoteShutdownParamsPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.RemoteShutdownParamsPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_deadline_s()) {
    _internal_set_deadline_s(from._internal_deadline_s());
  }
}

void RemoteShutdownParamsPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.RemoteShutdownParamsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteShutdownParamsPB::CopyFrom(const RemoteShutdownParamsPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.RemoteShutdownParamsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteShutdownParamsPB::IsInitialized() const {
  return true;
}

void RemoteShutdownParamsPB::InternalSwap(RemoteShutdownParamsPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(deadline_s_, other->deadline_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteShutdownParamsPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShutdownStatusPB::_Internal {
 public:
  using HasBits = decltype(std::declval<ShutdownStatusPB>()._has_bits_);
  static void set_has_grace_remaining_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deadline_remaining_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_finstances_executing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_requests_registered(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_backend_queries_executing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ShutdownStatusPB::ShutdownStatusPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.ShutdownStatusPB)
}
ShutdownStatusPB::ShutdownStatusPB(const ShutdownStatusPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&grace_remaining_ms_, &from.grace_remaining_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&backend_queries_executing_) -
    reinterpret_cast<char*>(&grace_remaining_ms_)) + sizeof(backend_queries_executing_));
  // @@protoc_insertion_point(copy_constructor:impala.ShutdownStatusPB)
}

void ShutdownStatusPB::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&grace_remaining_ms_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&backend_queries_executing_) -
      reinterpret_cast<char*>(&grace_remaining_ms_)) + sizeof(backend_queries_executing_));
}

ShutdownStatusPB::~ShutdownStatusPB() {
  // @@protoc_insertion_point(destructor:impala.ShutdownStatusPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShutdownStatusPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShutdownStatusPB::ArenaDtor(void* object) {
  ShutdownStatusPB* _this = reinterpret_cast< ShutdownStatusPB* >(object);
  (void)_this;
}
void ShutdownStatusPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShutdownStatusPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShutdownStatusPB& ShutdownStatusPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShutdownStatusPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ShutdownStatusPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.ShutdownStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&grace_remaining_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&backend_queries_executing_) -
        reinterpret_cast<char*>(&grace_remaining_ms_)) + sizeof(backend_queries_executing_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutdownStatusPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 grace_remaining_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_grace_remaining_ms(&has_bits);
          grace_remaining_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 deadline_remaining_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deadline_remaining_ms(&has_bits);
          deadline_remaining_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 finstances_executing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_finstances_executing(&has_bits);
          finstances_executing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 client_requests_registered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_client_requests_registered(&has_bits);
          client_requests_registered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 backend_queries_executing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_backend_queries_executing(&has_bits);
          backend_queries_executing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutdownStatusPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.ShutdownStatusPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 grace_remaining_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_grace_remaining_ms(), target);
  }

  // optional int64 deadline_remaining_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_deadline_remaining_ms(), target);
  }

  // optional int64 finstances_executing = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_finstances_executing(), target);
  }

  // optional int64 client_requests_registered = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_client_requests_registered(), target);
  }

  // optional int64 backend_queries_executing = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_backend_queries_executing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.ShutdownStatusPB)
  return target;
}

size_t ShutdownStatusPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.ShutdownStatusPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 grace_remaining_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_grace_remaining_ms());
    }

    // optional int64 deadline_remaining_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_deadline_remaining_ms());
    }

    // optional int64 finstances_executing = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_finstances_executing());
    }

    // optional int64 client_requests_registered = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_client_requests_registered());
    }

    // optional int64 backend_queries_executing = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_backend_queries_executing());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShutdownStatusPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.ShutdownStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownStatusPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShutdownStatusPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.ShutdownStatusPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.ShutdownStatusPB)
    MergeFrom(*source);
  }
}

void ShutdownStatusPB::MergeFrom(const ShutdownStatusPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.ShutdownStatusPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      grace_remaining_ms_ = from.grace_remaining_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      deadline_remaining_ms_ = from.deadline_remaining_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      finstances_executing_ = from.finstances_executing_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_requests_registered_ = from.client_requests_registered_;
    }
    if (cached_has_bits & 0x00000010u) {
      backend_queries_executing_ = from.backend_queries_executing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShutdownStatusPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.ShutdownStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownStatusPB::CopyFrom(const ShutdownStatusPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.ShutdownStatusPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownStatusPB::IsInitialized() const {
  return true;
}

void ShutdownStatusPB::InternalSwap(ShutdownStatusPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShutdownStatusPB, backend_queries_executing_)
      + sizeof(ShutdownStatusPB::backend_queries_executing_)
      - PROTOBUF_FIELD_OFFSET(ShutdownStatusPB, grace_remaining_ms_)>(
          reinterpret_cast<char*>(&grace_remaining_ms_),
          reinterpret_cast<char*>(&other->grace_remaining_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownStatusPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RemoteShutdownResultPB::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteShutdownResultPB>()._has_bits_);
  static const ::impala::StatusPB& status(const RemoteShutdownResultPB* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::impala::ShutdownStatusPB& shutdown_status(const RemoteShutdownResultPB* msg);
  static void set_has_shutdown_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::impala::StatusPB&
RemoteShutdownResultPB::_Internal::status(const RemoteShutdownResultPB* msg) {
  return *msg->status_;
}
const ::impala::ShutdownStatusPB&
RemoteShutdownResultPB::_Internal::shutdown_status(const RemoteShutdownResultPB* msg) {
  return *msg->shutdown_status_;
}
void RemoteShutdownResultPB::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RemoteShutdownResultPB::RemoteShutdownResultPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.RemoteShutdownResultPB)
}
RemoteShutdownResultPB::RemoteShutdownResultPB(const RemoteShutdownResultPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::impala::StatusPB(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_shutdown_status()) {
    shutdown_status_ = new ::impala::ShutdownStatusPB(*from.shutdown_status_);
  } else {
    shutdown_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:impala.RemoteShutdownResultPB)
}

void RemoteShutdownResultPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteShutdownResultPB_control_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&shutdown_status_) -
      reinterpret_cast<char*>(&status_)) + sizeof(shutdown_status_));
}

RemoteShutdownResultPB::~RemoteShutdownResultPB() {
  // @@protoc_insertion_point(destructor:impala.RemoteShutdownResultPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteShutdownResultPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete shutdown_status_;
}

void RemoteShutdownResultPB::ArenaDtor(void* object) {
  RemoteShutdownResultPB* _this = reinterpret_cast< RemoteShutdownResultPB* >(object);
  (void)_this;
}
void RemoteShutdownResultPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteShutdownResultPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteShutdownResultPB& RemoteShutdownResultPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteShutdownResultPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RemoteShutdownResultPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.RemoteShutdownResultPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shutdown_status_ != nullptr);
      shutdown_status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteShutdownResultPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.StatusPB status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.ShutdownStatusPB shutdown_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shutdown_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteShutdownResultPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.RemoteShutdownResultPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.StatusPB status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // optional .impala.ShutdownStatusPB shutdown_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shutdown_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.RemoteShutdownResultPB)
  return target;
}

size_t RemoteShutdownResultPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.RemoteShutdownResultPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .impala.StatusPB status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .impala.ShutdownStatusPB shutdown_status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shutdown_status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteShutdownResultPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.RemoteShutdownResultPB)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteShutdownResultPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteShutdownResultPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.RemoteShutdownResultPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.RemoteShutdownResultPB)
    MergeFrom(*source);
  }
}

void RemoteShutdownResultPB::MergeFrom(const RemoteShutdownResultPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.RemoteShutdownResultPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_status()->::impala::StatusPB::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_shutdown_status()->::impala::ShutdownStatusPB::MergeFrom(from._internal_shutdown_status());
    }
  }
}

void RemoteShutdownResultPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.RemoteShutdownResultPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteShutdownResultPB::CopyFrom(const RemoteShutdownResultPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.RemoteShutdownResultPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteShutdownResultPB::IsInitialized() const {
  return true;
}

void RemoteShutdownResultPB::InternalSwap(RemoteShutdownResultPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteShutdownResultPB, shutdown_status_)
      + sizeof(RemoteShutdownResultPB::shutdown_status_)
      - PROTOBUF_FIELD_OFFSET(RemoteShutdownResultPB, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteShutdownResultPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlanFragmentDestinationPB::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanFragmentDestinationPB>()._has_bits_);
  static const ::impala::UniqueIdPB& fragment_instance_id(const PlanFragmentDestinationPB* msg);
  static void set_has_fragment_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::impala::NetworkAddressPB& address(const PlanFragmentDestinationPB* msg);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::impala::NetworkAddressPB& krpc_backend(const PlanFragmentDestinationPB* msg);
  static void set_has_krpc_backend(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::impala::UniqueIdPB&
PlanFragmentDestinationPB::_Internal::fragment_instance_id(const PlanFragmentDestinationPB* msg) {
  return *msg->fragment_instance_id_;
}
const ::impala::NetworkAddressPB&
PlanFragmentDestinationPB::_Internal::address(const PlanFragmentDestinationPB* msg) {
  return *msg->address_;
}
const ::impala::NetworkAddressPB&
PlanFragmentDestinationPB::_Internal::krpc_backend(const PlanFragmentDestinationPB* msg) {
  return *msg->krpc_backend_;
}
void PlanFragmentDestinationPB::clear_fragment_instance_id() {
  if (fragment_instance_id_ != nullptr) fragment_instance_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PlanFragmentDestinationPB::clear_address() {
  if (address_ != nullptr) address_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void PlanFragmentDestinationPB::clear_krpc_backend() {
  if (krpc_backend_ != nullptr) krpc_backend_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PlanFragmentDestinationPB::PlanFragmentDestinationPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.PlanFragmentDestinationPB)
}
PlanFragmentDestinationPB::PlanFragmentDestinationPB(const PlanFragmentDestinationPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fragment_instance_id()) {
    fragment_instance_id_ = new ::impala::UniqueIdPB(*from.fragment_instance_id_);
  } else {
    fragment_instance_id_ = nullptr;
  }
  if (from._internal_has_address()) {
    address_ = new ::impala::NetworkAddressPB(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_krpc_backend()) {
    krpc_backend_ = new ::impala::NetworkAddressPB(*from.krpc_backend_);
  } else {
    krpc_backend_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:impala.PlanFragmentDestinationPB)
}

void PlanFragmentDestinationPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanFragmentDestinationPB_control_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fragment_instance_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&krpc_backend_) -
      reinterpret_cast<char*>(&fragment_instance_id_)) + sizeof(krpc_backend_));
}

PlanFragmentDestinationPB::~PlanFragmentDestinationPB() {
  // @@protoc_insertion_point(destructor:impala.PlanFragmentDestinationPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlanFragmentDestinationPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fragment_instance_id_;
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete krpc_backend_;
}

void PlanFragmentDestinationPB::ArenaDtor(void* object) {
  PlanFragmentDestinationPB* _this = reinterpret_cast< PlanFragmentDestinationPB* >(object);
  (void)_this;
}
void PlanFragmentDestinationPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanFragmentDestinationPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanFragmentDestinationPB& PlanFragmentDestinationPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanFragmentDestinationPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PlanFragmentDestinationPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.PlanFragmentDestinationPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fragment_instance_id_ != nullptr);
      fragment_instance_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(address_ != nullptr);
      address_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(krpc_backend_ != nullptr);
      krpc_backend_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanFragmentDestinationPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.UniqueIdPB fragment_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fragment_instance_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.NetworkAddressPB address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.NetworkAddressPB krpc_backend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_krpc_backend(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanFragmentDestinationPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.PlanFragmentDestinationPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.UniqueIdPB fragment_instance_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fragment_instance_id(this), target, stream);
  }

  // optional .impala.NetworkAddressPB address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::address(this), target, stream);
  }

  // optional .impala.NetworkAddressPB krpc_backend = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::krpc_backend(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.PlanFragmentDestinationPB)
  return target;
}

size_t PlanFragmentDestinationPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.PlanFragmentDestinationPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .impala.UniqueIdPB fragment_instance_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fragment_instance_id_);
    }

    // optional .impala.NetworkAddressPB address = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *address_);
    }

    // optional .impala.NetworkAddressPB krpc_backend = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *krpc_backend_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanFragmentDestinationPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.PlanFragmentDestinationPB)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanFragmentDestinationPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanFragmentDestinationPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.PlanFragmentDestinationPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.PlanFragmentDestinationPB)
    MergeFrom(*source);
  }
}

void PlanFragmentDestinationPB::MergeFrom(const PlanFragmentDestinationPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.PlanFragmentDestinationPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fragment_instance_id()->::impala::UniqueIdPB::MergeFrom(from._internal_fragment_instance_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_address()->::impala::NetworkAddressPB::MergeFrom(from._internal_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_krpc_backend()->::impala::NetworkAddressPB::MergeFrom(from._internal_krpc_backend());
    }
  }
}

void PlanFragmentDestinationPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.PlanFragmentDestinationPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanFragmentDestinationPB::CopyFrom(const PlanFragmentDestinationPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.PlanFragmentDestinationPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanFragmentDestinationPB::IsInitialized() const {
  if (_internal_has_fragment_instance_id()) {
    if (!fragment_instance_id_->IsInitialized()) return false;
  }
  if (_internal_has_address()) {
    if (!address_->IsInitialized()) return false;
  }
  if (_internal_has_krpc_backend()) {
    if (!krpc_backend_->IsInitialized()) return false;
  }
  return true;
}

void PlanFragmentDestinationPB::InternalSwap(PlanFragmentDestinationPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanFragmentDestinationPB, krpc_backend_)
      + sizeof(PlanFragmentDestinationPB::krpc_backend_)
      - PROTOBUF_FIELD_OFFSET(PlanFragmentDestinationPB, fragment_instance_id_)>(
          reinterpret_cast<char*>(&fragment_instance_id_),
          reinterpret_cast<char*>(&other->fragment_instance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanFragmentDestinationPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlanFragmentCtxPB::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanFragmentCtxPB>()._has_bits_);
  static void set_has_fragment_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PlanFragmentCtxPB::PlanFragmentCtxPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  destinations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.PlanFragmentCtxPB)
}
PlanFragmentCtxPB::PlanFragmentCtxPB(const PlanFragmentCtxPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      destinations_(from.destinations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fragment_idx_ = from.fragment_idx_;
  // @@protoc_insertion_point(copy_constructor:impala.PlanFragmentCtxPB)
}

void PlanFragmentCtxPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanFragmentCtxPB_control_5fservice_2eproto.base);
  fragment_idx_ = 0;
}

PlanFragmentCtxPB::~PlanFragmentCtxPB() {
  // @@protoc_insertion_point(destructor:impala.PlanFragmentCtxPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlanFragmentCtxPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlanFragmentCtxPB::ArenaDtor(void* object) {
  PlanFragmentCtxPB* _this = reinterpret_cast< PlanFragmentCtxPB* >(object);
  (void)_this;
}
void PlanFragmentCtxPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanFragmentCtxPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanFragmentCtxPB& PlanFragmentCtxPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanFragmentCtxPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PlanFragmentCtxPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.PlanFragmentCtxPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destinations_.Clear();
  fragment_idx_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanFragmentCtxPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 fragment_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fragment_idx(&has_bits);
          fragment_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .impala.PlanFragmentDestinationPB destinations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_destinations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanFragmentCtxPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.PlanFragmentCtxPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fragment_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fragment_idx(), target);
  }

  // repeated .impala.PlanFragmentDestinationPB destinations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_destinations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_destinations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.PlanFragmentCtxPB)
  return target;
}

size_t PlanFragmentCtxPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.PlanFragmentCtxPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .impala.PlanFragmentDestinationPB destinations = 2;
  total_size += 1UL * this->_internal_destinations_size();
  for (const auto& msg : this->destinations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 fragment_idx = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fragment_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanFragmentCtxPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.PlanFragmentCtxPB)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanFragmentCtxPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanFragmentCtxPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.PlanFragmentCtxPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.PlanFragmentCtxPB)
    MergeFrom(*source);
  }
}

void PlanFragmentCtxPB::MergeFrom(const PlanFragmentCtxPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.PlanFragmentCtxPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  destinations_.MergeFrom(from.destinations_);
  if (from._internal_has_fragment_idx()) {
    _internal_set_fragment_idx(from._internal_fragment_idx());
  }
}

void PlanFragmentCtxPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.PlanFragmentCtxPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanFragmentCtxPB::CopyFrom(const PlanFragmentCtxPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.PlanFragmentCtxPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanFragmentCtxPB::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(destinations_)) return false;
  return true;
}

void PlanFragmentCtxPB::InternalSwap(PlanFragmentCtxPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  destinations_.InternalSwap(&other->destinations_);
  swap(fragment_idx_, other->fragment_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanFragmentCtxPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScanRangeParamsPB::_Internal {
 public:
  using HasBits = decltype(std::declval<ScanRangeParamsPB>()._has_bits_);
  static const ::impala::ScanRangePB& scan_range(const ScanRangeParamsPB* msg);
  static void set_has_scan_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_volume_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_try_hdfs_cache(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::impala::ScanRangePB&
ScanRangeParamsPB::_Internal::scan_range(const ScanRangeParamsPB* msg) {
  return *msg->scan_range_;
}
void ScanRangeParamsPB::clear_scan_range() {
  if (scan_range_ != nullptr) scan_range_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ScanRangeParamsPB::ScanRangeParamsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.ScanRangeParamsPB)
}
ScanRangeParamsPB::ScanRangeParamsPB(const ScanRangeParamsPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scan_range()) {
    scan_range_ = new ::impala::ScanRangePB(*from.scan_range_);
  } else {
    scan_range_ = nullptr;
  }
  ::memcpy(&try_hdfs_cache_, &from.try_hdfs_cache_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_id_) -
    reinterpret_cast<char*>(&try_hdfs_cache_)) + sizeof(volume_id_));
  // @@protoc_insertion_point(copy_constructor:impala.ScanRangeParamsPB)
}

void ScanRangeParamsPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanRangeParamsPB_control_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&scan_range_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_remote_) -
      reinterpret_cast<char*>(&scan_range_)) + sizeof(is_remote_));
  volume_id_ = -1;
}

ScanRangeParamsPB::~ScanRangeParamsPB() {
  // @@protoc_insertion_point(destructor:impala.ScanRangeParamsPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScanRangeParamsPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scan_range_;
}

void ScanRangeParamsPB::ArenaDtor(void* object) {
  ScanRangeParamsPB* _this = reinterpret_cast< ScanRangeParamsPB* >(object);
  (void)_this;
}
void ScanRangeParamsPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScanRangeParamsPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanRangeParamsPB& ScanRangeParamsPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanRangeParamsPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ScanRangeParamsPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.ScanRangeParamsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scan_range_ != nullptr);
    scan_range_->Clear();
  }
  ::memset(&try_hdfs_cache_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_remote_) -
      reinterpret_cast<char*>(&try_hdfs_cache_)) + sizeof(is_remote_));
  volume_id_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScanRangeParamsPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.ScanRangePB scan_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scan_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 volume_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_volume_id(&has_bits);
          volume_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool try_hdfs_cache = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_try_hdfs_cache(&has_bits);
          try_hdfs_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_remote = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_remote(&has_bits);
          is_remote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanRangeParamsPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.ScanRangeParamsPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.ScanRangePB scan_range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scan_range(this), target, stream);
  }

  // optional int32 volume_id = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_volume_id(), target);
  }

  // optional bool try_hdfs_cache = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_try_hdfs_cache(), target);
  }

  // optional bool is_remote = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_remote(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.ScanRangeParamsPB)
  return target;
}

size_t ScanRangeParamsPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.ScanRangeParamsPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .impala.ScanRangePB scan_range = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scan_range_);
    }

    // optional bool try_hdfs_cache = 3 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_remote = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 volume_id = 2 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_volume_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanRangeParamsPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.ScanRangeParamsPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanRangeParamsPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanRangeParamsPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.ScanRangeParamsPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.ScanRangeParamsPB)
    MergeFrom(*source);
  }
}

void ScanRangeParamsPB::MergeFrom(const ScanRangeParamsPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.ScanRangeParamsPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scan_range()->::impala::ScanRangePB::MergeFrom(from._internal_scan_range());
    }
    if (cached_has_bits & 0x00000002u) {
      try_hdfs_cache_ = from.try_hdfs_cache_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_remote_ = from.is_remote_;
    }
    if (cached_has_bits & 0x00000008u) {
      volume_id_ = from.volume_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScanRangeParamsPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.ScanRangeParamsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRangeParamsPB::CopyFrom(const ScanRangeParamsPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.ScanRangeParamsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRangeParamsPB::IsInitialized() const {
  return true;
}

void ScanRangeParamsPB::InternalSwap(ScanRangeParamsPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScanRangeParamsPB, is_remote_)
      + sizeof(ScanRangeParamsPB::is_remote_)
      - PROTOBUF_FIELD_OFFSET(ScanRangeParamsPB, scan_range_)>(
          reinterpret_cast<char*>(&scan_range_),
          reinterpret_cast<char*>(&other->scan_range_));
  swap(volume_id_, other->volume_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanRangeParamsPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ScanRangesPB::_Internal {
 public:
};

ScanRangesPB::ScanRangesPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scan_ranges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.ScanRangesPB)
}
ScanRangesPB::ScanRangesPB(const ScanRangesPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scan_ranges_(from.scan_ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:impala.ScanRangesPB)
}

void ScanRangesPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanRangesPB_control_5fservice_2eproto.base);
}

ScanRangesPB::~ScanRangesPB() {
  // @@protoc_insertion_point(destructor:impala.ScanRangesPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScanRangesPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ScanRangesPB::ArenaDtor(void* object) {
  ScanRangesPB* _this = reinterpret_cast< ScanRangesPB* >(object);
  (void)_this;
}
void ScanRangesPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScanRangesPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanRangesPB& ScanRangesPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanRangesPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ScanRangesPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.ScanRangesPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scan_ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScanRangesPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .impala.ScanRangeParamsPB scan_ranges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scan_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanRangesPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.ScanRangesPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .impala.ScanRangeParamsPB scan_ranges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scan_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_scan_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.ScanRangesPB)
  return target;
}

size_t ScanRangesPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.ScanRangesPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .impala.ScanRangeParamsPB scan_ranges = 1;
  total_size += 1UL * this->_internal_scan_ranges_size();
  for (const auto& msg : this->scan_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanRangesPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.ScanRangesPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanRangesPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanRangesPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.ScanRangesPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.ScanRangesPB)
    MergeFrom(*source);
  }
}

void ScanRangesPB::MergeFrom(const ScanRangesPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.ScanRangesPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scan_ranges_.MergeFrom(from.scan_ranges_);
}

void ScanRangesPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.ScanRangesPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRangesPB::CopyFrom(const ScanRangesPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.ScanRangesPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRangesPB::IsInitialized() const {
  return true;
}

void ScanRangesPB::InternalSwap(ScanRangesPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scan_ranges_.InternalSwap(&other->scan_ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanRangesPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JoinBuildInputPB::_Internal {
 public:
  using HasBits = decltype(std::declval<JoinBuildInputPB>()._has_bits_);
  static void set_has_join_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::impala::UniqueIdPB& input_finstance_id(const JoinBuildInputPB* msg);
  static void set_has_input_finstance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::impala::UniqueIdPB&
JoinBuildInputPB::_Internal::input_finstance_id(const JoinBuildInputPB* msg) {
  return *msg->input_finstance_id_;
}
void JoinBuildInputPB::clear_input_finstance_id() {
  if (input_finstance_id_ != nullptr) input_finstance_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
JoinBuildInputPB::JoinBuildInputPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.JoinBuildInputPB)
}
JoinBuildInputPB::JoinBuildInputPB(const JoinBuildInputPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input_finstance_id()) {
    input_finstance_id_ = new ::impala::UniqueIdPB(*from.input_finstance_id_);
  } else {
    input_finstance_id_ = nullptr;
  }
  join_node_id_ = from.join_node_id_;
  // @@protoc_insertion_point(copy_constructor:impala.JoinBuildInputPB)
}

void JoinBuildInputPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinBuildInputPB_control_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&input_finstance_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&join_node_id_) -
      reinterpret_cast<char*>(&input_finstance_id_)) + sizeof(join_node_id_));
}

JoinBuildInputPB::~JoinBuildInputPB() {
  // @@protoc_insertion_point(destructor:impala.JoinBuildInputPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinBuildInputPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete input_finstance_id_;
}

void JoinBuildInputPB::ArenaDtor(void* object) {
  JoinBuildInputPB* _this = reinterpret_cast< JoinBuildInputPB* >(object);
  (void)_this;
}
void JoinBuildInputPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinBuildInputPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinBuildInputPB& JoinBuildInputPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinBuildInputPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void JoinBuildInputPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.JoinBuildInputPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(input_finstance_id_ != nullptr);
    input_finstance_id_->Clear();
  }
  join_node_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinBuildInputPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 join_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_join_node_id(&has_bits);
          join_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .impala.UniqueIdPB input_finstance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_finstance_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinBuildInputPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.JoinBuildInputPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 join_node_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_join_node_id(), target);
  }

  // optional .impala.UniqueIdPB input_finstance_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input_finstance_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.JoinBuildInputPB)
  return target;
}

size_t JoinBuildInputPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.JoinBuildInputPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .impala.UniqueIdPB input_finstance_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_finstance_id_);
    }

    // optional int32 join_node_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_join_node_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinBuildInputPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.JoinBuildInputPB)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinBuildInputPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinBuildInputPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.JoinBuildInputPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.JoinBuildInputPB)
    MergeFrom(*source);
  }
}

void JoinBuildInputPB::MergeFrom(const JoinBuildInputPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.JoinBuildInputPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_input_finstance_id()->::impala::UniqueIdPB::MergeFrom(from._internal_input_finstance_id());
    }
    if (cached_has_bits & 0x00000002u) {
      join_node_id_ = from.join_node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JoinBuildInputPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.JoinBuildInputPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinBuildInputPB::CopyFrom(const JoinBuildInputPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.JoinBuildInputPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinBuildInputPB::IsInitialized() const {
  if (_internal_has_input_finstance_id()) {
    if (!input_finstance_id_->IsInitialized()) return false;
  }
  return true;
}

void JoinBuildInputPB::InternalSwap(JoinBuildInputPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinBuildInputPB, join_node_id_)
      + sizeof(JoinBuildInputPB::join_node_id_)
      - PROTOBUF_FIELD_OFFSET(JoinBuildInputPB, input_finstance_id_)>(
          reinterpret_cast<char*>(&input_finstance_id_),
          reinterpret_cast<char*>(&other->input_finstance_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinBuildInputPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse() {}
PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse::MergeFrom(const PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class PlanFragmentInstanceCtxPB::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanFragmentInstanceCtxPB>()._has_bits_);
  static void set_has_fragment_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PlanFragmentInstanceCtxPB::PlanFragmentInstanceCtxPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  per_node_scan_ranges_(arena),
  join_build_inputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.PlanFragmentInstanceCtxPB)
}
PlanFragmentInstanceCtxPB::PlanFragmentInstanceCtxPB(const PlanFragmentInstanceCtxPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      join_build_inputs_(from.join_build_inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  per_node_scan_ranges_.MergeFrom(from.per_node_scan_ranges_);
  fragment_idx_ = from.fragment_idx_;
  // @@protoc_insertion_point(copy_constructor:impala.PlanFragmentInstanceCtxPB)
}

void PlanFragmentInstanceCtxPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanFragmentInstanceCtxPB_control_5fservice_2eproto.base);
  fragment_idx_ = 0;
}

PlanFragmentInstanceCtxPB::~PlanFragmentInstanceCtxPB() {
  // @@protoc_insertion_point(destructor:impala.PlanFragmentInstanceCtxPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlanFragmentInstanceCtxPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlanFragmentInstanceCtxPB::ArenaDtor(void* object) {
  PlanFragmentInstanceCtxPB* _this = reinterpret_cast< PlanFragmentInstanceCtxPB* >(object);
  (void)_this;
}
void PlanFragmentInstanceCtxPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlanFragmentInstanceCtxPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanFragmentInstanceCtxPB& PlanFragmentInstanceCtxPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanFragmentInstanceCtxPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PlanFragmentInstanceCtxPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.PlanFragmentInstanceCtxPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  per_node_scan_ranges_.Clear();
  join_build_inputs_.Clear();
  fragment_idx_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanFragmentInstanceCtxPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 fragment_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fragment_idx(&has_bits);
          fragment_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .impala.ScanRangesPB> per_node_scan_ranges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&per_node_scan_ranges_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .impala.JoinBuildInputPB join_build_inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_join_build_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanFragmentInstanceCtxPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.PlanFragmentInstanceCtxPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fragment_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fragment_idx(), target);
  }

  // map<int32, .impala.ScanRangesPB> per_node_scan_ranges = 2;
  if (!this->_internal_per_node_scan_ranges().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_per_node_scan_ranges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_per_node_scan_ranges().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >::const_iterator
          it = this->_internal_per_node_scan_ranges().begin();
          it != this->_internal_per_node_scan_ranges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >::const_iterator
          it = this->_internal_per_node_scan_ranges().begin();
          it != this->_internal_per_node_scan_ranges().end(); ++it) {
        target = PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .impala.JoinBuildInputPB join_build_inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_join_build_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_join_build_inputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.PlanFragmentInstanceCtxPB)
  return target;
}

size_t PlanFragmentInstanceCtxPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.PlanFragmentInstanceCtxPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .impala.ScanRangesPB> per_node_scan_ranges = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_per_node_scan_ranges_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::impala::ScanRangesPB >::const_iterator
      it = this->_internal_per_node_scan_ranges().begin();
      it != this->_internal_per_node_scan_ranges().end(); ++it) {
    total_size += PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .impala.JoinBuildInputPB join_build_inputs = 3;
  total_size += 1UL * this->_internal_join_build_inputs_size();
  for (const auto& msg : this->join_build_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 fragment_idx = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fragment_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanFragmentInstanceCtxPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.PlanFragmentInstanceCtxPB)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanFragmentInstanceCtxPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanFragmentInstanceCtxPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.PlanFragmentInstanceCtxPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.PlanFragmentInstanceCtxPB)
    MergeFrom(*source);
  }
}

void PlanFragmentInstanceCtxPB::MergeFrom(const PlanFragmentInstanceCtxPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.PlanFragmentInstanceCtxPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  per_node_scan_ranges_.MergeFrom(from.per_node_scan_ranges_);
  join_build_inputs_.MergeFrom(from.join_build_inputs_);
  if (from._internal_has_fragment_idx()) {
    _internal_set_fragment_idx(from._internal_fragment_idx());
  }
}

void PlanFragmentInstanceCtxPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.PlanFragmentInstanceCtxPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanFragmentInstanceCtxPB::CopyFrom(const PlanFragmentInstanceCtxPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.PlanFragmentInstanceCtxPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanFragmentInstanceCtxPB::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(join_build_inputs_)) return false;
  return true;
}

void PlanFragmentInstanceCtxPB::InternalSwap(PlanFragmentInstanceCtxPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  per_node_scan_ranges_.Swap(&other->per_node_scan_ranges_);
  join_build_inputs_.InternalSwap(&other->join_build_inputs_);
  swap(fragment_idx_, other->fragment_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanFragmentInstanceCtxPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecQueryFInstancesRequestPB::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecQueryFInstancesRequestPB>()._has_bits_);
  static void set_has_coord_state_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_query_ctx_sidecar_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_plan_fragment_info_sidecar_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_mem_reservation_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_initial_mem_reservation_total_claims(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_per_backend_mem_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ExecQueryFInstancesRequestPB::ExecQueryFInstancesRequestPB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fragment_ctxs_(arena),
  fragment_instance_ctxs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.ExecQueryFInstancesRequestPB)
}
ExecQueryFInstancesRequestPB::ExecQueryFInstancesRequestPB(const ExecQueryFInstancesRequestPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fragment_ctxs_(from.fragment_ctxs_),
      fragment_instance_ctxs_(from.fragment_instance_ctxs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&coord_state_idx_, &from.coord_state_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&plan_fragment_info_sidecar_idx_) -
    reinterpret_cast<char*>(&coord_state_idx_)) + sizeof(plan_fragment_info_sidecar_idx_));
  // @@protoc_insertion_point(copy_constructor:impala.ExecQueryFInstancesRequestPB)
}

void ExecQueryFInstancesRequestPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecQueryFInstancesRequestPB_control_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&coord_state_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&plan_fragment_info_sidecar_idx_) -
      reinterpret_cast<char*>(&coord_state_idx_)) + sizeof(plan_fragment_info_sidecar_idx_));
}

ExecQueryFInstancesRequestPB::~ExecQueryFInstancesRequestPB() {
  // @@protoc_insertion_point(destructor:impala.ExecQueryFInstancesRequestPB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecQueryFInstancesRequestPB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExecQueryFInstancesRequestPB::ArenaDtor(void* object) {
  ExecQueryFInstancesRequestPB* _this = reinterpret_cast< ExecQueryFInstancesRequestPB* >(object);
  (void)_this;
}
void ExecQueryFInstancesRequestPB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecQueryFInstancesRequestPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecQueryFInstancesRequestPB& ExecQueryFInstancesRequestPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecQueryFInstancesRequestPB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ExecQueryFInstancesRequestPB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.ExecQueryFInstancesRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fragment_ctxs_.Clear();
  fragment_instance_ctxs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&coord_state_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&plan_fragment_info_sidecar_idx_) -
        reinterpret_cast<char*>(&coord_state_idx_)) + sizeof(plan_fragment_info_sidecar_idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecQueryFInstancesRequestPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 coord_state_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_coord_state_idx(&has_bits);
          coord_state_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 query_ctx_sidecar_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_query_ctx_sidecar_idx(&has_bits);
          query_ctx_sidecar_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 plan_fragment_info_sidecar_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_plan_fragment_info_sidecar_idx(&has_bits);
          plan_fragment_info_sidecar_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 min_mem_reservation_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_min_mem_reservation_bytes(&has_bits);
          min_mem_reservation_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 initial_mem_reservation_total_claims = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_initial_mem_reservation_total_claims(&has_bits);
          initial_mem_reservation_total_claims_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 per_backend_mem_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_per_backend_mem_limit(&has_bits);
          per_backend_mem_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .impala.PlanFragmentCtxPB fragment_ctxs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fragment_ctxs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .impala.PlanFragmentInstanceCtxPB fragment_instance_ctxs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fragment_instance_ctxs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecQueryFInstancesRequestPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.ExecQueryFInstancesRequestPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 coord_state_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_coord_state_idx(), target);
  }

  // optional int32 query_ctx_sidecar_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_query_ctx_sidecar_idx(), target);
  }

  // optional int32 plan_fragment_info_sidecar_idx = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_plan_fragment_info_sidecar_idx(), target);
  }

  // optional int64 min_mem_reservation_bytes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_min_mem_reservation_bytes(), target);
  }

  // optional int64 initial_mem_reservation_total_claims = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_initial_mem_reservation_total_claims(), target);
  }

  // optional int64 per_backend_mem_limit = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_per_backend_mem_limit(), target);
  }

  // repeated .impala.PlanFragmentCtxPB fragment_ctxs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fragment_ctxs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fragment_ctxs(i), target, stream);
  }

  // repeated .impala.PlanFragmentInstanceCtxPB fragment_instance_ctxs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fragment_instance_ctxs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_fragment_instance_ctxs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.ExecQueryFInstancesRequestPB)
  return target;
}

size_t ExecQueryFInstancesRequestPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.ExecQueryFInstancesRequestPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .impala.PlanFragmentCtxPB fragment_ctxs = 7;
  total_size += 1UL * this->_internal_fragment_ctxs_size();
  for (const auto& msg : this->fragment_ctxs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .impala.PlanFragmentInstanceCtxPB fragment_instance_ctxs = 8;
  total_size += 1UL * this->_internal_fragment_instance_ctxs_size();
  for (const auto& msg : this->fragment_instance_ctxs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 coord_state_idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_coord_state_idx());
    }

    // optional int32 query_ctx_sidecar_idx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_query_ctx_sidecar_idx());
    }

    // optional int64 min_mem_reservation_bytes = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_min_mem_reservation_bytes());
    }

    // optional int64 initial_mem_reservation_total_claims = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_initial_mem_reservation_total_claims());
    }

    // optional int64 per_backend_mem_limit = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_per_backend_mem_limit());
    }

    // optional int32 plan_fragment_info_sidecar_idx = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_plan_fragment_info_sidecar_idx());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecQueryFInstancesRequestPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.ExecQueryFInstancesRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecQueryFInstancesRequestPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecQueryFInstancesRequestPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.ExecQueryFInstancesRequestPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.ExecQueryFInstancesRequestPB)
    MergeFrom(*source);
  }
}

void ExecQueryFInstancesRequestPB::MergeFrom(const ExecQueryFInstancesRequestPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.ExecQueryFInstancesRequestPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fragment_ctxs_.MergeFrom(from.fragment_ctxs_);
  fragment_instance_ctxs_.MergeFrom(from.fragment_instance_ctxs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      coord_state_idx_ = from.coord_state_idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      query_ctx_sidecar_idx_ = from.query_ctx_sidecar_idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_mem_reservation_bytes_ = from.min_mem_reservation_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_mem_reservation_total_claims_ = from.initial_mem_reservation_total_claims_;
    }
    if (cached_has_bits & 0x00000010u) {
      per_backend_mem_limit_ = from.per_backend_mem_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      plan_fragment_info_sidecar_idx_ = from.plan_fragment_info_sidecar_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExecQueryFInstancesRequestPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.ExecQueryFInstancesRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecQueryFInstancesRequestPB::CopyFrom(const ExecQueryFInstancesRequestPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.ExecQueryFInstancesRequestPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecQueryFInstancesRequestPB::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fragment_ctxs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fragment_instance_ctxs_)) return false;
  return true;
}

void ExecQueryFInstancesRequestPB::InternalSwap(ExecQueryFInstancesRequestPB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fragment_ctxs_.InternalSwap(&other->fragment_ctxs_);
  fragment_instance_ctxs_.InternalSwap(&other->fragment_instance_ctxs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecQueryFInstancesRequestPB, plan_fragment_info_sidecar_idx_)
      + sizeof(ExecQueryFInstancesRequestPB::plan_fragment_info_sidecar_idx_)
      - PROTOBUF_FIELD_OFFSET(ExecQueryFInstancesRequestPB, coord_state_idx_)>(
          reinterpret_cast<char*>(&coord_state_idx_),
          reinterpret_cast<char*>(&other->coord_state_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecQueryFInstancesRequestPB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExecQueryFInstancesResponsePB::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecQueryFInstancesResponsePB>()._has_bits_);
  static const ::impala::StatusPB& status(const ExecQueryFInstancesResponsePB* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::impala::StatusPB&
ExecQueryFInstancesResponsePB::_Internal::status(const ExecQueryFInstancesResponsePB* msg) {
  return *msg->status_;
}
void ExecQueryFInstancesResponsePB::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ExecQueryFInstancesResponsePB::ExecQueryFInstancesResponsePB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:impala.ExecQueryFInstancesResponsePB)
}
ExecQueryFInstancesResponsePB::ExecQueryFInstancesResponsePB(const ExecQueryFInstancesResponsePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::impala::StatusPB(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:impala.ExecQueryFInstancesResponsePB)
}

void ExecQueryFInstancesResponsePB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExecQueryFInstancesResponsePB_control_5fservice_2eproto.base);
  status_ = nullptr;
}

ExecQueryFInstancesResponsePB::~ExecQueryFInstancesResponsePB() {
  // @@protoc_insertion_point(destructor:impala.ExecQueryFInstancesResponsePB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecQueryFInstancesResponsePB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void ExecQueryFInstancesResponsePB::ArenaDtor(void* object) {
  ExecQueryFInstancesResponsePB* _this = reinterpret_cast< ExecQueryFInstancesResponsePB* >(object);
  (void)_this;
}
void ExecQueryFInstancesResponsePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecQueryFInstancesResponsePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecQueryFInstancesResponsePB& ExecQueryFInstancesResponsePB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecQueryFInstancesResponsePB_control_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ExecQueryFInstancesResponsePB::Clear() {
// @@protoc_insertion_point(message_clear_start:impala.ExecQueryFInstancesResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecQueryFInstancesResponsePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .impala.StatusPB status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecQueryFInstancesResponsePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:impala.ExecQueryFInstancesResponsePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .impala.StatusPB status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:impala.ExecQueryFInstancesResponsePB)
  return target;
}

size_t ExecQueryFInstancesResponsePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:impala.ExecQueryFInstancesResponsePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .impala.StatusPB status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecQueryFInstancesResponsePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:impala.ExecQueryFInstancesResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecQueryFInstancesResponsePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecQueryFInstancesResponsePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:impala.ExecQueryFInstancesResponsePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:impala.ExecQueryFInstancesResponsePB)
    MergeFrom(*source);
  }
}

void ExecQueryFInstancesResponsePB::MergeFrom(const ExecQueryFInstancesResponsePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:impala.ExecQueryFInstancesResponsePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::impala::StatusPB::MergeFrom(from._internal_status());
  }
}

void ExecQueryFInstancesResponsePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:impala.ExecQueryFInstancesResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecQueryFInstancesResponsePB::CopyFrom(const ExecQueryFInstancesResponsePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:impala.ExecQueryFInstancesResponsePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecQueryFInstancesResponsePB::IsInitialized() const {
  return true;
}

void ExecQueryFInstancesResponsePB::InternalSwap(ExecQueryFInstancesResponsePB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecQueryFInstancesResponsePB::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace impala
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::impala::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse* Arena::CreateMaybeMessage< ::impala::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ParquetDmlStatsPB_PerColumnSizeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ParquetDmlStatsPB* Arena::CreateMaybeMessage< ::impala::ParquetDmlStatsPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ParquetDmlStatsPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::KuduDmlStatsPB* Arena::CreateMaybeMessage< ::impala::KuduDmlStatsPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::KuduDmlStatsPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::DmlStatsPB* Arena::CreateMaybeMessage< ::impala::DmlStatsPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::DmlStatsPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::DmlFileStatusPb* Arena::CreateMaybeMessage< ::impala::DmlFileStatusPb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::DmlFileStatusPb >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::DmlPartitionStatusPB* Arena::CreateMaybeMessage< ::impala::DmlPartitionStatusPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::DmlPartitionStatusPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::impala::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::DmlExecStatusPB_PerPartitionStatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::DmlExecStatusPB* Arena::CreateMaybeMessage< ::impala::DmlExecStatusPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::DmlExecStatusPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ErrorLogEntryPB* Arena::CreateMaybeMessage< ::impala::ErrorLogEntryPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ErrorLogEntryPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::StatefulStatusPB_ErrorLogEntry_DoNotUse* Arena::CreateMaybeMessage< ::impala::StatefulStatusPB_ErrorLogEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::StatefulStatusPB_ErrorLogEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::StatefulStatusPB* Arena::CreateMaybeMessage< ::impala::StatefulStatusPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::StatefulStatusPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ExecSummaryDataPB* Arena::CreateMaybeMessage< ::impala::ExecSummaryDataPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ExecSummaryDataPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::RPCErrorInfoPB* Arena::CreateMaybeMessage< ::impala::RPCErrorInfoPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::RPCErrorInfoPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::AuxErrorInfoPB* Arena::CreateMaybeMessage< ::impala::AuxErrorInfoPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::AuxErrorInfoPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::FragmentInstanceExecStatusPB* Arena::CreateMaybeMessage< ::impala::FragmentInstanceExecStatusPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::FragmentInstanceExecStatusPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::FragmentExecStatusPB* Arena::CreateMaybeMessage< ::impala::FragmentExecStatusPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::FragmentExecStatusPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse* Arena::CreateMaybeMessage< ::impala::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ReportExecStatusRequestPB_PerJoinRowsProducedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ReportExecStatusRequestPB* Arena::CreateMaybeMessage< ::impala::ReportExecStatusRequestPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ReportExecStatusRequestPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ReportExecStatusResponsePB* Arena::CreateMaybeMessage< ::impala::ReportExecStatusResponsePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ReportExecStatusResponsePB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::CancelQueryFInstancesRequestPB* Arena::CreateMaybeMessage< ::impala::CancelQueryFInstancesRequestPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::CancelQueryFInstancesRequestPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::CancelQueryFInstancesResponsePB* Arena::CreateMaybeMessage< ::impala::CancelQueryFInstancesResponsePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::CancelQueryFInstancesResponsePB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::RemoteShutdownParamsPB* Arena::CreateMaybeMessage< ::impala::RemoteShutdownParamsPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::RemoteShutdownParamsPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ShutdownStatusPB* Arena::CreateMaybeMessage< ::impala::ShutdownStatusPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ShutdownStatusPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::RemoteShutdownResultPB* Arena::CreateMaybeMessage< ::impala::RemoteShutdownResultPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::RemoteShutdownResultPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::PlanFragmentDestinationPB* Arena::CreateMaybeMessage< ::impala::PlanFragmentDestinationPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::PlanFragmentDestinationPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::PlanFragmentCtxPB* Arena::CreateMaybeMessage< ::impala::PlanFragmentCtxPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::PlanFragmentCtxPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ScanRangeParamsPB* Arena::CreateMaybeMessage< ::impala::ScanRangeParamsPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ScanRangeParamsPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ScanRangesPB* Arena::CreateMaybeMessage< ::impala::ScanRangesPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ScanRangesPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::JoinBuildInputPB* Arena::CreateMaybeMessage< ::impala::JoinBuildInputPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::JoinBuildInputPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse* Arena::CreateMaybeMessage< ::impala::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::PlanFragmentInstanceCtxPB_PerNodeScanRangesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::PlanFragmentInstanceCtxPB* Arena::CreateMaybeMessage< ::impala::PlanFragmentInstanceCtxPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::PlanFragmentInstanceCtxPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ExecQueryFInstancesRequestPB* Arena::CreateMaybeMessage< ::impala::ExecQueryFInstancesRequestPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ExecQueryFInstancesRequestPB >(arena);
}
template<> PROTOBUF_NOINLINE ::impala::ExecQueryFInstancesResponsePB* Arena::CreateMaybeMessage< ::impala::ExecQueryFInstancesResponsePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::impala::ExecQueryFInstancesResponsePB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
