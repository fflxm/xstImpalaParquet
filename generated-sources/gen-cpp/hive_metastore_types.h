/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef hive_metastore_TYPES_H
#define hive_metastore_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "fb303_types.h"


namespace Apache { namespace Hadoop { namespace Hive {

struct HiveObjectType {
  enum type {
    GLOBAL = 1,
    DATABASE = 2,
    TABLE = 3,
    PARTITION = 4,
    COLUMN = 5
  };
};

extern const std::map<int, const char*> _HiveObjectType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const HiveObjectType::type& val);

struct PrincipalType {
  enum type {
    USER = 1,
    ROLE = 2,
    GROUP = 3
  };
};

extern const std::map<int, const char*> _PrincipalType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PrincipalType::type& val);

struct PartitionEventType {
  enum type {
    LOAD_DONE = 1
  };
};

extern const std::map<int, const char*> _PartitionEventType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PartitionEventType::type& val);

struct TxnState {
  enum type {
    COMMITTED = 1,
    ABORTED = 2,
    OPEN = 3
  };
};

extern const std::map<int, const char*> _TxnState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TxnState::type& val);

struct LockLevel {
  enum type {
    DB = 1,
    TABLE = 2,
    PARTITION = 3
  };
};

extern const std::map<int, const char*> _LockLevel_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LockLevel::type& val);

struct LockState {
  enum type {
    ACQUIRED = 1,
    WAITING = 2,
    ABORT = 3,
    NOT_ACQUIRED = 4
  };
};

extern const std::map<int, const char*> _LockState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LockState::type& val);

struct LockType {
  enum type {
    SHARED_READ = 1,
    SHARED_WRITE = 2,
    EXCLUSIVE = 3,
    EXCL_WRITE = 4
  };
};

extern const std::map<int, const char*> _LockType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const LockType::type& val);

struct CompactionType {
  enum type {
    MINOR = 1,
    MAJOR = 2
  };
};

extern const std::map<int, const char*> _CompactionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const CompactionType::type& val);

struct GrantRevokeType {
  enum type {
    GRANT = 1,
    REVOKE = 2
  };
};

extern const std::map<int, const char*> _GrantRevokeType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GrantRevokeType::type& val);

struct DataOperationType {
  enum type {
    SELECT = 1,
    INSERT = 2,
    UPDATE = 3,
    DELETE = 4,
    UNSET = 5,
    NO_TXN = 6
  };
};

extern const std::map<int, const char*> _DataOperationType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const DataOperationType::type& val);

struct EventRequestType {
  enum type {
    INSERT = 1,
    UPDATE = 2,
    DELETE = 3
  };
};

extern const std::map<int, const char*> _EventRequestType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const EventRequestType::type& val);

struct SerdeType {
  enum type {
    HIVE = 1,
    SCHEMA_REGISTRY = 2
  };
};

extern const std::map<int, const char*> _SerdeType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SerdeType::type& val);

struct SchemaType {
  enum type {
    HIVE = 1,
    AVRO = 2
  };
};

extern const std::map<int, const char*> _SchemaType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SchemaType::type& val);

struct SchemaCompatibility {
  enum type {
    NONE = 1,
    BACKWARD = 2,
    FORWARD = 3,
    BOTH = 4
  };
};

extern const std::map<int, const char*> _SchemaCompatibility_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SchemaCompatibility::type& val);

struct SchemaValidation {
  enum type {
    LATEST = 1,
    ALL = 2
  };
};

extern const std::map<int, const char*> _SchemaValidation_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SchemaValidation::type& val);

struct SchemaVersionState {
  enum type {
    INITIATED = 1,
    START_REVIEW = 2,
    CHANGES_REQUIRED = 3,
    REVIEWED = 4,
    ENABLED = 5,
    DISABLED = 6,
    ARCHIVED = 7,
    DELETED = 8
  };
};

extern const std::map<int, const char*> _SchemaVersionState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SchemaVersionState::type& val);

struct FunctionType {
  enum type {
    JAVA = 1
  };
};

extern const std::map<int, const char*> _FunctionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const FunctionType::type& val);

struct ResourceType {
  enum type {
    JAR = 1,
    FILE = 2,
    ARCHIVE = 3
  };
};

extern const std::map<int, const char*> _ResourceType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ResourceType::type& val);

struct TxnType {
  enum type {
    DEFAULT = 0,
    REPL_CREATED = 1,
    READ_ONLY = 2,
    COMPACTION = 3,
    MATER_VIEW_REBUILD = 4
  };
};

extern const std::map<int, const char*> _TxnType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TxnType::type& val);

struct GetTablesExtRequestFields {
  enum type {
    ACCESS_TYPE = 1,
    PROCESSOR_CAPABILITIES = 2,
    ALL = 2147483647
  };
};

extern const std::map<int, const char*> _GetTablesExtRequestFields_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GetTablesExtRequestFields::type& val);

struct FileMetadataExprType {
  enum type {
    ORC_SARG = 1
  };
};

extern const std::map<int, const char*> _FileMetadataExprType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const FileMetadataExprType::type& val);

struct ClientCapability {
  enum type {
    TEST_CAPABILITY = 1,
    INSERT_ONLY_TABLES = 2
  };
};

extern const std::map<int, const char*> _ClientCapability_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ClientCapability::type& val);

struct WMResourcePlanStatus {
  enum type {
    ACTIVE = 1,
    ENABLED = 2,
    DISABLED = 3
  };
};

extern const std::map<int, const char*> _WMResourcePlanStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const WMResourcePlanStatus::type& val);

struct WMPoolSchedulingPolicy {
  enum type {
    FAIR = 1,
    FIFO = 2
  };
};

extern const std::map<int, const char*> _WMPoolSchedulingPolicy_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const WMPoolSchedulingPolicy::type& val);

struct ScheduledQueryMaintenanceRequestType {
  enum type {
    CREATE = 1,
    ALTER = 2,
    DROP = 3
  };
};

extern const std::map<int, const char*> _ScheduledQueryMaintenanceRequestType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ScheduledQueryMaintenanceRequestType::type& val);

struct QueryState {
  enum type {
    INITED = 0,
    EXECUTING = 1,
    FAILED = 2,
    FINISHED = 3,
    TIMED_OUT = 4
  };
};

extern const std::map<int, const char*> _QueryState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const QueryState::type& val);

struct PartitionFilterMode {
  enum type {
    BY_NAMES = 0,
    BY_VALUES = 1,
    BY_EXPR = 2
  };
};

extern const std::map<int, const char*> _PartitionFilterMode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PartitionFilterMode::type& val);

class Version;

class FieldSchema;

class SQLPrimaryKey;

class SQLForeignKey;

class SQLUniqueConstraint;

class SQLNotNullConstraint;

class SQLDefaultConstraint;

class SQLCheckConstraint;

class Type;

class HiveObjectRef;

class PrivilegeGrantInfo;

class HiveObjectPrivilege;

class PrivilegeBag;

class PrincipalPrivilegeSet;

class GrantRevokePrivilegeRequest;

class GrantRevokePrivilegeResponse;

class TruncateTableRequest;

class TruncateTableResponse;

class Role;

class RolePrincipalGrant;

class GetRoleGrantsForPrincipalRequest;

class GetRoleGrantsForPrincipalResponse;

class GetPrincipalsInRoleRequest;

class GetPrincipalsInRoleResponse;

class GrantRevokeRoleRequest;

class GrantRevokeRoleResponse;

class Catalog;

class CreateCatalogRequest;

class AlterCatalogRequest;

class GetCatalogRequest;

class GetCatalogResponse;

class GetCatalogsResponse;

class DropCatalogRequest;

class Database;

class SerDeInfo;

class Order;

class SkewedInfo;

class StorageDescriptor;

class CreationMetadata;

class BooleanColumnStatsData;

class DoubleColumnStatsData;

class LongColumnStatsData;

class StringColumnStatsData;

class BinaryColumnStatsData;

class Decimal;

class DecimalColumnStatsData;

class Date;

class DateColumnStatsData;

class ColumnStatisticsData;

class ColumnStatisticsObj;

class ColumnStatisticsDesc;

class ColumnStatistics;

class FileMetadata;

class ObjectDictionary;

class Table;

class Partition;

class PartitionWithoutSD;

class PartitionSpecWithSharedSD;

class PartitionListComposingSpec;

class PartitionSpec;

class AggrStats;

class SetPartitionsStatsRequest;

class SetPartitionsStatsResponse;

class Schema;

class EnvironmentContext;

class PrimaryKeysRequest;

class PrimaryKeysResponse;

class ForeignKeysRequest;

class ForeignKeysResponse;

class UniqueConstraintsRequest;

class UniqueConstraintsResponse;

class NotNullConstraintsRequest;

class NotNullConstraintsResponse;

class DefaultConstraintsRequest;

class DefaultConstraintsResponse;

class CheckConstraintsRequest;

class CheckConstraintsResponse;

class DropConstraintRequest;

class AddPrimaryKeyRequest;

class AddForeignKeyRequest;

class AddUniqueConstraintRequest;

class AddNotNullConstraintRequest;

class AddDefaultConstraintRequest;

class AddCheckConstraintRequest;

class PartitionsByExprResult;

class PartitionsByExprRequest;

class TableStatsResult;

class PartitionsStatsResult;

class TableStatsRequest;

class PartitionsStatsRequest;

class AddPartitionsResult;

class AddPartitionsRequest;

class DropPartitionsResult;

class DropPartitionsExpr;

class RequestPartsSpec;

class DropPartitionsRequest;

class PartitionValuesRequest;

class PartitionValuesRow;

class PartitionValuesResponse;

class GetPartitionsByNamesRequest;

class GetPartitionsByNamesResult;

class ResourceUri;

class Function;

class TxnInfo;

class GetOpenTxnsInfoResponse;

class GetOpenTxnsResponse;

class OpenTxnRequest;

class OpenTxnsResponse;

class AbortTxnRequest;

class AbortTxnsRequest;

class WriteEventInfo;

class ReplLastIdInfo;

class CommitTxnKeyValue;

class CommitTxnRequest;

class ReplTblWriteIdStateRequest;

class GetValidWriteIdsRequest;

class TableValidWriteIds;

class GetValidWriteIdsResponse;

class TxnToWriteId;

class AllocateTableWriteIdsRequest;

class AllocateTableWriteIdsResponse;

class MaxAllocatedTableWriteIdRequest;

class MaxAllocatedTableWriteIdResponse;

class SeedTableWriteIdsRequest;

class SeedTxnIdRequest;

class LockComponent;

class LockRequest;

class LockResponse;

class CheckLockRequest;

class UnlockRequest;

class ShowLocksRequest;

class ShowLocksResponseElement;

class ShowLocksResponse;

class HeartbeatRequest;

class HeartbeatTxnRangeRequest;

class HeartbeatTxnRangeResponse;

class CompactionRequest;

class CompactionInfoStruct;

class OptionalCompactionInfoStruct;

class CompactionResponse;

class ShowCompactRequest;

class ShowCompactResponseElement;

class ShowCompactResponse;

class GetLatestCommittedCompactionInfoRequest;

class GetLatestCommittedCompactionInfoResponse;

class AddDynamicPartitions;

class BasicTxnInfo;

class NotificationEventRequest;

class NotificationEvent;

class NotificationEventResponse;

class CurrentNotificationEventId;

class NotificationEventsCountRequest;

class NotificationEventsCountResponse;

class InsertEventRequestData;

class FireEventRequestData;

class FireEventRequest;

class FireEventResponse;

class WriteNotificationLogRequest;

class WriteNotificationLogResponse;

class MetadataPpdResult;

class GetFileMetadataByExprResult;

class GetFileMetadataByExprRequest;

class GetFileMetadataResult;

class GetFileMetadataRequest;

class PutFileMetadataResult;

class PutFileMetadataRequest;

class ClearFileMetadataResult;

class ClearFileMetadataRequest;

class CacheFileMetadataResult;

class CacheFileMetadataRequest;

class GetAllFunctionsResponse;

class ClientCapabilities;

class GetProjectionsSpec;

class GetTableRequest;

class GetTableResult;

class GetTablesRequest;

class GetTablesResult;

class GetTablesExtRequest;

class ExtendedTableInfo;

class GetDatabaseRequest;

class CmRecycleRequest;

class CmRecycleResponse;

class TableMeta;

class Materialization;

class WMResourcePlan;

class WMNullableResourcePlan;

class WMPool;

class WMNullablePool;

class WMTrigger;

class WMMapping;

class WMPoolTrigger;

class WMFullResourcePlan;

class WMCreateResourcePlanRequest;

class WMCreateResourcePlanResponse;

class WMGetActiveResourcePlanRequest;

class WMGetActiveResourcePlanResponse;

class WMGetResourcePlanRequest;

class WMGetResourcePlanResponse;

class WMGetAllResourcePlanRequest;

class WMGetAllResourcePlanResponse;

class WMAlterResourcePlanRequest;

class WMAlterResourcePlanResponse;

class WMValidateResourcePlanRequest;

class WMValidateResourcePlanResponse;

class WMDropResourcePlanRequest;

class WMDropResourcePlanResponse;

class WMCreateTriggerRequest;

class WMCreateTriggerResponse;

class WMAlterTriggerRequest;

class WMAlterTriggerResponse;

class WMDropTriggerRequest;

class WMDropTriggerResponse;

class WMGetTriggersForResourePlanRequest;

class WMGetTriggersForResourePlanResponse;

class WMCreatePoolRequest;

class WMCreatePoolResponse;

class WMAlterPoolRequest;

class WMAlterPoolResponse;

class WMDropPoolRequest;

class WMDropPoolResponse;

class WMCreateOrUpdateMappingRequest;

class WMCreateOrUpdateMappingResponse;

class WMDropMappingRequest;

class WMDropMappingResponse;

class WMCreateOrDropTriggerToPoolMappingRequest;

class WMCreateOrDropTriggerToPoolMappingResponse;

class ISchema;

class ISchemaName;

class AlterISchemaRequest;

class SchemaVersion;

class SchemaVersionDescriptor;

class FindSchemasByColsRqst;

class FindSchemasByColsResp;

class MapSchemaVersionToSerdeRequest;

class SetSchemaVersionStateRequest;

class GetSerdeRequest;

class RuntimeStat;

class GetRuntimeStatsRequest;

class CreateTableRequest;

class ScheduledQueryPollRequest;

class ScheduledQueryKey;

class ScheduledQueryPollResponse;

class ScheduledQuery;

class ScheduledQueryMaintenanceRequest;

class ScheduledQueryProgressInfo;

class AlterPartitionsRequest;

class AlterPartitionsResponse;

class RenamePartitionRequest;

class RenamePartitionResponse;

class AlterTableRequest;

class AlterTableResponse;

class GetPartitionsFilterSpec;

class GetPartitionsResponse;

class GetPartitionsRequest;

class GetFieldsRequest;

class GetFieldsResponse;

class GetSchemaRequest;

class GetSchemaResponse;

class GetPartitionRequest;

class GetPartitionResponse;

class PartitionsRequest;

class PartitionsResponse;

class GetPartitionNamesPsRequest;

class GetPartitionNamesPsResponse;

class GetPartitionsPsWithAuthRequest;

class GetPartitionsPsWithAuthResponse;

class ReplicationMetrics;

class ReplicationMetricList;

class GetReplicationMetricsRequest;

class GetOpenTxnsRequest;

class StoredProcedureRequest;

class ListStoredProcedureRequest;

class StoredProcedure;

class AddPackageRequest;

class GetPackageRequest;

class DropPackageRequest;

class ListPackageRequest;

class Package;

class GetAllWriteEventInfoRequest;

class MetaException;

class UnknownTableException;

class UnknownDBException;

class AlreadyExistsException;

class InvalidPartitionException;

class UnknownPartitionException;

class InvalidObjectException;

class NoSuchObjectException;

class InvalidOperationException;

class ConfigValSecurityException;

class InvalidInputException;

class NoSuchTxnException;

class TxnAbortedException;

class TxnOpenException;

class NoSuchLockException;

typedef struct _Version__isset {
  _Version__isset() : version(false), comments(false) {}
  bool version :1;
  bool comments :1;
} _Version__isset;

class Version {
 public:

  Version(const Version&);
  Version(Version&&);
  Version& operator=(const Version&);
  Version& operator=(Version&&);
  Version() : version(), comments() {
  }

  virtual ~Version() throw();
  std::string version;
  std::string comments;

  _Version__isset __isset;

  void __set_version(const std::string& val);

  void __set_comments(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Version &a, Version &b);

std::ostream& operator<<(std::ostream& out, const Version& obj);

typedef struct _FieldSchema__isset {
  _FieldSchema__isset() : name(false), type(false), comment(false) {}
  bool name :1;
  bool type :1;
  bool comment :1;
} _FieldSchema__isset;

class FieldSchema {
 public:

  FieldSchema(const FieldSchema&);
  FieldSchema(FieldSchema&&);
  FieldSchema& operator=(const FieldSchema&);
  FieldSchema& operator=(FieldSchema&&);
  FieldSchema() : name(), type(), comment() {
  }

  virtual ~FieldSchema() throw();
  std::string name;
  std::string type;
  std::string comment;

  _FieldSchema__isset __isset;

  void __set_name(const std::string& val);

  void __set_type(const std::string& val);

  void __set_comment(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FieldSchema &a, FieldSchema &b);

std::ostream& operator<<(std::ostream& out, const FieldSchema& obj);

typedef struct _SQLPrimaryKey__isset {
  _SQLPrimaryKey__isset() : table_db(false), table_name(false), column_name(false), key_seq(false), pk_name(false), enable_cstr(false), validate_cstr(false), rely_cstr(false), catName(false) {}
  bool table_db :1;
  bool table_name :1;
  bool column_name :1;
  bool key_seq :1;
  bool pk_name :1;
  bool enable_cstr :1;
  bool validate_cstr :1;
  bool rely_cstr :1;
  bool catName :1;
} _SQLPrimaryKey__isset;

class SQLPrimaryKey {
 public:

  SQLPrimaryKey(const SQLPrimaryKey&);
  SQLPrimaryKey(SQLPrimaryKey&&);
  SQLPrimaryKey& operator=(const SQLPrimaryKey&);
  SQLPrimaryKey& operator=(SQLPrimaryKey&&);
  SQLPrimaryKey() : table_db(), table_name(), column_name(), key_seq(0), pk_name(), enable_cstr(0), validate_cstr(0), rely_cstr(0), catName() {
  }

  virtual ~SQLPrimaryKey() throw();
  std::string table_db;
  std::string table_name;
  std::string column_name;
  int32_t key_seq;
  std::string pk_name;
  bool enable_cstr;
  bool validate_cstr;
  bool rely_cstr;
  std::string catName;

  _SQLPrimaryKey__isset __isset;

  void __set_table_db(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_column_name(const std::string& val);

  void __set_key_seq(const int32_t val);

  void __set_pk_name(const std::string& val);

  void __set_enable_cstr(const bool val);

  void __set_validate_cstr(const bool val);

  void __set_rely_cstr(const bool val);

  void __set_catName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SQLPrimaryKey &a, SQLPrimaryKey &b);

std::ostream& operator<<(std::ostream& out, const SQLPrimaryKey& obj);

typedef struct _SQLForeignKey__isset {
  _SQLForeignKey__isset() : pktable_db(false), pktable_name(false), pkcolumn_name(false), fktable_db(false), fktable_name(false), fkcolumn_name(false), key_seq(false), update_rule(false), delete_rule(false), fk_name(false), pk_name(false), enable_cstr(false), validate_cstr(false), rely_cstr(false), catName(false) {}
  bool pktable_db :1;
  bool pktable_name :1;
  bool pkcolumn_name :1;
  bool fktable_db :1;
  bool fktable_name :1;
  bool fkcolumn_name :1;
  bool key_seq :1;
  bool update_rule :1;
  bool delete_rule :1;
  bool fk_name :1;
  bool pk_name :1;
  bool enable_cstr :1;
  bool validate_cstr :1;
  bool rely_cstr :1;
  bool catName :1;
} _SQLForeignKey__isset;

class SQLForeignKey {
 public:

  SQLForeignKey(const SQLForeignKey&);
  SQLForeignKey(SQLForeignKey&&);
  SQLForeignKey& operator=(const SQLForeignKey&);
  SQLForeignKey& operator=(SQLForeignKey&&);
  SQLForeignKey() : pktable_db(), pktable_name(), pkcolumn_name(), fktable_db(), fktable_name(), fkcolumn_name(), key_seq(0), update_rule(0), delete_rule(0), fk_name(), pk_name(), enable_cstr(0), validate_cstr(0), rely_cstr(0), catName() {
  }

  virtual ~SQLForeignKey() throw();
  std::string pktable_db;
  std::string pktable_name;
  std::string pkcolumn_name;
  std::string fktable_db;
  std::string fktable_name;
  std::string fkcolumn_name;
  int32_t key_seq;
  int32_t update_rule;
  int32_t delete_rule;
  std::string fk_name;
  std::string pk_name;
  bool enable_cstr;
  bool validate_cstr;
  bool rely_cstr;
  std::string catName;

  _SQLForeignKey__isset __isset;

  void __set_pktable_db(const std::string& val);

  void __set_pktable_name(const std::string& val);

  void __set_pkcolumn_name(const std::string& val);

  void __set_fktable_db(const std::string& val);

  void __set_fktable_name(const std::string& val);

  void __set_fkcolumn_name(const std::string& val);

  void __set_key_seq(const int32_t val);

  void __set_update_rule(const int32_t val);

  void __set_delete_rule(const int32_t val);

  void __set_fk_name(const std::string& val);

  void __set_pk_name(const std::string& val);

  void __set_enable_cstr(const bool val);

  void __set_validate_cstr(const bool val);

  void __set_rely_cstr(const bool val);

  void __set_catName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SQLForeignKey &a, SQLForeignKey &b);

std::ostream& operator<<(std::ostream& out, const SQLForeignKey& obj);

typedef struct _SQLUniqueConstraint__isset {
  _SQLUniqueConstraint__isset() : catName(false), table_db(false), table_name(false), column_name(false), key_seq(false), uk_name(false), enable_cstr(false), validate_cstr(false), rely_cstr(false) {}
  bool catName :1;
  bool table_db :1;
  bool table_name :1;
  bool column_name :1;
  bool key_seq :1;
  bool uk_name :1;
  bool enable_cstr :1;
  bool validate_cstr :1;
  bool rely_cstr :1;
} _SQLUniqueConstraint__isset;

class SQLUniqueConstraint {
 public:

  SQLUniqueConstraint(const SQLUniqueConstraint&);
  SQLUniqueConstraint(SQLUniqueConstraint&&);
  SQLUniqueConstraint& operator=(const SQLUniqueConstraint&);
  SQLUniqueConstraint& operator=(SQLUniqueConstraint&&);
  SQLUniqueConstraint() : catName(), table_db(), table_name(), column_name(), key_seq(0), uk_name(), enable_cstr(0), validate_cstr(0), rely_cstr(0) {
  }

  virtual ~SQLUniqueConstraint() throw();
  std::string catName;
  std::string table_db;
  std::string table_name;
  std::string column_name;
  int32_t key_seq;
  std::string uk_name;
  bool enable_cstr;
  bool validate_cstr;
  bool rely_cstr;

  _SQLUniqueConstraint__isset __isset;

  void __set_catName(const std::string& val);

  void __set_table_db(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_column_name(const std::string& val);

  void __set_key_seq(const int32_t val);

  void __set_uk_name(const std::string& val);

  void __set_enable_cstr(const bool val);

  void __set_validate_cstr(const bool val);

  void __set_rely_cstr(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SQLUniqueConstraint &a, SQLUniqueConstraint &b);

std::ostream& operator<<(std::ostream& out, const SQLUniqueConstraint& obj);

typedef struct _SQLNotNullConstraint__isset {
  _SQLNotNullConstraint__isset() : catName(false), table_db(false), table_name(false), column_name(false), nn_name(false), enable_cstr(false), validate_cstr(false), rely_cstr(false) {}
  bool catName :1;
  bool table_db :1;
  bool table_name :1;
  bool column_name :1;
  bool nn_name :1;
  bool enable_cstr :1;
  bool validate_cstr :1;
  bool rely_cstr :1;
} _SQLNotNullConstraint__isset;

class SQLNotNullConstraint {
 public:

  SQLNotNullConstraint(const SQLNotNullConstraint&);
  SQLNotNullConstraint(SQLNotNullConstraint&&);
  SQLNotNullConstraint& operator=(const SQLNotNullConstraint&);
  SQLNotNullConstraint& operator=(SQLNotNullConstraint&&);
  SQLNotNullConstraint() : catName(), table_db(), table_name(), column_name(), nn_name(), enable_cstr(0), validate_cstr(0), rely_cstr(0) {
  }

  virtual ~SQLNotNullConstraint() throw();
  std::string catName;
  std::string table_db;
  std::string table_name;
  std::string column_name;
  std::string nn_name;
  bool enable_cstr;
  bool validate_cstr;
  bool rely_cstr;

  _SQLNotNullConstraint__isset __isset;

  void __set_catName(const std::string& val);

  void __set_table_db(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_column_name(const std::string& val);

  void __set_nn_name(const std::string& val);

  void __set_enable_cstr(const bool val);

  void __set_validate_cstr(const bool val);

  void __set_rely_cstr(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SQLNotNullConstraint &a, SQLNotNullConstraint &b);

std::ostream& operator<<(std::ostream& out, const SQLNotNullConstraint& obj);

typedef struct _SQLDefaultConstraint__isset {
  _SQLDefaultConstraint__isset() : catName(false), table_db(false), table_name(false), column_name(false), default_value(false), dc_name(false), enable_cstr(false), validate_cstr(false), rely_cstr(false) {}
  bool catName :1;
  bool table_db :1;
  bool table_name :1;
  bool column_name :1;
  bool default_value :1;
  bool dc_name :1;
  bool enable_cstr :1;
  bool validate_cstr :1;
  bool rely_cstr :1;
} _SQLDefaultConstraint__isset;

class SQLDefaultConstraint {
 public:

  SQLDefaultConstraint(const SQLDefaultConstraint&);
  SQLDefaultConstraint(SQLDefaultConstraint&&);
  SQLDefaultConstraint& operator=(const SQLDefaultConstraint&);
  SQLDefaultConstraint& operator=(SQLDefaultConstraint&&);
  SQLDefaultConstraint() : catName(), table_db(), table_name(), column_name(), default_value(), dc_name(), enable_cstr(0), validate_cstr(0), rely_cstr(0) {
  }

  virtual ~SQLDefaultConstraint() throw();
  std::string catName;
  std::string table_db;
  std::string table_name;
  std::string column_name;
  std::string default_value;
  std::string dc_name;
  bool enable_cstr;
  bool validate_cstr;
  bool rely_cstr;

  _SQLDefaultConstraint__isset __isset;

  void __set_catName(const std::string& val);

  void __set_table_db(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_column_name(const std::string& val);

  void __set_default_value(const std::string& val);

  void __set_dc_name(const std::string& val);

  void __set_enable_cstr(const bool val);

  void __set_validate_cstr(const bool val);

  void __set_rely_cstr(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SQLDefaultConstraint &a, SQLDefaultConstraint &b);

std::ostream& operator<<(std::ostream& out, const SQLDefaultConstraint& obj);

typedef struct _SQLCheckConstraint__isset {
  _SQLCheckConstraint__isset() : catName(false), table_db(false), table_name(false), column_name(false), check_expression(false), dc_name(false), enable_cstr(false), validate_cstr(false), rely_cstr(false) {}
  bool catName :1;
  bool table_db :1;
  bool table_name :1;
  bool column_name :1;
  bool check_expression :1;
  bool dc_name :1;
  bool enable_cstr :1;
  bool validate_cstr :1;
  bool rely_cstr :1;
} _SQLCheckConstraint__isset;

class SQLCheckConstraint {
 public:

  SQLCheckConstraint(const SQLCheckConstraint&);
  SQLCheckConstraint(SQLCheckConstraint&&);
  SQLCheckConstraint& operator=(const SQLCheckConstraint&);
  SQLCheckConstraint& operator=(SQLCheckConstraint&&);
  SQLCheckConstraint() : catName(), table_db(), table_name(), column_name(), check_expression(), dc_name(), enable_cstr(0), validate_cstr(0), rely_cstr(0) {
  }

  virtual ~SQLCheckConstraint() throw();
  std::string catName;
  std::string table_db;
  std::string table_name;
  std::string column_name;
  std::string check_expression;
  std::string dc_name;
  bool enable_cstr;
  bool validate_cstr;
  bool rely_cstr;

  _SQLCheckConstraint__isset __isset;

  void __set_catName(const std::string& val);

  void __set_table_db(const std::string& val);

  void __set_table_name(const std::string& val);

  void __set_column_name(const std::string& val);

  void __set_check_expression(const std::string& val);

  void __set_dc_name(const std::string& val);

  void __set_enable_cstr(const bool val);

  void __set_validate_cstr(const bool val);

  void __set_rely_cstr(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SQLCheckConstraint &a, SQLCheckConstraint &b);

std::ostream& operator<<(std::ostream& out, const SQLCheckConstraint& obj);

typedef struct _Type__isset {
  _Type__isset() : name(false), type1(false), type2(false), fields(false) {}
  bool name :1;
  bool type1 :1;
  bool type2 :1;
  bool fields :1;
} _Type__isset;

class Type {
 public:

  Type(const Type&);
  Type(Type&&);
  Type& operator=(const Type&);
  Type& operator=(Type&&);
  Type() : name(), type1(), type2() {
  }

  virtual ~Type() throw();
  std::string name;
  std::string type1;
  std::string type2;
  std::vector<FieldSchema>  fields;

  _Type__isset __isset;

  void __set_name(const std::string& val);

  void __set_type1(const std::string& val);

  void __set_type2(const std::string& val);

  void __set_fields(const std::vector<FieldSchema> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Type &a, Type &b);

std::ostream& operator<<(std::ostream& out, const Type& obj);

typedef struct _HiveObjectRef__isset {
  _HiveObjectRef__isset() : objectType(false), dbName(false), objectName(false), partValues(false), columnName(false), catName(false) {}
  bool objectType :1;
  bool dbName :1;
  bool objectName :1;
  bool partValues :1;
  bool columnName :1;
  bool catName :1;
} _HiveObjectRef__isset;

class HiveObjectRef {
 public:

  HiveObjectRef(const HiveObjectRef&);
  HiveObjectRef(HiveObjectRef&&);
  HiveObjectRef& operator=(const HiveObjectRef&);
  HiveObjectRef& operator=(HiveObjectRef&&);
  HiveObjectRef() : objectType((HiveObjectType::type)0), dbName(), objectName(), columnName(), catName() {
  }

  virtual ~HiveObjectRef() throw();
  HiveObjectType::type objectType;
  std::string dbName;
  std::string objectName;
  std::vector<std::string>  partValues;
  std::string columnName;
  std::string catName;

  _HiveObjectRef__isset __isset;

  void __set_objectType(const HiveObjectType::type val);

  void __set_dbName(const std::string& val);

  void __set_objectName(const std::string& val);

  void __set_partValues(const std::vector<std::string> & val);

  void __set_columnName(const std::string& val);

  void __set_catName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HiveObjectRef &a, HiveObjectRef &b);

std::ostream& operator<<(std::ostream& out, const HiveObjectRef& obj);

typedef struct _PrivilegeGrantInfo__isset {
  _PrivilegeGrantInfo__isset() : privilege(false), createTime(false), grantor(false), grantorType(false), grantOption(false) {}
  bool privilege :1;
  bool createTime :1;
  bool grantor :1;
  bool grantorType :1;
  bool grantOption :1;
} _PrivilegeGrantInfo__isset;

class PrivilegeGrantInfo {
 public:

  PrivilegeGrantInfo(const PrivilegeGrantInfo&);
  PrivilegeGrantInfo(PrivilegeGrantInfo&&);
  PrivilegeGrantInfo& operator=(const PrivilegeGrantInfo&);
  PrivilegeGrantInfo& operator=(PrivilegeGrantInfo&&);
  PrivilegeGrantInfo() : privilege(), createTime(0), grantor(), grantorType((PrincipalType::type)0), grantOption(0) {
  }

  virtual ~PrivilegeGrantInfo() throw();
  std::string privilege;
  int32_t createTime;
  std::string grantor;
  PrincipalType::type grantorType;
  bool grantOption;

  _PrivilegeGrantInfo__isset __isset;

  void __set_privilege(const std::string& val);

  void __set_createTime(const int32_t val);

  void __set_grantor(const std::string& val);

  void __set_grantorType(const PrincipalType::type val);

  void __set_grantOption(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PrivilegeGrantInfo &a, PrivilegeGrantInfo &b);

std::ostream& operator<<(std::ostream& out, const PrivilegeGrantInfo& obj);

typedef struct _HiveObjectPrivilege__isset {
  _HiveObjectPrivilege__isset() : hiveObject(false), principalName(false), principalType(false), grantInfo(false), authorizer(false) {}
  bool hiveObject :1;
  bool principalName :1;
  bool principalType :1;
  bool grantInfo :1;
  bool authorizer :1;
} _HiveObjectPrivilege__isset;

class HiveObjectPrivilege {
 public:

  HiveObjectPrivilege(const HiveObjectPrivilege&);
  HiveObjectPrivilege(HiveObjectPrivilege&&);
  HiveObjectPrivilege& operator=(const HiveObjectPrivilege&);
  HiveObjectPrivilege& operator=(HiveObjectPrivilege&&);
  HiveObjectPrivilege() : principalName(), principalType((PrincipalType::type)0), authorizer() {
  }

  virtual ~HiveObjectPrivilege() throw();
  HiveObjectRef hiveObject;
  std::string principalName;
  PrincipalType::type principalType;
  PrivilegeGrantInfo grantInfo;
  std::string authorizer;

  _HiveObjectPrivilege__isset __isset;

  void __set_hiveObject(const HiveObjectRef& val);

  void __set_principalName(const std::string& val);

  void __set_principalType(const PrincipalType::type val);

  void __set_grantInfo(const PrivilegeGrantInfo& val);

  void __set_authorizer(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HiveObjectPrivilege &a, HiveObjectPrivilege &b);

std::ostream& operator<<(std::ostream& out, const HiveObjectPrivilege& obj);

typedef struct _PrivilegeBag__isset {
  _PrivilegeBag__isset() : privileges(false) {}
  bool privileges :1;
} _PrivilegeBag__isset;

class PrivilegeBag {
 public:

  PrivilegeBag(const PrivilegeBag&);
  PrivilegeBag(PrivilegeBag&&);
  PrivilegeBag& operator=(const PrivilegeBag&);
  PrivilegeBag& operator=(PrivilegeBag&&);
  PrivilegeBag() {
  }

  virtual ~PrivilegeBag() throw();
  std::vector<HiveObjectPrivilege>  privileges;

  _PrivilegeBag__isset __isset;

  void __set_privileges(const std::vector<HiveObjectPrivilege> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PrivilegeBag &a, PrivilegeBag &b);

std::ostream& operator<<(std::ostream& out, const PrivilegeBag& obj);

typedef struct _PrincipalPrivilegeSet__isset {
  _PrincipalPrivilegeSet__isset() : userPrivileges(false), groupPrivileges(false), rolePrivileges(false) {}
  bool userPrivileges :1;
  bool groupPrivileges :1;
  bool rolePrivileges :1;
} _PrincipalPrivilegeSet__isset;

class PrincipalPrivilegeSet {
 public:

  PrincipalPrivilegeSet(const PrincipalPrivilegeSet&);
  PrincipalPrivilegeSet(PrincipalPrivilegeSet&&);
  PrincipalPrivilegeSet& operator=(const PrincipalPrivilegeSet&);
  PrincipalPrivilegeSet& operator=(PrincipalPrivilegeSet&&);
  PrincipalPrivilegeSet() {
  }

  virtual ~PrincipalPrivilegeSet() throw();
  std::map<std::string, std::vector<PrivilegeGrantInfo> >  userPrivileges;
  std::map<std::string, std::vector<PrivilegeGrantInfo> >  groupPrivileges;
  std::map<std::string, std::vector<PrivilegeGrantInfo> >  rolePrivileges;

  _PrincipalPrivilegeSet__isset __isset;

  void __set_userPrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val);

  void __set_groupPrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val);

  void __set_rolePrivileges(const std::map<std::string, std::vector<PrivilegeGrantInfo> > & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PrincipalPrivilegeSet &a, PrincipalPrivilegeSet &b);

std::ostream& operator<<(std::ostream& out, const PrincipalPrivilegeSet& obj);

typedef struct _GrantRevokePrivilegeRequest__isset {
  _GrantRevokePrivilegeRequest__isset() : requestType(false), privileges(false), revokeGrantOption(false) {}
  bool requestType :1;
  bool privileges :1;
  bool revokeGrantOption :1;
} _GrantRevokePrivilegeRequest__isset;

class GrantRevokePrivilegeRequest {
 public:

  GrantRevokePrivilegeRequest(const GrantRevokePrivilegeRequest&);
  GrantRevokePrivilegeRequest(GrantRevokePrivilegeRequest&&);
  GrantRevokePrivilegeRequest& operator=(const GrantRevokePrivilegeRequest&);
  GrantRevokePrivilegeRequest& operator=(GrantRevokePrivilegeRequest&&);
  GrantRevokePrivilegeRequest() : requestType((GrantRevokeType::type)0), revokeGrantOption(0) {
  }

  virtual ~GrantRevokePrivilegeRequest() throw();
  GrantRevokeType::type requestType;
  PrivilegeBag privileges;
  bool revokeGrantOption;

  _GrantRevokePrivilegeRequest__isset __isset;

  void __set_requestType(const GrantRevokeType::type val);

  void __set_privileges(const PrivilegeBag& val);

  void __set_revokeGrantOption(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GrantRevokePrivilegeRequest &a, GrantRevokePrivilegeRequest &b);

std::ostream& operator<<(std::ostream& out, const GrantRevokePrivilegeRequest& obj);

typedef struct _GrantRevokePrivilegeResponse__isset {
  _GrantRevokePrivilegeResponse__isset() : success(false) {}
  bool success :1;
} _GrantRevokePrivilegeResponse__isset;

class GrantRevokePrivilegeResponse {
 public:

  GrantRevokePrivilegeResponse(const GrantRevokePrivilegeResponse&);
  GrantRevokePrivilegeResponse(GrantRevokePrivilegeResponse&&);
  GrantRevokePrivilegeResponse& operator=(const GrantRevokePrivilegeResponse&);
  GrantRevokePrivilegeResponse& operator=(GrantRevokePrivilegeResponse&&);
  GrantRevokePrivilegeResponse() : success(0) {
  }

  virtual ~GrantRevokePrivilegeResponse() throw();
  bool success;

  _GrantRevokePrivilegeResponse__isset __isset;

  void __set_success(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GrantRevokePrivilegeResponse &a, GrantRevokePrivilegeResponse &b);

std::ostream& operator<<(std::ostream& out, const GrantRevokePrivilegeResponse& obj);

typedef struct _TruncateTableRequest__isset {
  _TruncateTableRequest__isset() : partNames(false), writeId(true), validWriteIdList(false) {}
  bool partNames :1;
  bool writeId :1;
  bool validWriteIdList :1;
} _TruncateTableRequest__isset;

class TruncateTableRequest {
 public:

  TruncateTableRequest(const TruncateTableRequest&);
  TruncateTableRequest(TruncateTableRequest&&);
  TruncateTableRequest& operator=(const TruncateTableRequest&);
  TruncateTableRequest& operator=(TruncateTableRequest&&);
  TruncateTableRequest() : dbName(), tableName(), writeId(-1LL), validWriteIdList() {
  }

  virtual ~TruncateTableRequest() throw();
  std::string dbName;
  std::string tableName;
  std::vector<std::string>  partNames;
  int64_t writeId;
  std::string validWriteIdList;

  _TruncateTableRequest__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_partNames(const std::vector<std::string> & val);

  void __set_writeId(const int64_t val);

  void __set_validWriteIdList(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TruncateTableRequest &a, TruncateTableRequest &b);

std::ostream& operator<<(std::ostream& out, const TruncateTableRequest& obj);


class TruncateTableResponse {
 public:

  TruncateTableResponse(const TruncateTableResponse&);
  TruncateTableResponse(TruncateTableResponse&&);
  TruncateTableResponse& operator=(const TruncateTableResponse&);
  TruncateTableResponse& operator=(TruncateTableResponse&&);
  TruncateTableResponse() {
  }

  virtual ~TruncateTableResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TruncateTableResponse &a, TruncateTableResponse &b);

std::ostream& operator<<(std::ostream& out, const TruncateTableResponse& obj);

typedef struct _Role__isset {
  _Role__isset() : roleName(false), createTime(false), ownerName(false) {}
  bool roleName :1;
  bool createTime :1;
  bool ownerName :1;
} _Role__isset;

class Role {
 public:

  Role(const Role&);
  Role(Role&&);
  Role& operator=(const Role&);
  Role& operator=(Role&&);
  Role() : roleName(), createTime(0), ownerName() {
  }

  virtual ~Role() throw();
  std::string roleName;
  int32_t createTime;
  std::string ownerName;

  _Role__isset __isset;

  void __set_roleName(const std::string& val);

  void __set_createTime(const int32_t val);

  void __set_ownerName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Role &a, Role &b);

std::ostream& operator<<(std::ostream& out, const Role& obj);

typedef struct _RolePrincipalGrant__isset {
  _RolePrincipalGrant__isset() : roleName(false), principalName(false), principalType(false), grantOption(false), grantTime(false), grantorName(false), grantorPrincipalType(false) {}
  bool roleName :1;
  bool principalName :1;
  bool principalType :1;
  bool grantOption :1;
  bool grantTime :1;
  bool grantorName :1;
  bool grantorPrincipalType :1;
} _RolePrincipalGrant__isset;

class RolePrincipalGrant {
 public:

  RolePrincipalGrant(const RolePrincipalGrant&);
  RolePrincipalGrant(RolePrincipalGrant&&);
  RolePrincipalGrant& operator=(const RolePrincipalGrant&);
  RolePrincipalGrant& operator=(RolePrincipalGrant&&);
  RolePrincipalGrant() : roleName(), principalName(), principalType((PrincipalType::type)0), grantOption(0), grantTime(0), grantorName(), grantorPrincipalType((PrincipalType::type)0) {
  }

  virtual ~RolePrincipalGrant() throw();
  std::string roleName;
  std::string principalName;
  PrincipalType::type principalType;
  bool grantOption;
  int32_t grantTime;
  std::string grantorName;
  PrincipalType::type grantorPrincipalType;

  _RolePrincipalGrant__isset __isset;

  void __set_roleName(const std::string& val);

  void __set_principalName(const std::string& val);

  void __set_principalType(const PrincipalType::type val);

  void __set_grantOption(const bool val);

  void __set_grantTime(const int32_t val);

  void __set_grantorName(const std::string& val);

  void __set_grantorPrincipalType(const PrincipalType::type val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RolePrincipalGrant &a, RolePrincipalGrant &b);

std::ostream& operator<<(std::ostream& out, const RolePrincipalGrant& obj);


class GetRoleGrantsForPrincipalRequest {
 public:

  GetRoleGrantsForPrincipalRequest(const GetRoleGrantsForPrincipalRequest&);
  GetRoleGrantsForPrincipalRequest(GetRoleGrantsForPrincipalRequest&&);
  GetRoleGrantsForPrincipalRequest& operator=(const GetRoleGrantsForPrincipalRequest&);
  GetRoleGrantsForPrincipalRequest& operator=(GetRoleGrantsForPrincipalRequest&&);
  GetRoleGrantsForPrincipalRequest() : principal_name(), principal_type((PrincipalType::type)0) {
  }

  virtual ~GetRoleGrantsForPrincipalRequest() throw();
  std::string principal_name;
  PrincipalType::type principal_type;

  void __set_principal_name(const std::string& val);

  void __set_principal_type(const PrincipalType::type val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetRoleGrantsForPrincipalRequest &a, GetRoleGrantsForPrincipalRequest &b);

std::ostream& operator<<(std::ostream& out, const GetRoleGrantsForPrincipalRequest& obj);


class GetRoleGrantsForPrincipalResponse {
 public:

  GetRoleGrantsForPrincipalResponse(const GetRoleGrantsForPrincipalResponse&);
  GetRoleGrantsForPrincipalResponse(GetRoleGrantsForPrincipalResponse&&);
  GetRoleGrantsForPrincipalResponse& operator=(const GetRoleGrantsForPrincipalResponse&);
  GetRoleGrantsForPrincipalResponse& operator=(GetRoleGrantsForPrincipalResponse&&);
  GetRoleGrantsForPrincipalResponse() {
  }

  virtual ~GetRoleGrantsForPrincipalResponse() throw();
  std::vector<RolePrincipalGrant>  principalGrants;

  void __set_principalGrants(const std::vector<RolePrincipalGrant> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetRoleGrantsForPrincipalResponse &a, GetRoleGrantsForPrincipalResponse &b);

std::ostream& operator<<(std::ostream& out, const GetRoleGrantsForPrincipalResponse& obj);


class GetPrincipalsInRoleRequest {
 public:

  GetPrincipalsInRoleRequest(const GetPrincipalsInRoleRequest&);
  GetPrincipalsInRoleRequest(GetPrincipalsInRoleRequest&&);
  GetPrincipalsInRoleRequest& operator=(const GetPrincipalsInRoleRequest&);
  GetPrincipalsInRoleRequest& operator=(GetPrincipalsInRoleRequest&&);
  GetPrincipalsInRoleRequest() : roleName() {
  }

  virtual ~GetPrincipalsInRoleRequest() throw();
  std::string roleName;

  void __set_roleName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPrincipalsInRoleRequest &a, GetPrincipalsInRoleRequest &b);

std::ostream& operator<<(std::ostream& out, const GetPrincipalsInRoleRequest& obj);


class GetPrincipalsInRoleResponse {
 public:

  GetPrincipalsInRoleResponse(const GetPrincipalsInRoleResponse&);
  GetPrincipalsInRoleResponse(GetPrincipalsInRoleResponse&&);
  GetPrincipalsInRoleResponse& operator=(const GetPrincipalsInRoleResponse&);
  GetPrincipalsInRoleResponse& operator=(GetPrincipalsInRoleResponse&&);
  GetPrincipalsInRoleResponse() {
  }

  virtual ~GetPrincipalsInRoleResponse() throw();
  std::vector<RolePrincipalGrant>  principalGrants;

  void __set_principalGrants(const std::vector<RolePrincipalGrant> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPrincipalsInRoleResponse &a, GetPrincipalsInRoleResponse &b);

std::ostream& operator<<(std::ostream& out, const GetPrincipalsInRoleResponse& obj);

typedef struct _GrantRevokeRoleRequest__isset {
  _GrantRevokeRoleRequest__isset() : requestType(false), roleName(false), principalName(false), principalType(false), grantor(false), grantorType(false), grantOption(false) {}
  bool requestType :1;
  bool roleName :1;
  bool principalName :1;
  bool principalType :1;
  bool grantor :1;
  bool grantorType :1;
  bool grantOption :1;
} _GrantRevokeRoleRequest__isset;

class GrantRevokeRoleRequest {
 public:

  GrantRevokeRoleRequest(const GrantRevokeRoleRequest&);
  GrantRevokeRoleRequest(GrantRevokeRoleRequest&&);
  GrantRevokeRoleRequest& operator=(const GrantRevokeRoleRequest&);
  GrantRevokeRoleRequest& operator=(GrantRevokeRoleRequest&&);
  GrantRevokeRoleRequest() : requestType((GrantRevokeType::type)0), roleName(), principalName(), principalType((PrincipalType::type)0), grantor(), grantorType((PrincipalType::type)0), grantOption(0) {
  }

  virtual ~GrantRevokeRoleRequest() throw();
  GrantRevokeType::type requestType;
  std::string roleName;
  std::string principalName;
  PrincipalType::type principalType;
  std::string grantor;
  PrincipalType::type grantorType;
  bool grantOption;

  _GrantRevokeRoleRequest__isset __isset;

  void __set_requestType(const GrantRevokeType::type val);

  void __set_roleName(const std::string& val);

  void __set_principalName(const std::string& val);

  void __set_principalType(const PrincipalType::type val);

  void __set_grantor(const std::string& val);

  void __set_grantorType(const PrincipalType::type val);

  void __set_grantOption(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GrantRevokeRoleRequest &a, GrantRevokeRoleRequest &b);

std::ostream& operator<<(std::ostream& out, const GrantRevokeRoleRequest& obj);

typedef struct _GrantRevokeRoleResponse__isset {
  _GrantRevokeRoleResponse__isset() : success(false) {}
  bool success :1;
} _GrantRevokeRoleResponse__isset;

class GrantRevokeRoleResponse {
 public:

  GrantRevokeRoleResponse(const GrantRevokeRoleResponse&);
  GrantRevokeRoleResponse(GrantRevokeRoleResponse&&);
  GrantRevokeRoleResponse& operator=(const GrantRevokeRoleResponse&);
  GrantRevokeRoleResponse& operator=(GrantRevokeRoleResponse&&);
  GrantRevokeRoleResponse() : success(0) {
  }

  virtual ~GrantRevokeRoleResponse() throw();
  bool success;

  _GrantRevokeRoleResponse__isset __isset;

  void __set_success(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GrantRevokeRoleResponse &a, GrantRevokeRoleResponse &b);

std::ostream& operator<<(std::ostream& out, const GrantRevokeRoleResponse& obj);

typedef struct _Catalog__isset {
  _Catalog__isset() : name(false), description(false), locationUri(false), createTime(false) {}
  bool name :1;
  bool description :1;
  bool locationUri :1;
  bool createTime :1;
} _Catalog__isset;

class Catalog {
 public:

  Catalog(const Catalog&);
  Catalog(Catalog&&);
  Catalog& operator=(const Catalog&);
  Catalog& operator=(Catalog&&);
  Catalog() : name(), description(), locationUri(), createTime(0) {
  }

  virtual ~Catalog() throw();
  std::string name;
  std::string description;
  std::string locationUri;
  int32_t createTime;

  _Catalog__isset __isset;

  void __set_name(const std::string& val);

  void __set_description(const std::string& val);

  void __set_locationUri(const std::string& val);

  void __set_createTime(const int32_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Catalog &a, Catalog &b);

std::ostream& operator<<(std::ostream& out, const Catalog& obj);

typedef struct _CreateCatalogRequest__isset {
  _CreateCatalogRequest__isset() : catalog(false) {}
  bool catalog :1;
} _CreateCatalogRequest__isset;

class CreateCatalogRequest {
 public:

  CreateCatalogRequest(const CreateCatalogRequest&);
  CreateCatalogRequest(CreateCatalogRequest&&);
  CreateCatalogRequest& operator=(const CreateCatalogRequest&);
  CreateCatalogRequest& operator=(CreateCatalogRequest&&);
  CreateCatalogRequest() {
  }

  virtual ~CreateCatalogRequest() throw();
  Catalog catalog;

  _CreateCatalogRequest__isset __isset;

  void __set_catalog(const Catalog& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateCatalogRequest &a, CreateCatalogRequest &b);

std::ostream& operator<<(std::ostream& out, const CreateCatalogRequest& obj);

typedef struct _AlterCatalogRequest__isset {
  _AlterCatalogRequest__isset() : name(false), newCat(false) {}
  bool name :1;
  bool newCat :1;
} _AlterCatalogRequest__isset;

class AlterCatalogRequest {
 public:

  AlterCatalogRequest(const AlterCatalogRequest&);
  AlterCatalogRequest(AlterCatalogRequest&&);
  AlterCatalogRequest& operator=(const AlterCatalogRequest&);
  AlterCatalogRequest& operator=(AlterCatalogRequest&&);
  AlterCatalogRequest() : name() {
  }

  virtual ~AlterCatalogRequest() throw();
  std::string name;
  Catalog newCat;

  _AlterCatalogRequest__isset __isset;

  void __set_name(const std::string& val);

  void __set_newCat(const Catalog& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AlterCatalogRequest &a, AlterCatalogRequest &b);

std::ostream& operator<<(std::ostream& out, const AlterCatalogRequest& obj);

typedef struct _GetCatalogRequest__isset {
  _GetCatalogRequest__isset() : name(false) {}
  bool name :1;
} _GetCatalogRequest__isset;

class GetCatalogRequest {
 public:

  GetCatalogRequest(const GetCatalogRequest&);
  GetCatalogRequest(GetCatalogRequest&&);
  GetCatalogRequest& operator=(const GetCatalogRequest&);
  GetCatalogRequest& operator=(GetCatalogRequest&&);
  GetCatalogRequest() : name() {
  }

  virtual ~GetCatalogRequest() throw();
  std::string name;

  _GetCatalogRequest__isset __isset;

  void __set_name(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetCatalogRequest &a, GetCatalogRequest &b);

std::ostream& operator<<(std::ostream& out, const GetCatalogRequest& obj);

typedef struct _GetCatalogResponse__isset {
  _GetCatalogResponse__isset() : catalog(false) {}
  bool catalog :1;
} _GetCatalogResponse__isset;

class GetCatalogResponse {
 public:

  GetCatalogResponse(const GetCatalogResponse&);
  GetCatalogResponse(GetCatalogResponse&&);
  GetCatalogResponse& operator=(const GetCatalogResponse&);
  GetCatalogResponse& operator=(GetCatalogResponse&&);
  GetCatalogResponse() {
  }

  virtual ~GetCatalogResponse() throw();
  Catalog catalog;

  _GetCatalogResponse__isset __isset;

  void __set_catalog(const Catalog& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetCatalogResponse &a, GetCatalogResponse &b);

std::ostream& operator<<(std::ostream& out, const GetCatalogResponse& obj);

typedef struct _GetCatalogsResponse__isset {
  _GetCatalogsResponse__isset() : names(false) {}
  bool names :1;
} _GetCatalogsResponse__isset;

class GetCatalogsResponse {
 public:

  GetCatalogsResponse(const GetCatalogsResponse&);
  GetCatalogsResponse(GetCatalogsResponse&&);
  GetCatalogsResponse& operator=(const GetCatalogsResponse&);
  GetCatalogsResponse& operator=(GetCatalogsResponse&&);
  GetCatalogsResponse() {
  }

  virtual ~GetCatalogsResponse() throw();
  std::vector<std::string>  names;

  _GetCatalogsResponse__isset __isset;

  void __set_names(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetCatalogsResponse &a, GetCatalogsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetCatalogsResponse& obj);

typedef struct _DropCatalogRequest__isset {
  _DropCatalogRequest__isset() : name(false) {}
  bool name :1;
} _DropCatalogRequest__isset;

class DropCatalogRequest {
 public:

  DropCatalogRequest(const DropCatalogRequest&);
  DropCatalogRequest(DropCatalogRequest&&);
  DropCatalogRequest& operator=(const DropCatalogRequest&);
  DropCatalogRequest& operator=(DropCatalogRequest&&);
  DropCatalogRequest() : name() {
  }

  virtual ~DropCatalogRequest() throw();
  std::string name;

  _DropCatalogRequest__isset __isset;

  void __set_name(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropCatalogRequest &a, DropCatalogRequest &b);

std::ostream& operator<<(std::ostream& out, const DropCatalogRequest& obj);

typedef struct _Database__isset {
  _Database__isset() : name(false), description(false), locationUri(false), parameters(false), privileges(false), ownerName(false), ownerType(false), catalogName(false), createTime(false), managedLocationUri(false) {}
  bool name :1;
  bool description :1;
  bool locationUri :1;
  bool parameters :1;
  bool privileges :1;
  bool ownerName :1;
  bool ownerType :1;
  bool catalogName :1;
  bool createTime :1;
  bool managedLocationUri :1;
} _Database__isset;

class Database {
 public:

  Database(const Database&);
  Database(Database&&);
  Database& operator=(const Database&);
  Database& operator=(Database&&);
  Database() : name(), description(), locationUri(), ownerName(), ownerType((PrincipalType::type)0), catalogName(), createTime(0), managedLocationUri() {
  }

  virtual ~Database() throw();
  std::string name;
  std::string description;
  std::string locationUri;
  std::map<std::string, std::string>  parameters;
  PrincipalPrivilegeSet privileges;
  std::string ownerName;
  PrincipalType::type ownerType;
  std::string catalogName;
  int32_t createTime;
  std::string managedLocationUri;

  _Database__isset __isset;

  void __set_name(const std::string& val);

  void __set_description(const std::string& val);

  void __set_locationUri(const std::string& val);

  void __set_parameters(const std::map<std::string, std::string> & val);

  void __set_privileges(const PrincipalPrivilegeSet& val);

  void __set_ownerName(const std::string& val);

  void __set_ownerType(const PrincipalType::type val);

  void __set_catalogName(const std::string& val);

  void __set_createTime(const int32_t val);

  void __set_managedLocationUri(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Database &a, Database &b);

std::ostream& operator<<(std::ostream& out, const Database& obj);

typedef struct _SerDeInfo__isset {
  _SerDeInfo__isset() : name(false), serializationLib(false), parameters(false), description(false), serializerClass(false), deserializerClass(false), serdeType(false) {}
  bool name :1;
  bool serializationLib :1;
  bool parameters :1;
  bool description :1;
  bool serializerClass :1;
  bool deserializerClass :1;
  bool serdeType :1;
} _SerDeInfo__isset;

class SerDeInfo {
 public:

  SerDeInfo(const SerDeInfo&);
  SerDeInfo(SerDeInfo&&);
  SerDeInfo& operator=(const SerDeInfo&);
  SerDeInfo& operator=(SerDeInfo&&);
  SerDeInfo() : name(), serializationLib(), description(), serializerClass(), deserializerClass(), serdeType((SerdeType::type)0) {
  }

  virtual ~SerDeInfo() throw();
  std::string name;
  std::string serializationLib;
  std::map<std::string, std::string>  parameters;
  std::string description;
  std::string serializerClass;
  std::string deserializerClass;
  SerdeType::type serdeType;

  _SerDeInfo__isset __isset;

  void __set_name(const std::string& val);

  void __set_serializationLib(const std::string& val);

  void __set_parameters(const std::map<std::string, std::string> & val);

  void __set_description(const std::string& val);

  void __set_serializerClass(const std::string& val);

  void __set_deserializerClass(const std::string& val);

  void __set_serdeType(const SerdeType::type val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SerDeInfo &a, SerDeInfo &b);

std::ostream& operator<<(std::ostream& out, const SerDeInfo& obj);

typedef struct _Order__isset {
  _Order__isset() : col(false), order(false) {}
  bool col :1;
  bool order :1;
} _Order__isset;

class Order {
 public:

  Order(const Order&);
  Order(Order&&);
  Order& operator=(const Order&);
  Order& operator=(Order&&);
  Order() : col(), order(0) {
  }

  virtual ~Order() throw();
  std::string col;
  int32_t order;

  _Order__isset __isset;

  void __set_col(const std::string& val);

  void __set_order(const int32_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Order &a, Order &b);

std::ostream& operator<<(std::ostream& out, const Order& obj);

typedef struct _SkewedInfo__isset {
  _SkewedInfo__isset() : skewedColNames(false), skewedColValues(false), skewedColValueLocationMaps(false) {}
  bool skewedColNames :1;
  bool skewedColValues :1;
  bool skewedColValueLocationMaps :1;
} _SkewedInfo__isset;

class SkewedInfo {
 public:

  SkewedInfo(const SkewedInfo&);
  SkewedInfo(SkewedInfo&&);
  SkewedInfo& operator=(const SkewedInfo&);
  SkewedInfo& operator=(SkewedInfo&&);
  SkewedInfo() {
  }

  virtual ~SkewedInfo() throw();
  std::vector<std::string>  skewedColNames;
  std::vector<std::vector<std::string> >  skewedColValues;
  std::map<std::vector<std::string> , std::string>  skewedColValueLocationMaps;

  _SkewedInfo__isset __isset;

  void __set_skewedColNames(const std::vector<std::string> & val);

  void __set_skewedColValues(const std::vector<std::vector<std::string> > & val);

  void __set_skewedColValueLocationMaps(const std::map<std::vector<std::string> , std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SkewedInfo &a, SkewedInfo &b);

std::ostream& operator<<(std::ostream& out, const SkewedInfo& obj);

typedef struct _StorageDescriptor__isset {
  _StorageDescriptor__isset() : cols(false), location(false), inputFormat(false), outputFormat(false), compressed(false), numBuckets(false), serdeInfo(false), bucketCols(false), sortCols(false), parameters(false), skewedInfo(false), storedAsSubDirectories(false) {}
  bool cols :1;
  bool location :1;
  bool inputFormat :1;
  bool outputFormat :1;
  bool compressed :1;
  bool numBuckets :1;
  bool serdeInfo :1;
  bool bucketCols :1;
  bool sortCols :1;
  bool parameters :1;
  bool skewedInfo :1;
  bool storedAsSubDirectories :1;
} _StorageDescriptor__isset;

class StorageDescriptor {
 public:

  StorageDescriptor(const StorageDescriptor&);
  StorageDescriptor(StorageDescriptor&&);
  StorageDescriptor& operator=(const StorageDescriptor&);
  StorageDescriptor& operator=(StorageDescriptor&&);
  StorageDescriptor() : location(), inputFormat(), outputFormat(), compressed(0), numBuckets(0), storedAsSubDirectories(0) {
  }

  virtual ~StorageDescriptor() throw();
  std::vector<FieldSchema>  cols;
  std::string location;
  std::string inputFormat;
  std::string outputFormat;
  bool compressed;
  int32_t numBuckets;
  SerDeInfo serdeInfo;
  std::vector<std::string>  bucketCols;
  std::vector<Order>  sortCols;
  std::map<std::string, std::string>  parameters;
  SkewedInfo skewedInfo;
  bool storedAsSubDirectories;

  _StorageDescriptor__isset __isset;

  void __set_cols(const std::vector<FieldSchema> & val);

  void __set_location(const std::string& val);

  void __set_inputFormat(const std::string& val);

  void __set_outputFormat(const std::string& val);

  void __set_compressed(const bool val);

  void __set_numBuckets(const int32_t val);

  void __set_serdeInfo(const SerDeInfo& val);

  void __set_bucketCols(const std::vector<std::string> & val);

  void __set_sortCols(const std::vector<Order> & val);

  void __set_parameters(const std::map<std::string, std::string> & val);

  void __set_skewedInfo(const SkewedInfo& val);

  void __set_storedAsSubDirectories(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StorageDescriptor &a, StorageDescriptor &b);

std::ostream& operator<<(std::ostream& out, const StorageDescriptor& obj);

typedef struct _CreationMetadata__isset {
  _CreationMetadata__isset() : validTxnList(false), materializationTime(false) {}
  bool validTxnList :1;
  bool materializationTime :1;
} _CreationMetadata__isset;

class CreationMetadata {
 public:

  CreationMetadata(const CreationMetadata&);
  CreationMetadata(CreationMetadata&&);
  CreationMetadata& operator=(const CreationMetadata&);
  CreationMetadata& operator=(CreationMetadata&&);
  CreationMetadata() : catName(), dbName(), tblName(), validTxnList(), materializationTime(0) {
  }

  virtual ~CreationMetadata() throw();
  std::string catName;
  std::string dbName;
  std::string tblName;
  std::set<std::string>  tablesUsed;
  std::string validTxnList;
  int64_t materializationTime;

  _CreationMetadata__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_tablesUsed(const std::set<std::string> & val);

  void __set_validTxnList(const std::string& val);

  void __set_materializationTime(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreationMetadata &a, CreationMetadata &b);

std::ostream& operator<<(std::ostream& out, const CreationMetadata& obj);

typedef struct _BooleanColumnStatsData__isset {
  _BooleanColumnStatsData__isset() : bitVectors(false) {}
  bool bitVectors :1;
} _BooleanColumnStatsData__isset;

class BooleanColumnStatsData {
 public:

  BooleanColumnStatsData(const BooleanColumnStatsData&);
  BooleanColumnStatsData(BooleanColumnStatsData&&);
  BooleanColumnStatsData& operator=(const BooleanColumnStatsData&);
  BooleanColumnStatsData& operator=(BooleanColumnStatsData&&);
  BooleanColumnStatsData() : numTrues(0), numFalses(0), numNulls(0), bitVectors() {
  }

  virtual ~BooleanColumnStatsData() throw();
  int64_t numTrues;
  int64_t numFalses;
  int64_t numNulls;
  std::string bitVectors;

  _BooleanColumnStatsData__isset __isset;

  void __set_numTrues(const int64_t val);

  void __set_numFalses(const int64_t val);

  void __set_numNulls(const int64_t val);

  void __set_bitVectors(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BooleanColumnStatsData &a, BooleanColumnStatsData &b);

std::ostream& operator<<(std::ostream& out, const BooleanColumnStatsData& obj);

typedef struct _DoubleColumnStatsData__isset {
  _DoubleColumnStatsData__isset() : lowValue(false), highValue(false), bitVectors(false) {}
  bool lowValue :1;
  bool highValue :1;
  bool bitVectors :1;
} _DoubleColumnStatsData__isset;

class DoubleColumnStatsData {
 public:

  DoubleColumnStatsData(const DoubleColumnStatsData&);
  DoubleColumnStatsData(DoubleColumnStatsData&&);
  DoubleColumnStatsData& operator=(const DoubleColumnStatsData&);
  DoubleColumnStatsData& operator=(DoubleColumnStatsData&&);
  DoubleColumnStatsData() : lowValue(0), highValue(0), numNulls(0), numDVs(0), bitVectors() {
  }

  virtual ~DoubleColumnStatsData() throw();
  double lowValue;
  double highValue;
  int64_t numNulls;
  int64_t numDVs;
  std::string bitVectors;

  _DoubleColumnStatsData__isset __isset;

  void __set_lowValue(const double val);

  void __set_highValue(const double val);

  void __set_numNulls(const int64_t val);

  void __set_numDVs(const int64_t val);

  void __set_bitVectors(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DoubleColumnStatsData &a, DoubleColumnStatsData &b);

std::ostream& operator<<(std::ostream& out, const DoubleColumnStatsData& obj);

typedef struct _LongColumnStatsData__isset {
  _LongColumnStatsData__isset() : lowValue(false), highValue(false), bitVectors(false) {}
  bool lowValue :1;
  bool highValue :1;
  bool bitVectors :1;
} _LongColumnStatsData__isset;

class LongColumnStatsData {
 public:

  LongColumnStatsData(const LongColumnStatsData&);
  LongColumnStatsData(LongColumnStatsData&&);
  LongColumnStatsData& operator=(const LongColumnStatsData&);
  LongColumnStatsData& operator=(LongColumnStatsData&&);
  LongColumnStatsData() : lowValue(0), highValue(0), numNulls(0), numDVs(0), bitVectors() {
  }

  virtual ~LongColumnStatsData() throw();
  int64_t lowValue;
  int64_t highValue;
  int64_t numNulls;
  int64_t numDVs;
  std::string bitVectors;

  _LongColumnStatsData__isset __isset;

  void __set_lowValue(const int64_t val);

  void __set_highValue(const int64_t val);

  void __set_numNulls(const int64_t val);

  void __set_numDVs(const int64_t val);

  void __set_bitVectors(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LongColumnStatsData &a, LongColumnStatsData &b);

std::ostream& operator<<(std::ostream& out, const LongColumnStatsData& obj);

typedef struct _StringColumnStatsData__isset {
  _StringColumnStatsData__isset() : bitVectors(false) {}
  bool bitVectors :1;
} _StringColumnStatsData__isset;

class StringColumnStatsData {
 public:

  StringColumnStatsData(const StringColumnStatsData&);
  StringColumnStatsData(StringColumnStatsData&&);
  StringColumnStatsData& operator=(const StringColumnStatsData&);
  StringColumnStatsData& operator=(StringColumnStatsData&&);
  StringColumnStatsData() : maxColLen(0), avgColLen(0), numNulls(0), numDVs(0), bitVectors() {
  }

  virtual ~StringColumnStatsData() throw();
  int64_t maxColLen;
  double avgColLen;
  int64_t numNulls;
  int64_t numDVs;
  std::string bitVectors;

  _StringColumnStatsData__isset __isset;

  void __set_maxColLen(const int64_t val);

  void __set_avgColLen(const double val);

  void __set_numNulls(const int64_t val);

  void __set_numDVs(const int64_t val);

  void __set_bitVectors(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StringColumnStatsData &a, StringColumnStatsData &b);

std::ostream& operator<<(std::ostream& out, const StringColumnStatsData& obj);

typedef struct _BinaryColumnStatsData__isset {
  _BinaryColumnStatsData__isset() : bitVectors(false) {}
  bool bitVectors :1;
} _BinaryColumnStatsData__isset;

class BinaryColumnStatsData {
 public:

  BinaryColumnStatsData(const BinaryColumnStatsData&);
  BinaryColumnStatsData(BinaryColumnStatsData&&);
  BinaryColumnStatsData& operator=(const BinaryColumnStatsData&);
  BinaryColumnStatsData& operator=(BinaryColumnStatsData&&);
  BinaryColumnStatsData() : maxColLen(0), avgColLen(0), numNulls(0), bitVectors() {
  }

  virtual ~BinaryColumnStatsData() throw();
  int64_t maxColLen;
  double avgColLen;
  int64_t numNulls;
  std::string bitVectors;

  _BinaryColumnStatsData__isset __isset;

  void __set_maxColLen(const int64_t val);

  void __set_avgColLen(const double val);

  void __set_numNulls(const int64_t val);

  void __set_bitVectors(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BinaryColumnStatsData &a, BinaryColumnStatsData &b);

std::ostream& operator<<(std::ostream& out, const BinaryColumnStatsData& obj);


class Decimal {
 public:

  Decimal(const Decimal&);
  Decimal(Decimal&&);
  Decimal& operator=(const Decimal&);
  Decimal& operator=(Decimal&&);
  Decimal() : scale(0), unscaled() {
  }

  virtual ~Decimal() throw();
  int16_t scale;
  std::string unscaled;

  void __set_scale(const int16_t val);

  void __set_unscaled(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Decimal &a, Decimal &b);

std::ostream& operator<<(std::ostream& out, const Decimal& obj);

typedef struct _DecimalColumnStatsData__isset {
  _DecimalColumnStatsData__isset() : lowValue(false), highValue(false), bitVectors(false) {}
  bool lowValue :1;
  bool highValue :1;
  bool bitVectors :1;
} _DecimalColumnStatsData__isset;

class DecimalColumnStatsData {
 public:

  DecimalColumnStatsData(const DecimalColumnStatsData&);
  DecimalColumnStatsData(DecimalColumnStatsData&&);
  DecimalColumnStatsData& operator=(const DecimalColumnStatsData&);
  DecimalColumnStatsData& operator=(DecimalColumnStatsData&&);
  DecimalColumnStatsData() : numNulls(0), numDVs(0), bitVectors() {
  }

  virtual ~DecimalColumnStatsData() throw();
  Decimal lowValue;
  Decimal highValue;
  int64_t numNulls;
  int64_t numDVs;
  std::string bitVectors;

  _DecimalColumnStatsData__isset __isset;

  void __set_lowValue(const Decimal& val);

  void __set_highValue(const Decimal& val);

  void __set_numNulls(const int64_t val);

  void __set_numDVs(const int64_t val);

  void __set_bitVectors(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DecimalColumnStatsData &a, DecimalColumnStatsData &b);

std::ostream& operator<<(std::ostream& out, const DecimalColumnStatsData& obj);


class Date {
 public:

  Date(const Date&);
  Date(Date&&);
  Date& operator=(const Date&);
  Date& operator=(Date&&);
  Date() : daysSinceEpoch(0) {
  }

  virtual ~Date() throw();
  int64_t daysSinceEpoch;

  void __set_daysSinceEpoch(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Date &a, Date &b);

std::ostream& operator<<(std::ostream& out, const Date& obj);

typedef struct _DateColumnStatsData__isset {
  _DateColumnStatsData__isset() : lowValue(false), highValue(false), bitVectors(false) {}
  bool lowValue :1;
  bool highValue :1;
  bool bitVectors :1;
} _DateColumnStatsData__isset;

class DateColumnStatsData {
 public:

  DateColumnStatsData(const DateColumnStatsData&);
  DateColumnStatsData(DateColumnStatsData&&);
  DateColumnStatsData& operator=(const DateColumnStatsData&);
  DateColumnStatsData& operator=(DateColumnStatsData&&);
  DateColumnStatsData() : numNulls(0), numDVs(0), bitVectors() {
  }

  virtual ~DateColumnStatsData() throw();
  Date lowValue;
  Date highValue;
  int64_t numNulls;
  int64_t numDVs;
  std::string bitVectors;

  _DateColumnStatsData__isset __isset;

  void __set_lowValue(const Date& val);

  void __set_highValue(const Date& val);

  void __set_numNulls(const int64_t val);

  void __set_numDVs(const int64_t val);

  void __set_bitVectors(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DateColumnStatsData &a, DateColumnStatsData &b);

std::ostream& operator<<(std::ostream& out, const DateColumnStatsData& obj);

typedef struct _ColumnStatisticsData__isset {
  _ColumnStatisticsData__isset() : booleanStats(false), longStats(false), doubleStats(false), stringStats(false), binaryStats(false), decimalStats(false), dateStats(false) {}
  bool booleanStats :1;
  bool longStats :1;
  bool doubleStats :1;
  bool stringStats :1;
  bool binaryStats :1;
  bool decimalStats :1;
  bool dateStats :1;
} _ColumnStatisticsData__isset;

class ColumnStatisticsData {
 public:

  ColumnStatisticsData(const ColumnStatisticsData&);
  ColumnStatisticsData(ColumnStatisticsData&&);
  ColumnStatisticsData& operator=(const ColumnStatisticsData&);
  ColumnStatisticsData& operator=(ColumnStatisticsData&&);
  ColumnStatisticsData() {
  }

  virtual ~ColumnStatisticsData() throw();
  BooleanColumnStatsData booleanStats;
  LongColumnStatsData longStats;
  DoubleColumnStatsData doubleStats;
  StringColumnStatsData stringStats;
  BinaryColumnStatsData binaryStats;
  DecimalColumnStatsData decimalStats;
  DateColumnStatsData dateStats;

  _ColumnStatisticsData__isset __isset;

  void __set_booleanStats(const BooleanColumnStatsData& val);

  void __set_longStats(const LongColumnStatsData& val);

  void __set_doubleStats(const DoubleColumnStatsData& val);

  void __set_stringStats(const StringColumnStatsData& val);

  void __set_binaryStats(const BinaryColumnStatsData& val);

  void __set_decimalStats(const DecimalColumnStatsData& val);

  void __set_dateStats(const DateColumnStatsData& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ColumnStatisticsData &a, ColumnStatisticsData &b);

std::ostream& operator<<(std::ostream& out, const ColumnStatisticsData& obj);


class ColumnStatisticsObj {
 public:

  ColumnStatisticsObj(const ColumnStatisticsObj&);
  ColumnStatisticsObj(ColumnStatisticsObj&&);
  ColumnStatisticsObj& operator=(const ColumnStatisticsObj&);
  ColumnStatisticsObj& operator=(ColumnStatisticsObj&&);
  ColumnStatisticsObj() : colName(), colType() {
  }

  virtual ~ColumnStatisticsObj() throw();
  std::string colName;
  std::string colType;
  ColumnStatisticsData statsData;

  void __set_colName(const std::string& val);

  void __set_colType(const std::string& val);

  void __set_statsData(const ColumnStatisticsData& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ColumnStatisticsObj &a, ColumnStatisticsObj &b);

std::ostream& operator<<(std::ostream& out, const ColumnStatisticsObj& obj);

typedef struct _ColumnStatisticsDesc__isset {
  _ColumnStatisticsDesc__isset() : partName(false), lastAnalyzed(false), catName(false) {}
  bool partName :1;
  bool lastAnalyzed :1;
  bool catName :1;
} _ColumnStatisticsDesc__isset;

class ColumnStatisticsDesc {
 public:

  ColumnStatisticsDesc(const ColumnStatisticsDesc&);
  ColumnStatisticsDesc(ColumnStatisticsDesc&&);
  ColumnStatisticsDesc& operator=(const ColumnStatisticsDesc&);
  ColumnStatisticsDesc& operator=(ColumnStatisticsDesc&&);
  ColumnStatisticsDesc() : isTblLevel(0), dbName(), tableName(), partName(), lastAnalyzed(0), catName() {
  }

  virtual ~ColumnStatisticsDesc() throw();
  bool isTblLevel;
  std::string dbName;
  std::string tableName;
  std::string partName;
  int64_t lastAnalyzed;
  std::string catName;

  _ColumnStatisticsDesc__isset __isset;

  void __set_isTblLevel(const bool val);

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_partName(const std::string& val);

  void __set_lastAnalyzed(const int64_t val);

  void __set_catName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ColumnStatisticsDesc &a, ColumnStatisticsDesc &b);

std::ostream& operator<<(std::ostream& out, const ColumnStatisticsDesc& obj);

typedef struct _ColumnStatistics__isset {
  _ColumnStatistics__isset() : isStatsCompliant(false), engine(false) {}
  bool isStatsCompliant :1;
  bool engine :1;
} _ColumnStatistics__isset;

class ColumnStatistics {
 public:

  ColumnStatistics(const ColumnStatistics&);
  ColumnStatistics(ColumnStatistics&&);
  ColumnStatistics& operator=(const ColumnStatistics&);
  ColumnStatistics& operator=(ColumnStatistics&&);
  ColumnStatistics() : isStatsCompliant(0), engine() {
  }

  virtual ~ColumnStatistics() throw();
  ColumnStatisticsDesc statsDesc;
  std::vector<ColumnStatisticsObj>  statsObj;
  bool isStatsCompliant;
  std::string engine;

  _ColumnStatistics__isset __isset;

  void __set_statsDesc(const ColumnStatisticsDesc& val);

  void __set_statsObj(const std::vector<ColumnStatisticsObj> & val);

  void __set_isStatsCompliant(const bool val);

  void __set_engine(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ColumnStatistics &a, ColumnStatistics &b);

std::ostream& operator<<(std::ostream& out, const ColumnStatistics& obj);

typedef struct _FileMetadata__isset {
  _FileMetadata__isset() : type(true), version(true), data(false) {}
  bool type :1;
  bool version :1;
  bool data :1;
} _FileMetadata__isset;

class FileMetadata {
 public:

  FileMetadata(const FileMetadata&);
  FileMetadata(FileMetadata&&);
  FileMetadata& operator=(const FileMetadata&);
  FileMetadata& operator=(FileMetadata&&);
  FileMetadata() : type(1), version(1) {
  }

  virtual ~FileMetadata() throw();
  int8_t type;
  int8_t version;
  std::vector<std::string>  data;

  _FileMetadata__isset __isset;

  void __set_type(const int8_t val);

  void __set_version(const int8_t val);

  void __set_data(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FileMetadata &a, FileMetadata &b);

std::ostream& operator<<(std::ostream& out, const FileMetadata& obj);


class ObjectDictionary {
 public:

  ObjectDictionary(const ObjectDictionary&);
  ObjectDictionary(ObjectDictionary&&);
  ObjectDictionary& operator=(const ObjectDictionary&);
  ObjectDictionary& operator=(ObjectDictionary&&);
  ObjectDictionary() {
  }

  virtual ~ObjectDictionary() throw();
  std::map<std::string, std::vector<std::string> >  values;

  void __set_values(const std::map<std::string, std::vector<std::string> > & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ObjectDictionary &a, ObjectDictionary &b);

std::ostream& operator<<(std::ostream& out, const ObjectDictionary& obj);

typedef struct _Table__isset {
  _Table__isset() : tableName(false), dbName(false), owner(false), createTime(false), lastAccessTime(false), retention(false), sd(false), partitionKeys(false), parameters(false), viewOriginalText(false), viewExpandedText(false), tableType(false), privileges(false), temporary(true), rewriteEnabled(false), creationMetadata(false), catName(false), ownerType(true), writeId(true), isStatsCompliant(false), colStats(false), accessType(false), requiredReadCapabilities(false), requiredWriteCapabilities(false), id(false), fileMetadata(false), dictionary(false) {}
  bool tableName :1;
  bool dbName :1;
  bool owner :1;
  bool createTime :1;
  bool lastAccessTime :1;
  bool retention :1;
  bool sd :1;
  bool partitionKeys :1;
  bool parameters :1;
  bool viewOriginalText :1;
  bool viewExpandedText :1;
  bool tableType :1;
  bool privileges :1;
  bool temporary :1;
  bool rewriteEnabled :1;
  bool creationMetadata :1;
  bool catName :1;
  bool ownerType :1;
  bool writeId :1;
  bool isStatsCompliant :1;
  bool colStats :1;
  bool accessType :1;
  bool requiredReadCapabilities :1;
  bool requiredWriteCapabilities :1;
  bool id :1;
  bool fileMetadata :1;
  bool dictionary :1;
} _Table__isset;

class Table {
 public:

  Table(const Table&);
  Table(Table&&);
  Table& operator=(const Table&);
  Table& operator=(Table&&);
  Table() : tableName(), dbName(), owner(), createTime(0), lastAccessTime(0), retention(0), viewOriginalText(), viewExpandedText(), tableType(), temporary(false), rewriteEnabled(0), catName(), ownerType((PrincipalType::type)1), writeId(-1LL), isStatsCompliant(0), accessType(0), id(0) {
    ownerType = (PrincipalType::type)1;

  }

  virtual ~Table() throw();
  std::string tableName;
  std::string dbName;
  std::string owner;
  int32_t createTime;
  int32_t lastAccessTime;
  int32_t retention;
  StorageDescriptor sd;
  std::vector<FieldSchema>  partitionKeys;
  std::map<std::string, std::string>  parameters;
  std::string viewOriginalText;
  std::string viewExpandedText;
  std::string tableType;
  PrincipalPrivilegeSet privileges;
  bool temporary;
  bool rewriteEnabled;
  CreationMetadata creationMetadata;
  std::string catName;
  PrincipalType::type ownerType;
  int64_t writeId;
  bool isStatsCompliant;
  ColumnStatistics colStats;
  int8_t accessType;
  std::vector<std::string>  requiredReadCapabilities;
  std::vector<std::string>  requiredWriteCapabilities;
  int64_t id;
  FileMetadata fileMetadata;
  ObjectDictionary dictionary;

  _Table__isset __isset;

  void __set_tableName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_owner(const std::string& val);

  void __set_createTime(const int32_t val);

  void __set_lastAccessTime(const int32_t val);

  void __set_retention(const int32_t val);

  void __set_sd(const StorageDescriptor& val);

  void __set_partitionKeys(const std::vector<FieldSchema> & val);

  void __set_parameters(const std::map<std::string, std::string> & val);

  void __set_viewOriginalText(const std::string& val);

  void __set_viewExpandedText(const std::string& val);

  void __set_tableType(const std::string& val);

  void __set_privileges(const PrincipalPrivilegeSet& val);

  void __set_temporary(const bool val);

  void __set_rewriteEnabled(const bool val);

  void __set_creationMetadata(const CreationMetadata& val);

  void __set_catName(const std::string& val);

  void __set_ownerType(const PrincipalType::type val);

  void __set_writeId(const int64_t val);

  void __set_isStatsCompliant(const bool val);

  void __set_colStats(const ColumnStatistics& val);

  void __set_accessType(const int8_t val);

  void __set_requiredReadCapabilities(const std::vector<std::string> & val);

  void __set_requiredWriteCapabilities(const std::vector<std::string> & val);

  void __set_id(const int64_t val);

  void __set_fileMetadata(const FileMetadata& val);

  void __set_dictionary(const ObjectDictionary& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Table &a, Table &b);

std::ostream& operator<<(std::ostream& out, const Table& obj);

typedef struct _Partition__isset {
  _Partition__isset() : values(false), dbName(false), tableName(false), createTime(false), lastAccessTime(false), sd(false), parameters(false), privileges(false), catName(false), writeId(true), isStatsCompliant(false), colStats(false), fileMetadata(false) {}
  bool values :1;
  bool dbName :1;
  bool tableName :1;
  bool createTime :1;
  bool lastAccessTime :1;
  bool sd :1;
  bool parameters :1;
  bool privileges :1;
  bool catName :1;
  bool writeId :1;
  bool isStatsCompliant :1;
  bool colStats :1;
  bool fileMetadata :1;
} _Partition__isset;

class Partition {
 public:

  Partition(const Partition&);
  Partition(Partition&&);
  Partition& operator=(const Partition&);
  Partition& operator=(Partition&&);
  Partition() : dbName(), tableName(), createTime(0), lastAccessTime(0), catName(), writeId(-1LL), isStatsCompliant(0) {
  }

  virtual ~Partition() throw();
  std::vector<std::string>  values;
  std::string dbName;
  std::string tableName;
  int32_t createTime;
  int32_t lastAccessTime;
  StorageDescriptor sd;
  std::map<std::string, std::string>  parameters;
  PrincipalPrivilegeSet privileges;
  std::string catName;
  int64_t writeId;
  bool isStatsCompliant;
  ColumnStatistics colStats;
  FileMetadata fileMetadata;

  _Partition__isset __isset;

  void __set_values(const std::vector<std::string> & val);

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_createTime(const int32_t val);

  void __set_lastAccessTime(const int32_t val);

  void __set_sd(const StorageDescriptor& val);

  void __set_parameters(const std::map<std::string, std::string> & val);

  void __set_privileges(const PrincipalPrivilegeSet& val);

  void __set_catName(const std::string& val);

  void __set_writeId(const int64_t val);

  void __set_isStatsCompliant(const bool val);

  void __set_colStats(const ColumnStatistics& val);

  void __set_fileMetadata(const FileMetadata& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Partition &a, Partition &b);

std::ostream& operator<<(std::ostream& out, const Partition& obj);

typedef struct _PartitionWithoutSD__isset {
  _PartitionWithoutSD__isset() : values(false), createTime(false), lastAccessTime(false), relativePath(false), parameters(false), privileges(false) {}
  bool values :1;
  bool createTime :1;
  bool lastAccessTime :1;
  bool relativePath :1;
  bool parameters :1;
  bool privileges :1;
} _PartitionWithoutSD__isset;

class PartitionWithoutSD {
 public:

  PartitionWithoutSD(const PartitionWithoutSD&);
  PartitionWithoutSD(PartitionWithoutSD&&);
  PartitionWithoutSD& operator=(const PartitionWithoutSD&);
  PartitionWithoutSD& operator=(PartitionWithoutSD&&);
  PartitionWithoutSD() : createTime(0), lastAccessTime(0), relativePath() {
  }

  virtual ~PartitionWithoutSD() throw();
  std::vector<std::string>  values;
  int32_t createTime;
  int32_t lastAccessTime;
  std::string relativePath;
  std::map<std::string, std::string>  parameters;
  PrincipalPrivilegeSet privileges;

  _PartitionWithoutSD__isset __isset;

  void __set_values(const std::vector<std::string> & val);

  void __set_createTime(const int32_t val);

  void __set_lastAccessTime(const int32_t val);

  void __set_relativePath(const std::string& val);

  void __set_parameters(const std::map<std::string, std::string> & val);

  void __set_privileges(const PrincipalPrivilegeSet& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionWithoutSD &a, PartitionWithoutSD &b);

std::ostream& operator<<(std::ostream& out, const PartitionWithoutSD& obj);

typedef struct _PartitionSpecWithSharedSD__isset {
  _PartitionSpecWithSharedSD__isset() : partitions(false), sd(false) {}
  bool partitions :1;
  bool sd :1;
} _PartitionSpecWithSharedSD__isset;

class PartitionSpecWithSharedSD {
 public:

  PartitionSpecWithSharedSD(const PartitionSpecWithSharedSD&);
  PartitionSpecWithSharedSD(PartitionSpecWithSharedSD&&);
  PartitionSpecWithSharedSD& operator=(const PartitionSpecWithSharedSD&);
  PartitionSpecWithSharedSD& operator=(PartitionSpecWithSharedSD&&);
  PartitionSpecWithSharedSD() {
  }

  virtual ~PartitionSpecWithSharedSD() throw();
  std::vector<PartitionWithoutSD>  partitions;
  StorageDescriptor sd;

  _PartitionSpecWithSharedSD__isset __isset;

  void __set_partitions(const std::vector<PartitionWithoutSD> & val);

  void __set_sd(const StorageDescriptor& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionSpecWithSharedSD &a, PartitionSpecWithSharedSD &b);

std::ostream& operator<<(std::ostream& out, const PartitionSpecWithSharedSD& obj);

typedef struct _PartitionListComposingSpec__isset {
  _PartitionListComposingSpec__isset() : partitions(false) {}
  bool partitions :1;
} _PartitionListComposingSpec__isset;

class PartitionListComposingSpec {
 public:

  PartitionListComposingSpec(const PartitionListComposingSpec&);
  PartitionListComposingSpec(PartitionListComposingSpec&&);
  PartitionListComposingSpec& operator=(const PartitionListComposingSpec&);
  PartitionListComposingSpec& operator=(PartitionListComposingSpec&&);
  PartitionListComposingSpec() {
  }

  virtual ~PartitionListComposingSpec() throw();
  std::vector<Partition>  partitions;

  _PartitionListComposingSpec__isset __isset;

  void __set_partitions(const std::vector<Partition> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionListComposingSpec &a, PartitionListComposingSpec &b);

std::ostream& operator<<(std::ostream& out, const PartitionListComposingSpec& obj);

typedef struct _PartitionSpec__isset {
  _PartitionSpec__isset() : dbName(false), tableName(false), rootPath(false), sharedSDPartitionSpec(false), partitionList(false), catName(false), writeId(true), isStatsCompliant(false) {}
  bool dbName :1;
  bool tableName :1;
  bool rootPath :1;
  bool sharedSDPartitionSpec :1;
  bool partitionList :1;
  bool catName :1;
  bool writeId :1;
  bool isStatsCompliant :1;
} _PartitionSpec__isset;

class PartitionSpec {
 public:

  PartitionSpec(const PartitionSpec&);
  PartitionSpec(PartitionSpec&&);
  PartitionSpec& operator=(const PartitionSpec&);
  PartitionSpec& operator=(PartitionSpec&&);
  PartitionSpec() : dbName(), tableName(), rootPath(), catName(), writeId(-1LL), isStatsCompliant(0) {
  }

  virtual ~PartitionSpec() throw();
  std::string dbName;
  std::string tableName;
  std::string rootPath;
  PartitionSpecWithSharedSD sharedSDPartitionSpec;
  PartitionListComposingSpec partitionList;
  std::string catName;
  int64_t writeId;
  bool isStatsCompliant;

  _PartitionSpec__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_rootPath(const std::string& val);

  void __set_sharedSDPartitionSpec(const PartitionSpecWithSharedSD& val);

  void __set_partitionList(const PartitionListComposingSpec& val);

  void __set_catName(const std::string& val);

  void __set_writeId(const int64_t val);

  void __set_isStatsCompliant(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionSpec &a, PartitionSpec &b);

std::ostream& operator<<(std::ostream& out, const PartitionSpec& obj);

typedef struct _AggrStats__isset {
  _AggrStats__isset() : isStatsCompliant(false) {}
  bool isStatsCompliant :1;
} _AggrStats__isset;

class AggrStats {
 public:

  AggrStats(const AggrStats&);
  AggrStats(AggrStats&&);
  AggrStats& operator=(const AggrStats&);
  AggrStats& operator=(AggrStats&&);
  AggrStats() : partsFound(0), isStatsCompliant(0) {
  }

  virtual ~AggrStats() throw();
  std::vector<ColumnStatisticsObj>  colStats;
  int64_t partsFound;
  bool isStatsCompliant;

  _AggrStats__isset __isset;

  void __set_colStats(const std::vector<ColumnStatisticsObj> & val);

  void __set_partsFound(const int64_t val);

  void __set_isStatsCompliant(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AggrStats &a, AggrStats &b);

std::ostream& operator<<(std::ostream& out, const AggrStats& obj);

typedef struct _SetPartitionsStatsRequest__isset {
  _SetPartitionsStatsRequest__isset() : needMerge(false), writeId(true), validWriteIdList(false), engine(false) {}
  bool needMerge :1;
  bool writeId :1;
  bool validWriteIdList :1;
  bool engine :1;
} _SetPartitionsStatsRequest__isset;

class SetPartitionsStatsRequest {
 public:

  SetPartitionsStatsRequest(const SetPartitionsStatsRequest&);
  SetPartitionsStatsRequest(SetPartitionsStatsRequest&&);
  SetPartitionsStatsRequest& operator=(const SetPartitionsStatsRequest&);
  SetPartitionsStatsRequest& operator=(SetPartitionsStatsRequest&&);
  SetPartitionsStatsRequest() : needMerge(0), writeId(-1LL), validWriteIdList(), engine() {
  }

  virtual ~SetPartitionsStatsRequest() throw();
  std::vector<ColumnStatistics>  colStats;
  bool needMerge;
  int64_t writeId;
  std::string validWriteIdList;
  std::string engine;

  _SetPartitionsStatsRequest__isset __isset;

  void __set_colStats(const std::vector<ColumnStatistics> & val);

  void __set_needMerge(const bool val);

  void __set_writeId(const int64_t val);

  void __set_validWriteIdList(const std::string& val);

  void __set_engine(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SetPartitionsStatsRequest &a, SetPartitionsStatsRequest &b);

std::ostream& operator<<(std::ostream& out, const SetPartitionsStatsRequest& obj);


class SetPartitionsStatsResponse {
 public:

  SetPartitionsStatsResponse(const SetPartitionsStatsResponse&);
  SetPartitionsStatsResponse(SetPartitionsStatsResponse&&);
  SetPartitionsStatsResponse& operator=(const SetPartitionsStatsResponse&);
  SetPartitionsStatsResponse& operator=(SetPartitionsStatsResponse&&);
  SetPartitionsStatsResponse() : result(0) {
  }

  virtual ~SetPartitionsStatsResponse() throw();
  bool result;

  void __set_result(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SetPartitionsStatsResponse &a, SetPartitionsStatsResponse &b);

std::ostream& operator<<(std::ostream& out, const SetPartitionsStatsResponse& obj);

typedef struct _Schema__isset {
  _Schema__isset() : fieldSchemas(false), properties(false) {}
  bool fieldSchemas :1;
  bool properties :1;
} _Schema__isset;

class Schema {
 public:

  Schema(const Schema&);
  Schema(Schema&&);
  Schema& operator=(const Schema&);
  Schema& operator=(Schema&&);
  Schema() {
  }

  virtual ~Schema() throw();
  std::vector<FieldSchema>  fieldSchemas;
  std::map<std::string, std::string>  properties;

  _Schema__isset __isset;

  void __set_fieldSchemas(const std::vector<FieldSchema> & val);

  void __set_properties(const std::map<std::string, std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Schema &a, Schema &b);

std::ostream& operator<<(std::ostream& out, const Schema& obj);

typedef struct _EnvironmentContext__isset {
  _EnvironmentContext__isset() : properties(false) {}
  bool properties :1;
} _EnvironmentContext__isset;

class EnvironmentContext {
 public:

  EnvironmentContext(const EnvironmentContext&);
  EnvironmentContext(EnvironmentContext&&);
  EnvironmentContext& operator=(const EnvironmentContext&);
  EnvironmentContext& operator=(EnvironmentContext&&);
  EnvironmentContext() {
  }

  virtual ~EnvironmentContext() throw();
  std::map<std::string, std::string>  properties;

  _EnvironmentContext__isset __isset;

  void __set_properties(const std::map<std::string, std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EnvironmentContext &a, EnvironmentContext &b);

std::ostream& operator<<(std::ostream& out, const EnvironmentContext& obj);

typedef struct _PrimaryKeysRequest__isset {
  _PrimaryKeysRequest__isset() : catName(false) {}
  bool catName :1;
} _PrimaryKeysRequest__isset;

class PrimaryKeysRequest {
 public:

  PrimaryKeysRequest(const PrimaryKeysRequest&);
  PrimaryKeysRequest(PrimaryKeysRequest&&);
  PrimaryKeysRequest& operator=(const PrimaryKeysRequest&);
  PrimaryKeysRequest& operator=(PrimaryKeysRequest&&);
  PrimaryKeysRequest() : db_name(), tbl_name(), catName() {
  }

  virtual ~PrimaryKeysRequest() throw();
  std::string db_name;
  std::string tbl_name;
  std::string catName;

  _PrimaryKeysRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_tbl_name(const std::string& val);

  void __set_catName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PrimaryKeysRequest &a, PrimaryKeysRequest &b);

std::ostream& operator<<(std::ostream& out, const PrimaryKeysRequest& obj);


class PrimaryKeysResponse {
 public:

  PrimaryKeysResponse(const PrimaryKeysResponse&);
  PrimaryKeysResponse(PrimaryKeysResponse&&);
  PrimaryKeysResponse& operator=(const PrimaryKeysResponse&);
  PrimaryKeysResponse& operator=(PrimaryKeysResponse&&);
  PrimaryKeysResponse() {
  }

  virtual ~PrimaryKeysResponse() throw();
  std::vector<SQLPrimaryKey>  primaryKeys;

  void __set_primaryKeys(const std::vector<SQLPrimaryKey> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PrimaryKeysResponse &a, PrimaryKeysResponse &b);

std::ostream& operator<<(std::ostream& out, const PrimaryKeysResponse& obj);

typedef struct _ForeignKeysRequest__isset {
  _ForeignKeysRequest__isset() : parent_db_name(false), parent_tbl_name(false), foreign_db_name(false), foreign_tbl_name(false), catName(false) {}
  bool parent_db_name :1;
  bool parent_tbl_name :1;
  bool foreign_db_name :1;
  bool foreign_tbl_name :1;
  bool catName :1;
} _ForeignKeysRequest__isset;

class ForeignKeysRequest {
 public:

  ForeignKeysRequest(const ForeignKeysRequest&);
  ForeignKeysRequest(ForeignKeysRequest&&);
  ForeignKeysRequest& operator=(const ForeignKeysRequest&);
  ForeignKeysRequest& operator=(ForeignKeysRequest&&);
  ForeignKeysRequest() : parent_db_name(), parent_tbl_name(), foreign_db_name(), foreign_tbl_name(), catName() {
  }

  virtual ~ForeignKeysRequest() throw();
  std::string parent_db_name;
  std::string parent_tbl_name;
  std::string foreign_db_name;
  std::string foreign_tbl_name;
  std::string catName;

  _ForeignKeysRequest__isset __isset;

  void __set_parent_db_name(const std::string& val);

  void __set_parent_tbl_name(const std::string& val);

  void __set_foreign_db_name(const std::string& val);

  void __set_foreign_tbl_name(const std::string& val);

  void __set_catName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ForeignKeysRequest &a, ForeignKeysRequest &b);

std::ostream& operator<<(std::ostream& out, const ForeignKeysRequest& obj);


class ForeignKeysResponse {
 public:

  ForeignKeysResponse(const ForeignKeysResponse&);
  ForeignKeysResponse(ForeignKeysResponse&&);
  ForeignKeysResponse& operator=(const ForeignKeysResponse&);
  ForeignKeysResponse& operator=(ForeignKeysResponse&&);
  ForeignKeysResponse() {
  }

  virtual ~ForeignKeysResponse() throw();
  std::vector<SQLForeignKey>  foreignKeys;

  void __set_foreignKeys(const std::vector<SQLForeignKey> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ForeignKeysResponse &a, ForeignKeysResponse &b);

std::ostream& operator<<(std::ostream& out, const ForeignKeysResponse& obj);


class UniqueConstraintsRequest {
 public:

  UniqueConstraintsRequest(const UniqueConstraintsRequest&);
  UniqueConstraintsRequest(UniqueConstraintsRequest&&);
  UniqueConstraintsRequest& operator=(const UniqueConstraintsRequest&);
  UniqueConstraintsRequest& operator=(UniqueConstraintsRequest&&);
  UniqueConstraintsRequest() : catName(), db_name(), tbl_name() {
  }

  virtual ~UniqueConstraintsRequest() throw();
  std::string catName;
  std::string db_name;
  std::string tbl_name;

  void __set_catName(const std::string& val);

  void __set_db_name(const std::string& val);

  void __set_tbl_name(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UniqueConstraintsRequest &a, UniqueConstraintsRequest &b);

std::ostream& operator<<(std::ostream& out, const UniqueConstraintsRequest& obj);


class UniqueConstraintsResponse {
 public:

  UniqueConstraintsResponse(const UniqueConstraintsResponse&);
  UniqueConstraintsResponse(UniqueConstraintsResponse&&);
  UniqueConstraintsResponse& operator=(const UniqueConstraintsResponse&);
  UniqueConstraintsResponse& operator=(UniqueConstraintsResponse&&);
  UniqueConstraintsResponse() {
  }

  virtual ~UniqueConstraintsResponse() throw();
  std::vector<SQLUniqueConstraint>  uniqueConstraints;

  void __set_uniqueConstraints(const std::vector<SQLUniqueConstraint> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UniqueConstraintsResponse &a, UniqueConstraintsResponse &b);

std::ostream& operator<<(std::ostream& out, const UniqueConstraintsResponse& obj);


class NotNullConstraintsRequest {
 public:

  NotNullConstraintsRequest(const NotNullConstraintsRequest&);
  NotNullConstraintsRequest(NotNullConstraintsRequest&&);
  NotNullConstraintsRequest& operator=(const NotNullConstraintsRequest&);
  NotNullConstraintsRequest& operator=(NotNullConstraintsRequest&&);
  NotNullConstraintsRequest() : catName(), db_name(), tbl_name() {
  }

  virtual ~NotNullConstraintsRequest() throw();
  std::string catName;
  std::string db_name;
  std::string tbl_name;

  void __set_catName(const std::string& val);

  void __set_db_name(const std::string& val);

  void __set_tbl_name(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotNullConstraintsRequest &a, NotNullConstraintsRequest &b);

std::ostream& operator<<(std::ostream& out, const NotNullConstraintsRequest& obj);


class NotNullConstraintsResponse {
 public:

  NotNullConstraintsResponse(const NotNullConstraintsResponse&);
  NotNullConstraintsResponse(NotNullConstraintsResponse&&);
  NotNullConstraintsResponse& operator=(const NotNullConstraintsResponse&);
  NotNullConstraintsResponse& operator=(NotNullConstraintsResponse&&);
  NotNullConstraintsResponse() {
  }

  virtual ~NotNullConstraintsResponse() throw();
  std::vector<SQLNotNullConstraint>  notNullConstraints;

  void __set_notNullConstraints(const std::vector<SQLNotNullConstraint> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotNullConstraintsResponse &a, NotNullConstraintsResponse &b);

std::ostream& operator<<(std::ostream& out, const NotNullConstraintsResponse& obj);


class DefaultConstraintsRequest {
 public:

  DefaultConstraintsRequest(const DefaultConstraintsRequest&);
  DefaultConstraintsRequest(DefaultConstraintsRequest&&);
  DefaultConstraintsRequest& operator=(const DefaultConstraintsRequest&);
  DefaultConstraintsRequest& operator=(DefaultConstraintsRequest&&);
  DefaultConstraintsRequest() : catName(), db_name(), tbl_name() {
  }

  virtual ~DefaultConstraintsRequest() throw();
  std::string catName;
  std::string db_name;
  std::string tbl_name;

  void __set_catName(const std::string& val);

  void __set_db_name(const std::string& val);

  void __set_tbl_name(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DefaultConstraintsRequest &a, DefaultConstraintsRequest &b);

std::ostream& operator<<(std::ostream& out, const DefaultConstraintsRequest& obj);


class DefaultConstraintsResponse {
 public:

  DefaultConstraintsResponse(const DefaultConstraintsResponse&);
  DefaultConstraintsResponse(DefaultConstraintsResponse&&);
  DefaultConstraintsResponse& operator=(const DefaultConstraintsResponse&);
  DefaultConstraintsResponse& operator=(DefaultConstraintsResponse&&);
  DefaultConstraintsResponse() {
  }

  virtual ~DefaultConstraintsResponse() throw();
  std::vector<SQLDefaultConstraint>  defaultConstraints;

  void __set_defaultConstraints(const std::vector<SQLDefaultConstraint> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DefaultConstraintsResponse &a, DefaultConstraintsResponse &b);

std::ostream& operator<<(std::ostream& out, const DefaultConstraintsResponse& obj);


class CheckConstraintsRequest {
 public:

  CheckConstraintsRequest(const CheckConstraintsRequest&);
  CheckConstraintsRequest(CheckConstraintsRequest&&);
  CheckConstraintsRequest& operator=(const CheckConstraintsRequest&);
  CheckConstraintsRequest& operator=(CheckConstraintsRequest&&);
  CheckConstraintsRequest() : catName(), db_name(), tbl_name() {
  }

  virtual ~CheckConstraintsRequest() throw();
  std::string catName;
  std::string db_name;
  std::string tbl_name;

  void __set_catName(const std::string& val);

  void __set_db_name(const std::string& val);

  void __set_tbl_name(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CheckConstraintsRequest &a, CheckConstraintsRequest &b);

std::ostream& operator<<(std::ostream& out, const CheckConstraintsRequest& obj);


class CheckConstraintsResponse {
 public:

  CheckConstraintsResponse(const CheckConstraintsResponse&);
  CheckConstraintsResponse(CheckConstraintsResponse&&);
  CheckConstraintsResponse& operator=(const CheckConstraintsResponse&);
  CheckConstraintsResponse& operator=(CheckConstraintsResponse&&);
  CheckConstraintsResponse() {
  }

  virtual ~CheckConstraintsResponse() throw();
  std::vector<SQLCheckConstraint>  checkConstraints;

  void __set_checkConstraints(const std::vector<SQLCheckConstraint> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CheckConstraintsResponse &a, CheckConstraintsResponse &b);

std::ostream& operator<<(std::ostream& out, const CheckConstraintsResponse& obj);

typedef struct _DropConstraintRequest__isset {
  _DropConstraintRequest__isset() : catName(false) {}
  bool catName :1;
} _DropConstraintRequest__isset;

class DropConstraintRequest {
 public:

  DropConstraintRequest(const DropConstraintRequest&);
  DropConstraintRequest(DropConstraintRequest&&);
  DropConstraintRequest& operator=(const DropConstraintRequest&);
  DropConstraintRequest& operator=(DropConstraintRequest&&);
  DropConstraintRequest() : dbname(), tablename(), constraintname(), catName() {
  }

  virtual ~DropConstraintRequest() throw();
  std::string dbname;
  std::string tablename;
  std::string constraintname;
  std::string catName;

  _DropConstraintRequest__isset __isset;

  void __set_dbname(const std::string& val);

  void __set_tablename(const std::string& val);

  void __set_constraintname(const std::string& val);

  void __set_catName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropConstraintRequest &a, DropConstraintRequest &b);

std::ostream& operator<<(std::ostream& out, const DropConstraintRequest& obj);


class AddPrimaryKeyRequest {
 public:

  AddPrimaryKeyRequest(const AddPrimaryKeyRequest&);
  AddPrimaryKeyRequest(AddPrimaryKeyRequest&&);
  AddPrimaryKeyRequest& operator=(const AddPrimaryKeyRequest&);
  AddPrimaryKeyRequest& operator=(AddPrimaryKeyRequest&&);
  AddPrimaryKeyRequest() {
  }

  virtual ~AddPrimaryKeyRequest() throw();
  std::vector<SQLPrimaryKey>  primaryKeyCols;

  void __set_primaryKeyCols(const std::vector<SQLPrimaryKey> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddPrimaryKeyRequest &a, AddPrimaryKeyRequest &b);

std::ostream& operator<<(std::ostream& out, const AddPrimaryKeyRequest& obj);


class AddForeignKeyRequest {
 public:

  AddForeignKeyRequest(const AddForeignKeyRequest&);
  AddForeignKeyRequest(AddForeignKeyRequest&&);
  AddForeignKeyRequest& operator=(const AddForeignKeyRequest&);
  AddForeignKeyRequest& operator=(AddForeignKeyRequest&&);
  AddForeignKeyRequest() {
  }

  virtual ~AddForeignKeyRequest() throw();
  std::vector<SQLForeignKey>  foreignKeyCols;

  void __set_foreignKeyCols(const std::vector<SQLForeignKey> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddForeignKeyRequest &a, AddForeignKeyRequest &b);

std::ostream& operator<<(std::ostream& out, const AddForeignKeyRequest& obj);


class AddUniqueConstraintRequest {
 public:

  AddUniqueConstraintRequest(const AddUniqueConstraintRequest&);
  AddUniqueConstraintRequest(AddUniqueConstraintRequest&&);
  AddUniqueConstraintRequest& operator=(const AddUniqueConstraintRequest&);
  AddUniqueConstraintRequest& operator=(AddUniqueConstraintRequest&&);
  AddUniqueConstraintRequest() {
  }

  virtual ~AddUniqueConstraintRequest() throw();
  std::vector<SQLUniqueConstraint>  uniqueConstraintCols;

  void __set_uniqueConstraintCols(const std::vector<SQLUniqueConstraint> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddUniqueConstraintRequest &a, AddUniqueConstraintRequest &b);

std::ostream& operator<<(std::ostream& out, const AddUniqueConstraintRequest& obj);


class AddNotNullConstraintRequest {
 public:

  AddNotNullConstraintRequest(const AddNotNullConstraintRequest&);
  AddNotNullConstraintRequest(AddNotNullConstraintRequest&&);
  AddNotNullConstraintRequest& operator=(const AddNotNullConstraintRequest&);
  AddNotNullConstraintRequest& operator=(AddNotNullConstraintRequest&&);
  AddNotNullConstraintRequest() {
  }

  virtual ~AddNotNullConstraintRequest() throw();
  std::vector<SQLNotNullConstraint>  notNullConstraintCols;

  void __set_notNullConstraintCols(const std::vector<SQLNotNullConstraint> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddNotNullConstraintRequest &a, AddNotNullConstraintRequest &b);

std::ostream& operator<<(std::ostream& out, const AddNotNullConstraintRequest& obj);


class AddDefaultConstraintRequest {
 public:

  AddDefaultConstraintRequest(const AddDefaultConstraintRequest&);
  AddDefaultConstraintRequest(AddDefaultConstraintRequest&&);
  AddDefaultConstraintRequest& operator=(const AddDefaultConstraintRequest&);
  AddDefaultConstraintRequest& operator=(AddDefaultConstraintRequest&&);
  AddDefaultConstraintRequest() {
  }

  virtual ~AddDefaultConstraintRequest() throw();
  std::vector<SQLDefaultConstraint>  defaultConstraintCols;

  void __set_defaultConstraintCols(const std::vector<SQLDefaultConstraint> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddDefaultConstraintRequest &a, AddDefaultConstraintRequest &b);

std::ostream& operator<<(std::ostream& out, const AddDefaultConstraintRequest& obj);


class AddCheckConstraintRequest {
 public:

  AddCheckConstraintRequest(const AddCheckConstraintRequest&);
  AddCheckConstraintRequest(AddCheckConstraintRequest&&);
  AddCheckConstraintRequest& operator=(const AddCheckConstraintRequest&);
  AddCheckConstraintRequest& operator=(AddCheckConstraintRequest&&);
  AddCheckConstraintRequest() {
  }

  virtual ~AddCheckConstraintRequest() throw();
  std::vector<SQLCheckConstraint>  checkConstraintCols;

  void __set_checkConstraintCols(const std::vector<SQLCheckConstraint> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddCheckConstraintRequest &a, AddCheckConstraintRequest &b);

std::ostream& operator<<(std::ostream& out, const AddCheckConstraintRequest& obj);


class PartitionsByExprResult {
 public:

  PartitionsByExprResult(const PartitionsByExprResult&);
  PartitionsByExprResult(PartitionsByExprResult&&);
  PartitionsByExprResult& operator=(const PartitionsByExprResult&);
  PartitionsByExprResult& operator=(PartitionsByExprResult&&);
  PartitionsByExprResult() : hasUnknownPartitions(0) {
  }

  virtual ~PartitionsByExprResult() throw();
  std::vector<Partition>  partitions;
  bool hasUnknownPartitions;

  void __set_partitions(const std::vector<Partition> & val);

  void __set_hasUnknownPartitions(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionsByExprResult &a, PartitionsByExprResult &b);

std::ostream& operator<<(std::ostream& out, const PartitionsByExprResult& obj);

typedef struct _PartitionsByExprRequest__isset {
  _PartitionsByExprRequest__isset() : defaultPartitionName(false), maxParts(true), catName(false), order(false), validWriteIdList(false), id(true) {}
  bool defaultPartitionName :1;
  bool maxParts :1;
  bool catName :1;
  bool order :1;
  bool validWriteIdList :1;
  bool id :1;
} _PartitionsByExprRequest__isset;

class PartitionsByExprRequest {
 public:

  PartitionsByExprRequest(const PartitionsByExprRequest&);
  PartitionsByExprRequest(PartitionsByExprRequest&&);
  PartitionsByExprRequest& operator=(const PartitionsByExprRequest&);
  PartitionsByExprRequest& operator=(PartitionsByExprRequest&&);
  PartitionsByExprRequest() : dbName(), tblName(), expr(), defaultPartitionName(), maxParts(-1), catName(), order(), validWriteIdList(), id(-1LL) {
  }

  virtual ~PartitionsByExprRequest() throw();
  std::string dbName;
  std::string tblName;
  std::string expr;
  std::string defaultPartitionName;
  int16_t maxParts;
  std::string catName;
  std::string order;
  std::string validWriteIdList;
  int64_t id;

  _PartitionsByExprRequest__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_expr(const std::string& val);

  void __set_defaultPartitionName(const std::string& val);

  void __set_maxParts(const int16_t val);

  void __set_catName(const std::string& val);

  void __set_order(const std::string& val);

  void __set_validWriteIdList(const std::string& val);

  void __set_id(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionsByExprRequest &a, PartitionsByExprRequest &b);

std::ostream& operator<<(std::ostream& out, const PartitionsByExprRequest& obj);

typedef struct _TableStatsResult__isset {
  _TableStatsResult__isset() : isStatsCompliant(false) {}
  bool isStatsCompliant :1;
} _TableStatsResult__isset;

class TableStatsResult {
 public:

  TableStatsResult(const TableStatsResult&);
  TableStatsResult(TableStatsResult&&);
  TableStatsResult& operator=(const TableStatsResult&);
  TableStatsResult& operator=(TableStatsResult&&);
  TableStatsResult() : isStatsCompliant(0) {
  }

  virtual ~TableStatsResult() throw();
  std::vector<ColumnStatisticsObj>  tableStats;
  bool isStatsCompliant;

  _TableStatsResult__isset __isset;

  void __set_tableStats(const std::vector<ColumnStatisticsObj> & val);

  void __set_isStatsCompliant(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TableStatsResult &a, TableStatsResult &b);

std::ostream& operator<<(std::ostream& out, const TableStatsResult& obj);

typedef struct _PartitionsStatsResult__isset {
  _PartitionsStatsResult__isset() : isStatsCompliant(false) {}
  bool isStatsCompliant :1;
} _PartitionsStatsResult__isset;

class PartitionsStatsResult {
 public:

  PartitionsStatsResult(const PartitionsStatsResult&);
  PartitionsStatsResult(PartitionsStatsResult&&);
  PartitionsStatsResult& operator=(const PartitionsStatsResult&);
  PartitionsStatsResult& operator=(PartitionsStatsResult&&);
  PartitionsStatsResult() : isStatsCompliant(0) {
  }

  virtual ~PartitionsStatsResult() throw();
  std::map<std::string, std::vector<ColumnStatisticsObj> >  partStats;
  bool isStatsCompliant;

  _PartitionsStatsResult__isset __isset;

  void __set_partStats(const std::map<std::string, std::vector<ColumnStatisticsObj> > & val);

  void __set_isStatsCompliant(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionsStatsResult &a, PartitionsStatsResult &b);

std::ostream& operator<<(std::ostream& out, const PartitionsStatsResult& obj);

typedef struct _TableStatsRequest__isset {
  _TableStatsRequest__isset() : catName(false), validWriteIdList(false), engine(false), id(true) {}
  bool catName :1;
  bool validWriteIdList :1;
  bool engine :1;
  bool id :1;
} _TableStatsRequest__isset;

class TableStatsRequest {
 public:

  TableStatsRequest(const TableStatsRequest&);
  TableStatsRequest(TableStatsRequest&&);
  TableStatsRequest& operator=(const TableStatsRequest&);
  TableStatsRequest& operator=(TableStatsRequest&&);
  TableStatsRequest() : dbName(), tblName(), catName(), validWriteIdList(), engine(), id(-1LL) {
  }

  virtual ~TableStatsRequest() throw();
  std::string dbName;
  std::string tblName;
  std::vector<std::string>  colNames;
  std::string catName;
  std::string validWriteIdList;
  std::string engine;
  int64_t id;

  _TableStatsRequest__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_colNames(const std::vector<std::string> & val);

  void __set_catName(const std::string& val);

  void __set_validWriteIdList(const std::string& val);

  void __set_engine(const std::string& val);

  void __set_id(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TableStatsRequest &a, TableStatsRequest &b);

std::ostream& operator<<(std::ostream& out, const TableStatsRequest& obj);

typedef struct _PartitionsStatsRequest__isset {
  _PartitionsStatsRequest__isset() : catName(false), validWriteIdList(false), engine(false) {}
  bool catName :1;
  bool validWriteIdList :1;
  bool engine :1;
} _PartitionsStatsRequest__isset;

class PartitionsStatsRequest {
 public:

  PartitionsStatsRequest(const PartitionsStatsRequest&);
  PartitionsStatsRequest(PartitionsStatsRequest&&);
  PartitionsStatsRequest& operator=(const PartitionsStatsRequest&);
  PartitionsStatsRequest& operator=(PartitionsStatsRequest&&);
  PartitionsStatsRequest() : dbName(), tblName(), catName(), validWriteIdList(), engine() {
  }

  virtual ~PartitionsStatsRequest() throw();
  std::string dbName;
  std::string tblName;
  std::vector<std::string>  colNames;
  std::vector<std::string>  partNames;
  std::string catName;
  std::string validWriteIdList;
  std::string engine;

  _PartitionsStatsRequest__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_colNames(const std::vector<std::string> & val);

  void __set_partNames(const std::vector<std::string> & val);

  void __set_catName(const std::string& val);

  void __set_validWriteIdList(const std::string& val);

  void __set_engine(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionsStatsRequest &a, PartitionsStatsRequest &b);

std::ostream& operator<<(std::ostream& out, const PartitionsStatsRequest& obj);

typedef struct _AddPartitionsResult__isset {
  _AddPartitionsResult__isset() : partitions(false), isStatsCompliant(false) {}
  bool partitions :1;
  bool isStatsCompliant :1;
} _AddPartitionsResult__isset;

class AddPartitionsResult {
 public:

  AddPartitionsResult(const AddPartitionsResult&);
  AddPartitionsResult(AddPartitionsResult&&);
  AddPartitionsResult& operator=(const AddPartitionsResult&);
  AddPartitionsResult& operator=(AddPartitionsResult&&);
  AddPartitionsResult() : isStatsCompliant(0) {
  }

  virtual ~AddPartitionsResult() throw();
  std::vector<Partition>  partitions;
  bool isStatsCompliant;

  _AddPartitionsResult__isset __isset;

  void __set_partitions(const std::vector<Partition> & val);

  void __set_isStatsCompliant(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddPartitionsResult &a, AddPartitionsResult &b);

std::ostream& operator<<(std::ostream& out, const AddPartitionsResult& obj);

typedef struct _AddPartitionsRequest__isset {
  _AddPartitionsRequest__isset() : needResult(true), catName(false), validWriteIdList(false) {}
  bool needResult :1;
  bool catName :1;
  bool validWriteIdList :1;
} _AddPartitionsRequest__isset;

class AddPartitionsRequest {
 public:

  AddPartitionsRequest(const AddPartitionsRequest&);
  AddPartitionsRequest(AddPartitionsRequest&&);
  AddPartitionsRequest& operator=(const AddPartitionsRequest&);
  AddPartitionsRequest& operator=(AddPartitionsRequest&&);
  AddPartitionsRequest() : dbName(), tblName(), ifNotExists(0), needResult(true), catName(), validWriteIdList() {
  }

  virtual ~AddPartitionsRequest() throw();
  std::string dbName;
  std::string tblName;
  std::vector<Partition>  parts;
  bool ifNotExists;
  bool needResult;
  std::string catName;
  std::string validWriteIdList;

  _AddPartitionsRequest__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_parts(const std::vector<Partition> & val);

  void __set_ifNotExists(const bool val);

  void __set_needResult(const bool val);

  void __set_catName(const std::string& val);

  void __set_validWriteIdList(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddPartitionsRequest &a, AddPartitionsRequest &b);

std::ostream& operator<<(std::ostream& out, const AddPartitionsRequest& obj);

typedef struct _DropPartitionsResult__isset {
  _DropPartitionsResult__isset() : partitions(false) {}
  bool partitions :1;
} _DropPartitionsResult__isset;

class DropPartitionsResult {
 public:

  DropPartitionsResult(const DropPartitionsResult&);
  DropPartitionsResult(DropPartitionsResult&&);
  DropPartitionsResult& operator=(const DropPartitionsResult&);
  DropPartitionsResult& operator=(DropPartitionsResult&&);
  DropPartitionsResult() {
  }

  virtual ~DropPartitionsResult() throw();
  std::vector<Partition>  partitions;

  _DropPartitionsResult__isset __isset;

  void __set_partitions(const std::vector<Partition> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropPartitionsResult &a, DropPartitionsResult &b);

std::ostream& operator<<(std::ostream& out, const DropPartitionsResult& obj);

typedef struct _DropPartitionsExpr__isset {
  _DropPartitionsExpr__isset() : partArchiveLevel(false) {}
  bool partArchiveLevel :1;
} _DropPartitionsExpr__isset;

class DropPartitionsExpr {
 public:

  DropPartitionsExpr(const DropPartitionsExpr&);
  DropPartitionsExpr(DropPartitionsExpr&&);
  DropPartitionsExpr& operator=(const DropPartitionsExpr&);
  DropPartitionsExpr& operator=(DropPartitionsExpr&&);
  DropPartitionsExpr() : expr(), partArchiveLevel(0) {
  }

  virtual ~DropPartitionsExpr() throw();
  std::string expr;
  int32_t partArchiveLevel;

  _DropPartitionsExpr__isset __isset;

  void __set_expr(const std::string& val);

  void __set_partArchiveLevel(const int32_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropPartitionsExpr &a, DropPartitionsExpr &b);

std::ostream& operator<<(std::ostream& out, const DropPartitionsExpr& obj);

typedef struct _RequestPartsSpec__isset {
  _RequestPartsSpec__isset() : names(false), exprs(false) {}
  bool names :1;
  bool exprs :1;
} _RequestPartsSpec__isset;

class RequestPartsSpec {
 public:

  RequestPartsSpec(const RequestPartsSpec&);
  RequestPartsSpec(RequestPartsSpec&&);
  RequestPartsSpec& operator=(const RequestPartsSpec&);
  RequestPartsSpec& operator=(RequestPartsSpec&&);
  RequestPartsSpec() {
  }

  virtual ~RequestPartsSpec() throw();
  std::vector<std::string>  names;
  std::vector<DropPartitionsExpr>  exprs;

  _RequestPartsSpec__isset __isset;

  void __set_names(const std::vector<std::string> & val);

  void __set_exprs(const std::vector<DropPartitionsExpr> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RequestPartsSpec &a, RequestPartsSpec &b);

std::ostream& operator<<(std::ostream& out, const RequestPartsSpec& obj);

typedef struct _DropPartitionsRequest__isset {
  _DropPartitionsRequest__isset() : deleteData(false), ifExists(true), ignoreProtection(false), environmentContext(false), needResult(true), catName(false) {}
  bool deleteData :1;
  bool ifExists :1;
  bool ignoreProtection :1;
  bool environmentContext :1;
  bool needResult :1;
  bool catName :1;
} _DropPartitionsRequest__isset;

class DropPartitionsRequest {
 public:

  DropPartitionsRequest(const DropPartitionsRequest&);
  DropPartitionsRequest(DropPartitionsRequest&&);
  DropPartitionsRequest& operator=(const DropPartitionsRequest&);
  DropPartitionsRequest& operator=(DropPartitionsRequest&&);
  DropPartitionsRequest() : dbName(), tblName(), deleteData(0), ifExists(true), ignoreProtection(0), needResult(true), catName() {
  }

  virtual ~DropPartitionsRequest() throw();
  std::string dbName;
  std::string tblName;
  RequestPartsSpec parts;
  bool deleteData;
  bool ifExists;
  bool ignoreProtection;
  EnvironmentContext environmentContext;
  bool needResult;
  std::string catName;

  _DropPartitionsRequest__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_parts(const RequestPartsSpec& val);

  void __set_deleteData(const bool val);

  void __set_ifExists(const bool val);

  void __set_ignoreProtection(const bool val);

  void __set_environmentContext(const EnvironmentContext& val);

  void __set_needResult(const bool val);

  void __set_catName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropPartitionsRequest &a, DropPartitionsRequest &b);

std::ostream& operator<<(std::ostream& out, const DropPartitionsRequest& obj);

typedef struct _PartitionValuesRequest__isset {
  _PartitionValuesRequest__isset() : applyDistinct(true), filter(false), partitionOrder(false), ascending(true), maxParts(true), catName(false), validWriteIdList(false) {}
  bool applyDistinct :1;
  bool filter :1;
  bool partitionOrder :1;
  bool ascending :1;
  bool maxParts :1;
  bool catName :1;
  bool validWriteIdList :1;
} _PartitionValuesRequest__isset;

class PartitionValuesRequest {
 public:

  PartitionValuesRequest(const PartitionValuesRequest&);
  PartitionValuesRequest(PartitionValuesRequest&&);
  PartitionValuesRequest& operator=(const PartitionValuesRequest&);
  PartitionValuesRequest& operator=(PartitionValuesRequest&&);
  PartitionValuesRequest() : dbName(), tblName(), applyDistinct(true), filter(), ascending(true), maxParts(-1LL), catName(), validWriteIdList() {
  }

  virtual ~PartitionValuesRequest() throw();
  std::string dbName;
  std::string tblName;
  std::vector<FieldSchema>  partitionKeys;
  bool applyDistinct;
  std::string filter;
  std::vector<FieldSchema>  partitionOrder;
  bool ascending;
  int64_t maxParts;
  std::string catName;
  std::string validWriteIdList;

  _PartitionValuesRequest__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_partitionKeys(const std::vector<FieldSchema> & val);

  void __set_applyDistinct(const bool val);

  void __set_filter(const std::string& val);

  void __set_partitionOrder(const std::vector<FieldSchema> & val);

  void __set_ascending(const bool val);

  void __set_maxParts(const int64_t val);

  void __set_catName(const std::string& val);

  void __set_validWriteIdList(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionValuesRequest &a, PartitionValuesRequest &b);

std::ostream& operator<<(std::ostream& out, const PartitionValuesRequest& obj);


class PartitionValuesRow {
 public:

  PartitionValuesRow(const PartitionValuesRow&);
  PartitionValuesRow(PartitionValuesRow&&);
  PartitionValuesRow& operator=(const PartitionValuesRow&);
  PartitionValuesRow& operator=(PartitionValuesRow&&);
  PartitionValuesRow() {
  }

  virtual ~PartitionValuesRow() throw();
  std::vector<std::string>  row;

  void __set_row(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionValuesRow &a, PartitionValuesRow &b);

std::ostream& operator<<(std::ostream& out, const PartitionValuesRow& obj);


class PartitionValuesResponse {
 public:

  PartitionValuesResponse(const PartitionValuesResponse&);
  PartitionValuesResponse(PartitionValuesResponse&&);
  PartitionValuesResponse& operator=(const PartitionValuesResponse&);
  PartitionValuesResponse& operator=(PartitionValuesResponse&&);
  PartitionValuesResponse() {
  }

  virtual ~PartitionValuesResponse() throw();
  std::vector<PartitionValuesRow>  partitionValues;

  void __set_partitionValues(const std::vector<PartitionValuesRow> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionValuesResponse &a, PartitionValuesResponse &b);

std::ostream& operator<<(std::ostream& out, const PartitionValuesResponse& obj);

typedef struct _GetPartitionsByNamesRequest__isset {
  _GetPartitionsByNamesRequest__isset() : names(false), get_col_stats(false), processorCapabilities(false), processorIdentifier(false), engine(false), validWriteIdList(false), getFileMetadata(false), id(true) {}
  bool names :1;
  bool get_col_stats :1;
  bool processorCapabilities :1;
  bool processorIdentifier :1;
  bool engine :1;
  bool validWriteIdList :1;
  bool getFileMetadata :1;
  bool id :1;
} _GetPartitionsByNamesRequest__isset;

class GetPartitionsByNamesRequest {
 public:

  GetPartitionsByNamesRequest(const GetPartitionsByNamesRequest&);
  GetPartitionsByNamesRequest(GetPartitionsByNamesRequest&&);
  GetPartitionsByNamesRequest& operator=(const GetPartitionsByNamesRequest&);
  GetPartitionsByNamesRequest& operator=(GetPartitionsByNamesRequest&&);
  GetPartitionsByNamesRequest() : db_name(), tbl_name(), get_col_stats(0), processorIdentifier(), engine(), validWriteIdList(), getFileMetadata(0), id(-1LL) {
  }

  virtual ~GetPartitionsByNamesRequest() throw();
  std::string db_name;
  std::string tbl_name;
  std::vector<std::string>  names;
  bool get_col_stats;
  std::vector<std::string>  processorCapabilities;
  std::string processorIdentifier;
  std::string engine;
  std::string validWriteIdList;
  bool getFileMetadata;
  int64_t id;

  _GetPartitionsByNamesRequest__isset __isset;

  void __set_db_name(const std::string& val);

  void __set_tbl_name(const std::string& val);

  void __set_names(const std::vector<std::string> & val);

  void __set_get_col_stats(const bool val);

  void __set_processorCapabilities(const std::vector<std::string> & val);

  void __set_processorIdentifier(const std::string& val);

  void __set_engine(const std::string& val);

  void __set_validWriteIdList(const std::string& val);

  void __set_getFileMetadata(const bool val);

  void __set_id(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPartitionsByNamesRequest &a, GetPartitionsByNamesRequest &b);

std::ostream& operator<<(std::ostream& out, const GetPartitionsByNamesRequest& obj);

typedef struct _GetPartitionsByNamesResult__isset {
  _GetPartitionsByNamesResult__isset() : dictionary(false) {}
  bool dictionary :1;
} _GetPartitionsByNamesResult__isset;

class GetPartitionsByNamesResult {
 public:

  GetPartitionsByNamesResult(const GetPartitionsByNamesResult&);
  GetPartitionsByNamesResult(GetPartitionsByNamesResult&&);
  GetPartitionsByNamesResult& operator=(const GetPartitionsByNamesResult&);
  GetPartitionsByNamesResult& operator=(GetPartitionsByNamesResult&&);
  GetPartitionsByNamesResult() {
  }

  virtual ~GetPartitionsByNamesResult() throw();
  std::vector<Partition>  partitions;
  ObjectDictionary dictionary;

  _GetPartitionsByNamesResult__isset __isset;

  void __set_partitions(const std::vector<Partition> & val);

  void __set_dictionary(const ObjectDictionary& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPartitionsByNamesResult &a, GetPartitionsByNamesResult &b);

std::ostream& operator<<(std::ostream& out, const GetPartitionsByNamesResult& obj);

typedef struct _ResourceUri__isset {
  _ResourceUri__isset() : resourceType(false), uri(false) {}
  bool resourceType :1;
  bool uri :1;
} _ResourceUri__isset;

class ResourceUri {
 public:

  ResourceUri(const ResourceUri&);
  ResourceUri(ResourceUri&&);
  ResourceUri& operator=(const ResourceUri&);
  ResourceUri& operator=(ResourceUri&&);
  ResourceUri() : resourceType((ResourceType::type)0), uri() {
  }

  virtual ~ResourceUri() throw();
  ResourceType::type resourceType;
  std::string uri;

  _ResourceUri__isset __isset;

  void __set_resourceType(const ResourceType::type val);

  void __set_uri(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResourceUri &a, ResourceUri &b);

std::ostream& operator<<(std::ostream& out, const ResourceUri& obj);

typedef struct _Function__isset {
  _Function__isset() : functionName(false), dbName(false), className(false), ownerName(false), ownerType(false), createTime(false), functionType(false), resourceUris(false), catName(false) {}
  bool functionName :1;
  bool dbName :1;
  bool className :1;
  bool ownerName :1;
  bool ownerType :1;
  bool createTime :1;
  bool functionType :1;
  bool resourceUris :1;
  bool catName :1;
} _Function__isset;

class Function {
 public:

  Function(const Function&);
  Function(Function&&);
  Function& operator=(const Function&);
  Function& operator=(Function&&);
  Function() : functionName(), dbName(), className(), ownerName(), ownerType((PrincipalType::type)0), createTime(0), functionType((FunctionType::type)0), catName() {
  }

  virtual ~Function() throw();
  std::string functionName;
  std::string dbName;
  std::string className;
  std::string ownerName;
  PrincipalType::type ownerType;
  int32_t createTime;
  FunctionType::type functionType;
  std::vector<ResourceUri>  resourceUris;
  std::string catName;

  _Function__isset __isset;

  void __set_functionName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_className(const std::string& val);

  void __set_ownerName(const std::string& val);

  void __set_ownerType(const PrincipalType::type val);

  void __set_createTime(const int32_t val);

  void __set_functionType(const FunctionType::type val);

  void __set_resourceUris(const std::vector<ResourceUri> & val);

  void __set_catName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Function &a, Function &b);

std::ostream& operator<<(std::ostream& out, const Function& obj);

typedef struct _TxnInfo__isset {
  _TxnInfo__isset() : agentInfo(true), heartbeatCount(true), metaInfo(false), startedTime(false), lastHeartbeatTime(false) {}
  bool agentInfo :1;
  bool heartbeatCount :1;
  bool metaInfo :1;
  bool startedTime :1;
  bool lastHeartbeatTime :1;
} _TxnInfo__isset;

class TxnInfo {
 public:

  TxnInfo(const TxnInfo&);
  TxnInfo(TxnInfo&&);
  TxnInfo& operator=(const TxnInfo&);
  TxnInfo& operator=(TxnInfo&&);
  TxnInfo() : id(0), state((TxnState::type)0), user(), hostname(), agentInfo("Unknown"), heartbeatCount(0), metaInfo(), startedTime(0), lastHeartbeatTime(0) {
  }

  virtual ~TxnInfo() throw();
  int64_t id;
  TxnState::type state;
  std::string user;
  std::string hostname;
  std::string agentInfo;
  int32_t heartbeatCount;
  std::string metaInfo;
  int64_t startedTime;
  int64_t lastHeartbeatTime;

  _TxnInfo__isset __isset;

  void __set_id(const int64_t val);

  void __set_state(const TxnState::type val);

  void __set_user(const std::string& val);

  void __set_hostname(const std::string& val);

  void __set_agentInfo(const std::string& val);

  void __set_heartbeatCount(const int32_t val);

  void __set_metaInfo(const std::string& val);

  void __set_startedTime(const int64_t val);

  void __set_lastHeartbeatTime(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TxnInfo &a, TxnInfo &b);

std::ostream& operator<<(std::ostream& out, const TxnInfo& obj);


class GetOpenTxnsInfoResponse {
 public:

  GetOpenTxnsInfoResponse(const GetOpenTxnsInfoResponse&);
  GetOpenTxnsInfoResponse(GetOpenTxnsInfoResponse&&);
  GetOpenTxnsInfoResponse& operator=(const GetOpenTxnsInfoResponse&);
  GetOpenTxnsInfoResponse& operator=(GetOpenTxnsInfoResponse&&);
  GetOpenTxnsInfoResponse() : txn_high_water_mark(0) {
  }

  virtual ~GetOpenTxnsInfoResponse() throw();
  int64_t txn_high_water_mark;
  std::vector<TxnInfo>  open_txns;

  void __set_txn_high_water_mark(const int64_t val);

  void __set_open_txns(const std::vector<TxnInfo> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetOpenTxnsInfoResponse &a, GetOpenTxnsInfoResponse &b);

std::ostream& operator<<(std::ostream& out, const GetOpenTxnsInfoResponse& obj);

typedef struct _GetOpenTxnsResponse__isset {
  _GetOpenTxnsResponse__isset() : min_open_txn(false) {}
  bool min_open_txn :1;
} _GetOpenTxnsResponse__isset;

class GetOpenTxnsResponse {
 public:

  GetOpenTxnsResponse(const GetOpenTxnsResponse&);
  GetOpenTxnsResponse(GetOpenTxnsResponse&&);
  GetOpenTxnsResponse& operator=(const GetOpenTxnsResponse&);
  GetOpenTxnsResponse& operator=(GetOpenTxnsResponse&&);
  GetOpenTxnsResponse() : txn_high_water_mark(0), min_open_txn(0), abortedBits() {
  }

  virtual ~GetOpenTxnsResponse() throw();
  int64_t txn_high_water_mark;
  std::vector<int64_t>  open_txns;
  int64_t min_open_txn;
  std::string abortedBits;

  _GetOpenTxnsResponse__isset __isset;

  void __set_txn_high_water_mark(const int64_t val);

  void __set_open_txns(const std::vector<int64_t> & val);

  void __set_min_open_txn(const int64_t val);

  void __set_abortedBits(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetOpenTxnsResponse &a, GetOpenTxnsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetOpenTxnsResponse& obj);

typedef struct _OpenTxnRequest__isset {
  _OpenTxnRequest__isset() : agentInfo(true), replPolicy(false), replSrcTxnIds(false), txn_type(true) {}
  bool agentInfo :1;
  bool replPolicy :1;
  bool replSrcTxnIds :1;
  bool txn_type :1;
} _OpenTxnRequest__isset;

class OpenTxnRequest {
 public:

  OpenTxnRequest(const OpenTxnRequest&);
  OpenTxnRequest(OpenTxnRequest&&);
  OpenTxnRequest& operator=(const OpenTxnRequest&);
  OpenTxnRequest& operator=(OpenTxnRequest&&);
  OpenTxnRequest() : num_txns(0), user(), hostname(), agentInfo("Unknown"), replPolicy(), txn_type((TxnType::type)0) {
    txn_type = (TxnType::type)0;

  }

  virtual ~OpenTxnRequest() throw();
  int32_t num_txns;
  std::string user;
  std::string hostname;
  std::string agentInfo;
  std::string replPolicy;
  std::vector<int64_t>  replSrcTxnIds;
  TxnType::type txn_type;

  _OpenTxnRequest__isset __isset;

  void __set_num_txns(const int32_t val);

  void __set_user(const std::string& val);

  void __set_hostname(const std::string& val);

  void __set_agentInfo(const std::string& val);

  void __set_replPolicy(const std::string& val);

  void __set_replSrcTxnIds(const std::vector<int64_t> & val);

  void __set_txn_type(const TxnType::type val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OpenTxnRequest &a, OpenTxnRequest &b);

std::ostream& operator<<(std::ostream& out, const OpenTxnRequest& obj);


class OpenTxnsResponse {
 public:

  OpenTxnsResponse(const OpenTxnsResponse&);
  OpenTxnsResponse(OpenTxnsResponse&&);
  OpenTxnsResponse& operator=(const OpenTxnsResponse&);
  OpenTxnsResponse& operator=(OpenTxnsResponse&&);
  OpenTxnsResponse() {
  }

  virtual ~OpenTxnsResponse() throw();
  std::vector<int64_t>  txn_ids;

  void __set_txn_ids(const std::vector<int64_t> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OpenTxnsResponse &a, OpenTxnsResponse &b);

std::ostream& operator<<(std::ostream& out, const OpenTxnsResponse& obj);

typedef struct _AbortTxnRequest__isset {
  _AbortTxnRequest__isset() : replPolicy(false) {}
  bool replPolicy :1;
} _AbortTxnRequest__isset;

class AbortTxnRequest {
 public:

  AbortTxnRequest(const AbortTxnRequest&);
  AbortTxnRequest(AbortTxnRequest&&);
  AbortTxnRequest& operator=(const AbortTxnRequest&);
  AbortTxnRequest& operator=(AbortTxnRequest&&);
  AbortTxnRequest() : txnid(0), replPolicy() {
  }

  virtual ~AbortTxnRequest() throw();
  int64_t txnid;
  std::string replPolicy;

  _AbortTxnRequest__isset __isset;

  void __set_txnid(const int64_t val);

  void __set_replPolicy(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AbortTxnRequest &a, AbortTxnRequest &b);

std::ostream& operator<<(std::ostream& out, const AbortTxnRequest& obj);


class AbortTxnsRequest {
 public:

  AbortTxnsRequest(const AbortTxnsRequest&);
  AbortTxnsRequest(AbortTxnsRequest&&);
  AbortTxnsRequest& operator=(const AbortTxnsRequest&);
  AbortTxnsRequest& operator=(AbortTxnsRequest&&);
  AbortTxnsRequest() {
  }

  virtual ~AbortTxnsRequest() throw();
  std::vector<int64_t>  txn_ids;

  void __set_txn_ids(const std::vector<int64_t> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AbortTxnsRequest &a, AbortTxnsRequest &b);

std::ostream& operator<<(std::ostream& out, const AbortTxnsRequest& obj);

typedef struct _WriteEventInfo__isset {
  _WriteEventInfo__isset() : partition(false), tableObj(false), partitionObj(false) {}
  bool partition :1;
  bool tableObj :1;
  bool partitionObj :1;
} _WriteEventInfo__isset;

class WriteEventInfo {
 public:

  WriteEventInfo(const WriteEventInfo&);
  WriteEventInfo(WriteEventInfo&&);
  WriteEventInfo& operator=(const WriteEventInfo&);
  WriteEventInfo& operator=(WriteEventInfo&&);
  WriteEventInfo() : writeId(0), database(), table(), files(), partition(), tableObj(), partitionObj() {
  }

  virtual ~WriteEventInfo() throw();
  int64_t writeId;
  std::string database;
  std::string table;
  std::string files;
  std::string partition;
  std::string tableObj;
  std::string partitionObj;

  _WriteEventInfo__isset __isset;

  void __set_writeId(const int64_t val);

  void __set_database(const std::string& val);

  void __set_table(const std::string& val);

  void __set_files(const std::string& val);

  void __set_partition(const std::string& val);

  void __set_tableObj(const std::string& val);

  void __set_partitionObj(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WriteEventInfo &a, WriteEventInfo &b);

std::ostream& operator<<(std::ostream& out, const WriteEventInfo& obj);

typedef struct _ReplLastIdInfo__isset {
  _ReplLastIdInfo__isset() : table(false), catalog(false), partitionList(false) {}
  bool table :1;
  bool catalog :1;
  bool partitionList :1;
} _ReplLastIdInfo__isset;

class ReplLastIdInfo {
 public:

  ReplLastIdInfo(const ReplLastIdInfo&);
  ReplLastIdInfo(ReplLastIdInfo&&);
  ReplLastIdInfo& operator=(const ReplLastIdInfo&);
  ReplLastIdInfo& operator=(ReplLastIdInfo&&);
  ReplLastIdInfo() : database(), lastReplId(0), table(), catalog() {
  }

  virtual ~ReplLastIdInfo() throw();
  std::string database;
  int64_t lastReplId;
  std::string table;
  std::string catalog;
  std::vector<std::string>  partitionList;

  _ReplLastIdInfo__isset __isset;

  void __set_database(const std::string& val);

  void __set_lastReplId(const int64_t val);

  void __set_table(const std::string& val);

  void __set_catalog(const std::string& val);

  void __set_partitionList(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReplLastIdInfo &a, ReplLastIdInfo &b);

std::ostream& operator<<(std::ostream& out, const ReplLastIdInfo& obj);


class CommitTxnKeyValue {
 public:

  CommitTxnKeyValue(const CommitTxnKeyValue&);
  CommitTxnKeyValue(CommitTxnKeyValue&&);
  CommitTxnKeyValue& operator=(const CommitTxnKeyValue&);
  CommitTxnKeyValue& operator=(CommitTxnKeyValue&&);
  CommitTxnKeyValue() : tableId(0), key(), value() {
  }

  virtual ~CommitTxnKeyValue() throw();
  int64_t tableId;
  std::string key;
  std::string value;

  void __set_tableId(const int64_t val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CommitTxnKeyValue &a, CommitTxnKeyValue &b);

std::ostream& operator<<(std::ostream& out, const CommitTxnKeyValue& obj);

typedef struct _CommitTxnRequest__isset {
  _CommitTxnRequest__isset() : replPolicy(false), writeEventInfos(false), replLastIdInfo(false), keyValue(false), exclWriteEnabled(true) {}
  bool replPolicy :1;
  bool writeEventInfos :1;
  bool replLastIdInfo :1;
  bool keyValue :1;
  bool exclWriteEnabled :1;
} _CommitTxnRequest__isset;

class CommitTxnRequest {
 public:

  CommitTxnRequest(const CommitTxnRequest&);
  CommitTxnRequest(CommitTxnRequest&&);
  CommitTxnRequest& operator=(const CommitTxnRequest&);
  CommitTxnRequest& operator=(CommitTxnRequest&&);
  CommitTxnRequest() : txnid(0), replPolicy(), exclWriteEnabled(true) {
  }

  virtual ~CommitTxnRequest() throw();
  int64_t txnid;
  std::string replPolicy;
  std::vector<WriteEventInfo>  writeEventInfos;
  ReplLastIdInfo replLastIdInfo;
  CommitTxnKeyValue keyValue;
  bool exclWriteEnabled;

  _CommitTxnRequest__isset __isset;

  void __set_txnid(const int64_t val);

  void __set_replPolicy(const std::string& val);

  void __set_writeEventInfos(const std::vector<WriteEventInfo> & val);

  void __set_replLastIdInfo(const ReplLastIdInfo& val);

  void __set_keyValue(const CommitTxnKeyValue& val);

  void __set_exclWriteEnabled(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CommitTxnRequest &a, CommitTxnRequest &b);

std::ostream& operator<<(std::ostream& out, const CommitTxnRequest& obj);

typedef struct _ReplTblWriteIdStateRequest__isset {
  _ReplTblWriteIdStateRequest__isset() : partNames(false) {}
  bool partNames :1;
} _ReplTblWriteIdStateRequest__isset;

class ReplTblWriteIdStateRequest {
 public:

  ReplTblWriteIdStateRequest(const ReplTblWriteIdStateRequest&);
  ReplTblWriteIdStateRequest(ReplTblWriteIdStateRequest&&);
  ReplTblWriteIdStateRequest& operator=(const ReplTblWriteIdStateRequest&);
  ReplTblWriteIdStateRequest& operator=(ReplTblWriteIdStateRequest&&);
  ReplTblWriteIdStateRequest() : validWriteIdlist(), user(), hostName(), dbName(), tableName() {
  }

  virtual ~ReplTblWriteIdStateRequest() throw();
  std::string validWriteIdlist;
  std::string user;
  std::string hostName;
  std::string dbName;
  std::string tableName;
  std::vector<std::string>  partNames;

  _ReplTblWriteIdStateRequest__isset __isset;

  void __set_validWriteIdlist(const std::string& val);

  void __set_user(const std::string& val);

  void __set_hostName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_partNames(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReplTblWriteIdStateRequest &a, ReplTblWriteIdStateRequest &b);

std::ostream& operator<<(std::ostream& out, const ReplTblWriteIdStateRequest& obj);

typedef struct _GetValidWriteIdsRequest__isset {
  _GetValidWriteIdsRequest__isset() : validTxnList(false), writeId(false) {}
  bool validTxnList :1;
  bool writeId :1;
} _GetValidWriteIdsRequest__isset;

class GetValidWriteIdsRequest {
 public:

  GetValidWriteIdsRequest(const GetValidWriteIdsRequest&);
  GetValidWriteIdsRequest(GetValidWriteIdsRequest&&);
  GetValidWriteIdsRequest& operator=(const GetValidWriteIdsRequest&);
  GetValidWriteIdsRequest& operator=(GetValidWriteIdsRequest&&);
  GetValidWriteIdsRequest() : validTxnList(), writeId(0) {
  }

  virtual ~GetValidWriteIdsRequest() throw();
  std::vector<std::string>  fullTableNames;
  std::string validTxnList;
  int64_t writeId;

  _GetValidWriteIdsRequest__isset __isset;

  void __set_fullTableNames(const std::vector<std::string> & val);

  void __set_validTxnList(const std::string& val);

  void __set_writeId(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetValidWriteIdsRequest &a, GetValidWriteIdsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetValidWriteIdsRequest& obj);

typedef struct _TableValidWriteIds__isset {
  _TableValidWriteIds__isset() : minOpenWriteId(false) {}
  bool minOpenWriteId :1;
} _TableValidWriteIds__isset;

class TableValidWriteIds {
 public:

  TableValidWriteIds(const TableValidWriteIds&);
  TableValidWriteIds(TableValidWriteIds&&);
  TableValidWriteIds& operator=(const TableValidWriteIds&);
  TableValidWriteIds& operator=(TableValidWriteIds&&);
  TableValidWriteIds() : fullTableName(), writeIdHighWaterMark(0), minOpenWriteId(0), abortedBits() {
  }

  virtual ~TableValidWriteIds() throw();
  std::string fullTableName;
  int64_t writeIdHighWaterMark;
  std::vector<int64_t>  invalidWriteIds;
  int64_t minOpenWriteId;
  std::string abortedBits;

  _TableValidWriteIds__isset __isset;

  void __set_fullTableName(const std::string& val);

  void __set_writeIdHighWaterMark(const int64_t val);

  void __set_invalidWriteIds(const std::vector<int64_t> & val);

  void __set_minOpenWriteId(const int64_t val);

  void __set_abortedBits(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TableValidWriteIds &a, TableValidWriteIds &b);

std::ostream& operator<<(std::ostream& out, const TableValidWriteIds& obj);


class GetValidWriteIdsResponse {
 public:

  GetValidWriteIdsResponse(const GetValidWriteIdsResponse&);
  GetValidWriteIdsResponse(GetValidWriteIdsResponse&&);
  GetValidWriteIdsResponse& operator=(const GetValidWriteIdsResponse&);
  GetValidWriteIdsResponse& operator=(GetValidWriteIdsResponse&&);
  GetValidWriteIdsResponse() {
  }

  virtual ~GetValidWriteIdsResponse() throw();
  std::vector<TableValidWriteIds>  tblValidWriteIds;

  void __set_tblValidWriteIds(const std::vector<TableValidWriteIds> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetValidWriteIdsResponse &a, GetValidWriteIdsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetValidWriteIdsResponse& obj);


class TxnToWriteId {
 public:

  TxnToWriteId(const TxnToWriteId&);
  TxnToWriteId(TxnToWriteId&&);
  TxnToWriteId& operator=(const TxnToWriteId&);
  TxnToWriteId& operator=(TxnToWriteId&&);
  TxnToWriteId() : txnId(0), writeId(0) {
  }

  virtual ~TxnToWriteId() throw();
  int64_t txnId;
  int64_t writeId;

  void __set_txnId(const int64_t val);

  void __set_writeId(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TxnToWriteId &a, TxnToWriteId &b);

std::ostream& operator<<(std::ostream& out, const TxnToWriteId& obj);

typedef struct _AllocateTableWriteIdsRequest__isset {
  _AllocateTableWriteIdsRequest__isset() : txnIds(false), replPolicy(false), srcTxnToWriteIdList(false) {}
  bool txnIds :1;
  bool replPolicy :1;
  bool srcTxnToWriteIdList :1;
} _AllocateTableWriteIdsRequest__isset;

class AllocateTableWriteIdsRequest {
 public:

  AllocateTableWriteIdsRequest(const AllocateTableWriteIdsRequest&);
  AllocateTableWriteIdsRequest(AllocateTableWriteIdsRequest&&);
  AllocateTableWriteIdsRequest& operator=(const AllocateTableWriteIdsRequest&);
  AllocateTableWriteIdsRequest& operator=(AllocateTableWriteIdsRequest&&);
  AllocateTableWriteIdsRequest() : dbName(), tableName(), replPolicy() {
  }

  virtual ~AllocateTableWriteIdsRequest() throw();
  std::string dbName;
  std::string tableName;
  std::vector<int64_t>  txnIds;
  std::string replPolicy;
  std::vector<TxnToWriteId>  srcTxnToWriteIdList;

  _AllocateTableWriteIdsRequest__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_txnIds(const std::vector<int64_t> & val);

  void __set_replPolicy(const std::string& val);

  void __set_srcTxnToWriteIdList(const std::vector<TxnToWriteId> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AllocateTableWriteIdsRequest &a, AllocateTableWriteIdsRequest &b);

std::ostream& operator<<(std::ostream& out, const AllocateTableWriteIdsRequest& obj);


class AllocateTableWriteIdsResponse {
 public:

  AllocateTableWriteIdsResponse(const AllocateTableWriteIdsResponse&);
  AllocateTableWriteIdsResponse(AllocateTableWriteIdsResponse&&);
  AllocateTableWriteIdsResponse& operator=(const AllocateTableWriteIdsResponse&);
  AllocateTableWriteIdsResponse& operator=(AllocateTableWriteIdsResponse&&);
  AllocateTableWriteIdsResponse() {
  }

  virtual ~AllocateTableWriteIdsResponse() throw();
  std::vector<TxnToWriteId>  txnToWriteIds;

  void __set_txnToWriteIds(const std::vector<TxnToWriteId> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AllocateTableWriteIdsResponse &a, AllocateTableWriteIdsResponse &b);

std::ostream& operator<<(std::ostream& out, const AllocateTableWriteIdsResponse& obj);


class MaxAllocatedTableWriteIdRequest {
 public:

  MaxAllocatedTableWriteIdRequest(const MaxAllocatedTableWriteIdRequest&);
  MaxAllocatedTableWriteIdRequest(MaxAllocatedTableWriteIdRequest&&);
  MaxAllocatedTableWriteIdRequest& operator=(const MaxAllocatedTableWriteIdRequest&);
  MaxAllocatedTableWriteIdRequest& operator=(MaxAllocatedTableWriteIdRequest&&);
  MaxAllocatedTableWriteIdRequest() : dbName(), tableName() {
  }

  virtual ~MaxAllocatedTableWriteIdRequest() throw();
  std::string dbName;
  std::string tableName;

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MaxAllocatedTableWriteIdRequest &a, MaxAllocatedTableWriteIdRequest &b);

std::ostream& operator<<(std::ostream& out, const MaxAllocatedTableWriteIdRequest& obj);


class MaxAllocatedTableWriteIdResponse {
 public:

  MaxAllocatedTableWriteIdResponse(const MaxAllocatedTableWriteIdResponse&);
  MaxAllocatedTableWriteIdResponse(MaxAllocatedTableWriteIdResponse&&);
  MaxAllocatedTableWriteIdResponse& operator=(const MaxAllocatedTableWriteIdResponse&);
  MaxAllocatedTableWriteIdResponse& operator=(MaxAllocatedTableWriteIdResponse&&);
  MaxAllocatedTableWriteIdResponse() : maxWriteId(0) {
  }

  virtual ~MaxAllocatedTableWriteIdResponse() throw();
  int64_t maxWriteId;

  void __set_maxWriteId(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MaxAllocatedTableWriteIdResponse &a, MaxAllocatedTableWriteIdResponse &b);

std::ostream& operator<<(std::ostream& out, const MaxAllocatedTableWriteIdResponse& obj);


class SeedTableWriteIdsRequest {
 public:

  SeedTableWriteIdsRequest(const SeedTableWriteIdsRequest&);
  SeedTableWriteIdsRequest(SeedTableWriteIdsRequest&&);
  SeedTableWriteIdsRequest& operator=(const SeedTableWriteIdsRequest&);
  SeedTableWriteIdsRequest& operator=(SeedTableWriteIdsRequest&&);
  SeedTableWriteIdsRequest() : dbName(), tableName(), seedWriteId(0) {
  }

  virtual ~SeedTableWriteIdsRequest() throw();
  std::string dbName;
  std::string tableName;
  int64_t seedWriteId;

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_seedWriteId(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SeedTableWriteIdsRequest &a, SeedTableWriteIdsRequest &b);

std::ostream& operator<<(std::ostream& out, const SeedTableWriteIdsRequest& obj);


class SeedTxnIdRequest {
 public:

  SeedTxnIdRequest(const SeedTxnIdRequest&);
  SeedTxnIdRequest(SeedTxnIdRequest&&);
  SeedTxnIdRequest& operator=(const SeedTxnIdRequest&);
  SeedTxnIdRequest& operator=(SeedTxnIdRequest&&);
  SeedTxnIdRequest() : seedTxnId(0) {
  }

  virtual ~SeedTxnIdRequest() throw();
  int64_t seedTxnId;

  void __set_seedTxnId(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SeedTxnIdRequest &a, SeedTxnIdRequest &b);

std::ostream& operator<<(std::ostream& out, const SeedTxnIdRequest& obj);

typedef struct _LockComponent__isset {
  _LockComponent__isset() : tablename(false), partitionname(false), operationType(true), isTransactional(true), isDynamicPartitionWrite(true) {}
  bool tablename :1;
  bool partitionname :1;
  bool operationType :1;
  bool isTransactional :1;
  bool isDynamicPartitionWrite :1;
} _LockComponent__isset;

class LockComponent {
 public:

  LockComponent(const LockComponent&);
  LockComponent(LockComponent&&);
  LockComponent& operator=(const LockComponent&);
  LockComponent& operator=(LockComponent&&);
  LockComponent() : type((LockType::type)0), level((LockLevel::type)0), dbname(), tablename(), partitionname(), operationType((DataOperationType::type)5), isTransactional(false), isDynamicPartitionWrite(false) {
    operationType = (DataOperationType::type)5;

  }

  virtual ~LockComponent() throw();
  LockType::type type;
  LockLevel::type level;
  std::string dbname;
  std::string tablename;
  std::string partitionname;
  DataOperationType::type operationType;
  bool isTransactional;
  bool isDynamicPartitionWrite;

  _LockComponent__isset __isset;

  void __set_type(const LockType::type val);

  void __set_level(const LockLevel::type val);

  void __set_dbname(const std::string& val);

  void __set_tablename(const std::string& val);

  void __set_partitionname(const std::string& val);

  void __set_operationType(const DataOperationType::type val);

  void __set_isTransactional(const bool val);

  void __set_isDynamicPartitionWrite(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LockComponent &a, LockComponent &b);

std::ostream& operator<<(std::ostream& out, const LockComponent& obj);

typedef struct _LockRequest__isset {
  _LockRequest__isset() : txnid(false), agentInfo(true), zeroWaitReadEnabled(true) {}
  bool txnid :1;
  bool agentInfo :1;
  bool zeroWaitReadEnabled :1;
} _LockRequest__isset;

class LockRequest {
 public:

  LockRequest(const LockRequest&);
  LockRequest(LockRequest&&);
  LockRequest& operator=(const LockRequest&);
  LockRequest& operator=(LockRequest&&);
  LockRequest() : txnid(0), user(), hostname(), agentInfo("Unknown"), zeroWaitReadEnabled(false) {
  }

  virtual ~LockRequest() throw();
  std::vector<LockComponent>  component;
  int64_t txnid;
  std::string user;
  std::string hostname;
  std::string agentInfo;
  bool zeroWaitReadEnabled;

  _LockRequest__isset __isset;

  void __set_component(const std::vector<LockComponent> & val);

  void __set_txnid(const int64_t val);

  void __set_user(const std::string& val);

  void __set_hostname(const std::string& val);

  void __set_agentInfo(const std::string& val);

  void __set_zeroWaitReadEnabled(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LockRequest &a, LockRequest &b);

std::ostream& operator<<(std::ostream& out, const LockRequest& obj);

typedef struct _LockResponse__isset {
  _LockResponse__isset() : errorMessage(false) {}
  bool errorMessage :1;
} _LockResponse__isset;

class LockResponse {
 public:

  LockResponse(const LockResponse&);
  LockResponse(LockResponse&&);
  LockResponse& operator=(const LockResponse&);
  LockResponse& operator=(LockResponse&&);
  LockResponse() : lockid(0), state((LockState::type)0), errorMessage() {
  }

  virtual ~LockResponse() throw();
  int64_t lockid;
  LockState::type state;
  std::string errorMessage;

  _LockResponse__isset __isset;

  void __set_lockid(const int64_t val);

  void __set_state(const LockState::type val);

  void __set_errorMessage(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LockResponse &a, LockResponse &b);

std::ostream& operator<<(std::ostream& out, const LockResponse& obj);

typedef struct _CheckLockRequest__isset {
  _CheckLockRequest__isset() : txnid(false), elapsed_ms(false) {}
  bool txnid :1;
  bool elapsed_ms :1;
} _CheckLockRequest__isset;

class CheckLockRequest {
 public:

  CheckLockRequest(const CheckLockRequest&);
  CheckLockRequest(CheckLockRequest&&);
  CheckLockRequest& operator=(const CheckLockRequest&);
  CheckLockRequest& operator=(CheckLockRequest&&);
  CheckLockRequest() : lockid(0), txnid(0), elapsed_ms(0) {
  }

  virtual ~CheckLockRequest() throw();
  int64_t lockid;
  int64_t txnid;
  int64_t elapsed_ms;

  _CheckLockRequest__isset __isset;

  void __set_lockid(const int64_t val);

  void __set_txnid(const int64_t val);

  void __set_elapsed_ms(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CheckLockRequest &a, CheckLockRequest &b);

std::ostream& operator<<(std::ostream& out, const CheckLockRequest& obj);


class UnlockRequest {
 public:

  UnlockRequest(const UnlockRequest&);
  UnlockRequest(UnlockRequest&&);
  UnlockRequest& operator=(const UnlockRequest&);
  UnlockRequest& operator=(UnlockRequest&&);
  UnlockRequest() : lockid(0) {
  }

  virtual ~UnlockRequest() throw();
  int64_t lockid;

  void __set_lockid(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UnlockRequest &a, UnlockRequest &b);

std::ostream& operator<<(std::ostream& out, const UnlockRequest& obj);

typedef struct _ShowLocksRequest__isset {
  _ShowLocksRequest__isset() : dbname(false), tablename(false), partname(false), isExtended(true), txnid(false) {}
  bool dbname :1;
  bool tablename :1;
  bool partname :1;
  bool isExtended :1;
  bool txnid :1;
} _ShowLocksRequest__isset;

class ShowLocksRequest {
 public:

  ShowLocksRequest(const ShowLocksRequest&);
  ShowLocksRequest(ShowLocksRequest&&);
  ShowLocksRequest& operator=(const ShowLocksRequest&);
  ShowLocksRequest& operator=(ShowLocksRequest&&);
  ShowLocksRequest() : dbname(), tablename(), partname(), isExtended(false), txnid(0) {
  }

  virtual ~ShowLocksRequest() throw();
  std::string dbname;
  std::string tablename;
  std::string partname;
  bool isExtended;
  int64_t txnid;

  _ShowLocksRequest__isset __isset;

  void __set_dbname(const std::string& val);

  void __set_tablename(const std::string& val);

  void __set_partname(const std::string& val);

  void __set_isExtended(const bool val);

  void __set_txnid(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShowLocksRequest &a, ShowLocksRequest &b);

std::ostream& operator<<(std::ostream& out, const ShowLocksRequest& obj);

typedef struct _ShowLocksResponseElement__isset {
  _ShowLocksResponseElement__isset() : tablename(false), partname(false), txnid(false), acquiredat(false), heartbeatCount(true), agentInfo(false), blockedByExtId(false), blockedByIntId(false), lockIdInternal(false) {}
  bool tablename :1;
  bool partname :1;
  bool txnid :1;
  bool acquiredat :1;
  bool heartbeatCount :1;
  bool agentInfo :1;
  bool blockedByExtId :1;
  bool blockedByIntId :1;
  bool lockIdInternal :1;
} _ShowLocksResponseElement__isset;

class ShowLocksResponseElement {
 public:

  ShowLocksResponseElement(const ShowLocksResponseElement&);
  ShowLocksResponseElement(ShowLocksResponseElement&&);
  ShowLocksResponseElement& operator=(const ShowLocksResponseElement&);
  ShowLocksResponseElement& operator=(ShowLocksResponseElement&&);
  ShowLocksResponseElement() : lockid(0), dbname(), tablename(), partname(), state((LockState::type)0), type((LockType::type)0), txnid(0), lastheartbeat(0), acquiredat(0), user(), hostname(), heartbeatCount(0), agentInfo(), blockedByExtId(0), blockedByIntId(0), lockIdInternal(0) {
  }

  virtual ~ShowLocksResponseElement() throw();
  int64_t lockid;
  std::string dbname;
  std::string tablename;
  std::string partname;
  LockState::type state;
  LockType::type type;
  int64_t txnid;
  int64_t lastheartbeat;
  int64_t acquiredat;
  std::string user;
  std::string hostname;
  int32_t heartbeatCount;
  std::string agentInfo;
  int64_t blockedByExtId;
  int64_t blockedByIntId;
  int64_t lockIdInternal;

  _ShowLocksResponseElement__isset __isset;

  void __set_lockid(const int64_t val);

  void __set_dbname(const std::string& val);

  void __set_tablename(const std::string& val);

  void __set_partname(const std::string& val);

  void __set_state(const LockState::type val);

  void __set_type(const LockType::type val);

  void __set_txnid(const int64_t val);

  void __set_lastheartbeat(const int64_t val);

  void __set_acquiredat(const int64_t val);

  void __set_user(const std::string& val);

  void __set_hostname(const std::string& val);

  void __set_heartbeatCount(const int32_t val);

  void __set_agentInfo(const std::string& val);

  void __set_blockedByExtId(const int64_t val);

  void __set_blockedByIntId(const int64_t val);

  void __set_lockIdInternal(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShowLocksResponseElement &a, ShowLocksResponseElement &b);

std::ostream& operator<<(std::ostream& out, const ShowLocksResponseElement& obj);

typedef struct _ShowLocksResponse__isset {
  _ShowLocksResponse__isset() : locks(false) {}
  bool locks :1;
} _ShowLocksResponse__isset;

class ShowLocksResponse {
 public:

  ShowLocksResponse(const ShowLocksResponse&);
  ShowLocksResponse(ShowLocksResponse&&);
  ShowLocksResponse& operator=(const ShowLocksResponse&);
  ShowLocksResponse& operator=(ShowLocksResponse&&);
  ShowLocksResponse() {
  }

  virtual ~ShowLocksResponse() throw();
  std::vector<ShowLocksResponseElement>  locks;

  _ShowLocksResponse__isset __isset;

  void __set_locks(const std::vector<ShowLocksResponseElement> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShowLocksResponse &a, ShowLocksResponse &b);

std::ostream& operator<<(std::ostream& out, const ShowLocksResponse& obj);

typedef struct _HeartbeatRequest__isset {
  _HeartbeatRequest__isset() : lockid(false), txnid(false) {}
  bool lockid :1;
  bool txnid :1;
} _HeartbeatRequest__isset;

class HeartbeatRequest {
 public:

  HeartbeatRequest(const HeartbeatRequest&);
  HeartbeatRequest(HeartbeatRequest&&);
  HeartbeatRequest& operator=(const HeartbeatRequest&);
  HeartbeatRequest& operator=(HeartbeatRequest&&);
  HeartbeatRequest() : lockid(0), txnid(0) {
  }

  virtual ~HeartbeatRequest() throw();
  int64_t lockid;
  int64_t txnid;

  _HeartbeatRequest__isset __isset;

  void __set_lockid(const int64_t val);

  void __set_txnid(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HeartbeatRequest &a, HeartbeatRequest &b);

std::ostream& operator<<(std::ostream& out, const HeartbeatRequest& obj);


class HeartbeatTxnRangeRequest {
 public:

  HeartbeatTxnRangeRequest(const HeartbeatTxnRangeRequest&);
  HeartbeatTxnRangeRequest(HeartbeatTxnRangeRequest&&);
  HeartbeatTxnRangeRequest& operator=(const HeartbeatTxnRangeRequest&);
  HeartbeatTxnRangeRequest& operator=(HeartbeatTxnRangeRequest&&);
  HeartbeatTxnRangeRequest() : min(0), max(0) {
  }

  virtual ~HeartbeatTxnRangeRequest() throw();
  int64_t min;
  int64_t max;

  void __set_min(const int64_t val);

  void __set_max(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HeartbeatTxnRangeRequest &a, HeartbeatTxnRangeRequest &b);

std::ostream& operator<<(std::ostream& out, const HeartbeatTxnRangeRequest& obj);


class HeartbeatTxnRangeResponse {
 public:

  HeartbeatTxnRangeResponse(const HeartbeatTxnRangeResponse&);
  HeartbeatTxnRangeResponse(HeartbeatTxnRangeResponse&&);
  HeartbeatTxnRangeResponse& operator=(const HeartbeatTxnRangeResponse&);
  HeartbeatTxnRangeResponse& operator=(HeartbeatTxnRangeResponse&&);
  HeartbeatTxnRangeResponse() {
  }

  virtual ~HeartbeatTxnRangeResponse() throw();
  std::set<int64_t>  aborted;
  std::set<int64_t>  nosuch;

  void __set_aborted(const std::set<int64_t> & val);

  void __set_nosuch(const std::set<int64_t> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HeartbeatTxnRangeResponse &a, HeartbeatTxnRangeResponse &b);

std::ostream& operator<<(std::ostream& out, const HeartbeatTxnRangeResponse& obj);

typedef struct _CompactionRequest__isset {
  _CompactionRequest__isset() : partitionname(false), runas(false), properties(false) {}
  bool partitionname :1;
  bool runas :1;
  bool properties :1;
} _CompactionRequest__isset;

class CompactionRequest {
 public:

  CompactionRequest(const CompactionRequest&);
  CompactionRequest(CompactionRequest&&);
  CompactionRequest& operator=(const CompactionRequest&);
  CompactionRequest& operator=(CompactionRequest&&);
  CompactionRequest() : dbname(), tablename(), partitionname(), type((CompactionType::type)0), runas() {
  }

  virtual ~CompactionRequest() throw();
  std::string dbname;
  std::string tablename;
  std::string partitionname;
  CompactionType::type type;
  std::string runas;
  std::map<std::string, std::string>  properties;

  _CompactionRequest__isset __isset;

  void __set_dbname(const std::string& val);

  void __set_tablename(const std::string& val);

  void __set_partitionname(const std::string& val);

  void __set_type(const CompactionType::type val);

  void __set_runas(const std::string& val);

  void __set_properties(const std::map<std::string, std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CompactionRequest &a, CompactionRequest &b);

std::ostream& operator<<(std::ostream& out, const CompactionRequest& obj);

typedef struct _CompactionInfoStruct__isset {
  _CompactionInfoStruct__isset() : partitionname(false), runas(false), properties(false), toomanyaborts(false), state(false), workerId(false), start(false), highestWriteId(false), errorMessage(false), hasoldabort(false), enqueueTime(false) {}
  bool partitionname :1;
  bool runas :1;
  bool properties :1;
  bool toomanyaborts :1;
  bool state :1;
  bool workerId :1;
  bool start :1;
  bool highestWriteId :1;
  bool errorMessage :1;
  bool hasoldabort :1;
  bool enqueueTime :1;
} _CompactionInfoStruct__isset;

class CompactionInfoStruct {
 public:

  CompactionInfoStruct(const CompactionInfoStruct&);
  CompactionInfoStruct(CompactionInfoStruct&&);
  CompactionInfoStruct& operator=(const CompactionInfoStruct&);
  CompactionInfoStruct& operator=(CompactionInfoStruct&&);
  CompactionInfoStruct() : id(0), dbname(), tablename(), partitionname(), type((CompactionType::type)0), runas(), properties(), toomanyaborts(0), state(), workerId(), start(0), highestWriteId(0), errorMessage(), hasoldabort(0), enqueueTime(0) {
  }

  virtual ~CompactionInfoStruct() throw();
  int64_t id;
  std::string dbname;
  std::string tablename;
  std::string partitionname;
  CompactionType::type type;
  std::string runas;
  std::string properties;
  bool toomanyaborts;
  std::string state;
  std::string workerId;
  int64_t start;
  int64_t highestWriteId;
  std::string errorMessage;
  bool hasoldabort;
  int64_t enqueueTime;

  _CompactionInfoStruct__isset __isset;

  void __set_id(const int64_t val);

  void __set_dbname(const std::string& val);

  void __set_tablename(const std::string& val);

  void __set_partitionname(const std::string& val);

  void __set_type(const CompactionType::type val);

  void __set_runas(const std::string& val);

  void __set_properties(const std::string& val);

  void __set_toomanyaborts(const bool val);

  void __set_state(const std::string& val);

  void __set_workerId(const std::string& val);

  void __set_start(const int64_t val);

  void __set_highestWriteId(const int64_t val);

  void __set_errorMessage(const std::string& val);

  void __set_hasoldabort(const bool val);

  void __set_enqueueTime(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CompactionInfoStruct &a, CompactionInfoStruct &b);

std::ostream& operator<<(std::ostream& out, const CompactionInfoStruct& obj);

typedef struct _OptionalCompactionInfoStruct__isset {
  _OptionalCompactionInfoStruct__isset() : ci(false) {}
  bool ci :1;
} _OptionalCompactionInfoStruct__isset;

class OptionalCompactionInfoStruct {
 public:

  OptionalCompactionInfoStruct(const OptionalCompactionInfoStruct&);
  OptionalCompactionInfoStruct(OptionalCompactionInfoStruct&&);
  OptionalCompactionInfoStruct& operator=(const OptionalCompactionInfoStruct&);
  OptionalCompactionInfoStruct& operator=(OptionalCompactionInfoStruct&&);
  OptionalCompactionInfoStruct() {
  }

  virtual ~OptionalCompactionInfoStruct() throw();
  CompactionInfoStruct ci;

  _OptionalCompactionInfoStruct__isset __isset;

  void __set_ci(const CompactionInfoStruct& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(OptionalCompactionInfoStruct &a, OptionalCompactionInfoStruct &b);

std::ostream& operator<<(std::ostream& out, const OptionalCompactionInfoStruct& obj);


class CompactionResponse {
 public:

  CompactionResponse(const CompactionResponse&);
  CompactionResponse(CompactionResponse&&);
  CompactionResponse& operator=(const CompactionResponse&);
  CompactionResponse& operator=(CompactionResponse&&);
  CompactionResponse() : id(0), state(), accepted(0) {
  }

  virtual ~CompactionResponse() throw();
  int64_t id;
  std::string state;
  bool accepted;

  void __set_id(const int64_t val);

  void __set_state(const std::string& val);

  void __set_accepted(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CompactionResponse &a, CompactionResponse &b);

std::ostream& operator<<(std::ostream& out, const CompactionResponse& obj);


class ShowCompactRequest {
 public:

  ShowCompactRequest(const ShowCompactRequest&);
  ShowCompactRequest(ShowCompactRequest&&);
  ShowCompactRequest& operator=(const ShowCompactRequest&);
  ShowCompactRequest& operator=(ShowCompactRequest&&);
  ShowCompactRequest() {
  }

  virtual ~ShowCompactRequest() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShowCompactRequest &a, ShowCompactRequest &b);

std::ostream& operator<<(std::ostream& out, const ShowCompactRequest& obj);

typedef struct _ShowCompactResponseElement__isset {
  _ShowCompactResponseElement__isset() : partitionname(false), workerid(false), start(false), runAs(false), hightestTxnId(false), metaInfo(false), endTime(false), hadoopJobId(true), id(false), errorMessage(false), enqueueTime(false) {}
  bool partitionname :1;
  bool workerid :1;
  bool start :1;
  bool runAs :1;
  bool hightestTxnId :1;
  bool metaInfo :1;
  bool endTime :1;
  bool hadoopJobId :1;
  bool id :1;
  bool errorMessage :1;
  bool enqueueTime :1;
} _ShowCompactResponseElement__isset;

class ShowCompactResponseElement {
 public:

  ShowCompactResponseElement(const ShowCompactResponseElement&);
  ShowCompactResponseElement(ShowCompactResponseElement&&);
  ShowCompactResponseElement& operator=(const ShowCompactResponseElement&);
  ShowCompactResponseElement& operator=(ShowCompactResponseElement&&);
  ShowCompactResponseElement() : dbname(), tablename(), partitionname(), type((CompactionType::type)0), state(), workerid(), start(0), runAs(), hightestTxnId(0), metaInfo(), endTime(0), hadoopJobId("None"), id(0), errorMessage(), enqueueTime(0) {
  }

  virtual ~ShowCompactResponseElement() throw();
  std::string dbname;
  std::string tablename;
  std::string partitionname;
  CompactionType::type type;
  std::string state;
  std::string workerid;
  int64_t start;
  std::string runAs;
  int64_t hightestTxnId;
  std::string metaInfo;
  int64_t endTime;
  std::string hadoopJobId;
  int64_t id;
  std::string errorMessage;
  int64_t enqueueTime;

  _ShowCompactResponseElement__isset __isset;

  void __set_dbname(const std::string& val);

  void __set_tablename(const std::string& val);

  void __set_partitionname(const std::string& val);

  void __set_type(const CompactionType::type val);

  void __set_state(const std::string& val);

  void __set_workerid(const std::string& val);

  void __set_start(const int64_t val);

  void __set_runAs(const std::string& val);

  void __set_hightestTxnId(const int64_t val);

  void __set_metaInfo(const std::string& val);

  void __set_endTime(const int64_t val);

  void __set_hadoopJobId(const std::string& val);

  void __set_id(const int64_t val);

  void __set_errorMessage(const std::string& val);

  void __set_enqueueTime(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShowCompactResponseElement &a, ShowCompactResponseElement &b);

std::ostream& operator<<(std::ostream& out, const ShowCompactResponseElement& obj);


class ShowCompactResponse {
 public:

  ShowCompactResponse(const ShowCompactResponse&);
  ShowCompactResponse(ShowCompactResponse&&);
  ShowCompactResponse& operator=(const ShowCompactResponse&);
  ShowCompactResponse& operator=(ShowCompactResponse&&);
  ShowCompactResponse() {
  }

  virtual ~ShowCompactResponse() throw();
  std::vector<ShowCompactResponseElement>  compacts;

  void __set_compacts(const std::vector<ShowCompactResponseElement> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShowCompactResponse &a, ShowCompactResponse &b);

std::ostream& operator<<(std::ostream& out, const ShowCompactResponse& obj);

typedef struct _GetLatestCommittedCompactionInfoRequest__isset {
  _GetLatestCommittedCompactionInfoRequest__isset() : partitionnames(false) {}
  bool partitionnames :1;
} _GetLatestCommittedCompactionInfoRequest__isset;

class GetLatestCommittedCompactionInfoRequest {
 public:

  GetLatestCommittedCompactionInfoRequest(const GetLatestCommittedCompactionInfoRequest&);
  GetLatestCommittedCompactionInfoRequest(GetLatestCommittedCompactionInfoRequest&&);
  GetLatestCommittedCompactionInfoRequest& operator=(const GetLatestCommittedCompactionInfoRequest&);
  GetLatestCommittedCompactionInfoRequest& operator=(GetLatestCommittedCompactionInfoRequest&&);
  GetLatestCommittedCompactionInfoRequest() : dbname(), tablename() {
  }

  virtual ~GetLatestCommittedCompactionInfoRequest() throw();
  std::string dbname;
  std::string tablename;
  std::vector<std::string>  partitionnames;

  _GetLatestCommittedCompactionInfoRequest__isset __isset;

  void __set_dbname(const std::string& val);

  void __set_tablename(const std::string& val);

  void __set_partitionnames(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetLatestCommittedCompactionInfoRequest &a, GetLatestCommittedCompactionInfoRequest &b);

std::ostream& operator<<(std::ostream& out, const GetLatestCommittedCompactionInfoRequest& obj);


class GetLatestCommittedCompactionInfoResponse {
 public:

  GetLatestCommittedCompactionInfoResponse(const GetLatestCommittedCompactionInfoResponse&);
  GetLatestCommittedCompactionInfoResponse(GetLatestCommittedCompactionInfoResponse&&);
  GetLatestCommittedCompactionInfoResponse& operator=(const GetLatestCommittedCompactionInfoResponse&);
  GetLatestCommittedCompactionInfoResponse& operator=(GetLatestCommittedCompactionInfoResponse&&);
  GetLatestCommittedCompactionInfoResponse() {
  }

  virtual ~GetLatestCommittedCompactionInfoResponse() throw();
  std::vector<CompactionInfoStruct>  compactions;

  void __set_compactions(const std::vector<CompactionInfoStruct> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetLatestCommittedCompactionInfoResponse &a, GetLatestCommittedCompactionInfoResponse &b);

std::ostream& operator<<(std::ostream& out, const GetLatestCommittedCompactionInfoResponse& obj);

typedef struct _AddDynamicPartitions__isset {
  _AddDynamicPartitions__isset() : operationType(true) {}
  bool operationType :1;
} _AddDynamicPartitions__isset;

class AddDynamicPartitions {
 public:

  AddDynamicPartitions(const AddDynamicPartitions&);
  AddDynamicPartitions(AddDynamicPartitions&&);
  AddDynamicPartitions& operator=(const AddDynamicPartitions&);
  AddDynamicPartitions& operator=(AddDynamicPartitions&&);
  AddDynamicPartitions() : txnid(0), writeid(0), dbname(), tablename(), operationType((DataOperationType::type)5) {
    operationType = (DataOperationType::type)5;

  }

  virtual ~AddDynamicPartitions() throw();
  int64_t txnid;
  int64_t writeid;
  std::string dbname;
  std::string tablename;
  std::vector<std::string>  partitionnames;
  DataOperationType::type operationType;

  _AddDynamicPartitions__isset __isset;

  void __set_txnid(const int64_t val);

  void __set_writeid(const int64_t val);

  void __set_dbname(const std::string& val);

  void __set_tablename(const std::string& val);

  void __set_partitionnames(const std::vector<std::string> & val);

  void __set_operationType(const DataOperationType::type val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddDynamicPartitions &a, AddDynamicPartitions &b);

std::ostream& operator<<(std::ostream& out, const AddDynamicPartitions& obj);

typedef struct _BasicTxnInfo__isset {
  _BasicTxnInfo__isset() : time(false), txnid(false), dbname(false), tablename(false), partitionname(false) {}
  bool time :1;
  bool txnid :1;
  bool dbname :1;
  bool tablename :1;
  bool partitionname :1;
} _BasicTxnInfo__isset;

class BasicTxnInfo {
 public:

  BasicTxnInfo(const BasicTxnInfo&);
  BasicTxnInfo(BasicTxnInfo&&);
  BasicTxnInfo& operator=(const BasicTxnInfo&);
  BasicTxnInfo& operator=(BasicTxnInfo&&);
  BasicTxnInfo() : isnull(0), time(0), txnid(0), dbname(), tablename(), partitionname() {
  }

  virtual ~BasicTxnInfo() throw();
  bool isnull;
  int64_t time;
  int64_t txnid;
  std::string dbname;
  std::string tablename;
  std::string partitionname;

  _BasicTxnInfo__isset __isset;

  void __set_isnull(const bool val);

  void __set_time(const int64_t val);

  void __set_txnid(const int64_t val);

  void __set_dbname(const std::string& val);

  void __set_tablename(const std::string& val);

  void __set_partitionname(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BasicTxnInfo &a, BasicTxnInfo &b);

std::ostream& operator<<(std::ostream& out, const BasicTxnInfo& obj);

typedef struct _NotificationEventRequest__isset {
  _NotificationEventRequest__isset() : maxEvents(false), eventTypeSkipList(false) {}
  bool maxEvents :1;
  bool eventTypeSkipList :1;
} _NotificationEventRequest__isset;

class NotificationEventRequest {
 public:

  NotificationEventRequest(const NotificationEventRequest&);
  NotificationEventRequest(NotificationEventRequest&&);
  NotificationEventRequest& operator=(const NotificationEventRequest&);
  NotificationEventRequest& operator=(NotificationEventRequest&&);
  NotificationEventRequest() : lastEvent(0), maxEvents(0) {
  }

  virtual ~NotificationEventRequest() throw();
  int64_t lastEvent;
  int32_t maxEvents;
  std::vector<std::string>  eventTypeSkipList;

  _NotificationEventRequest__isset __isset;

  void __set_lastEvent(const int64_t val);

  void __set_maxEvents(const int32_t val);

  void __set_eventTypeSkipList(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotificationEventRequest &a, NotificationEventRequest &b);

std::ostream& operator<<(std::ostream& out, const NotificationEventRequest& obj);

typedef struct _NotificationEvent__isset {
  _NotificationEvent__isset() : dbName(false), tableName(false), messageFormat(false), catName(false) {}
  bool dbName :1;
  bool tableName :1;
  bool messageFormat :1;
  bool catName :1;
} _NotificationEvent__isset;

class NotificationEvent {
 public:

  NotificationEvent(const NotificationEvent&);
  NotificationEvent(NotificationEvent&&);
  NotificationEvent& operator=(const NotificationEvent&);
  NotificationEvent& operator=(NotificationEvent&&);
  NotificationEvent() : eventId(0), eventTime(0), eventType(), dbName(), tableName(), message(), messageFormat(), catName() {
  }

  virtual ~NotificationEvent() throw();
  int64_t eventId;
  int32_t eventTime;
  std::string eventType;
  std::string dbName;
  std::string tableName;
  std::string message;
  std::string messageFormat;
  std::string catName;

  _NotificationEvent__isset __isset;

  void __set_eventId(const int64_t val);

  void __set_eventTime(const int32_t val);

  void __set_eventType(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_message(const std::string& val);

  void __set_messageFormat(const std::string& val);

  void __set_catName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotificationEvent &a, NotificationEvent &b);

std::ostream& operator<<(std::ostream& out, const NotificationEvent& obj);


class NotificationEventResponse {
 public:

  NotificationEventResponse(const NotificationEventResponse&);
  NotificationEventResponse(NotificationEventResponse&&);
  NotificationEventResponse& operator=(const NotificationEventResponse&);
  NotificationEventResponse& operator=(NotificationEventResponse&&);
  NotificationEventResponse() {
  }

  virtual ~NotificationEventResponse() throw();
  std::vector<NotificationEvent>  events;

  void __set_events(const std::vector<NotificationEvent> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotificationEventResponse &a, NotificationEventResponse &b);

std::ostream& operator<<(std::ostream& out, const NotificationEventResponse& obj);


class CurrentNotificationEventId {
 public:

  CurrentNotificationEventId(const CurrentNotificationEventId&);
  CurrentNotificationEventId(CurrentNotificationEventId&&);
  CurrentNotificationEventId& operator=(const CurrentNotificationEventId&);
  CurrentNotificationEventId& operator=(CurrentNotificationEventId&&);
  CurrentNotificationEventId() : eventId(0) {
  }

  virtual ~CurrentNotificationEventId() throw();
  int64_t eventId;

  void __set_eventId(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CurrentNotificationEventId &a, CurrentNotificationEventId &b);

std::ostream& operator<<(std::ostream& out, const CurrentNotificationEventId& obj);

typedef struct _NotificationEventsCountRequest__isset {
  _NotificationEventsCountRequest__isset() : catName(false), toEventId(false), limit(false) {}
  bool catName :1;
  bool toEventId :1;
  bool limit :1;
} _NotificationEventsCountRequest__isset;

class NotificationEventsCountRequest {
 public:

  NotificationEventsCountRequest(const NotificationEventsCountRequest&);
  NotificationEventsCountRequest(NotificationEventsCountRequest&&);
  NotificationEventsCountRequest& operator=(const NotificationEventsCountRequest&);
  NotificationEventsCountRequest& operator=(NotificationEventsCountRequest&&);
  NotificationEventsCountRequest() : fromEventId(0), dbName(), catName(), toEventId(0), limit(0) {
  }

  virtual ~NotificationEventsCountRequest() throw();
  int64_t fromEventId;
  std::string dbName;
  std::string catName;
  int64_t toEventId;
  int64_t limit;

  _NotificationEventsCountRequest__isset __isset;

  void __set_fromEventId(const int64_t val);

  void __set_dbName(const std::string& val);

  void __set_catName(const std::string& val);

  void __set_toEventId(const int64_t val);

  void __set_limit(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotificationEventsCountRequest &a, NotificationEventsCountRequest &b);

std::ostream& operator<<(std::ostream& out, const NotificationEventsCountRequest& obj);


class NotificationEventsCountResponse {
 public:

  NotificationEventsCountResponse(const NotificationEventsCountResponse&);
  NotificationEventsCountResponse(NotificationEventsCountResponse&&);
  NotificationEventsCountResponse& operator=(const NotificationEventsCountResponse&);
  NotificationEventsCountResponse& operator=(NotificationEventsCountResponse&&);
  NotificationEventsCountResponse() : eventsCount(0) {
  }

  virtual ~NotificationEventsCountResponse() throw();
  int64_t eventsCount;

  void __set_eventsCount(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NotificationEventsCountResponse &a, NotificationEventsCountResponse &b);

std::ostream& operator<<(std::ostream& out, const NotificationEventsCountResponse& obj);

typedef struct _InsertEventRequestData__isset {
  _InsertEventRequestData__isset() : replace(false), filesAddedChecksum(false), subDirectoryList(false), partitionVal(false) {}
  bool replace :1;
  bool filesAddedChecksum :1;
  bool subDirectoryList :1;
  bool partitionVal :1;
} _InsertEventRequestData__isset;

class InsertEventRequestData {
 public:

  InsertEventRequestData(const InsertEventRequestData&);
  InsertEventRequestData(InsertEventRequestData&&);
  InsertEventRequestData& operator=(const InsertEventRequestData&);
  InsertEventRequestData& operator=(InsertEventRequestData&&);
  InsertEventRequestData() : replace(0) {
  }

  virtual ~InsertEventRequestData() throw();
  bool replace;
  std::vector<std::string>  filesAdded;
  std::vector<std::string>  filesAddedChecksum;
  std::vector<std::string>  subDirectoryList;
  std::vector<std::string>  partitionVal;

  _InsertEventRequestData__isset __isset;

  void __set_replace(const bool val);

  void __set_filesAdded(const std::vector<std::string> & val);

  void __set_filesAddedChecksum(const std::vector<std::string> & val);

  void __set_subDirectoryList(const std::vector<std::string> & val);

  void __set_partitionVal(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InsertEventRequestData &a, InsertEventRequestData &b);

std::ostream& operator<<(std::ostream& out, const InsertEventRequestData& obj);

typedef struct _FireEventRequestData__isset {
  _FireEventRequestData__isset() : insertData(false), insertDatas(false) {}
  bool insertData :1;
  bool insertDatas :1;
} _FireEventRequestData__isset;

class FireEventRequestData {
 public:

  FireEventRequestData(const FireEventRequestData&);
  FireEventRequestData(FireEventRequestData&&);
  FireEventRequestData& operator=(const FireEventRequestData&);
  FireEventRequestData& operator=(FireEventRequestData&&);
  FireEventRequestData() {
  }

  virtual ~FireEventRequestData() throw();
  InsertEventRequestData insertData;
  std::vector<InsertEventRequestData>  insertDatas;

  _FireEventRequestData__isset __isset;

  void __set_insertData(const InsertEventRequestData& val);

  void __set_insertDatas(const std::vector<InsertEventRequestData> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FireEventRequestData &a, FireEventRequestData &b);

std::ostream& operator<<(std::ostream& out, const FireEventRequestData& obj);

typedef struct _FireEventRequest__isset {
  _FireEventRequest__isset() : dbName(false), tableName(false), partitionVals(false), catName(false) {}
  bool dbName :1;
  bool tableName :1;
  bool partitionVals :1;
  bool catName :1;
} _FireEventRequest__isset;

class FireEventRequest {
 public:

  FireEventRequest(const FireEventRequest&);
  FireEventRequest(FireEventRequest&&);
  FireEventRequest& operator=(const FireEventRequest&);
  FireEventRequest& operator=(FireEventRequest&&);
  FireEventRequest() : successful(0), dbName(), tableName(), catName() {
  }

  virtual ~FireEventRequest() throw();
  bool successful;
  FireEventRequestData data;
  std::string dbName;
  std::string tableName;
  std::vector<std::string>  partitionVals;
  std::string catName;

  _FireEventRequest__isset __isset;

  void __set_successful(const bool val);

  void __set_data(const FireEventRequestData& val);

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_partitionVals(const std::vector<std::string> & val);

  void __set_catName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FireEventRequest &a, FireEventRequest &b);

std::ostream& operator<<(std::ostream& out, const FireEventRequest& obj);

typedef struct _FireEventResponse__isset {
  _FireEventResponse__isset() : eventIds(false) {}
  bool eventIds :1;
} _FireEventResponse__isset;

class FireEventResponse {
 public:

  FireEventResponse(const FireEventResponse&);
  FireEventResponse(FireEventResponse&&);
  FireEventResponse& operator=(const FireEventResponse&);
  FireEventResponse& operator=(FireEventResponse&&);
  FireEventResponse() {
  }

  virtual ~FireEventResponse() throw();
  std::vector<int64_t>  eventIds;

  _FireEventResponse__isset __isset;

  void __set_eventIds(const std::vector<int64_t> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FireEventResponse &a, FireEventResponse &b);

std::ostream& operator<<(std::ostream& out, const FireEventResponse& obj);

typedef struct _WriteNotificationLogRequest__isset {
  _WriteNotificationLogRequest__isset() : partitionVals(false) {}
  bool partitionVals :1;
} _WriteNotificationLogRequest__isset;

class WriteNotificationLogRequest {
 public:

  WriteNotificationLogRequest(const WriteNotificationLogRequest&);
  WriteNotificationLogRequest(WriteNotificationLogRequest&&);
  WriteNotificationLogRequest& operator=(const WriteNotificationLogRequest&);
  WriteNotificationLogRequest& operator=(WriteNotificationLogRequest&&);
  WriteNotificationLogRequest() : txnId(0), writeId(0), db(), table() {
  }

  virtual ~WriteNotificationLogRequest() throw();
  int64_t txnId;
  int64_t writeId;
  std::string db;
  std::string table;
  InsertEventRequestData fileInfo;
  std::vector<std::string>  partitionVals;

  _WriteNotificationLogRequest__isset __isset;

  void __set_txnId(const int64_t val);

  void __set_writeId(const int64_t val);

  void __set_db(const std::string& val);

  void __set_table(const std::string& val);

  void __set_fileInfo(const InsertEventRequestData& val);

  void __set_partitionVals(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WriteNotificationLogRequest &a, WriteNotificationLogRequest &b);

std::ostream& operator<<(std::ostream& out, const WriteNotificationLogRequest& obj);


class WriteNotificationLogResponse {
 public:

  WriteNotificationLogResponse(const WriteNotificationLogResponse&);
  WriteNotificationLogResponse(WriteNotificationLogResponse&&);
  WriteNotificationLogResponse& operator=(const WriteNotificationLogResponse&);
  WriteNotificationLogResponse& operator=(WriteNotificationLogResponse&&);
  WriteNotificationLogResponse() {
  }

  virtual ~WriteNotificationLogResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WriteNotificationLogResponse &a, WriteNotificationLogResponse &b);

std::ostream& operator<<(std::ostream& out, const WriteNotificationLogResponse& obj);

typedef struct _MetadataPpdResult__isset {
  _MetadataPpdResult__isset() : metadata(false), includeBitset(false) {}
  bool metadata :1;
  bool includeBitset :1;
} _MetadataPpdResult__isset;

class MetadataPpdResult {
 public:

  MetadataPpdResult(const MetadataPpdResult&);
  MetadataPpdResult(MetadataPpdResult&&);
  MetadataPpdResult& operator=(const MetadataPpdResult&);
  MetadataPpdResult& operator=(MetadataPpdResult&&);
  MetadataPpdResult() : metadata(), includeBitset() {
  }

  virtual ~MetadataPpdResult() throw();
  std::string metadata;
  std::string includeBitset;

  _MetadataPpdResult__isset __isset;

  void __set_metadata(const std::string& val);

  void __set_includeBitset(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MetadataPpdResult &a, MetadataPpdResult &b);

std::ostream& operator<<(std::ostream& out, const MetadataPpdResult& obj);


class GetFileMetadataByExprResult {
 public:

  GetFileMetadataByExprResult(const GetFileMetadataByExprResult&);
  GetFileMetadataByExprResult(GetFileMetadataByExprResult&&);
  GetFileMetadataByExprResult& operator=(const GetFileMetadataByExprResult&);
  GetFileMetadataByExprResult& operator=(GetFileMetadataByExprResult&&);
  GetFileMetadataByExprResult() : isSupported(0) {
  }

  virtual ~GetFileMetadataByExprResult() throw();
  std::map<int64_t, MetadataPpdResult>  metadata;
  bool isSupported;

  void __set_metadata(const std::map<int64_t, MetadataPpdResult> & val);

  void __set_isSupported(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetFileMetadataByExprResult &a, GetFileMetadataByExprResult &b);

std::ostream& operator<<(std::ostream& out, const GetFileMetadataByExprResult& obj);

typedef struct _GetFileMetadataByExprRequest__isset {
  _GetFileMetadataByExprRequest__isset() : doGetFooters(false), type(false) {}
  bool doGetFooters :1;
  bool type :1;
} _GetFileMetadataByExprRequest__isset;

class GetFileMetadataByExprRequest {
 public:

  GetFileMetadataByExprRequest(const GetFileMetadataByExprRequest&);
  GetFileMetadataByExprRequest(GetFileMetadataByExprRequest&&);
  GetFileMetadataByExprRequest& operator=(const GetFileMetadataByExprRequest&);
  GetFileMetadataByExprRequest& operator=(GetFileMetadataByExprRequest&&);
  GetFileMetadataByExprRequest() : expr(), doGetFooters(0), type((FileMetadataExprType::type)0) {
  }

  virtual ~GetFileMetadataByExprRequest() throw();
  std::vector<int64_t>  fileIds;
  std::string expr;
  bool doGetFooters;
  FileMetadataExprType::type type;

  _GetFileMetadataByExprRequest__isset __isset;

  void __set_fileIds(const std::vector<int64_t> & val);

  void __set_expr(const std::string& val);

  void __set_doGetFooters(const bool val);

  void __set_type(const FileMetadataExprType::type val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetFileMetadataByExprRequest &a, GetFileMetadataByExprRequest &b);

std::ostream& operator<<(std::ostream& out, const GetFileMetadataByExprRequest& obj);


class GetFileMetadataResult {
 public:

  GetFileMetadataResult(const GetFileMetadataResult&);
  GetFileMetadataResult(GetFileMetadataResult&&);
  GetFileMetadataResult& operator=(const GetFileMetadataResult&);
  GetFileMetadataResult& operator=(GetFileMetadataResult&&);
  GetFileMetadataResult() : isSupported(0) {
  }

  virtual ~GetFileMetadataResult() throw();
  std::map<int64_t, std::string>  metadata;
  bool isSupported;

  void __set_metadata(const std::map<int64_t, std::string> & val);

  void __set_isSupported(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetFileMetadataResult &a, GetFileMetadataResult &b);

std::ostream& operator<<(std::ostream& out, const GetFileMetadataResult& obj);


class GetFileMetadataRequest {
 public:

  GetFileMetadataRequest(const GetFileMetadataRequest&);
  GetFileMetadataRequest(GetFileMetadataRequest&&);
  GetFileMetadataRequest& operator=(const GetFileMetadataRequest&);
  GetFileMetadataRequest& operator=(GetFileMetadataRequest&&);
  GetFileMetadataRequest() {
  }

  virtual ~GetFileMetadataRequest() throw();
  std::vector<int64_t>  fileIds;

  void __set_fileIds(const std::vector<int64_t> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetFileMetadataRequest &a, GetFileMetadataRequest &b);

std::ostream& operator<<(std::ostream& out, const GetFileMetadataRequest& obj);


class PutFileMetadataResult {
 public:

  PutFileMetadataResult(const PutFileMetadataResult&);
  PutFileMetadataResult(PutFileMetadataResult&&);
  PutFileMetadataResult& operator=(const PutFileMetadataResult&);
  PutFileMetadataResult& operator=(PutFileMetadataResult&&);
  PutFileMetadataResult() {
  }

  virtual ~PutFileMetadataResult() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PutFileMetadataResult &a, PutFileMetadataResult &b);

std::ostream& operator<<(std::ostream& out, const PutFileMetadataResult& obj);

typedef struct _PutFileMetadataRequest__isset {
  _PutFileMetadataRequest__isset() : type(false) {}
  bool type :1;
} _PutFileMetadataRequest__isset;

class PutFileMetadataRequest {
 public:

  PutFileMetadataRequest(const PutFileMetadataRequest&);
  PutFileMetadataRequest(PutFileMetadataRequest&&);
  PutFileMetadataRequest& operator=(const PutFileMetadataRequest&);
  PutFileMetadataRequest& operator=(PutFileMetadataRequest&&);
  PutFileMetadataRequest() : type((FileMetadataExprType::type)0) {
  }

  virtual ~PutFileMetadataRequest() throw();
  std::vector<int64_t>  fileIds;
  std::vector<std::string>  metadata;
  FileMetadataExprType::type type;

  _PutFileMetadataRequest__isset __isset;

  void __set_fileIds(const std::vector<int64_t> & val);

  void __set_metadata(const std::vector<std::string> & val);

  void __set_type(const FileMetadataExprType::type val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PutFileMetadataRequest &a, PutFileMetadataRequest &b);

std::ostream& operator<<(std::ostream& out, const PutFileMetadataRequest& obj);


class ClearFileMetadataResult {
 public:

  ClearFileMetadataResult(const ClearFileMetadataResult&);
  ClearFileMetadataResult(ClearFileMetadataResult&&);
  ClearFileMetadataResult& operator=(const ClearFileMetadataResult&);
  ClearFileMetadataResult& operator=(ClearFileMetadataResult&&);
  ClearFileMetadataResult() {
  }

  virtual ~ClearFileMetadataResult() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClearFileMetadataResult &a, ClearFileMetadataResult &b);

std::ostream& operator<<(std::ostream& out, const ClearFileMetadataResult& obj);


class ClearFileMetadataRequest {
 public:

  ClearFileMetadataRequest(const ClearFileMetadataRequest&);
  ClearFileMetadataRequest(ClearFileMetadataRequest&&);
  ClearFileMetadataRequest& operator=(const ClearFileMetadataRequest&);
  ClearFileMetadataRequest& operator=(ClearFileMetadataRequest&&);
  ClearFileMetadataRequest() {
  }

  virtual ~ClearFileMetadataRequest() throw();
  std::vector<int64_t>  fileIds;

  void __set_fileIds(const std::vector<int64_t> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClearFileMetadataRequest &a, ClearFileMetadataRequest &b);

std::ostream& operator<<(std::ostream& out, const ClearFileMetadataRequest& obj);


class CacheFileMetadataResult {
 public:

  CacheFileMetadataResult(const CacheFileMetadataResult&);
  CacheFileMetadataResult(CacheFileMetadataResult&&);
  CacheFileMetadataResult& operator=(const CacheFileMetadataResult&);
  CacheFileMetadataResult& operator=(CacheFileMetadataResult&&);
  CacheFileMetadataResult() : isSupported(0) {
  }

  virtual ~CacheFileMetadataResult() throw();
  bool isSupported;

  void __set_isSupported(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CacheFileMetadataResult &a, CacheFileMetadataResult &b);

std::ostream& operator<<(std::ostream& out, const CacheFileMetadataResult& obj);

typedef struct _CacheFileMetadataRequest__isset {
  _CacheFileMetadataRequest__isset() : partName(false), isAllParts(false) {}
  bool partName :1;
  bool isAllParts :1;
} _CacheFileMetadataRequest__isset;

class CacheFileMetadataRequest {
 public:

  CacheFileMetadataRequest(const CacheFileMetadataRequest&);
  CacheFileMetadataRequest(CacheFileMetadataRequest&&);
  CacheFileMetadataRequest& operator=(const CacheFileMetadataRequest&);
  CacheFileMetadataRequest& operator=(CacheFileMetadataRequest&&);
  CacheFileMetadataRequest() : dbName(), tblName(), partName(), isAllParts(0) {
  }

  virtual ~CacheFileMetadataRequest() throw();
  std::string dbName;
  std::string tblName;
  std::string partName;
  bool isAllParts;

  _CacheFileMetadataRequest__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_partName(const std::string& val);

  void __set_isAllParts(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CacheFileMetadataRequest &a, CacheFileMetadataRequest &b);

std::ostream& operator<<(std::ostream& out, const CacheFileMetadataRequest& obj);

typedef struct _GetAllFunctionsResponse__isset {
  _GetAllFunctionsResponse__isset() : functions(false) {}
  bool functions :1;
} _GetAllFunctionsResponse__isset;

class GetAllFunctionsResponse {
 public:

  GetAllFunctionsResponse(const GetAllFunctionsResponse&);
  GetAllFunctionsResponse(GetAllFunctionsResponse&&);
  GetAllFunctionsResponse& operator=(const GetAllFunctionsResponse&);
  GetAllFunctionsResponse& operator=(GetAllFunctionsResponse&&);
  GetAllFunctionsResponse() {
  }

  virtual ~GetAllFunctionsResponse() throw();
  std::vector<Function>  functions;

  _GetAllFunctionsResponse__isset __isset;

  void __set_functions(const std::vector<Function> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetAllFunctionsResponse &a, GetAllFunctionsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetAllFunctionsResponse& obj);


class ClientCapabilities {
 public:

  ClientCapabilities(const ClientCapabilities&);
  ClientCapabilities(ClientCapabilities&&);
  ClientCapabilities& operator=(const ClientCapabilities&);
  ClientCapabilities& operator=(ClientCapabilities&&);
  ClientCapabilities() {
  }

  virtual ~ClientCapabilities() throw();
  std::vector<ClientCapability::type>  values;

  void __set_values(const std::vector<ClientCapability::type> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ClientCapabilities &a, ClientCapabilities &b);

std::ostream& operator<<(std::ostream& out, const ClientCapabilities& obj);

typedef struct _GetProjectionsSpec__isset {
  _GetProjectionsSpec__isset() : fieldList(false), includeParamKeyPattern(false), excludeParamKeyPattern(false) {}
  bool fieldList :1;
  bool includeParamKeyPattern :1;
  bool excludeParamKeyPattern :1;
} _GetProjectionsSpec__isset;

class GetProjectionsSpec {
 public:

  GetProjectionsSpec(const GetProjectionsSpec&);
  GetProjectionsSpec(GetProjectionsSpec&&);
  GetProjectionsSpec& operator=(const GetProjectionsSpec&);
  GetProjectionsSpec& operator=(GetProjectionsSpec&&);
  GetProjectionsSpec() : includeParamKeyPattern(), excludeParamKeyPattern() {
  }

  virtual ~GetProjectionsSpec() throw();
  std::vector<std::string>  fieldList;
  std::string includeParamKeyPattern;
  std::string excludeParamKeyPattern;

  _GetProjectionsSpec__isset __isset;

  void __set_fieldList(const std::vector<std::string> & val);

  void __set_includeParamKeyPattern(const std::string& val);

  void __set_excludeParamKeyPattern(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetProjectionsSpec &a, GetProjectionsSpec &b);

std::ostream& operator<<(std::ostream& out, const GetProjectionsSpec& obj);

typedef struct _GetTableRequest__isset {
  _GetTableRequest__isset() : capabilities(false), catName(false), validWriteIdList(false), getColumnStats(false), processorCapabilities(false), processorIdentifier(false), engine(false), id(true), getFileMetadata(false) {}
  bool capabilities :1;
  bool catName :1;
  bool validWriteIdList :1;
  bool getColumnStats :1;
  bool processorCapabilities :1;
  bool processorIdentifier :1;
  bool engine :1;
  bool id :1;
  bool getFileMetadata :1;
} _GetTableRequest__isset;

class GetTableRequest {
 public:

  GetTableRequest(const GetTableRequest&);
  GetTableRequest(GetTableRequest&&);
  GetTableRequest& operator=(const GetTableRequest&);
  GetTableRequest& operator=(GetTableRequest&&);
  GetTableRequest() : dbName(), tblName(), catName(), validWriteIdList(), getColumnStats(0), processorIdentifier(), engine(), id(-1LL), getFileMetadata(0) {
  }

  virtual ~GetTableRequest() throw();
  std::string dbName;
  std::string tblName;
  ClientCapabilities capabilities;
  std::string catName;
  std::string validWriteIdList;
  bool getColumnStats;
  std::vector<std::string>  processorCapabilities;
  std::string processorIdentifier;
  std::string engine;
  int64_t id;
  bool getFileMetadata;

  _GetTableRequest__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_capabilities(const ClientCapabilities& val);

  void __set_catName(const std::string& val);

  void __set_validWriteIdList(const std::string& val);

  void __set_getColumnStats(const bool val);

  void __set_processorCapabilities(const std::vector<std::string> & val);

  void __set_processorIdentifier(const std::string& val);

  void __set_engine(const std::string& val);

  void __set_id(const int64_t val);

  void __set_getFileMetadata(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetTableRequest &a, GetTableRequest &b);

std::ostream& operator<<(std::ostream& out, const GetTableRequest& obj);

typedef struct _GetTableResult__isset {
  _GetTableResult__isset() : isStatsCompliant(false) {}
  bool isStatsCompliant :1;
} _GetTableResult__isset;

class GetTableResult {
 public:

  GetTableResult(const GetTableResult&);
  GetTableResult(GetTableResult&&);
  GetTableResult& operator=(const GetTableResult&);
  GetTableResult& operator=(GetTableResult&&);
  GetTableResult() : isStatsCompliant(0) {
  }

  virtual ~GetTableResult() throw();
  Table table;
  bool isStatsCompliant;

  _GetTableResult__isset __isset;

  void __set_table(const Table& val);

  void __set_isStatsCompliant(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetTableResult &a, GetTableResult &b);

std::ostream& operator<<(std::ostream& out, const GetTableResult& obj);

typedef struct _GetTablesRequest__isset {
  _GetTablesRequest__isset() : tblNames(false), capabilities(false), catName(false), processorCapabilities(false), processorIdentifier(false), projectionSpec(false), tablesPattern(false) {}
  bool tblNames :1;
  bool capabilities :1;
  bool catName :1;
  bool processorCapabilities :1;
  bool processorIdentifier :1;
  bool projectionSpec :1;
  bool tablesPattern :1;
} _GetTablesRequest__isset;

class GetTablesRequest {
 public:

  GetTablesRequest(const GetTablesRequest&);
  GetTablesRequest(GetTablesRequest&&);
  GetTablesRequest& operator=(const GetTablesRequest&);
  GetTablesRequest& operator=(GetTablesRequest&&);
  GetTablesRequest() : dbName(), catName(), processorIdentifier(), tablesPattern() {
  }

  virtual ~GetTablesRequest() throw();
  std::string dbName;
  std::vector<std::string>  tblNames;
  ClientCapabilities capabilities;
  std::string catName;
  std::vector<std::string>  processorCapabilities;
  std::string processorIdentifier;
  GetProjectionsSpec projectionSpec;
  std::string tablesPattern;

  _GetTablesRequest__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tblNames(const std::vector<std::string> & val);

  void __set_capabilities(const ClientCapabilities& val);

  void __set_catName(const std::string& val);

  void __set_processorCapabilities(const std::vector<std::string> & val);

  void __set_processorIdentifier(const std::string& val);

  void __set_projectionSpec(const GetProjectionsSpec& val);

  void __set_tablesPattern(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetTablesRequest &a, GetTablesRequest &b);

std::ostream& operator<<(std::ostream& out, const GetTablesRequest& obj);


class GetTablesResult {
 public:

  GetTablesResult(const GetTablesResult&);
  GetTablesResult(GetTablesResult&&);
  GetTablesResult& operator=(const GetTablesResult&);
  GetTablesResult& operator=(GetTablesResult&&);
  GetTablesResult() {
  }

  virtual ~GetTablesResult() throw();
  std::vector<Table>  tables;

  void __set_tables(const std::vector<Table> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetTablesResult &a, GetTablesResult &b);

std::ostream& operator<<(std::ostream& out, const GetTablesResult& obj);

typedef struct _GetTablesExtRequest__isset {
  _GetTablesExtRequest__isset() : limit(false), processorCapabilities(false), processorIdentifier(false) {}
  bool limit :1;
  bool processorCapabilities :1;
  bool processorIdentifier :1;
} _GetTablesExtRequest__isset;

class GetTablesExtRequest {
 public:

  GetTablesExtRequest(const GetTablesExtRequest&);
  GetTablesExtRequest(GetTablesExtRequest&&);
  GetTablesExtRequest& operator=(const GetTablesExtRequest&);
  GetTablesExtRequest& operator=(GetTablesExtRequest&&);
  GetTablesExtRequest() : catalog(), database(), tableNamePattern(), requestedFields(0), limit(0), processorIdentifier() {
  }

  virtual ~GetTablesExtRequest() throw();
  std::string catalog;
  std::string database;
  std::string tableNamePattern;
  int32_t requestedFields;
  int32_t limit;
  std::vector<std::string>  processorCapabilities;
  std::string processorIdentifier;

  _GetTablesExtRequest__isset __isset;

  void __set_catalog(const std::string& val);

  void __set_database(const std::string& val);

  void __set_tableNamePattern(const std::string& val);

  void __set_requestedFields(const int32_t val);

  void __set_limit(const int32_t val);

  void __set_processorCapabilities(const std::vector<std::string> & val);

  void __set_processorIdentifier(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetTablesExtRequest &a, GetTablesExtRequest &b);

std::ostream& operator<<(std::ostream& out, const GetTablesExtRequest& obj);

typedef struct _ExtendedTableInfo__isset {
  _ExtendedTableInfo__isset() : accessType(false), requiredReadCapabilities(false), requiredWriteCapabilities(false) {}
  bool accessType :1;
  bool requiredReadCapabilities :1;
  bool requiredWriteCapabilities :1;
} _ExtendedTableInfo__isset;

class ExtendedTableInfo {
 public:

  ExtendedTableInfo(const ExtendedTableInfo&);
  ExtendedTableInfo(ExtendedTableInfo&&);
  ExtendedTableInfo& operator=(const ExtendedTableInfo&);
  ExtendedTableInfo& operator=(ExtendedTableInfo&&);
  ExtendedTableInfo() : tblName(), accessType(0) {
  }

  virtual ~ExtendedTableInfo() throw();
  std::string tblName;
  int32_t accessType;
  std::vector<std::string>  requiredReadCapabilities;
  std::vector<std::string>  requiredWriteCapabilities;

  _ExtendedTableInfo__isset __isset;

  void __set_tblName(const std::string& val);

  void __set_accessType(const int32_t val);

  void __set_requiredReadCapabilities(const std::vector<std::string> & val);

  void __set_requiredWriteCapabilities(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ExtendedTableInfo &a, ExtendedTableInfo &b);

std::ostream& operator<<(std::ostream& out, const ExtendedTableInfo& obj);

typedef struct _GetDatabaseRequest__isset {
  _GetDatabaseRequest__isset() : name(false), catalogName(false), processorCapabilities(false), processorIdentifier(false) {}
  bool name :1;
  bool catalogName :1;
  bool processorCapabilities :1;
  bool processorIdentifier :1;
} _GetDatabaseRequest__isset;

class GetDatabaseRequest {
 public:

  GetDatabaseRequest(const GetDatabaseRequest&);
  GetDatabaseRequest(GetDatabaseRequest&&);
  GetDatabaseRequest& operator=(const GetDatabaseRequest&);
  GetDatabaseRequest& operator=(GetDatabaseRequest&&);
  GetDatabaseRequest() : name(), catalogName(), processorIdentifier() {
  }

  virtual ~GetDatabaseRequest() throw();
  std::string name;
  std::string catalogName;
  std::vector<std::string>  processorCapabilities;
  std::string processorIdentifier;

  _GetDatabaseRequest__isset __isset;

  void __set_name(const std::string& val);

  void __set_catalogName(const std::string& val);

  void __set_processorCapabilities(const std::vector<std::string> & val);

  void __set_processorIdentifier(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetDatabaseRequest &a, GetDatabaseRequest &b);

std::ostream& operator<<(std::ostream& out, const GetDatabaseRequest& obj);


class CmRecycleRequest {
 public:

  CmRecycleRequest(const CmRecycleRequest&);
  CmRecycleRequest(CmRecycleRequest&&);
  CmRecycleRequest& operator=(const CmRecycleRequest&);
  CmRecycleRequest& operator=(CmRecycleRequest&&);
  CmRecycleRequest() : dataPath(), purge(0) {
  }

  virtual ~CmRecycleRequest() throw();
  std::string dataPath;
  bool purge;

  void __set_dataPath(const std::string& val);

  void __set_purge(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CmRecycleRequest &a, CmRecycleRequest &b);

std::ostream& operator<<(std::ostream& out, const CmRecycleRequest& obj);


class CmRecycleResponse {
 public:

  CmRecycleResponse(const CmRecycleResponse&);
  CmRecycleResponse(CmRecycleResponse&&);
  CmRecycleResponse& operator=(const CmRecycleResponse&);
  CmRecycleResponse& operator=(CmRecycleResponse&&);
  CmRecycleResponse() {
  }

  virtual ~CmRecycleResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CmRecycleResponse &a, CmRecycleResponse &b);

std::ostream& operator<<(std::ostream& out, const CmRecycleResponse& obj);

typedef struct _TableMeta__isset {
  _TableMeta__isset() : comments(false), catName(false) {}
  bool comments :1;
  bool catName :1;
} _TableMeta__isset;

class TableMeta {
 public:

  TableMeta(const TableMeta&);
  TableMeta(TableMeta&&);
  TableMeta& operator=(const TableMeta&);
  TableMeta& operator=(TableMeta&&);
  TableMeta() : dbName(), tableName(), tableType(), comments(), catName() {
  }

  virtual ~TableMeta() throw();
  std::string dbName;
  std::string tableName;
  std::string tableType;
  std::string comments;
  std::string catName;

  _TableMeta__isset __isset;

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_tableType(const std::string& val);

  void __set_comments(const std::string& val);

  void __set_catName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TableMeta &a, TableMeta &b);

std::ostream& operator<<(std::ostream& out, const TableMeta& obj);


class Materialization {
 public:

  Materialization(const Materialization&);
  Materialization(Materialization&&);
  Materialization& operator=(const Materialization&);
  Materialization& operator=(Materialization&&);
  Materialization() : sourceTablesUpdateDeleteModified(0), sourceTablesCompacted(0) {
  }

  virtual ~Materialization() throw();
  bool sourceTablesUpdateDeleteModified;
  bool sourceTablesCompacted;

  void __set_sourceTablesUpdateDeleteModified(const bool val);

  void __set_sourceTablesCompacted(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Materialization &a, Materialization &b);

std::ostream& operator<<(std::ostream& out, const Materialization& obj);

typedef struct _WMResourcePlan__isset {
  _WMResourcePlan__isset() : status(false), queryParallelism(false), defaultPoolPath(false) {}
  bool status :1;
  bool queryParallelism :1;
  bool defaultPoolPath :1;
} _WMResourcePlan__isset;

class WMResourcePlan {
 public:

  WMResourcePlan(const WMResourcePlan&);
  WMResourcePlan(WMResourcePlan&&);
  WMResourcePlan& operator=(const WMResourcePlan&);
  WMResourcePlan& operator=(WMResourcePlan&&);
  WMResourcePlan() : name(), status((WMResourcePlanStatus::type)0), queryParallelism(0), defaultPoolPath() {
  }

  virtual ~WMResourcePlan() throw();
  std::string name;
  WMResourcePlanStatus::type status;
  int32_t queryParallelism;
  std::string defaultPoolPath;

  _WMResourcePlan__isset __isset;

  void __set_name(const std::string& val);

  void __set_status(const WMResourcePlanStatus::type val);

  void __set_queryParallelism(const int32_t val);

  void __set_defaultPoolPath(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMResourcePlan &a, WMResourcePlan &b);

std::ostream& operator<<(std::ostream& out, const WMResourcePlan& obj);

typedef struct _WMNullableResourcePlan__isset {
  _WMNullableResourcePlan__isset() : name(false), status(false), queryParallelism(false), isSetQueryParallelism(false), defaultPoolPath(false), isSetDefaultPoolPath(false) {}
  bool name :1;
  bool status :1;
  bool queryParallelism :1;
  bool isSetQueryParallelism :1;
  bool defaultPoolPath :1;
  bool isSetDefaultPoolPath :1;
} _WMNullableResourcePlan__isset;

class WMNullableResourcePlan {
 public:

  WMNullableResourcePlan(const WMNullableResourcePlan&);
  WMNullableResourcePlan(WMNullableResourcePlan&&);
  WMNullableResourcePlan& operator=(const WMNullableResourcePlan&);
  WMNullableResourcePlan& operator=(WMNullableResourcePlan&&);
  WMNullableResourcePlan() : name(), status((WMResourcePlanStatus::type)0), queryParallelism(0), isSetQueryParallelism(0), defaultPoolPath(), isSetDefaultPoolPath(0) {
  }

  virtual ~WMNullableResourcePlan() throw();
  std::string name;
  WMResourcePlanStatus::type status;
  int32_t queryParallelism;
  bool isSetQueryParallelism;
  std::string defaultPoolPath;
  bool isSetDefaultPoolPath;

  _WMNullableResourcePlan__isset __isset;

  void __set_name(const std::string& val);

  void __set_status(const WMResourcePlanStatus::type val);

  void __set_queryParallelism(const int32_t val);

  void __set_isSetQueryParallelism(const bool val);

  void __set_defaultPoolPath(const std::string& val);

  void __set_isSetDefaultPoolPath(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMNullableResourcePlan &a, WMNullableResourcePlan &b);

std::ostream& operator<<(std::ostream& out, const WMNullableResourcePlan& obj);

typedef struct _WMPool__isset {
  _WMPool__isset() : allocFraction(false), queryParallelism(false), schedulingPolicy(false) {}
  bool allocFraction :1;
  bool queryParallelism :1;
  bool schedulingPolicy :1;
} _WMPool__isset;

class WMPool {
 public:

  WMPool(const WMPool&);
  WMPool(WMPool&&);
  WMPool& operator=(const WMPool&);
  WMPool& operator=(WMPool&&);
  WMPool() : resourcePlanName(), poolPath(), allocFraction(0), queryParallelism(0), schedulingPolicy() {
  }

  virtual ~WMPool() throw();
  std::string resourcePlanName;
  std::string poolPath;
  double allocFraction;
  int32_t queryParallelism;
  std::string schedulingPolicy;

  _WMPool__isset __isset;

  void __set_resourcePlanName(const std::string& val);

  void __set_poolPath(const std::string& val);

  void __set_allocFraction(const double val);

  void __set_queryParallelism(const int32_t val);

  void __set_schedulingPolicy(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMPool &a, WMPool &b);

std::ostream& operator<<(std::ostream& out, const WMPool& obj);

typedef struct _WMNullablePool__isset {
  _WMNullablePool__isset() : allocFraction(false), queryParallelism(false), schedulingPolicy(false), isSetSchedulingPolicy(false) {}
  bool allocFraction :1;
  bool queryParallelism :1;
  bool schedulingPolicy :1;
  bool isSetSchedulingPolicy :1;
} _WMNullablePool__isset;

class WMNullablePool {
 public:

  WMNullablePool(const WMNullablePool&);
  WMNullablePool(WMNullablePool&&);
  WMNullablePool& operator=(const WMNullablePool&);
  WMNullablePool& operator=(WMNullablePool&&);
  WMNullablePool() : resourcePlanName(), poolPath(), allocFraction(0), queryParallelism(0), schedulingPolicy(), isSetSchedulingPolicy(0) {
  }

  virtual ~WMNullablePool() throw();
  std::string resourcePlanName;
  std::string poolPath;
  double allocFraction;
  int32_t queryParallelism;
  std::string schedulingPolicy;
  bool isSetSchedulingPolicy;

  _WMNullablePool__isset __isset;

  void __set_resourcePlanName(const std::string& val);

  void __set_poolPath(const std::string& val);

  void __set_allocFraction(const double val);

  void __set_queryParallelism(const int32_t val);

  void __set_schedulingPolicy(const std::string& val);

  void __set_isSetSchedulingPolicy(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMNullablePool &a, WMNullablePool &b);

std::ostream& operator<<(std::ostream& out, const WMNullablePool& obj);

typedef struct _WMTrigger__isset {
  _WMTrigger__isset() : triggerExpression(false), actionExpression(false), isInUnmanaged(false) {}
  bool triggerExpression :1;
  bool actionExpression :1;
  bool isInUnmanaged :1;
} _WMTrigger__isset;

class WMTrigger {
 public:

  WMTrigger(const WMTrigger&);
  WMTrigger(WMTrigger&&);
  WMTrigger& operator=(const WMTrigger&);
  WMTrigger& operator=(WMTrigger&&);
  WMTrigger() : resourcePlanName(), triggerName(), triggerExpression(), actionExpression(), isInUnmanaged(0) {
  }

  virtual ~WMTrigger() throw();
  std::string resourcePlanName;
  std::string triggerName;
  std::string triggerExpression;
  std::string actionExpression;
  bool isInUnmanaged;

  _WMTrigger__isset __isset;

  void __set_resourcePlanName(const std::string& val);

  void __set_triggerName(const std::string& val);

  void __set_triggerExpression(const std::string& val);

  void __set_actionExpression(const std::string& val);

  void __set_isInUnmanaged(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMTrigger &a, WMTrigger &b);

std::ostream& operator<<(std::ostream& out, const WMTrigger& obj);

typedef struct _WMMapping__isset {
  _WMMapping__isset() : poolPath(false), ordering(false) {}
  bool poolPath :1;
  bool ordering :1;
} _WMMapping__isset;

class WMMapping {
 public:

  WMMapping(const WMMapping&);
  WMMapping(WMMapping&&);
  WMMapping& operator=(const WMMapping&);
  WMMapping& operator=(WMMapping&&);
  WMMapping() : resourcePlanName(), entityType(), entityName(), poolPath(), ordering(0) {
  }

  virtual ~WMMapping() throw();
  std::string resourcePlanName;
  std::string entityType;
  std::string entityName;
  std::string poolPath;
  int32_t ordering;

  _WMMapping__isset __isset;

  void __set_resourcePlanName(const std::string& val);

  void __set_entityType(const std::string& val);

  void __set_entityName(const std::string& val);

  void __set_poolPath(const std::string& val);

  void __set_ordering(const int32_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMMapping &a, WMMapping &b);

std::ostream& operator<<(std::ostream& out, const WMMapping& obj);


class WMPoolTrigger {
 public:

  WMPoolTrigger(const WMPoolTrigger&);
  WMPoolTrigger(WMPoolTrigger&&);
  WMPoolTrigger& operator=(const WMPoolTrigger&);
  WMPoolTrigger& operator=(WMPoolTrigger&&);
  WMPoolTrigger() : pool(), trigger() {
  }

  virtual ~WMPoolTrigger() throw();
  std::string pool;
  std::string trigger;

  void __set_pool(const std::string& val);

  void __set_trigger(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMPoolTrigger &a, WMPoolTrigger &b);

std::ostream& operator<<(std::ostream& out, const WMPoolTrigger& obj);

typedef struct _WMFullResourcePlan__isset {
  _WMFullResourcePlan__isset() : mappings(false), triggers(false), poolTriggers(false) {}
  bool mappings :1;
  bool triggers :1;
  bool poolTriggers :1;
} _WMFullResourcePlan__isset;

class WMFullResourcePlan {
 public:

  WMFullResourcePlan(const WMFullResourcePlan&);
  WMFullResourcePlan(WMFullResourcePlan&&);
  WMFullResourcePlan& operator=(const WMFullResourcePlan&);
  WMFullResourcePlan& operator=(WMFullResourcePlan&&);
  WMFullResourcePlan() {
  }

  virtual ~WMFullResourcePlan() throw();
  WMResourcePlan plan;
  std::vector<WMPool>  pools;
  std::vector<WMMapping>  mappings;
  std::vector<WMTrigger>  triggers;
  std::vector<WMPoolTrigger>  poolTriggers;

  _WMFullResourcePlan__isset __isset;

  void __set_plan(const WMResourcePlan& val);

  void __set_pools(const std::vector<WMPool> & val);

  void __set_mappings(const std::vector<WMMapping> & val);

  void __set_triggers(const std::vector<WMTrigger> & val);

  void __set_poolTriggers(const std::vector<WMPoolTrigger> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMFullResourcePlan &a, WMFullResourcePlan &b);

std::ostream& operator<<(std::ostream& out, const WMFullResourcePlan& obj);

typedef struct _WMCreateResourcePlanRequest__isset {
  _WMCreateResourcePlanRequest__isset() : resourcePlan(false), copyFrom(false) {}
  bool resourcePlan :1;
  bool copyFrom :1;
} _WMCreateResourcePlanRequest__isset;

class WMCreateResourcePlanRequest {
 public:

  WMCreateResourcePlanRequest(const WMCreateResourcePlanRequest&);
  WMCreateResourcePlanRequest(WMCreateResourcePlanRequest&&);
  WMCreateResourcePlanRequest& operator=(const WMCreateResourcePlanRequest&);
  WMCreateResourcePlanRequest& operator=(WMCreateResourcePlanRequest&&);
  WMCreateResourcePlanRequest() : copyFrom() {
  }

  virtual ~WMCreateResourcePlanRequest() throw();
  WMResourcePlan resourcePlan;
  std::string copyFrom;

  _WMCreateResourcePlanRequest__isset __isset;

  void __set_resourcePlan(const WMResourcePlan& val);

  void __set_copyFrom(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMCreateResourcePlanRequest &a, WMCreateResourcePlanRequest &b);

std::ostream& operator<<(std::ostream& out, const WMCreateResourcePlanRequest& obj);


class WMCreateResourcePlanResponse {
 public:

  WMCreateResourcePlanResponse(const WMCreateResourcePlanResponse&);
  WMCreateResourcePlanResponse(WMCreateResourcePlanResponse&&);
  WMCreateResourcePlanResponse& operator=(const WMCreateResourcePlanResponse&);
  WMCreateResourcePlanResponse& operator=(WMCreateResourcePlanResponse&&);
  WMCreateResourcePlanResponse() {
  }

  virtual ~WMCreateResourcePlanResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMCreateResourcePlanResponse &a, WMCreateResourcePlanResponse &b);

std::ostream& operator<<(std::ostream& out, const WMCreateResourcePlanResponse& obj);


class WMGetActiveResourcePlanRequest {
 public:

  WMGetActiveResourcePlanRequest(const WMGetActiveResourcePlanRequest&);
  WMGetActiveResourcePlanRequest(WMGetActiveResourcePlanRequest&&);
  WMGetActiveResourcePlanRequest& operator=(const WMGetActiveResourcePlanRequest&);
  WMGetActiveResourcePlanRequest& operator=(WMGetActiveResourcePlanRequest&&);
  WMGetActiveResourcePlanRequest() {
  }

  virtual ~WMGetActiveResourcePlanRequest() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMGetActiveResourcePlanRequest &a, WMGetActiveResourcePlanRequest &b);

std::ostream& operator<<(std::ostream& out, const WMGetActiveResourcePlanRequest& obj);

typedef struct _WMGetActiveResourcePlanResponse__isset {
  _WMGetActiveResourcePlanResponse__isset() : resourcePlan(false) {}
  bool resourcePlan :1;
} _WMGetActiveResourcePlanResponse__isset;

class WMGetActiveResourcePlanResponse {
 public:

  WMGetActiveResourcePlanResponse(const WMGetActiveResourcePlanResponse&);
  WMGetActiveResourcePlanResponse(WMGetActiveResourcePlanResponse&&);
  WMGetActiveResourcePlanResponse& operator=(const WMGetActiveResourcePlanResponse&);
  WMGetActiveResourcePlanResponse& operator=(WMGetActiveResourcePlanResponse&&);
  WMGetActiveResourcePlanResponse() {
  }

  virtual ~WMGetActiveResourcePlanResponse() throw();
  WMFullResourcePlan resourcePlan;

  _WMGetActiveResourcePlanResponse__isset __isset;

  void __set_resourcePlan(const WMFullResourcePlan& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMGetActiveResourcePlanResponse &a, WMGetActiveResourcePlanResponse &b);

std::ostream& operator<<(std::ostream& out, const WMGetActiveResourcePlanResponse& obj);

typedef struct _WMGetResourcePlanRequest__isset {
  _WMGetResourcePlanRequest__isset() : resourcePlanName(false) {}
  bool resourcePlanName :1;
} _WMGetResourcePlanRequest__isset;

class WMGetResourcePlanRequest {
 public:

  WMGetResourcePlanRequest(const WMGetResourcePlanRequest&);
  WMGetResourcePlanRequest(WMGetResourcePlanRequest&&);
  WMGetResourcePlanRequest& operator=(const WMGetResourcePlanRequest&);
  WMGetResourcePlanRequest& operator=(WMGetResourcePlanRequest&&);
  WMGetResourcePlanRequest() : resourcePlanName() {
  }

  virtual ~WMGetResourcePlanRequest() throw();
  std::string resourcePlanName;

  _WMGetResourcePlanRequest__isset __isset;

  void __set_resourcePlanName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMGetResourcePlanRequest &a, WMGetResourcePlanRequest &b);

std::ostream& operator<<(std::ostream& out, const WMGetResourcePlanRequest& obj);

typedef struct _WMGetResourcePlanResponse__isset {
  _WMGetResourcePlanResponse__isset() : resourcePlan(false) {}
  bool resourcePlan :1;
} _WMGetResourcePlanResponse__isset;

class WMGetResourcePlanResponse {
 public:

  WMGetResourcePlanResponse(const WMGetResourcePlanResponse&);
  WMGetResourcePlanResponse(WMGetResourcePlanResponse&&);
  WMGetResourcePlanResponse& operator=(const WMGetResourcePlanResponse&);
  WMGetResourcePlanResponse& operator=(WMGetResourcePlanResponse&&);
  WMGetResourcePlanResponse() {
  }

  virtual ~WMGetResourcePlanResponse() throw();
  WMFullResourcePlan resourcePlan;

  _WMGetResourcePlanResponse__isset __isset;

  void __set_resourcePlan(const WMFullResourcePlan& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMGetResourcePlanResponse &a, WMGetResourcePlanResponse &b);

std::ostream& operator<<(std::ostream& out, const WMGetResourcePlanResponse& obj);


class WMGetAllResourcePlanRequest {
 public:

  WMGetAllResourcePlanRequest(const WMGetAllResourcePlanRequest&);
  WMGetAllResourcePlanRequest(WMGetAllResourcePlanRequest&&);
  WMGetAllResourcePlanRequest& operator=(const WMGetAllResourcePlanRequest&);
  WMGetAllResourcePlanRequest& operator=(WMGetAllResourcePlanRequest&&);
  WMGetAllResourcePlanRequest() {
  }

  virtual ~WMGetAllResourcePlanRequest() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMGetAllResourcePlanRequest &a, WMGetAllResourcePlanRequest &b);

std::ostream& operator<<(std::ostream& out, const WMGetAllResourcePlanRequest& obj);

typedef struct _WMGetAllResourcePlanResponse__isset {
  _WMGetAllResourcePlanResponse__isset() : resourcePlans(false) {}
  bool resourcePlans :1;
} _WMGetAllResourcePlanResponse__isset;

class WMGetAllResourcePlanResponse {
 public:

  WMGetAllResourcePlanResponse(const WMGetAllResourcePlanResponse&);
  WMGetAllResourcePlanResponse(WMGetAllResourcePlanResponse&&);
  WMGetAllResourcePlanResponse& operator=(const WMGetAllResourcePlanResponse&);
  WMGetAllResourcePlanResponse& operator=(WMGetAllResourcePlanResponse&&);
  WMGetAllResourcePlanResponse() {
  }

  virtual ~WMGetAllResourcePlanResponse() throw();
  std::vector<WMResourcePlan>  resourcePlans;

  _WMGetAllResourcePlanResponse__isset __isset;

  void __set_resourcePlans(const std::vector<WMResourcePlan> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMGetAllResourcePlanResponse &a, WMGetAllResourcePlanResponse &b);

std::ostream& operator<<(std::ostream& out, const WMGetAllResourcePlanResponse& obj);

typedef struct _WMAlterResourcePlanRequest__isset {
  _WMAlterResourcePlanRequest__isset() : resourcePlanName(false), resourcePlan(false), isEnableAndActivate(false), isForceDeactivate(false), isReplace(false) {}
  bool resourcePlanName :1;
  bool resourcePlan :1;
  bool isEnableAndActivate :1;
  bool isForceDeactivate :1;
  bool isReplace :1;
} _WMAlterResourcePlanRequest__isset;

class WMAlterResourcePlanRequest {
 public:

  WMAlterResourcePlanRequest(const WMAlterResourcePlanRequest&);
  WMAlterResourcePlanRequest(WMAlterResourcePlanRequest&&);
  WMAlterResourcePlanRequest& operator=(const WMAlterResourcePlanRequest&);
  WMAlterResourcePlanRequest& operator=(WMAlterResourcePlanRequest&&);
  WMAlterResourcePlanRequest() : resourcePlanName(), isEnableAndActivate(0), isForceDeactivate(0), isReplace(0) {
  }

  virtual ~WMAlterResourcePlanRequest() throw();
  std::string resourcePlanName;
  WMNullableResourcePlan resourcePlan;
  bool isEnableAndActivate;
  bool isForceDeactivate;
  bool isReplace;

  _WMAlterResourcePlanRequest__isset __isset;

  void __set_resourcePlanName(const std::string& val);

  void __set_resourcePlan(const WMNullableResourcePlan& val);

  void __set_isEnableAndActivate(const bool val);

  void __set_isForceDeactivate(const bool val);

  void __set_isReplace(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMAlterResourcePlanRequest &a, WMAlterResourcePlanRequest &b);

std::ostream& operator<<(std::ostream& out, const WMAlterResourcePlanRequest& obj);

typedef struct _WMAlterResourcePlanResponse__isset {
  _WMAlterResourcePlanResponse__isset() : fullResourcePlan(false) {}
  bool fullResourcePlan :1;
} _WMAlterResourcePlanResponse__isset;

class WMAlterResourcePlanResponse {
 public:

  WMAlterResourcePlanResponse(const WMAlterResourcePlanResponse&);
  WMAlterResourcePlanResponse(WMAlterResourcePlanResponse&&);
  WMAlterResourcePlanResponse& operator=(const WMAlterResourcePlanResponse&);
  WMAlterResourcePlanResponse& operator=(WMAlterResourcePlanResponse&&);
  WMAlterResourcePlanResponse() {
  }

  virtual ~WMAlterResourcePlanResponse() throw();
  WMFullResourcePlan fullResourcePlan;

  _WMAlterResourcePlanResponse__isset __isset;

  void __set_fullResourcePlan(const WMFullResourcePlan& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMAlterResourcePlanResponse &a, WMAlterResourcePlanResponse &b);

std::ostream& operator<<(std::ostream& out, const WMAlterResourcePlanResponse& obj);

typedef struct _WMValidateResourcePlanRequest__isset {
  _WMValidateResourcePlanRequest__isset() : resourcePlanName(false) {}
  bool resourcePlanName :1;
} _WMValidateResourcePlanRequest__isset;

class WMValidateResourcePlanRequest {
 public:

  WMValidateResourcePlanRequest(const WMValidateResourcePlanRequest&);
  WMValidateResourcePlanRequest(WMValidateResourcePlanRequest&&);
  WMValidateResourcePlanRequest& operator=(const WMValidateResourcePlanRequest&);
  WMValidateResourcePlanRequest& operator=(WMValidateResourcePlanRequest&&);
  WMValidateResourcePlanRequest() : resourcePlanName() {
  }

  virtual ~WMValidateResourcePlanRequest() throw();
  std::string resourcePlanName;

  _WMValidateResourcePlanRequest__isset __isset;

  void __set_resourcePlanName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMValidateResourcePlanRequest &a, WMValidateResourcePlanRequest &b);

std::ostream& operator<<(std::ostream& out, const WMValidateResourcePlanRequest& obj);

typedef struct _WMValidateResourcePlanResponse__isset {
  _WMValidateResourcePlanResponse__isset() : errors(false), warnings(false) {}
  bool errors :1;
  bool warnings :1;
} _WMValidateResourcePlanResponse__isset;

class WMValidateResourcePlanResponse {
 public:

  WMValidateResourcePlanResponse(const WMValidateResourcePlanResponse&);
  WMValidateResourcePlanResponse(WMValidateResourcePlanResponse&&);
  WMValidateResourcePlanResponse& operator=(const WMValidateResourcePlanResponse&);
  WMValidateResourcePlanResponse& operator=(WMValidateResourcePlanResponse&&);
  WMValidateResourcePlanResponse() {
  }

  virtual ~WMValidateResourcePlanResponse() throw();
  std::vector<std::string>  errors;
  std::vector<std::string>  warnings;

  _WMValidateResourcePlanResponse__isset __isset;

  void __set_errors(const std::vector<std::string> & val);

  void __set_warnings(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMValidateResourcePlanResponse &a, WMValidateResourcePlanResponse &b);

std::ostream& operator<<(std::ostream& out, const WMValidateResourcePlanResponse& obj);

typedef struct _WMDropResourcePlanRequest__isset {
  _WMDropResourcePlanRequest__isset() : resourcePlanName(false) {}
  bool resourcePlanName :1;
} _WMDropResourcePlanRequest__isset;

class WMDropResourcePlanRequest {
 public:

  WMDropResourcePlanRequest(const WMDropResourcePlanRequest&);
  WMDropResourcePlanRequest(WMDropResourcePlanRequest&&);
  WMDropResourcePlanRequest& operator=(const WMDropResourcePlanRequest&);
  WMDropResourcePlanRequest& operator=(WMDropResourcePlanRequest&&);
  WMDropResourcePlanRequest() : resourcePlanName() {
  }

  virtual ~WMDropResourcePlanRequest() throw();
  std::string resourcePlanName;

  _WMDropResourcePlanRequest__isset __isset;

  void __set_resourcePlanName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMDropResourcePlanRequest &a, WMDropResourcePlanRequest &b);

std::ostream& operator<<(std::ostream& out, const WMDropResourcePlanRequest& obj);


class WMDropResourcePlanResponse {
 public:

  WMDropResourcePlanResponse(const WMDropResourcePlanResponse&);
  WMDropResourcePlanResponse(WMDropResourcePlanResponse&&);
  WMDropResourcePlanResponse& operator=(const WMDropResourcePlanResponse&);
  WMDropResourcePlanResponse& operator=(WMDropResourcePlanResponse&&);
  WMDropResourcePlanResponse() {
  }

  virtual ~WMDropResourcePlanResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMDropResourcePlanResponse &a, WMDropResourcePlanResponse &b);

std::ostream& operator<<(std::ostream& out, const WMDropResourcePlanResponse& obj);

typedef struct _WMCreateTriggerRequest__isset {
  _WMCreateTriggerRequest__isset() : trigger(false) {}
  bool trigger :1;
} _WMCreateTriggerRequest__isset;

class WMCreateTriggerRequest {
 public:

  WMCreateTriggerRequest(const WMCreateTriggerRequest&);
  WMCreateTriggerRequest(WMCreateTriggerRequest&&);
  WMCreateTriggerRequest& operator=(const WMCreateTriggerRequest&);
  WMCreateTriggerRequest& operator=(WMCreateTriggerRequest&&);
  WMCreateTriggerRequest() {
  }

  virtual ~WMCreateTriggerRequest() throw();
  WMTrigger trigger;

  _WMCreateTriggerRequest__isset __isset;

  void __set_trigger(const WMTrigger& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMCreateTriggerRequest &a, WMCreateTriggerRequest &b);

std::ostream& operator<<(std::ostream& out, const WMCreateTriggerRequest& obj);


class WMCreateTriggerResponse {
 public:

  WMCreateTriggerResponse(const WMCreateTriggerResponse&);
  WMCreateTriggerResponse(WMCreateTriggerResponse&&);
  WMCreateTriggerResponse& operator=(const WMCreateTriggerResponse&);
  WMCreateTriggerResponse& operator=(WMCreateTriggerResponse&&);
  WMCreateTriggerResponse() {
  }

  virtual ~WMCreateTriggerResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMCreateTriggerResponse &a, WMCreateTriggerResponse &b);

std::ostream& operator<<(std::ostream& out, const WMCreateTriggerResponse& obj);

typedef struct _WMAlterTriggerRequest__isset {
  _WMAlterTriggerRequest__isset() : trigger(false) {}
  bool trigger :1;
} _WMAlterTriggerRequest__isset;

class WMAlterTriggerRequest {
 public:

  WMAlterTriggerRequest(const WMAlterTriggerRequest&);
  WMAlterTriggerRequest(WMAlterTriggerRequest&&);
  WMAlterTriggerRequest& operator=(const WMAlterTriggerRequest&);
  WMAlterTriggerRequest& operator=(WMAlterTriggerRequest&&);
  WMAlterTriggerRequest() {
  }

  virtual ~WMAlterTriggerRequest() throw();
  WMTrigger trigger;

  _WMAlterTriggerRequest__isset __isset;

  void __set_trigger(const WMTrigger& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMAlterTriggerRequest &a, WMAlterTriggerRequest &b);

std::ostream& operator<<(std::ostream& out, const WMAlterTriggerRequest& obj);


class WMAlterTriggerResponse {
 public:

  WMAlterTriggerResponse(const WMAlterTriggerResponse&);
  WMAlterTriggerResponse(WMAlterTriggerResponse&&);
  WMAlterTriggerResponse& operator=(const WMAlterTriggerResponse&);
  WMAlterTriggerResponse& operator=(WMAlterTriggerResponse&&);
  WMAlterTriggerResponse() {
  }

  virtual ~WMAlterTriggerResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMAlterTriggerResponse &a, WMAlterTriggerResponse &b);

std::ostream& operator<<(std::ostream& out, const WMAlterTriggerResponse& obj);

typedef struct _WMDropTriggerRequest__isset {
  _WMDropTriggerRequest__isset() : resourcePlanName(false), triggerName(false) {}
  bool resourcePlanName :1;
  bool triggerName :1;
} _WMDropTriggerRequest__isset;

class WMDropTriggerRequest {
 public:

  WMDropTriggerRequest(const WMDropTriggerRequest&);
  WMDropTriggerRequest(WMDropTriggerRequest&&);
  WMDropTriggerRequest& operator=(const WMDropTriggerRequest&);
  WMDropTriggerRequest& operator=(WMDropTriggerRequest&&);
  WMDropTriggerRequest() : resourcePlanName(), triggerName() {
  }

  virtual ~WMDropTriggerRequest() throw();
  std::string resourcePlanName;
  std::string triggerName;

  _WMDropTriggerRequest__isset __isset;

  void __set_resourcePlanName(const std::string& val);

  void __set_triggerName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMDropTriggerRequest &a, WMDropTriggerRequest &b);

std::ostream& operator<<(std::ostream& out, const WMDropTriggerRequest& obj);


class WMDropTriggerResponse {
 public:

  WMDropTriggerResponse(const WMDropTriggerResponse&);
  WMDropTriggerResponse(WMDropTriggerResponse&&);
  WMDropTriggerResponse& operator=(const WMDropTriggerResponse&);
  WMDropTriggerResponse& operator=(WMDropTriggerResponse&&);
  WMDropTriggerResponse() {
  }

  virtual ~WMDropTriggerResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMDropTriggerResponse &a, WMDropTriggerResponse &b);

std::ostream& operator<<(std::ostream& out, const WMDropTriggerResponse& obj);

typedef struct _WMGetTriggersForResourePlanRequest__isset {
  _WMGetTriggersForResourePlanRequest__isset() : resourcePlanName(false) {}
  bool resourcePlanName :1;
} _WMGetTriggersForResourePlanRequest__isset;

class WMGetTriggersForResourePlanRequest {
 public:

  WMGetTriggersForResourePlanRequest(const WMGetTriggersForResourePlanRequest&);
  WMGetTriggersForResourePlanRequest(WMGetTriggersForResourePlanRequest&&);
  WMGetTriggersForResourePlanRequest& operator=(const WMGetTriggersForResourePlanRequest&);
  WMGetTriggersForResourePlanRequest& operator=(WMGetTriggersForResourePlanRequest&&);
  WMGetTriggersForResourePlanRequest() : resourcePlanName() {
  }

  virtual ~WMGetTriggersForResourePlanRequest() throw();
  std::string resourcePlanName;

  _WMGetTriggersForResourePlanRequest__isset __isset;

  void __set_resourcePlanName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMGetTriggersForResourePlanRequest &a, WMGetTriggersForResourePlanRequest &b);

std::ostream& operator<<(std::ostream& out, const WMGetTriggersForResourePlanRequest& obj);

typedef struct _WMGetTriggersForResourePlanResponse__isset {
  _WMGetTriggersForResourePlanResponse__isset() : triggers(false) {}
  bool triggers :1;
} _WMGetTriggersForResourePlanResponse__isset;

class WMGetTriggersForResourePlanResponse {
 public:

  WMGetTriggersForResourePlanResponse(const WMGetTriggersForResourePlanResponse&);
  WMGetTriggersForResourePlanResponse(WMGetTriggersForResourePlanResponse&&);
  WMGetTriggersForResourePlanResponse& operator=(const WMGetTriggersForResourePlanResponse&);
  WMGetTriggersForResourePlanResponse& operator=(WMGetTriggersForResourePlanResponse&&);
  WMGetTriggersForResourePlanResponse() {
  }

  virtual ~WMGetTriggersForResourePlanResponse() throw();
  std::vector<WMTrigger>  triggers;

  _WMGetTriggersForResourePlanResponse__isset __isset;

  void __set_triggers(const std::vector<WMTrigger> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMGetTriggersForResourePlanResponse &a, WMGetTriggersForResourePlanResponse &b);

std::ostream& operator<<(std::ostream& out, const WMGetTriggersForResourePlanResponse& obj);

typedef struct _WMCreatePoolRequest__isset {
  _WMCreatePoolRequest__isset() : pool(false) {}
  bool pool :1;
} _WMCreatePoolRequest__isset;

class WMCreatePoolRequest {
 public:

  WMCreatePoolRequest(const WMCreatePoolRequest&);
  WMCreatePoolRequest(WMCreatePoolRequest&&);
  WMCreatePoolRequest& operator=(const WMCreatePoolRequest&);
  WMCreatePoolRequest& operator=(WMCreatePoolRequest&&);
  WMCreatePoolRequest() {
  }

  virtual ~WMCreatePoolRequest() throw();
  WMPool pool;

  _WMCreatePoolRequest__isset __isset;

  void __set_pool(const WMPool& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMCreatePoolRequest &a, WMCreatePoolRequest &b);

std::ostream& operator<<(std::ostream& out, const WMCreatePoolRequest& obj);


class WMCreatePoolResponse {
 public:

  WMCreatePoolResponse(const WMCreatePoolResponse&);
  WMCreatePoolResponse(WMCreatePoolResponse&&);
  WMCreatePoolResponse& operator=(const WMCreatePoolResponse&);
  WMCreatePoolResponse& operator=(WMCreatePoolResponse&&);
  WMCreatePoolResponse() {
  }

  virtual ~WMCreatePoolResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMCreatePoolResponse &a, WMCreatePoolResponse &b);

std::ostream& operator<<(std::ostream& out, const WMCreatePoolResponse& obj);

typedef struct _WMAlterPoolRequest__isset {
  _WMAlterPoolRequest__isset() : pool(false), poolPath(false) {}
  bool pool :1;
  bool poolPath :1;
} _WMAlterPoolRequest__isset;

class WMAlterPoolRequest {
 public:

  WMAlterPoolRequest(const WMAlterPoolRequest&);
  WMAlterPoolRequest(WMAlterPoolRequest&&);
  WMAlterPoolRequest& operator=(const WMAlterPoolRequest&);
  WMAlterPoolRequest& operator=(WMAlterPoolRequest&&);
  WMAlterPoolRequest() : poolPath() {
  }

  virtual ~WMAlterPoolRequest() throw();
  WMNullablePool pool;
  std::string poolPath;

  _WMAlterPoolRequest__isset __isset;

  void __set_pool(const WMNullablePool& val);

  void __set_poolPath(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMAlterPoolRequest &a, WMAlterPoolRequest &b);

std::ostream& operator<<(std::ostream& out, const WMAlterPoolRequest& obj);


class WMAlterPoolResponse {
 public:

  WMAlterPoolResponse(const WMAlterPoolResponse&);
  WMAlterPoolResponse(WMAlterPoolResponse&&);
  WMAlterPoolResponse& operator=(const WMAlterPoolResponse&);
  WMAlterPoolResponse& operator=(WMAlterPoolResponse&&);
  WMAlterPoolResponse() {
  }

  virtual ~WMAlterPoolResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMAlterPoolResponse &a, WMAlterPoolResponse &b);

std::ostream& operator<<(std::ostream& out, const WMAlterPoolResponse& obj);

typedef struct _WMDropPoolRequest__isset {
  _WMDropPoolRequest__isset() : resourcePlanName(false), poolPath(false) {}
  bool resourcePlanName :1;
  bool poolPath :1;
} _WMDropPoolRequest__isset;

class WMDropPoolRequest {
 public:

  WMDropPoolRequest(const WMDropPoolRequest&);
  WMDropPoolRequest(WMDropPoolRequest&&);
  WMDropPoolRequest& operator=(const WMDropPoolRequest&);
  WMDropPoolRequest& operator=(WMDropPoolRequest&&);
  WMDropPoolRequest() : resourcePlanName(), poolPath() {
  }

  virtual ~WMDropPoolRequest() throw();
  std::string resourcePlanName;
  std::string poolPath;

  _WMDropPoolRequest__isset __isset;

  void __set_resourcePlanName(const std::string& val);

  void __set_poolPath(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMDropPoolRequest &a, WMDropPoolRequest &b);

std::ostream& operator<<(std::ostream& out, const WMDropPoolRequest& obj);


class WMDropPoolResponse {
 public:

  WMDropPoolResponse(const WMDropPoolResponse&);
  WMDropPoolResponse(WMDropPoolResponse&&);
  WMDropPoolResponse& operator=(const WMDropPoolResponse&);
  WMDropPoolResponse& operator=(WMDropPoolResponse&&);
  WMDropPoolResponse() {
  }

  virtual ~WMDropPoolResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMDropPoolResponse &a, WMDropPoolResponse &b);

std::ostream& operator<<(std::ostream& out, const WMDropPoolResponse& obj);

typedef struct _WMCreateOrUpdateMappingRequest__isset {
  _WMCreateOrUpdateMappingRequest__isset() : mapping(false), update(false) {}
  bool mapping :1;
  bool update :1;
} _WMCreateOrUpdateMappingRequest__isset;

class WMCreateOrUpdateMappingRequest {
 public:

  WMCreateOrUpdateMappingRequest(const WMCreateOrUpdateMappingRequest&);
  WMCreateOrUpdateMappingRequest(WMCreateOrUpdateMappingRequest&&);
  WMCreateOrUpdateMappingRequest& operator=(const WMCreateOrUpdateMappingRequest&);
  WMCreateOrUpdateMappingRequest& operator=(WMCreateOrUpdateMappingRequest&&);
  WMCreateOrUpdateMappingRequest() : update(0) {
  }

  virtual ~WMCreateOrUpdateMappingRequest() throw();
  WMMapping mapping;
  bool update;

  _WMCreateOrUpdateMappingRequest__isset __isset;

  void __set_mapping(const WMMapping& val);

  void __set_update(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMCreateOrUpdateMappingRequest &a, WMCreateOrUpdateMappingRequest &b);

std::ostream& operator<<(std::ostream& out, const WMCreateOrUpdateMappingRequest& obj);


class WMCreateOrUpdateMappingResponse {
 public:

  WMCreateOrUpdateMappingResponse(const WMCreateOrUpdateMappingResponse&);
  WMCreateOrUpdateMappingResponse(WMCreateOrUpdateMappingResponse&&);
  WMCreateOrUpdateMappingResponse& operator=(const WMCreateOrUpdateMappingResponse&);
  WMCreateOrUpdateMappingResponse& operator=(WMCreateOrUpdateMappingResponse&&);
  WMCreateOrUpdateMappingResponse() {
  }

  virtual ~WMCreateOrUpdateMappingResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMCreateOrUpdateMappingResponse &a, WMCreateOrUpdateMappingResponse &b);

std::ostream& operator<<(std::ostream& out, const WMCreateOrUpdateMappingResponse& obj);

typedef struct _WMDropMappingRequest__isset {
  _WMDropMappingRequest__isset() : mapping(false) {}
  bool mapping :1;
} _WMDropMappingRequest__isset;

class WMDropMappingRequest {
 public:

  WMDropMappingRequest(const WMDropMappingRequest&);
  WMDropMappingRequest(WMDropMappingRequest&&);
  WMDropMappingRequest& operator=(const WMDropMappingRequest&);
  WMDropMappingRequest& operator=(WMDropMappingRequest&&);
  WMDropMappingRequest() {
  }

  virtual ~WMDropMappingRequest() throw();
  WMMapping mapping;

  _WMDropMappingRequest__isset __isset;

  void __set_mapping(const WMMapping& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMDropMappingRequest &a, WMDropMappingRequest &b);

std::ostream& operator<<(std::ostream& out, const WMDropMappingRequest& obj);


class WMDropMappingResponse {
 public:

  WMDropMappingResponse(const WMDropMappingResponse&);
  WMDropMappingResponse(WMDropMappingResponse&&);
  WMDropMappingResponse& operator=(const WMDropMappingResponse&);
  WMDropMappingResponse& operator=(WMDropMappingResponse&&);
  WMDropMappingResponse() {
  }

  virtual ~WMDropMappingResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMDropMappingResponse &a, WMDropMappingResponse &b);

std::ostream& operator<<(std::ostream& out, const WMDropMappingResponse& obj);

typedef struct _WMCreateOrDropTriggerToPoolMappingRequest__isset {
  _WMCreateOrDropTriggerToPoolMappingRequest__isset() : resourcePlanName(false), triggerName(false), poolPath(false), drop(false) {}
  bool resourcePlanName :1;
  bool triggerName :1;
  bool poolPath :1;
  bool drop :1;
} _WMCreateOrDropTriggerToPoolMappingRequest__isset;

class WMCreateOrDropTriggerToPoolMappingRequest {
 public:

  WMCreateOrDropTriggerToPoolMappingRequest(const WMCreateOrDropTriggerToPoolMappingRequest&);
  WMCreateOrDropTriggerToPoolMappingRequest(WMCreateOrDropTriggerToPoolMappingRequest&&);
  WMCreateOrDropTriggerToPoolMappingRequest& operator=(const WMCreateOrDropTriggerToPoolMappingRequest&);
  WMCreateOrDropTriggerToPoolMappingRequest& operator=(WMCreateOrDropTriggerToPoolMappingRequest&&);
  WMCreateOrDropTriggerToPoolMappingRequest() : resourcePlanName(), triggerName(), poolPath(), drop(0) {
  }

  virtual ~WMCreateOrDropTriggerToPoolMappingRequest() throw();
  std::string resourcePlanName;
  std::string triggerName;
  std::string poolPath;
  bool drop;

  _WMCreateOrDropTriggerToPoolMappingRequest__isset __isset;

  void __set_resourcePlanName(const std::string& val);

  void __set_triggerName(const std::string& val);

  void __set_poolPath(const std::string& val);

  void __set_drop(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMCreateOrDropTriggerToPoolMappingRequest &a, WMCreateOrDropTriggerToPoolMappingRequest &b);

std::ostream& operator<<(std::ostream& out, const WMCreateOrDropTriggerToPoolMappingRequest& obj);


class WMCreateOrDropTriggerToPoolMappingResponse {
 public:

  WMCreateOrDropTriggerToPoolMappingResponse(const WMCreateOrDropTriggerToPoolMappingResponse&);
  WMCreateOrDropTriggerToPoolMappingResponse(WMCreateOrDropTriggerToPoolMappingResponse&&);
  WMCreateOrDropTriggerToPoolMappingResponse& operator=(const WMCreateOrDropTriggerToPoolMappingResponse&);
  WMCreateOrDropTriggerToPoolMappingResponse& operator=(WMCreateOrDropTriggerToPoolMappingResponse&&);
  WMCreateOrDropTriggerToPoolMappingResponse() {
  }

  virtual ~WMCreateOrDropTriggerToPoolMappingResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WMCreateOrDropTriggerToPoolMappingResponse &a, WMCreateOrDropTriggerToPoolMappingResponse &b);

std::ostream& operator<<(std::ostream& out, const WMCreateOrDropTriggerToPoolMappingResponse& obj);

typedef struct _ISchema__isset {
  _ISchema__isset() : schemaType(false), name(false), catName(false), dbName(false), compatibility(false), validationLevel(false), canEvolve(false), schemaGroup(false), description(false) {}
  bool schemaType :1;
  bool name :1;
  bool catName :1;
  bool dbName :1;
  bool compatibility :1;
  bool validationLevel :1;
  bool canEvolve :1;
  bool schemaGroup :1;
  bool description :1;
} _ISchema__isset;

class ISchema {
 public:

  ISchema(const ISchema&);
  ISchema(ISchema&&);
  ISchema& operator=(const ISchema&);
  ISchema& operator=(ISchema&&);
  ISchema() : schemaType((SchemaType::type)0), name(), catName(), dbName(), compatibility((SchemaCompatibility::type)0), validationLevel((SchemaValidation::type)0), canEvolve(0), schemaGroup(), description() {
  }

  virtual ~ISchema() throw();
  SchemaType::type schemaType;
  std::string name;
  std::string catName;
  std::string dbName;
  SchemaCompatibility::type compatibility;
  SchemaValidation::type validationLevel;
  bool canEvolve;
  std::string schemaGroup;
  std::string description;

  _ISchema__isset __isset;

  void __set_schemaType(const SchemaType::type val);

  void __set_name(const std::string& val);

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_compatibility(const SchemaCompatibility::type val);

  void __set_validationLevel(const SchemaValidation::type val);

  void __set_canEvolve(const bool val);

  void __set_schemaGroup(const std::string& val);

  void __set_description(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ISchema &a, ISchema &b);

std::ostream& operator<<(std::ostream& out, const ISchema& obj);

typedef struct _ISchemaName__isset {
  _ISchemaName__isset() : catName(false), dbName(false), schemaName(false) {}
  bool catName :1;
  bool dbName :1;
  bool schemaName :1;
} _ISchemaName__isset;

class ISchemaName {
 public:

  ISchemaName(const ISchemaName&);
  ISchemaName(ISchemaName&&);
  ISchemaName& operator=(const ISchemaName&);
  ISchemaName& operator=(ISchemaName&&);
  ISchemaName() : catName(), dbName(), schemaName() {
  }

  virtual ~ISchemaName() throw();
  std::string catName;
  std::string dbName;
  std::string schemaName;

  _ISchemaName__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_schemaName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ISchemaName &a, ISchemaName &b);

std::ostream& operator<<(std::ostream& out, const ISchemaName& obj);

typedef struct _AlterISchemaRequest__isset {
  _AlterISchemaRequest__isset() : name(false), newSchema(false) {}
  bool name :1;
  bool newSchema :1;
} _AlterISchemaRequest__isset;

class AlterISchemaRequest {
 public:

  AlterISchemaRequest(const AlterISchemaRequest&);
  AlterISchemaRequest(AlterISchemaRequest&&);
  AlterISchemaRequest& operator=(const AlterISchemaRequest&);
  AlterISchemaRequest& operator=(AlterISchemaRequest&&);
  AlterISchemaRequest() {
  }

  virtual ~AlterISchemaRequest() throw();
  ISchemaName name;
  ISchema newSchema;

  _AlterISchemaRequest__isset __isset;

  void __set_name(const ISchemaName& val);

  void __set_newSchema(const ISchema& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AlterISchemaRequest &a, AlterISchemaRequest &b);

std::ostream& operator<<(std::ostream& out, const AlterISchemaRequest& obj);

typedef struct _SchemaVersion__isset {
  _SchemaVersion__isset() : schema(false), version(false), createdAt(false), cols(false), state(false), description(false), schemaText(false), fingerprint(false), name(false), serDe(false) {}
  bool schema :1;
  bool version :1;
  bool createdAt :1;
  bool cols :1;
  bool state :1;
  bool description :1;
  bool schemaText :1;
  bool fingerprint :1;
  bool name :1;
  bool serDe :1;
} _SchemaVersion__isset;

class SchemaVersion {
 public:

  SchemaVersion(const SchemaVersion&);
  SchemaVersion(SchemaVersion&&);
  SchemaVersion& operator=(const SchemaVersion&);
  SchemaVersion& operator=(SchemaVersion&&);
  SchemaVersion() : version(0), createdAt(0), state((SchemaVersionState::type)0), description(), schemaText(), fingerprint(), name() {
  }

  virtual ~SchemaVersion() throw();
  ISchemaName schema;
  int32_t version;
  int64_t createdAt;
  std::vector<FieldSchema>  cols;
  SchemaVersionState::type state;
  std::string description;
  std::string schemaText;
  std::string fingerprint;
  std::string name;
  SerDeInfo serDe;

  _SchemaVersion__isset __isset;

  void __set_schema(const ISchemaName& val);

  void __set_version(const int32_t val);

  void __set_createdAt(const int64_t val);

  void __set_cols(const std::vector<FieldSchema> & val);

  void __set_state(const SchemaVersionState::type val);

  void __set_description(const std::string& val);

  void __set_schemaText(const std::string& val);

  void __set_fingerprint(const std::string& val);

  void __set_name(const std::string& val);

  void __set_serDe(const SerDeInfo& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SchemaVersion &a, SchemaVersion &b);

std::ostream& operator<<(std::ostream& out, const SchemaVersion& obj);

typedef struct _SchemaVersionDescriptor__isset {
  _SchemaVersionDescriptor__isset() : schema(false), version(false) {}
  bool schema :1;
  bool version :1;
} _SchemaVersionDescriptor__isset;

class SchemaVersionDescriptor {
 public:

  SchemaVersionDescriptor(const SchemaVersionDescriptor&);
  SchemaVersionDescriptor(SchemaVersionDescriptor&&);
  SchemaVersionDescriptor& operator=(const SchemaVersionDescriptor&);
  SchemaVersionDescriptor& operator=(SchemaVersionDescriptor&&);
  SchemaVersionDescriptor() : version(0) {
  }

  virtual ~SchemaVersionDescriptor() throw();
  ISchemaName schema;
  int32_t version;

  _SchemaVersionDescriptor__isset __isset;

  void __set_schema(const ISchemaName& val);

  void __set_version(const int32_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SchemaVersionDescriptor &a, SchemaVersionDescriptor &b);

std::ostream& operator<<(std::ostream& out, const SchemaVersionDescriptor& obj);

typedef struct _FindSchemasByColsRqst__isset {
  _FindSchemasByColsRqst__isset() : colName(false), colNamespace(false), type(false) {}
  bool colName :1;
  bool colNamespace :1;
  bool type :1;
} _FindSchemasByColsRqst__isset;

class FindSchemasByColsRqst {
 public:

  FindSchemasByColsRqst(const FindSchemasByColsRqst&);
  FindSchemasByColsRqst(FindSchemasByColsRqst&&);
  FindSchemasByColsRqst& operator=(const FindSchemasByColsRqst&);
  FindSchemasByColsRqst& operator=(FindSchemasByColsRqst&&);
  FindSchemasByColsRqst() : colName(), colNamespace(), type() {
  }

  virtual ~FindSchemasByColsRqst() throw();
  std::string colName;
  std::string colNamespace;
  std::string type;

  _FindSchemasByColsRqst__isset __isset;

  void __set_colName(const std::string& val);

  void __set_colNamespace(const std::string& val);

  void __set_type(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FindSchemasByColsRqst &a, FindSchemasByColsRqst &b);

std::ostream& operator<<(std::ostream& out, const FindSchemasByColsRqst& obj);

typedef struct _FindSchemasByColsResp__isset {
  _FindSchemasByColsResp__isset() : schemaVersions(false) {}
  bool schemaVersions :1;
} _FindSchemasByColsResp__isset;

class FindSchemasByColsResp {
 public:

  FindSchemasByColsResp(const FindSchemasByColsResp&);
  FindSchemasByColsResp(FindSchemasByColsResp&&);
  FindSchemasByColsResp& operator=(const FindSchemasByColsResp&);
  FindSchemasByColsResp& operator=(FindSchemasByColsResp&&);
  FindSchemasByColsResp() {
  }

  virtual ~FindSchemasByColsResp() throw();
  std::vector<SchemaVersionDescriptor>  schemaVersions;

  _FindSchemasByColsResp__isset __isset;

  void __set_schemaVersions(const std::vector<SchemaVersionDescriptor> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FindSchemasByColsResp &a, FindSchemasByColsResp &b);

std::ostream& operator<<(std::ostream& out, const FindSchemasByColsResp& obj);

typedef struct _MapSchemaVersionToSerdeRequest__isset {
  _MapSchemaVersionToSerdeRequest__isset() : schemaVersion(false), serdeName(false) {}
  bool schemaVersion :1;
  bool serdeName :1;
} _MapSchemaVersionToSerdeRequest__isset;

class MapSchemaVersionToSerdeRequest {
 public:

  MapSchemaVersionToSerdeRequest(const MapSchemaVersionToSerdeRequest&);
  MapSchemaVersionToSerdeRequest(MapSchemaVersionToSerdeRequest&&);
  MapSchemaVersionToSerdeRequest& operator=(const MapSchemaVersionToSerdeRequest&);
  MapSchemaVersionToSerdeRequest& operator=(MapSchemaVersionToSerdeRequest&&);
  MapSchemaVersionToSerdeRequest() : serdeName() {
  }

  virtual ~MapSchemaVersionToSerdeRequest() throw();
  SchemaVersionDescriptor schemaVersion;
  std::string serdeName;

  _MapSchemaVersionToSerdeRequest__isset __isset;

  void __set_schemaVersion(const SchemaVersionDescriptor& val);

  void __set_serdeName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MapSchemaVersionToSerdeRequest &a, MapSchemaVersionToSerdeRequest &b);

std::ostream& operator<<(std::ostream& out, const MapSchemaVersionToSerdeRequest& obj);

typedef struct _SetSchemaVersionStateRequest__isset {
  _SetSchemaVersionStateRequest__isset() : schemaVersion(false), state(false) {}
  bool schemaVersion :1;
  bool state :1;
} _SetSchemaVersionStateRequest__isset;

class SetSchemaVersionStateRequest {
 public:

  SetSchemaVersionStateRequest(const SetSchemaVersionStateRequest&);
  SetSchemaVersionStateRequest(SetSchemaVersionStateRequest&&);
  SetSchemaVersionStateRequest& operator=(const SetSchemaVersionStateRequest&);
  SetSchemaVersionStateRequest& operator=(SetSchemaVersionStateRequest&&);
  SetSchemaVersionStateRequest() : state((SchemaVersionState::type)0) {
  }

  virtual ~SetSchemaVersionStateRequest() throw();
  SchemaVersionDescriptor schemaVersion;
  SchemaVersionState::type state;

  _SetSchemaVersionStateRequest__isset __isset;

  void __set_schemaVersion(const SchemaVersionDescriptor& val);

  void __set_state(const SchemaVersionState::type val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SetSchemaVersionStateRequest &a, SetSchemaVersionStateRequest &b);

std::ostream& operator<<(std::ostream& out, const SetSchemaVersionStateRequest& obj);

typedef struct _GetSerdeRequest__isset {
  _GetSerdeRequest__isset() : serdeName(false) {}
  bool serdeName :1;
} _GetSerdeRequest__isset;

class GetSerdeRequest {
 public:

  GetSerdeRequest(const GetSerdeRequest&);
  GetSerdeRequest(GetSerdeRequest&&);
  GetSerdeRequest& operator=(const GetSerdeRequest&);
  GetSerdeRequest& operator=(GetSerdeRequest&&);
  GetSerdeRequest() : serdeName() {
  }

  virtual ~GetSerdeRequest() throw();
  std::string serdeName;

  _GetSerdeRequest__isset __isset;

  void __set_serdeName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSerdeRequest &a, GetSerdeRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSerdeRequest& obj);

typedef struct _RuntimeStat__isset {
  _RuntimeStat__isset() : createTime(false) {}
  bool createTime :1;
} _RuntimeStat__isset;

class RuntimeStat {
 public:

  RuntimeStat(const RuntimeStat&);
  RuntimeStat(RuntimeStat&&);
  RuntimeStat& operator=(const RuntimeStat&);
  RuntimeStat& operator=(RuntimeStat&&);
  RuntimeStat() : createTime(0), weight(0), payload() {
  }

  virtual ~RuntimeStat() throw();
  int32_t createTime;
  int32_t weight;
  std::string payload;

  _RuntimeStat__isset __isset;

  void __set_createTime(const int32_t val);

  void __set_weight(const int32_t val);

  void __set_payload(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RuntimeStat &a, RuntimeStat &b);

std::ostream& operator<<(std::ostream& out, const RuntimeStat& obj);


class GetRuntimeStatsRequest {
 public:

  GetRuntimeStatsRequest(const GetRuntimeStatsRequest&);
  GetRuntimeStatsRequest(GetRuntimeStatsRequest&&);
  GetRuntimeStatsRequest& operator=(const GetRuntimeStatsRequest&);
  GetRuntimeStatsRequest& operator=(GetRuntimeStatsRequest&&);
  GetRuntimeStatsRequest() : maxWeight(0), maxCreateTime(0) {
  }

  virtual ~GetRuntimeStatsRequest() throw();
  int32_t maxWeight;
  int32_t maxCreateTime;

  void __set_maxWeight(const int32_t val);

  void __set_maxCreateTime(const int32_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetRuntimeStatsRequest &a, GetRuntimeStatsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetRuntimeStatsRequest& obj);

typedef struct _CreateTableRequest__isset {
  _CreateTableRequest__isset() : envContext(false), primaryKeys(false), foreignKeys(false), uniqueConstraints(false), notNullConstraints(false), defaultConstraints(false), checkConstraints(false), processorCapabilities(false), processorIdentifier(false) {}
  bool envContext :1;
  bool primaryKeys :1;
  bool foreignKeys :1;
  bool uniqueConstraints :1;
  bool notNullConstraints :1;
  bool defaultConstraints :1;
  bool checkConstraints :1;
  bool processorCapabilities :1;
  bool processorIdentifier :1;
} _CreateTableRequest__isset;

class CreateTableRequest {
 public:

  CreateTableRequest(const CreateTableRequest&);
  CreateTableRequest(CreateTableRequest&&);
  CreateTableRequest& operator=(const CreateTableRequest&);
  CreateTableRequest& operator=(CreateTableRequest&&);
  CreateTableRequest() : processorIdentifier() {
  }

  virtual ~CreateTableRequest() throw();
  Table table;
  EnvironmentContext envContext;
  std::vector<SQLPrimaryKey>  primaryKeys;
  std::vector<SQLForeignKey>  foreignKeys;
  std::vector<SQLUniqueConstraint>  uniqueConstraints;
  std::vector<SQLNotNullConstraint>  notNullConstraints;
  std::vector<SQLDefaultConstraint>  defaultConstraints;
  std::vector<SQLCheckConstraint>  checkConstraints;
  std::vector<std::string>  processorCapabilities;
  std::string processorIdentifier;

  _CreateTableRequest__isset __isset;

  void __set_table(const Table& val);

  void __set_envContext(const EnvironmentContext& val);

  void __set_primaryKeys(const std::vector<SQLPrimaryKey> & val);

  void __set_foreignKeys(const std::vector<SQLForeignKey> & val);

  void __set_uniqueConstraints(const std::vector<SQLUniqueConstraint> & val);

  void __set_notNullConstraints(const std::vector<SQLNotNullConstraint> & val);

  void __set_defaultConstraints(const std::vector<SQLDefaultConstraint> & val);

  void __set_checkConstraints(const std::vector<SQLCheckConstraint> & val);

  void __set_processorCapabilities(const std::vector<std::string> & val);

  void __set_processorIdentifier(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CreateTableRequest &a, CreateTableRequest &b);

std::ostream& operator<<(std::ostream& out, const CreateTableRequest& obj);


class ScheduledQueryPollRequest {
 public:

  ScheduledQueryPollRequest(const ScheduledQueryPollRequest&);
  ScheduledQueryPollRequest(ScheduledQueryPollRequest&&);
  ScheduledQueryPollRequest& operator=(const ScheduledQueryPollRequest&);
  ScheduledQueryPollRequest& operator=(ScheduledQueryPollRequest&&);
  ScheduledQueryPollRequest() : clusterNamespace() {
  }

  virtual ~ScheduledQueryPollRequest() throw();
  std::string clusterNamespace;

  void __set_clusterNamespace(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ScheduledQueryPollRequest &a, ScheduledQueryPollRequest &b);

std::ostream& operator<<(std::ostream& out, const ScheduledQueryPollRequest& obj);


class ScheduledQueryKey {
 public:

  ScheduledQueryKey(const ScheduledQueryKey&);
  ScheduledQueryKey(ScheduledQueryKey&&);
  ScheduledQueryKey& operator=(const ScheduledQueryKey&);
  ScheduledQueryKey& operator=(ScheduledQueryKey&&);
  ScheduledQueryKey() : scheduleName(), clusterNamespace() {
  }

  virtual ~ScheduledQueryKey() throw();
  std::string scheduleName;
  std::string clusterNamespace;

  void __set_scheduleName(const std::string& val);

  void __set_clusterNamespace(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ScheduledQueryKey &a, ScheduledQueryKey &b);

std::ostream& operator<<(std::ostream& out, const ScheduledQueryKey& obj);

typedef struct _ScheduledQueryPollResponse__isset {
  _ScheduledQueryPollResponse__isset() : scheduleKey(false), executionId(false), query(false), user(false) {}
  bool scheduleKey :1;
  bool executionId :1;
  bool query :1;
  bool user :1;
} _ScheduledQueryPollResponse__isset;

class ScheduledQueryPollResponse {
 public:

  ScheduledQueryPollResponse(const ScheduledQueryPollResponse&);
  ScheduledQueryPollResponse(ScheduledQueryPollResponse&&);
  ScheduledQueryPollResponse& operator=(const ScheduledQueryPollResponse&);
  ScheduledQueryPollResponse& operator=(ScheduledQueryPollResponse&&);
  ScheduledQueryPollResponse() : executionId(0), query(), user() {
  }

  virtual ~ScheduledQueryPollResponse() throw();
  ScheduledQueryKey scheduleKey;
  int64_t executionId;
  std::string query;
  std::string user;

  _ScheduledQueryPollResponse__isset __isset;

  void __set_scheduleKey(const ScheduledQueryKey& val);

  void __set_executionId(const int64_t val);

  void __set_query(const std::string& val);

  void __set_user(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ScheduledQueryPollResponse &a, ScheduledQueryPollResponse &b);

std::ostream& operator<<(std::ostream& out, const ScheduledQueryPollResponse& obj);

typedef struct _ScheduledQuery__isset {
  _ScheduledQuery__isset() : enabled(false), schedule(false), user(false), query(false), nextExecution(false) {}
  bool enabled :1;
  bool schedule :1;
  bool user :1;
  bool query :1;
  bool nextExecution :1;
} _ScheduledQuery__isset;

class ScheduledQuery {
 public:

  ScheduledQuery(const ScheduledQuery&);
  ScheduledQuery(ScheduledQuery&&);
  ScheduledQuery& operator=(const ScheduledQuery&);
  ScheduledQuery& operator=(ScheduledQuery&&);
  ScheduledQuery() : enabled(0), schedule(), user(), query(), nextExecution(0) {
  }

  virtual ~ScheduledQuery() throw();
  ScheduledQueryKey scheduleKey;
  bool enabled;
  std::string schedule;
  std::string user;
  std::string query;
  int32_t nextExecution;

  _ScheduledQuery__isset __isset;

  void __set_scheduleKey(const ScheduledQueryKey& val);

  void __set_enabled(const bool val);

  void __set_schedule(const std::string& val);

  void __set_user(const std::string& val);

  void __set_query(const std::string& val);

  void __set_nextExecution(const int32_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ScheduledQuery &a, ScheduledQuery &b);

std::ostream& operator<<(std::ostream& out, const ScheduledQuery& obj);


class ScheduledQueryMaintenanceRequest {
 public:

  ScheduledQueryMaintenanceRequest(const ScheduledQueryMaintenanceRequest&);
  ScheduledQueryMaintenanceRequest(ScheduledQueryMaintenanceRequest&&);
  ScheduledQueryMaintenanceRequest& operator=(const ScheduledQueryMaintenanceRequest&);
  ScheduledQueryMaintenanceRequest& operator=(ScheduledQueryMaintenanceRequest&&);
  ScheduledQueryMaintenanceRequest() : type((ScheduledQueryMaintenanceRequestType::type)0) {
  }

  virtual ~ScheduledQueryMaintenanceRequest() throw();
  ScheduledQueryMaintenanceRequestType::type type;
  ScheduledQuery scheduledQuery;

  void __set_type(const ScheduledQueryMaintenanceRequestType::type val);

  void __set_scheduledQuery(const ScheduledQuery& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ScheduledQueryMaintenanceRequest &a, ScheduledQueryMaintenanceRequest &b);

std::ostream& operator<<(std::ostream& out, const ScheduledQueryMaintenanceRequest& obj);

typedef struct _ScheduledQueryProgressInfo__isset {
  _ScheduledQueryProgressInfo__isset() : errorMessage(false) {}
  bool errorMessage :1;
} _ScheduledQueryProgressInfo__isset;

class ScheduledQueryProgressInfo {
 public:

  ScheduledQueryProgressInfo(const ScheduledQueryProgressInfo&);
  ScheduledQueryProgressInfo(ScheduledQueryProgressInfo&&);
  ScheduledQueryProgressInfo& operator=(const ScheduledQueryProgressInfo&);
  ScheduledQueryProgressInfo& operator=(ScheduledQueryProgressInfo&&);
  ScheduledQueryProgressInfo() : scheduledExecutionId(0), state((QueryState::type)0), executorQueryId(), errorMessage() {
  }

  virtual ~ScheduledQueryProgressInfo() throw();
  int64_t scheduledExecutionId;
  QueryState::type state;
  std::string executorQueryId;
  std::string errorMessage;

  _ScheduledQueryProgressInfo__isset __isset;

  void __set_scheduledExecutionId(const int64_t val);

  void __set_state(const QueryState::type val);

  void __set_executorQueryId(const std::string& val);

  void __set_errorMessage(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ScheduledQueryProgressInfo &a, ScheduledQueryProgressInfo &b);

std::ostream& operator<<(std::ostream& out, const ScheduledQueryProgressInfo& obj);

typedef struct _AlterPartitionsRequest__isset {
  _AlterPartitionsRequest__isset() : catName(false), environmentContext(false), writeId(true), validWriteIdList(false) {}
  bool catName :1;
  bool environmentContext :1;
  bool writeId :1;
  bool validWriteIdList :1;
} _AlterPartitionsRequest__isset;

class AlterPartitionsRequest {
 public:

  AlterPartitionsRequest(const AlterPartitionsRequest&);
  AlterPartitionsRequest(AlterPartitionsRequest&&);
  AlterPartitionsRequest& operator=(const AlterPartitionsRequest&);
  AlterPartitionsRequest& operator=(AlterPartitionsRequest&&);
  AlterPartitionsRequest() : catName(), dbName(), tableName(), writeId(-1LL), validWriteIdList() {
  }

  virtual ~AlterPartitionsRequest() throw();
  std::string catName;
  std::string dbName;
  std::string tableName;
  std::vector<Partition>  partitions;
  EnvironmentContext environmentContext;
  int64_t writeId;
  std::string validWriteIdList;

  _AlterPartitionsRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_partitions(const std::vector<Partition> & val);

  void __set_environmentContext(const EnvironmentContext& val);

  void __set_writeId(const int64_t val);

  void __set_validWriteIdList(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AlterPartitionsRequest &a, AlterPartitionsRequest &b);

std::ostream& operator<<(std::ostream& out, const AlterPartitionsRequest& obj);


class AlterPartitionsResponse {
 public:

  AlterPartitionsResponse(const AlterPartitionsResponse&);
  AlterPartitionsResponse(AlterPartitionsResponse&&);
  AlterPartitionsResponse& operator=(const AlterPartitionsResponse&);
  AlterPartitionsResponse& operator=(AlterPartitionsResponse&&);
  AlterPartitionsResponse() {
  }

  virtual ~AlterPartitionsResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AlterPartitionsResponse &a, AlterPartitionsResponse &b);

std::ostream& operator<<(std::ostream& out, const AlterPartitionsResponse& obj);

typedef struct _RenamePartitionRequest__isset {
  _RenamePartitionRequest__isset() : catName(false), validWriteIdList(false) {}
  bool catName :1;
  bool validWriteIdList :1;
} _RenamePartitionRequest__isset;

class RenamePartitionRequest {
 public:

  RenamePartitionRequest(const RenamePartitionRequest&);
  RenamePartitionRequest(RenamePartitionRequest&&);
  RenamePartitionRequest& operator=(const RenamePartitionRequest&);
  RenamePartitionRequest& operator=(RenamePartitionRequest&&);
  RenamePartitionRequest() : catName(), dbName(), tableName(), validWriteIdList() {
  }

  virtual ~RenamePartitionRequest() throw();
  std::string catName;
  std::string dbName;
  std::string tableName;
  std::vector<std::string>  partVals;
  Partition newPart;
  std::string validWriteIdList;

  _RenamePartitionRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_partVals(const std::vector<std::string> & val);

  void __set_newPart(const Partition& val);

  void __set_validWriteIdList(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RenamePartitionRequest &a, RenamePartitionRequest &b);

std::ostream& operator<<(std::ostream& out, const RenamePartitionRequest& obj);


class RenamePartitionResponse {
 public:

  RenamePartitionResponse(const RenamePartitionResponse&);
  RenamePartitionResponse(RenamePartitionResponse&&);
  RenamePartitionResponse& operator=(const RenamePartitionResponse&);
  RenamePartitionResponse& operator=(RenamePartitionResponse&&);
  RenamePartitionResponse() {
  }

  virtual ~RenamePartitionResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RenamePartitionResponse &a, RenamePartitionResponse &b);

std::ostream& operator<<(std::ostream& out, const RenamePartitionResponse& obj);

typedef struct _AlterTableRequest__isset {
  _AlterTableRequest__isset() : catName(false), environmentContext(false), writeId(true), validWriteIdList(false), processorCapabilities(false), processorIdentifier(false) {}
  bool catName :1;
  bool environmentContext :1;
  bool writeId :1;
  bool validWriteIdList :1;
  bool processorCapabilities :1;
  bool processorIdentifier :1;
} _AlterTableRequest__isset;

class AlterTableRequest {
 public:

  AlterTableRequest(const AlterTableRequest&);
  AlterTableRequest(AlterTableRequest&&);
  AlterTableRequest& operator=(const AlterTableRequest&);
  AlterTableRequest& operator=(AlterTableRequest&&);
  AlterTableRequest() : catName(), dbName(), tableName(), writeId(-1LL), validWriteIdList(), processorIdentifier() {
  }

  virtual ~AlterTableRequest() throw();
  std::string catName;
  std::string dbName;
  std::string tableName;
  Table table;
  EnvironmentContext environmentContext;
  int64_t writeId;
  std::string validWriteIdList;
  std::vector<std::string>  processorCapabilities;
  std::string processorIdentifier;

  _AlterTableRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  void __set_table(const Table& val);

  void __set_environmentContext(const EnvironmentContext& val);

  void __set_writeId(const int64_t val);

  void __set_validWriteIdList(const std::string& val);

  void __set_processorCapabilities(const std::vector<std::string> & val);

  void __set_processorIdentifier(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AlterTableRequest &a, AlterTableRequest &b);

std::ostream& operator<<(std::ostream& out, const AlterTableRequest& obj);


class AlterTableResponse {
 public:

  AlterTableResponse(const AlterTableResponse&);
  AlterTableResponse(AlterTableResponse&&);
  AlterTableResponse& operator=(const AlterTableResponse&);
  AlterTableResponse& operator=(AlterTableResponse&&);
  AlterTableResponse() {
  }

  virtual ~AlterTableResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AlterTableResponse &a, AlterTableResponse &b);

std::ostream& operator<<(std::ostream& out, const AlterTableResponse& obj);

typedef struct _GetPartitionsFilterSpec__isset {
  _GetPartitionsFilterSpec__isset() : filterMode(false), filters(false) {}
  bool filterMode :1;
  bool filters :1;
} _GetPartitionsFilterSpec__isset;

class GetPartitionsFilterSpec {
 public:

  GetPartitionsFilterSpec(const GetPartitionsFilterSpec&);
  GetPartitionsFilterSpec(GetPartitionsFilterSpec&&);
  GetPartitionsFilterSpec& operator=(const GetPartitionsFilterSpec&);
  GetPartitionsFilterSpec& operator=(GetPartitionsFilterSpec&&);
  GetPartitionsFilterSpec() : filterMode((PartitionFilterMode::type)0) {
  }

  virtual ~GetPartitionsFilterSpec() throw();
  PartitionFilterMode::type filterMode;
  std::vector<std::string>  filters;

  _GetPartitionsFilterSpec__isset __isset;

  void __set_filterMode(const PartitionFilterMode::type val);

  void __set_filters(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPartitionsFilterSpec &a, GetPartitionsFilterSpec &b);

std::ostream& operator<<(std::ostream& out, const GetPartitionsFilterSpec& obj);

typedef struct _GetPartitionsResponse__isset {
  _GetPartitionsResponse__isset() : partitionSpec(false) {}
  bool partitionSpec :1;
} _GetPartitionsResponse__isset;

class GetPartitionsResponse {
 public:

  GetPartitionsResponse(const GetPartitionsResponse&);
  GetPartitionsResponse(GetPartitionsResponse&&);
  GetPartitionsResponse& operator=(const GetPartitionsResponse&);
  GetPartitionsResponse& operator=(GetPartitionsResponse&&);
  GetPartitionsResponse() {
  }

  virtual ~GetPartitionsResponse() throw();
  std::vector<PartitionSpec>  partitionSpec;

  _GetPartitionsResponse__isset __isset;

  void __set_partitionSpec(const std::vector<PartitionSpec> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPartitionsResponse &a, GetPartitionsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetPartitionsResponse& obj);

typedef struct _GetPartitionsRequest__isset {
  _GetPartitionsRequest__isset() : catName(false), dbName(false), tblName(false), withAuth(false), user(false), groupNames(false), projectionSpec(false), filterSpec(false), processorCapabilities(false), processorIdentifier(false), validWriteIdList(false) {}
  bool catName :1;
  bool dbName :1;
  bool tblName :1;
  bool withAuth :1;
  bool user :1;
  bool groupNames :1;
  bool projectionSpec :1;
  bool filterSpec :1;
  bool processorCapabilities :1;
  bool processorIdentifier :1;
  bool validWriteIdList :1;
} _GetPartitionsRequest__isset;

class GetPartitionsRequest {
 public:

  GetPartitionsRequest(const GetPartitionsRequest&);
  GetPartitionsRequest(GetPartitionsRequest&&);
  GetPartitionsRequest& operator=(const GetPartitionsRequest&);
  GetPartitionsRequest& operator=(GetPartitionsRequest&&);
  GetPartitionsRequest() : catName(), dbName(), tblName(), withAuth(0), user(), processorIdentifier(), validWriteIdList() {
  }

  virtual ~GetPartitionsRequest() throw();
  std::string catName;
  std::string dbName;
  std::string tblName;
  bool withAuth;
  std::string user;
  std::vector<std::string>  groupNames;
  GetProjectionsSpec projectionSpec;
  GetPartitionsFilterSpec filterSpec;
  std::vector<std::string>  processorCapabilities;
  std::string processorIdentifier;
  std::string validWriteIdList;

  _GetPartitionsRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_withAuth(const bool val);

  void __set_user(const std::string& val);

  void __set_groupNames(const std::vector<std::string> & val);

  void __set_projectionSpec(const GetProjectionsSpec& val);

  void __set_filterSpec(const GetPartitionsFilterSpec& val);

  void __set_processorCapabilities(const std::vector<std::string> & val);

  void __set_processorIdentifier(const std::string& val);

  void __set_validWriteIdList(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPartitionsRequest &a, GetPartitionsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetPartitionsRequest& obj);

typedef struct _GetFieldsRequest__isset {
  _GetFieldsRequest__isset() : catName(false), envContext(false), validWriteIdList(false), id(true) {}
  bool catName :1;
  bool envContext :1;
  bool validWriteIdList :1;
  bool id :1;
} _GetFieldsRequest__isset;

class GetFieldsRequest {
 public:

  GetFieldsRequest(const GetFieldsRequest&);
  GetFieldsRequest(GetFieldsRequest&&);
  GetFieldsRequest& operator=(const GetFieldsRequest&);
  GetFieldsRequest& operator=(GetFieldsRequest&&);
  GetFieldsRequest() : catName(), dbName(), tblName(), validWriteIdList(), id(-1LL) {
  }

  virtual ~GetFieldsRequest() throw();
  std::string catName;
  std::string dbName;
  std::string tblName;
  EnvironmentContext envContext;
  std::string validWriteIdList;
  int64_t id;

  _GetFieldsRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_envContext(const EnvironmentContext& val);

  void __set_validWriteIdList(const std::string& val);

  void __set_id(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetFieldsRequest &a, GetFieldsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetFieldsRequest& obj);


class GetFieldsResponse {
 public:

  GetFieldsResponse(const GetFieldsResponse&);
  GetFieldsResponse(GetFieldsResponse&&);
  GetFieldsResponse& operator=(const GetFieldsResponse&);
  GetFieldsResponse& operator=(GetFieldsResponse&&);
  GetFieldsResponse() {
  }

  virtual ~GetFieldsResponse() throw();
  std::vector<FieldSchema>  fields;

  void __set_fields(const std::vector<FieldSchema> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetFieldsResponse &a, GetFieldsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetFieldsResponse& obj);

typedef struct _GetSchemaRequest__isset {
  _GetSchemaRequest__isset() : catName(false), envContext(false), validWriteIdList(false), id(true) {}
  bool catName :1;
  bool envContext :1;
  bool validWriteIdList :1;
  bool id :1;
} _GetSchemaRequest__isset;

class GetSchemaRequest {
 public:

  GetSchemaRequest(const GetSchemaRequest&);
  GetSchemaRequest(GetSchemaRequest&&);
  GetSchemaRequest& operator=(const GetSchemaRequest&);
  GetSchemaRequest& operator=(GetSchemaRequest&&);
  GetSchemaRequest() : catName(), dbName(), tblName(), validWriteIdList(), id(-1LL) {
  }

  virtual ~GetSchemaRequest() throw();
  std::string catName;
  std::string dbName;
  std::string tblName;
  EnvironmentContext envContext;
  std::string validWriteIdList;
  int64_t id;

  _GetSchemaRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_envContext(const EnvironmentContext& val);

  void __set_validWriteIdList(const std::string& val);

  void __set_id(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSchemaRequest &a, GetSchemaRequest &b);

std::ostream& operator<<(std::ostream& out, const GetSchemaRequest& obj);


class GetSchemaResponse {
 public:

  GetSchemaResponse(const GetSchemaResponse&);
  GetSchemaResponse(GetSchemaResponse&&);
  GetSchemaResponse& operator=(const GetSchemaResponse&);
  GetSchemaResponse& operator=(GetSchemaResponse&&);
  GetSchemaResponse() {
  }

  virtual ~GetSchemaResponse() throw();
  std::vector<FieldSchema>  fields;

  void __set_fields(const std::vector<FieldSchema> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetSchemaResponse &a, GetSchemaResponse &b);

std::ostream& operator<<(std::ostream& out, const GetSchemaResponse& obj);

typedef struct _GetPartitionRequest__isset {
  _GetPartitionRequest__isset() : catName(false), validWriteIdList(false), id(true) {}
  bool catName :1;
  bool validWriteIdList :1;
  bool id :1;
} _GetPartitionRequest__isset;

class GetPartitionRequest {
 public:

  GetPartitionRequest(const GetPartitionRequest&);
  GetPartitionRequest(GetPartitionRequest&&);
  GetPartitionRequest& operator=(const GetPartitionRequest&);
  GetPartitionRequest& operator=(GetPartitionRequest&&);
  GetPartitionRequest() : catName(), dbName(), tblName(), validWriteIdList(), id(-1LL) {
  }

  virtual ~GetPartitionRequest() throw();
  std::string catName;
  std::string dbName;
  std::string tblName;
  std::vector<std::string>  partVals;
  std::string validWriteIdList;
  int64_t id;

  _GetPartitionRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_partVals(const std::vector<std::string> & val);

  void __set_validWriteIdList(const std::string& val);

  void __set_id(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPartitionRequest &a, GetPartitionRequest &b);

std::ostream& operator<<(std::ostream& out, const GetPartitionRequest& obj);


class GetPartitionResponse {
 public:

  GetPartitionResponse(const GetPartitionResponse&);
  GetPartitionResponse(GetPartitionResponse&&);
  GetPartitionResponse& operator=(const GetPartitionResponse&);
  GetPartitionResponse& operator=(GetPartitionResponse&&);
  GetPartitionResponse() {
  }

  virtual ~GetPartitionResponse() throw();
  Partition partition;

  void __set_partition(const Partition& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPartitionResponse &a, GetPartitionResponse &b);

std::ostream& operator<<(std::ostream& out, const GetPartitionResponse& obj);

typedef struct _PartitionsRequest__isset {
  _PartitionsRequest__isset() : catName(false), maxParts(true), validWriteIdList(false), id(true) {}
  bool catName :1;
  bool maxParts :1;
  bool validWriteIdList :1;
  bool id :1;
} _PartitionsRequest__isset;

class PartitionsRequest {
 public:

  PartitionsRequest(const PartitionsRequest&);
  PartitionsRequest(PartitionsRequest&&);
  PartitionsRequest& operator=(const PartitionsRequest&);
  PartitionsRequest& operator=(PartitionsRequest&&);
  PartitionsRequest() : catName(), dbName(), tblName(), maxParts(-1), validWriteIdList(), id(-1LL) {
  }

  virtual ~PartitionsRequest() throw();
  std::string catName;
  std::string dbName;
  std::string tblName;
  int16_t maxParts;
  std::string validWriteIdList;
  int64_t id;

  _PartitionsRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_maxParts(const int16_t val);

  void __set_validWriteIdList(const std::string& val);

  void __set_id(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionsRequest &a, PartitionsRequest &b);

std::ostream& operator<<(std::ostream& out, const PartitionsRequest& obj);


class PartitionsResponse {
 public:

  PartitionsResponse(const PartitionsResponse&);
  PartitionsResponse(PartitionsResponse&&);
  PartitionsResponse& operator=(const PartitionsResponse&);
  PartitionsResponse& operator=(PartitionsResponse&&);
  PartitionsResponse() {
  }

  virtual ~PartitionsResponse() throw();
  std::vector<Partition>  partitions;

  void __set_partitions(const std::vector<Partition> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PartitionsResponse &a, PartitionsResponse &b);

std::ostream& operator<<(std::ostream& out, const PartitionsResponse& obj);

typedef struct _GetPartitionNamesPsRequest__isset {
  _GetPartitionNamesPsRequest__isset() : catName(false), partValues(false), maxParts(true), validWriteIdList(false), id(true) {}
  bool catName :1;
  bool partValues :1;
  bool maxParts :1;
  bool validWriteIdList :1;
  bool id :1;
} _GetPartitionNamesPsRequest__isset;

class GetPartitionNamesPsRequest {
 public:

  GetPartitionNamesPsRequest(const GetPartitionNamesPsRequest&);
  GetPartitionNamesPsRequest(GetPartitionNamesPsRequest&&);
  GetPartitionNamesPsRequest& operator=(const GetPartitionNamesPsRequest&);
  GetPartitionNamesPsRequest& operator=(GetPartitionNamesPsRequest&&);
  GetPartitionNamesPsRequest() : catName(), dbName(), tblName(), maxParts(-1), validWriteIdList(), id(-1LL) {
  }

  virtual ~GetPartitionNamesPsRequest() throw();
  std::string catName;
  std::string dbName;
  std::string tblName;
  std::vector<std::string>  partValues;
  int16_t maxParts;
  std::string validWriteIdList;
  int64_t id;

  _GetPartitionNamesPsRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_partValues(const std::vector<std::string> & val);

  void __set_maxParts(const int16_t val);

  void __set_validWriteIdList(const std::string& val);

  void __set_id(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPartitionNamesPsRequest &a, GetPartitionNamesPsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetPartitionNamesPsRequest& obj);


class GetPartitionNamesPsResponse {
 public:

  GetPartitionNamesPsResponse(const GetPartitionNamesPsResponse&);
  GetPartitionNamesPsResponse(GetPartitionNamesPsResponse&&);
  GetPartitionNamesPsResponse& operator=(const GetPartitionNamesPsResponse&);
  GetPartitionNamesPsResponse& operator=(GetPartitionNamesPsResponse&&);
  GetPartitionNamesPsResponse() {
  }

  virtual ~GetPartitionNamesPsResponse() throw();
  std::vector<std::string>  names;

  void __set_names(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPartitionNamesPsResponse &a, GetPartitionNamesPsResponse &b);

std::ostream& operator<<(std::ostream& out, const GetPartitionNamesPsResponse& obj);

typedef struct _GetPartitionsPsWithAuthRequest__isset {
  _GetPartitionsPsWithAuthRequest__isset() : catName(false), partVals(false), maxParts(true), userName(false), groupNames(false), validWriteIdList(false), id(true) {}
  bool catName :1;
  bool partVals :1;
  bool maxParts :1;
  bool userName :1;
  bool groupNames :1;
  bool validWriteIdList :1;
  bool id :1;
} _GetPartitionsPsWithAuthRequest__isset;

class GetPartitionsPsWithAuthRequest {
 public:

  GetPartitionsPsWithAuthRequest(const GetPartitionsPsWithAuthRequest&);
  GetPartitionsPsWithAuthRequest(GetPartitionsPsWithAuthRequest&&);
  GetPartitionsPsWithAuthRequest& operator=(const GetPartitionsPsWithAuthRequest&);
  GetPartitionsPsWithAuthRequest& operator=(GetPartitionsPsWithAuthRequest&&);
  GetPartitionsPsWithAuthRequest() : catName(), dbName(), tblName(), maxParts(-1), userName(), validWriteIdList(), id(-1LL) {
  }

  virtual ~GetPartitionsPsWithAuthRequest() throw();
  std::string catName;
  std::string dbName;
  std::string tblName;
  std::vector<std::string>  partVals;
  int16_t maxParts;
  std::string userName;
  std::vector<std::string>  groupNames;
  std::string validWriteIdList;
  int64_t id;

  _GetPartitionsPsWithAuthRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_tblName(const std::string& val);

  void __set_partVals(const std::vector<std::string> & val);

  void __set_maxParts(const int16_t val);

  void __set_userName(const std::string& val);

  void __set_groupNames(const std::vector<std::string> & val);

  void __set_validWriteIdList(const std::string& val);

  void __set_id(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPartitionsPsWithAuthRequest &a, GetPartitionsPsWithAuthRequest &b);

std::ostream& operator<<(std::ostream& out, const GetPartitionsPsWithAuthRequest& obj);


class GetPartitionsPsWithAuthResponse {
 public:

  GetPartitionsPsWithAuthResponse(const GetPartitionsPsWithAuthResponse&);
  GetPartitionsPsWithAuthResponse(GetPartitionsPsWithAuthResponse&&);
  GetPartitionsPsWithAuthResponse& operator=(const GetPartitionsPsWithAuthResponse&);
  GetPartitionsPsWithAuthResponse& operator=(GetPartitionsPsWithAuthResponse&&);
  GetPartitionsPsWithAuthResponse() {
  }

  virtual ~GetPartitionsPsWithAuthResponse() throw();
  std::vector<Partition>  partitions;

  void __set_partitions(const std::vector<Partition> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPartitionsPsWithAuthResponse &a, GetPartitionsPsWithAuthResponse &b);

std::ostream& operator<<(std::ostream& out, const GetPartitionsPsWithAuthResponse& obj);

typedef struct _ReplicationMetrics__isset {
  _ReplicationMetrics__isset() : metadata(false), progress(false) {}
  bool metadata :1;
  bool progress :1;
} _ReplicationMetrics__isset;

class ReplicationMetrics {
 public:

  ReplicationMetrics(const ReplicationMetrics&);
  ReplicationMetrics(ReplicationMetrics&&);
  ReplicationMetrics& operator=(const ReplicationMetrics&);
  ReplicationMetrics& operator=(ReplicationMetrics&&);
  ReplicationMetrics() : scheduledExecutionId(0), policy(), dumpExecutionId(0), metadata(), progress() {
  }

  virtual ~ReplicationMetrics() throw();
  int64_t scheduledExecutionId;
  std::string policy;
  int64_t dumpExecutionId;
  std::string metadata;
  std::string progress;

  _ReplicationMetrics__isset __isset;

  void __set_scheduledExecutionId(const int64_t val);

  void __set_policy(const std::string& val);

  void __set_dumpExecutionId(const int64_t val);

  void __set_metadata(const std::string& val);

  void __set_progress(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReplicationMetrics &a, ReplicationMetrics &b);

std::ostream& operator<<(std::ostream& out, const ReplicationMetrics& obj);


class ReplicationMetricList {
 public:

  ReplicationMetricList(const ReplicationMetricList&);
  ReplicationMetricList(ReplicationMetricList&&);
  ReplicationMetricList& operator=(const ReplicationMetricList&);
  ReplicationMetricList& operator=(ReplicationMetricList&&);
  ReplicationMetricList() {
  }

  virtual ~ReplicationMetricList() throw();
  std::vector<ReplicationMetrics>  replicationMetricList;

  void __set_replicationMetricList(const std::vector<ReplicationMetrics> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReplicationMetricList &a, ReplicationMetricList &b);

std::ostream& operator<<(std::ostream& out, const ReplicationMetricList& obj);

typedef struct _GetReplicationMetricsRequest__isset {
  _GetReplicationMetricsRequest__isset() : scheduledExecutionId(false), policy(false), dumpExecutionId(false) {}
  bool scheduledExecutionId :1;
  bool policy :1;
  bool dumpExecutionId :1;
} _GetReplicationMetricsRequest__isset;

class GetReplicationMetricsRequest {
 public:

  GetReplicationMetricsRequest(const GetReplicationMetricsRequest&);
  GetReplicationMetricsRequest(GetReplicationMetricsRequest&&);
  GetReplicationMetricsRequest& operator=(const GetReplicationMetricsRequest&);
  GetReplicationMetricsRequest& operator=(GetReplicationMetricsRequest&&);
  GetReplicationMetricsRequest() : scheduledExecutionId(0), policy(), dumpExecutionId(0) {
  }

  virtual ~GetReplicationMetricsRequest() throw();
  int64_t scheduledExecutionId;
  std::string policy;
  int64_t dumpExecutionId;

  _GetReplicationMetricsRequest__isset __isset;

  void __set_scheduledExecutionId(const int64_t val);

  void __set_policy(const std::string& val);

  void __set_dumpExecutionId(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetReplicationMetricsRequest &a, GetReplicationMetricsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetReplicationMetricsRequest& obj);

typedef struct _GetOpenTxnsRequest__isset {
  _GetOpenTxnsRequest__isset() : excludeTxnTypes(false) {}
  bool excludeTxnTypes :1;
} _GetOpenTxnsRequest__isset;

class GetOpenTxnsRequest {
 public:

  GetOpenTxnsRequest(const GetOpenTxnsRequest&);
  GetOpenTxnsRequest(GetOpenTxnsRequest&&);
  GetOpenTxnsRequest& operator=(const GetOpenTxnsRequest&);
  GetOpenTxnsRequest& operator=(GetOpenTxnsRequest&&);
  GetOpenTxnsRequest() {
  }

  virtual ~GetOpenTxnsRequest() throw();
  std::vector<TxnType::type>  excludeTxnTypes;

  _GetOpenTxnsRequest__isset __isset;

  void __set_excludeTxnTypes(const std::vector<TxnType::type> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetOpenTxnsRequest &a, GetOpenTxnsRequest &b);

std::ostream& operator<<(std::ostream& out, const GetOpenTxnsRequest& obj);


class StoredProcedureRequest {
 public:

  StoredProcedureRequest(const StoredProcedureRequest&);
  StoredProcedureRequest(StoredProcedureRequest&&);
  StoredProcedureRequest& operator=(const StoredProcedureRequest&);
  StoredProcedureRequest& operator=(StoredProcedureRequest&&);
  StoredProcedureRequest() : catName(), dbName(), procName() {
  }

  virtual ~StoredProcedureRequest() throw();
  std::string catName;
  std::string dbName;
  std::string procName;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_procName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StoredProcedureRequest &a, StoredProcedureRequest &b);

std::ostream& operator<<(std::ostream& out, const StoredProcedureRequest& obj);

typedef struct _ListStoredProcedureRequest__isset {
  _ListStoredProcedureRequest__isset() : dbName(false) {}
  bool dbName :1;
} _ListStoredProcedureRequest__isset;

class ListStoredProcedureRequest {
 public:

  ListStoredProcedureRequest(const ListStoredProcedureRequest&);
  ListStoredProcedureRequest(ListStoredProcedureRequest&&);
  ListStoredProcedureRequest& operator=(const ListStoredProcedureRequest&);
  ListStoredProcedureRequest& operator=(ListStoredProcedureRequest&&);
  ListStoredProcedureRequest() : catName(), dbName() {
  }

  virtual ~ListStoredProcedureRequest() throw();
  std::string catName;
  std::string dbName;

  _ListStoredProcedureRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListStoredProcedureRequest &a, ListStoredProcedureRequest &b);

std::ostream& operator<<(std::ostream& out, const ListStoredProcedureRequest& obj);

typedef struct _StoredProcedure__isset {
  _StoredProcedure__isset() : name(false), dbName(false), catName(false), ownerName(false), source(false) {}
  bool name :1;
  bool dbName :1;
  bool catName :1;
  bool ownerName :1;
  bool source :1;
} _StoredProcedure__isset;

class StoredProcedure {
 public:

  StoredProcedure(const StoredProcedure&);
  StoredProcedure(StoredProcedure&&);
  StoredProcedure& operator=(const StoredProcedure&);
  StoredProcedure& operator=(StoredProcedure&&);
  StoredProcedure() : name(), dbName(), catName(), ownerName(), source() {
  }

  virtual ~StoredProcedure() throw();
  std::string name;
  std::string dbName;
  std::string catName;
  std::string ownerName;
  std::string source;

  _StoredProcedure__isset __isset;

  void __set_name(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_catName(const std::string& val);

  void __set_ownerName(const std::string& val);

  void __set_source(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StoredProcedure &a, StoredProcedure &b);

std::ostream& operator<<(std::ostream& out, const StoredProcedure& obj);

typedef struct _AddPackageRequest__isset {
  _AddPackageRequest__isset() : catName(false), dbName(false), packageName(false), ownerName(false), header(false), body(false) {}
  bool catName :1;
  bool dbName :1;
  bool packageName :1;
  bool ownerName :1;
  bool header :1;
  bool body :1;
} _AddPackageRequest__isset;

class AddPackageRequest {
 public:

  AddPackageRequest(const AddPackageRequest&);
  AddPackageRequest(AddPackageRequest&&);
  AddPackageRequest& operator=(const AddPackageRequest&);
  AddPackageRequest& operator=(AddPackageRequest&&);
  AddPackageRequest() : catName(), dbName(), packageName(), ownerName(), header(), body() {
  }

  virtual ~AddPackageRequest() throw();
  std::string catName;
  std::string dbName;
  std::string packageName;
  std::string ownerName;
  std::string header;
  std::string body;

  _AddPackageRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_packageName(const std::string& val);

  void __set_ownerName(const std::string& val);

  void __set_header(const std::string& val);

  void __set_body(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddPackageRequest &a, AddPackageRequest &b);

std::ostream& operator<<(std::ostream& out, const AddPackageRequest& obj);


class GetPackageRequest {
 public:

  GetPackageRequest(const GetPackageRequest&);
  GetPackageRequest(GetPackageRequest&&);
  GetPackageRequest& operator=(const GetPackageRequest&);
  GetPackageRequest& operator=(GetPackageRequest&&);
  GetPackageRequest() : catName(), dbName(), packageName() {
  }

  virtual ~GetPackageRequest() throw();
  std::string catName;
  std::string dbName;
  std::string packageName;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_packageName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetPackageRequest &a, GetPackageRequest &b);

std::ostream& operator<<(std::ostream& out, const GetPackageRequest& obj);


class DropPackageRequest {
 public:

  DropPackageRequest(const DropPackageRequest&);
  DropPackageRequest(DropPackageRequest&&);
  DropPackageRequest& operator=(const DropPackageRequest&);
  DropPackageRequest& operator=(DropPackageRequest&&);
  DropPackageRequest() : catName(), dbName(), packageName() {
  }

  virtual ~DropPackageRequest() throw();
  std::string catName;
  std::string dbName;
  std::string packageName;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_packageName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropPackageRequest &a, DropPackageRequest &b);

std::ostream& operator<<(std::ostream& out, const DropPackageRequest& obj);

typedef struct _ListPackageRequest__isset {
  _ListPackageRequest__isset() : dbName(false) {}
  bool dbName :1;
} _ListPackageRequest__isset;

class ListPackageRequest {
 public:

  ListPackageRequest(const ListPackageRequest&);
  ListPackageRequest(ListPackageRequest&&);
  ListPackageRequest& operator=(const ListPackageRequest&);
  ListPackageRequest& operator=(ListPackageRequest&&);
  ListPackageRequest() : catName(), dbName() {
  }

  virtual ~ListPackageRequest() throw();
  std::string catName;
  std::string dbName;

  _ListPackageRequest__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ListPackageRequest &a, ListPackageRequest &b);

std::ostream& operator<<(std::ostream& out, const ListPackageRequest& obj);

typedef struct _Package__isset {
  _Package__isset() : catName(false), dbName(false), packageName(false), ownerName(false), header(false), body(false) {}
  bool catName :1;
  bool dbName :1;
  bool packageName :1;
  bool ownerName :1;
  bool header :1;
  bool body :1;
} _Package__isset;

class Package {
 public:

  Package(const Package&);
  Package(Package&&);
  Package& operator=(const Package&);
  Package& operator=(Package&&);
  Package() : catName(), dbName(), packageName(), ownerName(), header(), body() {
  }

  virtual ~Package() throw();
  std::string catName;
  std::string dbName;
  std::string packageName;
  std::string ownerName;
  std::string header;
  std::string body;

  _Package__isset __isset;

  void __set_catName(const std::string& val);

  void __set_dbName(const std::string& val);

  void __set_packageName(const std::string& val);

  void __set_ownerName(const std::string& val);

  void __set_header(const std::string& val);

  void __set_body(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Package &a, Package &b);

std::ostream& operator<<(std::ostream& out, const Package& obj);

typedef struct _GetAllWriteEventInfoRequest__isset {
  _GetAllWriteEventInfoRequest__isset() : dbName(false), tableName(false) {}
  bool dbName :1;
  bool tableName :1;
} _GetAllWriteEventInfoRequest__isset;

class GetAllWriteEventInfoRequest {
 public:

  GetAllWriteEventInfoRequest(const GetAllWriteEventInfoRequest&);
  GetAllWriteEventInfoRequest(GetAllWriteEventInfoRequest&&);
  GetAllWriteEventInfoRequest& operator=(const GetAllWriteEventInfoRequest&);
  GetAllWriteEventInfoRequest& operator=(GetAllWriteEventInfoRequest&&);
  GetAllWriteEventInfoRequest() : txnId(0), dbName(), tableName() {
  }

  virtual ~GetAllWriteEventInfoRequest() throw();
  int64_t txnId;
  std::string dbName;
  std::string tableName;

  _GetAllWriteEventInfoRequest__isset __isset;

  void __set_txnId(const int64_t val);

  void __set_dbName(const std::string& val);

  void __set_tableName(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetAllWriteEventInfoRequest &a, GetAllWriteEventInfoRequest &b);

std::ostream& operator<<(std::ostream& out, const GetAllWriteEventInfoRequest& obj);

typedef struct _MetaException__isset {
  _MetaException__isset() : message(false) {}
  bool message :1;
} _MetaException__isset;

class MetaException : public ::apache::thrift::TException {
 public:

  MetaException(const MetaException&);
  MetaException(MetaException&&);
  MetaException& operator=(const MetaException&);
  MetaException& operator=(MetaException&&);
  MetaException() : message() {
  }

  virtual ~MetaException() throw();
  std::string message;

  _MetaException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(MetaException &a, MetaException &b);

std::ostream& operator<<(std::ostream& out, const MetaException& obj);

typedef struct _UnknownTableException__isset {
  _UnknownTableException__isset() : message(false) {}
  bool message :1;
} _UnknownTableException__isset;

class UnknownTableException : public ::apache::thrift::TException {
 public:

  UnknownTableException(const UnknownTableException&);
  UnknownTableException(UnknownTableException&&);
  UnknownTableException& operator=(const UnknownTableException&);
  UnknownTableException& operator=(UnknownTableException&&);
  UnknownTableException() : message() {
  }

  virtual ~UnknownTableException() throw();
  std::string message;

  _UnknownTableException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(UnknownTableException &a, UnknownTableException &b);

std::ostream& operator<<(std::ostream& out, const UnknownTableException& obj);

typedef struct _UnknownDBException__isset {
  _UnknownDBException__isset() : message(false) {}
  bool message :1;
} _UnknownDBException__isset;

class UnknownDBException : public ::apache::thrift::TException {
 public:

  UnknownDBException(const UnknownDBException&);
  UnknownDBException(UnknownDBException&&);
  UnknownDBException& operator=(const UnknownDBException&);
  UnknownDBException& operator=(UnknownDBException&&);
  UnknownDBException() : message() {
  }

  virtual ~UnknownDBException() throw();
  std::string message;

  _UnknownDBException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(UnknownDBException &a, UnknownDBException &b);

std::ostream& operator<<(std::ostream& out, const UnknownDBException& obj);

typedef struct _AlreadyExistsException__isset {
  _AlreadyExistsException__isset() : message(false) {}
  bool message :1;
} _AlreadyExistsException__isset;

class AlreadyExistsException : public ::apache::thrift::TException {
 public:

  AlreadyExistsException(const AlreadyExistsException&);
  AlreadyExistsException(AlreadyExistsException&&);
  AlreadyExistsException& operator=(const AlreadyExistsException&);
  AlreadyExistsException& operator=(AlreadyExistsException&&);
  AlreadyExistsException() : message() {
  }

  virtual ~AlreadyExistsException() throw();
  std::string message;

  _AlreadyExistsException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(AlreadyExistsException &a, AlreadyExistsException &b);

std::ostream& operator<<(std::ostream& out, const AlreadyExistsException& obj);

typedef struct _InvalidPartitionException__isset {
  _InvalidPartitionException__isset() : message(false) {}
  bool message :1;
} _InvalidPartitionException__isset;

class InvalidPartitionException : public ::apache::thrift::TException {
 public:

  InvalidPartitionException(const InvalidPartitionException&);
  InvalidPartitionException(InvalidPartitionException&&);
  InvalidPartitionException& operator=(const InvalidPartitionException&);
  InvalidPartitionException& operator=(InvalidPartitionException&&);
  InvalidPartitionException() : message() {
  }

  virtual ~InvalidPartitionException() throw();
  std::string message;

  _InvalidPartitionException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidPartitionException &a, InvalidPartitionException &b);

std::ostream& operator<<(std::ostream& out, const InvalidPartitionException& obj);

typedef struct _UnknownPartitionException__isset {
  _UnknownPartitionException__isset() : message(false) {}
  bool message :1;
} _UnknownPartitionException__isset;

class UnknownPartitionException : public ::apache::thrift::TException {
 public:

  UnknownPartitionException(const UnknownPartitionException&);
  UnknownPartitionException(UnknownPartitionException&&);
  UnknownPartitionException& operator=(const UnknownPartitionException&);
  UnknownPartitionException& operator=(UnknownPartitionException&&);
  UnknownPartitionException() : message() {
  }

  virtual ~UnknownPartitionException() throw();
  std::string message;

  _UnknownPartitionException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(UnknownPartitionException &a, UnknownPartitionException &b);

std::ostream& operator<<(std::ostream& out, const UnknownPartitionException& obj);

typedef struct _InvalidObjectException__isset {
  _InvalidObjectException__isset() : message(false) {}
  bool message :1;
} _InvalidObjectException__isset;

class InvalidObjectException : public ::apache::thrift::TException {
 public:

  InvalidObjectException(const InvalidObjectException&);
  InvalidObjectException(InvalidObjectException&&);
  InvalidObjectException& operator=(const InvalidObjectException&);
  InvalidObjectException& operator=(InvalidObjectException&&);
  InvalidObjectException() : message() {
  }

  virtual ~InvalidObjectException() throw();
  std::string message;

  _InvalidObjectException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidObjectException &a, InvalidObjectException &b);

std::ostream& operator<<(std::ostream& out, const InvalidObjectException& obj);

typedef struct _NoSuchObjectException__isset {
  _NoSuchObjectException__isset() : message(false) {}
  bool message :1;
} _NoSuchObjectException__isset;

class NoSuchObjectException : public ::apache::thrift::TException {
 public:

  NoSuchObjectException(const NoSuchObjectException&);
  NoSuchObjectException(NoSuchObjectException&&);
  NoSuchObjectException& operator=(const NoSuchObjectException&);
  NoSuchObjectException& operator=(NoSuchObjectException&&);
  NoSuchObjectException() : message() {
  }

  virtual ~NoSuchObjectException() throw();
  std::string message;

  _NoSuchObjectException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(NoSuchObjectException &a, NoSuchObjectException &b);

std::ostream& operator<<(std::ostream& out, const NoSuchObjectException& obj);

typedef struct _InvalidOperationException__isset {
  _InvalidOperationException__isset() : message(false) {}
  bool message :1;
} _InvalidOperationException__isset;

class InvalidOperationException : public ::apache::thrift::TException {
 public:

  InvalidOperationException(const InvalidOperationException&);
  InvalidOperationException(InvalidOperationException&&);
  InvalidOperationException& operator=(const InvalidOperationException&);
  InvalidOperationException& operator=(InvalidOperationException&&);
  InvalidOperationException() : message() {
  }

  virtual ~InvalidOperationException() throw();
  std::string message;

  _InvalidOperationException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidOperationException &a, InvalidOperationException &b);

std::ostream& operator<<(std::ostream& out, const InvalidOperationException& obj);

typedef struct _ConfigValSecurityException__isset {
  _ConfigValSecurityException__isset() : message(false) {}
  bool message :1;
} _ConfigValSecurityException__isset;

class ConfigValSecurityException : public ::apache::thrift::TException {
 public:

  ConfigValSecurityException(const ConfigValSecurityException&);
  ConfigValSecurityException(ConfigValSecurityException&&);
  ConfigValSecurityException& operator=(const ConfigValSecurityException&);
  ConfigValSecurityException& operator=(ConfigValSecurityException&&);
  ConfigValSecurityException() : message() {
  }

  virtual ~ConfigValSecurityException() throw();
  std::string message;

  _ConfigValSecurityException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(ConfigValSecurityException &a, ConfigValSecurityException &b);

std::ostream& operator<<(std::ostream& out, const ConfigValSecurityException& obj);

typedef struct _InvalidInputException__isset {
  _InvalidInputException__isset() : message(false) {}
  bool message :1;
} _InvalidInputException__isset;

class InvalidInputException : public ::apache::thrift::TException {
 public:

  InvalidInputException(const InvalidInputException&);
  InvalidInputException(InvalidInputException&&);
  InvalidInputException& operator=(const InvalidInputException&);
  InvalidInputException& operator=(InvalidInputException&&);
  InvalidInputException() : message() {
  }

  virtual ~InvalidInputException() throw();
  std::string message;

  _InvalidInputException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidInputException &a, InvalidInputException &b);

std::ostream& operator<<(std::ostream& out, const InvalidInputException& obj);

typedef struct _NoSuchTxnException__isset {
  _NoSuchTxnException__isset() : message(false) {}
  bool message :1;
} _NoSuchTxnException__isset;

class NoSuchTxnException : public ::apache::thrift::TException {
 public:

  NoSuchTxnException(const NoSuchTxnException&);
  NoSuchTxnException(NoSuchTxnException&&);
  NoSuchTxnException& operator=(const NoSuchTxnException&);
  NoSuchTxnException& operator=(NoSuchTxnException&&);
  NoSuchTxnException() : message() {
  }

  virtual ~NoSuchTxnException() throw();
  std::string message;

  _NoSuchTxnException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(NoSuchTxnException &a, NoSuchTxnException &b);

std::ostream& operator<<(std::ostream& out, const NoSuchTxnException& obj);

typedef struct _TxnAbortedException__isset {
  _TxnAbortedException__isset() : message(false) {}
  bool message :1;
} _TxnAbortedException__isset;

class TxnAbortedException : public ::apache::thrift::TException {
 public:

  TxnAbortedException(const TxnAbortedException&);
  TxnAbortedException(TxnAbortedException&&);
  TxnAbortedException& operator=(const TxnAbortedException&);
  TxnAbortedException& operator=(TxnAbortedException&&);
  TxnAbortedException() : message() {
  }

  virtual ~TxnAbortedException() throw();
  std::string message;

  _TxnAbortedException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(TxnAbortedException &a, TxnAbortedException &b);

std::ostream& operator<<(std::ostream& out, const TxnAbortedException& obj);

typedef struct _TxnOpenException__isset {
  _TxnOpenException__isset() : message(false) {}
  bool message :1;
} _TxnOpenException__isset;

class TxnOpenException : public ::apache::thrift::TException {
 public:

  TxnOpenException(const TxnOpenException&);
  TxnOpenException(TxnOpenException&&);
  TxnOpenException& operator=(const TxnOpenException&);
  TxnOpenException& operator=(TxnOpenException&&);
  TxnOpenException() : message() {
  }

  virtual ~TxnOpenException() throw();
  std::string message;

  _TxnOpenException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(TxnOpenException &a, TxnOpenException &b);

std::ostream& operator<<(std::ostream& out, const TxnOpenException& obj);

typedef struct _NoSuchLockException__isset {
  _NoSuchLockException__isset() : message(false) {}
  bool message :1;
} _NoSuchLockException__isset;

class NoSuchLockException : public ::apache::thrift::TException {
 public:

  NoSuchLockException(const NoSuchLockException&);
  NoSuchLockException(NoSuchLockException&&);
  NoSuchLockException& operator=(const NoSuchLockException&);
  NoSuchLockException& operator=(NoSuchLockException&&);
  NoSuchLockException() : message() {
  }

  virtual ~NoSuchLockException() throw();
  std::string message;

  _NoSuchLockException__isset __isset;

  void __set_message(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(NoSuchLockException &a, NoSuchLockException &b);

std::ostream& operator<<(std::ostream& out, const NoSuchLockException& obj);

}}} // namespace

#include "hive_metastore_types.tcc"

#endif
