/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Data_TYPES_TCC
#define Data_TYPES_TCC

#include "Data_types.h"

namespace impala {

template <class Protocol_>
uint32_t TColumnValue::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bool_val);
          this->__isset.bool_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->byte_val);
          this->__isset.byte_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->short_val);
          this->__isset.short_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->int_val);
          this->__isset.int_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->long_val);
          this->__isset.long_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->double_val);
          this->__isset.double_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string_val);
          this->__isset.string_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->binary_val);
          this->__isset.binary_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->timestamp_val);
          this->__isset.timestamp_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->decimal_val);
          this->__isset.decimal_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->date_val);
          this->__isset.date_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t TColumnValue::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TColumnValue");

  if (this->__isset.bool_val) {
    xfer += oprot->writeFieldBegin("bool_val", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->bool_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.int_val) {
    xfer += oprot->writeFieldBegin("int_val", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->int_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.long_val) {
    xfer += oprot->writeFieldBegin("long_val", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->long_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.double_val) {
    xfer += oprot->writeFieldBegin("double_val", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->double_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.string_val) {
    xfer += oprot->writeFieldBegin("string_val", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->string_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.byte_val) {
    xfer += oprot->writeFieldBegin("byte_val", ::apache::thrift::protocol::T_BYTE, 6);
    xfer += oprot->writeByte(this->byte_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.short_val) {
    xfer += oprot->writeFieldBegin("short_val", ::apache::thrift::protocol::T_I16, 7);
    xfer += oprot->writeI16(this->short_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.binary_val) {
    xfer += oprot->writeFieldBegin("binary_val", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeBinary(this->binary_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timestamp_val) {
    xfer += oprot->writeFieldBegin("timestamp_val", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeBinary(this->timestamp_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.decimal_val) {
    xfer += oprot->writeFieldBegin("decimal_val", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeBinary(this->decimal_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.date_val) {
    xfer += oprot->writeFieldBegin("date_val", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->date_val);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TResultRow::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->colVals.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->colVals.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->colVals[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.colVals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t TResultRow::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TResultRow");

  xfer += oprot->writeFieldBegin("colVals", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->colVals.size()));
    std::vector<TColumnValue> ::const_iterator _iter9;
    for (_iter9 = this->colVals.begin(); _iter9 != this->colVals.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TColumnData::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_is_null = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->is_null.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->is_null.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readBool(this->is_null[_i18]);
            }
            xfer += iprot->readListEnd();
          }
          isset_is_null = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bool_vals.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->bool_vals.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += iprot->readBool(this->bool_vals[_i23]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.bool_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->byte_vals.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->byte_vals.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += iprot->readByte(this->byte_vals[_i28]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.byte_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->short_vals.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readListBegin(_etype32, _size29);
            this->short_vals.resize(_size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              xfer += iprot->readI16(this->short_vals[_i33]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.short_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->int_vals.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->int_vals.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += iprot->readI32(this->int_vals[_i38]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.int_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->long_vals.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->long_vals.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += iprot->readI64(this->long_vals[_i43]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.long_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->double_vals.clear();
            uint32_t _size44;
            ::apache::thrift::protocol::TType _etype47;
            xfer += iprot->readListBegin(_etype47, _size44);
            this->double_vals.resize(_size44);
            uint32_t _i48;
            for (_i48 = 0; _i48 < _size44; ++_i48)
            {
              xfer += iprot->readDouble(this->double_vals[_i48]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.double_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->string_vals.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->string_vals.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += iprot->readString(this->string_vals[_i53]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.string_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->binary_vals.clear();
            uint32_t _size54;
            ::apache::thrift::protocol::TType _etype57;
            xfer += iprot->readListBegin(_etype57, _size54);
            this->binary_vals.resize(_size54);
            uint32_t _i58;
            for (_i58 = 0; _i58 < _size54; ++_i58)
            {
              xfer += iprot->readBinary(this->binary_vals[_i58]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.binary_vals = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_is_null)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TColumnData::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TColumnData");

  xfer += oprot->writeFieldBegin("is_null", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->is_null.size()));
    std::vector<bool> ::const_iterator _iter59;
    for (_iter59 = this->is_null.begin(); _iter59 != this->is_null.end(); ++_iter59)
    {
      xfer += oprot->writeBool((*_iter59));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.bool_vals) {
    xfer += oprot->writeFieldBegin("bool_vals", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->bool_vals.size()));
      std::vector<bool> ::const_iterator _iter60;
      for (_iter60 = this->bool_vals.begin(); _iter60 != this->bool_vals.end(); ++_iter60)
      {
        xfer += oprot->writeBool((*_iter60));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.byte_vals) {
    xfer += oprot->writeFieldBegin("byte_vals", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->byte_vals.size()));
      std::vector<int8_t> ::const_iterator _iter61;
      for (_iter61 = this->byte_vals.begin(); _iter61 != this->byte_vals.end(); ++_iter61)
      {
        xfer += oprot->writeByte((*_iter61));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.short_vals) {
    xfer += oprot->writeFieldBegin("short_vals", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->short_vals.size()));
      std::vector<int16_t> ::const_iterator _iter62;
      for (_iter62 = this->short_vals.begin(); _iter62 != this->short_vals.end(); ++_iter62)
      {
        xfer += oprot->writeI16((*_iter62));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.int_vals) {
    xfer += oprot->writeFieldBegin("int_vals", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->int_vals.size()));
      std::vector<int32_t> ::const_iterator _iter63;
      for (_iter63 = this->int_vals.begin(); _iter63 != this->int_vals.end(); ++_iter63)
      {
        xfer += oprot->writeI32((*_iter63));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.long_vals) {
    xfer += oprot->writeFieldBegin("long_vals", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->long_vals.size()));
      std::vector<int64_t> ::const_iterator _iter64;
      for (_iter64 = this->long_vals.begin(); _iter64 != this->long_vals.end(); ++_iter64)
      {
        xfer += oprot->writeI64((*_iter64));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.double_vals) {
    xfer += oprot->writeFieldBegin("double_vals", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->double_vals.size()));
      std::vector<double> ::const_iterator _iter65;
      for (_iter65 = this->double_vals.begin(); _iter65 != this->double_vals.end(); ++_iter65)
      {
        xfer += oprot->writeDouble((*_iter65));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.string_vals) {
    xfer += oprot->writeFieldBegin("string_vals", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->string_vals.size()));
      std::vector<std::string> ::const_iterator _iter66;
      for (_iter66 = this->string_vals.begin(); _iter66 != this->string_vals.end(); ++_iter66)
      {
        xfer += oprot->writeString((*_iter66));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.binary_vals) {
    xfer += oprot->writeFieldBegin("binary_vals", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->binary_vals.size()));
      std::vector<std::string> ::const_iterator _iter67;
      for (_iter67 = this->binary_vals.begin(); _iter67 != this->binary_vals.end(); ++_iter67)
      {
        xfer += oprot->writeBinary((*_iter67));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace

#endif
