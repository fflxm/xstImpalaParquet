/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Status_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {


TStatus::~TStatus() throw() {
}


void TStatus::__set_status_code(const  ::impala::TErrorCode::type val) {
  this->status_code = val;
}

void TStatus::__set_error_msgs(const std::vector<std::string> & val) {
  this->error_msgs = val;
}
std::ostream& operator<<(std::ostream& out, const TStatus& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TStatus &a, TStatus &b) {
  using ::std::swap;
  swap(a.status_code, b.status_code);
  swap(a.error_msgs, b.error_msgs);
  swap(a.__isset, b.__isset);
}

TStatus::TStatus(const TStatus& other7) {
  status_code = other7.status_code;
  error_msgs = other7.error_msgs;
  __isset = other7.__isset;
}
TStatus::TStatus( TStatus&& other8) {
  status_code = std::move(other8.status_code);
  error_msgs = std::move(other8.error_msgs);
  __isset = std::move(other8.__isset);
}
TStatus& TStatus::operator=(const TStatus& other9) {
  status_code = other9.status_code;
  error_msgs = other9.error_msgs;
  __isset = other9.__isset;
  return *this;
}
TStatus& TStatus::operator=(TStatus&& other10) {
  status_code = std::move(other10.status_code);
  error_msgs = std::move(other10.error_msgs);
  __isset = std::move(other10.__isset);
  return *this;
}
void TStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStatus(";
  out << "status_code=" << to_string(status_code);
  out << ", " << "error_msgs=" << to_string(error_msgs);
  out << ")";
}

} // namespace
