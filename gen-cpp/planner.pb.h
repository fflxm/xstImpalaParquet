// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planner.proto

#ifndef PROTOBUF_planner_2eproto__INCLUDED
#define PROTOBUF_planner_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_planner_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHdfsFileSplitPBImpl();
void InitDefaultsHdfsFileSplitPB();
void InitDefaultsHBaseKeyRangePBImpl();
void InitDefaultsHBaseKeyRangePB();
void InitDefaultsScanRangePBImpl();
void InitDefaultsScanRangePB();
inline void InitDefaults() {
  InitDefaultsHdfsFileSplitPB();
  InitDefaultsHBaseKeyRangePB();
  InitDefaultsScanRangePB();
}
}  // namespace protobuf_planner_2eproto
namespace impala {
class HBaseKeyRangePB;
class HBaseKeyRangePBDefaultTypeInternal;
extern HBaseKeyRangePBDefaultTypeInternal _HBaseKeyRangePB_default_instance_;
class HdfsFileSplitPB;
class HdfsFileSplitPBDefaultTypeInternal;
extern HdfsFileSplitPBDefaultTypeInternal _HdfsFileSplitPB_default_instance_;
class ScanRangePB;
class ScanRangePBDefaultTypeInternal;
extern ScanRangePBDefaultTypeInternal _ScanRangePB_default_instance_;
}  // namespace impala
namespace impala {

// ===================================================================

class HdfsFileSplitPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.HdfsFileSplitPB) */ {
 public:
  HdfsFileSplitPB();
  virtual ~HdfsFileSplitPB();

  HdfsFileSplitPB(const HdfsFileSplitPB& from);

  inline HdfsFileSplitPB& operator=(const HdfsFileSplitPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HdfsFileSplitPB(HdfsFileSplitPB&& from) noexcept
    : HdfsFileSplitPB() {
    *this = ::std::move(from);
  }

  inline HdfsFileSplitPB& operator=(HdfsFileSplitPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HdfsFileSplitPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HdfsFileSplitPB* internal_default_instance() {
    return reinterpret_cast<const HdfsFileSplitPB*>(
               &_HdfsFileSplitPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HdfsFileSplitPB* other);
  friend void swap(HdfsFileSplitPB& a, HdfsFileSplitPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HdfsFileSplitPB* New() const PROTOBUF_FINAL { return New(NULL); }

  HdfsFileSplitPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HdfsFileSplitPB& from);
  void MergeFrom(const HdfsFileSplitPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HdfsFileSplitPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string relative_path = 1;
  bool has_relative_path() const;
  void clear_relative_path();
  static const int kRelativePathFieldNumber = 1;
  const ::std::string& relative_path() const;
  void set_relative_path(const ::std::string& value);
  #if LANG_CXX11
  void set_relative_path(::std::string&& value);
  #endif
  void set_relative_path(const char* value);
  void set_relative_path(const char* value, size_t size);
  ::std::string* mutable_relative_path();
  ::std::string* release_relative_path();
  void set_allocated_relative_path(::std::string* relative_path);

  // optional int64 offset = 2;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // optional int64 length = 3;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::int64 length() const;
  void set_length(::google::protobuf::int64 value);

  // optional int64 partition_id = 4;
  bool has_partition_id() const;
  void clear_partition_id();
  static const int kPartitionIdFieldNumber = 4;
  ::google::protobuf::int64 partition_id() const;
  void set_partition_id(::google::protobuf::int64 value);

  // optional int64 file_length = 5;
  bool has_file_length() const;
  void clear_file_length();
  static const int kFileLengthFieldNumber = 5;
  ::google::protobuf::int64 file_length() const;
  void set_file_length(::google::protobuf::int64 value);

  // optional int64 mtime = 7;
  bool has_mtime() const;
  void clear_mtime();
  static const int kMtimeFieldNumber = 7;
  ::google::protobuf::int64 mtime() const;
  void set_mtime(::google::protobuf::int64 value);

  // optional .impala.CompressionTypePB file_compression = 6;
  bool has_file_compression() const;
  void clear_file_compression();
  static const int kFileCompressionFieldNumber = 6;
  ::impala::CompressionTypePB file_compression() const;
  void set_file_compression(::impala::CompressionTypePB value);

  // optional bool is_erasure_coded = 8;
  bool has_is_erasure_coded() const;
  void clear_is_erasure_coded();
  static const int kIsErasureCodedFieldNumber = 8;
  bool is_erasure_coded() const;
  void set_is_erasure_coded(bool value);

  // optional int32 partition_path_hash = 9;
  bool has_partition_path_hash() const;
  void clear_partition_path_hash();
  static const int kPartitionPathHashFieldNumber = 9;
  ::google::protobuf::int32 partition_path_hash() const;
  void set_partition_path_hash(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:impala.HdfsFileSplitPB)
 private:
  void set_has_relative_path();
  void clear_has_relative_path();
  void set_has_offset();
  void clear_has_offset();
  void set_has_length();
  void clear_has_length();
  void set_has_partition_id();
  void clear_has_partition_id();
  void set_has_file_length();
  void clear_has_file_length();
  void set_has_file_compression();
  void clear_has_file_compression();
  void set_has_mtime();
  void clear_has_mtime();
  void set_has_is_erasure_coded();
  void clear_has_is_erasure_coded();
  void set_has_partition_path_hash();
  void clear_has_partition_path_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr relative_path_;
  ::google::protobuf::int64 offset_;
  ::google::protobuf::int64 length_;
  ::google::protobuf::int64 partition_id_;
  ::google::protobuf::int64 file_length_;
  ::google::protobuf::int64 mtime_;
  int file_compression_;
  bool is_erasure_coded_;
  ::google::protobuf::int32 partition_path_hash_;
  friend struct ::protobuf_planner_2eproto::TableStruct;
  friend void ::protobuf_planner_2eproto::InitDefaultsHdfsFileSplitPBImpl();
};
// -------------------------------------------------------------------

class HBaseKeyRangePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.HBaseKeyRangePB) */ {
 public:
  HBaseKeyRangePB();
  virtual ~HBaseKeyRangePB();

  HBaseKeyRangePB(const HBaseKeyRangePB& from);

  inline HBaseKeyRangePB& operator=(const HBaseKeyRangePB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HBaseKeyRangePB(HBaseKeyRangePB&& from) noexcept
    : HBaseKeyRangePB() {
    *this = ::std::move(from);
  }

  inline HBaseKeyRangePB& operator=(HBaseKeyRangePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HBaseKeyRangePB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HBaseKeyRangePB* internal_default_instance() {
    return reinterpret_cast<const HBaseKeyRangePB*>(
               &_HBaseKeyRangePB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HBaseKeyRangePB* other);
  friend void swap(HBaseKeyRangePB& a, HBaseKeyRangePB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HBaseKeyRangePB* New() const PROTOBUF_FINAL { return New(NULL); }

  HBaseKeyRangePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HBaseKeyRangePB& from);
  void MergeFrom(const HBaseKeyRangePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HBaseKeyRangePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string startKey = 1;
  bool has_startkey() const;
  void clear_startkey();
  static const int kStartKeyFieldNumber = 1;
  const ::std::string& startkey() const;
  void set_startkey(const ::std::string& value);
  #if LANG_CXX11
  void set_startkey(::std::string&& value);
  #endif
  void set_startkey(const char* value);
  void set_startkey(const char* value, size_t size);
  ::std::string* mutable_startkey();
  ::std::string* release_startkey();
  void set_allocated_startkey(::std::string* startkey);

  // optional string stopKey = 2;
  bool has_stopkey() const;
  void clear_stopkey();
  static const int kStopKeyFieldNumber = 2;
  const ::std::string& stopkey() const;
  void set_stopkey(const ::std::string& value);
  #if LANG_CXX11
  void set_stopkey(::std::string&& value);
  #endif
  void set_stopkey(const char* value);
  void set_stopkey(const char* value, size_t size);
  ::std::string* mutable_stopkey();
  ::std::string* release_stopkey();
  void set_allocated_stopkey(::std::string* stopkey);

  // @@protoc_insertion_point(class_scope:impala.HBaseKeyRangePB)
 private:
  void set_has_startkey();
  void clear_has_startkey();
  void set_has_stopkey();
  void clear_has_stopkey();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr startkey_;
  ::google::protobuf::internal::ArenaStringPtr stopkey_;
  friend struct ::protobuf_planner_2eproto::TableStruct;
  friend void ::protobuf_planner_2eproto::InitDefaultsHBaseKeyRangePBImpl();
};
// -------------------------------------------------------------------

class ScanRangePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.ScanRangePB) */ {
 public:
  ScanRangePB();
  virtual ~ScanRangePB();

  ScanRangePB(const ScanRangePB& from);

  inline ScanRangePB& operator=(const ScanRangePB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanRangePB(ScanRangePB&& from) noexcept
    : ScanRangePB() {
    *this = ::std::move(from);
  }

  inline ScanRangePB& operator=(ScanRangePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanRangePB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanRangePB* internal_default_instance() {
    return reinterpret_cast<const ScanRangePB*>(
               &_ScanRangePB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ScanRangePB* other);
  friend void swap(ScanRangePB& a, ScanRangePB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanRangePB* New() const PROTOBUF_FINAL { return New(NULL); }

  ScanRangePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScanRangePB& from);
  void MergeFrom(const ScanRangePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScanRangePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes kudu_scan_token = 3;
  bool has_kudu_scan_token() const;
  void clear_kudu_scan_token();
  static const int kKuduScanTokenFieldNumber = 3;
  const ::std::string& kudu_scan_token() const;
  void set_kudu_scan_token(const ::std::string& value);
  #if LANG_CXX11
  void set_kudu_scan_token(::std::string&& value);
  #endif
  void set_kudu_scan_token(const char* value);
  void set_kudu_scan_token(const void* value, size_t size);
  ::std::string* mutable_kudu_scan_token();
  ::std::string* release_kudu_scan_token();
  void set_allocated_kudu_scan_token(::std::string* kudu_scan_token);

  // optional .impala.HdfsFileSplitPB hdfs_file_split = 1;
  bool has_hdfs_file_split() const;
  void clear_hdfs_file_split();
  static const int kHdfsFileSplitFieldNumber = 1;
  const ::impala::HdfsFileSplitPB& hdfs_file_split() const;
  ::impala::HdfsFileSplitPB* release_hdfs_file_split();
  ::impala::HdfsFileSplitPB* mutable_hdfs_file_split();
  void set_allocated_hdfs_file_split(::impala::HdfsFileSplitPB* hdfs_file_split);

  // optional .impala.HBaseKeyRangePB hbase_key_range = 2;
  bool has_hbase_key_range() const;
  void clear_hbase_key_range();
  static const int kHbaseKeyRangeFieldNumber = 2;
  const ::impala::HBaseKeyRangePB& hbase_key_range() const;
  ::impala::HBaseKeyRangePB* release_hbase_key_range();
  ::impala::HBaseKeyRangePB* mutable_hbase_key_range();
  void set_allocated_hbase_key_range(::impala::HBaseKeyRangePB* hbase_key_range);

  // @@protoc_insertion_point(class_scope:impala.ScanRangePB)
 private:
  void set_has_hdfs_file_split();
  void clear_has_hdfs_file_split();
  void set_has_hbase_key_range();
  void clear_has_hbase_key_range();
  void set_has_kudu_scan_token();
  void clear_has_kudu_scan_token();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr kudu_scan_token_;
  ::impala::HdfsFileSplitPB* hdfs_file_split_;
  ::impala::HBaseKeyRangePB* hbase_key_range_;
  friend struct ::protobuf_planner_2eproto::TableStruct;
  friend void ::protobuf_planner_2eproto::InitDefaultsScanRangePBImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HdfsFileSplitPB

// optional string relative_path = 1;
inline bool HdfsFileSplitPB::has_relative_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HdfsFileSplitPB::set_has_relative_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HdfsFileSplitPB::clear_has_relative_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HdfsFileSplitPB::clear_relative_path() {
  relative_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_relative_path();
}
inline const ::std::string& HdfsFileSplitPB::relative_path() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.relative_path)
  return relative_path_.GetNoArena();
}
inline void HdfsFileSplitPB::set_relative_path(const ::std::string& value) {
  set_has_relative_path();
  relative_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.relative_path)
}
#if LANG_CXX11
inline void HdfsFileSplitPB::set_relative_path(::std::string&& value) {
  set_has_relative_path();
  relative_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:impala.HdfsFileSplitPB.relative_path)
}
#endif
inline void HdfsFileSplitPB::set_relative_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_relative_path();
  relative_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:impala.HdfsFileSplitPB.relative_path)
}
inline void HdfsFileSplitPB::set_relative_path(const char* value, size_t size) {
  set_has_relative_path();
  relative_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:impala.HdfsFileSplitPB.relative_path)
}
inline ::std::string* HdfsFileSplitPB::mutable_relative_path() {
  set_has_relative_path();
  // @@protoc_insertion_point(field_mutable:impala.HdfsFileSplitPB.relative_path)
  return relative_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HdfsFileSplitPB::release_relative_path() {
  // @@protoc_insertion_point(field_release:impala.HdfsFileSplitPB.relative_path)
  clear_has_relative_path();
  return relative_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HdfsFileSplitPB::set_allocated_relative_path(::std::string* relative_path) {
  if (relative_path != NULL) {
    set_has_relative_path();
  } else {
    clear_has_relative_path();
  }
  relative_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relative_path);
  // @@protoc_insertion_point(field_set_allocated:impala.HdfsFileSplitPB.relative_path)
}

// optional int64 offset = 2;
inline bool HdfsFileSplitPB::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HdfsFileSplitPB::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HdfsFileSplitPB::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HdfsFileSplitPB::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::int64 HdfsFileSplitPB::offset() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.offset)
  return offset_;
}
inline void HdfsFileSplitPB::set_offset(::google::protobuf::int64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.offset)
}

// optional int64 length = 3;
inline bool HdfsFileSplitPB::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HdfsFileSplitPB::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HdfsFileSplitPB::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HdfsFileSplitPB::clear_length() {
  length_ = GOOGLE_LONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::int64 HdfsFileSplitPB::length() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.length)
  return length_;
}
inline void HdfsFileSplitPB::set_length(::google::protobuf::int64 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.length)
}

// optional int64 partition_id = 4;
inline bool HdfsFileSplitPB::has_partition_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HdfsFileSplitPB::set_has_partition_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HdfsFileSplitPB::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HdfsFileSplitPB::clear_partition_id() {
  partition_id_ = GOOGLE_LONGLONG(0);
  clear_has_partition_id();
}
inline ::google::protobuf::int64 HdfsFileSplitPB::partition_id() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.partition_id)
  return partition_id_;
}
inline void HdfsFileSplitPB::set_partition_id(::google::protobuf::int64 value) {
  set_has_partition_id();
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.partition_id)
}

// optional int64 file_length = 5;
inline bool HdfsFileSplitPB::has_file_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HdfsFileSplitPB::set_has_file_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HdfsFileSplitPB::clear_has_file_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HdfsFileSplitPB::clear_file_length() {
  file_length_ = GOOGLE_LONGLONG(0);
  clear_has_file_length();
}
inline ::google::protobuf::int64 HdfsFileSplitPB::file_length() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.file_length)
  return file_length_;
}
inline void HdfsFileSplitPB::set_file_length(::google::protobuf::int64 value) {
  set_has_file_length();
  file_length_ = value;
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.file_length)
}

// optional .impala.CompressionTypePB file_compression = 6;
inline bool HdfsFileSplitPB::has_file_compression() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HdfsFileSplitPB::set_has_file_compression() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HdfsFileSplitPB::clear_has_file_compression() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HdfsFileSplitPB::clear_file_compression() {
  file_compression_ = 0;
  clear_has_file_compression();
}
inline ::impala::CompressionTypePB HdfsFileSplitPB::file_compression() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.file_compression)
  return static_cast< ::impala::CompressionTypePB >(file_compression_);
}
inline void HdfsFileSplitPB::set_file_compression(::impala::CompressionTypePB value) {
  assert(::impala::CompressionTypePB_IsValid(value));
  set_has_file_compression();
  file_compression_ = value;
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.file_compression)
}

// optional int64 mtime = 7;
inline bool HdfsFileSplitPB::has_mtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HdfsFileSplitPB::set_has_mtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HdfsFileSplitPB::clear_has_mtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HdfsFileSplitPB::clear_mtime() {
  mtime_ = GOOGLE_LONGLONG(0);
  clear_has_mtime();
}
inline ::google::protobuf::int64 HdfsFileSplitPB::mtime() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.mtime)
  return mtime_;
}
inline void HdfsFileSplitPB::set_mtime(::google::protobuf::int64 value) {
  set_has_mtime();
  mtime_ = value;
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.mtime)
}

// optional bool is_erasure_coded = 8;
inline bool HdfsFileSplitPB::has_is_erasure_coded() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HdfsFileSplitPB::set_has_is_erasure_coded() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HdfsFileSplitPB::clear_has_is_erasure_coded() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HdfsFileSplitPB::clear_is_erasure_coded() {
  is_erasure_coded_ = false;
  clear_has_is_erasure_coded();
}
inline bool HdfsFileSplitPB::is_erasure_coded() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.is_erasure_coded)
  return is_erasure_coded_;
}
inline void HdfsFileSplitPB::set_is_erasure_coded(bool value) {
  set_has_is_erasure_coded();
  is_erasure_coded_ = value;
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.is_erasure_coded)
}

// optional int32 partition_path_hash = 9;
inline bool HdfsFileSplitPB::has_partition_path_hash() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HdfsFileSplitPB::set_has_partition_path_hash() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HdfsFileSplitPB::clear_has_partition_path_hash() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HdfsFileSplitPB::clear_partition_path_hash() {
  partition_path_hash_ = 0;
  clear_has_partition_path_hash();
}
inline ::google::protobuf::int32 HdfsFileSplitPB::partition_path_hash() const {
  // @@protoc_insertion_point(field_get:impala.HdfsFileSplitPB.partition_path_hash)
  return partition_path_hash_;
}
inline void HdfsFileSplitPB::set_partition_path_hash(::google::protobuf::int32 value) {
  set_has_partition_path_hash();
  partition_path_hash_ = value;
  // @@protoc_insertion_point(field_set:impala.HdfsFileSplitPB.partition_path_hash)
}

// -------------------------------------------------------------------

// HBaseKeyRangePB

// optional string startKey = 1;
inline bool HBaseKeyRangePB::has_startkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HBaseKeyRangePB::set_has_startkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HBaseKeyRangePB::clear_has_startkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HBaseKeyRangePB::clear_startkey() {
  startkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_startkey();
}
inline const ::std::string& HBaseKeyRangePB::startkey() const {
  // @@protoc_insertion_point(field_get:impala.HBaseKeyRangePB.startKey)
  return startkey_.GetNoArena();
}
inline void HBaseKeyRangePB::set_startkey(const ::std::string& value) {
  set_has_startkey();
  startkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:impala.HBaseKeyRangePB.startKey)
}
#if LANG_CXX11
inline void HBaseKeyRangePB::set_startkey(::std::string&& value) {
  set_has_startkey();
  startkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:impala.HBaseKeyRangePB.startKey)
}
#endif
inline void HBaseKeyRangePB::set_startkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_startkey();
  startkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:impala.HBaseKeyRangePB.startKey)
}
inline void HBaseKeyRangePB::set_startkey(const char* value, size_t size) {
  set_has_startkey();
  startkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:impala.HBaseKeyRangePB.startKey)
}
inline ::std::string* HBaseKeyRangePB::mutable_startkey() {
  set_has_startkey();
  // @@protoc_insertion_point(field_mutable:impala.HBaseKeyRangePB.startKey)
  return startkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HBaseKeyRangePB::release_startkey() {
  // @@protoc_insertion_point(field_release:impala.HBaseKeyRangePB.startKey)
  clear_has_startkey();
  return startkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HBaseKeyRangePB::set_allocated_startkey(::std::string* startkey) {
  if (startkey != NULL) {
    set_has_startkey();
  } else {
    clear_has_startkey();
  }
  startkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), startkey);
  // @@protoc_insertion_point(field_set_allocated:impala.HBaseKeyRangePB.startKey)
}

// optional string stopKey = 2;
inline bool HBaseKeyRangePB::has_stopkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HBaseKeyRangePB::set_has_stopkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HBaseKeyRangePB::clear_has_stopkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HBaseKeyRangePB::clear_stopkey() {
  stopkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stopkey();
}
inline const ::std::string& HBaseKeyRangePB::stopkey() const {
  // @@protoc_insertion_point(field_get:impala.HBaseKeyRangePB.stopKey)
  return stopkey_.GetNoArena();
}
inline void HBaseKeyRangePB::set_stopkey(const ::std::string& value) {
  set_has_stopkey();
  stopkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:impala.HBaseKeyRangePB.stopKey)
}
#if LANG_CXX11
inline void HBaseKeyRangePB::set_stopkey(::std::string&& value) {
  set_has_stopkey();
  stopkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:impala.HBaseKeyRangePB.stopKey)
}
#endif
inline void HBaseKeyRangePB::set_stopkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stopkey();
  stopkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:impala.HBaseKeyRangePB.stopKey)
}
inline void HBaseKeyRangePB::set_stopkey(const char* value, size_t size) {
  set_has_stopkey();
  stopkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:impala.HBaseKeyRangePB.stopKey)
}
inline ::std::string* HBaseKeyRangePB::mutable_stopkey() {
  set_has_stopkey();
  // @@protoc_insertion_point(field_mutable:impala.HBaseKeyRangePB.stopKey)
  return stopkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HBaseKeyRangePB::release_stopkey() {
  // @@protoc_insertion_point(field_release:impala.HBaseKeyRangePB.stopKey)
  clear_has_stopkey();
  return stopkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HBaseKeyRangePB::set_allocated_stopkey(::std::string* stopkey) {
  if (stopkey != NULL) {
    set_has_stopkey();
  } else {
    clear_has_stopkey();
  }
  stopkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stopkey);
  // @@protoc_insertion_point(field_set_allocated:impala.HBaseKeyRangePB.stopKey)
}

// -------------------------------------------------------------------

// ScanRangePB

// optional .impala.HdfsFileSplitPB hdfs_file_split = 1;
inline bool ScanRangePB::has_hdfs_file_split() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScanRangePB::set_has_hdfs_file_split() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScanRangePB::clear_has_hdfs_file_split() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScanRangePB::clear_hdfs_file_split() {
  if (hdfs_file_split_ != NULL) hdfs_file_split_->Clear();
  clear_has_hdfs_file_split();
}
inline const ::impala::HdfsFileSplitPB& ScanRangePB::hdfs_file_split() const {
  const ::impala::HdfsFileSplitPB* p = hdfs_file_split_;
  // @@protoc_insertion_point(field_get:impala.ScanRangePB.hdfs_file_split)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::HdfsFileSplitPB*>(
      &::impala::_HdfsFileSplitPB_default_instance_);
}
inline ::impala::HdfsFileSplitPB* ScanRangePB::release_hdfs_file_split() {
  // @@protoc_insertion_point(field_release:impala.ScanRangePB.hdfs_file_split)
  clear_has_hdfs_file_split();
  ::impala::HdfsFileSplitPB* temp = hdfs_file_split_;
  hdfs_file_split_ = NULL;
  return temp;
}
inline ::impala::HdfsFileSplitPB* ScanRangePB::mutable_hdfs_file_split() {
  set_has_hdfs_file_split();
  if (hdfs_file_split_ == NULL) {
    hdfs_file_split_ = new ::impala::HdfsFileSplitPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.ScanRangePB.hdfs_file_split)
  return hdfs_file_split_;
}
inline void ScanRangePB::set_allocated_hdfs_file_split(::impala::HdfsFileSplitPB* hdfs_file_split) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hdfs_file_split_;
  }
  if (hdfs_file_split) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hdfs_file_split = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdfs_file_split, submessage_arena);
    }
    set_has_hdfs_file_split();
  } else {
    clear_has_hdfs_file_split();
  }
  hdfs_file_split_ = hdfs_file_split;
  // @@protoc_insertion_point(field_set_allocated:impala.ScanRangePB.hdfs_file_split)
}

// optional .impala.HBaseKeyRangePB hbase_key_range = 2;
inline bool ScanRangePB::has_hbase_key_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScanRangePB::set_has_hbase_key_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScanRangePB::clear_has_hbase_key_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScanRangePB::clear_hbase_key_range() {
  if (hbase_key_range_ != NULL) hbase_key_range_->Clear();
  clear_has_hbase_key_range();
}
inline const ::impala::HBaseKeyRangePB& ScanRangePB::hbase_key_range() const {
  const ::impala::HBaseKeyRangePB* p = hbase_key_range_;
  // @@protoc_insertion_point(field_get:impala.ScanRangePB.hbase_key_range)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::HBaseKeyRangePB*>(
      &::impala::_HBaseKeyRangePB_default_instance_);
}
inline ::impala::HBaseKeyRangePB* ScanRangePB::release_hbase_key_range() {
  // @@protoc_insertion_point(field_release:impala.ScanRangePB.hbase_key_range)
  clear_has_hbase_key_range();
  ::impala::HBaseKeyRangePB* temp = hbase_key_range_;
  hbase_key_range_ = NULL;
  return temp;
}
inline ::impala::HBaseKeyRangePB* ScanRangePB::mutable_hbase_key_range() {
  set_has_hbase_key_range();
  if (hbase_key_range_ == NULL) {
    hbase_key_range_ = new ::impala::HBaseKeyRangePB;
  }
  // @@protoc_insertion_point(field_mutable:impala.ScanRangePB.hbase_key_range)
  return hbase_key_range_;
}
inline void ScanRangePB::set_allocated_hbase_key_range(::impala::HBaseKeyRangePB* hbase_key_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hbase_key_range_;
  }
  if (hbase_key_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hbase_key_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hbase_key_range, submessage_arena);
    }
    set_has_hbase_key_range();
  } else {
    clear_has_hbase_key_range();
  }
  hbase_key_range_ = hbase_key_range;
  // @@protoc_insertion_point(field_set_allocated:impala.ScanRangePB.hbase_key_range)
}

// optional bytes kudu_scan_token = 3;
inline bool ScanRangePB::has_kudu_scan_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScanRangePB::set_has_kudu_scan_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScanRangePB::clear_has_kudu_scan_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScanRangePB::clear_kudu_scan_token() {
  kudu_scan_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kudu_scan_token();
}
inline const ::std::string& ScanRangePB::kudu_scan_token() const {
  // @@protoc_insertion_point(field_get:impala.ScanRangePB.kudu_scan_token)
  return kudu_scan_token_.GetNoArena();
}
inline void ScanRangePB::set_kudu_scan_token(const ::std::string& value) {
  set_has_kudu_scan_token();
  kudu_scan_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:impala.ScanRangePB.kudu_scan_token)
}
#if LANG_CXX11
inline void ScanRangePB::set_kudu_scan_token(::std::string&& value) {
  set_has_kudu_scan_token();
  kudu_scan_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:impala.ScanRangePB.kudu_scan_token)
}
#endif
inline void ScanRangePB::set_kudu_scan_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kudu_scan_token();
  kudu_scan_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:impala.ScanRangePB.kudu_scan_token)
}
inline void ScanRangePB::set_kudu_scan_token(const void* value, size_t size) {
  set_has_kudu_scan_token();
  kudu_scan_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:impala.ScanRangePB.kudu_scan_token)
}
inline ::std::string* ScanRangePB::mutable_kudu_scan_token() {
  set_has_kudu_scan_token();
  // @@protoc_insertion_point(field_mutable:impala.ScanRangePB.kudu_scan_token)
  return kudu_scan_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanRangePB::release_kudu_scan_token() {
  // @@protoc_insertion_point(field_release:impala.ScanRangePB.kudu_scan_token)
  clear_has_kudu_scan_token();
  return kudu_scan_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRangePB::set_allocated_kudu_scan_token(::std::string* kudu_scan_token) {
  if (kudu_scan_token != NULL) {
    set_has_kudu_scan_token();
  } else {
    clear_has_kudu_scan_token();
  }
  kudu_scan_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kudu_scan_token);
  // @@protoc_insertion_point(field_set_allocated:impala.ScanRangePB.kudu_scan_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace impala

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planner_2eproto__INCLUDED
