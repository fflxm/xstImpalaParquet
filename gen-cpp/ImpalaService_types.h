/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ImpalaService_TYPES_H
#define ImpalaService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "ExecStats_types.h"
#include "Status_types.h"
#include "Types_types.h"
#include "beeswax_types.h"
#include "TCLIService_types.h"
#include "RuntimeProfile_types.h"
#include "Frontend_types.h"
#include "BackendGflags_types.h"
#include "Query_types.h"


namespace impala {

struct TImpalaQueryOptions {
  enum type {
    ABORT_ON_ERROR = 0,
    MAX_ERRORS = 1,
    DISABLE_CODEGEN = 2,
    BATCH_SIZE = 3,
    MEM_LIMIT = 4,
    NUM_NODES = 5,
    MAX_SCAN_RANGE_LENGTH = 6,
    MAX_IO_BUFFERS = 7,
    NUM_SCANNER_THREADS = 8,
    ALLOW_UNSUPPORTED_FORMATS = 9,
    DEFAULT_ORDER_BY_LIMIT = 10,
    DEBUG_ACTION = 11,
    ABORT_ON_DEFAULT_LIMIT_EXCEEDED = 12,
    COMPRESSION_CODEC = 13,
    SEQ_COMPRESSION_MODE = 14,
    HBASE_CACHING = 15,
    HBASE_CACHE_BLOCKS = 16,
    PARQUET_FILE_SIZE = 17,
    EXPLAIN_LEVEL = 18,
    SYNC_DDL = 19,
    REQUEST_POOL = 20,
    V_CPU_CORES = 21,
    RESERVATION_REQUEST_TIMEOUT = 22,
    DISABLE_CACHED_READS = 23,
    DISABLE_OUTERMOST_TOPN = 24,
    RM_INITIAL_MEM = 25,
    QUERY_TIMEOUT_S = 26,
    BUFFER_POOL_LIMIT = 27,
    APPX_COUNT_DISTINCT = 28,
    DISABLE_UNSAFE_SPILLS = 29,
    EXEC_SINGLE_NODE_ROWS_THRESHOLD = 30,
    OPTIMIZE_PARTITION_KEY_SCANS = 31,
    REPLICA_PREFERENCE = 32,
    SCHEDULE_RANDOM_REPLICA = 33,
    SCAN_NODE_CODEGEN_THRESHOLD = 34,
    DISABLE_STREAMING_PREAGGREGATIONS = 35,
    RUNTIME_FILTER_MODE = 36,
    RUNTIME_BLOOM_FILTER_SIZE = 37,
    RUNTIME_FILTER_WAIT_TIME_MS = 38,
    DISABLE_ROW_RUNTIME_FILTERING = 39,
    MAX_NUM_RUNTIME_FILTERS = 40,
    PARQUET_ANNOTATE_STRINGS_UTF8 = 41,
    PARQUET_FALLBACK_SCHEMA_RESOLUTION = 42,
    MT_DOP = 43,
    S3_SKIP_INSERT_STAGING = 44,
    RUNTIME_FILTER_MAX_SIZE = 45,
    RUNTIME_FILTER_MIN_SIZE = 46,
    PREFETCH_MODE = 47,
    STRICT_MODE = 48,
    SCRATCH_LIMIT = 49,
    ENABLE_EXPR_REWRITES = 50,
    DECIMAL_V2 = 51,
    PARQUET_DICTIONARY_FILTERING = 52,
    PARQUET_ARRAY_RESOLUTION = 53,
    PARQUET_READ_STATISTICS = 54,
    DEFAULT_JOIN_DISTRIBUTION_MODE = 55,
    DISABLE_CODEGEN_ROWS_THRESHOLD = 56,
    DEFAULT_SPILLABLE_BUFFER_SIZE = 57,
    MIN_SPILLABLE_BUFFER_SIZE = 58,
    MAX_ROW_SIZE = 59,
    IDLE_SESSION_TIMEOUT = 60,
    COMPUTE_STATS_MIN_SAMPLE_SIZE = 61,
    EXEC_TIME_LIMIT_S = 62,
    SHUFFLE_DISTINCT_EXPRS = 63,
    MAX_MEM_ESTIMATE_FOR_ADMISSION = 64,
    THREAD_RESERVATION_LIMIT = 65,
    THREAD_RESERVATION_AGGREGATE_LIMIT = 66,
    KUDU_READ_MODE = 67,
    ALLOW_ERASURE_CODED_FILES = 68,
    TIMEZONE = 69,
    SCAN_BYTES_LIMIT = 70,
    CPU_LIMIT_S = 71,
    TOPN_BYTES_LIMIT = 72,
    CLIENT_IDENTIFIER = 73,
    RESOURCE_TRACE_RATIO = 74,
    NUM_REMOTE_EXECUTOR_CANDIDATES = 75,
    NUM_ROWS_PRODUCED_LIMIT = 76,
    PLANNER_TESTCASE_MODE = 77,
    DEFAULT_FILE_FORMAT = 78,
    PARQUET_TIMESTAMP_TYPE = 79,
    PARQUET_READ_PAGE_INDEX = 80,
    PARQUET_WRITE_PAGE_INDEX = 81,
    PARQUET_PAGE_ROW_COUNT_LIMIT = 82,
    DISABLE_HDFS_NUM_ROWS_ESTIMATE = 83,
    DEFAULT_HINTS_INSERT_STATEMENT = 84,
    SPOOL_QUERY_RESULTS = 85,
    DEFAULT_TRANSACTIONAL_TYPE = 86,
    STATEMENT_EXPRESSION_LIMIT = 87,
    MAX_STATEMENT_LENGTH_BYTES = 88,
    DISABLE_DATA_CACHE = 89,
    MAX_RESULT_SPOOLING_MEM = 90,
    MAX_SPILLED_RESULT_SPOOLING_MEM = 91,
    DISABLE_HBASE_NUM_ROWS_ESTIMATE = 92,
    FETCH_ROWS_TIMEOUT_MS = 93,
    NOW_STRING = 94,
    PARQUET_OBJECT_STORE_SPLIT_SIZE = 95,
    MEM_LIMIT_EXECUTORS = 96,
    BROADCAST_BYTES_LIMIT = 97,
    PREAGG_BYTES_LIMIT = 98,
    ENABLE_CNF_REWRITES = 99,
    MAX_CNF_EXPRS = 100,
    KUDU_SNAPSHOT_READ_TIMESTAMP_MICROS = 101,
    RETRY_FAILED_QUERIES = 102,
    ENABLED_RUNTIME_FILTER_TYPES = 103,
    ASYNC_CODEGEN = 104,
    ENABLE_DISTINCT_SEMI_JOIN_OPTIMIZATION = 105,
    SORT_RUN_BYTES_LIMIT = 106,
    MAX_FS_WRITERS = 107,
    REFRESH_UPDATED_HMS_PARTITIONS = 108,
    SPOOL_ALL_RESULTS_FOR_RETRIES = 109,
    RUNTIME_FILTER_ERROR_RATE = 110,
    USE_LOCAL_TZ_FOR_UNIX_TIMESTAMP_CONVERSIONS = 111,
    CONVERT_LEGACY_HIVE_PARQUET_UTC_TIMESTAMPS = 112,
    ENABLE_OUTER_JOIN_TO_INNER_TRANSFORMATION = 113,
    TARGETED_KUDU_SCAN_RANGE_LENGTH = 114,
    REPORT_SKEW_LIMIT = 115,
    OPTIMIZE_SIMPLE_LIMIT = 116,
    USE_DOP_FOR_COSTING = 117,
    BROADCAST_TO_PARTITION_FACTOR = 118,
    JOIN_ROWS_PRODUCED_LIMIT = 119,
    UTF8_MODE = 120,
    ANALYTIC_RANK_PUSHDOWN_THRESHOLD = 121,
    MINMAX_FILTER_THRESHOLD = 122,
    MINMAX_FILTERING_LEVEL = 123,
    COMPUTE_COLUMN_MINMAX_STATS = 124,
    SHOW_COLUMN_MINMAX_STATS = 125,
    DEFAULT_NDV_SCALE = 126,
    KUDU_REPLICA_SELECTION = 127,
    DELETE_STATS_IN_TRUNCATE = 128,
    PARQUET_BLOOM_FILTERING = 129,
    MINMAX_FILTER_SORTED_COLUMNS = 130,
    MINMAX_FILTER_FAST_CODE_PATH = 131,
    ENABLE_KUDU_TRANSACTION = 132,
    MINMAX_FILTER_PARTITION_COLUMNS = 133,
    PARQUET_BLOOM_FILTER_WRITE = 134,
    ORC_READ_STATISTICS = 135,
    ENABLE_ASYNC_DDL_EXECUTION = 136,
    ENABLE_ASYNC_LOAD_DATA_EXECUTION = 137,
    PARQUET_LATE_MATERIALIZATION_THRESHOLD = 138
  };
};

extern const std::map<int, const char*> _TImpalaQueryOptions_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TImpalaQueryOptions::type& val);

class TDmlResult;

class TPingImpalaServiceResp;

class TResetTableReq;

class TPingImpalaHS2ServiceReq;

class TPingImpalaHS2ServiceResp;

class TCloseImpalaOperationReq;

class TCloseImpalaOperationResp;

class TGetExecSummaryReq;

class TGetExecSummaryResp;

class TGetRuntimeProfileReq;

class TGetRuntimeProfileResp;

class TExecutePlannedStatementReq;

class TGetBackendConfigReq;

class TGetBackendConfigResp;

class TGetExecutorMembershipReq;

class TGetExecutorMembershipResp;

class TInitQueryContextResp;

typedef struct _TDmlResult__isset {
  _TDmlResult__isset() : num_row_errors(false) {}
  bool num_row_errors :1;
} _TDmlResult__isset;

class TDmlResult {
 public:

  TDmlResult(const TDmlResult&);
  TDmlResult(TDmlResult&&);
  TDmlResult& operator=(const TDmlResult&);
  TDmlResult& operator=(TDmlResult&&);
  TDmlResult() : num_row_errors(0) {
  }

  virtual ~TDmlResult() throw();
  std::map<std::string, int64_t>  rows_modified;
  int64_t num_row_errors;

  _TDmlResult__isset __isset;

  void __set_rows_modified(const std::map<std::string, int64_t> & val);

  void __set_num_row_errors(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDmlResult &a, TDmlResult &b);

std::ostream& operator<<(std::ostream& out, const TDmlResult& obj);

typedef struct _TPingImpalaServiceResp__isset {
  _TPingImpalaServiceResp__isset() : version(false), webserver_address(false) {}
  bool version :1;
  bool webserver_address :1;
} _TPingImpalaServiceResp__isset;

class TPingImpalaServiceResp {
 public:

  TPingImpalaServiceResp(const TPingImpalaServiceResp&);
  TPingImpalaServiceResp(TPingImpalaServiceResp&&);
  TPingImpalaServiceResp& operator=(const TPingImpalaServiceResp&);
  TPingImpalaServiceResp& operator=(TPingImpalaServiceResp&&);
  TPingImpalaServiceResp() : version(), webserver_address() {
  }

  virtual ~TPingImpalaServiceResp() throw();
  std::string version;
  std::string webserver_address;

  _TPingImpalaServiceResp__isset __isset;

  void __set_version(const std::string& val);

  void __set_webserver_address(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPingImpalaServiceResp &a, TPingImpalaServiceResp &b);

std::ostream& operator<<(std::ostream& out, const TPingImpalaServiceResp& obj);


class TResetTableReq {
 public:

  TResetTableReq(const TResetTableReq&);
  TResetTableReq(TResetTableReq&&);
  TResetTableReq& operator=(const TResetTableReq&);
  TResetTableReq& operator=(TResetTableReq&&);
  TResetTableReq() : db_name(), table_name() {
  }

  virtual ~TResetTableReq() throw();
  std::string db_name;
  std::string table_name;

  void __set_db_name(const std::string& val);

  void __set_table_name(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TResetTableReq &a, TResetTableReq &b);

std::ostream& operator<<(std::ostream& out, const TResetTableReq& obj);


class TPingImpalaHS2ServiceReq {
 public:

  TPingImpalaHS2ServiceReq(const TPingImpalaHS2ServiceReq&);
  TPingImpalaHS2ServiceReq(TPingImpalaHS2ServiceReq&&);
  TPingImpalaHS2ServiceReq& operator=(const TPingImpalaHS2ServiceReq&);
  TPingImpalaHS2ServiceReq& operator=(TPingImpalaHS2ServiceReq&&);
  TPingImpalaHS2ServiceReq() {
  }

  virtual ~TPingImpalaHS2ServiceReq() throw();
   ::apache::hive::service::cli::thrift::TSessionHandle sessionHandle;

  void __set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPingImpalaHS2ServiceReq &a, TPingImpalaHS2ServiceReq &b);

std::ostream& operator<<(std::ostream& out, const TPingImpalaHS2ServiceReq& obj);

typedef struct _TPingImpalaHS2ServiceResp__isset {
  _TPingImpalaHS2ServiceResp__isset() : version(false), webserver_address(false), timestamp(false) {}
  bool version :1;
  bool webserver_address :1;
  bool timestamp :1;
} _TPingImpalaHS2ServiceResp__isset;

class TPingImpalaHS2ServiceResp {
 public:

  TPingImpalaHS2ServiceResp(const TPingImpalaHS2ServiceResp&);
  TPingImpalaHS2ServiceResp(TPingImpalaHS2ServiceResp&&);
  TPingImpalaHS2ServiceResp& operator=(const TPingImpalaHS2ServiceResp&);
  TPingImpalaHS2ServiceResp& operator=(TPingImpalaHS2ServiceResp&&);
  TPingImpalaHS2ServiceResp() : version(), webserver_address(), timestamp(0) {
  }

  virtual ~TPingImpalaHS2ServiceResp() throw();
   ::apache::hive::service::cli::thrift::TStatus status;
  std::string version;
  std::string webserver_address;
  int64_t timestamp;

  _TPingImpalaHS2ServiceResp__isset __isset;

  void __set_status(const  ::apache::hive::service::cli::thrift::TStatus& val);

  void __set_version(const std::string& val);

  void __set_webserver_address(const std::string& val);

  void __set_timestamp(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPingImpalaHS2ServiceResp &a, TPingImpalaHS2ServiceResp &b);

std::ostream& operator<<(std::ostream& out, const TPingImpalaHS2ServiceResp& obj);


class TCloseImpalaOperationReq {
 public:

  TCloseImpalaOperationReq(const TCloseImpalaOperationReq&);
  TCloseImpalaOperationReq(TCloseImpalaOperationReq&&);
  TCloseImpalaOperationReq& operator=(const TCloseImpalaOperationReq&);
  TCloseImpalaOperationReq& operator=(TCloseImpalaOperationReq&&);
  TCloseImpalaOperationReq() {
  }

  virtual ~TCloseImpalaOperationReq() throw();
   ::apache::hive::service::cli::thrift::TOperationHandle operationHandle;

  void __set_operationHandle(const  ::apache::hive::service::cli::thrift::TOperationHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCloseImpalaOperationReq &a, TCloseImpalaOperationReq &b);

std::ostream& operator<<(std::ostream& out, const TCloseImpalaOperationReq& obj);

typedef struct _TCloseImpalaOperationResp__isset {
  _TCloseImpalaOperationResp__isset() : dml_result(false) {}
  bool dml_result :1;
} _TCloseImpalaOperationResp__isset;

class TCloseImpalaOperationResp {
 public:

  TCloseImpalaOperationResp(const TCloseImpalaOperationResp&);
  TCloseImpalaOperationResp(TCloseImpalaOperationResp&&);
  TCloseImpalaOperationResp& operator=(const TCloseImpalaOperationResp&);
  TCloseImpalaOperationResp& operator=(TCloseImpalaOperationResp&&);
  TCloseImpalaOperationResp() {
  }

  virtual ~TCloseImpalaOperationResp() throw();
   ::apache::hive::service::cli::thrift::TStatus status;
  TDmlResult dml_result;

  _TCloseImpalaOperationResp__isset __isset;

  void __set_status(const  ::apache::hive::service::cli::thrift::TStatus& val);

  void __set_dml_result(const TDmlResult& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCloseImpalaOperationResp &a, TCloseImpalaOperationResp &b);

std::ostream& operator<<(std::ostream& out, const TCloseImpalaOperationResp& obj);

typedef struct _TGetExecSummaryReq__isset {
  _TGetExecSummaryReq__isset() : operationHandle(false), sessionHandle(false), include_query_attempts(true) {}
  bool operationHandle :1;
  bool sessionHandle :1;
  bool include_query_attempts :1;
} _TGetExecSummaryReq__isset;

class TGetExecSummaryReq {
 public:

  TGetExecSummaryReq(const TGetExecSummaryReq&);
  TGetExecSummaryReq(TGetExecSummaryReq&&);
  TGetExecSummaryReq& operator=(const TGetExecSummaryReq&);
  TGetExecSummaryReq& operator=(TGetExecSummaryReq&&);
  TGetExecSummaryReq() : include_query_attempts(false) {
  }

  virtual ~TGetExecSummaryReq() throw();
   ::apache::hive::service::cli::thrift::TOperationHandle operationHandle;
   ::apache::hive::service::cli::thrift::TSessionHandle sessionHandle;
  bool include_query_attempts;

  _TGetExecSummaryReq__isset __isset;

  void __set_operationHandle(const  ::apache::hive::service::cli::thrift::TOperationHandle& val);

  void __set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val);

  void __set_include_query_attempts(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetExecSummaryReq &a, TGetExecSummaryReq &b);

std::ostream& operator<<(std::ostream& out, const TGetExecSummaryReq& obj);

typedef struct _TGetExecSummaryResp__isset {
  _TGetExecSummaryResp__isset() : summary(false), failed_summaries(false) {}
  bool summary :1;
  bool failed_summaries :1;
} _TGetExecSummaryResp__isset;

class TGetExecSummaryResp {
 public:

  TGetExecSummaryResp(const TGetExecSummaryResp&);
  TGetExecSummaryResp(TGetExecSummaryResp&&);
  TGetExecSummaryResp& operator=(const TGetExecSummaryResp&);
  TGetExecSummaryResp& operator=(TGetExecSummaryResp&&);
  TGetExecSummaryResp() {
  }

  virtual ~TGetExecSummaryResp() throw();
   ::apache::hive::service::cli::thrift::TStatus status;
   ::impala::TExecSummary summary;
  std::vector< ::impala::TExecSummary>  failed_summaries;

  _TGetExecSummaryResp__isset __isset;

  void __set_status(const  ::apache::hive::service::cli::thrift::TStatus& val);

  void __set_summary(const  ::impala::TExecSummary& val);

  void __set_failed_summaries(const std::vector< ::impala::TExecSummary> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetExecSummaryResp &a, TGetExecSummaryResp &b);

std::ostream& operator<<(std::ostream& out, const TGetExecSummaryResp& obj);

typedef struct _TGetRuntimeProfileReq__isset {
  _TGetRuntimeProfileReq__isset() : operationHandle(false), sessionHandle(false), format(true), include_query_attempts(true) {}
  bool operationHandle :1;
  bool sessionHandle :1;
  bool format :1;
  bool include_query_attempts :1;
} _TGetRuntimeProfileReq__isset;

class TGetRuntimeProfileReq {
 public:

  TGetRuntimeProfileReq(const TGetRuntimeProfileReq&);
  TGetRuntimeProfileReq(TGetRuntimeProfileReq&&);
  TGetRuntimeProfileReq& operator=(const TGetRuntimeProfileReq&);
  TGetRuntimeProfileReq& operator=(TGetRuntimeProfileReq&&);
  TGetRuntimeProfileReq() : format(( ::impala::TRuntimeProfileFormat::type)0), include_query_attempts(false) {
    format = ( ::impala::TRuntimeProfileFormat::type)0;

  }

  virtual ~TGetRuntimeProfileReq() throw();
   ::apache::hive::service::cli::thrift::TOperationHandle operationHandle;
   ::apache::hive::service::cli::thrift::TSessionHandle sessionHandle;
   ::impala::TRuntimeProfileFormat::type format;
  bool include_query_attempts;

  _TGetRuntimeProfileReq__isset __isset;

  void __set_operationHandle(const  ::apache::hive::service::cli::thrift::TOperationHandle& val);

  void __set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val);

  void __set_format(const  ::impala::TRuntimeProfileFormat::type val);

  void __set_include_query_attempts(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetRuntimeProfileReq &a, TGetRuntimeProfileReq &b);

std::ostream& operator<<(std::ostream& out, const TGetRuntimeProfileReq& obj);

typedef struct _TGetRuntimeProfileResp__isset {
  _TGetRuntimeProfileResp__isset() : profile(false), thrift_profile(false), failed_profiles(false), failed_thrift_profiles(false) {}
  bool profile :1;
  bool thrift_profile :1;
  bool failed_profiles :1;
  bool failed_thrift_profiles :1;
} _TGetRuntimeProfileResp__isset;

class TGetRuntimeProfileResp {
 public:

  TGetRuntimeProfileResp(const TGetRuntimeProfileResp&);
  TGetRuntimeProfileResp(TGetRuntimeProfileResp&&);
  TGetRuntimeProfileResp& operator=(const TGetRuntimeProfileResp&);
  TGetRuntimeProfileResp& operator=(TGetRuntimeProfileResp&&);
  TGetRuntimeProfileResp() : profile() {
  }

  virtual ~TGetRuntimeProfileResp() throw();
   ::apache::hive::service::cli::thrift::TStatus status;
  std::string profile;
   ::impala::TRuntimeProfileTree thrift_profile;
  std::vector<std::string>  failed_profiles;
  std::vector< ::impala::TRuntimeProfileTree>  failed_thrift_profiles;

  _TGetRuntimeProfileResp__isset __isset;

  void __set_status(const  ::apache::hive::service::cli::thrift::TStatus& val);

  void __set_profile(const std::string& val);

  void __set_thrift_profile(const  ::impala::TRuntimeProfileTree& val);

  void __set_failed_profiles(const std::vector<std::string> & val);

  void __set_failed_thrift_profiles(const std::vector< ::impala::TRuntimeProfileTree> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetRuntimeProfileResp &a, TGetRuntimeProfileResp &b);

std::ostream& operator<<(std::ostream& out, const TGetRuntimeProfileResp& obj);


class TExecutePlannedStatementReq {
 public:

  TExecutePlannedStatementReq(const TExecutePlannedStatementReq&);
  TExecutePlannedStatementReq(TExecutePlannedStatementReq&&);
  TExecutePlannedStatementReq& operator=(const TExecutePlannedStatementReq&);
  TExecutePlannedStatementReq& operator=(TExecutePlannedStatementReq&&);
  TExecutePlannedStatementReq() {
  }

  virtual ~TExecutePlannedStatementReq() throw();
   ::apache::hive::service::cli::thrift::TExecuteStatementReq statementReq;
   ::impala::TExecRequest plan;

  void __set_statementReq(const  ::apache::hive::service::cli::thrift::TExecuteStatementReq& val);

  void __set_plan(const  ::impala::TExecRequest& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TExecutePlannedStatementReq &a, TExecutePlannedStatementReq &b);

std::ostream& operator<<(std::ostream& out, const TExecutePlannedStatementReq& obj);


class TGetBackendConfigReq {
 public:

  TGetBackendConfigReq(const TGetBackendConfigReq&);
  TGetBackendConfigReq(TGetBackendConfigReq&&);
  TGetBackendConfigReq& operator=(const TGetBackendConfigReq&);
  TGetBackendConfigReq& operator=(TGetBackendConfigReq&&);
  TGetBackendConfigReq() {
  }

  virtual ~TGetBackendConfigReq() throw();
   ::apache::hive::service::cli::thrift::TSessionHandle sessionHandle;

  void __set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetBackendConfigReq &a, TGetBackendConfigReq &b);

std::ostream& operator<<(std::ostream& out, const TGetBackendConfigReq& obj);


class TGetBackendConfigResp {
 public:

  TGetBackendConfigResp(const TGetBackendConfigResp&);
  TGetBackendConfigResp(TGetBackendConfigResp&&);
  TGetBackendConfigResp& operator=(const TGetBackendConfigResp&);
  TGetBackendConfigResp& operator=(TGetBackendConfigResp&&);
  TGetBackendConfigResp() {
  }

  virtual ~TGetBackendConfigResp() throw();
   ::apache::hive::service::cli::thrift::TStatus status;
   ::impala::TBackendGflags backend_config;

  void __set_status(const  ::apache::hive::service::cli::thrift::TStatus& val);

  void __set_backend_config(const  ::impala::TBackendGflags& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetBackendConfigResp &a, TGetBackendConfigResp &b);

std::ostream& operator<<(std::ostream& out, const TGetBackendConfigResp& obj);


class TGetExecutorMembershipReq {
 public:

  TGetExecutorMembershipReq(const TGetExecutorMembershipReq&);
  TGetExecutorMembershipReq(TGetExecutorMembershipReq&&);
  TGetExecutorMembershipReq& operator=(const TGetExecutorMembershipReq&);
  TGetExecutorMembershipReq& operator=(TGetExecutorMembershipReq&&);
  TGetExecutorMembershipReq() {
  }

  virtual ~TGetExecutorMembershipReq() throw();
   ::apache::hive::service::cli::thrift::TSessionHandle sessionHandle;

  void __set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetExecutorMembershipReq &a, TGetExecutorMembershipReq &b);

std::ostream& operator<<(std::ostream& out, const TGetExecutorMembershipReq& obj);


class TGetExecutorMembershipResp {
 public:

  TGetExecutorMembershipResp(const TGetExecutorMembershipResp&);
  TGetExecutorMembershipResp(TGetExecutorMembershipResp&&);
  TGetExecutorMembershipResp& operator=(const TGetExecutorMembershipResp&);
  TGetExecutorMembershipResp& operator=(TGetExecutorMembershipResp&&);
  TGetExecutorMembershipResp() {
  }

  virtual ~TGetExecutorMembershipResp() throw();
   ::apache::hive::service::cli::thrift::TStatus status;
   ::impala::TUpdateExecutorMembershipRequest executor_membership;

  void __set_status(const  ::apache::hive::service::cli::thrift::TStatus& val);

  void __set_executor_membership(const  ::impala::TUpdateExecutorMembershipRequest& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetExecutorMembershipResp &a, TGetExecutorMembershipResp &b);

std::ostream& operator<<(std::ostream& out, const TGetExecutorMembershipResp& obj);


class TInitQueryContextResp {
 public:

  TInitQueryContextResp(const TInitQueryContextResp&);
  TInitQueryContextResp(TInitQueryContextResp&&);
  TInitQueryContextResp& operator=(const TInitQueryContextResp&);
  TInitQueryContextResp& operator=(TInitQueryContextResp&&);
  TInitQueryContextResp() {
  }

  virtual ~TInitQueryContextResp() throw();
   ::apache::hive::service::cli::thrift::TStatus status;
   ::impala::TQueryCtx query_ctx;

  void __set_status(const  ::apache::hive::service::cli::thrift::TStatus& val);

  void __set_query_ctx(const  ::impala::TQueryCtx& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TInitQueryContextResp &a, TInitQueryContextResp &b);

std::ostream& operator<<(std::ostream& out, const TInitQueryContextResp& obj);

} // namespace

#include "ImpalaService_types.tcc"

#endif
