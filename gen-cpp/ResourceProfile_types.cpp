/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ResourceProfile_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {


TBackendResourceProfile::~TBackendResourceProfile() throw() {
}


void TBackendResourceProfile::__set_min_reservation(const int64_t val) {
  this->min_reservation = val;
}

void TBackendResourceProfile::__set_max_reservation(const int64_t val) {
  this->max_reservation = val;
}

void TBackendResourceProfile::__set_spillable_buffer_size(const int64_t val) {
  this->spillable_buffer_size = val;
__isset.spillable_buffer_size = true;
}

void TBackendResourceProfile::__set_max_row_buffer_size(const int64_t val) {
  this->max_row_buffer_size = val;
__isset.max_row_buffer_size = true;
}
std::ostream& operator<<(std::ostream& out, const TBackendResourceProfile& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TBackendResourceProfile &a, TBackendResourceProfile &b) {
  using ::std::swap;
  swap(a.min_reservation, b.min_reservation);
  swap(a.max_reservation, b.max_reservation);
  swap(a.spillable_buffer_size, b.spillable_buffer_size);
  swap(a.max_row_buffer_size, b.max_row_buffer_size);
  swap(a.__isset, b.__isset);
}

TBackendResourceProfile::TBackendResourceProfile(const TBackendResourceProfile& other0) {
  min_reservation = other0.min_reservation;
  max_reservation = other0.max_reservation;
  spillable_buffer_size = other0.spillable_buffer_size;
  max_row_buffer_size = other0.max_row_buffer_size;
  __isset = other0.__isset;
}
TBackendResourceProfile::TBackendResourceProfile( TBackendResourceProfile&& other1) {
  min_reservation = std::move(other1.min_reservation);
  max_reservation = std::move(other1.max_reservation);
  spillable_buffer_size = std::move(other1.spillable_buffer_size);
  max_row_buffer_size = std::move(other1.max_row_buffer_size);
  __isset = std::move(other1.__isset);
}
TBackendResourceProfile& TBackendResourceProfile::operator=(const TBackendResourceProfile& other2) {
  min_reservation = other2.min_reservation;
  max_reservation = other2.max_reservation;
  spillable_buffer_size = other2.spillable_buffer_size;
  max_row_buffer_size = other2.max_row_buffer_size;
  __isset = other2.__isset;
  return *this;
}
TBackendResourceProfile& TBackendResourceProfile::operator=(TBackendResourceProfile&& other3) {
  min_reservation = std::move(other3.min_reservation);
  max_reservation = std::move(other3.max_reservation);
  spillable_buffer_size = std::move(other3.spillable_buffer_size);
  max_row_buffer_size = std::move(other3.max_row_buffer_size);
  __isset = std::move(other3.__isset);
  return *this;
}
void TBackendResourceProfile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBackendResourceProfile(";
  out << "min_reservation=" << to_string(min_reservation);
  out << ", " << "max_reservation=" << to_string(max_reservation);
  out << ", " << "spillable_buffer_size="; (__isset.spillable_buffer_size ? (out << to_string(spillable_buffer_size)) : (out << "<null>"));
  out << ", " << "max_row_buffer_size="; (__isset.max_row_buffer_size ? (out << to_string(max_row_buffer_size)) : (out << "<null>"));
  out << ")";
}

} // namespace
