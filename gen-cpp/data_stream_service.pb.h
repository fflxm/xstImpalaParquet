// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_stream_service.proto

#ifndef PROTOBUF_data_5fstream_5fservice_2eproto__INCLUDED
#define PROTOBUF_data_5fstream_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "row_batch.pb.h"
//#include "kudu/rpc/rpc_header.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_data_5fstream_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTransmitDataRequestPBImpl();
void InitDefaultsTransmitDataRequestPB();
void InitDefaultsTransmitDataResponsePBImpl();
void InitDefaultsTransmitDataResponsePB();
void InitDefaultsEndDataStreamRequestPBImpl();
void InitDefaultsEndDataStreamRequestPB();
void InitDefaultsEndDataStreamResponsePBImpl();
void InitDefaultsEndDataStreamResponsePB();
void InitDefaultsBloomFilterPBImpl();
void InitDefaultsBloomFilterPB();
void InitDefaultsMinMaxFilterPBImpl();
void InitDefaultsMinMaxFilterPB();
void InitDefaultsUpdateFilterParamsPBImpl();
void InitDefaultsUpdateFilterParamsPB();
void InitDefaultsUpdateFilterResultPBImpl();
void InitDefaultsUpdateFilterResultPB();
void InitDefaultsPublishFilterParamsPBImpl();
void InitDefaultsPublishFilterParamsPB();
void InitDefaultsPublishFilterResultPBImpl();
void InitDefaultsPublishFilterResultPB();
inline void InitDefaults() {
  InitDefaultsTransmitDataRequestPB();
  InitDefaultsTransmitDataResponsePB();
  InitDefaultsEndDataStreamRequestPB();
  InitDefaultsEndDataStreamResponsePB();
  InitDefaultsBloomFilterPB();
  InitDefaultsMinMaxFilterPB();
  InitDefaultsUpdateFilterParamsPB();
  InitDefaultsUpdateFilterResultPB();
  InitDefaultsPublishFilterParamsPB();
  InitDefaultsPublishFilterResultPB();
}
}  // namespace protobuf_data_5fstream_5fservice_2eproto
namespace impala {
class BloomFilterPB;
class BloomFilterPBDefaultTypeInternal;
extern BloomFilterPBDefaultTypeInternal _BloomFilterPB_default_instance_;
class EndDataStreamRequestPB;
class EndDataStreamRequestPBDefaultTypeInternal;
extern EndDataStreamRequestPBDefaultTypeInternal _EndDataStreamRequestPB_default_instance_;
class EndDataStreamResponsePB;
class EndDataStreamResponsePBDefaultTypeInternal;
extern EndDataStreamResponsePBDefaultTypeInternal _EndDataStreamResponsePB_default_instance_;
class MinMaxFilterPB;
class MinMaxFilterPBDefaultTypeInternal;
extern MinMaxFilterPBDefaultTypeInternal _MinMaxFilterPB_default_instance_;
class PublishFilterParamsPB;
class PublishFilterParamsPBDefaultTypeInternal;
extern PublishFilterParamsPBDefaultTypeInternal _PublishFilterParamsPB_default_instance_;
class PublishFilterResultPB;
class PublishFilterResultPBDefaultTypeInternal;
extern PublishFilterResultPBDefaultTypeInternal _PublishFilterResultPB_default_instance_;
class TransmitDataRequestPB;
class TransmitDataRequestPBDefaultTypeInternal;
extern TransmitDataRequestPBDefaultTypeInternal _TransmitDataRequestPB_default_instance_;
class TransmitDataResponsePB;
class TransmitDataResponsePBDefaultTypeInternal;
extern TransmitDataResponsePBDefaultTypeInternal _TransmitDataResponsePB_default_instance_;
class UpdateFilterParamsPB;
class UpdateFilterParamsPBDefaultTypeInternal;
extern UpdateFilterParamsPBDefaultTypeInternal _UpdateFilterParamsPB_default_instance_;
class UpdateFilterResultPB;
class UpdateFilterResultPBDefaultTypeInternal;
extern UpdateFilterResultPBDefaultTypeInternal _UpdateFilterResultPB_default_instance_;
}  // namespace impala
namespace impala {

// ===================================================================

class TransmitDataRequestPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.TransmitDataRequestPB) */ {
 public:
  TransmitDataRequestPB();
  virtual ~TransmitDataRequestPB();

  TransmitDataRequestPB(const TransmitDataRequestPB& from);

  inline TransmitDataRequestPB& operator=(const TransmitDataRequestPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransmitDataRequestPB(TransmitDataRequestPB&& from) noexcept
    : TransmitDataRequestPB() {
    *this = ::std::move(from);
  }

  inline TransmitDataRequestPB& operator=(TransmitDataRequestPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransmitDataRequestPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransmitDataRequestPB* internal_default_instance() {
    return reinterpret_cast<const TransmitDataRequestPB*>(
               &_TransmitDataRequestPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TransmitDataRequestPB* other);
  friend void swap(TransmitDataRequestPB& a, TransmitDataRequestPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransmitDataRequestPB* New() const PROTOBUF_FINAL { return New(NULL); }

  TransmitDataRequestPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransmitDataRequestPB& from);
  void MergeFrom(const TransmitDataRequestPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransmitDataRequestPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
  bool has_dest_fragment_instance_id() const;
  void clear_dest_fragment_instance_id();
  static const int kDestFragmentInstanceIdFieldNumber = 1;
  const ::impala::UniqueIdPB& dest_fragment_instance_id() const;
  ::impala::UniqueIdPB* release_dest_fragment_instance_id();
  ::impala::UniqueIdPB* mutable_dest_fragment_instance_id();
  void set_allocated_dest_fragment_instance_id(::impala::UniqueIdPB* dest_fragment_instance_id);

  // optional .impala.RowBatchHeaderPB row_batch_header = 4;
  bool has_row_batch_header() const;
  void clear_row_batch_header();
  static const int kRowBatchHeaderFieldNumber = 4;
  const ::impala::RowBatchHeaderPB& row_batch_header() const;
  ::impala::RowBatchHeaderPB* release_row_batch_header();
  ::impala::RowBatchHeaderPB* mutable_row_batch_header();
  void set_allocated_row_batch_header(::impala::RowBatchHeaderPB* row_batch_header);

  // optional int32 sender_id = 2;
  bool has_sender_id() const;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  ::google::protobuf::int32 sender_id() const;
  void set_sender_id(::google::protobuf::int32 value);

  // optional int32 dest_node_id = 3;
  bool has_dest_node_id() const;
  void clear_dest_node_id();
  static const int kDestNodeIdFieldNumber = 3;
  ::google::protobuf::int32 dest_node_id() const;
  void set_dest_node_id(::google::protobuf::int32 value);

  // optional int32 tuple_offsets_sidecar_idx = 5;
  bool has_tuple_offsets_sidecar_idx() const;
  void clear_tuple_offsets_sidecar_idx();
  static const int kTupleOffsetsSidecarIdxFieldNumber = 5;
  ::google::protobuf::int32 tuple_offsets_sidecar_idx() const;
  void set_tuple_offsets_sidecar_idx(::google::protobuf::int32 value);

  // optional int32 tuple_data_sidecar_idx = 6;
  bool has_tuple_data_sidecar_idx() const;
  void clear_tuple_data_sidecar_idx();
  static const int kTupleDataSidecarIdxFieldNumber = 6;
  ::google::protobuf::int32 tuple_data_sidecar_idx() const;
  void set_tuple_data_sidecar_idx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:impala.TransmitDataRequestPB)
 private:
  void set_has_dest_fragment_instance_id();
  void clear_has_dest_fragment_instance_id();
  void set_has_sender_id();
  void clear_has_sender_id();
  void set_has_dest_node_id();
  void clear_has_dest_node_id();
  void set_has_row_batch_header();
  void clear_has_row_batch_header();
  void set_has_tuple_offsets_sidecar_idx();
  void clear_has_tuple_offsets_sidecar_idx();
  void set_has_tuple_data_sidecar_idx();
  void clear_has_tuple_data_sidecar_idx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::impala::UniqueIdPB* dest_fragment_instance_id_;
  ::impala::RowBatchHeaderPB* row_batch_header_;
  ::google::protobuf::int32 sender_id_;
  ::google::protobuf::int32 dest_node_id_;
  ::google::protobuf::int32 tuple_offsets_sidecar_idx_;
  ::google::protobuf::int32 tuple_data_sidecar_idx_;
  friend struct ::protobuf_data_5fstream_5fservice_2eproto::TableStruct;
  friend void ::protobuf_data_5fstream_5fservice_2eproto::InitDefaultsTransmitDataRequestPBImpl();
};
// -------------------------------------------------------------------

class TransmitDataResponsePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.TransmitDataResponsePB) */ {
 public:
  TransmitDataResponsePB();
  virtual ~TransmitDataResponsePB();

  TransmitDataResponsePB(const TransmitDataResponsePB& from);

  inline TransmitDataResponsePB& operator=(const TransmitDataResponsePB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransmitDataResponsePB(TransmitDataResponsePB&& from) noexcept
    : TransmitDataResponsePB() {
    *this = ::std::move(from);
  }

  inline TransmitDataResponsePB& operator=(TransmitDataResponsePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransmitDataResponsePB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransmitDataResponsePB* internal_default_instance() {
    return reinterpret_cast<const TransmitDataResponsePB*>(
               &_TransmitDataResponsePB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TransmitDataResponsePB* other);
  friend void swap(TransmitDataResponsePB& a, TransmitDataResponsePB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransmitDataResponsePB* New() const PROTOBUF_FINAL { return New(NULL); }

  TransmitDataResponsePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransmitDataResponsePB& from);
  void MergeFrom(const TransmitDataResponsePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransmitDataResponsePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .impala.StatusPB status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::impala::StatusPB& status() const;
  ::impala::StatusPB* release_status();
  ::impala::StatusPB* mutable_status();
  void set_allocated_status(::impala::StatusPB* status);

  // optional int64 receiver_latency_ns = 2;
  bool has_receiver_latency_ns() const;
  void clear_receiver_latency_ns();
  static const int kReceiverLatencyNsFieldNumber = 2;
  ::google::protobuf::int64 receiver_latency_ns() const;
  void set_receiver_latency_ns(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:impala.TransmitDataResponsePB)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_receiver_latency_ns();
  void clear_has_receiver_latency_ns();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::impala::StatusPB* status_;
  ::google::protobuf::int64 receiver_latency_ns_;
  friend struct ::protobuf_data_5fstream_5fservice_2eproto::TableStruct;
  friend void ::protobuf_data_5fstream_5fservice_2eproto::InitDefaultsTransmitDataResponsePBImpl();
};
// -------------------------------------------------------------------

class EndDataStreamRequestPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.EndDataStreamRequestPB) */ {
 public:
  EndDataStreamRequestPB();
  virtual ~EndDataStreamRequestPB();

  EndDataStreamRequestPB(const EndDataStreamRequestPB& from);

  inline EndDataStreamRequestPB& operator=(const EndDataStreamRequestPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndDataStreamRequestPB(EndDataStreamRequestPB&& from) noexcept
    : EndDataStreamRequestPB() {
    *this = ::std::move(from);
  }

  inline EndDataStreamRequestPB& operator=(EndDataStreamRequestPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EndDataStreamRequestPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndDataStreamRequestPB* internal_default_instance() {
    return reinterpret_cast<const EndDataStreamRequestPB*>(
               &_EndDataStreamRequestPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EndDataStreamRequestPB* other);
  friend void swap(EndDataStreamRequestPB& a, EndDataStreamRequestPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndDataStreamRequestPB* New() const PROTOBUF_FINAL { return New(NULL); }

  EndDataStreamRequestPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EndDataStreamRequestPB& from);
  void MergeFrom(const EndDataStreamRequestPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EndDataStreamRequestPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
  bool has_dest_fragment_instance_id() const;
  void clear_dest_fragment_instance_id();
  static const int kDestFragmentInstanceIdFieldNumber = 1;
  const ::impala::UniqueIdPB& dest_fragment_instance_id() const;
  ::impala::UniqueIdPB* release_dest_fragment_instance_id();
  ::impala::UniqueIdPB* mutable_dest_fragment_instance_id();
  void set_allocated_dest_fragment_instance_id(::impala::UniqueIdPB* dest_fragment_instance_id);

  // optional int32 sender_id = 2;
  bool has_sender_id() const;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  ::google::protobuf::int32 sender_id() const;
  void set_sender_id(::google::protobuf::int32 value);

  // optional int32 dest_node_id = 3;
  bool has_dest_node_id() const;
  void clear_dest_node_id();
  static const int kDestNodeIdFieldNumber = 3;
  ::google::protobuf::int32 dest_node_id() const;
  void set_dest_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:impala.EndDataStreamRequestPB)
 private:
  void set_has_dest_fragment_instance_id();
  void clear_has_dest_fragment_instance_id();
  void set_has_sender_id();
  void clear_has_sender_id();
  void set_has_dest_node_id();
  void clear_has_dest_node_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::impala::UniqueIdPB* dest_fragment_instance_id_;
  ::google::protobuf::int32 sender_id_;
  ::google::protobuf::int32 dest_node_id_;
  friend struct ::protobuf_data_5fstream_5fservice_2eproto::TableStruct;
  friend void ::protobuf_data_5fstream_5fservice_2eproto::InitDefaultsEndDataStreamRequestPBImpl();
};
// -------------------------------------------------------------------

class EndDataStreamResponsePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.EndDataStreamResponsePB) */ {
 public:
  EndDataStreamResponsePB();
  virtual ~EndDataStreamResponsePB();

  EndDataStreamResponsePB(const EndDataStreamResponsePB& from);

  inline EndDataStreamResponsePB& operator=(const EndDataStreamResponsePB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndDataStreamResponsePB(EndDataStreamResponsePB&& from) noexcept
    : EndDataStreamResponsePB() {
    *this = ::std::move(from);
  }

  inline EndDataStreamResponsePB& operator=(EndDataStreamResponsePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EndDataStreamResponsePB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndDataStreamResponsePB* internal_default_instance() {
    return reinterpret_cast<const EndDataStreamResponsePB*>(
               &_EndDataStreamResponsePB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(EndDataStreamResponsePB* other);
  friend void swap(EndDataStreamResponsePB& a, EndDataStreamResponsePB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndDataStreamResponsePB* New() const PROTOBUF_FINAL { return New(NULL); }

  EndDataStreamResponsePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EndDataStreamResponsePB& from);
  void MergeFrom(const EndDataStreamResponsePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EndDataStreamResponsePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .impala.StatusPB status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::impala::StatusPB& status() const;
  ::impala::StatusPB* release_status();
  ::impala::StatusPB* mutable_status();
  void set_allocated_status(::impala::StatusPB* status);

  // optional int64 receiver_latency_ns = 2;
  bool has_receiver_latency_ns() const;
  void clear_receiver_latency_ns();
  static const int kReceiverLatencyNsFieldNumber = 2;
  ::google::protobuf::int64 receiver_latency_ns() const;
  void set_receiver_latency_ns(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:impala.EndDataStreamResponsePB)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_receiver_latency_ns();
  void clear_has_receiver_latency_ns();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::impala::StatusPB* status_;
  ::google::protobuf::int64 receiver_latency_ns_;
  friend struct ::protobuf_data_5fstream_5fservice_2eproto::TableStruct;
  friend void ::protobuf_data_5fstream_5fservice_2eproto::InitDefaultsEndDataStreamResponsePBImpl();
};
// -------------------------------------------------------------------

class BloomFilterPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.BloomFilterPB) */ {
 public:
  BloomFilterPB();
  virtual ~BloomFilterPB();

  BloomFilterPB(const BloomFilterPB& from);

  inline BloomFilterPB& operator=(const BloomFilterPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BloomFilterPB(BloomFilterPB&& from) noexcept
    : BloomFilterPB() {
    *this = ::std::move(from);
  }

  inline BloomFilterPB& operator=(BloomFilterPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BloomFilterPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BloomFilterPB* internal_default_instance() {
    return reinterpret_cast<const BloomFilterPB*>(
               &_BloomFilterPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(BloomFilterPB* other);
  friend void swap(BloomFilterPB& a, BloomFilterPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BloomFilterPB* New() const PROTOBUF_FINAL { return New(NULL); }

  BloomFilterPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BloomFilterPB& from);
  void MergeFrom(const BloomFilterPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BloomFilterPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 log_bufferpool_space = 1;
  bool has_log_bufferpool_space() const;
  void clear_log_bufferpool_space();
  static const int kLogBufferpoolSpaceFieldNumber = 1;
  ::google::protobuf::int32 log_bufferpool_space() const;
  void set_log_bufferpool_space(::google::protobuf::int32 value);

  // optional bool always_true = 2;
  bool has_always_true() const;
  void clear_always_true();
  static const int kAlwaysTrueFieldNumber = 2;
  bool always_true() const;
  void set_always_true(bool value);

  // optional bool always_false = 3;
  bool has_always_false() const;
  void clear_always_false();
  static const int kAlwaysFalseFieldNumber = 3;
  bool always_false() const;
  void set_always_false(bool value);

  // optional int32 directory_sidecar_idx = 4;
  bool has_directory_sidecar_idx() const;
  void clear_directory_sidecar_idx();
  static const int kDirectorySidecarIdxFieldNumber = 4;
  ::google::protobuf::int32 directory_sidecar_idx() const;
  void set_directory_sidecar_idx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:impala.BloomFilterPB)
 private:
  void set_has_log_bufferpool_space();
  void clear_has_log_bufferpool_space();
  void set_has_always_true();
  void clear_has_always_true();
  void set_has_always_false();
  void clear_has_always_false();
  void set_has_directory_sidecar_idx();
  void clear_has_directory_sidecar_idx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 log_bufferpool_space_;
  bool always_true_;
  bool always_false_;
  ::google::protobuf::int32 directory_sidecar_idx_;
  friend struct ::protobuf_data_5fstream_5fservice_2eproto::TableStruct;
  friend void ::protobuf_data_5fstream_5fservice_2eproto::InitDefaultsBloomFilterPBImpl();
};
// -------------------------------------------------------------------

class MinMaxFilterPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.MinMaxFilterPB) */ {
 public:
  MinMaxFilterPB();
  virtual ~MinMaxFilterPB();

  MinMaxFilterPB(const MinMaxFilterPB& from);

  inline MinMaxFilterPB& operator=(const MinMaxFilterPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MinMaxFilterPB(MinMaxFilterPB&& from) noexcept
    : MinMaxFilterPB() {
    *this = ::std::move(from);
  }

  inline MinMaxFilterPB& operator=(MinMaxFilterPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MinMaxFilterPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MinMaxFilterPB* internal_default_instance() {
    return reinterpret_cast<const MinMaxFilterPB*>(
               &_MinMaxFilterPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(MinMaxFilterPB* other);
  friend void swap(MinMaxFilterPB& a, MinMaxFilterPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MinMaxFilterPB* New() const PROTOBUF_FINAL { return New(NULL); }

  MinMaxFilterPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MinMaxFilterPB& from);
  void MergeFrom(const MinMaxFilterPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MinMaxFilterPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .impala.ColumnValuePB min = 3;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 3;
  const ::impala::ColumnValuePB& min() const;
  ::impala::ColumnValuePB* release_min();
  ::impala::ColumnValuePB* mutable_min();
  void set_allocated_min(::impala::ColumnValuePB* min);

  // optional .impala.ColumnValuePB max = 4;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 4;
  const ::impala::ColumnValuePB& max() const;
  ::impala::ColumnValuePB* release_max();
  ::impala::ColumnValuePB* mutable_max();
  void set_allocated_max(::impala::ColumnValuePB* max);

  // optional bool always_true = 1;
  bool has_always_true() const;
  void clear_always_true();
  static const int kAlwaysTrueFieldNumber = 1;
  bool always_true() const;
  void set_always_true(bool value);

  // optional bool always_false = 2;
  bool has_always_false() const;
  void clear_always_false();
  static const int kAlwaysFalseFieldNumber = 2;
  bool always_false() const;
  void set_always_false(bool value);

  // @@protoc_insertion_point(class_scope:impala.MinMaxFilterPB)
 private:
  void set_has_always_true();
  void clear_has_always_true();
  void set_has_always_false();
  void clear_has_always_false();
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::impala::ColumnValuePB* min_;
  ::impala::ColumnValuePB* max_;
  bool always_true_;
  bool always_false_;
  friend struct ::protobuf_data_5fstream_5fservice_2eproto::TableStruct;
  friend void ::protobuf_data_5fstream_5fservice_2eproto::InitDefaultsMinMaxFilterPBImpl();
};
// -------------------------------------------------------------------

class UpdateFilterParamsPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.UpdateFilterParamsPB) */ {
 public:
  UpdateFilterParamsPB();
  virtual ~UpdateFilterParamsPB();

  UpdateFilterParamsPB(const UpdateFilterParamsPB& from);

  inline UpdateFilterParamsPB& operator=(const UpdateFilterParamsPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateFilterParamsPB(UpdateFilterParamsPB&& from) noexcept
    : UpdateFilterParamsPB() {
    *this = ::std::move(from);
  }

  inline UpdateFilterParamsPB& operator=(UpdateFilterParamsPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFilterParamsPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFilterParamsPB* internal_default_instance() {
    return reinterpret_cast<const UpdateFilterParamsPB*>(
               &_UpdateFilterParamsPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(UpdateFilterParamsPB* other);
  friend void swap(UpdateFilterParamsPB& a, UpdateFilterParamsPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateFilterParamsPB* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateFilterParamsPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateFilterParamsPB& from);
  void MergeFrom(const UpdateFilterParamsPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateFilterParamsPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .impala.UniqueIdPB query_id = 2;
  bool has_query_id() const;
  void clear_query_id();
  static const int kQueryIdFieldNumber = 2;
  const ::impala::UniqueIdPB& query_id() const;
  ::impala::UniqueIdPB* release_query_id();
  ::impala::UniqueIdPB* mutable_query_id();
  void set_allocated_query_id(::impala::UniqueIdPB* query_id);

  // optional .impala.BloomFilterPB bloom_filter = 3;
  bool has_bloom_filter() const;
  void clear_bloom_filter();
  static const int kBloomFilterFieldNumber = 3;
  const ::impala::BloomFilterPB& bloom_filter() const;
  ::impala::BloomFilterPB* release_bloom_filter();
  ::impala::BloomFilterPB* mutable_bloom_filter();
  void set_allocated_bloom_filter(::impala::BloomFilterPB* bloom_filter);

  // optional .impala.MinMaxFilterPB min_max_filter = 4;
  bool has_min_max_filter() const;
  void clear_min_max_filter();
  static const int kMinMaxFilterFieldNumber = 4;
  const ::impala::MinMaxFilterPB& min_max_filter() const;
  ::impala::MinMaxFilterPB* release_min_max_filter();
  ::impala::MinMaxFilterPB* mutable_min_max_filter();
  void set_allocated_min_max_filter(::impala::MinMaxFilterPB* min_max_filter);

  // optional int32 filter_id = 1;
  bool has_filter_id() const;
  void clear_filter_id();
  static const int kFilterIdFieldNumber = 1;
  ::google::protobuf::int32 filter_id() const;
  void set_filter_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:impala.UpdateFilterParamsPB)
 private:
  void set_has_filter_id();
  void clear_has_filter_id();
  void set_has_query_id();
  void clear_has_query_id();
  void set_has_bloom_filter();
  void clear_has_bloom_filter();
  void set_has_min_max_filter();
  void clear_has_min_max_filter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::impala::UniqueIdPB* query_id_;
  ::impala::BloomFilterPB* bloom_filter_;
  ::impala::MinMaxFilterPB* min_max_filter_;
  ::google::protobuf::int32 filter_id_;
  friend struct ::protobuf_data_5fstream_5fservice_2eproto::TableStruct;
  friend void ::protobuf_data_5fstream_5fservice_2eproto::InitDefaultsUpdateFilterParamsPBImpl();
};
// -------------------------------------------------------------------

class UpdateFilterResultPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.UpdateFilterResultPB) */ {
 public:
  UpdateFilterResultPB();
  virtual ~UpdateFilterResultPB();

  UpdateFilterResultPB(const UpdateFilterResultPB& from);

  inline UpdateFilterResultPB& operator=(const UpdateFilterResultPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateFilterResultPB(UpdateFilterResultPB&& from) noexcept
    : UpdateFilterResultPB() {
    *this = ::std::move(from);
  }

  inline UpdateFilterResultPB& operator=(UpdateFilterResultPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFilterResultPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFilterResultPB* internal_default_instance() {
    return reinterpret_cast<const UpdateFilterResultPB*>(
               &_UpdateFilterResultPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(UpdateFilterResultPB* other);
  friend void swap(UpdateFilterResultPB& a, UpdateFilterResultPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateFilterResultPB* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateFilterResultPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateFilterResultPB& from);
  void MergeFrom(const UpdateFilterResultPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateFilterResultPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .impala.StatusPB status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::impala::StatusPB& status() const;
  ::impala::StatusPB* release_status();
  ::impala::StatusPB* mutable_status();
  void set_allocated_status(::impala::StatusPB* status);

  // optional int64 receiver_latency_ns = 2;
  bool has_receiver_latency_ns() const;
  void clear_receiver_latency_ns();
  static const int kReceiverLatencyNsFieldNumber = 2;
  ::google::protobuf::int64 receiver_latency_ns() const;
  void set_receiver_latency_ns(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:impala.UpdateFilterResultPB)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_receiver_latency_ns();
  void clear_has_receiver_latency_ns();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::impala::StatusPB* status_;
  ::google::protobuf::int64 receiver_latency_ns_;
  friend struct ::protobuf_data_5fstream_5fservice_2eproto::TableStruct;
  friend void ::protobuf_data_5fstream_5fservice_2eproto::InitDefaultsUpdateFilterResultPBImpl();
};
// -------------------------------------------------------------------

class PublishFilterParamsPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.PublishFilterParamsPB) */ {
 public:
  PublishFilterParamsPB();
  virtual ~PublishFilterParamsPB();

  PublishFilterParamsPB(const PublishFilterParamsPB& from);

  inline PublishFilterParamsPB& operator=(const PublishFilterParamsPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishFilterParamsPB(PublishFilterParamsPB&& from) noexcept
    : PublishFilterParamsPB() {
    *this = ::std::move(from);
  }

  inline PublishFilterParamsPB& operator=(PublishFilterParamsPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishFilterParamsPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishFilterParamsPB* internal_default_instance() {
    return reinterpret_cast<const PublishFilterParamsPB*>(
               &_PublishFilterParamsPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(PublishFilterParamsPB* other);
  friend void swap(PublishFilterParamsPB& a, PublishFilterParamsPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishFilterParamsPB* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishFilterParamsPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishFilterParamsPB& from);
  void MergeFrom(const PublishFilterParamsPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishFilterParamsPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .impala.UniqueIdPB dst_query_id = 2;
  bool has_dst_query_id() const;
  void clear_dst_query_id();
  static const int kDstQueryIdFieldNumber = 2;
  const ::impala::UniqueIdPB& dst_query_id() const;
  ::impala::UniqueIdPB* release_dst_query_id();
  ::impala::UniqueIdPB* mutable_dst_query_id();
  void set_allocated_dst_query_id(::impala::UniqueIdPB* dst_query_id);

  // optional .impala.BloomFilterPB bloom_filter = 3;
  bool has_bloom_filter() const;
  void clear_bloom_filter();
  static const int kBloomFilterFieldNumber = 3;
  const ::impala::BloomFilterPB& bloom_filter() const;
  ::impala::BloomFilterPB* release_bloom_filter();
  ::impala::BloomFilterPB* mutable_bloom_filter();
  void set_allocated_bloom_filter(::impala::BloomFilterPB* bloom_filter);

  // optional .impala.MinMaxFilterPB min_max_filter = 4;
  bool has_min_max_filter() const;
  void clear_min_max_filter();
  static const int kMinMaxFilterFieldNumber = 4;
  const ::impala::MinMaxFilterPB& min_max_filter() const;
  ::impala::MinMaxFilterPB* release_min_max_filter();
  ::impala::MinMaxFilterPB* mutable_min_max_filter();
  void set_allocated_min_max_filter(::impala::MinMaxFilterPB* min_max_filter);

  // optional int32 filter_id = 1;
  bool has_filter_id() const;
  void clear_filter_id();
  static const int kFilterIdFieldNumber = 1;
  ::google::protobuf::int32 filter_id() const;
  void set_filter_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:impala.PublishFilterParamsPB)
 private:
  void set_has_filter_id();
  void clear_has_filter_id();
  void set_has_dst_query_id();
  void clear_has_dst_query_id();
  void set_has_bloom_filter();
  void clear_has_bloom_filter();
  void set_has_min_max_filter();
  void clear_has_min_max_filter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::impala::UniqueIdPB* dst_query_id_;
  ::impala::BloomFilterPB* bloom_filter_;
  ::impala::MinMaxFilterPB* min_max_filter_;
  ::google::protobuf::int32 filter_id_;
  friend struct ::protobuf_data_5fstream_5fservice_2eproto::TableStruct;
  friend void ::protobuf_data_5fstream_5fservice_2eproto::InitDefaultsPublishFilterParamsPBImpl();
};
// -------------------------------------------------------------------

class PublishFilterResultPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.PublishFilterResultPB) */ {
 public:
  PublishFilterResultPB();
  virtual ~PublishFilterResultPB();

  PublishFilterResultPB(const PublishFilterResultPB& from);

  inline PublishFilterResultPB& operator=(const PublishFilterResultPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishFilterResultPB(PublishFilterResultPB&& from) noexcept
    : PublishFilterResultPB() {
    *this = ::std::move(from);
  }

  inline PublishFilterResultPB& operator=(PublishFilterResultPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishFilterResultPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishFilterResultPB* internal_default_instance() {
    return reinterpret_cast<const PublishFilterResultPB*>(
               &_PublishFilterResultPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(PublishFilterResultPB* other);
  friend void swap(PublishFilterResultPB& a, PublishFilterResultPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishFilterResultPB* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishFilterResultPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishFilterResultPB& from);
  void MergeFrom(const PublishFilterResultPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishFilterResultPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .impala.StatusPB status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::impala::StatusPB& status() const;
  ::impala::StatusPB* release_status();
  ::impala::StatusPB* mutable_status();
  void set_allocated_status(::impala::StatusPB* status);

  // optional int64 receiver_latency_ns = 2;
  bool has_receiver_latency_ns() const;
  void clear_receiver_latency_ns();
  static const int kReceiverLatencyNsFieldNumber = 2;
  ::google::protobuf::int64 receiver_latency_ns() const;
  void set_receiver_latency_ns(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:impala.PublishFilterResultPB)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_receiver_latency_ns();
  void clear_has_receiver_latency_ns();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::impala::StatusPB* status_;
  ::google::protobuf::int64 receiver_latency_ns_;
  friend struct ::protobuf_data_5fstream_5fservice_2eproto::TableStruct;
  friend void ::protobuf_data_5fstream_5fservice_2eproto::InitDefaultsPublishFilterResultPBImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransmitDataRequestPB

// optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
inline bool TransmitDataRequestPB::has_dest_fragment_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransmitDataRequestPB::set_has_dest_fragment_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransmitDataRequestPB::clear_has_dest_fragment_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::impala::UniqueIdPB& TransmitDataRequestPB::dest_fragment_instance_id() const {
  const ::impala::UniqueIdPB* p = dest_fragment_instance_id_;
  // @@protoc_insertion_point(field_get:impala.TransmitDataRequestPB.dest_fragment_instance_id)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::UniqueIdPB*>(
      &::impala::_UniqueIdPB_default_instance_);
}
inline ::impala::UniqueIdPB* TransmitDataRequestPB::release_dest_fragment_instance_id() {
  // @@protoc_insertion_point(field_release:impala.TransmitDataRequestPB.dest_fragment_instance_id)
  clear_has_dest_fragment_instance_id();
  ::impala::UniqueIdPB* temp = dest_fragment_instance_id_;
  dest_fragment_instance_id_ = NULL;
  return temp;
}
inline ::impala::UniqueIdPB* TransmitDataRequestPB::mutable_dest_fragment_instance_id() {
  set_has_dest_fragment_instance_id();
  if (dest_fragment_instance_id_ == NULL) {
    dest_fragment_instance_id_ = new ::impala::UniqueIdPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.TransmitDataRequestPB.dest_fragment_instance_id)
  return dest_fragment_instance_id_;
}
inline void TransmitDataRequestPB::set_allocated_dest_fragment_instance_id(::impala::UniqueIdPB* dest_fragment_instance_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dest_fragment_instance_id_);
  }
  if (dest_fragment_instance_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dest_fragment_instance_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dest_fragment_instance_id, submessage_arena);
    }
    set_has_dest_fragment_instance_id();
  } else {
    clear_has_dest_fragment_instance_id();
  }
  dest_fragment_instance_id_ = dest_fragment_instance_id;
  // @@protoc_insertion_point(field_set_allocated:impala.TransmitDataRequestPB.dest_fragment_instance_id)
}

// optional int32 sender_id = 2;
inline bool TransmitDataRequestPB::has_sender_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransmitDataRequestPB::set_has_sender_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransmitDataRequestPB::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransmitDataRequestPB::clear_sender_id() {
  sender_id_ = 0;
  clear_has_sender_id();
}
inline ::google::protobuf::int32 TransmitDataRequestPB::sender_id() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataRequestPB.sender_id)
  return sender_id_;
}
inline void TransmitDataRequestPB::set_sender_id(::google::protobuf::int32 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:impala.TransmitDataRequestPB.sender_id)
}

// optional int32 dest_node_id = 3;
inline bool TransmitDataRequestPB::has_dest_node_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransmitDataRequestPB::set_has_dest_node_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransmitDataRequestPB::clear_has_dest_node_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransmitDataRequestPB::clear_dest_node_id() {
  dest_node_id_ = 0;
  clear_has_dest_node_id();
}
inline ::google::protobuf::int32 TransmitDataRequestPB::dest_node_id() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataRequestPB.dest_node_id)
  return dest_node_id_;
}
inline void TransmitDataRequestPB::set_dest_node_id(::google::protobuf::int32 value) {
  set_has_dest_node_id();
  dest_node_id_ = value;
  // @@protoc_insertion_point(field_set:impala.TransmitDataRequestPB.dest_node_id)
}

// optional .impala.RowBatchHeaderPB row_batch_header = 4;
inline bool TransmitDataRequestPB::has_row_batch_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransmitDataRequestPB::set_has_row_batch_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransmitDataRequestPB::clear_has_row_batch_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::impala::RowBatchHeaderPB& TransmitDataRequestPB::row_batch_header() const {
  const ::impala::RowBatchHeaderPB* p = row_batch_header_;
  // @@protoc_insertion_point(field_get:impala.TransmitDataRequestPB.row_batch_header)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::RowBatchHeaderPB*>(
      &::impala::_RowBatchHeaderPB_default_instance_);
}
inline ::impala::RowBatchHeaderPB* TransmitDataRequestPB::release_row_batch_header() {
  // @@protoc_insertion_point(field_release:impala.TransmitDataRequestPB.row_batch_header)
  clear_has_row_batch_header();
  ::impala::RowBatchHeaderPB* temp = row_batch_header_;
  row_batch_header_ = NULL;
  return temp;
}
inline ::impala::RowBatchHeaderPB* TransmitDataRequestPB::mutable_row_batch_header() {
  set_has_row_batch_header();
  if (row_batch_header_ == NULL) {
    row_batch_header_ = new ::impala::RowBatchHeaderPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.TransmitDataRequestPB.row_batch_header)
  return row_batch_header_;
}
inline void TransmitDataRequestPB::set_allocated_row_batch_header(::impala::RowBatchHeaderPB* row_batch_header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(row_batch_header_);
  }
  if (row_batch_header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      row_batch_header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, row_batch_header, submessage_arena);
    }
    set_has_row_batch_header();
  } else {
    clear_has_row_batch_header();
  }
  row_batch_header_ = row_batch_header;
  // @@protoc_insertion_point(field_set_allocated:impala.TransmitDataRequestPB.row_batch_header)
}

// optional int32 tuple_offsets_sidecar_idx = 5;
inline bool TransmitDataRequestPB::has_tuple_offsets_sidecar_idx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransmitDataRequestPB::set_has_tuple_offsets_sidecar_idx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransmitDataRequestPB::clear_has_tuple_offsets_sidecar_idx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransmitDataRequestPB::clear_tuple_offsets_sidecar_idx() {
  tuple_offsets_sidecar_idx_ = 0;
  clear_has_tuple_offsets_sidecar_idx();
}
inline ::google::protobuf::int32 TransmitDataRequestPB::tuple_offsets_sidecar_idx() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataRequestPB.tuple_offsets_sidecar_idx)
  return tuple_offsets_sidecar_idx_;
}
inline void TransmitDataRequestPB::set_tuple_offsets_sidecar_idx(::google::protobuf::int32 value) {
  set_has_tuple_offsets_sidecar_idx();
  tuple_offsets_sidecar_idx_ = value;
  // @@protoc_insertion_point(field_set:impala.TransmitDataRequestPB.tuple_offsets_sidecar_idx)
}

// optional int32 tuple_data_sidecar_idx = 6;
inline bool TransmitDataRequestPB::has_tuple_data_sidecar_idx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransmitDataRequestPB::set_has_tuple_data_sidecar_idx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransmitDataRequestPB::clear_has_tuple_data_sidecar_idx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransmitDataRequestPB::clear_tuple_data_sidecar_idx() {
  tuple_data_sidecar_idx_ = 0;
  clear_has_tuple_data_sidecar_idx();
}
inline ::google::protobuf::int32 TransmitDataRequestPB::tuple_data_sidecar_idx() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataRequestPB.tuple_data_sidecar_idx)
  return tuple_data_sidecar_idx_;
}
inline void TransmitDataRequestPB::set_tuple_data_sidecar_idx(::google::protobuf::int32 value) {
  set_has_tuple_data_sidecar_idx();
  tuple_data_sidecar_idx_ = value;
  // @@protoc_insertion_point(field_set:impala.TransmitDataRequestPB.tuple_data_sidecar_idx)
}

// -------------------------------------------------------------------

// TransmitDataResponsePB

// optional .impala.StatusPB status = 1;
inline bool TransmitDataResponsePB::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransmitDataResponsePB::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransmitDataResponsePB::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::impala::StatusPB& TransmitDataResponsePB::status() const {
  const ::impala::StatusPB* p = status_;
  // @@protoc_insertion_point(field_get:impala.TransmitDataResponsePB.status)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::StatusPB*>(
      &::impala::_StatusPB_default_instance_);
}
inline ::impala::StatusPB* TransmitDataResponsePB::release_status() {
  // @@protoc_insertion_point(field_release:impala.TransmitDataResponsePB.status)
  clear_has_status();
  ::impala::StatusPB* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::impala::StatusPB* TransmitDataResponsePB::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::impala::StatusPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.TransmitDataResponsePB.status)
  return status_;
}
inline void TransmitDataResponsePB::set_allocated_status(::impala::StatusPB* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:impala.TransmitDataResponsePB.status)
}

// optional int64 receiver_latency_ns = 2;
inline bool TransmitDataResponsePB::has_receiver_latency_ns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransmitDataResponsePB::set_has_receiver_latency_ns() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransmitDataResponsePB::clear_has_receiver_latency_ns() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransmitDataResponsePB::clear_receiver_latency_ns() {
  receiver_latency_ns_ = GOOGLE_LONGLONG(0);
  clear_has_receiver_latency_ns();
}
inline ::google::protobuf::int64 TransmitDataResponsePB::receiver_latency_ns() const {
  // @@protoc_insertion_point(field_get:impala.TransmitDataResponsePB.receiver_latency_ns)
  return receiver_latency_ns_;
}
inline void TransmitDataResponsePB::set_receiver_latency_ns(::google::protobuf::int64 value) {
  set_has_receiver_latency_ns();
  receiver_latency_ns_ = value;
  // @@protoc_insertion_point(field_set:impala.TransmitDataResponsePB.receiver_latency_ns)
}

// -------------------------------------------------------------------

// EndDataStreamRequestPB

// optional .impala.UniqueIdPB dest_fragment_instance_id = 1;
inline bool EndDataStreamRequestPB::has_dest_fragment_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndDataStreamRequestPB::set_has_dest_fragment_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndDataStreamRequestPB::clear_has_dest_fragment_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::impala::UniqueIdPB& EndDataStreamRequestPB::dest_fragment_instance_id() const {
  const ::impala::UniqueIdPB* p = dest_fragment_instance_id_;
  // @@protoc_insertion_point(field_get:impala.EndDataStreamRequestPB.dest_fragment_instance_id)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::UniqueIdPB*>(
      &::impala::_UniqueIdPB_default_instance_);
}
inline ::impala::UniqueIdPB* EndDataStreamRequestPB::release_dest_fragment_instance_id() {
  // @@protoc_insertion_point(field_release:impala.EndDataStreamRequestPB.dest_fragment_instance_id)
  clear_has_dest_fragment_instance_id();
  ::impala::UniqueIdPB* temp = dest_fragment_instance_id_;
  dest_fragment_instance_id_ = NULL;
  return temp;
}
inline ::impala::UniqueIdPB* EndDataStreamRequestPB::mutable_dest_fragment_instance_id() {
  set_has_dest_fragment_instance_id();
  if (dest_fragment_instance_id_ == NULL) {
    dest_fragment_instance_id_ = new ::impala::UniqueIdPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.EndDataStreamRequestPB.dest_fragment_instance_id)
  return dest_fragment_instance_id_;
}
inline void EndDataStreamRequestPB::set_allocated_dest_fragment_instance_id(::impala::UniqueIdPB* dest_fragment_instance_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dest_fragment_instance_id_);
  }
  if (dest_fragment_instance_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dest_fragment_instance_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dest_fragment_instance_id, submessage_arena);
    }
    set_has_dest_fragment_instance_id();
  } else {
    clear_has_dest_fragment_instance_id();
  }
  dest_fragment_instance_id_ = dest_fragment_instance_id;
  // @@protoc_insertion_point(field_set_allocated:impala.EndDataStreamRequestPB.dest_fragment_instance_id)
}

// optional int32 sender_id = 2;
inline bool EndDataStreamRequestPB::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EndDataStreamRequestPB::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EndDataStreamRequestPB::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EndDataStreamRequestPB::clear_sender_id() {
  sender_id_ = 0;
  clear_has_sender_id();
}
inline ::google::protobuf::int32 EndDataStreamRequestPB::sender_id() const {
  // @@protoc_insertion_point(field_get:impala.EndDataStreamRequestPB.sender_id)
  return sender_id_;
}
inline void EndDataStreamRequestPB::set_sender_id(::google::protobuf::int32 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:impala.EndDataStreamRequestPB.sender_id)
}

// optional int32 dest_node_id = 3;
inline bool EndDataStreamRequestPB::has_dest_node_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EndDataStreamRequestPB::set_has_dest_node_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EndDataStreamRequestPB::clear_has_dest_node_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EndDataStreamRequestPB::clear_dest_node_id() {
  dest_node_id_ = 0;
  clear_has_dest_node_id();
}
inline ::google::protobuf::int32 EndDataStreamRequestPB::dest_node_id() const {
  // @@protoc_insertion_point(field_get:impala.EndDataStreamRequestPB.dest_node_id)
  return dest_node_id_;
}
inline void EndDataStreamRequestPB::set_dest_node_id(::google::protobuf::int32 value) {
  set_has_dest_node_id();
  dest_node_id_ = value;
  // @@protoc_insertion_point(field_set:impala.EndDataStreamRequestPB.dest_node_id)
}

// -------------------------------------------------------------------

// EndDataStreamResponsePB

// optional .impala.StatusPB status = 1;
inline bool EndDataStreamResponsePB::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndDataStreamResponsePB::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndDataStreamResponsePB::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::impala::StatusPB& EndDataStreamResponsePB::status() const {
  const ::impala::StatusPB* p = status_;
  // @@protoc_insertion_point(field_get:impala.EndDataStreamResponsePB.status)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::StatusPB*>(
      &::impala::_StatusPB_default_instance_);
}
inline ::impala::StatusPB* EndDataStreamResponsePB::release_status() {
  // @@protoc_insertion_point(field_release:impala.EndDataStreamResponsePB.status)
  clear_has_status();
  ::impala::StatusPB* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::impala::StatusPB* EndDataStreamResponsePB::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::impala::StatusPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.EndDataStreamResponsePB.status)
  return status_;
}
inline void EndDataStreamResponsePB::set_allocated_status(::impala::StatusPB* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:impala.EndDataStreamResponsePB.status)
}

// optional int64 receiver_latency_ns = 2;
inline bool EndDataStreamResponsePB::has_receiver_latency_ns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EndDataStreamResponsePB::set_has_receiver_latency_ns() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EndDataStreamResponsePB::clear_has_receiver_latency_ns() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EndDataStreamResponsePB::clear_receiver_latency_ns() {
  receiver_latency_ns_ = GOOGLE_LONGLONG(0);
  clear_has_receiver_latency_ns();
}
inline ::google::protobuf::int64 EndDataStreamResponsePB::receiver_latency_ns() const {
  // @@protoc_insertion_point(field_get:impala.EndDataStreamResponsePB.receiver_latency_ns)
  return receiver_latency_ns_;
}
inline void EndDataStreamResponsePB::set_receiver_latency_ns(::google::protobuf::int64 value) {
  set_has_receiver_latency_ns();
  receiver_latency_ns_ = value;
  // @@protoc_insertion_point(field_set:impala.EndDataStreamResponsePB.receiver_latency_ns)
}

// -------------------------------------------------------------------

// BloomFilterPB

// optional int32 log_bufferpool_space = 1;
inline bool BloomFilterPB::has_log_bufferpool_space() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BloomFilterPB::set_has_log_bufferpool_space() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BloomFilterPB::clear_has_log_bufferpool_space() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BloomFilterPB::clear_log_bufferpool_space() {
  log_bufferpool_space_ = 0;
  clear_has_log_bufferpool_space();
}
inline ::google::protobuf::int32 BloomFilterPB::log_bufferpool_space() const {
  // @@protoc_insertion_point(field_get:impala.BloomFilterPB.log_bufferpool_space)
  return log_bufferpool_space_;
}
inline void BloomFilterPB::set_log_bufferpool_space(::google::protobuf::int32 value) {
  set_has_log_bufferpool_space();
  log_bufferpool_space_ = value;
  // @@protoc_insertion_point(field_set:impala.BloomFilterPB.log_bufferpool_space)
}

// optional bool always_true = 2;
inline bool BloomFilterPB::has_always_true() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BloomFilterPB::set_has_always_true() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BloomFilterPB::clear_has_always_true() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BloomFilterPB::clear_always_true() {
  always_true_ = false;
  clear_has_always_true();
}
inline bool BloomFilterPB::always_true() const {
  // @@protoc_insertion_point(field_get:impala.BloomFilterPB.always_true)
  return always_true_;
}
inline void BloomFilterPB::set_always_true(bool value) {
  set_has_always_true();
  always_true_ = value;
  // @@protoc_insertion_point(field_set:impala.BloomFilterPB.always_true)
}

// optional bool always_false = 3;
inline bool BloomFilterPB::has_always_false() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BloomFilterPB::set_has_always_false() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BloomFilterPB::clear_has_always_false() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BloomFilterPB::clear_always_false() {
  always_false_ = false;
  clear_has_always_false();
}
inline bool BloomFilterPB::always_false() const {
  // @@protoc_insertion_point(field_get:impala.BloomFilterPB.always_false)
  return always_false_;
}
inline void BloomFilterPB::set_always_false(bool value) {
  set_has_always_false();
  always_false_ = value;
  // @@protoc_insertion_point(field_set:impala.BloomFilterPB.always_false)
}

// optional int32 directory_sidecar_idx = 4;
inline bool BloomFilterPB::has_directory_sidecar_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BloomFilterPB::set_has_directory_sidecar_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BloomFilterPB::clear_has_directory_sidecar_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BloomFilterPB::clear_directory_sidecar_idx() {
  directory_sidecar_idx_ = 0;
  clear_has_directory_sidecar_idx();
}
inline ::google::protobuf::int32 BloomFilterPB::directory_sidecar_idx() const {
  // @@protoc_insertion_point(field_get:impala.BloomFilterPB.directory_sidecar_idx)
  return directory_sidecar_idx_;
}
inline void BloomFilterPB::set_directory_sidecar_idx(::google::protobuf::int32 value) {
  set_has_directory_sidecar_idx();
  directory_sidecar_idx_ = value;
  // @@protoc_insertion_point(field_set:impala.BloomFilterPB.directory_sidecar_idx)
}

// -------------------------------------------------------------------

// MinMaxFilterPB

// optional bool always_true = 1;
inline bool MinMaxFilterPB::has_always_true() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MinMaxFilterPB::set_has_always_true() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MinMaxFilterPB::clear_has_always_true() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MinMaxFilterPB::clear_always_true() {
  always_true_ = false;
  clear_has_always_true();
}
inline bool MinMaxFilterPB::always_true() const {
  // @@protoc_insertion_point(field_get:impala.MinMaxFilterPB.always_true)
  return always_true_;
}
inline void MinMaxFilterPB::set_always_true(bool value) {
  set_has_always_true();
  always_true_ = value;
  // @@protoc_insertion_point(field_set:impala.MinMaxFilterPB.always_true)
}

// optional bool always_false = 2;
inline bool MinMaxFilterPB::has_always_false() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MinMaxFilterPB::set_has_always_false() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MinMaxFilterPB::clear_has_always_false() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MinMaxFilterPB::clear_always_false() {
  always_false_ = false;
  clear_has_always_false();
}
inline bool MinMaxFilterPB::always_false() const {
  // @@protoc_insertion_point(field_get:impala.MinMaxFilterPB.always_false)
  return always_false_;
}
inline void MinMaxFilterPB::set_always_false(bool value) {
  set_has_always_false();
  always_false_ = value;
  // @@protoc_insertion_point(field_set:impala.MinMaxFilterPB.always_false)
}

// optional .impala.ColumnValuePB min = 3;
inline bool MinMaxFilterPB::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MinMaxFilterPB::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MinMaxFilterPB::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::impala::ColumnValuePB& MinMaxFilterPB::min() const {
  const ::impala::ColumnValuePB* p = min_;
  // @@protoc_insertion_point(field_get:impala.MinMaxFilterPB.min)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::ColumnValuePB*>(
      &::impala::_ColumnValuePB_default_instance_);
}
inline ::impala::ColumnValuePB* MinMaxFilterPB::release_min() {
  // @@protoc_insertion_point(field_release:impala.MinMaxFilterPB.min)
  clear_has_min();
  ::impala::ColumnValuePB* temp = min_;
  min_ = NULL;
  return temp;
}
inline ::impala::ColumnValuePB* MinMaxFilterPB::mutable_min() {
  set_has_min();
  if (min_ == NULL) {
    min_ = new ::impala::ColumnValuePB;
  }
  // @@protoc_insertion_point(field_mutable:impala.MinMaxFilterPB.min)
  return min_;
}
inline void MinMaxFilterPB::set_allocated_min(::impala::ColumnValuePB* min) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(min_);
  }
  if (min) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    set_has_min();
  } else {
    clear_has_min();
  }
  min_ = min;
  // @@protoc_insertion_point(field_set_allocated:impala.MinMaxFilterPB.min)
}

// optional .impala.ColumnValuePB max = 4;
inline bool MinMaxFilterPB::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MinMaxFilterPB::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MinMaxFilterPB::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::impala::ColumnValuePB& MinMaxFilterPB::max() const {
  const ::impala::ColumnValuePB* p = max_;
  // @@protoc_insertion_point(field_get:impala.MinMaxFilterPB.max)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::ColumnValuePB*>(
      &::impala::_ColumnValuePB_default_instance_);
}
inline ::impala::ColumnValuePB* MinMaxFilterPB::release_max() {
  // @@protoc_insertion_point(field_release:impala.MinMaxFilterPB.max)
  clear_has_max();
  ::impala::ColumnValuePB* temp = max_;
  max_ = NULL;
  return temp;
}
inline ::impala::ColumnValuePB* MinMaxFilterPB::mutable_max() {
  set_has_max();
  if (max_ == NULL) {
    max_ = new ::impala::ColumnValuePB;
  }
  // @@protoc_insertion_point(field_mutable:impala.MinMaxFilterPB.max)
  return max_;
}
inline void MinMaxFilterPB::set_allocated_max(::impala::ColumnValuePB* max) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_);
  }
  if (max) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    set_has_max();
  } else {
    clear_has_max();
  }
  max_ = max;
  // @@protoc_insertion_point(field_set_allocated:impala.MinMaxFilterPB.max)
}

// -------------------------------------------------------------------

// UpdateFilterParamsPB

// optional int32 filter_id = 1;
inline bool UpdateFilterParamsPB::has_filter_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateFilterParamsPB::set_has_filter_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateFilterParamsPB::clear_has_filter_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateFilterParamsPB::clear_filter_id() {
  filter_id_ = 0;
  clear_has_filter_id();
}
inline ::google::protobuf::int32 UpdateFilterParamsPB::filter_id() const {
  // @@protoc_insertion_point(field_get:impala.UpdateFilterParamsPB.filter_id)
  return filter_id_;
}
inline void UpdateFilterParamsPB::set_filter_id(::google::protobuf::int32 value) {
  set_has_filter_id();
  filter_id_ = value;
  // @@protoc_insertion_point(field_set:impala.UpdateFilterParamsPB.filter_id)
}

// optional .impala.UniqueIdPB query_id = 2;
inline bool UpdateFilterParamsPB::has_query_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateFilterParamsPB::set_has_query_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateFilterParamsPB::clear_has_query_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::impala::UniqueIdPB& UpdateFilterParamsPB::query_id() const {
  const ::impala::UniqueIdPB* p = query_id_;
  // @@protoc_insertion_point(field_get:impala.UpdateFilterParamsPB.query_id)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::UniqueIdPB*>(
      &::impala::_UniqueIdPB_default_instance_);
}
inline ::impala::UniqueIdPB* UpdateFilterParamsPB::release_query_id() {
  // @@protoc_insertion_point(field_release:impala.UpdateFilterParamsPB.query_id)
  clear_has_query_id();
  ::impala::UniqueIdPB* temp = query_id_;
  query_id_ = NULL;
  return temp;
}
inline ::impala::UniqueIdPB* UpdateFilterParamsPB::mutable_query_id() {
  set_has_query_id();
  if (query_id_ == NULL) {
    query_id_ = new ::impala::UniqueIdPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.UpdateFilterParamsPB.query_id)
  return query_id_;
}
inline void UpdateFilterParamsPB::set_allocated_query_id(::impala::UniqueIdPB* query_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(query_id_);
  }
  if (query_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query_id, submessage_arena);
    }
    set_has_query_id();
  } else {
    clear_has_query_id();
  }
  query_id_ = query_id;
  // @@protoc_insertion_point(field_set_allocated:impala.UpdateFilterParamsPB.query_id)
}

// optional .impala.BloomFilterPB bloom_filter = 3;
inline bool UpdateFilterParamsPB::has_bloom_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateFilterParamsPB::set_has_bloom_filter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateFilterParamsPB::clear_has_bloom_filter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateFilterParamsPB::clear_bloom_filter() {
  if (bloom_filter_ != NULL) bloom_filter_->Clear();
  clear_has_bloom_filter();
}
inline const ::impala::BloomFilterPB& UpdateFilterParamsPB::bloom_filter() const {
  const ::impala::BloomFilterPB* p = bloom_filter_;
  // @@protoc_insertion_point(field_get:impala.UpdateFilterParamsPB.bloom_filter)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::BloomFilterPB*>(
      &::impala::_BloomFilterPB_default_instance_);
}
inline ::impala::BloomFilterPB* UpdateFilterParamsPB::release_bloom_filter() {
  // @@protoc_insertion_point(field_release:impala.UpdateFilterParamsPB.bloom_filter)
  clear_has_bloom_filter();
  ::impala::BloomFilterPB* temp = bloom_filter_;
  bloom_filter_ = NULL;
  return temp;
}
inline ::impala::BloomFilterPB* UpdateFilterParamsPB::mutable_bloom_filter() {
  set_has_bloom_filter();
  if (bloom_filter_ == NULL) {
    bloom_filter_ = new ::impala::BloomFilterPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.UpdateFilterParamsPB.bloom_filter)
  return bloom_filter_;
}
inline void UpdateFilterParamsPB::set_allocated_bloom_filter(::impala::BloomFilterPB* bloom_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bloom_filter_;
  }
  if (bloom_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bloom_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bloom_filter, submessage_arena);
    }
    set_has_bloom_filter();
  } else {
    clear_has_bloom_filter();
  }
  bloom_filter_ = bloom_filter;
  // @@protoc_insertion_point(field_set_allocated:impala.UpdateFilterParamsPB.bloom_filter)
}

// optional .impala.MinMaxFilterPB min_max_filter = 4;
inline bool UpdateFilterParamsPB::has_min_max_filter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateFilterParamsPB::set_has_min_max_filter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateFilterParamsPB::clear_has_min_max_filter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateFilterParamsPB::clear_min_max_filter() {
  if (min_max_filter_ != NULL) min_max_filter_->Clear();
  clear_has_min_max_filter();
}
inline const ::impala::MinMaxFilterPB& UpdateFilterParamsPB::min_max_filter() const {
  const ::impala::MinMaxFilterPB* p = min_max_filter_;
  // @@protoc_insertion_point(field_get:impala.UpdateFilterParamsPB.min_max_filter)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::MinMaxFilterPB*>(
      &::impala::_MinMaxFilterPB_default_instance_);
}
inline ::impala::MinMaxFilterPB* UpdateFilterParamsPB::release_min_max_filter() {
  // @@protoc_insertion_point(field_release:impala.UpdateFilterParamsPB.min_max_filter)
  clear_has_min_max_filter();
  ::impala::MinMaxFilterPB* temp = min_max_filter_;
  min_max_filter_ = NULL;
  return temp;
}
inline ::impala::MinMaxFilterPB* UpdateFilterParamsPB::mutable_min_max_filter() {
  set_has_min_max_filter();
  if (min_max_filter_ == NULL) {
    min_max_filter_ = new ::impala::MinMaxFilterPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.UpdateFilterParamsPB.min_max_filter)
  return min_max_filter_;
}
inline void UpdateFilterParamsPB::set_allocated_min_max_filter(::impala::MinMaxFilterPB* min_max_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete min_max_filter_;
  }
  if (min_max_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min_max_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_max_filter, submessage_arena);
    }
    set_has_min_max_filter();
  } else {
    clear_has_min_max_filter();
  }
  min_max_filter_ = min_max_filter;
  // @@protoc_insertion_point(field_set_allocated:impala.UpdateFilterParamsPB.min_max_filter)
}

// -------------------------------------------------------------------

// UpdateFilterResultPB

// optional .impala.StatusPB status = 1;
inline bool UpdateFilterResultPB::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateFilterResultPB::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateFilterResultPB::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::impala::StatusPB& UpdateFilterResultPB::status() const {
  const ::impala::StatusPB* p = status_;
  // @@protoc_insertion_point(field_get:impala.UpdateFilterResultPB.status)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::StatusPB*>(
      &::impala::_StatusPB_default_instance_);
}
inline ::impala::StatusPB* UpdateFilterResultPB::release_status() {
  // @@protoc_insertion_point(field_release:impala.UpdateFilterResultPB.status)
  clear_has_status();
  ::impala::StatusPB* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::impala::StatusPB* UpdateFilterResultPB::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::impala::StatusPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.UpdateFilterResultPB.status)
  return status_;
}
inline void UpdateFilterResultPB::set_allocated_status(::impala::StatusPB* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:impala.UpdateFilterResultPB.status)
}

// optional int64 receiver_latency_ns = 2;
inline bool UpdateFilterResultPB::has_receiver_latency_ns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateFilterResultPB::set_has_receiver_latency_ns() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateFilterResultPB::clear_has_receiver_latency_ns() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateFilterResultPB::clear_receiver_latency_ns() {
  receiver_latency_ns_ = GOOGLE_LONGLONG(0);
  clear_has_receiver_latency_ns();
}
inline ::google::protobuf::int64 UpdateFilterResultPB::receiver_latency_ns() const {
  // @@protoc_insertion_point(field_get:impala.UpdateFilterResultPB.receiver_latency_ns)
  return receiver_latency_ns_;
}
inline void UpdateFilterResultPB::set_receiver_latency_ns(::google::protobuf::int64 value) {
  set_has_receiver_latency_ns();
  receiver_latency_ns_ = value;
  // @@protoc_insertion_point(field_set:impala.UpdateFilterResultPB.receiver_latency_ns)
}

// -------------------------------------------------------------------

// PublishFilterParamsPB

// optional int32 filter_id = 1;
inline bool PublishFilterParamsPB::has_filter_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PublishFilterParamsPB::set_has_filter_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PublishFilterParamsPB::clear_has_filter_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PublishFilterParamsPB::clear_filter_id() {
  filter_id_ = 0;
  clear_has_filter_id();
}
inline ::google::protobuf::int32 PublishFilterParamsPB::filter_id() const {
  // @@protoc_insertion_point(field_get:impala.PublishFilterParamsPB.filter_id)
  return filter_id_;
}
inline void PublishFilterParamsPB::set_filter_id(::google::protobuf::int32 value) {
  set_has_filter_id();
  filter_id_ = value;
  // @@protoc_insertion_point(field_set:impala.PublishFilterParamsPB.filter_id)
}

// optional .impala.UniqueIdPB dst_query_id = 2;
inline bool PublishFilterParamsPB::has_dst_query_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishFilterParamsPB::set_has_dst_query_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishFilterParamsPB::clear_has_dst_query_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::impala::UniqueIdPB& PublishFilterParamsPB::dst_query_id() const {
  const ::impala::UniqueIdPB* p = dst_query_id_;
  // @@protoc_insertion_point(field_get:impala.PublishFilterParamsPB.dst_query_id)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::UniqueIdPB*>(
      &::impala::_UniqueIdPB_default_instance_);
}
inline ::impala::UniqueIdPB* PublishFilterParamsPB::release_dst_query_id() {
  // @@protoc_insertion_point(field_release:impala.PublishFilterParamsPB.dst_query_id)
  clear_has_dst_query_id();
  ::impala::UniqueIdPB* temp = dst_query_id_;
  dst_query_id_ = NULL;
  return temp;
}
inline ::impala::UniqueIdPB* PublishFilterParamsPB::mutable_dst_query_id() {
  set_has_dst_query_id();
  if (dst_query_id_ == NULL) {
    dst_query_id_ = new ::impala::UniqueIdPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.PublishFilterParamsPB.dst_query_id)
  return dst_query_id_;
}
inline void PublishFilterParamsPB::set_allocated_dst_query_id(::impala::UniqueIdPB* dst_query_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dst_query_id_);
  }
  if (dst_query_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dst_query_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dst_query_id, submessage_arena);
    }
    set_has_dst_query_id();
  } else {
    clear_has_dst_query_id();
  }
  dst_query_id_ = dst_query_id;
  // @@protoc_insertion_point(field_set_allocated:impala.PublishFilterParamsPB.dst_query_id)
}

// optional .impala.BloomFilterPB bloom_filter = 3;
inline bool PublishFilterParamsPB::has_bloom_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishFilterParamsPB::set_has_bloom_filter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishFilterParamsPB::clear_has_bloom_filter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishFilterParamsPB::clear_bloom_filter() {
  if (bloom_filter_ != NULL) bloom_filter_->Clear();
  clear_has_bloom_filter();
}
inline const ::impala::BloomFilterPB& PublishFilterParamsPB::bloom_filter() const {
  const ::impala::BloomFilterPB* p = bloom_filter_;
  // @@protoc_insertion_point(field_get:impala.PublishFilterParamsPB.bloom_filter)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::BloomFilterPB*>(
      &::impala::_BloomFilterPB_default_instance_);
}
inline ::impala::BloomFilterPB* PublishFilterParamsPB::release_bloom_filter() {
  // @@protoc_insertion_point(field_release:impala.PublishFilterParamsPB.bloom_filter)
  clear_has_bloom_filter();
  ::impala::BloomFilterPB* temp = bloom_filter_;
  bloom_filter_ = NULL;
  return temp;
}
inline ::impala::BloomFilterPB* PublishFilterParamsPB::mutable_bloom_filter() {
  set_has_bloom_filter();
  if (bloom_filter_ == NULL) {
    bloom_filter_ = new ::impala::BloomFilterPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.PublishFilterParamsPB.bloom_filter)
  return bloom_filter_;
}
inline void PublishFilterParamsPB::set_allocated_bloom_filter(::impala::BloomFilterPB* bloom_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bloom_filter_;
  }
  if (bloom_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bloom_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bloom_filter, submessage_arena);
    }
    set_has_bloom_filter();
  } else {
    clear_has_bloom_filter();
  }
  bloom_filter_ = bloom_filter;
  // @@protoc_insertion_point(field_set_allocated:impala.PublishFilterParamsPB.bloom_filter)
}

// optional .impala.MinMaxFilterPB min_max_filter = 4;
inline bool PublishFilterParamsPB::has_min_max_filter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublishFilterParamsPB::set_has_min_max_filter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublishFilterParamsPB::clear_has_min_max_filter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublishFilterParamsPB::clear_min_max_filter() {
  if (min_max_filter_ != NULL) min_max_filter_->Clear();
  clear_has_min_max_filter();
}
inline const ::impala::MinMaxFilterPB& PublishFilterParamsPB::min_max_filter() const {
  const ::impala::MinMaxFilterPB* p = min_max_filter_;
  // @@protoc_insertion_point(field_get:impala.PublishFilterParamsPB.min_max_filter)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::MinMaxFilterPB*>(
      &::impala::_MinMaxFilterPB_default_instance_);
}
inline ::impala::MinMaxFilterPB* PublishFilterParamsPB::release_min_max_filter() {
  // @@protoc_insertion_point(field_release:impala.PublishFilterParamsPB.min_max_filter)
  clear_has_min_max_filter();
  ::impala::MinMaxFilterPB* temp = min_max_filter_;
  min_max_filter_ = NULL;
  return temp;
}
inline ::impala::MinMaxFilterPB* PublishFilterParamsPB::mutable_min_max_filter() {
  set_has_min_max_filter();
  if (min_max_filter_ == NULL) {
    min_max_filter_ = new ::impala::MinMaxFilterPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.PublishFilterParamsPB.min_max_filter)
  return min_max_filter_;
}
inline void PublishFilterParamsPB::set_allocated_min_max_filter(::impala::MinMaxFilterPB* min_max_filter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete min_max_filter_;
  }
  if (min_max_filter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      min_max_filter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, min_max_filter, submessage_arena);
    }
    set_has_min_max_filter();
  } else {
    clear_has_min_max_filter();
  }
  min_max_filter_ = min_max_filter;
  // @@protoc_insertion_point(field_set_allocated:impala.PublishFilterParamsPB.min_max_filter)
}

// -------------------------------------------------------------------

// PublishFilterResultPB

// optional .impala.StatusPB status = 1;
inline bool PublishFilterResultPB::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishFilterResultPB::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishFilterResultPB::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::impala::StatusPB& PublishFilterResultPB::status() const {
  const ::impala::StatusPB* p = status_;
  // @@protoc_insertion_point(field_get:impala.PublishFilterResultPB.status)
  return p != NULL ? *p : *reinterpret_cast<const ::impala::StatusPB*>(
      &::impala::_StatusPB_default_instance_);
}
inline ::impala::StatusPB* PublishFilterResultPB::release_status() {
  // @@protoc_insertion_point(field_release:impala.PublishFilterResultPB.status)
  clear_has_status();
  ::impala::StatusPB* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::impala::StatusPB* PublishFilterResultPB::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::impala::StatusPB;
  }
  // @@protoc_insertion_point(field_mutable:impala.PublishFilterResultPB.status)
  return status_;
}
inline void PublishFilterResultPB::set_allocated_status(::impala::StatusPB* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:impala.PublishFilterResultPB.status)
}

// optional int64 receiver_latency_ns = 2;
inline bool PublishFilterResultPB::has_receiver_latency_ns() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishFilterResultPB::set_has_receiver_latency_ns() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishFilterResultPB::clear_has_receiver_latency_ns() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishFilterResultPB::clear_receiver_latency_ns() {
  receiver_latency_ns_ = GOOGLE_LONGLONG(0);
  clear_has_receiver_latency_ns();
}
inline ::google::protobuf::int64 PublishFilterResultPB::receiver_latency_ns() const {
  // @@protoc_insertion_point(field_get:impala.PublishFilterResultPB.receiver_latency_ns)
  return receiver_latency_ns_;
}
inline void PublishFilterResultPB::set_receiver_latency_ns(::google::protobuf::int64 value) {
  set_has_receiver_latency_ns();
  receiver_latency_ns_ = value;
  // @@protoc_insertion_point(field_set:impala.PublishFilterResultPB.receiver_latency_ns)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace impala

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_5fstream_5fservice_2eproto__INCLUDED
