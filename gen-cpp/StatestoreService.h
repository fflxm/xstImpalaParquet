/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StatestoreService_H
#define StatestoreService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "StatestoreService_types.h"

namespace impala {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class StatestoreServiceIf {
 public:
  virtual ~StatestoreServiceIf() {}
  virtual void RegisterSubscriber(TRegisterSubscriberResponse& _return, const TRegisterSubscriberRequest& params) = 0;
};

class StatestoreServiceIfFactory {
 public:
  typedef StatestoreServiceIf Handler;

  virtual ~StatestoreServiceIfFactory() {}

  virtual StatestoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StatestoreServiceIf* /* handler */) = 0;
};

class StatestoreServiceIfSingletonFactory : virtual public StatestoreServiceIfFactory {
 public:
  StatestoreServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<StatestoreServiceIf>& iface) : iface_(iface) {}
  virtual ~StatestoreServiceIfSingletonFactory() {}

  virtual StatestoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(StatestoreServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<StatestoreServiceIf> iface_;
};

class StatestoreServiceNull : virtual public StatestoreServiceIf {
 public:
  virtual ~StatestoreServiceNull() {}
  void RegisterSubscriber(TRegisterSubscriberResponse& /* _return */, const TRegisterSubscriberRequest& /* params */) {
    return;
  }
};

typedef struct _StatestoreService_RegisterSubscriber_args__isset {
  _StatestoreService_RegisterSubscriber_args__isset() : params(false) {}
  bool params :1;
} _StatestoreService_RegisterSubscriber_args__isset;

class StatestoreService_RegisterSubscriber_args {
 public:

  StatestoreService_RegisterSubscriber_args(const StatestoreService_RegisterSubscriber_args&);
  StatestoreService_RegisterSubscriber_args(StatestoreService_RegisterSubscriber_args&&);
  StatestoreService_RegisterSubscriber_args& operator=(const StatestoreService_RegisterSubscriber_args&);
  StatestoreService_RegisterSubscriber_args& operator=(StatestoreService_RegisterSubscriber_args&&);
  StatestoreService_RegisterSubscriber_args() {
  }

  virtual ~StatestoreService_RegisterSubscriber_args() throw();
  TRegisterSubscriberRequest params;

  _StatestoreService_RegisterSubscriber_args__isset __isset;

  void __set_params(const TRegisterSubscriberRequest& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class StatestoreService_RegisterSubscriber_pargs {
 public:


  virtual ~StatestoreService_RegisterSubscriber_pargs() throw();
  const TRegisterSubscriberRequest* params;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _StatestoreService_RegisterSubscriber_result__isset {
  _StatestoreService_RegisterSubscriber_result__isset() : success(false) {}
  bool success :1;
} _StatestoreService_RegisterSubscriber_result__isset;

class StatestoreService_RegisterSubscriber_result {
 public:

  StatestoreService_RegisterSubscriber_result(const StatestoreService_RegisterSubscriber_result&);
  StatestoreService_RegisterSubscriber_result(StatestoreService_RegisterSubscriber_result&&);
  StatestoreService_RegisterSubscriber_result& operator=(const StatestoreService_RegisterSubscriber_result&);
  StatestoreService_RegisterSubscriber_result& operator=(StatestoreService_RegisterSubscriber_result&&);
  StatestoreService_RegisterSubscriber_result() {
  }

  virtual ~StatestoreService_RegisterSubscriber_result() throw();
  TRegisterSubscriberResponse success;

  _StatestoreService_RegisterSubscriber_result__isset __isset;

  void __set_success(const TRegisterSubscriberResponse& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _StatestoreService_RegisterSubscriber_presult__isset {
  _StatestoreService_RegisterSubscriber_presult__isset() : success(false) {}
  bool success :1;
} _StatestoreService_RegisterSubscriber_presult__isset;

class StatestoreService_RegisterSubscriber_presult {
 public:


  virtual ~StatestoreService_RegisterSubscriber_presult() throw();
  TRegisterSubscriberResponse* success;

  _StatestoreService_RegisterSubscriber_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class StatestoreServiceClientT : virtual public StatestoreServiceIf {
 public:
  StatestoreServiceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  StatestoreServiceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void RegisterSubscriber(TRegisterSubscriberResponse& _return, const TRegisterSubscriberRequest& params);
  void send_RegisterSubscriber(const TRegisterSubscriberRequest& params);
  void recv_RegisterSubscriber(TRegisterSubscriberResponse& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef StatestoreServiceClientT< ::apache::thrift::protocol::TProtocol> StatestoreServiceClient;

template <class Protocol_>
class StatestoreServiceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<StatestoreServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StatestoreServiceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (StatestoreServiceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_RegisterSubscriber(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegisterSubscriber(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  StatestoreServiceProcessorT(::apache::thrift::stdcxx::shared_ptr<StatestoreServiceIf> iface) :
    iface_(iface) {
    processMap_["RegisterSubscriber"] = ProcessFunctions(
      &StatestoreServiceProcessorT::process_RegisterSubscriber,
      &StatestoreServiceProcessorT::process_RegisterSubscriber);
  }

  virtual ~StatestoreServiceProcessorT() {}
};

typedef StatestoreServiceProcessorT< ::apache::thrift::protocol::TDummyProtocol > StatestoreServiceProcessor;

template <class Protocol_>
class StatestoreServiceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  StatestoreServiceProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< StatestoreServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< StatestoreServiceIfFactory > handlerFactory_;
};

typedef StatestoreServiceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > StatestoreServiceProcessorFactory;

class StatestoreServiceMultiface : virtual public StatestoreServiceIf {
 public:
  StatestoreServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<StatestoreServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StatestoreServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<StatestoreServiceIf> > ifaces_;
  StatestoreServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<StatestoreServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void RegisterSubscriber(TRegisterSubscriberResponse& _return, const TRegisterSubscriberRequest& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegisterSubscriber(_return, params);
    }
    ifaces_[i]->RegisterSubscriber(_return, params);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class StatestoreServiceConcurrentClientT : virtual public StatestoreServiceIf {
 public:
  StatestoreServiceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  StatestoreServiceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void RegisterSubscriber(TRegisterSubscriberResponse& _return, const TRegisterSubscriberRequest& params);
  int32_t send_RegisterSubscriber(const TRegisterSubscriberRequest& params);
  void recv_RegisterSubscriber(TRegisterSubscriberResponse& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef StatestoreServiceConcurrentClientT< ::apache::thrift::protocol::TProtocol> StatestoreServiceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#include "StatestoreService.tcc"
#include "StatestoreService_types.tcc"

#endif
