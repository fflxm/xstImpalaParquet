/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Frontend_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {

int _kTDescribeOutputStyleValues[] = {
  TDescribeOutputStyle::MINIMAL,
  TDescribeOutputStyle::EXTENDED,
  TDescribeOutputStyle::FORMATTED
};
const char* _kTDescribeOutputStyleNames[] = {
  "MINIMAL",
  "EXTENDED",
  "FORMATTED"
};
const std::map<int, const char*> _TDescribeOutputStyle_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTDescribeOutputStyleValues, _kTDescribeOutputStyleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDescribeOutputStyle::type& val) {
  std::map<int, const char*>::const_iterator it = _TDescribeOutputStyle_VALUES_TO_NAMES.find(val);
  if (it != _TDescribeOutputStyle_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTShowStatsOpValues[] = {
  TShowStatsOp::TABLE_STATS,
  TShowStatsOp::COLUMN_STATS,
  TShowStatsOp::PARTITIONS,
  TShowStatsOp::RANGE_PARTITIONS
};
const char* _kTShowStatsOpNames[] = {
  "TABLE_STATS",
  "COLUMN_STATS",
  "PARTITIONS",
  "RANGE_PARTITIONS"
};
const std::map<int, const char*> _TShowStatsOp_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTShowStatsOpValues, _kTShowStatsOpNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TShowStatsOp::type& val) {
  std::map<int, const char*>::const_iterator it = _TShowStatsOp_VALUES_TO_NAMES.find(val);
  if (it != _TShowStatsOp_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTCatalogOpTypeValues[] = {
  TCatalogOpType::SHOW_TABLES,
  TCatalogOpType::SHOW_DBS,
  TCatalogOpType::SHOW_STATS,
  TCatalogOpType::USE,
  TCatalogOpType::DESCRIBE_TABLE,
  TCatalogOpType::DESCRIBE_DB,
  TCatalogOpType::SHOW_FUNCTIONS,
  TCatalogOpType::RESET_METADATA,
  TCatalogOpType::DDL,
  TCatalogOpType::SHOW_CREATE_TABLE,
  TCatalogOpType::SHOW_DATA_SRCS,
  TCatalogOpType::SHOW_ROLES,
  TCatalogOpType::SHOW_GRANT_PRINCIPAL,
  TCatalogOpType::SHOW_FILES,
  TCatalogOpType::SHOW_CREATE_FUNCTION,
  TCatalogOpType::DESCRIBE_HISTORY
};
const char* _kTCatalogOpTypeNames[] = {
  "SHOW_TABLES",
  "SHOW_DBS",
  "SHOW_STATS",
  "USE",
  "DESCRIBE_TABLE",
  "DESCRIBE_DB",
  "SHOW_FUNCTIONS",
  "RESET_METADATA",
  "DDL",
  "SHOW_CREATE_TABLE",
  "SHOW_DATA_SRCS",
  "SHOW_ROLES",
  "SHOW_GRANT_PRINCIPAL",
  "SHOW_FILES",
  "SHOW_CREATE_FUNCTION",
  "DESCRIBE_HISTORY"
};
const std::map<int, const char*> _TCatalogOpType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(16, _kTCatalogOpTypeValues, _kTCatalogOpTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TCatalogOpType::type& val) {
  std::map<int, const char*>::const_iterator it = _TCatalogOpType_VALUES_TO_NAMES.find(val);
  if (it != _TCatalogOpType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTAdminRequestTypeValues[] = {
  TAdminRequestType::SHUTDOWN
};
const char* _kTAdminRequestTypeNames[] = {
  "SHUTDOWN"
};
const std::map<int, const char*> _TAdminRequestType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTAdminRequestTypeValues, _kTAdminRequestTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TAdminRequestType::type& val) {
  std::map<int, const char*>::const_iterator it = _TAdminRequestType_VALUES_TO_NAMES.find(val);
  if (it != _TAdminRequestType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTMetadataOpcodeValues[] = {
  TMetadataOpcode::GET_TYPE_INFO,
  TMetadataOpcode::GET_CATALOGS,
  TMetadataOpcode::GET_SCHEMAS,
  TMetadataOpcode::GET_TABLES,
  TMetadataOpcode::GET_TABLE_TYPES,
  TMetadataOpcode::GET_COLUMNS,
  TMetadataOpcode::GET_FUNCTIONS,
  TMetadataOpcode::GET_PRIMARY_KEYS,
  TMetadataOpcode::GET_CROSS_REFERENCE
};
const char* _kTMetadataOpcodeNames[] = {
  "GET_TYPE_INFO",
  "GET_CATALOGS",
  "GET_SCHEMAS",
  "GET_TABLES",
  "GET_TABLE_TYPES",
  "GET_COLUMNS",
  "GET_FUNCTIONS",
  "GET_PRIMARY_KEYS",
  "GET_CROSS_REFERENCE"
};
const std::map<int, const char*> _TMetadataOpcode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kTMetadataOpcodeValues, _kTMetadataOpcodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TMetadataOpcode::type& val) {
  std::map<int, const char*>::const_iterator it = _TMetadataOpcode_VALUES_TO_NAMES.find(val);
  if (it != _TMetadataOpcode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTSymbolTypeValues[] = {
  TSymbolType::UDF_EVALUATE,
  TSymbolType::UDF_PREPARE,
  TSymbolType::UDF_CLOSE
};
const char* _kTSymbolTypeNames[] = {
  "UDF_EVALUATE",
  "UDF_PREPARE",
  "UDF_CLOSE"
};
const std::map<int, const char*> _TSymbolType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTSymbolTypeValues, _kTSymbolTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TSymbolType::type& val) {
  std::map<int, const char*>::const_iterator it = _TSymbolType_VALUES_TO_NAMES.find(val);
  if (it != _TSymbolType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTSymbolLookupResultCodeValues[] = {
  TSymbolLookupResultCode::SYMBOL_FOUND,
  TSymbolLookupResultCode::BINARY_NOT_FOUND,
  TSymbolLookupResultCode::SYMBOL_NOT_FOUND
};
const char* _kTSymbolLookupResultCodeNames[] = {
  "SYMBOL_FOUND",
  "BINARY_NOT_FOUND",
  "SYMBOL_NOT_FOUND"
};
const std::map<int, const char*> _TSymbolLookupResultCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTSymbolLookupResultCodeValues, _kTSymbolLookupResultCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TSymbolLookupResultCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TSymbolLookupResultCode_VALUES_TO_NAMES.find(val);
  if (it != _TSymbolLookupResultCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


THiveUdfExecutorCtorParams::~THiveUdfExecutorCtorParams() throw() {
}


void THiveUdfExecutorCtorParams::__set_fn(const  ::impala::TFunction& val) {
  this->fn = val;
}

void THiveUdfExecutorCtorParams::__set_local_location(const std::string& val) {
  this->local_location = val;
}

void THiveUdfExecutorCtorParams::__set_input_byte_offsets(const std::vector<int32_t> & val) {
  this->input_byte_offsets = val;
}

void THiveUdfExecutorCtorParams::__set_input_nulls_ptr(const int64_t val) {
  this->input_nulls_ptr = val;
}

void THiveUdfExecutorCtorParams::__set_input_buffer_ptr(const int64_t val) {
  this->input_buffer_ptr = val;
}

void THiveUdfExecutorCtorParams::__set_output_null_ptr(const int64_t val) {
  this->output_null_ptr = val;
}

void THiveUdfExecutorCtorParams::__set_output_buffer_ptr(const int64_t val) {
  this->output_buffer_ptr = val;
}
std::ostream& operator<<(std::ostream& out, const THiveUdfExecutorCtorParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(THiveUdfExecutorCtorParams &a, THiveUdfExecutorCtorParams &b) {
  using ::std::swap;
  swap(a.fn, b.fn);
  swap(a.local_location, b.local_location);
  swap(a.input_byte_offsets, b.input_byte_offsets);
  swap(a.input_nulls_ptr, b.input_nulls_ptr);
  swap(a.input_buffer_ptr, b.input_buffer_ptr);
  swap(a.output_null_ptr, b.output_null_ptr);
  swap(a.output_buffer_ptr, b.output_buffer_ptr);
}

THiveUdfExecutorCtorParams::THiveUdfExecutorCtorParams(const THiveUdfExecutorCtorParams& other6) {
  fn = other6.fn;
  local_location = other6.local_location;
  input_byte_offsets = other6.input_byte_offsets;
  input_nulls_ptr = other6.input_nulls_ptr;
  input_buffer_ptr = other6.input_buffer_ptr;
  output_null_ptr = other6.output_null_ptr;
  output_buffer_ptr = other6.output_buffer_ptr;
}
THiveUdfExecutorCtorParams::THiveUdfExecutorCtorParams( THiveUdfExecutorCtorParams&& other7) {
  fn = std::move(other7.fn);
  local_location = std::move(other7.local_location);
  input_byte_offsets = std::move(other7.input_byte_offsets);
  input_nulls_ptr = std::move(other7.input_nulls_ptr);
  input_buffer_ptr = std::move(other7.input_buffer_ptr);
  output_null_ptr = std::move(other7.output_null_ptr);
  output_buffer_ptr = std::move(other7.output_buffer_ptr);
}
THiveUdfExecutorCtorParams& THiveUdfExecutorCtorParams::operator=(const THiveUdfExecutorCtorParams& other8) {
  fn = other8.fn;
  local_location = other8.local_location;
  input_byte_offsets = other8.input_byte_offsets;
  input_nulls_ptr = other8.input_nulls_ptr;
  input_buffer_ptr = other8.input_buffer_ptr;
  output_null_ptr = other8.output_null_ptr;
  output_buffer_ptr = other8.output_buffer_ptr;
  return *this;
}
THiveUdfExecutorCtorParams& THiveUdfExecutorCtorParams::operator=(THiveUdfExecutorCtorParams&& other9) {
  fn = std::move(other9.fn);
  local_location = std::move(other9.local_location);
  input_byte_offsets = std::move(other9.input_byte_offsets);
  input_nulls_ptr = std::move(other9.input_nulls_ptr);
  input_buffer_ptr = std::move(other9.input_buffer_ptr);
  output_null_ptr = std::move(other9.output_null_ptr);
  output_buffer_ptr = std::move(other9.output_buffer_ptr);
  return *this;
}
void THiveUdfExecutorCtorParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "THiveUdfExecutorCtorParams(";
  out << "fn=" << to_string(fn);
  out << ", " << "local_location=" << to_string(local_location);
  out << ", " << "input_byte_offsets=" << to_string(input_byte_offsets);
  out << ", " << "input_nulls_ptr=" << to_string(input_nulls_ptr);
  out << ", " << "input_buffer_ptr=" << to_string(input_buffer_ptr);
  out << ", " << "output_null_ptr=" << to_string(output_null_ptr);
  out << ", " << "output_buffer_ptr=" << to_string(output_buffer_ptr);
  out << ")";
}


TGetTablesParams::~TGetTablesParams() throw() {
}


void TGetTablesParams::__set_db(const std::string& val) {
  this->db = val;
__isset.db = true;
}

void TGetTablesParams::__set_pattern(const std::string& val) {
  this->pattern = val;
__isset.pattern = true;
}

void TGetTablesParams::__set_session(const  ::impala::TSessionState& val) {
  this->session = val;
__isset.session = true;
}
std::ostream& operator<<(std::ostream& out, const TGetTablesParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetTablesParams &a, TGetTablesParams &b) {
  using ::std::swap;
  swap(a.db, b.db);
  swap(a.pattern, b.pattern);
  swap(a.session, b.session);
  swap(a.__isset, b.__isset);
}

TGetTablesParams::TGetTablesParams(const TGetTablesParams& other10) {
  db = other10.db;
  pattern = other10.pattern;
  session = other10.session;
  __isset = other10.__isset;
}
TGetTablesParams::TGetTablesParams( TGetTablesParams&& other11) {
  db = std::move(other11.db);
  pattern = std::move(other11.pattern);
  session = std::move(other11.session);
  __isset = std::move(other11.__isset);
}
TGetTablesParams& TGetTablesParams::operator=(const TGetTablesParams& other12) {
  db = other12.db;
  pattern = other12.pattern;
  session = other12.session;
  __isset = other12.__isset;
  return *this;
}
TGetTablesParams& TGetTablesParams::operator=(TGetTablesParams&& other13) {
  db = std::move(other13.db);
  pattern = std::move(other13.pattern);
  session = std::move(other13.session);
  __isset = std::move(other13.__isset);
  return *this;
}
void TGetTablesParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetTablesParams(";
  out << "db="; (__isset.db ? (out << to_string(db)) : (out << "<null>"));
  out << ", " << "pattern="; (__isset.pattern ? (out << to_string(pattern)) : (out << "<null>"));
  out << ", " << "session="; (__isset.session ? (out << to_string(session)) : (out << "<null>"));
  out << ")";
}


TGetTablesResult::~TGetTablesResult() throw() {
}


void TGetTablesResult::__set_tables(const std::vector<std::string> & val) {
  this->tables = val;
}
std::ostream& operator<<(std::ostream& out, const TGetTablesResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetTablesResult &a, TGetTablesResult &b) {
  using ::std::swap;
  swap(a.tables, b.tables);
  swap(a.__isset, b.__isset);
}

TGetTablesResult::TGetTablesResult(const TGetTablesResult& other20) {
  tables = other20.tables;
  __isset = other20.__isset;
}
TGetTablesResult::TGetTablesResult( TGetTablesResult&& other21) {
  tables = std::move(other21.tables);
  __isset = std::move(other21.__isset);
}
TGetTablesResult& TGetTablesResult::operator=(const TGetTablesResult& other22) {
  tables = other22.tables;
  __isset = other22.__isset;
  return *this;
}
TGetTablesResult& TGetTablesResult::operator=(TGetTablesResult&& other23) {
  tables = std::move(other23.tables);
  __isset = std::move(other23.__isset);
  return *this;
}
void TGetTablesResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetTablesResult(";
  out << "tables=" << to_string(tables);
  out << ")";
}


TGetTableMetricsParams::~TGetTableMetricsParams() throw() {
}


void TGetTableMetricsParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}
std::ostream& operator<<(std::ostream& out, const TGetTableMetricsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetTableMetricsParams &a, TGetTableMetricsParams &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
}

TGetTableMetricsParams::TGetTableMetricsParams(const TGetTableMetricsParams& other24) {
  table_name = other24.table_name;
}
TGetTableMetricsParams::TGetTableMetricsParams( TGetTableMetricsParams&& other25) {
  table_name = std::move(other25.table_name);
}
TGetTableMetricsParams& TGetTableMetricsParams::operator=(const TGetTableMetricsParams& other26) {
  table_name = other26.table_name;
  return *this;
}
TGetTableMetricsParams& TGetTableMetricsParams::operator=(TGetTableMetricsParams&& other27) {
  table_name = std::move(other27.table_name);
  return *this;
}
void TGetTableMetricsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetTableMetricsParams(";
  out << "table_name=" << to_string(table_name);
  out << ")";
}


TGetTableMetricsResponse::~TGetTableMetricsResponse() throw() {
}


void TGetTableMetricsResponse::__set_metrics(const std::string& val) {
  this->metrics = val;
}
std::ostream& operator<<(std::ostream& out, const TGetTableMetricsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetTableMetricsResponse &a, TGetTableMetricsResponse &b) {
  using ::std::swap;
  swap(a.metrics, b.metrics);
}

TGetTableMetricsResponse::TGetTableMetricsResponse(const TGetTableMetricsResponse& other28) {
  metrics = other28.metrics;
}
TGetTableMetricsResponse::TGetTableMetricsResponse( TGetTableMetricsResponse&& other29) {
  metrics = std::move(other29.metrics);
}
TGetTableMetricsResponse& TGetTableMetricsResponse::operator=(const TGetTableMetricsResponse& other30) {
  metrics = other30.metrics;
  return *this;
}
TGetTableMetricsResponse& TGetTableMetricsResponse::operator=(TGetTableMetricsResponse&& other31) {
  metrics = std::move(other31.metrics);
  return *this;
}
void TGetTableMetricsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetTableMetricsResponse(";
  out << "metrics=" << to_string(metrics);
  out << ")";
}


TGetCatalogMetricsResult::~TGetCatalogMetricsResult() throw() {
}


void TGetCatalogMetricsResult::__set_num_dbs(const int32_t val) {
  this->num_dbs = val;
}

void TGetCatalogMetricsResult::__set_num_tables(const int32_t val) {
  this->num_tables = val;
}

void TGetCatalogMetricsResult::__set_cache_eviction_count(const int64_t val) {
  this->cache_eviction_count = val;
__isset.cache_eviction_count = true;
}

void TGetCatalogMetricsResult::__set_cache_hit_count(const int64_t val) {
  this->cache_hit_count = val;
__isset.cache_hit_count = true;
}

void TGetCatalogMetricsResult::__set_cache_load_count(const int64_t val) {
  this->cache_load_count = val;
__isset.cache_load_count = true;
}

void TGetCatalogMetricsResult::__set_cache_load_exception_count(const int64_t val) {
  this->cache_load_exception_count = val;
__isset.cache_load_exception_count = true;
}

void TGetCatalogMetricsResult::__set_cache_load_success_count(const int64_t val) {
  this->cache_load_success_count = val;
__isset.cache_load_success_count = true;
}

void TGetCatalogMetricsResult::__set_cache_miss_count(const int64_t val) {
  this->cache_miss_count = val;
__isset.cache_miss_count = true;
}

void TGetCatalogMetricsResult::__set_cache_request_count(const int64_t val) {
  this->cache_request_count = val;
__isset.cache_request_count = true;
}

void TGetCatalogMetricsResult::__set_cache_total_load_time(const int64_t val) {
  this->cache_total_load_time = val;
__isset.cache_total_load_time = true;
}

void TGetCatalogMetricsResult::__set_cache_avg_load_time(const double val) {
  this->cache_avg_load_time = val;
__isset.cache_avg_load_time = true;
}

void TGetCatalogMetricsResult::__set_cache_hit_rate(const double val) {
  this->cache_hit_rate = val;
__isset.cache_hit_rate = true;
}

void TGetCatalogMetricsResult::__set_cache_load_exception_rate(const double val) {
  this->cache_load_exception_rate = val;
__isset.cache_load_exception_rate = true;
}

void TGetCatalogMetricsResult::__set_cache_miss_rate(const double val) {
  this->cache_miss_rate = val;
__isset.cache_miss_rate = true;
}
std::ostream& operator<<(std::ostream& out, const TGetCatalogMetricsResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetCatalogMetricsResult &a, TGetCatalogMetricsResult &b) {
  using ::std::swap;
  swap(a.num_dbs, b.num_dbs);
  swap(a.num_tables, b.num_tables);
  swap(a.cache_eviction_count, b.cache_eviction_count);
  swap(a.cache_hit_count, b.cache_hit_count);
  swap(a.cache_load_count, b.cache_load_count);
  swap(a.cache_load_exception_count, b.cache_load_exception_count);
  swap(a.cache_load_success_count, b.cache_load_success_count);
  swap(a.cache_miss_count, b.cache_miss_count);
  swap(a.cache_request_count, b.cache_request_count);
  swap(a.cache_total_load_time, b.cache_total_load_time);
  swap(a.cache_avg_load_time, b.cache_avg_load_time);
  swap(a.cache_hit_rate, b.cache_hit_rate);
  swap(a.cache_load_exception_rate, b.cache_load_exception_rate);
  swap(a.cache_miss_rate, b.cache_miss_rate);
  swap(a.__isset, b.__isset);
}

TGetCatalogMetricsResult::TGetCatalogMetricsResult(const TGetCatalogMetricsResult& other32) {
  num_dbs = other32.num_dbs;
  num_tables = other32.num_tables;
  cache_eviction_count = other32.cache_eviction_count;
  cache_hit_count = other32.cache_hit_count;
  cache_load_count = other32.cache_load_count;
  cache_load_exception_count = other32.cache_load_exception_count;
  cache_load_success_count = other32.cache_load_success_count;
  cache_miss_count = other32.cache_miss_count;
  cache_request_count = other32.cache_request_count;
  cache_total_load_time = other32.cache_total_load_time;
  cache_avg_load_time = other32.cache_avg_load_time;
  cache_hit_rate = other32.cache_hit_rate;
  cache_load_exception_rate = other32.cache_load_exception_rate;
  cache_miss_rate = other32.cache_miss_rate;
  __isset = other32.__isset;
}
TGetCatalogMetricsResult::TGetCatalogMetricsResult( TGetCatalogMetricsResult&& other33) {
  num_dbs = std::move(other33.num_dbs);
  num_tables = std::move(other33.num_tables);
  cache_eviction_count = std::move(other33.cache_eviction_count);
  cache_hit_count = std::move(other33.cache_hit_count);
  cache_load_count = std::move(other33.cache_load_count);
  cache_load_exception_count = std::move(other33.cache_load_exception_count);
  cache_load_success_count = std::move(other33.cache_load_success_count);
  cache_miss_count = std::move(other33.cache_miss_count);
  cache_request_count = std::move(other33.cache_request_count);
  cache_total_load_time = std::move(other33.cache_total_load_time);
  cache_avg_load_time = std::move(other33.cache_avg_load_time);
  cache_hit_rate = std::move(other33.cache_hit_rate);
  cache_load_exception_rate = std::move(other33.cache_load_exception_rate);
  cache_miss_rate = std::move(other33.cache_miss_rate);
  __isset = std::move(other33.__isset);
}
TGetCatalogMetricsResult& TGetCatalogMetricsResult::operator=(const TGetCatalogMetricsResult& other34) {
  num_dbs = other34.num_dbs;
  num_tables = other34.num_tables;
  cache_eviction_count = other34.cache_eviction_count;
  cache_hit_count = other34.cache_hit_count;
  cache_load_count = other34.cache_load_count;
  cache_load_exception_count = other34.cache_load_exception_count;
  cache_load_success_count = other34.cache_load_success_count;
  cache_miss_count = other34.cache_miss_count;
  cache_request_count = other34.cache_request_count;
  cache_total_load_time = other34.cache_total_load_time;
  cache_avg_load_time = other34.cache_avg_load_time;
  cache_hit_rate = other34.cache_hit_rate;
  cache_load_exception_rate = other34.cache_load_exception_rate;
  cache_miss_rate = other34.cache_miss_rate;
  __isset = other34.__isset;
  return *this;
}
TGetCatalogMetricsResult& TGetCatalogMetricsResult::operator=(TGetCatalogMetricsResult&& other35) {
  num_dbs = std::move(other35.num_dbs);
  num_tables = std::move(other35.num_tables);
  cache_eviction_count = std::move(other35.cache_eviction_count);
  cache_hit_count = std::move(other35.cache_hit_count);
  cache_load_count = std::move(other35.cache_load_count);
  cache_load_exception_count = std::move(other35.cache_load_exception_count);
  cache_load_success_count = std::move(other35.cache_load_success_count);
  cache_miss_count = std::move(other35.cache_miss_count);
  cache_request_count = std::move(other35.cache_request_count);
  cache_total_load_time = std::move(other35.cache_total_load_time);
  cache_avg_load_time = std::move(other35.cache_avg_load_time);
  cache_hit_rate = std::move(other35.cache_hit_rate);
  cache_load_exception_rate = std::move(other35.cache_load_exception_rate);
  cache_miss_rate = std::move(other35.cache_miss_rate);
  __isset = std::move(other35.__isset);
  return *this;
}
void TGetCatalogMetricsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetCatalogMetricsResult(";
  out << "num_dbs=" << to_string(num_dbs);
  out << ", " << "num_tables=" << to_string(num_tables);
  out << ", " << "cache_eviction_count="; (__isset.cache_eviction_count ? (out << to_string(cache_eviction_count)) : (out << "<null>"));
  out << ", " << "cache_hit_count="; (__isset.cache_hit_count ? (out << to_string(cache_hit_count)) : (out << "<null>"));
  out << ", " << "cache_load_count="; (__isset.cache_load_count ? (out << to_string(cache_load_count)) : (out << "<null>"));
  out << ", " << "cache_load_exception_count="; (__isset.cache_load_exception_count ? (out << to_string(cache_load_exception_count)) : (out << "<null>"));
  out << ", " << "cache_load_success_count="; (__isset.cache_load_success_count ? (out << to_string(cache_load_success_count)) : (out << "<null>"));
  out << ", " << "cache_miss_count="; (__isset.cache_miss_count ? (out << to_string(cache_miss_count)) : (out << "<null>"));
  out << ", " << "cache_request_count="; (__isset.cache_request_count ? (out << to_string(cache_request_count)) : (out << "<null>"));
  out << ", " << "cache_total_load_time="; (__isset.cache_total_load_time ? (out << to_string(cache_total_load_time)) : (out << "<null>"));
  out << ", " << "cache_avg_load_time="; (__isset.cache_avg_load_time ? (out << to_string(cache_avg_load_time)) : (out << "<null>"));
  out << ", " << "cache_hit_rate="; (__isset.cache_hit_rate ? (out << to_string(cache_hit_rate)) : (out << "<null>"));
  out << ", " << "cache_load_exception_rate="; (__isset.cache_load_exception_rate ? (out << to_string(cache_load_exception_rate)) : (out << "<null>"));
  out << ", " << "cache_miss_rate="; (__isset.cache_miss_rate ? (out << to_string(cache_miss_rate)) : (out << "<null>"));
  out << ")";
}


TGetDbsParams::~TGetDbsParams() throw() {
}


void TGetDbsParams::__set_pattern(const std::string& val) {
  this->pattern = val;
__isset.pattern = true;
}

void TGetDbsParams::__set_session(const  ::impala::TSessionState& val) {
  this->session = val;
__isset.session = true;
}
std::ostream& operator<<(std::ostream& out, const TGetDbsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetDbsParams &a, TGetDbsParams &b) {
  using ::std::swap;
  swap(a.pattern, b.pattern);
  swap(a.session, b.session);
  swap(a.__isset, b.__isset);
}

TGetDbsParams::TGetDbsParams(const TGetDbsParams& other36) {
  pattern = other36.pattern;
  session = other36.session;
  __isset = other36.__isset;
}
TGetDbsParams::TGetDbsParams( TGetDbsParams&& other37) {
  pattern = std::move(other37.pattern);
  session = std::move(other37.session);
  __isset = std::move(other37.__isset);
}
TGetDbsParams& TGetDbsParams::operator=(const TGetDbsParams& other38) {
  pattern = other38.pattern;
  session = other38.session;
  __isset = other38.__isset;
  return *this;
}
TGetDbsParams& TGetDbsParams::operator=(TGetDbsParams&& other39) {
  pattern = std::move(other39.pattern);
  session = std::move(other39.session);
  __isset = std::move(other39.__isset);
  return *this;
}
void TGetDbsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetDbsParams(";
  out << "pattern="; (__isset.pattern ? (out << to_string(pattern)) : (out << "<null>"));
  out << ", " << "session="; (__isset.session ? (out << to_string(session)) : (out << "<null>"));
  out << ")";
}


TGetDbsResult::~TGetDbsResult() throw() {
}


void TGetDbsResult::__set_dbs(const std::vector< ::impala::TDatabase> & val) {
  this->dbs = val;
}
std::ostream& operator<<(std::ostream& out, const TGetDbsResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetDbsResult &a, TGetDbsResult &b) {
  using ::std::swap;
  swap(a.dbs, b.dbs);
  swap(a.__isset, b.__isset);
}

TGetDbsResult::TGetDbsResult(const TGetDbsResult& other46) {
  dbs = other46.dbs;
  __isset = other46.__isset;
}
TGetDbsResult::TGetDbsResult( TGetDbsResult&& other47) {
  dbs = std::move(other47.dbs);
  __isset = std::move(other47.__isset);
}
TGetDbsResult& TGetDbsResult::operator=(const TGetDbsResult& other48) {
  dbs = other48.dbs;
  __isset = other48.__isset;
  return *this;
}
TGetDbsResult& TGetDbsResult::operator=(TGetDbsResult&& other49) {
  dbs = std::move(other49.dbs);
  __isset = std::move(other49.__isset);
  return *this;
}
void TGetDbsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetDbsResult(";
  out << "dbs=" << to_string(dbs);
  out << ")";
}


TGetDataSrcsParams::~TGetDataSrcsParams() throw() {
}


void TGetDataSrcsParams::__set_pattern(const std::string& val) {
  this->pattern = val;
__isset.pattern = true;
}
std::ostream& operator<<(std::ostream& out, const TGetDataSrcsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetDataSrcsParams &a, TGetDataSrcsParams &b) {
  using ::std::swap;
  swap(a.pattern, b.pattern);
  swap(a.__isset, b.__isset);
}

TGetDataSrcsParams::TGetDataSrcsParams(const TGetDataSrcsParams& other50) {
  pattern = other50.pattern;
  __isset = other50.__isset;
}
TGetDataSrcsParams::TGetDataSrcsParams( TGetDataSrcsParams&& other51) {
  pattern = std::move(other51.pattern);
  __isset = std::move(other51.__isset);
}
TGetDataSrcsParams& TGetDataSrcsParams::operator=(const TGetDataSrcsParams& other52) {
  pattern = other52.pattern;
  __isset = other52.__isset;
  return *this;
}
TGetDataSrcsParams& TGetDataSrcsParams::operator=(TGetDataSrcsParams&& other53) {
  pattern = std::move(other53.pattern);
  __isset = std::move(other53.__isset);
  return *this;
}
void TGetDataSrcsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetDataSrcsParams(";
  out << "pattern="; (__isset.pattern ? (out << to_string(pattern)) : (out << "<null>"));
  out << ")";
}


TGetDataSrcsResult::~TGetDataSrcsResult() throw() {
}


void TGetDataSrcsResult::__set_data_src_names(const std::vector<std::string> & val) {
  this->data_src_names = val;
}

void TGetDataSrcsResult::__set_locations(const std::vector<std::string> & val) {
  this->locations = val;
}

void TGetDataSrcsResult::__set_class_names(const std::vector<std::string> & val) {
  this->class_names = val;
}

void TGetDataSrcsResult::__set_api_versions(const std::vector<std::string> & val) {
  this->api_versions = val;
}
std::ostream& operator<<(std::ostream& out, const TGetDataSrcsResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetDataSrcsResult &a, TGetDataSrcsResult &b) {
  using ::std::swap;
  swap(a.data_src_names, b.data_src_names);
  swap(a.locations, b.locations);
  swap(a.class_names, b.class_names);
  swap(a.api_versions, b.api_versions);
}

TGetDataSrcsResult::TGetDataSrcsResult(const TGetDataSrcsResult& other78) {
  data_src_names = other78.data_src_names;
  locations = other78.locations;
  class_names = other78.class_names;
  api_versions = other78.api_versions;
}
TGetDataSrcsResult::TGetDataSrcsResult( TGetDataSrcsResult&& other79) {
  data_src_names = std::move(other79.data_src_names);
  locations = std::move(other79.locations);
  class_names = std::move(other79.class_names);
  api_versions = std::move(other79.api_versions);
}
TGetDataSrcsResult& TGetDataSrcsResult::operator=(const TGetDataSrcsResult& other80) {
  data_src_names = other80.data_src_names;
  locations = other80.locations;
  class_names = other80.class_names;
  api_versions = other80.api_versions;
  return *this;
}
TGetDataSrcsResult& TGetDataSrcsResult::operator=(TGetDataSrcsResult&& other81) {
  data_src_names = std::move(other81.data_src_names);
  locations = std::move(other81.locations);
  class_names = std::move(other81.class_names);
  api_versions = std::move(other81.api_versions);
  return *this;
}
void TGetDataSrcsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetDataSrcsResult(";
  out << "data_src_names=" << to_string(data_src_names);
  out << ", " << "locations=" << to_string(locations);
  out << ", " << "class_names=" << to_string(class_names);
  out << ", " << "api_versions=" << to_string(api_versions);
  out << ")";
}


TDescribeDbParams::~TDescribeDbParams() throw() {
}


void TDescribeDbParams::__set_db(const std::string& val) {
  this->db = val;
}

void TDescribeDbParams::__set_output_style(const TDescribeOutputStyle::type val) {
  this->output_style = val;
}
std::ostream& operator<<(std::ostream& out, const TDescribeDbParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDescribeDbParams &a, TDescribeDbParams &b) {
  using ::std::swap;
  swap(a.db, b.db);
  swap(a.output_style, b.output_style);
}

TDescribeDbParams::TDescribeDbParams(const TDescribeDbParams& other83) {
  db = other83.db;
  output_style = other83.output_style;
}
TDescribeDbParams::TDescribeDbParams( TDescribeDbParams&& other84) {
  db = std::move(other84.db);
  output_style = std::move(other84.output_style);
}
TDescribeDbParams& TDescribeDbParams::operator=(const TDescribeDbParams& other85) {
  db = other85.db;
  output_style = other85.output_style;
  return *this;
}
TDescribeDbParams& TDescribeDbParams::operator=(TDescribeDbParams&& other86) {
  db = std::move(other86.db);
  output_style = std::move(other86.output_style);
  return *this;
}
void TDescribeDbParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDescribeDbParams(";
  out << "db=" << to_string(db);
  out << ", " << "output_style=" << to_string(output_style);
  out << ")";
}


TDescribeTableParams::~TDescribeTableParams() throw() {
}


void TDescribeTableParams::__set_output_style(const TDescribeOutputStyle::type val) {
  this->output_style = val;
}

void TDescribeTableParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
__isset.table_name = true;
}

void TDescribeTableParams::__set_result_struct(const  ::impala::TColumnType& val) {
  this->result_struct = val;
__isset.result_struct = true;
}

void TDescribeTableParams::__set_session(const  ::impala::TSessionState& val) {
  this->session = val;
__isset.session = true;
}
std::ostream& operator<<(std::ostream& out, const TDescribeTableParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDescribeTableParams &a, TDescribeTableParams &b) {
  using ::std::swap;
  swap(a.output_style, b.output_style);
  swap(a.table_name, b.table_name);
  swap(a.result_struct, b.result_struct);
  swap(a.session, b.session);
  swap(a.__isset, b.__isset);
}

TDescribeTableParams::TDescribeTableParams(const TDescribeTableParams& other88) {
  output_style = other88.output_style;
  table_name = other88.table_name;
  result_struct = other88.result_struct;
  session = other88.session;
  __isset = other88.__isset;
}
TDescribeTableParams::TDescribeTableParams( TDescribeTableParams&& other89) {
  output_style = std::move(other89.output_style);
  table_name = std::move(other89.table_name);
  result_struct = std::move(other89.result_struct);
  session = std::move(other89.session);
  __isset = std::move(other89.__isset);
}
TDescribeTableParams& TDescribeTableParams::operator=(const TDescribeTableParams& other90) {
  output_style = other90.output_style;
  table_name = other90.table_name;
  result_struct = other90.result_struct;
  session = other90.session;
  __isset = other90.__isset;
  return *this;
}
TDescribeTableParams& TDescribeTableParams::operator=(TDescribeTableParams&& other91) {
  output_style = std::move(other91.output_style);
  table_name = std::move(other91.table_name);
  result_struct = std::move(other91.result_struct);
  session = std::move(other91.session);
  __isset = std::move(other91.__isset);
  return *this;
}
void TDescribeTableParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDescribeTableParams(";
  out << "output_style=" << to_string(output_style);
  out << ", " << "table_name="; (__isset.table_name ? (out << to_string(table_name)) : (out << "<null>"));
  out << ", " << "result_struct="; (__isset.result_struct ? (out << to_string(result_struct)) : (out << "<null>"));
  out << ", " << "session="; (__isset.session ? (out << to_string(session)) : (out << "<null>"));
  out << ")";
}


TDescribeResult::~TDescribeResult() throw() {
}


void TDescribeResult::__set_results(const std::vector< ::impala::TResultRow> & val) {
  this->results = val;
}
std::ostream& operator<<(std::ostream& out, const TDescribeResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDescribeResult &a, TDescribeResult &b) {
  using ::std::swap;
  swap(a.results, b.results);
}

TDescribeResult::TDescribeResult(const TDescribeResult& other98) {
  results = other98.results;
}
TDescribeResult::TDescribeResult( TDescribeResult&& other99) {
  results = std::move(other99.results);
}
TDescribeResult& TDescribeResult::operator=(const TDescribeResult& other100) {
  results = other100.results;
  return *this;
}
TDescribeResult& TDescribeResult::operator=(TDescribeResult&& other101) {
  results = std::move(other101.results);
  return *this;
}
void TDescribeResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDescribeResult(";
  out << "results=" << to_string(results);
  out << ")";
}


TShowDataSrcsParams::~TShowDataSrcsParams() throw() {
}


void TShowDataSrcsParams::__set_show_pattern(const std::string& val) {
  this->show_pattern = val;
__isset.show_pattern = true;
}
std::ostream& operator<<(std::ostream& out, const TShowDataSrcsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TShowDataSrcsParams &a, TShowDataSrcsParams &b) {
  using ::std::swap;
  swap(a.show_pattern, b.show_pattern);
  swap(a.__isset, b.__isset);
}

TShowDataSrcsParams::TShowDataSrcsParams(const TShowDataSrcsParams& other102) {
  show_pattern = other102.show_pattern;
  __isset = other102.__isset;
}
TShowDataSrcsParams::TShowDataSrcsParams( TShowDataSrcsParams&& other103) {
  show_pattern = std::move(other103.show_pattern);
  __isset = std::move(other103.__isset);
}
TShowDataSrcsParams& TShowDataSrcsParams::operator=(const TShowDataSrcsParams& other104) {
  show_pattern = other104.show_pattern;
  __isset = other104.__isset;
  return *this;
}
TShowDataSrcsParams& TShowDataSrcsParams::operator=(TShowDataSrcsParams&& other105) {
  show_pattern = std::move(other105.show_pattern);
  __isset = std::move(other105.__isset);
  return *this;
}
void TShowDataSrcsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TShowDataSrcsParams(";
  out << "show_pattern="; (__isset.show_pattern ? (out << to_string(show_pattern)) : (out << "<null>"));
  out << ")";
}


TShowDbsParams::~TShowDbsParams() throw() {
}


void TShowDbsParams::__set_show_pattern(const std::string& val) {
  this->show_pattern = val;
__isset.show_pattern = true;
}
std::ostream& operator<<(std::ostream& out, const TShowDbsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TShowDbsParams &a, TShowDbsParams &b) {
  using ::std::swap;
  swap(a.show_pattern, b.show_pattern);
  swap(a.__isset, b.__isset);
}

TShowDbsParams::TShowDbsParams(const TShowDbsParams& other106) {
  show_pattern = other106.show_pattern;
  __isset = other106.__isset;
}
TShowDbsParams::TShowDbsParams( TShowDbsParams&& other107) {
  show_pattern = std::move(other107.show_pattern);
  __isset = std::move(other107.__isset);
}
TShowDbsParams& TShowDbsParams::operator=(const TShowDbsParams& other108) {
  show_pattern = other108.show_pattern;
  __isset = other108.__isset;
  return *this;
}
TShowDbsParams& TShowDbsParams::operator=(TShowDbsParams&& other109) {
  show_pattern = std::move(other109.show_pattern);
  __isset = std::move(other109.__isset);
  return *this;
}
void TShowDbsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TShowDbsParams(";
  out << "show_pattern="; (__isset.show_pattern ? (out << to_string(show_pattern)) : (out << "<null>"));
  out << ")";
}


TShowStatsParams::~TShowStatsParams() throw() {
}


void TShowStatsParams::__set_op(const TShowStatsOp::type val) {
  this->op = val;
}

void TShowStatsParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TShowStatsParams::__set_show_column_minmax_stats(const bool val) {
  this->show_column_minmax_stats = val;
__isset.show_column_minmax_stats = true;
}
std::ostream& operator<<(std::ostream& out, const TShowStatsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TShowStatsParams &a, TShowStatsParams &b) {
  using ::std::swap;
  swap(a.op, b.op);
  swap(a.table_name, b.table_name);
  swap(a.show_column_minmax_stats, b.show_column_minmax_stats);
  swap(a.__isset, b.__isset);
}

TShowStatsParams::TShowStatsParams(const TShowStatsParams& other111) {
  op = other111.op;
  table_name = other111.table_name;
  show_column_minmax_stats = other111.show_column_minmax_stats;
  __isset = other111.__isset;
}
TShowStatsParams::TShowStatsParams( TShowStatsParams&& other112) {
  op = std::move(other112.op);
  table_name = std::move(other112.table_name);
  show_column_minmax_stats = std::move(other112.show_column_minmax_stats);
  __isset = std::move(other112.__isset);
}
TShowStatsParams& TShowStatsParams::operator=(const TShowStatsParams& other113) {
  op = other113.op;
  table_name = other113.table_name;
  show_column_minmax_stats = other113.show_column_minmax_stats;
  __isset = other113.__isset;
  return *this;
}
TShowStatsParams& TShowStatsParams::operator=(TShowStatsParams&& other114) {
  op = std::move(other114.op);
  table_name = std::move(other114.table_name);
  show_column_minmax_stats = std::move(other114.show_column_minmax_stats);
  __isset = std::move(other114.__isset);
  return *this;
}
void TShowStatsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TShowStatsParams(";
  out << "op=" << to_string(op);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "show_column_minmax_stats="; (__isset.show_column_minmax_stats ? (out << to_string(show_column_minmax_stats)) : (out << "<null>"));
  out << ")";
}


TDescribeHistoryParams::~TDescribeHistoryParams() throw() {
}


void TDescribeHistoryParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}
std::ostream& operator<<(std::ostream& out, const TDescribeHistoryParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDescribeHistoryParams &a, TDescribeHistoryParams &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.__isset, b.__isset);
}

TDescribeHistoryParams::TDescribeHistoryParams(const TDescribeHistoryParams& other115) {
  table_name = other115.table_name;
  __isset = other115.__isset;
}
TDescribeHistoryParams::TDescribeHistoryParams( TDescribeHistoryParams&& other116) {
  table_name = std::move(other116.table_name);
  __isset = std::move(other116.__isset);
}
TDescribeHistoryParams& TDescribeHistoryParams::operator=(const TDescribeHistoryParams& other117) {
  table_name = other117.table_name;
  __isset = other117.__isset;
  return *this;
}
TDescribeHistoryParams& TDescribeHistoryParams::operator=(TDescribeHistoryParams&& other118) {
  table_name = std::move(other118.table_name);
  __isset = std::move(other118.__isset);
  return *this;
}
void TDescribeHistoryParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDescribeHistoryParams(";
  out << "table_name=" << to_string(table_name);
  out << ")";
}


TShowFunctionsParams::~TShowFunctionsParams() throw() {
}


void TShowFunctionsParams::__set_category(const  ::impala::TFunctionCategory::type val) {
  this->category = val;
}

void TShowFunctionsParams::__set_db(const std::string& val) {
  this->db = val;
__isset.db = true;
}

void TShowFunctionsParams::__set_show_pattern(const std::string& val) {
  this->show_pattern = val;
__isset.show_pattern = true;
}
std::ostream& operator<<(std::ostream& out, const TShowFunctionsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TShowFunctionsParams &a, TShowFunctionsParams &b) {
  using ::std::swap;
  swap(a.category, b.category);
  swap(a.db, b.db);
  swap(a.show_pattern, b.show_pattern);
  swap(a.__isset, b.__isset);
}

TShowFunctionsParams::TShowFunctionsParams(const TShowFunctionsParams& other120) {
  category = other120.category;
  db = other120.db;
  show_pattern = other120.show_pattern;
  __isset = other120.__isset;
}
TShowFunctionsParams::TShowFunctionsParams( TShowFunctionsParams&& other121) {
  category = std::move(other121.category);
  db = std::move(other121.db);
  show_pattern = std::move(other121.show_pattern);
  __isset = std::move(other121.__isset);
}
TShowFunctionsParams& TShowFunctionsParams::operator=(const TShowFunctionsParams& other122) {
  category = other122.category;
  db = other122.db;
  show_pattern = other122.show_pattern;
  __isset = other122.__isset;
  return *this;
}
TShowFunctionsParams& TShowFunctionsParams::operator=(TShowFunctionsParams&& other123) {
  category = std::move(other123.category);
  db = std::move(other123.db);
  show_pattern = std::move(other123.show_pattern);
  __isset = std::move(other123.__isset);
  return *this;
}
void TShowFunctionsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TShowFunctionsParams(";
  out << "category=" << to_string(category);
  out << ", " << "db="; (__isset.db ? (out << to_string(db)) : (out << "<null>"));
  out << ", " << "show_pattern="; (__isset.show_pattern ? (out << to_string(show_pattern)) : (out << "<null>"));
  out << ")";
}


TShowTablesParams::~TShowTablesParams() throw() {
}


void TShowTablesParams::__set_db(const std::string& val) {
  this->db = val;
__isset.db = true;
}

void TShowTablesParams::__set_show_pattern(const std::string& val) {
  this->show_pattern = val;
__isset.show_pattern = true;
}
std::ostream& operator<<(std::ostream& out, const TShowTablesParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TShowTablesParams &a, TShowTablesParams &b) {
  using ::std::swap;
  swap(a.db, b.db);
  swap(a.show_pattern, b.show_pattern);
  swap(a.__isset, b.__isset);
}

TShowTablesParams::TShowTablesParams(const TShowTablesParams& other124) {
  db = other124.db;
  show_pattern = other124.show_pattern;
  __isset = other124.__isset;
}
TShowTablesParams::TShowTablesParams( TShowTablesParams&& other125) {
  db = std::move(other125.db);
  show_pattern = std::move(other125.show_pattern);
  __isset = std::move(other125.__isset);
}
TShowTablesParams& TShowTablesParams::operator=(const TShowTablesParams& other126) {
  db = other126.db;
  show_pattern = other126.show_pattern;
  __isset = other126.__isset;
  return *this;
}
TShowTablesParams& TShowTablesParams::operator=(TShowTablesParams&& other127) {
  db = std::move(other127.db);
  show_pattern = std::move(other127.show_pattern);
  __isset = std::move(other127.__isset);
  return *this;
}
void TShowTablesParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TShowTablesParams(";
  out << "db="; (__isset.db ? (out << to_string(db)) : (out << "<null>"));
  out << ", " << "show_pattern="; (__isset.show_pattern ? (out << to_string(show_pattern)) : (out << "<null>"));
  out << ")";
}


TShowFilesParams::~TShowFilesParams() throw() {
}


void TShowFilesParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TShowFilesParams::__set_partition_set(const std::vector<std::vector< ::impala::TPartitionKeyValue> > & val) {
  this->partition_set = val;
__isset.partition_set = true;
}
std::ostream& operator<<(std::ostream& out, const TShowFilesParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TShowFilesParams &a, TShowFilesParams &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.partition_set, b.partition_set);
  swap(a.__isset, b.__isset);
}

TShowFilesParams::TShowFilesParams(const TShowFilesParams& other140) {
  table_name = other140.table_name;
  partition_set = other140.partition_set;
  __isset = other140.__isset;
}
TShowFilesParams::TShowFilesParams( TShowFilesParams&& other141) {
  table_name = std::move(other141.table_name);
  partition_set = std::move(other141.partition_set);
  __isset = std::move(other141.__isset);
}
TShowFilesParams& TShowFilesParams::operator=(const TShowFilesParams& other142) {
  table_name = other142.table_name;
  partition_set = other142.partition_set;
  __isset = other142.__isset;
  return *this;
}
TShowFilesParams& TShowFilesParams::operator=(TShowFilesParams&& other143) {
  table_name = std::move(other143.table_name);
  partition_set = std::move(other143.partition_set);
  __isset = std::move(other143.__isset);
  return *this;
}
void TShowFilesParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TShowFilesParams(";
  out << "table_name=" << to_string(table_name);
  out << ", " << "partition_set="; (__isset.partition_set ? (out << to_string(partition_set)) : (out << "<null>"));
  out << ")";
}


TShowRolesParams::~TShowRolesParams() throw() {
}


void TShowRolesParams::__set_requesting_user(const std::string& val) {
  this->requesting_user = val;
__isset.requesting_user = true;
}

void TShowRolesParams::__set_is_show_current_roles(const bool val) {
  this->is_show_current_roles = val;
}

void TShowRolesParams::__set_grant_group(const std::string& val) {
  this->grant_group = val;
__isset.grant_group = true;
}
std::ostream& operator<<(std::ostream& out, const TShowRolesParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TShowRolesParams &a, TShowRolesParams &b) {
  using ::std::swap;
  swap(a.requesting_user, b.requesting_user);
  swap(a.is_show_current_roles, b.is_show_current_roles);
  swap(a.grant_group, b.grant_group);
  swap(a.__isset, b.__isset);
}

TShowRolesParams::TShowRolesParams(const TShowRolesParams& other144) {
  requesting_user = other144.requesting_user;
  is_show_current_roles = other144.is_show_current_roles;
  grant_group = other144.grant_group;
  __isset = other144.__isset;
}
TShowRolesParams::TShowRolesParams( TShowRolesParams&& other145) {
  requesting_user = std::move(other145.requesting_user);
  is_show_current_roles = std::move(other145.is_show_current_roles);
  grant_group = std::move(other145.grant_group);
  __isset = std::move(other145.__isset);
}
TShowRolesParams& TShowRolesParams::operator=(const TShowRolesParams& other146) {
  requesting_user = other146.requesting_user;
  is_show_current_roles = other146.is_show_current_roles;
  grant_group = other146.grant_group;
  __isset = other146.__isset;
  return *this;
}
TShowRolesParams& TShowRolesParams::operator=(TShowRolesParams&& other147) {
  requesting_user = std::move(other147.requesting_user);
  is_show_current_roles = std::move(other147.is_show_current_roles);
  grant_group = std::move(other147.grant_group);
  __isset = std::move(other147.__isset);
  return *this;
}
void TShowRolesParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TShowRolesParams(";
  out << "requesting_user="; (__isset.requesting_user ? (out << to_string(requesting_user)) : (out << "<null>"));
  out << ", " << "is_show_current_roles=" << to_string(is_show_current_roles);
  out << ", " << "grant_group="; (__isset.grant_group ? (out << to_string(grant_group)) : (out << "<null>"));
  out << ")";
}


TShowRolesResult::~TShowRolesResult() throw() {
}


void TShowRolesResult::__set_role_names(const std::vector<std::string> & val) {
  this->role_names = val;
}
std::ostream& operator<<(std::ostream& out, const TShowRolesResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TShowRolesResult &a, TShowRolesResult &b) {
  using ::std::swap;
  swap(a.role_names, b.role_names);
}

TShowRolesResult::TShowRolesResult(const TShowRolesResult& other154) {
  role_names = other154.role_names;
}
TShowRolesResult::TShowRolesResult( TShowRolesResult&& other155) {
  role_names = std::move(other155.role_names);
}
TShowRolesResult& TShowRolesResult::operator=(const TShowRolesResult& other156) {
  role_names = other156.role_names;
  return *this;
}
TShowRolesResult& TShowRolesResult::operator=(TShowRolesResult&& other157) {
  role_names = std::move(other157.role_names);
  return *this;
}
void TShowRolesResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TShowRolesResult(";
  out << "role_names=" << to_string(role_names);
  out << ")";
}


TGetTableHistoryResultItem::~TGetTableHistoryResultItem() throw() {
}


void TGetTableHistoryResultItem::__set_creation_time(const int64_t val) {
  this->creation_time = val;
}

void TGetTableHistoryResultItem::__set_snapshot_id(const int64_t val) {
  this->snapshot_id = val;
}

void TGetTableHistoryResultItem::__set_parent_id(const int64_t val) {
  this->parent_id = val;
__isset.parent_id = true;
}

void TGetTableHistoryResultItem::__set_is_current_ancestor(const bool val) {
  this->is_current_ancestor = val;
}
std::ostream& operator<<(std::ostream& out, const TGetTableHistoryResultItem& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetTableHistoryResultItem &a, TGetTableHistoryResultItem &b) {
  using ::std::swap;
  swap(a.creation_time, b.creation_time);
  swap(a.snapshot_id, b.snapshot_id);
  swap(a.parent_id, b.parent_id);
  swap(a.is_current_ancestor, b.is_current_ancestor);
  swap(a.__isset, b.__isset);
}

TGetTableHistoryResultItem::TGetTableHistoryResultItem(const TGetTableHistoryResultItem& other158) {
  creation_time = other158.creation_time;
  snapshot_id = other158.snapshot_id;
  parent_id = other158.parent_id;
  is_current_ancestor = other158.is_current_ancestor;
  __isset = other158.__isset;
}
TGetTableHistoryResultItem::TGetTableHistoryResultItem( TGetTableHistoryResultItem&& other159) {
  creation_time = std::move(other159.creation_time);
  snapshot_id = std::move(other159.snapshot_id);
  parent_id = std::move(other159.parent_id);
  is_current_ancestor = std::move(other159.is_current_ancestor);
  __isset = std::move(other159.__isset);
}
TGetTableHistoryResultItem& TGetTableHistoryResultItem::operator=(const TGetTableHistoryResultItem& other160) {
  creation_time = other160.creation_time;
  snapshot_id = other160.snapshot_id;
  parent_id = other160.parent_id;
  is_current_ancestor = other160.is_current_ancestor;
  __isset = other160.__isset;
  return *this;
}
TGetTableHistoryResultItem& TGetTableHistoryResultItem::operator=(TGetTableHistoryResultItem&& other161) {
  creation_time = std::move(other161.creation_time);
  snapshot_id = std::move(other161.snapshot_id);
  parent_id = std::move(other161.parent_id);
  is_current_ancestor = std::move(other161.is_current_ancestor);
  __isset = std::move(other161.__isset);
  return *this;
}
void TGetTableHistoryResultItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetTableHistoryResultItem(";
  out << "creation_time=" << to_string(creation_time);
  out << ", " << "snapshot_id=" << to_string(snapshot_id);
  out << ", " << "parent_id="; (__isset.parent_id ? (out << to_string(parent_id)) : (out << "<null>"));
  out << ", " << "is_current_ancestor=" << to_string(is_current_ancestor);
  out << ")";
}


TGetTableHistoryResult::~TGetTableHistoryResult() throw() {
}


void TGetTableHistoryResult::__set_result(const std::vector<TGetTableHistoryResultItem> & val) {
  this->result = val;
}
std::ostream& operator<<(std::ostream& out, const TGetTableHistoryResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetTableHistoryResult &a, TGetTableHistoryResult &b) {
  using ::std::swap;
  swap(a.result, b.result);
}

TGetTableHistoryResult::TGetTableHistoryResult(const TGetTableHistoryResult& other168) {
  result = other168.result;
}
TGetTableHistoryResult::TGetTableHistoryResult( TGetTableHistoryResult&& other169) {
  result = std::move(other169.result);
}
TGetTableHistoryResult& TGetTableHistoryResult::operator=(const TGetTableHistoryResult& other170) {
  result = other170.result;
  return *this;
}
TGetTableHistoryResult& TGetTableHistoryResult::operator=(TGetTableHistoryResult&& other171) {
  result = std::move(other171.result);
  return *this;
}
void TGetTableHistoryResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetTableHistoryResult(";
  out << "result=" << to_string(result);
  out << ")";
}


TShowGrantPrincipalParams::~TShowGrantPrincipalParams() throw() {
}


void TShowGrantPrincipalParams::__set_requesting_user(const std::string& val) {
  this->requesting_user = val;
__isset.requesting_user = true;
}

void TShowGrantPrincipalParams::__set_name(const std::string& val) {
  this->name = val;
}

void TShowGrantPrincipalParams::__set_principal_type(const  ::impala::TPrincipalType::type val) {
  this->principal_type = val;
}

void TShowGrantPrincipalParams::__set_privilege(const  ::impala::TPrivilege& val) {
  this->privilege = val;
__isset.privilege = true;
}
std::ostream& operator<<(std::ostream& out, const TShowGrantPrincipalParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TShowGrantPrincipalParams &a, TShowGrantPrincipalParams &b) {
  using ::std::swap;
  swap(a.requesting_user, b.requesting_user);
  swap(a.name, b.name);
  swap(a.principal_type, b.principal_type);
  swap(a.privilege, b.privilege);
  swap(a.__isset, b.__isset);
}

TShowGrantPrincipalParams::TShowGrantPrincipalParams(const TShowGrantPrincipalParams& other173) {
  requesting_user = other173.requesting_user;
  name = other173.name;
  principal_type = other173.principal_type;
  privilege = other173.privilege;
  __isset = other173.__isset;
}
TShowGrantPrincipalParams::TShowGrantPrincipalParams( TShowGrantPrincipalParams&& other174) {
  requesting_user = std::move(other174.requesting_user);
  name = std::move(other174.name);
  principal_type = std::move(other174.principal_type);
  privilege = std::move(other174.privilege);
  __isset = std::move(other174.__isset);
}
TShowGrantPrincipalParams& TShowGrantPrincipalParams::operator=(const TShowGrantPrincipalParams& other175) {
  requesting_user = other175.requesting_user;
  name = other175.name;
  principal_type = other175.principal_type;
  privilege = other175.privilege;
  __isset = other175.__isset;
  return *this;
}
TShowGrantPrincipalParams& TShowGrantPrincipalParams::operator=(TShowGrantPrincipalParams&& other176) {
  requesting_user = std::move(other176.requesting_user);
  name = std::move(other176.name);
  principal_type = std::move(other176.principal_type);
  privilege = std::move(other176.privilege);
  __isset = std::move(other176.__isset);
  return *this;
}
void TShowGrantPrincipalParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TShowGrantPrincipalParams(";
  out << "requesting_user="; (__isset.requesting_user ? (out << to_string(requesting_user)) : (out << "<null>"));
  out << ", " << "name=" << to_string(name);
  out << ", " << "principal_type=" << to_string(principal_type);
  out << ", " << "privilege="; (__isset.privilege ? (out << to_string(privilege)) : (out << "<null>"));
  out << ")";
}


TGetFunctionsParams::~TGetFunctionsParams() throw() {
}


void TGetFunctionsParams::__set_category(const  ::impala::TFunctionCategory::type val) {
  this->category = val;
}

void TGetFunctionsParams::__set_db(const std::string& val) {
  this->db = val;
__isset.db = true;
}

void TGetFunctionsParams::__set_pattern(const std::string& val) {
  this->pattern = val;
__isset.pattern = true;
}

void TGetFunctionsParams::__set_session(const  ::impala::TSessionState& val) {
  this->session = val;
__isset.session = true;
}
std::ostream& operator<<(std::ostream& out, const TGetFunctionsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetFunctionsParams &a, TGetFunctionsParams &b) {
  using ::std::swap;
  swap(a.category, b.category);
  swap(a.db, b.db);
  swap(a.pattern, b.pattern);
  swap(a.session, b.session);
  swap(a.__isset, b.__isset);
}

TGetFunctionsParams::TGetFunctionsParams(const TGetFunctionsParams& other178) {
  category = other178.category;
  db = other178.db;
  pattern = other178.pattern;
  session = other178.session;
  __isset = other178.__isset;
}
TGetFunctionsParams::TGetFunctionsParams( TGetFunctionsParams&& other179) {
  category = std::move(other179.category);
  db = std::move(other179.db);
  pattern = std::move(other179.pattern);
  session = std::move(other179.session);
  __isset = std::move(other179.__isset);
}
TGetFunctionsParams& TGetFunctionsParams::operator=(const TGetFunctionsParams& other180) {
  category = other180.category;
  db = other180.db;
  pattern = other180.pattern;
  session = other180.session;
  __isset = other180.__isset;
  return *this;
}
TGetFunctionsParams& TGetFunctionsParams::operator=(TGetFunctionsParams&& other181) {
  category = std::move(other181.category);
  db = std::move(other181.db);
  pattern = std::move(other181.pattern);
  session = std::move(other181.session);
  __isset = std::move(other181.__isset);
  return *this;
}
void TGetFunctionsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetFunctionsParams(";
  out << "category=" << to_string(category);
  out << ", " << "db="; (__isset.db ? (out << to_string(db)) : (out << "<null>"));
  out << ", " << "pattern="; (__isset.pattern ? (out << to_string(pattern)) : (out << "<null>"));
  out << ", " << "session="; (__isset.session ? (out << to_string(session)) : (out << "<null>"));
  out << ")";
}


TGetFunctionsResult::~TGetFunctionsResult() throw() {
}


void TGetFunctionsResult::__set_fn_signatures(const std::vector<std::string> & val) {
  this->fn_signatures = val;
}

void TGetFunctionsResult::__set_fn_ret_types(const std::vector<std::string> & val) {
  this->fn_ret_types = val;
}

void TGetFunctionsResult::__set_fn_binary_types(const std::vector<std::string> & val) {
  this->fn_binary_types = val;
}

void TGetFunctionsResult::__set_fn_persistence(const std::vector<std::string> & val) {
  this->fn_persistence = val;
}
std::ostream& operator<<(std::ostream& out, const TGetFunctionsResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetFunctionsResult &a, TGetFunctionsResult &b) {
  using ::std::swap;
  swap(a.fn_signatures, b.fn_signatures);
  swap(a.fn_ret_types, b.fn_ret_types);
  swap(a.fn_binary_types, b.fn_binary_types);
  swap(a.fn_persistence, b.fn_persistence);
  swap(a.__isset, b.__isset);
}

TGetFunctionsResult::TGetFunctionsResult(const TGetFunctionsResult& other206) {
  fn_signatures = other206.fn_signatures;
  fn_ret_types = other206.fn_ret_types;
  fn_binary_types = other206.fn_binary_types;
  fn_persistence = other206.fn_persistence;
  __isset = other206.__isset;
}
TGetFunctionsResult::TGetFunctionsResult( TGetFunctionsResult&& other207) {
  fn_signatures = std::move(other207.fn_signatures);
  fn_ret_types = std::move(other207.fn_ret_types);
  fn_binary_types = std::move(other207.fn_binary_types);
  fn_persistence = std::move(other207.fn_persistence);
  __isset = std::move(other207.__isset);
}
TGetFunctionsResult& TGetFunctionsResult::operator=(const TGetFunctionsResult& other208) {
  fn_signatures = other208.fn_signatures;
  fn_ret_types = other208.fn_ret_types;
  fn_binary_types = other208.fn_binary_types;
  fn_persistence = other208.fn_persistence;
  __isset = other208.__isset;
  return *this;
}
TGetFunctionsResult& TGetFunctionsResult::operator=(TGetFunctionsResult&& other209) {
  fn_signatures = std::move(other209.fn_signatures);
  fn_ret_types = std::move(other209.fn_ret_types);
  fn_binary_types = std::move(other209.fn_binary_types);
  fn_persistence = std::move(other209.fn_persistence);
  __isset = std::move(other209.__isset);
  return *this;
}
void TGetFunctionsResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetFunctionsResult(";
  out << "fn_signatures=" << to_string(fn_signatures);
  out << ", " << "fn_ret_types=" << to_string(fn_ret_types);
  out << ", " << "fn_binary_types=" << to_string(fn_binary_types);
  out << ", " << "fn_persistence=" << to_string(fn_persistence);
  out << ")";
}


TUseDbParams::~TUseDbParams() throw() {
}


void TUseDbParams::__set_db(const std::string& val) {
  this->db = val;
}
std::ostream& operator<<(std::ostream& out, const TUseDbParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TUseDbParams &a, TUseDbParams &b) {
  using ::std::swap;
  swap(a.db, b.db);
}

TUseDbParams::TUseDbParams(const TUseDbParams& other210) {
  db = other210.db;
}
TUseDbParams::TUseDbParams( TUseDbParams&& other211) {
  db = std::move(other211.db);
}
TUseDbParams& TUseDbParams::operator=(const TUseDbParams& other212) {
  db = other212.db;
  return *this;
}
TUseDbParams& TUseDbParams::operator=(TUseDbParams&& other213) {
  db = std::move(other213.db);
  return *this;
}
void TUseDbParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TUseDbParams(";
  out << "db=" << to_string(db);
  out << ")";
}


TExplainResult::~TExplainResult() throw() {
}


void TExplainResult::__set_results(const std::vector< ::impala::TResultRow> & val) {
  this->results = val;
}
std::ostream& operator<<(std::ostream& out, const TExplainResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TExplainResult &a, TExplainResult &b) {
  using ::std::swap;
  swap(a.results, b.results);
}

TExplainResult::TExplainResult(const TExplainResult& other220) {
  results = other220.results;
}
TExplainResult::TExplainResult( TExplainResult&& other221) {
  results = std::move(other221.results);
}
TExplainResult& TExplainResult::operator=(const TExplainResult& other222) {
  results = other222.results;
  return *this;
}
TExplainResult& TExplainResult::operator=(TExplainResult&& other223) {
  results = std::move(other223.results);
  return *this;
}
void TExplainResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TExplainResult(";
  out << "results=" << to_string(results);
  out << ")";
}


TLoadDataReq::~TLoadDataReq() throw() {
}


void TLoadDataReq::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TLoadDataReq::__set_source_path(const std::string& val) {
  this->source_path = val;
}

void TLoadDataReq::__set_overwrite(const bool val) {
  this->overwrite = val;
}

void TLoadDataReq::__set_partition_spec(const std::vector< ::impala::TPartitionKeyValue> & val) {
  this->partition_spec = val;
__isset.partition_spec = true;
}
std::ostream& operator<<(std::ostream& out, const TLoadDataReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TLoadDataReq &a, TLoadDataReq &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.source_path, b.source_path);
  swap(a.overwrite, b.overwrite);
  swap(a.partition_spec, b.partition_spec);
  swap(a.__isset, b.__isset);
}

TLoadDataReq::TLoadDataReq(const TLoadDataReq& other230) {
  table_name = other230.table_name;
  source_path = other230.source_path;
  overwrite = other230.overwrite;
  partition_spec = other230.partition_spec;
  __isset = other230.__isset;
}
TLoadDataReq::TLoadDataReq( TLoadDataReq&& other231) {
  table_name = std::move(other231.table_name);
  source_path = std::move(other231.source_path);
  overwrite = std::move(other231.overwrite);
  partition_spec = std::move(other231.partition_spec);
  __isset = std::move(other231.__isset);
}
TLoadDataReq& TLoadDataReq::operator=(const TLoadDataReq& other232) {
  table_name = other232.table_name;
  source_path = other232.source_path;
  overwrite = other232.overwrite;
  partition_spec = other232.partition_spec;
  __isset = other232.__isset;
  return *this;
}
TLoadDataReq& TLoadDataReq::operator=(TLoadDataReq&& other233) {
  table_name = std::move(other233.table_name);
  source_path = std::move(other233.source_path);
  overwrite = std::move(other233.overwrite);
  partition_spec = std::move(other233.partition_spec);
  __isset = std::move(other233.__isset);
  return *this;
}
void TLoadDataReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TLoadDataReq(";
  out << "table_name=" << to_string(table_name);
  out << ", " << "source_path=" << to_string(source_path);
  out << ", " << "overwrite=" << to_string(overwrite);
  out << ", " << "partition_spec="; (__isset.partition_spec ? (out << to_string(partition_spec)) : (out << "<null>"));
  out << ")";
}


TLoadDataResp::~TLoadDataResp() throw() {
}


void TLoadDataResp::__set_load_summary(const  ::impala::TResultRow& val) {
  this->load_summary = val;
}
std::ostream& operator<<(std::ostream& out, const TLoadDataResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TLoadDataResp &a, TLoadDataResp &b) {
  using ::std::swap;
  swap(a.load_summary, b.load_summary);
}

TLoadDataResp::TLoadDataResp(const TLoadDataResp& other234) {
  load_summary = other234.load_summary;
}
TLoadDataResp::TLoadDataResp( TLoadDataResp&& other235) {
  load_summary = std::move(other235.load_summary);
}
TLoadDataResp& TLoadDataResp::operator=(const TLoadDataResp& other236) {
  load_summary = other236.load_summary;
  return *this;
}
TLoadDataResp& TLoadDataResp::operator=(TLoadDataResp&& other237) {
  load_summary = std::move(other237.load_summary);
  return *this;
}
void TLoadDataResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TLoadDataResp(";
  out << "load_summary=" << to_string(load_summary);
  out << ")";
}


TCatalogOpRequest::~TCatalogOpRequest() throw() {
}


void TCatalogOpRequest::__set_op_type(const TCatalogOpType::type val) {
  this->op_type = val;
}

void TCatalogOpRequest::__set_sync_ddl(const bool val) {
  this->sync_ddl = val;
}

void TCatalogOpRequest::__set_use_db_params(const TUseDbParams& val) {
  this->use_db_params = val;
__isset.use_db_params = true;
}

void TCatalogOpRequest::__set_describe_db_params(const TDescribeDbParams& val) {
  this->describe_db_params = val;
__isset.describe_db_params = true;
}

void TCatalogOpRequest::__set_describe_table_params(const TDescribeTableParams& val) {
  this->describe_table_params = val;
__isset.describe_table_params = true;
}

void TCatalogOpRequest::__set_show_dbs_params(const TShowDbsParams& val) {
  this->show_dbs_params = val;
__isset.show_dbs_params = true;
}

void TCatalogOpRequest::__set_show_tables_params(const TShowTablesParams& val) {
  this->show_tables_params = val;
__isset.show_tables_params = true;
}

void TCatalogOpRequest::__set_show_fns_params(const TShowFunctionsParams& val) {
  this->show_fns_params = val;
__isset.show_fns_params = true;
}

void TCatalogOpRequest::__set_show_data_srcs_params(const TShowDataSrcsParams& val) {
  this->show_data_srcs_params = val;
__isset.show_data_srcs_params = true;
}

void TCatalogOpRequest::__set_show_roles_params(const TShowRolesParams& val) {
  this->show_roles_params = val;
__isset.show_roles_params = true;
}

void TCatalogOpRequest::__set_show_grant_principal_params(const TShowGrantPrincipalParams& val) {
  this->show_grant_principal_params = val;
__isset.show_grant_principal_params = true;
}

void TCatalogOpRequest::__set_ddl_params(const  ::impala::TDdlExecRequest& val) {
  this->ddl_params = val;
__isset.ddl_params = true;
}

void TCatalogOpRequest::__set_reset_metadata_params(const  ::impala::TResetMetadataRequest& val) {
  this->reset_metadata_params = val;
__isset.reset_metadata_params = true;
}

void TCatalogOpRequest::__set_show_stats_params(const TShowStatsParams& val) {
  this->show_stats_params = val;
__isset.show_stats_params = true;
}

void TCatalogOpRequest::__set_show_create_table_params(const  ::impala::TTableName& val) {
  this->show_create_table_params = val;
__isset.show_create_table_params = true;
}

void TCatalogOpRequest::__set_show_files_params(const TShowFilesParams& val) {
  this->show_files_params = val;
__isset.show_files_params = true;
}

void TCatalogOpRequest::__set_lineage_graph(const  ::impala::TLineageGraph& val) {
  this->lineage_graph = val;
__isset.lineage_graph = true;
}

void TCatalogOpRequest::__set_show_create_function_params(const TGetFunctionsParams& val) {
  this->show_create_function_params = val;
__isset.show_create_function_params = true;
}

void TCatalogOpRequest::__set_describe_history_params(const TDescribeHistoryParams& val) {
  this->describe_history_params = val;
__isset.describe_history_params = true;
}
std::ostream& operator<<(std::ostream& out, const TCatalogOpRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCatalogOpRequest &a, TCatalogOpRequest &b) {
  using ::std::swap;
  swap(a.op_type, b.op_type);
  swap(a.sync_ddl, b.sync_ddl);
  swap(a.use_db_params, b.use_db_params);
  swap(a.describe_db_params, b.describe_db_params);
  swap(a.describe_table_params, b.describe_table_params);
  swap(a.show_dbs_params, b.show_dbs_params);
  swap(a.show_tables_params, b.show_tables_params);
  swap(a.show_fns_params, b.show_fns_params);
  swap(a.show_data_srcs_params, b.show_data_srcs_params);
  swap(a.show_roles_params, b.show_roles_params);
  swap(a.show_grant_principal_params, b.show_grant_principal_params);
  swap(a.ddl_params, b.ddl_params);
  swap(a.reset_metadata_params, b.reset_metadata_params);
  swap(a.show_stats_params, b.show_stats_params);
  swap(a.show_create_table_params, b.show_create_table_params);
  swap(a.show_files_params, b.show_files_params);
  swap(a.lineage_graph, b.lineage_graph);
  swap(a.show_create_function_params, b.show_create_function_params);
  swap(a.describe_history_params, b.describe_history_params);
  swap(a.__isset, b.__isset);
}

TCatalogOpRequest::TCatalogOpRequest(const TCatalogOpRequest& other239) {
  op_type = other239.op_type;
  sync_ddl = other239.sync_ddl;
  use_db_params = other239.use_db_params;
  describe_db_params = other239.describe_db_params;
  describe_table_params = other239.describe_table_params;
  show_dbs_params = other239.show_dbs_params;
  show_tables_params = other239.show_tables_params;
  show_fns_params = other239.show_fns_params;
  show_data_srcs_params = other239.show_data_srcs_params;
  show_roles_params = other239.show_roles_params;
  show_grant_principal_params = other239.show_grant_principal_params;
  ddl_params = other239.ddl_params;
  reset_metadata_params = other239.reset_metadata_params;
  show_stats_params = other239.show_stats_params;
  show_create_table_params = other239.show_create_table_params;
  show_files_params = other239.show_files_params;
  lineage_graph = other239.lineage_graph;
  show_create_function_params = other239.show_create_function_params;
  describe_history_params = other239.describe_history_params;
  __isset = other239.__isset;
}
TCatalogOpRequest::TCatalogOpRequest( TCatalogOpRequest&& other240) {
  op_type = std::move(other240.op_type);
  sync_ddl = std::move(other240.sync_ddl);
  use_db_params = std::move(other240.use_db_params);
  describe_db_params = std::move(other240.describe_db_params);
  describe_table_params = std::move(other240.describe_table_params);
  show_dbs_params = std::move(other240.show_dbs_params);
  show_tables_params = std::move(other240.show_tables_params);
  show_fns_params = std::move(other240.show_fns_params);
  show_data_srcs_params = std::move(other240.show_data_srcs_params);
  show_roles_params = std::move(other240.show_roles_params);
  show_grant_principal_params = std::move(other240.show_grant_principal_params);
  ddl_params = std::move(other240.ddl_params);
  reset_metadata_params = std::move(other240.reset_metadata_params);
  show_stats_params = std::move(other240.show_stats_params);
  show_create_table_params = std::move(other240.show_create_table_params);
  show_files_params = std::move(other240.show_files_params);
  lineage_graph = std::move(other240.lineage_graph);
  show_create_function_params = std::move(other240.show_create_function_params);
  describe_history_params = std::move(other240.describe_history_params);
  __isset = std::move(other240.__isset);
}
TCatalogOpRequest& TCatalogOpRequest::operator=(const TCatalogOpRequest& other241) {
  op_type = other241.op_type;
  sync_ddl = other241.sync_ddl;
  use_db_params = other241.use_db_params;
  describe_db_params = other241.describe_db_params;
  describe_table_params = other241.describe_table_params;
  show_dbs_params = other241.show_dbs_params;
  show_tables_params = other241.show_tables_params;
  show_fns_params = other241.show_fns_params;
  show_data_srcs_params = other241.show_data_srcs_params;
  show_roles_params = other241.show_roles_params;
  show_grant_principal_params = other241.show_grant_principal_params;
  ddl_params = other241.ddl_params;
  reset_metadata_params = other241.reset_metadata_params;
  show_stats_params = other241.show_stats_params;
  show_create_table_params = other241.show_create_table_params;
  show_files_params = other241.show_files_params;
  lineage_graph = other241.lineage_graph;
  show_create_function_params = other241.show_create_function_params;
  describe_history_params = other241.describe_history_params;
  __isset = other241.__isset;
  return *this;
}
TCatalogOpRequest& TCatalogOpRequest::operator=(TCatalogOpRequest&& other242) {
  op_type = std::move(other242.op_type);
  sync_ddl = std::move(other242.sync_ddl);
  use_db_params = std::move(other242.use_db_params);
  describe_db_params = std::move(other242.describe_db_params);
  describe_table_params = std::move(other242.describe_table_params);
  show_dbs_params = std::move(other242.show_dbs_params);
  show_tables_params = std::move(other242.show_tables_params);
  show_fns_params = std::move(other242.show_fns_params);
  show_data_srcs_params = std::move(other242.show_data_srcs_params);
  show_roles_params = std::move(other242.show_roles_params);
  show_grant_principal_params = std::move(other242.show_grant_principal_params);
  ddl_params = std::move(other242.ddl_params);
  reset_metadata_params = std::move(other242.reset_metadata_params);
  show_stats_params = std::move(other242.show_stats_params);
  show_create_table_params = std::move(other242.show_create_table_params);
  show_files_params = std::move(other242.show_files_params);
  lineage_graph = std::move(other242.lineage_graph);
  show_create_function_params = std::move(other242.show_create_function_params);
  describe_history_params = std::move(other242.describe_history_params);
  __isset = std::move(other242.__isset);
  return *this;
}
void TCatalogOpRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCatalogOpRequest(";
  out << "op_type=" << to_string(op_type);
  out << ", " << "sync_ddl=" << to_string(sync_ddl);
  out << ", " << "use_db_params="; (__isset.use_db_params ? (out << to_string(use_db_params)) : (out << "<null>"));
  out << ", " << "describe_db_params="; (__isset.describe_db_params ? (out << to_string(describe_db_params)) : (out << "<null>"));
  out << ", " << "describe_table_params="; (__isset.describe_table_params ? (out << to_string(describe_table_params)) : (out << "<null>"));
  out << ", " << "show_dbs_params="; (__isset.show_dbs_params ? (out << to_string(show_dbs_params)) : (out << "<null>"));
  out << ", " << "show_tables_params="; (__isset.show_tables_params ? (out << to_string(show_tables_params)) : (out << "<null>"));
  out << ", " << "show_fns_params="; (__isset.show_fns_params ? (out << to_string(show_fns_params)) : (out << "<null>"));
  out << ", " << "show_data_srcs_params="; (__isset.show_data_srcs_params ? (out << to_string(show_data_srcs_params)) : (out << "<null>"));
  out << ", " << "show_roles_params="; (__isset.show_roles_params ? (out << to_string(show_roles_params)) : (out << "<null>"));
  out << ", " << "show_grant_principal_params="; (__isset.show_grant_principal_params ? (out << to_string(show_grant_principal_params)) : (out << "<null>"));
  out << ", " << "ddl_params="; (__isset.ddl_params ? (out << to_string(ddl_params)) : (out << "<null>"));
  out << ", " << "reset_metadata_params="; (__isset.reset_metadata_params ? (out << to_string(reset_metadata_params)) : (out << "<null>"));
  out << ", " << "show_stats_params="; (__isset.show_stats_params ? (out << to_string(show_stats_params)) : (out << "<null>"));
  out << ", " << "show_create_table_params="; (__isset.show_create_table_params ? (out << to_string(show_create_table_params)) : (out << "<null>"));
  out << ", " << "show_files_params="; (__isset.show_files_params ? (out << to_string(show_files_params)) : (out << "<null>"));
  out << ", " << "lineage_graph="; (__isset.lineage_graph ? (out << to_string(lineage_graph)) : (out << "<null>"));
  out << ", " << "show_create_function_params="; (__isset.show_create_function_params ? (out << to_string(show_create_function_params)) : (out << "<null>"));
  out << ", " << "describe_history_params="; (__isset.describe_history_params ? (out << to_string(describe_history_params)) : (out << "<null>"));
  out << ")";
}


TSetQueryOptionRequest::~TSetQueryOptionRequest() throw() {
}


void TSetQueryOptionRequest::__set_key(const std::string& val) {
  this->key = val;
__isset.key = true;
}

void TSetQueryOptionRequest::__set_value(const std::string& val) {
  this->value = val;
__isset.value = true;
}

void TSetQueryOptionRequest::__set_is_set_all(const bool val) {
  this->is_set_all = val;
__isset.is_set_all = true;
}
std::ostream& operator<<(std::ostream& out, const TSetQueryOptionRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TSetQueryOptionRequest &a, TSetQueryOptionRequest &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.is_set_all, b.is_set_all);
  swap(a.__isset, b.__isset);
}

TSetQueryOptionRequest::TSetQueryOptionRequest(const TSetQueryOptionRequest& other243) {
  key = other243.key;
  value = other243.value;
  is_set_all = other243.is_set_all;
  __isset = other243.__isset;
}
TSetQueryOptionRequest::TSetQueryOptionRequest( TSetQueryOptionRequest&& other244) {
  key = std::move(other244.key);
  value = std::move(other244.value);
  is_set_all = std::move(other244.is_set_all);
  __isset = std::move(other244.__isset);
}
TSetQueryOptionRequest& TSetQueryOptionRequest::operator=(const TSetQueryOptionRequest& other245) {
  key = other245.key;
  value = other245.value;
  is_set_all = other245.is_set_all;
  __isset = other245.__isset;
  return *this;
}
TSetQueryOptionRequest& TSetQueryOptionRequest::operator=(TSetQueryOptionRequest&& other246) {
  key = std::move(other246.key);
  value = std::move(other246.value);
  is_set_all = std::move(other246.is_set_all);
  __isset = std::move(other246.__isset);
  return *this;
}
void TSetQueryOptionRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSetQueryOptionRequest(";
  out << "key="; (__isset.key ? (out << to_string(key)) : (out << "<null>"));
  out << ", " << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ", " << "is_set_all="; (__isset.is_set_all ? (out << to_string(is_set_all)) : (out << "<null>"));
  out << ")";
}


TShutdownParams::~TShutdownParams() throw() {
}


void TShutdownParams::__set_backend(const  ::impala::TNetworkAddress& val) {
  this->backend = val;
__isset.backend = true;
}

void TShutdownParams::__set_deadline_s(const int64_t val) {
  this->deadline_s = val;
__isset.deadline_s = true;
}
std::ostream& operator<<(std::ostream& out, const TShutdownParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TShutdownParams &a, TShutdownParams &b) {
  using ::std::swap;
  swap(a.backend, b.backend);
  swap(a.deadline_s, b.deadline_s);
  swap(a.__isset, b.__isset);
}

TShutdownParams::TShutdownParams(const TShutdownParams& other247) {
  backend = other247.backend;
  deadline_s = other247.deadline_s;
  __isset = other247.__isset;
}
TShutdownParams::TShutdownParams( TShutdownParams&& other248) {
  backend = std::move(other248.backend);
  deadline_s = std::move(other248.deadline_s);
  __isset = std::move(other248.__isset);
}
TShutdownParams& TShutdownParams::operator=(const TShutdownParams& other249) {
  backend = other249.backend;
  deadline_s = other249.deadline_s;
  __isset = other249.__isset;
  return *this;
}
TShutdownParams& TShutdownParams::operator=(TShutdownParams&& other250) {
  backend = std::move(other250.backend);
  deadline_s = std::move(other250.deadline_s);
  __isset = std::move(other250.__isset);
  return *this;
}
void TShutdownParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TShutdownParams(";
  out << "backend="; (__isset.backend ? (out << to_string(backend)) : (out << "<null>"));
  out << ", " << "deadline_s="; (__isset.deadline_s ? (out << to_string(deadline_s)) : (out << "<null>"));
  out << ")";
}


TAdminRequest::~TAdminRequest() throw() {
}


void TAdminRequest::__set_type(const TAdminRequestType::type val) {
  this->type = val;
}

void TAdminRequest::__set_shutdown_params(const TShutdownParams& val) {
  this->shutdown_params = val;
__isset.shutdown_params = true;
}
std::ostream& operator<<(std::ostream& out, const TAdminRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAdminRequest &a, TAdminRequest &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.shutdown_params, b.shutdown_params);
  swap(a.__isset, b.__isset);
}

TAdminRequest::TAdminRequest(const TAdminRequest& other252) {
  type = other252.type;
  shutdown_params = other252.shutdown_params;
  __isset = other252.__isset;
}
TAdminRequest::TAdminRequest( TAdminRequest&& other253) {
  type = std::move(other253.type);
  shutdown_params = std::move(other253.shutdown_params);
  __isset = std::move(other253.__isset);
}
TAdminRequest& TAdminRequest::operator=(const TAdminRequest& other254) {
  type = other254.type;
  shutdown_params = other254.shutdown_params;
  __isset = other254.__isset;
  return *this;
}
TAdminRequest& TAdminRequest::operator=(TAdminRequest&& other255) {
  type = std::move(other255.type);
  shutdown_params = std::move(other255.shutdown_params);
  __isset = std::move(other255.__isset);
  return *this;
}
void TAdminRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAdminRequest(";
  out << "type=" << to_string(type);
  out << ", " << "shutdown_params="; (__isset.shutdown_params ? (out << to_string(shutdown_params)) : (out << "<null>"));
  out << ")";
}


TMetadataOpRequest::~TMetadataOpRequest() throw() {
}


void TMetadataOpRequest::__set_opcode(const TMetadataOpcode::type val) {
  this->opcode = val;
}

void TMetadataOpRequest::__set_get_info_req(const  ::apache::hive::service::cli::thrift::TGetInfoReq& val) {
  this->get_info_req = val;
__isset.get_info_req = true;
}

void TMetadataOpRequest::__set_get_type_info_req(const  ::apache::hive::service::cli::thrift::TGetTypeInfoReq& val) {
  this->get_type_info_req = val;
__isset.get_type_info_req = true;
}

void TMetadataOpRequest::__set_get_catalogs_req(const  ::apache::hive::service::cli::thrift::TGetCatalogsReq& val) {
  this->get_catalogs_req = val;
__isset.get_catalogs_req = true;
}

void TMetadataOpRequest::__set_get_schemas_req(const  ::apache::hive::service::cli::thrift::TGetSchemasReq& val) {
  this->get_schemas_req = val;
__isset.get_schemas_req = true;
}

void TMetadataOpRequest::__set_get_tables_req(const  ::apache::hive::service::cli::thrift::TGetTablesReq& val) {
  this->get_tables_req = val;
__isset.get_tables_req = true;
}

void TMetadataOpRequest::__set_get_table_types_req(const  ::apache::hive::service::cli::thrift::TGetTableTypesReq& val) {
  this->get_table_types_req = val;
__isset.get_table_types_req = true;
}

void TMetadataOpRequest::__set_get_columns_req(const  ::apache::hive::service::cli::thrift::TGetColumnsReq& val) {
  this->get_columns_req = val;
__isset.get_columns_req = true;
}

void TMetadataOpRequest::__set_get_functions_req(const  ::apache::hive::service::cli::thrift::TGetFunctionsReq& val) {
  this->get_functions_req = val;
__isset.get_functions_req = true;
}

void TMetadataOpRequest::__set_session(const  ::impala::TSessionState& val) {
  this->session = val;
__isset.session = true;
}

void TMetadataOpRequest::__set_get_primary_keys_req(const  ::apache::hive::service::cli::thrift::TGetPrimaryKeysReq& val) {
  this->get_primary_keys_req = val;
__isset.get_primary_keys_req = true;
}

void TMetadataOpRequest::__set_get_cross_reference_req(const  ::apache::hive::service::cli::thrift::TGetCrossReferenceReq& val) {
  this->get_cross_reference_req = val;
__isset.get_cross_reference_req = true;
}
std::ostream& operator<<(std::ostream& out, const TMetadataOpRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TMetadataOpRequest &a, TMetadataOpRequest &b) {
  using ::std::swap;
  swap(a.opcode, b.opcode);
  swap(a.get_info_req, b.get_info_req);
  swap(a.get_type_info_req, b.get_type_info_req);
  swap(a.get_catalogs_req, b.get_catalogs_req);
  swap(a.get_schemas_req, b.get_schemas_req);
  swap(a.get_tables_req, b.get_tables_req);
  swap(a.get_table_types_req, b.get_table_types_req);
  swap(a.get_columns_req, b.get_columns_req);
  swap(a.get_functions_req, b.get_functions_req);
  swap(a.session, b.session);
  swap(a.get_primary_keys_req, b.get_primary_keys_req);
  swap(a.get_cross_reference_req, b.get_cross_reference_req);
  swap(a.__isset, b.__isset);
}

TMetadataOpRequest::TMetadataOpRequest(const TMetadataOpRequest& other257) {
  opcode = other257.opcode;
  get_info_req = other257.get_info_req;
  get_type_info_req = other257.get_type_info_req;
  get_catalogs_req = other257.get_catalogs_req;
  get_schemas_req = other257.get_schemas_req;
  get_tables_req = other257.get_tables_req;
  get_table_types_req = other257.get_table_types_req;
  get_columns_req = other257.get_columns_req;
  get_functions_req = other257.get_functions_req;
  session = other257.session;
  get_primary_keys_req = other257.get_primary_keys_req;
  get_cross_reference_req = other257.get_cross_reference_req;
  __isset = other257.__isset;
}
TMetadataOpRequest::TMetadataOpRequest( TMetadataOpRequest&& other258) {
  opcode = std::move(other258.opcode);
  get_info_req = std::move(other258.get_info_req);
  get_type_info_req = std::move(other258.get_type_info_req);
  get_catalogs_req = std::move(other258.get_catalogs_req);
  get_schemas_req = std::move(other258.get_schemas_req);
  get_tables_req = std::move(other258.get_tables_req);
  get_table_types_req = std::move(other258.get_table_types_req);
  get_columns_req = std::move(other258.get_columns_req);
  get_functions_req = std::move(other258.get_functions_req);
  session = std::move(other258.session);
  get_primary_keys_req = std::move(other258.get_primary_keys_req);
  get_cross_reference_req = std::move(other258.get_cross_reference_req);
  __isset = std::move(other258.__isset);
}
TMetadataOpRequest& TMetadataOpRequest::operator=(const TMetadataOpRequest& other259) {
  opcode = other259.opcode;
  get_info_req = other259.get_info_req;
  get_type_info_req = other259.get_type_info_req;
  get_catalogs_req = other259.get_catalogs_req;
  get_schemas_req = other259.get_schemas_req;
  get_tables_req = other259.get_tables_req;
  get_table_types_req = other259.get_table_types_req;
  get_columns_req = other259.get_columns_req;
  get_functions_req = other259.get_functions_req;
  session = other259.session;
  get_primary_keys_req = other259.get_primary_keys_req;
  get_cross_reference_req = other259.get_cross_reference_req;
  __isset = other259.__isset;
  return *this;
}
TMetadataOpRequest& TMetadataOpRequest::operator=(TMetadataOpRequest&& other260) {
  opcode = std::move(other260.opcode);
  get_info_req = std::move(other260.get_info_req);
  get_type_info_req = std::move(other260.get_type_info_req);
  get_catalogs_req = std::move(other260.get_catalogs_req);
  get_schemas_req = std::move(other260.get_schemas_req);
  get_tables_req = std::move(other260.get_tables_req);
  get_table_types_req = std::move(other260.get_table_types_req);
  get_columns_req = std::move(other260.get_columns_req);
  get_functions_req = std::move(other260.get_functions_req);
  session = std::move(other260.session);
  get_primary_keys_req = std::move(other260.get_primary_keys_req);
  get_cross_reference_req = std::move(other260.get_cross_reference_req);
  __isset = std::move(other260.__isset);
  return *this;
}
void TMetadataOpRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TMetadataOpRequest(";
  out << "opcode=" << to_string(opcode);
  out << ", " << "get_info_req="; (__isset.get_info_req ? (out << to_string(get_info_req)) : (out << "<null>"));
  out << ", " << "get_type_info_req="; (__isset.get_type_info_req ? (out << to_string(get_type_info_req)) : (out << "<null>"));
  out << ", " << "get_catalogs_req="; (__isset.get_catalogs_req ? (out << to_string(get_catalogs_req)) : (out << "<null>"));
  out << ", " << "get_schemas_req="; (__isset.get_schemas_req ? (out << to_string(get_schemas_req)) : (out << "<null>"));
  out << ", " << "get_tables_req="; (__isset.get_tables_req ? (out << to_string(get_tables_req)) : (out << "<null>"));
  out << ", " << "get_table_types_req="; (__isset.get_table_types_req ? (out << to_string(get_table_types_req)) : (out << "<null>"));
  out << ", " << "get_columns_req="; (__isset.get_columns_req ? (out << to_string(get_columns_req)) : (out << "<null>"));
  out << ", " << "get_functions_req="; (__isset.get_functions_req ? (out << to_string(get_functions_req)) : (out << "<null>"));
  out << ", " << "session="; (__isset.session ? (out << to_string(session)) : (out << "<null>"));
  out << ", " << "get_primary_keys_req="; (__isset.get_primary_keys_req ? (out << to_string(get_primary_keys_req)) : (out << "<null>"));
  out << ", " << "get_cross_reference_req="; (__isset.get_cross_reference_req ? (out << to_string(get_cross_reference_req)) : (out << "<null>"));
  out << ")";
}


TAccessEvent::~TAccessEvent() throw() {
}


void TAccessEvent::__set_name(const std::string& val) {
  this->name = val;
}

void TAccessEvent::__set_object_type(const  ::impala::TCatalogObjectType::type val) {
  this->object_type = val;
}

void TAccessEvent::__set_privilege(const std::string& val) {
  this->privilege = val;
}
std::ostream& operator<<(std::ostream& out, const TAccessEvent& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAccessEvent &a, TAccessEvent &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.object_type, b.object_type);
  swap(a.privilege, b.privilege);
}

TAccessEvent::TAccessEvent(const TAccessEvent& other262) {
  name = other262.name;
  object_type = other262.object_type;
  privilege = other262.privilege;
}
TAccessEvent::TAccessEvent( TAccessEvent&& other263) {
  name = std::move(other263.name);
  object_type = std::move(other263.object_type);
  privilege = std::move(other263.privilege);
}
TAccessEvent& TAccessEvent::operator=(const TAccessEvent& other264) {
  name = other264.name;
  object_type = other264.object_type;
  privilege = other264.privilege;
  return *this;
}
TAccessEvent& TAccessEvent::operator=(TAccessEvent&& other265) {
  name = std::move(other265.name);
  object_type = std::move(other265.object_type);
  privilege = std::move(other265.privilege);
  return *this;
}
void TAccessEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAccessEvent(";
  out << "name=" << to_string(name);
  out << ", " << "object_type=" << to_string(object_type);
  out << ", " << "privilege=" << to_string(privilege);
  out << ")";
}


TExecRequest::~TExecRequest() throw() {
}


void TExecRequest::__set_stmt_type(const  ::impala::TStmtType::type val) {
  this->stmt_type = val;
}

void TExecRequest::__set_query_options(const  ::impala::TQueryOptions& val) {
  this->query_options = val;
}

void TExecRequest::__set_query_exec_request(const  ::impala::TQueryExecRequest& val) {
  this->query_exec_request = val;
__isset.query_exec_request = true;
}

void TExecRequest::__set_catalog_op_request(const TCatalogOpRequest& val) {
  this->catalog_op_request = val;
__isset.catalog_op_request = true;
}

void TExecRequest::__set_result_set_metadata(const  ::impala::TResultSetMetadata& val) {
  this->result_set_metadata = val;
__isset.result_set_metadata = true;
}

void TExecRequest::__set_explain_result(const TExplainResult& val) {
  this->explain_result = val;
__isset.explain_result = true;
}

void TExecRequest::__set_load_data_request(const TLoadDataReq& val) {
  this->load_data_request = val;
__isset.load_data_request = true;
}

void TExecRequest::__set_access_events(const std::vector<TAccessEvent> & val) {
  this->access_events = val;
__isset.access_events = true;
}

void TExecRequest::__set_analysis_warnings(const std::vector<std::string> & val) {
  this->analysis_warnings = val;
}

void TExecRequest::__set_set_query_option_request(const TSetQueryOptionRequest& val) {
  this->set_query_option_request = val;
__isset.set_query_option_request = true;
}

void TExecRequest::__set_timeline(const  ::impala::TEventSequence& val) {
  this->timeline = val;
__isset.timeline = true;
}

void TExecRequest::__set_user_has_profile_access(const bool val) {
  this->user_has_profile_access = val;
__isset.user_has_profile_access = true;
}

void TExecRequest::__set_admin_request(const TAdminRequest& val) {
  this->admin_request = val;
__isset.admin_request = true;
}

void TExecRequest::__set_profile(const  ::impala::TRuntimeProfileNode& val) {
  this->profile = val;
__isset.profile = true;
}

void TExecRequest::__set_testcase_data_path(const std::string& val) {
  this->testcase_data_path = val;
__isset.testcase_data_path = true;
}

void TExecRequest::__set_remote_submit_time(const int64_t val) {
  this->remote_submit_time = val;
__isset.remote_submit_time = true;
}
std::ostream& operator<<(std::ostream& out, const TExecRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TExecRequest &a, TExecRequest &b) {
  using ::std::swap;
  swap(a.stmt_type, b.stmt_type);
  swap(a.query_options, b.query_options);
  swap(a.query_exec_request, b.query_exec_request);
  swap(a.catalog_op_request, b.catalog_op_request);
  swap(a.result_set_metadata, b.result_set_metadata);
  swap(a.explain_result, b.explain_result);
  swap(a.load_data_request, b.load_data_request);
  swap(a.access_events, b.access_events);
  swap(a.analysis_warnings, b.analysis_warnings);
  swap(a.set_query_option_request, b.set_query_option_request);
  swap(a.timeline, b.timeline);
  swap(a.user_has_profile_access, b.user_has_profile_access);
  swap(a.admin_request, b.admin_request);
  swap(a.profile, b.profile);
  swap(a.testcase_data_path, b.testcase_data_path);
  swap(a.remote_submit_time, b.remote_submit_time);
  swap(a.__isset, b.__isset);
}

TExecRequest::TExecRequest(const TExecRequest& other279) {
  stmt_type = other279.stmt_type;
  query_options = other279.query_options;
  query_exec_request = other279.query_exec_request;
  catalog_op_request = other279.catalog_op_request;
  result_set_metadata = other279.result_set_metadata;
  explain_result = other279.explain_result;
  load_data_request = other279.load_data_request;
  access_events = other279.access_events;
  analysis_warnings = other279.analysis_warnings;
  set_query_option_request = other279.set_query_option_request;
  timeline = other279.timeline;
  user_has_profile_access = other279.user_has_profile_access;
  admin_request = other279.admin_request;
  profile = other279.profile;
  testcase_data_path = other279.testcase_data_path;
  remote_submit_time = other279.remote_submit_time;
  __isset = other279.__isset;
}
TExecRequest::TExecRequest( TExecRequest&& other280) {
  stmt_type = std::move(other280.stmt_type);
  query_options = std::move(other280.query_options);
  query_exec_request = std::move(other280.query_exec_request);
  catalog_op_request = std::move(other280.catalog_op_request);
  result_set_metadata = std::move(other280.result_set_metadata);
  explain_result = std::move(other280.explain_result);
  load_data_request = std::move(other280.load_data_request);
  access_events = std::move(other280.access_events);
  analysis_warnings = std::move(other280.analysis_warnings);
  set_query_option_request = std::move(other280.set_query_option_request);
  timeline = std::move(other280.timeline);
  user_has_profile_access = std::move(other280.user_has_profile_access);
  admin_request = std::move(other280.admin_request);
  profile = std::move(other280.profile);
  testcase_data_path = std::move(other280.testcase_data_path);
  remote_submit_time = std::move(other280.remote_submit_time);
  __isset = std::move(other280.__isset);
}
TExecRequest& TExecRequest::operator=(const TExecRequest& other281) {
  stmt_type = other281.stmt_type;
  query_options = other281.query_options;
  query_exec_request = other281.query_exec_request;
  catalog_op_request = other281.catalog_op_request;
  result_set_metadata = other281.result_set_metadata;
  explain_result = other281.explain_result;
  load_data_request = other281.load_data_request;
  access_events = other281.access_events;
  analysis_warnings = other281.analysis_warnings;
  set_query_option_request = other281.set_query_option_request;
  timeline = other281.timeline;
  user_has_profile_access = other281.user_has_profile_access;
  admin_request = other281.admin_request;
  profile = other281.profile;
  testcase_data_path = other281.testcase_data_path;
  remote_submit_time = other281.remote_submit_time;
  __isset = other281.__isset;
  return *this;
}
TExecRequest& TExecRequest::operator=(TExecRequest&& other282) {
  stmt_type = std::move(other282.stmt_type);
  query_options = std::move(other282.query_options);
  query_exec_request = std::move(other282.query_exec_request);
  catalog_op_request = std::move(other282.catalog_op_request);
  result_set_metadata = std::move(other282.result_set_metadata);
  explain_result = std::move(other282.explain_result);
  load_data_request = std::move(other282.load_data_request);
  access_events = std::move(other282.access_events);
  analysis_warnings = std::move(other282.analysis_warnings);
  set_query_option_request = std::move(other282.set_query_option_request);
  timeline = std::move(other282.timeline);
  user_has_profile_access = std::move(other282.user_has_profile_access);
  admin_request = std::move(other282.admin_request);
  profile = std::move(other282.profile);
  testcase_data_path = std::move(other282.testcase_data_path);
  remote_submit_time = std::move(other282.remote_submit_time);
  __isset = std::move(other282.__isset);
  return *this;
}
void TExecRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TExecRequest(";
  out << "stmt_type=" << to_string(stmt_type);
  out << ", " << "query_options=" << to_string(query_options);
  out << ", " << "query_exec_request="; (__isset.query_exec_request ? (out << to_string(query_exec_request)) : (out << "<null>"));
  out << ", " << "catalog_op_request="; (__isset.catalog_op_request ? (out << to_string(catalog_op_request)) : (out << "<null>"));
  out << ", " << "result_set_metadata="; (__isset.result_set_metadata ? (out << to_string(result_set_metadata)) : (out << "<null>"));
  out << ", " << "explain_result="; (__isset.explain_result ? (out << to_string(explain_result)) : (out << "<null>"));
  out << ", " << "load_data_request="; (__isset.load_data_request ? (out << to_string(load_data_request)) : (out << "<null>"));
  out << ", " << "access_events="; (__isset.access_events ? (out << to_string(access_events)) : (out << "<null>"));
  out << ", " << "analysis_warnings=" << to_string(analysis_warnings);
  out << ", " << "set_query_option_request="; (__isset.set_query_option_request ? (out << to_string(set_query_option_request)) : (out << "<null>"));
  out << ", " << "timeline="; (__isset.timeline ? (out << to_string(timeline)) : (out << "<null>"));
  out << ", " << "user_has_profile_access="; (__isset.user_has_profile_access ? (out << to_string(user_has_profile_access)) : (out << "<null>"));
  out << ", " << "admin_request="; (__isset.admin_request ? (out << to_string(admin_request)) : (out << "<null>"));
  out << ", " << "profile="; (__isset.profile ? (out << to_string(profile)) : (out << "<null>"));
  out << ", " << "testcase_data_path="; (__isset.testcase_data_path ? (out << to_string(testcase_data_path)) : (out << "<null>"));
  out << ", " << "remote_submit_time="; (__isset.remote_submit_time ? (out << to_string(remote_submit_time)) : (out << "<null>"));
  out << ")";
}


TCacheJarParams::~TCacheJarParams() throw() {
}


void TCacheJarParams::__set_hdfs_location(const std::string& val) {
  this->hdfs_location = val;
}
std::ostream& operator<<(std::ostream& out, const TCacheJarParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCacheJarParams &a, TCacheJarParams &b) {
  using ::std::swap;
  swap(a.hdfs_location, b.hdfs_location);
}

TCacheJarParams::TCacheJarParams(const TCacheJarParams& other283) {
  hdfs_location = other283.hdfs_location;
}
TCacheJarParams::TCacheJarParams( TCacheJarParams&& other284) {
  hdfs_location = std::move(other284.hdfs_location);
}
TCacheJarParams& TCacheJarParams::operator=(const TCacheJarParams& other285) {
  hdfs_location = other285.hdfs_location;
  return *this;
}
TCacheJarParams& TCacheJarParams::operator=(TCacheJarParams&& other286) {
  hdfs_location = std::move(other286.hdfs_location);
  return *this;
}
void TCacheJarParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCacheJarParams(";
  out << "hdfs_location=" << to_string(hdfs_location);
  out << ")";
}


TCacheJarResult::~TCacheJarResult() throw() {
}


void TCacheJarResult::__set_status(const  ::impala::TStatus& val) {
  this->status = val;
}

void TCacheJarResult::__set_local_path(const std::string& val) {
  this->local_path = val;
__isset.local_path = true;
}
std::ostream& operator<<(std::ostream& out, const TCacheJarResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCacheJarResult &a, TCacheJarResult &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.local_path, b.local_path);
  swap(a.__isset, b.__isset);
}

TCacheJarResult::TCacheJarResult(const TCacheJarResult& other287) {
  status = other287.status;
  local_path = other287.local_path;
  __isset = other287.__isset;
}
TCacheJarResult::TCacheJarResult( TCacheJarResult&& other288) {
  status = std::move(other288.status);
  local_path = std::move(other288.local_path);
  __isset = std::move(other288.__isset);
}
TCacheJarResult& TCacheJarResult::operator=(const TCacheJarResult& other289) {
  status = other289.status;
  local_path = other289.local_path;
  __isset = other289.__isset;
  return *this;
}
TCacheJarResult& TCacheJarResult::operator=(TCacheJarResult&& other290) {
  status = std::move(other290.status);
  local_path = std::move(other290.local_path);
  __isset = std::move(other290.__isset);
  return *this;
}
void TCacheJarResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCacheJarResult(";
  out << "status=" << to_string(status);
  out << ", " << "local_path="; (__isset.local_path ? (out << to_string(local_path)) : (out << "<null>"));
  out << ")";
}


TSymbolLookupParams::~TSymbolLookupParams() throw() {
}


void TSymbolLookupParams::__set_location(const std::string& val) {
  this->location = val;
}

void TSymbolLookupParams::__set_symbol(const std::string& val) {
  this->symbol = val;
}

void TSymbolLookupParams::__set_fn_binary_type(const  ::impala::TFunctionBinaryType::type val) {
  this->fn_binary_type = val;
}

void TSymbolLookupParams::__set_arg_types(const std::vector< ::impala::TColumnType> & val) {
  this->arg_types = val;
}

void TSymbolLookupParams::__set_has_var_args(const bool val) {
  this->has_var_args = val;
}

void TSymbolLookupParams::__set_ret_arg_type(const  ::impala::TColumnType& val) {
  this->ret_arg_type = val;
__isset.ret_arg_type = true;
}

void TSymbolLookupParams::__set_symbol_type(const TSymbolType::type val) {
  this->symbol_type = val;
}

void TSymbolLookupParams::__set_needs_refresh(const bool val) {
  this->needs_refresh = val;
}
std::ostream& operator<<(std::ostream& out, const TSymbolLookupParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TSymbolLookupParams &a, TSymbolLookupParams &b) {
  using ::std::swap;
  swap(a.location, b.location);
  swap(a.symbol, b.symbol);
  swap(a.fn_binary_type, b.fn_binary_type);
  swap(a.arg_types, b.arg_types);
  swap(a.has_var_args, b.has_var_args);
  swap(a.ret_arg_type, b.ret_arg_type);
  swap(a.symbol_type, b.symbol_type);
  swap(a.needs_refresh, b.needs_refresh);
  swap(a.__isset, b.__isset);
}

TSymbolLookupParams::TSymbolLookupParams(const TSymbolLookupParams& other299) {
  location = other299.location;
  symbol = other299.symbol;
  fn_binary_type = other299.fn_binary_type;
  arg_types = other299.arg_types;
  has_var_args = other299.has_var_args;
  ret_arg_type = other299.ret_arg_type;
  symbol_type = other299.symbol_type;
  needs_refresh = other299.needs_refresh;
  __isset = other299.__isset;
}
TSymbolLookupParams::TSymbolLookupParams( TSymbolLookupParams&& other300) {
  location = std::move(other300.location);
  symbol = std::move(other300.symbol);
  fn_binary_type = std::move(other300.fn_binary_type);
  arg_types = std::move(other300.arg_types);
  has_var_args = std::move(other300.has_var_args);
  ret_arg_type = std::move(other300.ret_arg_type);
  symbol_type = std::move(other300.symbol_type);
  needs_refresh = std::move(other300.needs_refresh);
  __isset = std::move(other300.__isset);
}
TSymbolLookupParams& TSymbolLookupParams::operator=(const TSymbolLookupParams& other301) {
  location = other301.location;
  symbol = other301.symbol;
  fn_binary_type = other301.fn_binary_type;
  arg_types = other301.arg_types;
  has_var_args = other301.has_var_args;
  ret_arg_type = other301.ret_arg_type;
  symbol_type = other301.symbol_type;
  needs_refresh = other301.needs_refresh;
  __isset = other301.__isset;
  return *this;
}
TSymbolLookupParams& TSymbolLookupParams::operator=(TSymbolLookupParams&& other302) {
  location = std::move(other302.location);
  symbol = std::move(other302.symbol);
  fn_binary_type = std::move(other302.fn_binary_type);
  arg_types = std::move(other302.arg_types);
  has_var_args = std::move(other302.has_var_args);
  ret_arg_type = std::move(other302.ret_arg_type);
  symbol_type = std::move(other302.symbol_type);
  needs_refresh = std::move(other302.needs_refresh);
  __isset = std::move(other302.__isset);
  return *this;
}
void TSymbolLookupParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSymbolLookupParams(";
  out << "location=" << to_string(location);
  out << ", " << "symbol=" << to_string(symbol);
  out << ", " << "fn_binary_type=" << to_string(fn_binary_type);
  out << ", " << "arg_types=" << to_string(arg_types);
  out << ", " << "has_var_args=" << to_string(has_var_args);
  out << ", " << "ret_arg_type="; (__isset.ret_arg_type ? (out << to_string(ret_arg_type)) : (out << "<null>"));
  out << ", " << "symbol_type=" << to_string(symbol_type);
  out << ", " << "needs_refresh=" << to_string(needs_refresh);
  out << ")";
}


TSymbolLookupResult::~TSymbolLookupResult() throw() {
}


void TSymbolLookupResult::__set_result_code(const TSymbolLookupResultCode::type val) {
  this->result_code = val;
}

void TSymbolLookupResult::__set_symbol(const std::string& val) {
  this->symbol = val;
__isset.symbol = true;
}

void TSymbolLookupResult::__set_error_msg(const std::string& val) {
  this->error_msg = val;
__isset.error_msg = true;
}

void TSymbolLookupResult::__set_last_modified_time(const int64_t val) {
  this->last_modified_time = val;
__isset.last_modified_time = true;
}
std::ostream& operator<<(std::ostream& out, const TSymbolLookupResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TSymbolLookupResult &a, TSymbolLookupResult &b) {
  using ::std::swap;
  swap(a.result_code, b.result_code);
  swap(a.symbol, b.symbol);
  swap(a.error_msg, b.error_msg);
  swap(a.last_modified_time, b.last_modified_time);
  swap(a.__isset, b.__isset);
}

TSymbolLookupResult::TSymbolLookupResult(const TSymbolLookupResult& other304) {
  result_code = other304.result_code;
  symbol = other304.symbol;
  error_msg = other304.error_msg;
  last_modified_time = other304.last_modified_time;
  __isset = other304.__isset;
}
TSymbolLookupResult::TSymbolLookupResult( TSymbolLookupResult&& other305) {
  result_code = std::move(other305.result_code);
  symbol = std::move(other305.symbol);
  error_msg = std::move(other305.error_msg);
  last_modified_time = std::move(other305.last_modified_time);
  __isset = std::move(other305.__isset);
}
TSymbolLookupResult& TSymbolLookupResult::operator=(const TSymbolLookupResult& other306) {
  result_code = other306.result_code;
  symbol = other306.symbol;
  error_msg = other306.error_msg;
  last_modified_time = other306.last_modified_time;
  __isset = other306.__isset;
  return *this;
}
TSymbolLookupResult& TSymbolLookupResult::operator=(TSymbolLookupResult&& other307) {
  result_code = std::move(other307.result_code);
  symbol = std::move(other307.symbol);
  error_msg = std::move(other307.error_msg);
  last_modified_time = std::move(other307.last_modified_time);
  __isset = std::move(other307.__isset);
  return *this;
}
void TSymbolLookupResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSymbolLookupResult(";
  out << "result_code=" << to_string(result_code);
  out << ", " << "symbol="; (__isset.symbol ? (out << to_string(symbol)) : (out << "<null>"));
  out << ", " << "error_msg="; (__isset.error_msg ? (out << to_string(error_msg)) : (out << "<null>"));
  out << ", " << "last_modified_time="; (__isset.last_modified_time ? (out << to_string(last_modified_time)) : (out << "<null>"));
  out << ")";
}


TUpdateCatalogCacheRequest::~TUpdateCatalogCacheRequest() throw() {
}


void TUpdateCatalogCacheRequest::__set_is_delta(const bool val) {
  this->is_delta = val;
}

void TUpdateCatalogCacheRequest::__set_catalog_service_id(const  ::impala::TUniqueId& val) {
  this->catalog_service_id = val;
__isset.catalog_service_id = true;
}

void TUpdateCatalogCacheRequest::__set_updated_objects_deprecated(const std::vector< ::impala::TCatalogObject> & val) {
  this->updated_objects_deprecated = val;
__isset.updated_objects_deprecated = true;
}

void TUpdateCatalogCacheRequest::__set_removed_objects_deprecated(const std::vector< ::impala::TCatalogObject> & val) {
  this->removed_objects_deprecated = val;
__isset.removed_objects_deprecated = true;
}

void TUpdateCatalogCacheRequest::__set_native_iterator_ptr(const int64_t val) {
  this->native_iterator_ptr = val;
}
std::ostream& operator<<(std::ostream& out, const TUpdateCatalogCacheRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TUpdateCatalogCacheRequest &a, TUpdateCatalogCacheRequest &b) {
  using ::std::swap;
  swap(a.is_delta, b.is_delta);
  swap(a.catalog_service_id, b.catalog_service_id);
  swap(a.updated_objects_deprecated, b.updated_objects_deprecated);
  swap(a.removed_objects_deprecated, b.removed_objects_deprecated);
  swap(a.native_iterator_ptr, b.native_iterator_ptr);
  swap(a.__isset, b.__isset);
}

TUpdateCatalogCacheRequest::TUpdateCatalogCacheRequest(const TUpdateCatalogCacheRequest& other320) {
  is_delta = other320.is_delta;
  catalog_service_id = other320.catalog_service_id;
  updated_objects_deprecated = other320.updated_objects_deprecated;
  removed_objects_deprecated = other320.removed_objects_deprecated;
  native_iterator_ptr = other320.native_iterator_ptr;
  __isset = other320.__isset;
}
TUpdateCatalogCacheRequest::TUpdateCatalogCacheRequest( TUpdateCatalogCacheRequest&& other321) {
  is_delta = std::move(other321.is_delta);
  catalog_service_id = std::move(other321.catalog_service_id);
  updated_objects_deprecated = std::move(other321.updated_objects_deprecated);
  removed_objects_deprecated = std::move(other321.removed_objects_deprecated);
  native_iterator_ptr = std::move(other321.native_iterator_ptr);
  __isset = std::move(other321.__isset);
}
TUpdateCatalogCacheRequest& TUpdateCatalogCacheRequest::operator=(const TUpdateCatalogCacheRequest& other322) {
  is_delta = other322.is_delta;
  catalog_service_id = other322.catalog_service_id;
  updated_objects_deprecated = other322.updated_objects_deprecated;
  removed_objects_deprecated = other322.removed_objects_deprecated;
  native_iterator_ptr = other322.native_iterator_ptr;
  __isset = other322.__isset;
  return *this;
}
TUpdateCatalogCacheRequest& TUpdateCatalogCacheRequest::operator=(TUpdateCatalogCacheRequest&& other323) {
  is_delta = std::move(other323.is_delta);
  catalog_service_id = std::move(other323.catalog_service_id);
  updated_objects_deprecated = std::move(other323.updated_objects_deprecated);
  removed_objects_deprecated = std::move(other323.removed_objects_deprecated);
  native_iterator_ptr = std::move(other323.native_iterator_ptr);
  __isset = std::move(other323.__isset);
  return *this;
}
void TUpdateCatalogCacheRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TUpdateCatalogCacheRequest(";
  out << "is_delta=" << to_string(is_delta);
  out << ", " << "catalog_service_id="; (__isset.catalog_service_id ? (out << to_string(catalog_service_id)) : (out << "<null>"));
  out << ", " << "updated_objects_deprecated="; (__isset.updated_objects_deprecated ? (out << to_string(updated_objects_deprecated)) : (out << "<null>"));
  out << ", " << "removed_objects_deprecated="; (__isset.removed_objects_deprecated ? (out << to_string(removed_objects_deprecated)) : (out << "<null>"));
  out << ", " << "native_iterator_ptr=" << to_string(native_iterator_ptr);
  out << ")";
}


TUpdateCatalogCacheResponse::~TUpdateCatalogCacheResponse() throw() {
}


void TUpdateCatalogCacheResponse::__set_catalog_service_id(const  ::impala::TUniqueId& val) {
  this->catalog_service_id = val;
}

void TUpdateCatalogCacheResponse::__set_catalog_object_version_lower_bound(const int64_t val) {
  this->catalog_object_version_lower_bound = val;
}

void TUpdateCatalogCacheResponse::__set_new_catalog_version(const int64_t val) {
  this->new_catalog_version = val;
}
std::ostream& operator<<(std::ostream& out, const TUpdateCatalogCacheResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TUpdateCatalogCacheResponse &a, TUpdateCatalogCacheResponse &b) {
  using ::std::swap;
  swap(a.catalog_service_id, b.catalog_service_id);
  swap(a.catalog_object_version_lower_bound, b.catalog_object_version_lower_bound);
  swap(a.new_catalog_version, b.new_catalog_version);
}

TUpdateCatalogCacheResponse::TUpdateCatalogCacheResponse(const TUpdateCatalogCacheResponse& other324) {
  catalog_service_id = other324.catalog_service_id;
  catalog_object_version_lower_bound = other324.catalog_object_version_lower_bound;
  new_catalog_version = other324.new_catalog_version;
}
TUpdateCatalogCacheResponse::TUpdateCatalogCacheResponse( TUpdateCatalogCacheResponse&& other325) {
  catalog_service_id = std::move(other325.catalog_service_id);
  catalog_object_version_lower_bound = std::move(other325.catalog_object_version_lower_bound);
  new_catalog_version = std::move(other325.new_catalog_version);
}
TUpdateCatalogCacheResponse& TUpdateCatalogCacheResponse::operator=(const TUpdateCatalogCacheResponse& other326) {
  catalog_service_id = other326.catalog_service_id;
  catalog_object_version_lower_bound = other326.catalog_object_version_lower_bound;
  new_catalog_version = other326.new_catalog_version;
  return *this;
}
TUpdateCatalogCacheResponse& TUpdateCatalogCacheResponse::operator=(TUpdateCatalogCacheResponse&& other327) {
  catalog_service_id = std::move(other327.catalog_service_id);
  catalog_object_version_lower_bound = std::move(other327.catalog_object_version_lower_bound);
  new_catalog_version = std::move(other327.new_catalog_version);
  return *this;
}
void TUpdateCatalogCacheResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TUpdateCatalogCacheResponse(";
  out << "catalog_service_id=" << to_string(catalog_service_id);
  out << ", " << "catalog_object_version_lower_bound=" << to_string(catalog_object_version_lower_bound);
  out << ", " << "new_catalog_version=" << to_string(new_catalog_version);
  out << ")";
}


TUpdateExecutorMembershipRequest::~TUpdateExecutorMembershipRequest() throw() {
}


void TUpdateExecutorMembershipRequest::__set_hostnames(const std::set<std::string> & val) {
  this->hostnames = val;
}

void TUpdateExecutorMembershipRequest::__set_ip_addresses(const std::set<std::string> & val) {
  this->ip_addresses = val;
}

void TUpdateExecutorMembershipRequest::__set_num_executors(const int32_t val) {
  this->num_executors = val;
}
std::ostream& operator<<(std::ostream& out, const TUpdateExecutorMembershipRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TUpdateExecutorMembershipRequest &a, TUpdateExecutorMembershipRequest &b) {
  using ::std::swap;
  swap(a.hostnames, b.hostnames);
  swap(a.ip_addresses, b.ip_addresses);
  swap(a.num_executors, b.num_executors);
  swap(a.__isset, b.__isset);
}

TUpdateExecutorMembershipRequest::TUpdateExecutorMembershipRequest(const TUpdateExecutorMembershipRequest& other342) {
  hostnames = other342.hostnames;
  ip_addresses = other342.ip_addresses;
  num_executors = other342.num_executors;
  __isset = other342.__isset;
}
TUpdateExecutorMembershipRequest::TUpdateExecutorMembershipRequest( TUpdateExecutorMembershipRequest&& other343) {
  hostnames = std::move(other343.hostnames);
  ip_addresses = std::move(other343.ip_addresses);
  num_executors = std::move(other343.num_executors);
  __isset = std::move(other343.__isset);
}
TUpdateExecutorMembershipRequest& TUpdateExecutorMembershipRequest::operator=(const TUpdateExecutorMembershipRequest& other344) {
  hostnames = other344.hostnames;
  ip_addresses = other344.ip_addresses;
  num_executors = other344.num_executors;
  __isset = other344.__isset;
  return *this;
}
TUpdateExecutorMembershipRequest& TUpdateExecutorMembershipRequest::operator=(TUpdateExecutorMembershipRequest&& other345) {
  hostnames = std::move(other345.hostnames);
  ip_addresses = std::move(other345.ip_addresses);
  num_executors = std::move(other345.num_executors);
  __isset = std::move(other345.__isset);
  return *this;
}
void TUpdateExecutorMembershipRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TUpdateExecutorMembershipRequest(";
  out << "hostnames=" << to_string(hostnames);
  out << ", " << "ip_addresses=" << to_string(ip_addresses);
  out << ", " << "num_executors=" << to_string(num_executors);
  out << ")";
}


TJvmMemoryPool::~TJvmMemoryPool() throw() {
}


void TJvmMemoryPool::__set_committed(const int64_t val) {
  this->committed = val;
}

void TJvmMemoryPool::__set_init(const int64_t val) {
  this->init = val;
}

void TJvmMemoryPool::__set_max(const int64_t val) {
  this->max = val;
}

void TJvmMemoryPool::__set_used(const int64_t val) {
  this->used = val;
}

void TJvmMemoryPool::__set_peak_committed(const int64_t val) {
  this->peak_committed = val;
}

void TJvmMemoryPool::__set_peak_init(const int64_t val) {
  this->peak_init = val;
}

void TJvmMemoryPool::__set_peak_max(const int64_t val) {
  this->peak_max = val;
}

void TJvmMemoryPool::__set_peak_used(const int64_t val) {
  this->peak_used = val;
}

void TJvmMemoryPool::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const TJvmMemoryPool& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TJvmMemoryPool &a, TJvmMemoryPool &b) {
  using ::std::swap;
  swap(a.committed, b.committed);
  swap(a.init, b.init);
  swap(a.max, b.max);
  swap(a.used, b.used);
  swap(a.peak_committed, b.peak_committed);
  swap(a.peak_init, b.peak_init);
  swap(a.peak_max, b.peak_max);
  swap(a.peak_used, b.peak_used);
  swap(a.name, b.name);
}

TJvmMemoryPool::TJvmMemoryPool(const TJvmMemoryPool& other346) {
  committed = other346.committed;
  init = other346.init;
  max = other346.max;
  used = other346.used;
  peak_committed = other346.peak_committed;
  peak_init = other346.peak_init;
  peak_max = other346.peak_max;
  peak_used = other346.peak_used;
  name = other346.name;
}
TJvmMemoryPool::TJvmMemoryPool( TJvmMemoryPool&& other347) {
  committed = std::move(other347.committed);
  init = std::move(other347.init);
  max = std::move(other347.max);
  used = std::move(other347.used);
  peak_committed = std::move(other347.peak_committed);
  peak_init = std::move(other347.peak_init);
  peak_max = std::move(other347.peak_max);
  peak_used = std::move(other347.peak_used);
  name = std::move(other347.name);
}
TJvmMemoryPool& TJvmMemoryPool::operator=(const TJvmMemoryPool& other348) {
  committed = other348.committed;
  init = other348.init;
  max = other348.max;
  used = other348.used;
  peak_committed = other348.peak_committed;
  peak_init = other348.peak_init;
  peak_max = other348.peak_max;
  peak_used = other348.peak_used;
  name = other348.name;
  return *this;
}
TJvmMemoryPool& TJvmMemoryPool::operator=(TJvmMemoryPool&& other349) {
  committed = std::move(other349.committed);
  init = std::move(other349.init);
  max = std::move(other349.max);
  used = std::move(other349.used);
  peak_committed = std::move(other349.peak_committed);
  peak_init = std::move(other349.peak_init);
  peak_max = std::move(other349.peak_max);
  peak_used = std::move(other349.peak_used);
  name = std::move(other349.name);
  return *this;
}
void TJvmMemoryPool::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TJvmMemoryPool(";
  out << "committed=" << to_string(committed);
  out << ", " << "init=" << to_string(init);
  out << ", " << "max=" << to_string(max);
  out << ", " << "used=" << to_string(used);
  out << ", " << "peak_committed=" << to_string(peak_committed);
  out << ", " << "peak_init=" << to_string(peak_init);
  out << ", " << "peak_max=" << to_string(peak_max);
  out << ", " << "peak_used=" << to_string(peak_used);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


TGetJvmMemoryMetricsResponse::~TGetJvmMemoryMetricsResponse() throw() {
}


void TGetJvmMemoryMetricsResponse::__set_memory_pools(const std::vector<TJvmMemoryPool> & val) {
  this->memory_pools = val;
}

void TGetJvmMemoryMetricsResponse::__set_gc_num_warn_threshold_exceeded(const int64_t val) {
  this->gc_num_warn_threshold_exceeded = val;
}

void TGetJvmMemoryMetricsResponse::__set_gc_num_info_threshold_exceeded(const int64_t val) {
  this->gc_num_info_threshold_exceeded = val;
}

void TGetJvmMemoryMetricsResponse::__set_gc_total_extra_sleep_time_millis(const int64_t val) {
  this->gc_total_extra_sleep_time_millis = val;
}

void TGetJvmMemoryMetricsResponse::__set_gc_count(const int64_t val) {
  this->gc_count = val;
}

void TGetJvmMemoryMetricsResponse::__set_gc_time_millis(const int64_t val) {
  this->gc_time_millis = val;
}
std::ostream& operator<<(std::ostream& out, const TGetJvmMemoryMetricsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetJvmMemoryMetricsResponse &a, TGetJvmMemoryMetricsResponse &b) {
  using ::std::swap;
  swap(a.memory_pools, b.memory_pools);
  swap(a.gc_num_warn_threshold_exceeded, b.gc_num_warn_threshold_exceeded);
  swap(a.gc_num_info_threshold_exceeded, b.gc_num_info_threshold_exceeded);
  swap(a.gc_total_extra_sleep_time_millis, b.gc_total_extra_sleep_time_millis);
  swap(a.gc_count, b.gc_count);
  swap(a.gc_time_millis, b.gc_time_millis);
}

TGetJvmMemoryMetricsResponse::TGetJvmMemoryMetricsResponse(const TGetJvmMemoryMetricsResponse& other356) {
  memory_pools = other356.memory_pools;
  gc_num_warn_threshold_exceeded = other356.gc_num_warn_threshold_exceeded;
  gc_num_info_threshold_exceeded = other356.gc_num_info_threshold_exceeded;
  gc_total_extra_sleep_time_millis = other356.gc_total_extra_sleep_time_millis;
  gc_count = other356.gc_count;
  gc_time_millis = other356.gc_time_millis;
}
TGetJvmMemoryMetricsResponse::TGetJvmMemoryMetricsResponse( TGetJvmMemoryMetricsResponse&& other357) {
  memory_pools = std::move(other357.memory_pools);
  gc_num_warn_threshold_exceeded = std::move(other357.gc_num_warn_threshold_exceeded);
  gc_num_info_threshold_exceeded = std::move(other357.gc_num_info_threshold_exceeded);
  gc_total_extra_sleep_time_millis = std::move(other357.gc_total_extra_sleep_time_millis);
  gc_count = std::move(other357.gc_count);
  gc_time_millis = std::move(other357.gc_time_millis);
}
TGetJvmMemoryMetricsResponse& TGetJvmMemoryMetricsResponse::operator=(const TGetJvmMemoryMetricsResponse& other358) {
  memory_pools = other358.memory_pools;
  gc_num_warn_threshold_exceeded = other358.gc_num_warn_threshold_exceeded;
  gc_num_info_threshold_exceeded = other358.gc_num_info_threshold_exceeded;
  gc_total_extra_sleep_time_millis = other358.gc_total_extra_sleep_time_millis;
  gc_count = other358.gc_count;
  gc_time_millis = other358.gc_time_millis;
  return *this;
}
TGetJvmMemoryMetricsResponse& TGetJvmMemoryMetricsResponse::operator=(TGetJvmMemoryMetricsResponse&& other359) {
  memory_pools = std::move(other359.memory_pools);
  gc_num_warn_threshold_exceeded = std::move(other359.gc_num_warn_threshold_exceeded);
  gc_num_info_threshold_exceeded = std::move(other359.gc_num_info_threshold_exceeded);
  gc_total_extra_sleep_time_millis = std::move(other359.gc_total_extra_sleep_time_millis);
  gc_count = std::move(other359.gc_count);
  gc_time_millis = std::move(other359.gc_time_millis);
  return *this;
}
void TGetJvmMemoryMetricsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetJvmMemoryMetricsResponse(";
  out << "memory_pools=" << to_string(memory_pools);
  out << ", " << "gc_num_warn_threshold_exceeded=" << to_string(gc_num_warn_threshold_exceeded);
  out << ", " << "gc_num_info_threshold_exceeded=" << to_string(gc_num_info_threshold_exceeded);
  out << ", " << "gc_total_extra_sleep_time_millis=" << to_string(gc_total_extra_sleep_time_millis);
  out << ", " << "gc_count=" << to_string(gc_count);
  out << ", " << "gc_time_millis=" << to_string(gc_time_millis);
  out << ")";
}


TJvmThreadInfo::~TJvmThreadInfo() throw() {
}


void TJvmThreadInfo::__set_summary(const std::string& val) {
  this->summary = val;
}

void TJvmThreadInfo::__set_cpu_time_in_ns(const int64_t val) {
  this->cpu_time_in_ns = val;
}

void TJvmThreadInfo::__set_user_time_in_ns(const int64_t val) {
  this->user_time_in_ns = val;
}

void TJvmThreadInfo::__set_blocked_count(const int64_t val) {
  this->blocked_count = val;
}

void TJvmThreadInfo::__set_blocked_time_in_ms(const int64_t val) {
  this->blocked_time_in_ms = val;
}

void TJvmThreadInfo::__set_is_in_native(const bool val) {
  this->is_in_native = val;
}
std::ostream& operator<<(std::ostream& out, const TJvmThreadInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TJvmThreadInfo &a, TJvmThreadInfo &b) {
  using ::std::swap;
  swap(a.summary, b.summary);
  swap(a.cpu_time_in_ns, b.cpu_time_in_ns);
  swap(a.user_time_in_ns, b.user_time_in_ns);
  swap(a.blocked_count, b.blocked_count);
  swap(a.blocked_time_in_ms, b.blocked_time_in_ms);
  swap(a.is_in_native, b.is_in_native);
}

TJvmThreadInfo::TJvmThreadInfo(const TJvmThreadInfo& other360) {
  summary = other360.summary;
  cpu_time_in_ns = other360.cpu_time_in_ns;
  user_time_in_ns = other360.user_time_in_ns;
  blocked_count = other360.blocked_count;
  blocked_time_in_ms = other360.blocked_time_in_ms;
  is_in_native = other360.is_in_native;
}
TJvmThreadInfo::TJvmThreadInfo( TJvmThreadInfo&& other361) {
  summary = std::move(other361.summary);
  cpu_time_in_ns = std::move(other361.cpu_time_in_ns);
  user_time_in_ns = std::move(other361.user_time_in_ns);
  blocked_count = std::move(other361.blocked_count);
  blocked_time_in_ms = std::move(other361.blocked_time_in_ms);
  is_in_native = std::move(other361.is_in_native);
}
TJvmThreadInfo& TJvmThreadInfo::operator=(const TJvmThreadInfo& other362) {
  summary = other362.summary;
  cpu_time_in_ns = other362.cpu_time_in_ns;
  user_time_in_ns = other362.user_time_in_ns;
  blocked_count = other362.blocked_count;
  blocked_time_in_ms = other362.blocked_time_in_ms;
  is_in_native = other362.is_in_native;
  return *this;
}
TJvmThreadInfo& TJvmThreadInfo::operator=(TJvmThreadInfo&& other363) {
  summary = std::move(other363.summary);
  cpu_time_in_ns = std::move(other363.cpu_time_in_ns);
  user_time_in_ns = std::move(other363.user_time_in_ns);
  blocked_count = std::move(other363.blocked_count);
  blocked_time_in_ms = std::move(other363.blocked_time_in_ms);
  is_in_native = std::move(other363.is_in_native);
  return *this;
}
void TJvmThreadInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TJvmThreadInfo(";
  out << "summary=" << to_string(summary);
  out << ", " << "cpu_time_in_ns=" << to_string(cpu_time_in_ns);
  out << ", " << "user_time_in_ns=" << to_string(user_time_in_ns);
  out << ", " << "blocked_count=" << to_string(blocked_count);
  out << ", " << "blocked_time_in_ms=" << to_string(blocked_time_in_ms);
  out << ", " << "is_in_native=" << to_string(is_in_native);
  out << ")";
}


TGetJvmThreadsInfoRequest::~TGetJvmThreadsInfoRequest() throw() {
}


void TGetJvmThreadsInfoRequest::__set_get_complete_info(const bool val) {
  this->get_complete_info = val;
}
std::ostream& operator<<(std::ostream& out, const TGetJvmThreadsInfoRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetJvmThreadsInfoRequest &a, TGetJvmThreadsInfoRequest &b) {
  using ::std::swap;
  swap(a.get_complete_info, b.get_complete_info);
}

TGetJvmThreadsInfoRequest::TGetJvmThreadsInfoRequest(const TGetJvmThreadsInfoRequest& other364) {
  get_complete_info = other364.get_complete_info;
}
TGetJvmThreadsInfoRequest::TGetJvmThreadsInfoRequest( TGetJvmThreadsInfoRequest&& other365) {
  get_complete_info = std::move(other365.get_complete_info);
}
TGetJvmThreadsInfoRequest& TGetJvmThreadsInfoRequest::operator=(const TGetJvmThreadsInfoRequest& other366) {
  get_complete_info = other366.get_complete_info;
  return *this;
}
TGetJvmThreadsInfoRequest& TGetJvmThreadsInfoRequest::operator=(TGetJvmThreadsInfoRequest&& other367) {
  get_complete_info = std::move(other367.get_complete_info);
  return *this;
}
void TGetJvmThreadsInfoRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetJvmThreadsInfoRequest(";
  out << "get_complete_info=" << to_string(get_complete_info);
  out << ")";
}


TGetJvmThreadsInfoResponse::~TGetJvmThreadsInfoResponse() throw() {
}


void TGetJvmThreadsInfoResponse::__set_total_thread_count(const int32_t val) {
  this->total_thread_count = val;
}

void TGetJvmThreadsInfoResponse::__set_daemon_thread_count(const int32_t val) {
  this->daemon_thread_count = val;
}

void TGetJvmThreadsInfoResponse::__set_peak_thread_count(const int32_t val) {
  this->peak_thread_count = val;
}

void TGetJvmThreadsInfoResponse::__set_threads(const std::vector<TJvmThreadInfo> & val) {
  this->threads = val;
__isset.threads = true;
}
std::ostream& operator<<(std::ostream& out, const TGetJvmThreadsInfoResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetJvmThreadsInfoResponse &a, TGetJvmThreadsInfoResponse &b) {
  using ::std::swap;
  swap(a.total_thread_count, b.total_thread_count);
  swap(a.daemon_thread_count, b.daemon_thread_count);
  swap(a.peak_thread_count, b.peak_thread_count);
  swap(a.threads, b.threads);
  swap(a.__isset, b.__isset);
}

TGetJvmThreadsInfoResponse::TGetJvmThreadsInfoResponse(const TGetJvmThreadsInfoResponse& other374) {
  total_thread_count = other374.total_thread_count;
  daemon_thread_count = other374.daemon_thread_count;
  peak_thread_count = other374.peak_thread_count;
  threads = other374.threads;
  __isset = other374.__isset;
}
TGetJvmThreadsInfoResponse::TGetJvmThreadsInfoResponse( TGetJvmThreadsInfoResponse&& other375) {
  total_thread_count = std::move(other375.total_thread_count);
  daemon_thread_count = std::move(other375.daemon_thread_count);
  peak_thread_count = std::move(other375.peak_thread_count);
  threads = std::move(other375.threads);
  __isset = std::move(other375.__isset);
}
TGetJvmThreadsInfoResponse& TGetJvmThreadsInfoResponse::operator=(const TGetJvmThreadsInfoResponse& other376) {
  total_thread_count = other376.total_thread_count;
  daemon_thread_count = other376.daemon_thread_count;
  peak_thread_count = other376.peak_thread_count;
  threads = other376.threads;
  __isset = other376.__isset;
  return *this;
}
TGetJvmThreadsInfoResponse& TGetJvmThreadsInfoResponse::operator=(TGetJvmThreadsInfoResponse&& other377) {
  total_thread_count = std::move(other377.total_thread_count);
  daemon_thread_count = std::move(other377.daemon_thread_count);
  peak_thread_count = std::move(other377.peak_thread_count);
  threads = std::move(other377.threads);
  __isset = std::move(other377.__isset);
  return *this;
}
void TGetJvmThreadsInfoResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetJvmThreadsInfoResponse(";
  out << "total_thread_count=" << to_string(total_thread_count);
  out << ", " << "daemon_thread_count=" << to_string(daemon_thread_count);
  out << ", " << "peak_thread_count=" << to_string(peak_thread_count);
  out << ", " << "threads="; (__isset.threads ? (out << to_string(threads)) : (out << "<null>"));
  out << ")";
}


TGetJMXJsonResponse::~TGetJMXJsonResponse() throw() {
}


void TGetJMXJsonResponse::__set_jmx_json(const std::string& val) {
  this->jmx_json = val;
}
std::ostream& operator<<(std::ostream& out, const TGetJMXJsonResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetJMXJsonResponse &a, TGetJMXJsonResponse &b) {
  using ::std::swap;
  swap(a.jmx_json, b.jmx_json);
}

TGetJMXJsonResponse::TGetJMXJsonResponse(const TGetJMXJsonResponse& other378) {
  jmx_json = other378.jmx_json;
}
TGetJMXJsonResponse::TGetJMXJsonResponse( TGetJMXJsonResponse&& other379) {
  jmx_json = std::move(other379.jmx_json);
}
TGetJMXJsonResponse& TGetJMXJsonResponse::operator=(const TGetJMXJsonResponse& other380) {
  jmx_json = other380.jmx_json;
  return *this;
}
TGetJMXJsonResponse& TGetJMXJsonResponse::operator=(TGetJMXJsonResponse&& other381) {
  jmx_json = std::move(other381.jmx_json);
  return *this;
}
void TGetJMXJsonResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetJMXJsonResponse(";
  out << "jmx_json=" << to_string(jmx_json);
  out << ")";
}


TGetHadoopConfigRequest::~TGetHadoopConfigRequest() throw() {
}


void TGetHadoopConfigRequest::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const TGetHadoopConfigRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetHadoopConfigRequest &a, TGetHadoopConfigRequest &b) {
  using ::std::swap;
  swap(a.name, b.name);
}

TGetHadoopConfigRequest::TGetHadoopConfigRequest(const TGetHadoopConfigRequest& other382) {
  name = other382.name;
}
TGetHadoopConfigRequest::TGetHadoopConfigRequest( TGetHadoopConfigRequest&& other383) {
  name = std::move(other383.name);
}
TGetHadoopConfigRequest& TGetHadoopConfigRequest::operator=(const TGetHadoopConfigRequest& other384) {
  name = other384.name;
  return *this;
}
TGetHadoopConfigRequest& TGetHadoopConfigRequest::operator=(TGetHadoopConfigRequest&& other385) {
  name = std::move(other385.name);
  return *this;
}
void TGetHadoopConfigRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetHadoopConfigRequest(";
  out << "name=" << to_string(name);
  out << ")";
}


TGetHadoopConfigResponse::~TGetHadoopConfigResponse() throw() {
}


void TGetHadoopConfigResponse::__set_value(const std::string& val) {
  this->value = val;
__isset.value = true;
}
std::ostream& operator<<(std::ostream& out, const TGetHadoopConfigResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetHadoopConfigResponse &a, TGetHadoopConfigResponse &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

TGetHadoopConfigResponse::TGetHadoopConfigResponse(const TGetHadoopConfigResponse& other386) {
  value = other386.value;
  __isset = other386.__isset;
}
TGetHadoopConfigResponse::TGetHadoopConfigResponse( TGetHadoopConfigResponse&& other387) {
  value = std::move(other387.value);
  __isset = std::move(other387.__isset);
}
TGetHadoopConfigResponse& TGetHadoopConfigResponse::operator=(const TGetHadoopConfigResponse& other388) {
  value = other388.value;
  __isset = other388.__isset;
  return *this;
}
TGetHadoopConfigResponse& TGetHadoopConfigResponse::operator=(TGetHadoopConfigResponse&& other389) {
  value = std::move(other389.value);
  __isset = std::move(other389.__isset);
  return *this;
}
void TGetHadoopConfigResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetHadoopConfigResponse(";
  out << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ")";
}


TGetAllHadoopConfigsResponse::~TGetAllHadoopConfigsResponse() throw() {
}


void TGetAllHadoopConfigsResponse::__set_configs(const std::map<std::string, std::string> & val) {
  this->configs = val;
__isset.configs = true;
}
std::ostream& operator<<(std::ostream& out, const TGetAllHadoopConfigsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetAllHadoopConfigsResponse &a, TGetAllHadoopConfigsResponse &b) {
  using ::std::swap;
  swap(a.configs, b.configs);
  swap(a.__isset, b.__isset);
}

TGetAllHadoopConfigsResponse::TGetAllHadoopConfigsResponse(const TGetAllHadoopConfigsResponse& other398) {
  configs = other398.configs;
  __isset = other398.__isset;
}
TGetAllHadoopConfigsResponse::TGetAllHadoopConfigsResponse( TGetAllHadoopConfigsResponse&& other399) {
  configs = std::move(other399.configs);
  __isset = std::move(other399.__isset);
}
TGetAllHadoopConfigsResponse& TGetAllHadoopConfigsResponse::operator=(const TGetAllHadoopConfigsResponse& other400) {
  configs = other400.configs;
  __isset = other400.__isset;
  return *this;
}
TGetAllHadoopConfigsResponse& TGetAllHadoopConfigsResponse::operator=(TGetAllHadoopConfigsResponse&& other401) {
  configs = std::move(other401.configs);
  __isset = std::move(other401.__isset);
  return *this;
}
void TGetAllHadoopConfigsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetAllHadoopConfigsResponse(";
  out << "configs="; (__isset.configs ? (out << to_string(configs)) : (out << "<null>"));
  out << ")";
}


TGetHadoopGroupsRequest::~TGetHadoopGroupsRequest() throw() {
}


void TGetHadoopGroupsRequest::__set_user(const std::string& val) {
  this->user = val;
}
std::ostream& operator<<(std::ostream& out, const TGetHadoopGroupsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetHadoopGroupsRequest &a, TGetHadoopGroupsRequest &b) {
  using ::std::swap;
  swap(a.user, b.user);
}

TGetHadoopGroupsRequest::TGetHadoopGroupsRequest(const TGetHadoopGroupsRequest& other402) {
  user = other402.user;
}
TGetHadoopGroupsRequest::TGetHadoopGroupsRequest( TGetHadoopGroupsRequest&& other403) {
  user = std::move(other403.user);
}
TGetHadoopGroupsRequest& TGetHadoopGroupsRequest::operator=(const TGetHadoopGroupsRequest& other404) {
  user = other404.user;
  return *this;
}
TGetHadoopGroupsRequest& TGetHadoopGroupsRequest::operator=(TGetHadoopGroupsRequest&& other405) {
  user = std::move(other405.user);
  return *this;
}
void TGetHadoopGroupsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetHadoopGroupsRequest(";
  out << "user=" << to_string(user);
  out << ")";
}


TGetHadoopGroupsResponse::~TGetHadoopGroupsResponse() throw() {
}


void TGetHadoopGroupsResponse::__set_groups(const std::vector<std::string> & val) {
  this->groups = val;
}
std::ostream& operator<<(std::ostream& out, const TGetHadoopGroupsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetHadoopGroupsResponse &a, TGetHadoopGroupsResponse &b) {
  using ::std::swap;
  swap(a.groups, b.groups);
}

TGetHadoopGroupsResponse::TGetHadoopGroupsResponse(const TGetHadoopGroupsResponse& other412) {
  groups = other412.groups;
}
TGetHadoopGroupsResponse::TGetHadoopGroupsResponse( TGetHadoopGroupsResponse&& other413) {
  groups = std::move(other413.groups);
}
TGetHadoopGroupsResponse& TGetHadoopGroupsResponse::operator=(const TGetHadoopGroupsResponse& other414) {
  groups = other414.groups;
  return *this;
}
TGetHadoopGroupsResponse& TGetHadoopGroupsResponse::operator=(TGetHadoopGroupsResponse&& other415) {
  groups = std::move(other415.groups);
  return *this;
}
void TGetHadoopGroupsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetHadoopGroupsResponse(";
  out << "groups=" << to_string(groups);
  out << ")";
}


TBuildTestDescriptorTableParams::~TBuildTestDescriptorTableParams() throw() {
}


void TBuildTestDescriptorTableParams::__set_slot_types(const std::vector<std::vector< ::impala::TColumnType> > & val) {
  this->slot_types = val;
}
std::ostream& operator<<(std::ostream& out, const TBuildTestDescriptorTableParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TBuildTestDescriptorTableParams &a, TBuildTestDescriptorTableParams &b) {
  using ::std::swap;
  swap(a.slot_types, b.slot_types);
}

TBuildTestDescriptorTableParams::TBuildTestDescriptorTableParams(const TBuildTestDescriptorTableParams& other428) {
  slot_types = other428.slot_types;
}
TBuildTestDescriptorTableParams::TBuildTestDescriptorTableParams( TBuildTestDescriptorTableParams&& other429) {
  slot_types = std::move(other429.slot_types);
}
TBuildTestDescriptorTableParams& TBuildTestDescriptorTableParams::operator=(const TBuildTestDescriptorTableParams& other430) {
  slot_types = other430.slot_types;
  return *this;
}
TBuildTestDescriptorTableParams& TBuildTestDescriptorTableParams::operator=(TBuildTestDescriptorTableParams&& other431) {
  slot_types = std::move(other431.slot_types);
  return *this;
}
void TBuildTestDescriptorTableParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBuildTestDescriptorTableParams(";
  out << "slot_types=" << to_string(slot_types);
  out << ")";
}


TTestCaseData::~TTestCaseData() throw() {
}


void TTestCaseData::__set_query_stmt(const std::string& val) {
  this->query_stmt = val;
}

void TTestCaseData::__set_tables_and_views(const std::vector< ::impala::TTable> & val) {
  this->tables_and_views = val;
__isset.tables_and_views = true;
}

void TTestCaseData::__set_dbs(const std::vector< ::impala::TDatabase> & val) {
  this->dbs = val;
__isset.dbs = true;
}

void TTestCaseData::__set_testcase_data_path(const std::string& val) {
  this->testcase_data_path = val;
}

void TTestCaseData::__set_impala_version(const std::string& val) {
  this->impala_version = val;
}
std::ostream& operator<<(std::ostream& out, const TTestCaseData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TTestCaseData &a, TTestCaseData &b) {
  using ::std::swap;
  swap(a.query_stmt, b.query_stmt);
  swap(a.tables_and_views, b.tables_and_views);
  swap(a.dbs, b.dbs);
  swap(a.testcase_data_path, b.testcase_data_path);
  swap(a.impala_version, b.impala_version);
  swap(a.__isset, b.__isset);
}

TTestCaseData::TTestCaseData(const TTestCaseData& other444) {
  query_stmt = other444.query_stmt;
  tables_and_views = other444.tables_and_views;
  dbs = other444.dbs;
  testcase_data_path = other444.testcase_data_path;
  impala_version = other444.impala_version;
  __isset = other444.__isset;
}
TTestCaseData::TTestCaseData( TTestCaseData&& other445) {
  query_stmt = std::move(other445.query_stmt);
  tables_and_views = std::move(other445.tables_and_views);
  dbs = std::move(other445.dbs);
  testcase_data_path = std::move(other445.testcase_data_path);
  impala_version = std::move(other445.impala_version);
  __isset = std::move(other445.__isset);
}
TTestCaseData& TTestCaseData::operator=(const TTestCaseData& other446) {
  query_stmt = other446.query_stmt;
  tables_and_views = other446.tables_and_views;
  dbs = other446.dbs;
  testcase_data_path = other446.testcase_data_path;
  impala_version = other446.impala_version;
  __isset = other446.__isset;
  return *this;
}
TTestCaseData& TTestCaseData::operator=(TTestCaseData&& other447) {
  query_stmt = std::move(other447.query_stmt);
  tables_and_views = std::move(other447.tables_and_views);
  dbs = std::move(other447.dbs);
  testcase_data_path = std::move(other447.testcase_data_path);
  impala_version = std::move(other447.impala_version);
  __isset = std::move(other447.__isset);
  return *this;
}
void TTestCaseData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTestCaseData(";
  out << "query_stmt=" << to_string(query_stmt);
  out << ", " << "tables_and_views="; (__isset.tables_and_views ? (out << to_string(tables_and_views)) : (out << "<null>"));
  out << ", " << "dbs="; (__isset.dbs ? (out << to_string(dbs)) : (out << "<null>"));
  out << ", " << "testcase_data_path=" << to_string(testcase_data_path);
  out << ", " << "impala_version=" << to_string(impala_version);
  out << ")";
}


TQueryCompleteContext::~TQueryCompleteContext() throw() {
}


void TQueryCompleteContext::__set_lineage_string(const std::string& val) {
  this->lineage_string = val;
}
std::ostream& operator<<(std::ostream& out, const TQueryCompleteContext& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TQueryCompleteContext &a, TQueryCompleteContext &b) {
  using ::std::swap;
  swap(a.lineage_string, b.lineage_string);
}

TQueryCompleteContext::TQueryCompleteContext(const TQueryCompleteContext& other448) {
  lineage_string = other448.lineage_string;
}
TQueryCompleteContext::TQueryCompleteContext( TQueryCompleteContext&& other449) {
  lineage_string = std::move(other449.lineage_string);
}
TQueryCompleteContext& TQueryCompleteContext::operator=(const TQueryCompleteContext& other450) {
  lineage_string = other450.lineage_string;
  return *this;
}
TQueryCompleteContext& TQueryCompleteContext::operator=(TQueryCompleteContext&& other451) {
  lineage_string = std::move(other451.lineage_string);
  return *this;
}
void TQueryCompleteContext::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TQueryCompleteContext(";
  out << "lineage_string=" << to_string(lineage_string);
  out << ")";
}


TWrappedHttpRequest::~TWrappedHttpRequest() throw() {
}


void TWrappedHttpRequest::__set_method(const std::string& val) {
  this->method = val;
}

void TWrappedHttpRequest::__set_server_name(const std::string& val) {
  this->server_name = val;
}

void TWrappedHttpRequest::__set_server_port(const int32_t val) {
  this->server_port = val;
}

void TWrappedHttpRequest::__set_path(const std::string& val) {
  this->path = val;
}

void TWrappedHttpRequest::__set_params(const std::map<std::string, std::string> & val) {
  this->params = val;
}

void TWrappedHttpRequest::__set_headers(const std::map<std::string, std::string> & val) {
  this->headers = val;
}

void TWrappedHttpRequest::__set_cookies(const std::map<std::string, std::string> & val) {
  this->cookies = val;
}

void TWrappedHttpRequest::__set_content(const std::string& val) {
  this->content = val;
__isset.content = true;
}

void TWrappedHttpRequest::__set_remote_ip(const std::string& val) {
  this->remote_ip = val;
}

void TWrappedHttpRequest::__set_secure(const bool val) {
  this->secure = val;
}
std::ostream& operator<<(std::ostream& out, const TWrappedHttpRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TWrappedHttpRequest &a, TWrappedHttpRequest &b) {
  using ::std::swap;
  swap(a.method, b.method);
  swap(a.server_name, b.server_name);
  swap(a.server_port, b.server_port);
  swap(a.path, b.path);
  swap(a.params, b.params);
  swap(a.headers, b.headers);
  swap(a.cookies, b.cookies);
  swap(a.content, b.content);
  swap(a.remote_ip, b.remote_ip);
  swap(a.secure, b.secure);
  swap(a.__isset, b.__isset);
}

TWrappedHttpRequest::TWrappedHttpRequest(const TWrappedHttpRequest& other476) {
  method = other476.method;
  server_name = other476.server_name;
  server_port = other476.server_port;
  path = other476.path;
  params = other476.params;
  headers = other476.headers;
  cookies = other476.cookies;
  content = other476.content;
  remote_ip = other476.remote_ip;
  secure = other476.secure;
  __isset = other476.__isset;
}
TWrappedHttpRequest::TWrappedHttpRequest( TWrappedHttpRequest&& other477) {
  method = std::move(other477.method);
  server_name = std::move(other477.server_name);
  server_port = std::move(other477.server_port);
  path = std::move(other477.path);
  params = std::move(other477.params);
  headers = std::move(other477.headers);
  cookies = std::move(other477.cookies);
  content = std::move(other477.content);
  remote_ip = std::move(other477.remote_ip);
  secure = std::move(other477.secure);
  __isset = std::move(other477.__isset);
}
TWrappedHttpRequest& TWrappedHttpRequest::operator=(const TWrappedHttpRequest& other478) {
  method = other478.method;
  server_name = other478.server_name;
  server_port = other478.server_port;
  path = other478.path;
  params = other478.params;
  headers = other478.headers;
  cookies = other478.cookies;
  content = other478.content;
  remote_ip = other478.remote_ip;
  secure = other478.secure;
  __isset = other478.__isset;
  return *this;
}
TWrappedHttpRequest& TWrappedHttpRequest::operator=(TWrappedHttpRequest&& other479) {
  method = std::move(other479.method);
  server_name = std::move(other479.server_name);
  server_port = std::move(other479.server_port);
  path = std::move(other479.path);
  params = std::move(other479.params);
  headers = std::move(other479.headers);
  cookies = std::move(other479.cookies);
  content = std::move(other479.content);
  remote_ip = std::move(other479.remote_ip);
  secure = std::move(other479.secure);
  __isset = std::move(other479.__isset);
  return *this;
}
void TWrappedHttpRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TWrappedHttpRequest(";
  out << "method=" << to_string(method);
  out << ", " << "server_name=" << to_string(server_name);
  out << ", " << "server_port=" << to_string(server_port);
  out << ", " << "path=" << to_string(path);
  out << ", " << "params=" << to_string(params);
  out << ", " << "headers=" << to_string(headers);
  out << ", " << "cookies=" << to_string(cookies);
  out << ", " << "content="; (__isset.content ? (out << to_string(content)) : (out << "<null>"));
  out << ", " << "remote_ip=" << to_string(remote_ip);
  out << ", " << "secure=" << to_string(secure);
  out << ")";
}


TWrappedHttpResponse::~TWrappedHttpResponse() throw() {
}


void TWrappedHttpResponse::__set_status_code(const int16_t val) {
  this->status_code = val;
}

void TWrappedHttpResponse::__set_status_text(const std::string& val) {
  this->status_text = val;
}

void TWrappedHttpResponse::__set_headers(const std::map<std::string, std::string> & val) {
  this->headers = val;
}

void TWrappedHttpResponse::__set_cookies(const std::map<std::string, std::string> & val) {
  this->cookies = val;
}

void TWrappedHttpResponse::__set_content(const std::string& val) {
  this->content = val;
__isset.content = true;
}

void TWrappedHttpResponse::__set_content_type(const std::string& val) {
  this->content_type = val;
__isset.content_type = true;
}
std::ostream& operator<<(std::ostream& out, const TWrappedHttpResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TWrappedHttpResponse &a, TWrappedHttpResponse &b) {
  using ::std::swap;
  swap(a.status_code, b.status_code);
  swap(a.status_text, b.status_text);
  swap(a.headers, b.headers);
  swap(a.cookies, b.cookies);
  swap(a.content, b.content);
  swap(a.content_type, b.content_type);
  swap(a.__isset, b.__isset);
}

TWrappedHttpResponse::TWrappedHttpResponse(const TWrappedHttpResponse& other496) {
  status_code = other496.status_code;
  status_text = other496.status_text;
  headers = other496.headers;
  cookies = other496.cookies;
  content = other496.content;
  content_type = other496.content_type;
  __isset = other496.__isset;
}
TWrappedHttpResponse::TWrappedHttpResponse( TWrappedHttpResponse&& other497) {
  status_code = std::move(other497.status_code);
  status_text = std::move(other497.status_text);
  headers = std::move(other497.headers);
  cookies = std::move(other497.cookies);
  content = std::move(other497.content);
  content_type = std::move(other497.content_type);
  __isset = std::move(other497.__isset);
}
TWrappedHttpResponse& TWrappedHttpResponse::operator=(const TWrappedHttpResponse& other498) {
  status_code = other498.status_code;
  status_text = other498.status_text;
  headers = other498.headers;
  cookies = other498.cookies;
  content = other498.content;
  content_type = other498.content_type;
  __isset = other498.__isset;
  return *this;
}
TWrappedHttpResponse& TWrappedHttpResponse::operator=(TWrappedHttpResponse&& other499) {
  status_code = std::move(other499.status_code);
  status_text = std::move(other499.status_text);
  headers = std::move(other499.headers);
  cookies = std::move(other499.cookies);
  content = std::move(other499.content);
  content_type = std::move(other499.content_type);
  __isset = std::move(other499.__isset);
  return *this;
}
void TWrappedHttpResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TWrappedHttpResponse(";
  out << "status_code=" << to_string(status_code);
  out << ", " << "status_text=" << to_string(status_text);
  out << ", " << "headers=" << to_string(headers);
  out << ", " << "cookies=" << to_string(cookies);
  out << ", " << "content="; (__isset.content ? (out << to_string(content)) : (out << "<null>"));
  out << ", " << "content_type="; (__isset.content_type ? (out << to_string(content_type)) : (out << "<null>"));
  out << ")";
}

} // namespace
