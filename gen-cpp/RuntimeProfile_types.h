/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RuntimeProfile_TYPES_H
#define RuntimeProfile_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "ExecStats_types.h"
#include "Metrics_types.h"
#include "Types_types.h"


namespace impala {

struct TRuntimeProfileFormat {
  enum type {
    STRING = 0,
    BASE64 = 1,
    THRIFT = 2,
    JSON = 3
  };
};

extern const std::map<int, const char*> _TRuntimeProfileFormat_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TRuntimeProfileFormat::type& val);

class TCounter;

class TAggCounter;

class TEventSequence;

class TAggEventSequence;

class TTimeSeriesCounter;

class TAggTimeSeriesCounter;

class TSummaryStatsCounter;

class TAggSummaryStatsCounter;

class TRuntimeProfileNodeMetadata;

class TAggregatedRuntimeProfileNode;

class TRuntimeProfileNode;

class TRuntimeProfileTree;

class TRuntimeProfileForest;


class TCounter {
 public:

  TCounter(const TCounter&);
  TCounter(TCounter&&);
  TCounter& operator=(const TCounter&);
  TCounter& operator=(TCounter&&);
  TCounter() : name(), unit(( ::impala::TUnit::type)0), value(0) {
  }

  virtual ~TCounter() throw();
  std::string name;
   ::impala::TUnit::type unit;
  int64_t value;

  void __set_name(const std::string& val);

  void __set_unit(const  ::impala::TUnit::type val);

  void __set_value(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCounter &a, TCounter &b);

std::ostream& operator<<(std::ostream& out, const TCounter& obj);


class TAggCounter {
 public:

  TAggCounter(const TAggCounter&);
  TAggCounter(TAggCounter&&);
  TAggCounter& operator=(const TAggCounter&);
  TAggCounter& operator=(TAggCounter&&);
  TAggCounter() : name(), unit(( ::impala::TUnit::type)0) {
  }

  virtual ~TAggCounter() throw();
  std::string name;
   ::impala::TUnit::type unit;
  std::vector<bool>  has_value;
  std::vector<int64_t>  values;

  void __set_name(const std::string& val);

  void __set_unit(const  ::impala::TUnit::type val);

  void __set_has_value(const std::vector<bool> & val);

  void __set_values(const std::vector<int64_t> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TAggCounter &a, TAggCounter &b);

std::ostream& operator<<(std::ostream& out, const TAggCounter& obj);


class TEventSequence {
 public:

  TEventSequence(const TEventSequence&);
  TEventSequence(TEventSequence&&);
  TEventSequence& operator=(const TEventSequence&);
  TEventSequence& operator=(TEventSequence&&);
  TEventSequence() : name() {
  }

  virtual ~TEventSequence() throw();
  std::string name;
  std::vector<int64_t>  timestamps;
  std::vector<std::string>  labels;

  void __set_name(const std::string& val);

  void __set_timestamps(const std::vector<int64_t> & val);

  void __set_labels(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TEventSequence &a, TEventSequence &b);

std::ostream& operator<<(std::ostream& out, const TEventSequence& obj);


class TAggEventSequence {
 public:

  TAggEventSequence(const TAggEventSequence&);
  TAggEventSequence(TAggEventSequence&&);
  TAggEventSequence& operator=(const TAggEventSequence&);
  TAggEventSequence& operator=(TAggEventSequence&&);
  TAggEventSequence() : name() {
  }

  virtual ~TAggEventSequence() throw();
  std::string name;
  std::vector<std::string>  label_dict;
  std::vector<std::vector<int32_t> >  label_idxs;
  std::vector<std::vector<int64_t> >  timestamps;

  void __set_name(const std::string& val);

  void __set_label_dict(const std::vector<std::string> & val);

  void __set_label_idxs(const std::vector<std::vector<int32_t> > & val);

  void __set_timestamps(const std::vector<std::vector<int64_t> > & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TAggEventSequence &a, TAggEventSequence &b);

std::ostream& operator<<(std::ostream& out, const TAggEventSequence& obj);

typedef struct _TTimeSeriesCounter__isset {
  _TTimeSeriesCounter__isset() : start_index(false) {}
  bool start_index :1;
} _TTimeSeriesCounter__isset;

class TTimeSeriesCounter {
 public:

  TTimeSeriesCounter(const TTimeSeriesCounter&);
  TTimeSeriesCounter(TTimeSeriesCounter&&);
  TTimeSeriesCounter& operator=(const TTimeSeriesCounter&);
  TTimeSeriesCounter& operator=(TTimeSeriesCounter&&);
  TTimeSeriesCounter() : name(), unit(( ::impala::TUnit::type)0), period_ms(0), start_index(0) {
  }

  virtual ~TTimeSeriesCounter() throw();
  std::string name;
   ::impala::TUnit::type unit;
  int32_t period_ms;
  std::vector<int64_t>  values;
  int64_t start_index;

  _TTimeSeriesCounter__isset __isset;

  void __set_name(const std::string& val);

  void __set_unit(const  ::impala::TUnit::type val);

  void __set_period_ms(const int32_t val);

  void __set_values(const std::vector<int64_t> & val);

  void __set_start_index(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTimeSeriesCounter &a, TTimeSeriesCounter &b);

std::ostream& operator<<(std::ostream& out, const TTimeSeriesCounter& obj);


class TAggTimeSeriesCounter {
 public:

  TAggTimeSeriesCounter(const TAggTimeSeriesCounter&);
  TAggTimeSeriesCounter(TAggTimeSeriesCounter&&);
  TAggTimeSeriesCounter& operator=(const TAggTimeSeriesCounter&);
  TAggTimeSeriesCounter& operator=(TAggTimeSeriesCounter&&);
  TAggTimeSeriesCounter() : name(), unit(( ::impala::TUnit::type)0) {
  }

  virtual ~TAggTimeSeriesCounter() throw();
  std::string name;
   ::impala::TUnit::type unit;
  std::vector<int32_t>  period_ms;
  std::vector<std::vector<int64_t> >  values;
  std::vector<int64_t>  start_index;

  void __set_name(const std::string& val);

  void __set_unit(const  ::impala::TUnit::type val);

  void __set_period_ms(const std::vector<int32_t> & val);

  void __set_values(const std::vector<std::vector<int64_t> > & val);

  void __set_start_index(const std::vector<int64_t> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TAggTimeSeriesCounter &a, TAggTimeSeriesCounter &b);

std::ostream& operator<<(std::ostream& out, const TAggTimeSeriesCounter& obj);


class TSummaryStatsCounter {
 public:

  TSummaryStatsCounter(const TSummaryStatsCounter&);
  TSummaryStatsCounter(TSummaryStatsCounter&&);
  TSummaryStatsCounter& operator=(const TSummaryStatsCounter&);
  TSummaryStatsCounter& operator=(TSummaryStatsCounter&&);
  TSummaryStatsCounter() : name(), unit(( ::impala::TUnit::type)0), sum(0), total_num_values(0), min_value(0), max_value(0) {
  }

  virtual ~TSummaryStatsCounter() throw();
  std::string name;
   ::impala::TUnit::type unit;
  int64_t sum;
  int64_t total_num_values;
  int64_t min_value;
  int64_t max_value;

  void __set_name(const std::string& val);

  void __set_unit(const  ::impala::TUnit::type val);

  void __set_sum(const int64_t val);

  void __set_total_num_values(const int64_t val);

  void __set_min_value(const int64_t val);

  void __set_max_value(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSummaryStatsCounter &a, TSummaryStatsCounter &b);

std::ostream& operator<<(std::ostream& out, const TSummaryStatsCounter& obj);


class TAggSummaryStatsCounter {
 public:

  TAggSummaryStatsCounter(const TAggSummaryStatsCounter&);
  TAggSummaryStatsCounter(TAggSummaryStatsCounter&&);
  TAggSummaryStatsCounter& operator=(const TAggSummaryStatsCounter&);
  TAggSummaryStatsCounter& operator=(TAggSummaryStatsCounter&&);
  TAggSummaryStatsCounter() : name(), unit(( ::impala::TUnit::type)0) {
  }

  virtual ~TAggSummaryStatsCounter() throw();
  std::string name;
   ::impala::TUnit::type unit;
  std::vector<bool>  has_value;
  std::vector<int64_t>  sum;
  std::vector<int64_t>  total_num_values;
  std::vector<int64_t>  min_value;
  std::vector<int64_t>  max_value;

  void __set_name(const std::string& val);

  void __set_unit(const  ::impala::TUnit::type val);

  void __set_has_value(const std::vector<bool> & val);

  void __set_sum(const std::vector<int64_t> & val);

  void __set_total_num_values(const std::vector<int64_t> & val);

  void __set_min_value(const std::vector<int64_t> & val);

  void __set_max_value(const std::vector<int64_t> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TAggSummaryStatsCounter &a, TAggSummaryStatsCounter &b);

std::ostream& operator<<(std::ostream& out, const TAggSummaryStatsCounter& obj);

typedef struct _TRuntimeProfileNodeMetadata__isset {
  _TRuntimeProfileNodeMetadata__isset() : plan_node_id(false), data_sink_id(false) {}
  bool plan_node_id :1;
  bool data_sink_id :1;
} _TRuntimeProfileNodeMetadata__isset;

class TRuntimeProfileNodeMetadata {
 public:

  TRuntimeProfileNodeMetadata(const TRuntimeProfileNodeMetadata&);
  TRuntimeProfileNodeMetadata(TRuntimeProfileNodeMetadata&&);
  TRuntimeProfileNodeMetadata& operator=(const TRuntimeProfileNodeMetadata&);
  TRuntimeProfileNodeMetadata& operator=(TRuntimeProfileNodeMetadata&&);
  TRuntimeProfileNodeMetadata() : plan_node_id(0), data_sink_id(0) {
  }

  virtual ~TRuntimeProfileNodeMetadata() throw();
   ::impala::TPlanNodeId plan_node_id;
   ::impala::TDataSinkId data_sink_id;

  _TRuntimeProfileNodeMetadata__isset __isset;

  void __set_plan_node_id(const  ::impala::TPlanNodeId val);

  void __set_data_sink_id(const  ::impala::TDataSinkId val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRuntimeProfileNodeMetadata &a, TRuntimeProfileNodeMetadata &b);

std::ostream& operator<<(std::ostream& out, const TRuntimeProfileNodeMetadata& obj);

typedef struct _TAggregatedRuntimeProfileNode__isset {
  _TAggregatedRuntimeProfileNode__isset() : num_instances(false), input_profiles(false), counters(false), info_strings(false), summary_stats_counters(false), event_sequences(false), time_series_counters(false) {}
  bool num_instances :1;
  bool input_profiles :1;
  bool counters :1;
  bool info_strings :1;
  bool summary_stats_counters :1;
  bool event_sequences :1;
  bool time_series_counters :1;
} _TAggregatedRuntimeProfileNode__isset;

class TAggregatedRuntimeProfileNode {
 public:

  TAggregatedRuntimeProfileNode(const TAggregatedRuntimeProfileNode&);
  TAggregatedRuntimeProfileNode(TAggregatedRuntimeProfileNode&&);
  TAggregatedRuntimeProfileNode& operator=(const TAggregatedRuntimeProfileNode&);
  TAggregatedRuntimeProfileNode& operator=(TAggregatedRuntimeProfileNode&&);
  TAggregatedRuntimeProfileNode() : num_instances(0) {
  }

  virtual ~TAggregatedRuntimeProfileNode() throw();
  int32_t num_instances;
  std::vector<std::string>  input_profiles;
  std::vector<TAggCounter>  counters;
  std::map<std::string, std::map<std::string, std::vector<int32_t> > >  info_strings;
  std::vector<TAggSummaryStatsCounter>  summary_stats_counters;
  std::vector<TAggEventSequence>  event_sequences;
  std::vector<TAggTimeSeriesCounter>  time_series_counters;

  _TAggregatedRuntimeProfileNode__isset __isset;

  void __set_num_instances(const int32_t val);

  void __set_input_profiles(const std::vector<std::string> & val);

  void __set_counters(const std::vector<TAggCounter> & val);

  void __set_info_strings(const std::map<std::string, std::map<std::string, std::vector<int32_t> > > & val);

  void __set_summary_stats_counters(const std::vector<TAggSummaryStatsCounter> & val);

  void __set_event_sequences(const std::vector<TAggEventSequence> & val);

  void __set_time_series_counters(const std::vector<TAggTimeSeriesCounter> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TAggregatedRuntimeProfileNode &a, TAggregatedRuntimeProfileNode &b);

std::ostream& operator<<(std::ostream& out, const TAggregatedRuntimeProfileNode& obj);

typedef struct _TRuntimeProfileNode__isset {
  _TRuntimeProfileNode__isset() : event_sequences(false), time_series_counters(false), summary_stats_counters(false), node_metadata(false), aggregated(false) {}
  bool event_sequences :1;
  bool time_series_counters :1;
  bool summary_stats_counters :1;
  bool node_metadata :1;
  bool aggregated :1;
} _TRuntimeProfileNode__isset;

class TRuntimeProfileNode {
 public:

  TRuntimeProfileNode(const TRuntimeProfileNode&);
  TRuntimeProfileNode(TRuntimeProfileNode&&);
  TRuntimeProfileNode& operator=(const TRuntimeProfileNode&);
  TRuntimeProfileNode& operator=(TRuntimeProfileNode&&);
  TRuntimeProfileNode() : name(), num_children(0), metadata(0), indent(0) {
  }

  virtual ~TRuntimeProfileNode() throw();
  std::string name;
  int32_t num_children;
  std::vector<TCounter>  counters;
  int64_t metadata;
  bool indent;
  std::map<std::string, std::string>  info_strings;
  std::vector<std::string>  info_strings_display_order;
  std::map<std::string, std::set<std::string> >  child_counters_map;
  std::vector<TEventSequence>  event_sequences;
  std::vector<TTimeSeriesCounter>  time_series_counters;
  std::vector<TSummaryStatsCounter>  summary_stats_counters;
  TRuntimeProfileNodeMetadata node_metadata;
  TAggregatedRuntimeProfileNode aggregated;

  _TRuntimeProfileNode__isset __isset;

  void __set_name(const std::string& val);

  void __set_num_children(const int32_t val);

  void __set_counters(const std::vector<TCounter> & val);

  void __set_metadata(const int64_t val);

  void __set_indent(const bool val);

  void __set_info_strings(const std::map<std::string, std::string> & val);

  void __set_info_strings_display_order(const std::vector<std::string> & val);

  void __set_child_counters_map(const std::map<std::string, std::set<std::string> > & val);

  void __set_event_sequences(const std::vector<TEventSequence> & val);

  void __set_time_series_counters(const std::vector<TTimeSeriesCounter> & val);

  void __set_summary_stats_counters(const std::vector<TSummaryStatsCounter> & val);

  void __set_node_metadata(const TRuntimeProfileNodeMetadata& val);

  void __set_aggregated(const TAggregatedRuntimeProfileNode& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRuntimeProfileNode &a, TRuntimeProfileNode &b);

std::ostream& operator<<(std::ostream& out, const TRuntimeProfileNode& obj);

typedef struct _TRuntimeProfileTree__isset {
  _TRuntimeProfileTree__isset() : exec_summary(false), profile_version(false) {}
  bool exec_summary :1;
  bool profile_version :1;
} _TRuntimeProfileTree__isset;

class TRuntimeProfileTree {
 public:

  TRuntimeProfileTree(const TRuntimeProfileTree&);
  TRuntimeProfileTree(TRuntimeProfileTree&&);
  TRuntimeProfileTree& operator=(const TRuntimeProfileTree&);
  TRuntimeProfileTree& operator=(TRuntimeProfileTree&&);
  TRuntimeProfileTree() : profile_version(0) {
  }

  virtual ~TRuntimeProfileTree() throw();
  std::vector<TRuntimeProfileNode>  nodes;
   ::impala::TExecSummary exec_summary;
  int32_t profile_version;

  _TRuntimeProfileTree__isset __isset;

  void __set_nodes(const std::vector<TRuntimeProfileNode> & val);

  void __set_exec_summary(const  ::impala::TExecSummary& val);

  void __set_profile_version(const int32_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRuntimeProfileTree &a, TRuntimeProfileTree &b);

std::ostream& operator<<(std::ostream& out, const TRuntimeProfileTree& obj);

typedef struct _TRuntimeProfileForest__isset {
  _TRuntimeProfileForest__isset() : host_profile(false) {}
  bool host_profile :1;
} _TRuntimeProfileForest__isset;

class TRuntimeProfileForest {
 public:

  TRuntimeProfileForest(const TRuntimeProfileForest&);
  TRuntimeProfileForest(TRuntimeProfileForest&&);
  TRuntimeProfileForest& operator=(const TRuntimeProfileForest&);
  TRuntimeProfileForest& operator=(TRuntimeProfileForest&&);
  TRuntimeProfileForest() {
  }

  virtual ~TRuntimeProfileForest() throw();
  std::vector<TRuntimeProfileTree>  profile_trees;
  TRuntimeProfileTree host_profile;

  _TRuntimeProfileForest__isset __isset;

  void __set_profile_trees(const std::vector<TRuntimeProfileTree> & val);

  void __set_host_profile(const TRuntimeProfileTree& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRuntimeProfileForest &a, TRuntimeProfileForest &b);

std::ostream& operator<<(std::ostream& out, const TRuntimeProfileForest& obj);

} // namespace

#include "RuntimeProfile_types.tcc"

#endif
