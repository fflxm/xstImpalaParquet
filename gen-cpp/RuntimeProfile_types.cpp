/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RuntimeProfile_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {

int _kTRuntimeProfileFormatValues[] = {
  TRuntimeProfileFormat::STRING,
  TRuntimeProfileFormat::BASE64,
  TRuntimeProfileFormat::THRIFT,
  TRuntimeProfileFormat::JSON
};
const char* _kTRuntimeProfileFormatNames[] = {
  "STRING",
  "BASE64",
  "THRIFT",
  "JSON"
};
const std::map<int, const char*> _TRuntimeProfileFormat_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTRuntimeProfileFormatValues, _kTRuntimeProfileFormatNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TRuntimeProfileFormat::type& val) {
  std::map<int, const char*>::const_iterator it = _TRuntimeProfileFormat_VALUES_TO_NAMES.find(val);
  if (it != _TRuntimeProfileFormat_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TCounter::~TCounter() throw() {
}


void TCounter::__set_name(const std::string& val) {
  this->name = val;
}

void TCounter::__set_unit(const  ::impala::TUnit::type val) {
  this->unit = val;
}

void TCounter::__set_value(const int64_t val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const TCounter& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCounter &a, TCounter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.unit, b.unit);
  swap(a.value, b.value);
}

TCounter::TCounter(const TCounter& other1) {
  name = other1.name;
  unit = other1.unit;
  value = other1.value;
}
TCounter::TCounter( TCounter&& other2) {
  name = std::move(other2.name);
  unit = std::move(other2.unit);
  value = std::move(other2.value);
}
TCounter& TCounter::operator=(const TCounter& other3) {
  name = other3.name;
  unit = other3.unit;
  value = other3.value;
  return *this;
}
TCounter& TCounter::operator=(TCounter&& other4) {
  name = std::move(other4.name);
  unit = std::move(other4.unit);
  value = std::move(other4.value);
  return *this;
}
void TCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCounter(";
  out << "name=" << to_string(name);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


TAggCounter::~TAggCounter() throw() {
}


void TAggCounter::__set_name(const std::string& val) {
  this->name = val;
}

void TAggCounter::__set_unit(const  ::impala::TUnit::type val) {
  this->unit = val;
}

void TAggCounter::__set_has_value(const std::vector<bool> & val) {
  this->has_value = val;
}

void TAggCounter::__set_values(const std::vector<int64_t> & val) {
  this->values = val;
}
std::ostream& operator<<(std::ostream& out, const TAggCounter& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAggCounter &a, TAggCounter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.unit, b.unit);
  swap(a.has_value, b.has_value);
  swap(a.values, b.values);
}

TAggCounter::TAggCounter(const TAggCounter& other18) {
  name = other18.name;
  unit = other18.unit;
  has_value = other18.has_value;
  values = other18.values;
}
TAggCounter::TAggCounter( TAggCounter&& other19) {
  name = std::move(other19.name);
  unit = std::move(other19.unit);
  has_value = std::move(other19.has_value);
  values = std::move(other19.values);
}
TAggCounter& TAggCounter::operator=(const TAggCounter& other20) {
  name = other20.name;
  unit = other20.unit;
  has_value = other20.has_value;
  values = other20.values;
  return *this;
}
TAggCounter& TAggCounter::operator=(TAggCounter&& other21) {
  name = std::move(other21.name);
  unit = std::move(other21.unit);
  has_value = std::move(other21.has_value);
  values = std::move(other21.values);
  return *this;
}
void TAggCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAggCounter(";
  out << "name=" << to_string(name);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "has_value=" << to_string(has_value);
  out << ", " << "values=" << to_string(values);
  out << ")";
}


TEventSequence::~TEventSequence() throw() {
}


void TEventSequence::__set_name(const std::string& val) {
  this->name = val;
}

void TEventSequence::__set_timestamps(const std::vector<int64_t> & val) {
  this->timestamps = val;
}

void TEventSequence::__set_labels(const std::vector<std::string> & val) {
  this->labels = val;
}
std::ostream& operator<<(std::ostream& out, const TEventSequence& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TEventSequence &a, TEventSequence &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.timestamps, b.timestamps);
  swap(a.labels, b.labels);
}

TEventSequence::TEventSequence(const TEventSequence& other34) {
  name = other34.name;
  timestamps = other34.timestamps;
  labels = other34.labels;
}
TEventSequence::TEventSequence( TEventSequence&& other35) {
  name = std::move(other35.name);
  timestamps = std::move(other35.timestamps);
  labels = std::move(other35.labels);
}
TEventSequence& TEventSequence::operator=(const TEventSequence& other36) {
  name = other36.name;
  timestamps = other36.timestamps;
  labels = other36.labels;
  return *this;
}
TEventSequence& TEventSequence::operator=(TEventSequence&& other37) {
  name = std::move(other37.name);
  timestamps = std::move(other37.timestamps);
  labels = std::move(other37.labels);
  return *this;
}
void TEventSequence::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TEventSequence(";
  out << "name=" << to_string(name);
  out << ", " << "timestamps=" << to_string(timestamps);
  out << ", " << "labels=" << to_string(labels);
  out << ")";
}


TAggEventSequence::~TAggEventSequence() throw() {
}


void TAggEventSequence::__set_name(const std::string& val) {
  this->name = val;
}

void TAggEventSequence::__set_label_dict(const std::vector<std::string> & val) {
  this->label_dict = val;
}

void TAggEventSequence::__set_label_idxs(const std::vector<std::vector<int32_t> > & val) {
  this->label_idxs = val;
}

void TAggEventSequence::__set_timestamps(const std::vector<std::vector<int64_t> > & val) {
  this->timestamps = val;
}
std::ostream& operator<<(std::ostream& out, const TAggEventSequence& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAggEventSequence &a, TAggEventSequence &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.label_dict, b.label_dict);
  swap(a.label_idxs, b.label_idxs);
  swap(a.timestamps, b.timestamps);
}

TAggEventSequence::TAggEventSequence(const TAggEventSequence& other68) {
  name = other68.name;
  label_dict = other68.label_dict;
  label_idxs = other68.label_idxs;
  timestamps = other68.timestamps;
}
TAggEventSequence::TAggEventSequence( TAggEventSequence&& other69) {
  name = std::move(other69.name);
  label_dict = std::move(other69.label_dict);
  label_idxs = std::move(other69.label_idxs);
  timestamps = std::move(other69.timestamps);
}
TAggEventSequence& TAggEventSequence::operator=(const TAggEventSequence& other70) {
  name = other70.name;
  label_dict = other70.label_dict;
  label_idxs = other70.label_idxs;
  timestamps = other70.timestamps;
  return *this;
}
TAggEventSequence& TAggEventSequence::operator=(TAggEventSequence&& other71) {
  name = std::move(other71.name);
  label_dict = std::move(other71.label_dict);
  label_idxs = std::move(other71.label_idxs);
  timestamps = std::move(other71.timestamps);
  return *this;
}
void TAggEventSequence::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAggEventSequence(";
  out << "name=" << to_string(name);
  out << ", " << "label_dict=" << to_string(label_dict);
  out << ", " << "label_idxs=" << to_string(label_idxs);
  out << ", " << "timestamps=" << to_string(timestamps);
  out << ")";
}


TTimeSeriesCounter::~TTimeSeriesCounter() throw() {
}


void TTimeSeriesCounter::__set_name(const std::string& val) {
  this->name = val;
}

void TTimeSeriesCounter::__set_unit(const  ::impala::TUnit::type val) {
  this->unit = val;
}

void TTimeSeriesCounter::__set_period_ms(const int32_t val) {
  this->period_ms = val;
}

void TTimeSeriesCounter::__set_values(const std::vector<int64_t> & val) {
  this->values = val;
}

void TTimeSeriesCounter::__set_start_index(const int64_t val) {
  this->start_index = val;
__isset.start_index = true;
}
std::ostream& operator<<(std::ostream& out, const TTimeSeriesCounter& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TTimeSeriesCounter &a, TTimeSeriesCounter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.unit, b.unit);
  swap(a.period_ms, b.period_ms);
  swap(a.values, b.values);
  swap(a.start_index, b.start_index);
  swap(a.__isset, b.__isset);
}

TTimeSeriesCounter::TTimeSeriesCounter(const TTimeSeriesCounter& other79) {
  name = other79.name;
  unit = other79.unit;
  period_ms = other79.period_ms;
  values = other79.values;
  start_index = other79.start_index;
  __isset = other79.__isset;
}
TTimeSeriesCounter::TTimeSeriesCounter( TTimeSeriesCounter&& other80) {
  name = std::move(other80.name);
  unit = std::move(other80.unit);
  period_ms = std::move(other80.period_ms);
  values = std::move(other80.values);
  start_index = std::move(other80.start_index);
  __isset = std::move(other80.__isset);
}
TTimeSeriesCounter& TTimeSeriesCounter::operator=(const TTimeSeriesCounter& other81) {
  name = other81.name;
  unit = other81.unit;
  period_ms = other81.period_ms;
  values = other81.values;
  start_index = other81.start_index;
  __isset = other81.__isset;
  return *this;
}
TTimeSeriesCounter& TTimeSeriesCounter::operator=(TTimeSeriesCounter&& other82) {
  name = std::move(other82.name);
  unit = std::move(other82.unit);
  period_ms = std::move(other82.period_ms);
  values = std::move(other82.values);
  start_index = std::move(other82.start_index);
  __isset = std::move(other82.__isset);
  return *this;
}
void TTimeSeriesCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTimeSeriesCounter(";
  out << "name=" << to_string(name);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "period_ms=" << to_string(period_ms);
  out << ", " << "values=" << to_string(values);
  out << ", " << "start_index="; (__isset.start_index ? (out << to_string(start_index)) : (out << "<null>"));
  out << ")";
}


TAggTimeSeriesCounter::~TAggTimeSeriesCounter() throw() {
}


void TAggTimeSeriesCounter::__set_name(const std::string& val) {
  this->name = val;
}

void TAggTimeSeriesCounter::__set_unit(const  ::impala::TUnit::type val) {
  this->unit = val;
}

void TAggTimeSeriesCounter::__set_period_ms(const std::vector<int32_t> & val) {
  this->period_ms = val;
}

void TAggTimeSeriesCounter::__set_values(const std::vector<std::vector<int64_t> > & val) {
  this->values = val;
}

void TAggTimeSeriesCounter::__set_start_index(const std::vector<int64_t> & val) {
  this->start_index = val;
}
std::ostream& operator<<(std::ostream& out, const TAggTimeSeriesCounter& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAggTimeSeriesCounter &a, TAggTimeSeriesCounter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.unit, b.unit);
  swap(a.period_ms, b.period_ms);
  swap(a.values, b.values);
  swap(a.start_index, b.start_index);
}

TAggTimeSeriesCounter::TAggTimeSeriesCounter(const TAggTimeSeriesCounter& other108) {
  name = other108.name;
  unit = other108.unit;
  period_ms = other108.period_ms;
  values = other108.values;
  start_index = other108.start_index;
}
TAggTimeSeriesCounter::TAggTimeSeriesCounter( TAggTimeSeriesCounter&& other109) {
  name = std::move(other109.name);
  unit = std::move(other109.unit);
  period_ms = std::move(other109.period_ms);
  values = std::move(other109.values);
  start_index = std::move(other109.start_index);
}
TAggTimeSeriesCounter& TAggTimeSeriesCounter::operator=(const TAggTimeSeriesCounter& other110) {
  name = other110.name;
  unit = other110.unit;
  period_ms = other110.period_ms;
  values = other110.values;
  start_index = other110.start_index;
  return *this;
}
TAggTimeSeriesCounter& TAggTimeSeriesCounter::operator=(TAggTimeSeriesCounter&& other111) {
  name = std::move(other111.name);
  unit = std::move(other111.unit);
  period_ms = std::move(other111.period_ms);
  values = std::move(other111.values);
  start_index = std::move(other111.start_index);
  return *this;
}
void TAggTimeSeriesCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAggTimeSeriesCounter(";
  out << "name=" << to_string(name);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "period_ms=" << to_string(period_ms);
  out << ", " << "values=" << to_string(values);
  out << ", " << "start_index=" << to_string(start_index);
  out << ")";
}


TSummaryStatsCounter::~TSummaryStatsCounter() throw() {
}


void TSummaryStatsCounter::__set_name(const std::string& val) {
  this->name = val;
}

void TSummaryStatsCounter::__set_unit(const  ::impala::TUnit::type val) {
  this->unit = val;
}

void TSummaryStatsCounter::__set_sum(const int64_t val) {
  this->sum = val;
}

void TSummaryStatsCounter::__set_total_num_values(const int64_t val) {
  this->total_num_values = val;
}

void TSummaryStatsCounter::__set_min_value(const int64_t val) {
  this->min_value = val;
}

void TSummaryStatsCounter::__set_max_value(const int64_t val) {
  this->max_value = val;
}
std::ostream& operator<<(std::ostream& out, const TSummaryStatsCounter& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TSummaryStatsCounter &a, TSummaryStatsCounter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.unit, b.unit);
  swap(a.sum, b.sum);
  swap(a.total_num_values, b.total_num_values);
  swap(a.min_value, b.min_value);
  swap(a.max_value, b.max_value);
}

TSummaryStatsCounter::TSummaryStatsCounter(const TSummaryStatsCounter& other113) {
  name = other113.name;
  unit = other113.unit;
  sum = other113.sum;
  total_num_values = other113.total_num_values;
  min_value = other113.min_value;
  max_value = other113.max_value;
}
TSummaryStatsCounter::TSummaryStatsCounter( TSummaryStatsCounter&& other114) {
  name = std::move(other114.name);
  unit = std::move(other114.unit);
  sum = std::move(other114.sum);
  total_num_values = std::move(other114.total_num_values);
  min_value = std::move(other114.min_value);
  max_value = std::move(other114.max_value);
}
TSummaryStatsCounter& TSummaryStatsCounter::operator=(const TSummaryStatsCounter& other115) {
  name = other115.name;
  unit = other115.unit;
  sum = other115.sum;
  total_num_values = other115.total_num_values;
  min_value = other115.min_value;
  max_value = other115.max_value;
  return *this;
}
TSummaryStatsCounter& TSummaryStatsCounter::operator=(TSummaryStatsCounter&& other116) {
  name = std::move(other116.name);
  unit = std::move(other116.unit);
  sum = std::move(other116.sum);
  total_num_values = std::move(other116.total_num_values);
  min_value = std::move(other116.min_value);
  max_value = std::move(other116.max_value);
  return *this;
}
void TSummaryStatsCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSummaryStatsCounter(";
  out << "name=" << to_string(name);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "sum=" << to_string(sum);
  out << ", " << "total_num_values=" << to_string(total_num_values);
  out << ", " << "min_value=" << to_string(min_value);
  out << ", " << "max_value=" << to_string(max_value);
  out << ")";
}


TAggSummaryStatsCounter::~TAggSummaryStatsCounter() throw() {
}


void TAggSummaryStatsCounter::__set_name(const std::string& val) {
  this->name = val;
}

void TAggSummaryStatsCounter::__set_unit(const  ::impala::TUnit::type val) {
  this->unit = val;
}

void TAggSummaryStatsCounter::__set_has_value(const std::vector<bool> & val) {
  this->has_value = val;
}

void TAggSummaryStatsCounter::__set_sum(const std::vector<int64_t> & val) {
  this->sum = val;
}

void TAggSummaryStatsCounter::__set_total_num_values(const std::vector<int64_t> & val) {
  this->total_num_values = val;
}

void TAggSummaryStatsCounter::__set_min_value(const std::vector<int64_t> & val) {
  this->min_value = val;
}

void TAggSummaryStatsCounter::__set_max_value(const std::vector<int64_t> & val) {
  this->max_value = val;
}
std::ostream& operator<<(std::ostream& out, const TAggSummaryStatsCounter& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAggSummaryStatsCounter &a, TAggSummaryStatsCounter &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.unit, b.unit);
  swap(a.has_value, b.has_value);
  swap(a.sum, b.sum);
  swap(a.total_num_values, b.total_num_values);
  swap(a.min_value, b.min_value);
  swap(a.max_value, b.max_value);
}

TAggSummaryStatsCounter::TAggSummaryStatsCounter(const TAggSummaryStatsCounter& other148) {
  name = other148.name;
  unit = other148.unit;
  has_value = other148.has_value;
  sum = other148.sum;
  total_num_values = other148.total_num_values;
  min_value = other148.min_value;
  max_value = other148.max_value;
}
TAggSummaryStatsCounter::TAggSummaryStatsCounter( TAggSummaryStatsCounter&& other149) {
  name = std::move(other149.name);
  unit = std::move(other149.unit);
  has_value = std::move(other149.has_value);
  sum = std::move(other149.sum);
  total_num_values = std::move(other149.total_num_values);
  min_value = std::move(other149.min_value);
  max_value = std::move(other149.max_value);
}
TAggSummaryStatsCounter& TAggSummaryStatsCounter::operator=(const TAggSummaryStatsCounter& other150) {
  name = other150.name;
  unit = other150.unit;
  has_value = other150.has_value;
  sum = other150.sum;
  total_num_values = other150.total_num_values;
  min_value = other150.min_value;
  max_value = other150.max_value;
  return *this;
}
TAggSummaryStatsCounter& TAggSummaryStatsCounter::operator=(TAggSummaryStatsCounter&& other151) {
  name = std::move(other151.name);
  unit = std::move(other151.unit);
  has_value = std::move(other151.has_value);
  sum = std::move(other151.sum);
  total_num_values = std::move(other151.total_num_values);
  min_value = std::move(other151.min_value);
  max_value = std::move(other151.max_value);
  return *this;
}
void TAggSummaryStatsCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAggSummaryStatsCounter(";
  out << "name=" << to_string(name);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "has_value=" << to_string(has_value);
  out << ", " << "sum=" << to_string(sum);
  out << ", " << "total_num_values=" << to_string(total_num_values);
  out << ", " << "min_value=" << to_string(min_value);
  out << ", " << "max_value=" << to_string(max_value);
  out << ")";
}


TRuntimeProfileNodeMetadata::~TRuntimeProfileNodeMetadata() throw() {
}


void TRuntimeProfileNodeMetadata::__set_plan_node_id(const  ::impala::TPlanNodeId val) {
  this->plan_node_id = val;
__isset.plan_node_id = true;
}

void TRuntimeProfileNodeMetadata::__set_data_sink_id(const  ::impala::TDataSinkId val) {
  this->data_sink_id = val;
__isset.data_sink_id = true;
}
std::ostream& operator<<(std::ostream& out, const TRuntimeProfileNodeMetadata& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TRuntimeProfileNodeMetadata &a, TRuntimeProfileNodeMetadata &b) {
  using ::std::swap;
  swap(a.plan_node_id, b.plan_node_id);
  swap(a.data_sink_id, b.data_sink_id);
  swap(a.__isset, b.__isset);
}

TRuntimeProfileNodeMetadata::TRuntimeProfileNodeMetadata(const TRuntimeProfileNodeMetadata& other152) {
  plan_node_id = other152.plan_node_id;
  data_sink_id = other152.data_sink_id;
  __isset = other152.__isset;
}
TRuntimeProfileNodeMetadata::TRuntimeProfileNodeMetadata( TRuntimeProfileNodeMetadata&& other153) {
  plan_node_id = std::move(other153.plan_node_id);
  data_sink_id = std::move(other153.data_sink_id);
  __isset = std::move(other153.__isset);
}
TRuntimeProfileNodeMetadata& TRuntimeProfileNodeMetadata::operator=(const TRuntimeProfileNodeMetadata& other154) {
  plan_node_id = other154.plan_node_id;
  data_sink_id = other154.data_sink_id;
  __isset = other154.__isset;
  return *this;
}
TRuntimeProfileNodeMetadata& TRuntimeProfileNodeMetadata::operator=(TRuntimeProfileNodeMetadata&& other155) {
  plan_node_id = std::move(other155.plan_node_id);
  data_sink_id = std::move(other155.data_sink_id);
  __isset = std::move(other155.__isset);
  return *this;
}
void TRuntimeProfileNodeMetadata::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRuntimeProfileNodeMetadata(";
  out << "plan_node_id="; (__isset.plan_node_id ? (out << to_string(plan_node_id)) : (out << "<null>"));
  out << ", " << "data_sink_id="; (__isset.data_sink_id ? (out << to_string(data_sink_id)) : (out << "<null>"));
  out << ")";
}


TAggregatedRuntimeProfileNode::~TAggregatedRuntimeProfileNode() throw() {
}


void TAggregatedRuntimeProfileNode::__set_num_instances(const int32_t val) {
  this->num_instances = val;
__isset.num_instances = true;
}

void TAggregatedRuntimeProfileNode::__set_input_profiles(const std::vector<std::string> & val) {
  this->input_profiles = val;
__isset.input_profiles = true;
}

void TAggregatedRuntimeProfileNode::__set_counters(const std::vector<TAggCounter> & val) {
  this->counters = val;
__isset.counters = true;
}

void TAggregatedRuntimeProfileNode::__set_info_strings(const std::map<std::string, std::map<std::string, std::vector<int32_t> > > & val) {
  this->info_strings = val;
__isset.info_strings = true;
}

void TAggregatedRuntimeProfileNode::__set_summary_stats_counters(const std::vector<TAggSummaryStatsCounter> & val) {
  this->summary_stats_counters = val;
__isset.summary_stats_counters = true;
}

void TAggregatedRuntimeProfileNode::__set_event_sequences(const std::vector<TAggEventSequence> & val) {
  this->event_sequences = val;
__isset.event_sequences = true;
}

void TAggregatedRuntimeProfileNode::__set_time_series_counters(const std::vector<TAggTimeSeriesCounter> & val) {
  this->time_series_counters = val;
__isset.time_series_counters = true;
}
std::ostream& operator<<(std::ostream& out, const TAggregatedRuntimeProfileNode& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAggregatedRuntimeProfileNode &a, TAggregatedRuntimeProfileNode &b) {
  using ::std::swap;
  swap(a.num_instances, b.num_instances);
  swap(a.input_profiles, b.input_profiles);
  swap(a.counters, b.counters);
  swap(a.info_strings, b.info_strings);
  swap(a.summary_stats_counters, b.summary_stats_counters);
  swap(a.event_sequences, b.event_sequences);
  swap(a.time_series_counters, b.time_series_counters);
  swap(a.__isset, b.__isset);
}

TAggregatedRuntimeProfileNode::TAggregatedRuntimeProfileNode(const TAggregatedRuntimeProfileNode& other208) {
  num_instances = other208.num_instances;
  input_profiles = other208.input_profiles;
  counters = other208.counters;
  info_strings = other208.info_strings;
  summary_stats_counters = other208.summary_stats_counters;
  event_sequences = other208.event_sequences;
  time_series_counters = other208.time_series_counters;
  __isset = other208.__isset;
}
TAggregatedRuntimeProfileNode::TAggregatedRuntimeProfileNode( TAggregatedRuntimeProfileNode&& other209) {
  num_instances = std::move(other209.num_instances);
  input_profiles = std::move(other209.input_profiles);
  counters = std::move(other209.counters);
  info_strings = std::move(other209.info_strings);
  summary_stats_counters = std::move(other209.summary_stats_counters);
  event_sequences = std::move(other209.event_sequences);
  time_series_counters = std::move(other209.time_series_counters);
  __isset = std::move(other209.__isset);
}
TAggregatedRuntimeProfileNode& TAggregatedRuntimeProfileNode::operator=(const TAggregatedRuntimeProfileNode& other210) {
  num_instances = other210.num_instances;
  input_profiles = other210.input_profiles;
  counters = other210.counters;
  info_strings = other210.info_strings;
  summary_stats_counters = other210.summary_stats_counters;
  event_sequences = other210.event_sequences;
  time_series_counters = other210.time_series_counters;
  __isset = other210.__isset;
  return *this;
}
TAggregatedRuntimeProfileNode& TAggregatedRuntimeProfileNode::operator=(TAggregatedRuntimeProfileNode&& other211) {
  num_instances = std::move(other211.num_instances);
  input_profiles = std::move(other211.input_profiles);
  counters = std::move(other211.counters);
  info_strings = std::move(other211.info_strings);
  summary_stats_counters = std::move(other211.summary_stats_counters);
  event_sequences = std::move(other211.event_sequences);
  time_series_counters = std::move(other211.time_series_counters);
  __isset = std::move(other211.__isset);
  return *this;
}
void TAggregatedRuntimeProfileNode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAggregatedRuntimeProfileNode(";
  out << "num_instances="; (__isset.num_instances ? (out << to_string(num_instances)) : (out << "<null>"));
  out << ", " << "input_profiles="; (__isset.input_profiles ? (out << to_string(input_profiles)) : (out << "<null>"));
  out << ", " << "counters="; (__isset.counters ? (out << to_string(counters)) : (out << "<null>"));
  out << ", " << "info_strings="; (__isset.info_strings ? (out << to_string(info_strings)) : (out << "<null>"));
  out << ", " << "summary_stats_counters="; (__isset.summary_stats_counters ? (out << to_string(summary_stats_counters)) : (out << "<null>"));
  out << ", " << "event_sequences="; (__isset.event_sequences ? (out << to_string(event_sequences)) : (out << "<null>"));
  out << ", " << "time_series_counters="; (__isset.time_series_counters ? (out << to_string(time_series_counters)) : (out << "<null>"));
  out << ")";
}


TRuntimeProfileNode::~TRuntimeProfileNode() throw() {
}


void TRuntimeProfileNode::__set_name(const std::string& val) {
  this->name = val;
}

void TRuntimeProfileNode::__set_num_children(const int32_t val) {
  this->num_children = val;
}

void TRuntimeProfileNode::__set_counters(const std::vector<TCounter> & val) {
  this->counters = val;
}

void TRuntimeProfileNode::__set_metadata(const int64_t val) {
  this->metadata = val;
}

void TRuntimeProfileNode::__set_indent(const bool val) {
  this->indent = val;
}

void TRuntimeProfileNode::__set_info_strings(const std::map<std::string, std::string> & val) {
  this->info_strings = val;
}

void TRuntimeProfileNode::__set_info_strings_display_order(const std::vector<std::string> & val) {
  this->info_strings_display_order = val;
}

void TRuntimeProfileNode::__set_child_counters_map(const std::map<std::string, std::set<std::string> > & val) {
  this->child_counters_map = val;
}

void TRuntimeProfileNode::__set_event_sequences(const std::vector<TEventSequence> & val) {
  this->event_sequences = val;
__isset.event_sequences = true;
}

void TRuntimeProfileNode::__set_time_series_counters(const std::vector<TTimeSeriesCounter> & val) {
  this->time_series_counters = val;
__isset.time_series_counters = true;
}

void TRuntimeProfileNode::__set_summary_stats_counters(const std::vector<TSummaryStatsCounter> & val) {
  this->summary_stats_counters = val;
__isset.summary_stats_counters = true;
}

void TRuntimeProfileNode::__set_node_metadata(const TRuntimeProfileNodeMetadata& val) {
  this->node_metadata = val;
__isset.node_metadata = true;
}

void TRuntimeProfileNode::__set_aggregated(const TAggregatedRuntimeProfileNode& val) {
  this->aggregated = val;
__isset.aggregated = true;
}
std::ostream& operator<<(std::ostream& out, const TRuntimeProfileNode& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TRuntimeProfileNode &a, TRuntimeProfileNode &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.num_children, b.num_children);
  swap(a.counters, b.counters);
  swap(a.metadata, b.metadata);
  swap(a.indent, b.indent);
  swap(a.info_strings, b.info_strings);
  swap(a.info_strings_display_order, b.info_strings_display_order);
  swap(a.child_counters_map, b.child_counters_map);
  swap(a.event_sequences, b.event_sequences);
  swap(a.time_series_counters, b.time_series_counters);
  swap(a.summary_stats_counters, b.summary_stats_counters);
  swap(a.node_metadata, b.node_metadata);
  swap(a.aggregated, b.aggregated);
  swap(a.__isset, b.__isset);
}

TRuntimeProfileNode::TRuntimeProfileNode(const TRuntimeProfileNode& other265) {
  name = other265.name;
  num_children = other265.num_children;
  counters = other265.counters;
  metadata = other265.metadata;
  indent = other265.indent;
  info_strings = other265.info_strings;
  info_strings_display_order = other265.info_strings_display_order;
  child_counters_map = other265.child_counters_map;
  event_sequences = other265.event_sequences;
  time_series_counters = other265.time_series_counters;
  summary_stats_counters = other265.summary_stats_counters;
  node_metadata = other265.node_metadata;
  aggregated = other265.aggregated;
  __isset = other265.__isset;
}
TRuntimeProfileNode::TRuntimeProfileNode( TRuntimeProfileNode&& other266) {
  name = std::move(other266.name);
  num_children = std::move(other266.num_children);
  counters = std::move(other266.counters);
  metadata = std::move(other266.metadata);
  indent = std::move(other266.indent);
  info_strings = std::move(other266.info_strings);
  info_strings_display_order = std::move(other266.info_strings_display_order);
  child_counters_map = std::move(other266.child_counters_map);
  event_sequences = std::move(other266.event_sequences);
  time_series_counters = std::move(other266.time_series_counters);
  summary_stats_counters = std::move(other266.summary_stats_counters);
  node_metadata = std::move(other266.node_metadata);
  aggregated = std::move(other266.aggregated);
  __isset = std::move(other266.__isset);
}
TRuntimeProfileNode& TRuntimeProfileNode::operator=(const TRuntimeProfileNode& other267) {
  name = other267.name;
  num_children = other267.num_children;
  counters = other267.counters;
  metadata = other267.metadata;
  indent = other267.indent;
  info_strings = other267.info_strings;
  info_strings_display_order = other267.info_strings_display_order;
  child_counters_map = other267.child_counters_map;
  event_sequences = other267.event_sequences;
  time_series_counters = other267.time_series_counters;
  summary_stats_counters = other267.summary_stats_counters;
  node_metadata = other267.node_metadata;
  aggregated = other267.aggregated;
  __isset = other267.__isset;
  return *this;
}
TRuntimeProfileNode& TRuntimeProfileNode::operator=(TRuntimeProfileNode&& other268) {
  name = std::move(other268.name);
  num_children = std::move(other268.num_children);
  counters = std::move(other268.counters);
  metadata = std::move(other268.metadata);
  indent = std::move(other268.indent);
  info_strings = std::move(other268.info_strings);
  info_strings_display_order = std::move(other268.info_strings_display_order);
  child_counters_map = std::move(other268.child_counters_map);
  event_sequences = std::move(other268.event_sequences);
  time_series_counters = std::move(other268.time_series_counters);
  summary_stats_counters = std::move(other268.summary_stats_counters);
  node_metadata = std::move(other268.node_metadata);
  aggregated = std::move(other268.aggregated);
  __isset = std::move(other268.__isset);
  return *this;
}
void TRuntimeProfileNode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRuntimeProfileNode(";
  out << "name=" << to_string(name);
  out << ", " << "num_children=" << to_string(num_children);
  out << ", " << "counters=" << to_string(counters);
  out << ", " << "metadata=" << to_string(metadata);
  out << ", " << "indent=" << to_string(indent);
  out << ", " << "info_strings=" << to_string(info_strings);
  out << ", " << "info_strings_display_order=" << to_string(info_strings_display_order);
  out << ", " << "child_counters_map=" << to_string(child_counters_map);
  out << ", " << "event_sequences="; (__isset.event_sequences ? (out << to_string(event_sequences)) : (out << "<null>"));
  out << ", " << "time_series_counters="; (__isset.time_series_counters ? (out << to_string(time_series_counters)) : (out << "<null>"));
  out << ", " << "summary_stats_counters="; (__isset.summary_stats_counters ? (out << to_string(summary_stats_counters)) : (out << "<null>"));
  out << ", " << "node_metadata="; (__isset.node_metadata ? (out << to_string(node_metadata)) : (out << "<null>"));
  out << ", " << "aggregated="; (__isset.aggregated ? (out << to_string(aggregated)) : (out << "<null>"));
  out << ")";
}


TRuntimeProfileTree::~TRuntimeProfileTree() throw() {
}


void TRuntimeProfileTree::__set_nodes(const std::vector<TRuntimeProfileNode> & val) {
  this->nodes = val;
}

void TRuntimeProfileTree::__set_exec_summary(const  ::impala::TExecSummary& val) {
  this->exec_summary = val;
__isset.exec_summary = true;
}

void TRuntimeProfileTree::__set_profile_version(const int32_t val) {
  this->profile_version = val;
__isset.profile_version = true;
}
std::ostream& operator<<(std::ostream& out, const TRuntimeProfileTree& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TRuntimeProfileTree &a, TRuntimeProfileTree &b) {
  using ::std::swap;
  swap(a.nodes, b.nodes);
  swap(a.exec_summary, b.exec_summary);
  swap(a.profile_version, b.profile_version);
  swap(a.__isset, b.__isset);
}

TRuntimeProfileTree::TRuntimeProfileTree(const TRuntimeProfileTree& other275) {
  nodes = other275.nodes;
  exec_summary = other275.exec_summary;
  profile_version = other275.profile_version;
  __isset = other275.__isset;
}
TRuntimeProfileTree::TRuntimeProfileTree( TRuntimeProfileTree&& other276) {
  nodes = std::move(other276.nodes);
  exec_summary = std::move(other276.exec_summary);
  profile_version = std::move(other276.profile_version);
  __isset = std::move(other276.__isset);
}
TRuntimeProfileTree& TRuntimeProfileTree::operator=(const TRuntimeProfileTree& other277) {
  nodes = other277.nodes;
  exec_summary = other277.exec_summary;
  profile_version = other277.profile_version;
  __isset = other277.__isset;
  return *this;
}
TRuntimeProfileTree& TRuntimeProfileTree::operator=(TRuntimeProfileTree&& other278) {
  nodes = std::move(other278.nodes);
  exec_summary = std::move(other278.exec_summary);
  profile_version = std::move(other278.profile_version);
  __isset = std::move(other278.__isset);
  return *this;
}
void TRuntimeProfileTree::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRuntimeProfileTree(";
  out << "nodes=" << to_string(nodes);
  out << ", " << "exec_summary="; (__isset.exec_summary ? (out << to_string(exec_summary)) : (out << "<null>"));
  out << ", " << "profile_version="; (__isset.profile_version ? (out << to_string(profile_version)) : (out << "<null>"));
  out << ")";
}


TRuntimeProfileForest::~TRuntimeProfileForest() throw() {
}


void TRuntimeProfileForest::__set_profile_trees(const std::vector<TRuntimeProfileTree> & val) {
  this->profile_trees = val;
}

void TRuntimeProfileForest::__set_host_profile(const TRuntimeProfileTree& val) {
  this->host_profile = val;
__isset.host_profile = true;
}
std::ostream& operator<<(std::ostream& out, const TRuntimeProfileForest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TRuntimeProfileForest &a, TRuntimeProfileForest &b) {
  using ::std::swap;
  swap(a.profile_trees, b.profile_trees);
  swap(a.host_profile, b.host_profile);
  swap(a.__isset, b.__isset);
}

TRuntimeProfileForest::TRuntimeProfileForest(const TRuntimeProfileForest& other285) {
  profile_trees = other285.profile_trees;
  host_profile = other285.host_profile;
  __isset = other285.__isset;
}
TRuntimeProfileForest::TRuntimeProfileForest( TRuntimeProfileForest&& other286) {
  profile_trees = std::move(other286.profile_trees);
  host_profile = std::move(other286.host_profile);
  __isset = std::move(other286.__isset);
}
TRuntimeProfileForest& TRuntimeProfileForest::operator=(const TRuntimeProfileForest& other287) {
  profile_trees = other287.profile_trees;
  host_profile = other287.host_profile;
  __isset = other287.__isset;
  return *this;
}
TRuntimeProfileForest& TRuntimeProfileForest::operator=(TRuntimeProfileForest&& other288) {
  profile_trees = std::move(other288.profile_trees);
  host_profile = std::move(other288.host_profile);
  __isset = std::move(other288.__isset);
  return *this;
}
void TRuntimeProfileForest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TRuntimeProfileForest(";
  out << "profile_trees=" << to_string(profile_trees);
  out << ", " << "host_profile="; (__isset.host_profile ? (out << to_string(host_profile)) : (out << "<null>"));
  out << ")";
}

} // namespace
