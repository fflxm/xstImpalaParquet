/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ImpalaService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {

int _kTImpalaQueryOptionsValues[] = {
  TImpalaQueryOptions::ABORT_ON_ERROR,
  TImpalaQueryOptions::MAX_ERRORS,
  TImpalaQueryOptions::DISABLE_CODEGEN,
  TImpalaQueryOptions::BATCH_SIZE,
  TImpalaQueryOptions::MEM_LIMIT,
  TImpalaQueryOptions::NUM_NODES,
  TImpalaQueryOptions::MAX_SCAN_RANGE_LENGTH,
  TImpalaQueryOptions::MAX_IO_BUFFERS,
  TImpalaQueryOptions::NUM_SCANNER_THREADS,
  TImpalaQueryOptions::ALLOW_UNSUPPORTED_FORMATS,
  TImpalaQueryOptions::DEFAULT_ORDER_BY_LIMIT,
  TImpalaQueryOptions::DEBUG_ACTION,
  TImpalaQueryOptions::ABORT_ON_DEFAULT_LIMIT_EXCEEDED,
  TImpalaQueryOptions::COMPRESSION_CODEC,
  TImpalaQueryOptions::SEQ_COMPRESSION_MODE,
  TImpalaQueryOptions::HBASE_CACHING,
  TImpalaQueryOptions::HBASE_CACHE_BLOCKS,
  TImpalaQueryOptions::PARQUET_FILE_SIZE,
  TImpalaQueryOptions::EXPLAIN_LEVEL,
  TImpalaQueryOptions::SYNC_DDL,
  TImpalaQueryOptions::REQUEST_POOL,
  TImpalaQueryOptions::V_CPU_CORES,
  TImpalaQueryOptions::RESERVATION_REQUEST_TIMEOUT,
  TImpalaQueryOptions::DISABLE_CACHED_READS,
  TImpalaQueryOptions::DISABLE_OUTERMOST_TOPN,
  TImpalaQueryOptions::RM_INITIAL_MEM,
  TImpalaQueryOptions::QUERY_TIMEOUT_S,
  TImpalaQueryOptions::BUFFER_POOL_LIMIT,
  TImpalaQueryOptions::APPX_COUNT_DISTINCT,
  TImpalaQueryOptions::DISABLE_UNSAFE_SPILLS,
  TImpalaQueryOptions::EXEC_SINGLE_NODE_ROWS_THRESHOLD,
  TImpalaQueryOptions::OPTIMIZE_PARTITION_KEY_SCANS,
  TImpalaQueryOptions::REPLICA_PREFERENCE,
  TImpalaQueryOptions::SCHEDULE_RANDOM_REPLICA,
  TImpalaQueryOptions::SCAN_NODE_CODEGEN_THRESHOLD,
  TImpalaQueryOptions::DISABLE_STREAMING_PREAGGREGATIONS,
  TImpalaQueryOptions::RUNTIME_FILTER_MODE,
  TImpalaQueryOptions::RUNTIME_BLOOM_FILTER_SIZE,
  TImpalaQueryOptions::RUNTIME_FILTER_WAIT_TIME_MS,
  TImpalaQueryOptions::DISABLE_ROW_RUNTIME_FILTERING,
  TImpalaQueryOptions::MAX_NUM_RUNTIME_FILTERS,
  TImpalaQueryOptions::PARQUET_ANNOTATE_STRINGS_UTF8,
  TImpalaQueryOptions::PARQUET_FALLBACK_SCHEMA_RESOLUTION,
  TImpalaQueryOptions::MT_DOP,
  TImpalaQueryOptions::S3_SKIP_INSERT_STAGING,
  TImpalaQueryOptions::RUNTIME_FILTER_MAX_SIZE,
  TImpalaQueryOptions::RUNTIME_FILTER_MIN_SIZE,
  TImpalaQueryOptions::PREFETCH_MODE,
  TImpalaQueryOptions::STRICT_MODE,
  TImpalaQueryOptions::SCRATCH_LIMIT,
  TImpalaQueryOptions::ENABLE_EXPR_REWRITES,
  TImpalaQueryOptions::DECIMAL_V2,
  TImpalaQueryOptions::PARQUET_DICTIONARY_FILTERING,
  TImpalaQueryOptions::PARQUET_ARRAY_RESOLUTION,
  TImpalaQueryOptions::PARQUET_READ_STATISTICS,
  TImpalaQueryOptions::DEFAULT_JOIN_DISTRIBUTION_MODE,
  TImpalaQueryOptions::DISABLE_CODEGEN_ROWS_THRESHOLD,
  TImpalaQueryOptions::DEFAULT_SPILLABLE_BUFFER_SIZE,
  TImpalaQueryOptions::MIN_SPILLABLE_BUFFER_SIZE,
  TImpalaQueryOptions::MAX_ROW_SIZE,
  TImpalaQueryOptions::IDLE_SESSION_TIMEOUT,
  TImpalaQueryOptions::COMPUTE_STATS_MIN_SAMPLE_SIZE,
  TImpalaQueryOptions::EXEC_TIME_LIMIT_S,
  TImpalaQueryOptions::SHUFFLE_DISTINCT_EXPRS,
  TImpalaQueryOptions::MAX_MEM_ESTIMATE_FOR_ADMISSION,
  TImpalaQueryOptions::THREAD_RESERVATION_LIMIT,
  TImpalaQueryOptions::THREAD_RESERVATION_AGGREGATE_LIMIT,
  TImpalaQueryOptions::KUDU_READ_MODE,
  TImpalaQueryOptions::ALLOW_ERASURE_CODED_FILES,
  TImpalaQueryOptions::TIMEZONE,
  TImpalaQueryOptions::SCAN_BYTES_LIMIT,
  TImpalaQueryOptions::CPU_LIMIT_S,
  TImpalaQueryOptions::TOPN_BYTES_LIMIT,
  TImpalaQueryOptions::CLIENT_IDENTIFIER,
  TImpalaQueryOptions::RESOURCE_TRACE_RATIO,
  TImpalaQueryOptions::NUM_REMOTE_EXECUTOR_CANDIDATES,
  TImpalaQueryOptions::NUM_ROWS_PRODUCED_LIMIT,
  TImpalaQueryOptions::PLANNER_TESTCASE_MODE,
  TImpalaQueryOptions::DEFAULT_FILE_FORMAT,
  TImpalaQueryOptions::PARQUET_TIMESTAMP_TYPE,
  TImpalaQueryOptions::PARQUET_READ_PAGE_INDEX,
  TImpalaQueryOptions::PARQUET_WRITE_PAGE_INDEX,
  TImpalaQueryOptions::PARQUET_PAGE_ROW_COUNT_LIMIT,
  TImpalaQueryOptions::DISABLE_HDFS_NUM_ROWS_ESTIMATE,
  TImpalaQueryOptions::DEFAULT_HINTS_INSERT_STATEMENT,
  TImpalaQueryOptions::SPOOL_QUERY_RESULTS,
  TImpalaQueryOptions::DEFAULT_TRANSACTIONAL_TYPE,
  TImpalaQueryOptions::STATEMENT_EXPRESSION_LIMIT,
  TImpalaQueryOptions::MAX_STATEMENT_LENGTH_BYTES,
  TImpalaQueryOptions::DISABLE_DATA_CACHE,
  TImpalaQueryOptions::MAX_RESULT_SPOOLING_MEM,
  TImpalaQueryOptions::MAX_SPILLED_RESULT_SPOOLING_MEM,
  TImpalaQueryOptions::DISABLE_HBASE_NUM_ROWS_ESTIMATE,
  TImpalaQueryOptions::FETCH_ROWS_TIMEOUT_MS,
  TImpalaQueryOptions::NOW_STRING,
  TImpalaQueryOptions::PARQUET_OBJECT_STORE_SPLIT_SIZE,
  TImpalaQueryOptions::MEM_LIMIT_EXECUTORS,
  TImpalaQueryOptions::BROADCAST_BYTES_LIMIT,
  TImpalaQueryOptions::PREAGG_BYTES_LIMIT,
  TImpalaQueryOptions::ENABLE_CNF_REWRITES,
  TImpalaQueryOptions::MAX_CNF_EXPRS,
  TImpalaQueryOptions::KUDU_SNAPSHOT_READ_TIMESTAMP_MICROS,
  TImpalaQueryOptions::RETRY_FAILED_QUERIES,
  TImpalaQueryOptions::ENABLED_RUNTIME_FILTER_TYPES,
  TImpalaQueryOptions::ASYNC_CODEGEN,
  TImpalaQueryOptions::ENABLE_DISTINCT_SEMI_JOIN_OPTIMIZATION,
  TImpalaQueryOptions::SORT_RUN_BYTES_LIMIT,
  TImpalaQueryOptions::MAX_FS_WRITERS,
  TImpalaQueryOptions::REFRESH_UPDATED_HMS_PARTITIONS,
  TImpalaQueryOptions::SPOOL_ALL_RESULTS_FOR_RETRIES,
  TImpalaQueryOptions::RUNTIME_FILTER_ERROR_RATE,
  TImpalaQueryOptions::USE_LOCAL_TZ_FOR_UNIX_TIMESTAMP_CONVERSIONS,
  TImpalaQueryOptions::CONVERT_LEGACY_HIVE_PARQUET_UTC_TIMESTAMPS,
  TImpalaQueryOptions::ENABLE_OUTER_JOIN_TO_INNER_TRANSFORMATION,
  TImpalaQueryOptions::TARGETED_KUDU_SCAN_RANGE_LENGTH,
  TImpalaQueryOptions::REPORT_SKEW_LIMIT,
  TImpalaQueryOptions::OPTIMIZE_SIMPLE_LIMIT,
  TImpalaQueryOptions::USE_DOP_FOR_COSTING,
  TImpalaQueryOptions::BROADCAST_TO_PARTITION_FACTOR,
  TImpalaQueryOptions::JOIN_ROWS_PRODUCED_LIMIT,
  TImpalaQueryOptions::UTF8_MODE,
  TImpalaQueryOptions::ANALYTIC_RANK_PUSHDOWN_THRESHOLD,
  TImpalaQueryOptions::MINMAX_FILTER_THRESHOLD,
  TImpalaQueryOptions::MINMAX_FILTERING_LEVEL,
  TImpalaQueryOptions::COMPUTE_COLUMN_MINMAX_STATS,
  TImpalaQueryOptions::SHOW_COLUMN_MINMAX_STATS,
  TImpalaQueryOptions::DEFAULT_NDV_SCALE,
  TImpalaQueryOptions::KUDU_REPLICA_SELECTION,
  TImpalaQueryOptions::DELETE_STATS_IN_TRUNCATE,
  TImpalaQueryOptions::PARQUET_BLOOM_FILTERING,
  TImpalaQueryOptions::MINMAX_FILTER_SORTED_COLUMNS,
  TImpalaQueryOptions::MINMAX_FILTER_FAST_CODE_PATH,
  TImpalaQueryOptions::ENABLE_KUDU_TRANSACTION,
  TImpalaQueryOptions::MINMAX_FILTER_PARTITION_COLUMNS,
  TImpalaQueryOptions::PARQUET_BLOOM_FILTER_WRITE,
  TImpalaQueryOptions::ORC_READ_STATISTICS,
  TImpalaQueryOptions::ENABLE_ASYNC_DDL_EXECUTION,
  TImpalaQueryOptions::ENABLE_ASYNC_LOAD_DATA_EXECUTION,
  TImpalaQueryOptions::PARQUET_LATE_MATERIALIZATION_THRESHOLD
};
const char* _kTImpalaQueryOptionsNames[] = {
  "ABORT_ON_ERROR",
  "MAX_ERRORS",
  "DISABLE_CODEGEN",
  "BATCH_SIZE",
  "MEM_LIMIT",
  "NUM_NODES",
  "MAX_SCAN_RANGE_LENGTH",
  "MAX_IO_BUFFERS",
  "NUM_SCANNER_THREADS",
  "ALLOW_UNSUPPORTED_FORMATS",
  "DEFAULT_ORDER_BY_LIMIT",
  "DEBUG_ACTION",
  "ABORT_ON_DEFAULT_LIMIT_EXCEEDED",
  "COMPRESSION_CODEC",
  "SEQ_COMPRESSION_MODE",
  "HBASE_CACHING",
  "HBASE_CACHE_BLOCKS",
  "PARQUET_FILE_SIZE",
  "EXPLAIN_LEVEL",
  "SYNC_DDL",
  "REQUEST_POOL",
  "V_CPU_CORES",
  "RESERVATION_REQUEST_TIMEOUT",
  "DISABLE_CACHED_READS",
  "DISABLE_OUTERMOST_TOPN",
  "RM_INITIAL_MEM",
  "QUERY_TIMEOUT_S",
  "BUFFER_POOL_LIMIT",
  "APPX_COUNT_DISTINCT",
  "DISABLE_UNSAFE_SPILLS",
  "EXEC_SINGLE_NODE_ROWS_THRESHOLD",
  "OPTIMIZE_PARTITION_KEY_SCANS",
  "REPLICA_PREFERENCE",
  "SCHEDULE_RANDOM_REPLICA",
  "SCAN_NODE_CODEGEN_THRESHOLD",
  "DISABLE_STREAMING_PREAGGREGATIONS",
  "RUNTIME_FILTER_MODE",
  "RUNTIME_BLOOM_FILTER_SIZE",
  "RUNTIME_FILTER_WAIT_TIME_MS",
  "DISABLE_ROW_RUNTIME_FILTERING",
  "MAX_NUM_RUNTIME_FILTERS",
  "PARQUET_ANNOTATE_STRINGS_UTF8",
  "PARQUET_FALLBACK_SCHEMA_RESOLUTION",
  "MT_DOP",
  "S3_SKIP_INSERT_STAGING",
  "RUNTIME_FILTER_MAX_SIZE",
  "RUNTIME_FILTER_MIN_SIZE",
  "PREFETCH_MODE",
  "STRICT_MODE",
  "SCRATCH_LIMIT",
  "ENABLE_EXPR_REWRITES",
  "DECIMAL_V2",
  "PARQUET_DICTIONARY_FILTERING",
  "PARQUET_ARRAY_RESOLUTION",
  "PARQUET_READ_STATISTICS",
  "DEFAULT_JOIN_DISTRIBUTION_MODE",
  "DISABLE_CODEGEN_ROWS_THRESHOLD",
  "DEFAULT_SPILLABLE_BUFFER_SIZE",
  "MIN_SPILLABLE_BUFFER_SIZE",
  "MAX_ROW_SIZE",
  "IDLE_SESSION_TIMEOUT",
  "COMPUTE_STATS_MIN_SAMPLE_SIZE",
  "EXEC_TIME_LIMIT_S",
  "SHUFFLE_DISTINCT_EXPRS",
  "MAX_MEM_ESTIMATE_FOR_ADMISSION",
  "THREAD_RESERVATION_LIMIT",
  "THREAD_RESERVATION_AGGREGATE_LIMIT",
  "KUDU_READ_MODE",
  "ALLOW_ERASURE_CODED_FILES",
  "TIMEZONE",
  "SCAN_BYTES_LIMIT",
  "CPU_LIMIT_S",
  "TOPN_BYTES_LIMIT",
  "CLIENT_IDENTIFIER",
  "RESOURCE_TRACE_RATIO",
  "NUM_REMOTE_EXECUTOR_CANDIDATES",
  "NUM_ROWS_PRODUCED_LIMIT",
  "PLANNER_TESTCASE_MODE",
  "DEFAULT_FILE_FORMAT",
  "PARQUET_TIMESTAMP_TYPE",
  "PARQUET_READ_PAGE_INDEX",
  "PARQUET_WRITE_PAGE_INDEX",
  "PARQUET_PAGE_ROW_COUNT_LIMIT",
  "DISABLE_HDFS_NUM_ROWS_ESTIMATE",
  "DEFAULT_HINTS_INSERT_STATEMENT",
  "SPOOL_QUERY_RESULTS",
  "DEFAULT_TRANSACTIONAL_TYPE",
  "STATEMENT_EXPRESSION_LIMIT",
  "MAX_STATEMENT_LENGTH_BYTES",
  "DISABLE_DATA_CACHE",
  "MAX_RESULT_SPOOLING_MEM",
  "MAX_SPILLED_RESULT_SPOOLING_MEM",
  "DISABLE_HBASE_NUM_ROWS_ESTIMATE",
  "FETCH_ROWS_TIMEOUT_MS",
  "NOW_STRING",
  "PARQUET_OBJECT_STORE_SPLIT_SIZE",
  "MEM_LIMIT_EXECUTORS",
  "BROADCAST_BYTES_LIMIT",
  "PREAGG_BYTES_LIMIT",
  "ENABLE_CNF_REWRITES",
  "MAX_CNF_EXPRS",
  "KUDU_SNAPSHOT_READ_TIMESTAMP_MICROS",
  "RETRY_FAILED_QUERIES",
  "ENABLED_RUNTIME_FILTER_TYPES",
  "ASYNC_CODEGEN",
  "ENABLE_DISTINCT_SEMI_JOIN_OPTIMIZATION",
  "SORT_RUN_BYTES_LIMIT",
  "MAX_FS_WRITERS",
  "REFRESH_UPDATED_HMS_PARTITIONS",
  "SPOOL_ALL_RESULTS_FOR_RETRIES",
  "RUNTIME_FILTER_ERROR_RATE",
  "USE_LOCAL_TZ_FOR_UNIX_TIMESTAMP_CONVERSIONS",
  "CONVERT_LEGACY_HIVE_PARQUET_UTC_TIMESTAMPS",
  "ENABLE_OUTER_JOIN_TO_INNER_TRANSFORMATION",
  "TARGETED_KUDU_SCAN_RANGE_LENGTH",
  "REPORT_SKEW_LIMIT",
  "OPTIMIZE_SIMPLE_LIMIT",
  "USE_DOP_FOR_COSTING",
  "BROADCAST_TO_PARTITION_FACTOR",
  "JOIN_ROWS_PRODUCED_LIMIT",
  "UTF8_MODE",
  "ANALYTIC_RANK_PUSHDOWN_THRESHOLD",
  "MINMAX_FILTER_THRESHOLD",
  "MINMAX_FILTERING_LEVEL",
  "COMPUTE_COLUMN_MINMAX_STATS",
  "SHOW_COLUMN_MINMAX_STATS",
  "DEFAULT_NDV_SCALE",
  "KUDU_REPLICA_SELECTION",
  "DELETE_STATS_IN_TRUNCATE",
  "PARQUET_BLOOM_FILTERING",
  "MINMAX_FILTER_SORTED_COLUMNS",
  "MINMAX_FILTER_FAST_CODE_PATH",
  "ENABLE_KUDU_TRANSACTION",
  "MINMAX_FILTER_PARTITION_COLUMNS",
  "PARQUET_BLOOM_FILTER_WRITE",
  "ORC_READ_STATISTICS",
  "ENABLE_ASYNC_DDL_EXECUTION",
  "ENABLE_ASYNC_LOAD_DATA_EXECUTION",
  "PARQUET_LATE_MATERIALIZATION_THRESHOLD"
};
const std::map<int, const char*> _TImpalaQueryOptions_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(139, _kTImpalaQueryOptionsValues, _kTImpalaQueryOptionsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TImpalaQueryOptions::type& val) {
  std::map<int, const char*>::const_iterator it = _TImpalaQueryOptions_VALUES_TO_NAMES.find(val);
  if (it != _TImpalaQueryOptions_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TDmlResult::~TDmlResult() throw() {
}


void TDmlResult::__set_rows_modified(const std::map<std::string, int64_t> & val) {
  this->rows_modified = val;
}

void TDmlResult::__set_num_row_errors(const int64_t val) {
  this->num_row_errors = val;
__isset.num_row_errors = true;
}
std::ostream& operator<<(std::ostream& out, const TDmlResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDmlResult &a, TDmlResult &b) {
  using ::std::swap;
  swap(a.rows_modified, b.rows_modified);
  swap(a.num_row_errors, b.num_row_errors);
  swap(a.__isset, b.__isset);
}

TDmlResult::TDmlResult(const TDmlResult& other8) {
  rows_modified = other8.rows_modified;
  num_row_errors = other8.num_row_errors;
  __isset = other8.__isset;
}
TDmlResult::TDmlResult( TDmlResult&& other9) {
  rows_modified = std::move(other9.rows_modified);
  num_row_errors = std::move(other9.num_row_errors);
  __isset = std::move(other9.__isset);
}
TDmlResult& TDmlResult::operator=(const TDmlResult& other10) {
  rows_modified = other10.rows_modified;
  num_row_errors = other10.num_row_errors;
  __isset = other10.__isset;
  return *this;
}
TDmlResult& TDmlResult::operator=(TDmlResult&& other11) {
  rows_modified = std::move(other11.rows_modified);
  num_row_errors = std::move(other11.num_row_errors);
  __isset = std::move(other11.__isset);
  return *this;
}
void TDmlResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDmlResult(";
  out << "rows_modified=" << to_string(rows_modified);
  out << ", " << "num_row_errors="; (__isset.num_row_errors ? (out << to_string(num_row_errors)) : (out << "<null>"));
  out << ")";
}


TPingImpalaServiceResp::~TPingImpalaServiceResp() throw() {
}


void TPingImpalaServiceResp::__set_version(const std::string& val) {
  this->version = val;
}

void TPingImpalaServiceResp::__set_webserver_address(const std::string& val) {
  this->webserver_address = val;
}
std::ostream& operator<<(std::ostream& out, const TPingImpalaServiceResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TPingImpalaServiceResp &a, TPingImpalaServiceResp &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.webserver_address, b.webserver_address);
  swap(a.__isset, b.__isset);
}

TPingImpalaServiceResp::TPingImpalaServiceResp(const TPingImpalaServiceResp& other12) {
  version = other12.version;
  webserver_address = other12.webserver_address;
  __isset = other12.__isset;
}
TPingImpalaServiceResp::TPingImpalaServiceResp( TPingImpalaServiceResp&& other13) {
  version = std::move(other13.version);
  webserver_address = std::move(other13.webserver_address);
  __isset = std::move(other13.__isset);
}
TPingImpalaServiceResp& TPingImpalaServiceResp::operator=(const TPingImpalaServiceResp& other14) {
  version = other14.version;
  webserver_address = other14.webserver_address;
  __isset = other14.__isset;
  return *this;
}
TPingImpalaServiceResp& TPingImpalaServiceResp::operator=(TPingImpalaServiceResp&& other15) {
  version = std::move(other15.version);
  webserver_address = std::move(other15.webserver_address);
  __isset = std::move(other15.__isset);
  return *this;
}
void TPingImpalaServiceResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPingImpalaServiceResp(";
  out << "version=" << to_string(version);
  out << ", " << "webserver_address=" << to_string(webserver_address);
  out << ")";
}


TResetTableReq::~TResetTableReq() throw() {
}


void TResetTableReq::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void TResetTableReq::__set_table_name(const std::string& val) {
  this->table_name = val;
}
std::ostream& operator<<(std::ostream& out, const TResetTableReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TResetTableReq &a, TResetTableReq &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
}

TResetTableReq::TResetTableReq(const TResetTableReq& other16) {
  db_name = other16.db_name;
  table_name = other16.table_name;
}
TResetTableReq::TResetTableReq( TResetTableReq&& other17) {
  db_name = std::move(other17.db_name);
  table_name = std::move(other17.table_name);
}
TResetTableReq& TResetTableReq::operator=(const TResetTableReq& other18) {
  db_name = other18.db_name;
  table_name = other18.table_name;
  return *this;
}
TResetTableReq& TResetTableReq::operator=(TResetTableReq&& other19) {
  db_name = std::move(other19.db_name);
  table_name = std::move(other19.table_name);
  return *this;
}
void TResetTableReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TResetTableReq(";
  out << "db_name=" << to_string(db_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ")";
}


TPingImpalaHS2ServiceReq::~TPingImpalaHS2ServiceReq() throw() {
}


void TPingImpalaHS2ServiceReq::__set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val) {
  this->sessionHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TPingImpalaHS2ServiceReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TPingImpalaHS2ServiceReq &a, TPingImpalaHS2ServiceReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
}

TPingImpalaHS2ServiceReq::TPingImpalaHS2ServiceReq(const TPingImpalaHS2ServiceReq& other20) {
  sessionHandle = other20.sessionHandle;
}
TPingImpalaHS2ServiceReq::TPingImpalaHS2ServiceReq( TPingImpalaHS2ServiceReq&& other21) {
  sessionHandle = std::move(other21.sessionHandle);
}
TPingImpalaHS2ServiceReq& TPingImpalaHS2ServiceReq::operator=(const TPingImpalaHS2ServiceReq& other22) {
  sessionHandle = other22.sessionHandle;
  return *this;
}
TPingImpalaHS2ServiceReq& TPingImpalaHS2ServiceReq::operator=(TPingImpalaHS2ServiceReq&& other23) {
  sessionHandle = std::move(other23.sessionHandle);
  return *this;
}
void TPingImpalaHS2ServiceReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPingImpalaHS2ServiceReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ")";
}


TPingImpalaHS2ServiceResp::~TPingImpalaHS2ServiceResp() throw() {
}


void TPingImpalaHS2ServiceResp::__set_status(const  ::apache::hive::service::cli::thrift::TStatus& val) {
  this->status = val;
}

void TPingImpalaHS2ServiceResp::__set_version(const std::string& val) {
  this->version = val;
__isset.version = true;
}

void TPingImpalaHS2ServiceResp::__set_webserver_address(const std::string& val) {
  this->webserver_address = val;
__isset.webserver_address = true;
}

void TPingImpalaHS2ServiceResp::__set_timestamp(const int64_t val) {
  this->timestamp = val;
__isset.timestamp = true;
}
std::ostream& operator<<(std::ostream& out, const TPingImpalaHS2ServiceResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TPingImpalaHS2ServiceResp &a, TPingImpalaHS2ServiceResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.version, b.version);
  swap(a.webserver_address, b.webserver_address);
  swap(a.timestamp, b.timestamp);
  swap(a.__isset, b.__isset);
}

TPingImpalaHS2ServiceResp::TPingImpalaHS2ServiceResp(const TPingImpalaHS2ServiceResp& other24) {
  status = other24.status;
  version = other24.version;
  webserver_address = other24.webserver_address;
  timestamp = other24.timestamp;
  __isset = other24.__isset;
}
TPingImpalaHS2ServiceResp::TPingImpalaHS2ServiceResp( TPingImpalaHS2ServiceResp&& other25) {
  status = std::move(other25.status);
  version = std::move(other25.version);
  webserver_address = std::move(other25.webserver_address);
  timestamp = std::move(other25.timestamp);
  __isset = std::move(other25.__isset);
}
TPingImpalaHS2ServiceResp& TPingImpalaHS2ServiceResp::operator=(const TPingImpalaHS2ServiceResp& other26) {
  status = other26.status;
  version = other26.version;
  webserver_address = other26.webserver_address;
  timestamp = other26.timestamp;
  __isset = other26.__isset;
  return *this;
}
TPingImpalaHS2ServiceResp& TPingImpalaHS2ServiceResp::operator=(TPingImpalaHS2ServiceResp&& other27) {
  status = std::move(other27.status);
  version = std::move(other27.version);
  webserver_address = std::move(other27.webserver_address);
  timestamp = std::move(other27.timestamp);
  __isset = std::move(other27.__isset);
  return *this;
}
void TPingImpalaHS2ServiceResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPingImpalaHS2ServiceResp(";
  out << "status=" << to_string(status);
  out << ", " << "version="; (__isset.version ? (out << to_string(version)) : (out << "<null>"));
  out << ", " << "webserver_address="; (__isset.webserver_address ? (out << to_string(webserver_address)) : (out << "<null>"));
  out << ", " << "timestamp="; (__isset.timestamp ? (out << to_string(timestamp)) : (out << "<null>"));
  out << ")";
}


TCloseImpalaOperationReq::~TCloseImpalaOperationReq() throw() {
}


void TCloseImpalaOperationReq::__set_operationHandle(const  ::apache::hive::service::cli::thrift::TOperationHandle& val) {
  this->operationHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TCloseImpalaOperationReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCloseImpalaOperationReq &a, TCloseImpalaOperationReq &b) {
  using ::std::swap;
  swap(a.operationHandle, b.operationHandle);
}

TCloseImpalaOperationReq::TCloseImpalaOperationReq(const TCloseImpalaOperationReq& other28) {
  operationHandle = other28.operationHandle;
}
TCloseImpalaOperationReq::TCloseImpalaOperationReq( TCloseImpalaOperationReq&& other29) {
  operationHandle = std::move(other29.operationHandle);
}
TCloseImpalaOperationReq& TCloseImpalaOperationReq::operator=(const TCloseImpalaOperationReq& other30) {
  operationHandle = other30.operationHandle;
  return *this;
}
TCloseImpalaOperationReq& TCloseImpalaOperationReq::operator=(TCloseImpalaOperationReq&& other31) {
  operationHandle = std::move(other31.operationHandle);
  return *this;
}
void TCloseImpalaOperationReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCloseImpalaOperationReq(";
  out << "operationHandle=" << to_string(operationHandle);
  out << ")";
}


TCloseImpalaOperationResp::~TCloseImpalaOperationResp() throw() {
}


void TCloseImpalaOperationResp::__set_status(const  ::apache::hive::service::cli::thrift::TStatus& val) {
  this->status = val;
}

void TCloseImpalaOperationResp::__set_dml_result(const TDmlResult& val) {
  this->dml_result = val;
__isset.dml_result = true;
}
std::ostream& operator<<(std::ostream& out, const TCloseImpalaOperationResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCloseImpalaOperationResp &a, TCloseImpalaOperationResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.dml_result, b.dml_result);
  swap(a.__isset, b.__isset);
}

TCloseImpalaOperationResp::TCloseImpalaOperationResp(const TCloseImpalaOperationResp& other32) {
  status = other32.status;
  dml_result = other32.dml_result;
  __isset = other32.__isset;
}
TCloseImpalaOperationResp::TCloseImpalaOperationResp( TCloseImpalaOperationResp&& other33) {
  status = std::move(other33.status);
  dml_result = std::move(other33.dml_result);
  __isset = std::move(other33.__isset);
}
TCloseImpalaOperationResp& TCloseImpalaOperationResp::operator=(const TCloseImpalaOperationResp& other34) {
  status = other34.status;
  dml_result = other34.dml_result;
  __isset = other34.__isset;
  return *this;
}
TCloseImpalaOperationResp& TCloseImpalaOperationResp::operator=(TCloseImpalaOperationResp&& other35) {
  status = std::move(other35.status);
  dml_result = std::move(other35.dml_result);
  __isset = std::move(other35.__isset);
  return *this;
}
void TCloseImpalaOperationResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCloseImpalaOperationResp(";
  out << "status=" << to_string(status);
  out << ", " << "dml_result="; (__isset.dml_result ? (out << to_string(dml_result)) : (out << "<null>"));
  out << ")";
}


TGetExecSummaryReq::~TGetExecSummaryReq() throw() {
}


void TGetExecSummaryReq::__set_operationHandle(const  ::apache::hive::service::cli::thrift::TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}

void TGetExecSummaryReq::__set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val) {
  this->sessionHandle = val;
__isset.sessionHandle = true;
}

void TGetExecSummaryReq::__set_include_query_attempts(const bool val) {
  this->include_query_attempts = val;
__isset.include_query_attempts = true;
}
std::ostream& operator<<(std::ostream& out, const TGetExecSummaryReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetExecSummaryReq &a, TGetExecSummaryReq &b) {
  using ::std::swap;
  swap(a.operationHandle, b.operationHandle);
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.include_query_attempts, b.include_query_attempts);
  swap(a.__isset, b.__isset);
}

TGetExecSummaryReq::TGetExecSummaryReq(const TGetExecSummaryReq& other36) {
  operationHandle = other36.operationHandle;
  sessionHandle = other36.sessionHandle;
  include_query_attempts = other36.include_query_attempts;
  __isset = other36.__isset;
}
TGetExecSummaryReq::TGetExecSummaryReq( TGetExecSummaryReq&& other37) {
  operationHandle = std::move(other37.operationHandle);
  sessionHandle = std::move(other37.sessionHandle);
  include_query_attempts = std::move(other37.include_query_attempts);
  __isset = std::move(other37.__isset);
}
TGetExecSummaryReq& TGetExecSummaryReq::operator=(const TGetExecSummaryReq& other38) {
  operationHandle = other38.operationHandle;
  sessionHandle = other38.sessionHandle;
  include_query_attempts = other38.include_query_attempts;
  __isset = other38.__isset;
  return *this;
}
TGetExecSummaryReq& TGetExecSummaryReq::operator=(TGetExecSummaryReq&& other39) {
  operationHandle = std::move(other39.operationHandle);
  sessionHandle = std::move(other39.sessionHandle);
  include_query_attempts = std::move(other39.include_query_attempts);
  __isset = std::move(other39.__isset);
  return *this;
}
void TGetExecSummaryReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetExecSummaryReq(";
  out << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ", " << "sessionHandle="; (__isset.sessionHandle ? (out << to_string(sessionHandle)) : (out << "<null>"));
  out << ", " << "include_query_attempts="; (__isset.include_query_attempts ? (out << to_string(include_query_attempts)) : (out << "<null>"));
  out << ")";
}


TGetExecSummaryResp::~TGetExecSummaryResp() throw() {
}


void TGetExecSummaryResp::__set_status(const  ::apache::hive::service::cli::thrift::TStatus& val) {
  this->status = val;
}

void TGetExecSummaryResp::__set_summary(const  ::impala::TExecSummary& val) {
  this->summary = val;
__isset.summary = true;
}

void TGetExecSummaryResp::__set_failed_summaries(const std::vector< ::impala::TExecSummary> & val) {
  this->failed_summaries = val;
__isset.failed_summaries = true;
}
std::ostream& operator<<(std::ostream& out, const TGetExecSummaryResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetExecSummaryResp &a, TGetExecSummaryResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.summary, b.summary);
  swap(a.failed_summaries, b.failed_summaries);
  swap(a.__isset, b.__isset);
}

TGetExecSummaryResp::TGetExecSummaryResp(const TGetExecSummaryResp& other46) {
  status = other46.status;
  summary = other46.summary;
  failed_summaries = other46.failed_summaries;
  __isset = other46.__isset;
}
TGetExecSummaryResp::TGetExecSummaryResp( TGetExecSummaryResp&& other47) {
  status = std::move(other47.status);
  summary = std::move(other47.summary);
  failed_summaries = std::move(other47.failed_summaries);
  __isset = std::move(other47.__isset);
}
TGetExecSummaryResp& TGetExecSummaryResp::operator=(const TGetExecSummaryResp& other48) {
  status = other48.status;
  summary = other48.summary;
  failed_summaries = other48.failed_summaries;
  __isset = other48.__isset;
  return *this;
}
TGetExecSummaryResp& TGetExecSummaryResp::operator=(TGetExecSummaryResp&& other49) {
  status = std::move(other49.status);
  summary = std::move(other49.summary);
  failed_summaries = std::move(other49.failed_summaries);
  __isset = std::move(other49.__isset);
  return *this;
}
void TGetExecSummaryResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetExecSummaryResp(";
  out << "status=" << to_string(status);
  out << ", " << "summary="; (__isset.summary ? (out << to_string(summary)) : (out << "<null>"));
  out << ", " << "failed_summaries="; (__isset.failed_summaries ? (out << to_string(failed_summaries)) : (out << "<null>"));
  out << ")";
}


TGetRuntimeProfileReq::~TGetRuntimeProfileReq() throw() {
}


void TGetRuntimeProfileReq::__set_operationHandle(const  ::apache::hive::service::cli::thrift::TOperationHandle& val) {
  this->operationHandle = val;
__isset.operationHandle = true;
}

void TGetRuntimeProfileReq::__set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val) {
  this->sessionHandle = val;
__isset.sessionHandle = true;
}

void TGetRuntimeProfileReq::__set_format(const  ::impala::TRuntimeProfileFormat::type val) {
  this->format = val;
__isset.format = true;
}

void TGetRuntimeProfileReq::__set_include_query_attempts(const bool val) {
  this->include_query_attempts = val;
__isset.include_query_attempts = true;
}
std::ostream& operator<<(std::ostream& out, const TGetRuntimeProfileReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetRuntimeProfileReq &a, TGetRuntimeProfileReq &b) {
  using ::std::swap;
  swap(a.operationHandle, b.operationHandle);
  swap(a.sessionHandle, b.sessionHandle);
  swap(a.format, b.format);
  swap(a.include_query_attempts, b.include_query_attempts);
  swap(a.__isset, b.__isset);
}

TGetRuntimeProfileReq::TGetRuntimeProfileReq(const TGetRuntimeProfileReq& other51) {
  operationHandle = other51.operationHandle;
  sessionHandle = other51.sessionHandle;
  format = other51.format;
  include_query_attempts = other51.include_query_attempts;
  __isset = other51.__isset;
}
TGetRuntimeProfileReq::TGetRuntimeProfileReq( TGetRuntimeProfileReq&& other52) {
  operationHandle = std::move(other52.operationHandle);
  sessionHandle = std::move(other52.sessionHandle);
  format = std::move(other52.format);
  include_query_attempts = std::move(other52.include_query_attempts);
  __isset = std::move(other52.__isset);
}
TGetRuntimeProfileReq& TGetRuntimeProfileReq::operator=(const TGetRuntimeProfileReq& other53) {
  operationHandle = other53.operationHandle;
  sessionHandle = other53.sessionHandle;
  format = other53.format;
  include_query_attempts = other53.include_query_attempts;
  __isset = other53.__isset;
  return *this;
}
TGetRuntimeProfileReq& TGetRuntimeProfileReq::operator=(TGetRuntimeProfileReq&& other54) {
  operationHandle = std::move(other54.operationHandle);
  sessionHandle = std::move(other54.sessionHandle);
  format = std::move(other54.format);
  include_query_attempts = std::move(other54.include_query_attempts);
  __isset = std::move(other54.__isset);
  return *this;
}
void TGetRuntimeProfileReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetRuntimeProfileReq(";
  out << "operationHandle="; (__isset.operationHandle ? (out << to_string(operationHandle)) : (out << "<null>"));
  out << ", " << "sessionHandle="; (__isset.sessionHandle ? (out << to_string(sessionHandle)) : (out << "<null>"));
  out << ", " << "format="; (__isset.format ? (out << to_string(format)) : (out << "<null>"));
  out << ", " << "include_query_attempts="; (__isset.include_query_attempts ? (out << to_string(include_query_attempts)) : (out << "<null>"));
  out << ")";
}


TGetRuntimeProfileResp::~TGetRuntimeProfileResp() throw() {
}


void TGetRuntimeProfileResp::__set_status(const  ::apache::hive::service::cli::thrift::TStatus& val) {
  this->status = val;
}

void TGetRuntimeProfileResp::__set_profile(const std::string& val) {
  this->profile = val;
__isset.profile = true;
}

void TGetRuntimeProfileResp::__set_thrift_profile(const  ::impala::TRuntimeProfileTree& val) {
  this->thrift_profile = val;
__isset.thrift_profile = true;
}

void TGetRuntimeProfileResp::__set_failed_profiles(const std::vector<std::string> & val) {
  this->failed_profiles = val;
__isset.failed_profiles = true;
}

void TGetRuntimeProfileResp::__set_failed_thrift_profiles(const std::vector< ::impala::TRuntimeProfileTree> & val) {
  this->failed_thrift_profiles = val;
__isset.failed_thrift_profiles = true;
}
std::ostream& operator<<(std::ostream& out, const TGetRuntimeProfileResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetRuntimeProfileResp &a, TGetRuntimeProfileResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.profile, b.profile);
  swap(a.thrift_profile, b.thrift_profile);
  swap(a.failed_profiles, b.failed_profiles);
  swap(a.failed_thrift_profiles, b.failed_thrift_profiles);
  swap(a.__isset, b.__isset);
}

TGetRuntimeProfileResp::TGetRuntimeProfileResp(const TGetRuntimeProfileResp& other67) {
  status = other67.status;
  profile = other67.profile;
  thrift_profile = other67.thrift_profile;
  failed_profiles = other67.failed_profiles;
  failed_thrift_profiles = other67.failed_thrift_profiles;
  __isset = other67.__isset;
}
TGetRuntimeProfileResp::TGetRuntimeProfileResp( TGetRuntimeProfileResp&& other68) {
  status = std::move(other68.status);
  profile = std::move(other68.profile);
  thrift_profile = std::move(other68.thrift_profile);
  failed_profiles = std::move(other68.failed_profiles);
  failed_thrift_profiles = std::move(other68.failed_thrift_profiles);
  __isset = std::move(other68.__isset);
}
TGetRuntimeProfileResp& TGetRuntimeProfileResp::operator=(const TGetRuntimeProfileResp& other69) {
  status = other69.status;
  profile = other69.profile;
  thrift_profile = other69.thrift_profile;
  failed_profiles = other69.failed_profiles;
  failed_thrift_profiles = other69.failed_thrift_profiles;
  __isset = other69.__isset;
  return *this;
}
TGetRuntimeProfileResp& TGetRuntimeProfileResp::operator=(TGetRuntimeProfileResp&& other70) {
  status = std::move(other70.status);
  profile = std::move(other70.profile);
  thrift_profile = std::move(other70.thrift_profile);
  failed_profiles = std::move(other70.failed_profiles);
  failed_thrift_profiles = std::move(other70.failed_thrift_profiles);
  __isset = std::move(other70.__isset);
  return *this;
}
void TGetRuntimeProfileResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetRuntimeProfileResp(";
  out << "status=" << to_string(status);
  out << ", " << "profile="; (__isset.profile ? (out << to_string(profile)) : (out << "<null>"));
  out << ", " << "thrift_profile="; (__isset.thrift_profile ? (out << to_string(thrift_profile)) : (out << "<null>"));
  out << ", " << "failed_profiles="; (__isset.failed_profiles ? (out << to_string(failed_profiles)) : (out << "<null>"));
  out << ", " << "failed_thrift_profiles="; (__isset.failed_thrift_profiles ? (out << to_string(failed_thrift_profiles)) : (out << "<null>"));
  out << ")";
}


TExecutePlannedStatementReq::~TExecutePlannedStatementReq() throw() {
}


void TExecutePlannedStatementReq::__set_statementReq(const  ::apache::hive::service::cli::thrift::TExecuteStatementReq& val) {
  this->statementReq = val;
}

void TExecutePlannedStatementReq::__set_plan(const  ::impala::TExecRequest& val) {
  this->plan = val;
}
std::ostream& operator<<(std::ostream& out, const TExecutePlannedStatementReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TExecutePlannedStatementReq &a, TExecutePlannedStatementReq &b) {
  using ::std::swap;
  swap(a.statementReq, b.statementReq);
  swap(a.plan, b.plan);
}

TExecutePlannedStatementReq::TExecutePlannedStatementReq(const TExecutePlannedStatementReq& other71) {
  statementReq = other71.statementReq;
  plan = other71.plan;
}
TExecutePlannedStatementReq::TExecutePlannedStatementReq( TExecutePlannedStatementReq&& other72) {
  statementReq = std::move(other72.statementReq);
  plan = std::move(other72.plan);
}
TExecutePlannedStatementReq& TExecutePlannedStatementReq::operator=(const TExecutePlannedStatementReq& other73) {
  statementReq = other73.statementReq;
  plan = other73.plan;
  return *this;
}
TExecutePlannedStatementReq& TExecutePlannedStatementReq::operator=(TExecutePlannedStatementReq&& other74) {
  statementReq = std::move(other74.statementReq);
  plan = std::move(other74.plan);
  return *this;
}
void TExecutePlannedStatementReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TExecutePlannedStatementReq(";
  out << "statementReq=" << to_string(statementReq);
  out << ", " << "plan=" << to_string(plan);
  out << ")";
}


TGetBackendConfigReq::~TGetBackendConfigReq() throw() {
}


void TGetBackendConfigReq::__set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val) {
  this->sessionHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TGetBackendConfigReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetBackendConfigReq &a, TGetBackendConfigReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
}

TGetBackendConfigReq::TGetBackendConfigReq(const TGetBackendConfigReq& other75) {
  sessionHandle = other75.sessionHandle;
}
TGetBackendConfigReq::TGetBackendConfigReq( TGetBackendConfigReq&& other76) {
  sessionHandle = std::move(other76.sessionHandle);
}
TGetBackendConfigReq& TGetBackendConfigReq::operator=(const TGetBackendConfigReq& other77) {
  sessionHandle = other77.sessionHandle;
  return *this;
}
TGetBackendConfigReq& TGetBackendConfigReq::operator=(TGetBackendConfigReq&& other78) {
  sessionHandle = std::move(other78.sessionHandle);
  return *this;
}
void TGetBackendConfigReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetBackendConfigReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ")";
}


TGetBackendConfigResp::~TGetBackendConfigResp() throw() {
}


void TGetBackendConfigResp::__set_status(const  ::apache::hive::service::cli::thrift::TStatus& val) {
  this->status = val;
}

void TGetBackendConfigResp::__set_backend_config(const  ::impala::TBackendGflags& val) {
  this->backend_config = val;
}
std::ostream& operator<<(std::ostream& out, const TGetBackendConfigResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetBackendConfigResp &a, TGetBackendConfigResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.backend_config, b.backend_config);
}

TGetBackendConfigResp::TGetBackendConfigResp(const TGetBackendConfigResp& other79) {
  status = other79.status;
  backend_config = other79.backend_config;
}
TGetBackendConfigResp::TGetBackendConfigResp( TGetBackendConfigResp&& other80) {
  status = std::move(other80.status);
  backend_config = std::move(other80.backend_config);
}
TGetBackendConfigResp& TGetBackendConfigResp::operator=(const TGetBackendConfigResp& other81) {
  status = other81.status;
  backend_config = other81.backend_config;
  return *this;
}
TGetBackendConfigResp& TGetBackendConfigResp::operator=(TGetBackendConfigResp&& other82) {
  status = std::move(other82.status);
  backend_config = std::move(other82.backend_config);
  return *this;
}
void TGetBackendConfigResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetBackendConfigResp(";
  out << "status=" << to_string(status);
  out << ", " << "backend_config=" << to_string(backend_config);
  out << ")";
}


TGetExecutorMembershipReq::~TGetExecutorMembershipReq() throw() {
}


void TGetExecutorMembershipReq::__set_sessionHandle(const  ::apache::hive::service::cli::thrift::TSessionHandle& val) {
  this->sessionHandle = val;
}
std::ostream& operator<<(std::ostream& out, const TGetExecutorMembershipReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetExecutorMembershipReq &a, TGetExecutorMembershipReq &b) {
  using ::std::swap;
  swap(a.sessionHandle, b.sessionHandle);
}

TGetExecutorMembershipReq::TGetExecutorMembershipReq(const TGetExecutorMembershipReq& other83) {
  sessionHandle = other83.sessionHandle;
}
TGetExecutorMembershipReq::TGetExecutorMembershipReq( TGetExecutorMembershipReq&& other84) {
  sessionHandle = std::move(other84.sessionHandle);
}
TGetExecutorMembershipReq& TGetExecutorMembershipReq::operator=(const TGetExecutorMembershipReq& other85) {
  sessionHandle = other85.sessionHandle;
  return *this;
}
TGetExecutorMembershipReq& TGetExecutorMembershipReq::operator=(TGetExecutorMembershipReq&& other86) {
  sessionHandle = std::move(other86.sessionHandle);
  return *this;
}
void TGetExecutorMembershipReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetExecutorMembershipReq(";
  out << "sessionHandle=" << to_string(sessionHandle);
  out << ")";
}


TGetExecutorMembershipResp::~TGetExecutorMembershipResp() throw() {
}


void TGetExecutorMembershipResp::__set_status(const  ::apache::hive::service::cli::thrift::TStatus& val) {
  this->status = val;
}

void TGetExecutorMembershipResp::__set_executor_membership(const  ::impala::TUpdateExecutorMembershipRequest& val) {
  this->executor_membership = val;
}
std::ostream& operator<<(std::ostream& out, const TGetExecutorMembershipResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetExecutorMembershipResp &a, TGetExecutorMembershipResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.executor_membership, b.executor_membership);
}

TGetExecutorMembershipResp::TGetExecutorMembershipResp(const TGetExecutorMembershipResp& other87) {
  status = other87.status;
  executor_membership = other87.executor_membership;
}
TGetExecutorMembershipResp::TGetExecutorMembershipResp( TGetExecutorMembershipResp&& other88) {
  status = std::move(other88.status);
  executor_membership = std::move(other88.executor_membership);
}
TGetExecutorMembershipResp& TGetExecutorMembershipResp::operator=(const TGetExecutorMembershipResp& other89) {
  status = other89.status;
  executor_membership = other89.executor_membership;
  return *this;
}
TGetExecutorMembershipResp& TGetExecutorMembershipResp::operator=(TGetExecutorMembershipResp&& other90) {
  status = std::move(other90.status);
  executor_membership = std::move(other90.executor_membership);
  return *this;
}
void TGetExecutorMembershipResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetExecutorMembershipResp(";
  out << "status=" << to_string(status);
  out << ", " << "executor_membership=" << to_string(executor_membership);
  out << ")";
}


TInitQueryContextResp::~TInitQueryContextResp() throw() {
}


void TInitQueryContextResp::__set_status(const  ::apache::hive::service::cli::thrift::TStatus& val) {
  this->status = val;
}

void TInitQueryContextResp::__set_query_ctx(const  ::impala::TQueryCtx& val) {
  this->query_ctx = val;
}
std::ostream& operator<<(std::ostream& out, const TInitQueryContextResp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TInitQueryContextResp &a, TInitQueryContextResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.query_ctx, b.query_ctx);
}

TInitQueryContextResp::TInitQueryContextResp(const TInitQueryContextResp& other91) {
  status = other91.status;
  query_ctx = other91.query_ctx;
}
TInitQueryContextResp::TInitQueryContextResp( TInitQueryContextResp&& other92) {
  status = std::move(other92.status);
  query_ctx = std::move(other92.query_ctx);
}
TInitQueryContextResp& TInitQueryContextResp::operator=(const TInitQueryContextResp& other93) {
  status = other93.status;
  query_ctx = other93.query_ctx;
  return *this;
}
TInitQueryContextResp& TInitQueryContextResp::operator=(TInitQueryContextResp&& other94) {
  status = std::move(other94.status);
  query_ctx = std::move(other94.query_ctx);
  return *this;
}
void TInitQueryContextResp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TInitQueryContextResp(";
  out << "status=" << to_string(status);
  out << ", " << "query_ctx=" << to_string(query_ctx);
  out << ")";
}

} // namespace
