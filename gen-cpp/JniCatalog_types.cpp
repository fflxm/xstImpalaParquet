/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "JniCatalog_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {

int _kTDdlTypeValues[] = {
  TDdlType::ALTER_TABLE,
  TDdlType::ALTER_VIEW,
  TDdlType::CREATE_DATABASE,
  TDdlType::CREATE_TABLE,
  TDdlType::CREATE_TABLE_AS_SELECT,
  TDdlType::CREATE_TABLE_LIKE,
  TDdlType::CREATE_VIEW,
  TDdlType::CREATE_FUNCTION,
  TDdlType::COMPUTE_STATS,
  TDdlType::DROP_DATABASE,
  TDdlType::DROP_TABLE,
  TDdlType::DROP_VIEW,
  TDdlType::DROP_FUNCTION,
  TDdlType::CREATE_DATA_SOURCE,
  TDdlType::DROP_DATA_SOURCE,
  TDdlType::DROP_STATS,
  TDdlType::CREATE_ROLE,
  TDdlType::DROP_ROLE,
  TDdlType::GRANT_ROLE,
  TDdlType::REVOKE_ROLE,
  TDdlType::GRANT_PRIVILEGE,
  TDdlType::REVOKE_PRIVILEGE,
  TDdlType::TRUNCATE_TABLE,
  TDdlType::COMMENT_ON,
  TDdlType::ALTER_DATABASE,
  TDdlType::COPY_TESTCASE
};
const char* _kTDdlTypeNames[] = {
  "ALTER_TABLE",
  "ALTER_VIEW",
  "CREATE_DATABASE",
  "CREATE_TABLE",
  "CREATE_TABLE_AS_SELECT",
  "CREATE_TABLE_LIKE",
  "CREATE_VIEW",
  "CREATE_FUNCTION",
  "COMPUTE_STATS",
  "DROP_DATABASE",
  "DROP_TABLE",
  "DROP_VIEW",
  "DROP_FUNCTION",
  "CREATE_DATA_SOURCE",
  "DROP_DATA_SOURCE",
  "DROP_STATS",
  "CREATE_ROLE",
  "DROP_ROLE",
  "GRANT_ROLE",
  "REVOKE_ROLE",
  "GRANT_PRIVILEGE",
  "REVOKE_PRIVILEGE",
  "TRUNCATE_TABLE",
  "COMMENT_ON",
  "ALTER_DATABASE",
  "COPY_TESTCASE"
};
const std::map<int, const char*> _TDdlType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(26, _kTDdlTypeValues, _kTDdlTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TDdlType::type& val) {
  std::map<int, const char*>::const_iterator it = _TDdlType_VALUES_TO_NAMES.find(val);
  if (it != _TDdlType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTOwnerTypeValues[] = {
  TOwnerType::USER,
  TOwnerType::ROLE
};
const char* _kTOwnerTypeNames[] = {
  "USER",
  "ROLE"
};
const std::map<int, const char*> _TOwnerType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTOwnerTypeValues, _kTOwnerTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TOwnerType::type& val) {
  std::map<int, const char*>::const_iterator it = _TOwnerType_VALUES_TO_NAMES.find(val);
  if (it != _TOwnerType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTAlterDbTypeValues[] = {
  TAlterDbType::SET_OWNER
};
const char* _kTAlterDbTypeNames[] = {
  "SET_OWNER"
};
const std::map<int, const char*> _TAlterDbType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kTAlterDbTypeValues, _kTAlterDbTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TAlterDbType::type& val) {
  std::map<int, const char*>::const_iterator it = _TAlterDbType_VALUES_TO_NAMES.find(val);
  if (it != _TAlterDbType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTAlterTableTypeValues[] = {
  TAlterTableType::ADD_COLUMNS,
  TAlterTableType::REPLACE_COLUMNS,
  TAlterTableType::ADD_PARTITION,
  TAlterTableType::ADD_DROP_RANGE_PARTITION,
  TAlterTableType::ALTER_COLUMN,
  TAlterTableType::DROP_COLUMN,
  TAlterTableType::DROP_PARTITION,
  TAlterTableType::RENAME_TABLE,
  TAlterTableType::RENAME_VIEW,
  TAlterTableType::SET_FILE_FORMAT,
  TAlterTableType::SET_LOCATION,
  TAlterTableType::SET_TBL_PROPERTIES,
  TAlterTableType::UPDATE_STATS,
  TAlterTableType::SET_CACHED,
  TAlterTableType::RECOVER_PARTITIONS,
  TAlterTableType::SET_ROW_FORMAT,
  TAlterTableType::SET_OWNER,
  TAlterTableType::UNSET_TBL_PROPERTIES,
  TAlterTableType::SET_PARTITION_SPEC
};
const char* _kTAlterTableTypeNames[] = {
  "ADD_COLUMNS",
  "REPLACE_COLUMNS",
  "ADD_PARTITION",
  "ADD_DROP_RANGE_PARTITION",
  "ALTER_COLUMN",
  "DROP_COLUMN",
  "DROP_PARTITION",
  "RENAME_TABLE",
  "RENAME_VIEW",
  "SET_FILE_FORMAT",
  "SET_LOCATION",
  "SET_TBL_PROPERTIES",
  "UPDATE_STATS",
  "SET_CACHED",
  "RECOVER_PARTITIONS",
  "SET_ROW_FORMAT",
  "SET_OWNER",
  "UNSET_TBL_PROPERTIES",
  "SET_PARTITION_SPEC"
};
const std::map<int, const char*> _TAlterTableType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(19, _kTAlterTableTypeValues, _kTAlterTableTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TAlterTableType::type& val) {
  std::map<int, const char*>::const_iterator it = _TAlterTableType_VALUES_TO_NAMES.find(val);
  if (it != _TAlterTableType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTRangePartitionOperationTypeValues[] = {
  TRangePartitionOperationType::ADD,
  TRangePartitionOperationType::DROP
};
const char* _kTRangePartitionOperationTypeNames[] = {
  "ADD",
  "DROP"
};
const std::map<int, const char*> _TRangePartitionOperationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTRangePartitionOperationTypeValues, _kTRangePartitionOperationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TRangePartitionOperationType::type& val) {
  std::map<int, const char*>::const_iterator it = _TRangePartitionOperationType_VALUES_TO_NAMES.find(val);
  if (it != _TRangePartitionOperationType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TAlterDbSetOwnerParams::~TAlterDbSetOwnerParams() throw() {
}


void TAlterDbSetOwnerParams::__set_owner_type(const TOwnerType::type val) {
  this->owner_type = val;
}

void TAlterDbSetOwnerParams::__set_owner_name(const std::string& val) {
  this->owner_name = val;
}

void TAlterDbSetOwnerParams::__set_server_name(const std::string& val) {
  this->server_name = val;
__isset.server_name = true;
}
std::ostream& operator<<(std::ostream& out, const TAlterDbSetOwnerParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterDbSetOwnerParams &a, TAlterDbSetOwnerParams &b) {
  using ::std::swap;
  swap(a.owner_type, b.owner_type);
  swap(a.owner_name, b.owner_name);
  swap(a.server_name, b.server_name);
  swap(a.__isset, b.__isset);
}

TAlterDbSetOwnerParams::TAlterDbSetOwnerParams(const TAlterDbSetOwnerParams& other1) {
  owner_type = other1.owner_type;
  owner_name = other1.owner_name;
  server_name = other1.server_name;
  __isset = other1.__isset;
}
TAlterDbSetOwnerParams::TAlterDbSetOwnerParams( TAlterDbSetOwnerParams&& other2) {
  owner_type = std::move(other2.owner_type);
  owner_name = std::move(other2.owner_name);
  server_name = std::move(other2.server_name);
  __isset = std::move(other2.__isset);
}
TAlterDbSetOwnerParams& TAlterDbSetOwnerParams::operator=(const TAlterDbSetOwnerParams& other3) {
  owner_type = other3.owner_type;
  owner_name = other3.owner_name;
  server_name = other3.server_name;
  __isset = other3.__isset;
  return *this;
}
TAlterDbSetOwnerParams& TAlterDbSetOwnerParams::operator=(TAlterDbSetOwnerParams&& other4) {
  owner_type = std::move(other4.owner_type);
  owner_name = std::move(other4.owner_name);
  server_name = std::move(other4.server_name);
  __isset = std::move(other4.__isset);
  return *this;
}
void TAlterDbSetOwnerParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterDbSetOwnerParams(";
  out << "owner_type=" << to_string(owner_type);
  out << ", " << "owner_name=" << to_string(owner_name);
  out << ", " << "server_name="; (__isset.server_name ? (out << to_string(server_name)) : (out << "<null>"));
  out << ")";
}


TAlterDbParams::~TAlterDbParams() throw() {
}


void TAlterDbParams::__set_alter_type(const TAlterDbType::type val) {
  this->alter_type = val;
}

void TAlterDbParams::__set_db(const std::string& val) {
  this->db = val;
}

void TAlterDbParams::__set_set_owner_params(const TAlterDbSetOwnerParams& val) {
  this->set_owner_params = val;
__isset.set_owner_params = true;
}
std::ostream& operator<<(std::ostream& out, const TAlterDbParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterDbParams &a, TAlterDbParams &b) {
  using ::std::swap;
  swap(a.alter_type, b.alter_type);
  swap(a.db, b.db);
  swap(a.set_owner_params, b.set_owner_params);
  swap(a.__isset, b.__isset);
}

TAlterDbParams::TAlterDbParams(const TAlterDbParams& other6) {
  alter_type = other6.alter_type;
  db = other6.db;
  set_owner_params = other6.set_owner_params;
  __isset = other6.__isset;
}
TAlterDbParams::TAlterDbParams( TAlterDbParams&& other7) {
  alter_type = std::move(other7.alter_type);
  db = std::move(other7.db);
  set_owner_params = std::move(other7.set_owner_params);
  __isset = std::move(other7.__isset);
}
TAlterDbParams& TAlterDbParams::operator=(const TAlterDbParams& other8) {
  alter_type = other8.alter_type;
  db = other8.db;
  set_owner_params = other8.set_owner_params;
  __isset = other8.__isset;
  return *this;
}
TAlterDbParams& TAlterDbParams::operator=(TAlterDbParams&& other9) {
  alter_type = std::move(other9.alter_type);
  db = std::move(other9.db);
  set_owner_params = std::move(other9.set_owner_params);
  __isset = std::move(other9.__isset);
  return *this;
}
void TAlterDbParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterDbParams(";
  out << "alter_type=" << to_string(alter_type);
  out << ", " << "db=" << to_string(db);
  out << ", " << "set_owner_params="; (__isset.set_owner_params ? (out << to_string(set_owner_params)) : (out << "<null>"));
  out << ")";
}


TCreateDbParams::~TCreateDbParams() throw() {
}


void TCreateDbParams::__set_db(const std::string& val) {
  this->db = val;
}

void TCreateDbParams::__set_comment(const std::string& val) {
  this->comment = val;
__isset.comment = true;
}

void TCreateDbParams::__set_location(const std::string& val) {
  this->location = val;
__isset.location = true;
}

void TCreateDbParams::__set_if_not_exists(const bool val) {
  this->if_not_exists = val;
__isset.if_not_exists = true;
}

void TCreateDbParams::__set_owner(const std::string& val) {
  this->owner = val;
}

void TCreateDbParams::__set_server_name(const std::string& val) {
  this->server_name = val;
__isset.server_name = true;
}

void TCreateDbParams::__set_managed_location(const std::string& val) {
  this->managed_location = val;
__isset.managed_location = true;
}
std::ostream& operator<<(std::ostream& out, const TCreateDbParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCreateDbParams &a, TCreateDbParams &b) {
  using ::std::swap;
  swap(a.db, b.db);
  swap(a.comment, b.comment);
  swap(a.location, b.location);
  swap(a.if_not_exists, b.if_not_exists);
  swap(a.owner, b.owner);
  swap(a.server_name, b.server_name);
  swap(a.managed_location, b.managed_location);
  swap(a.__isset, b.__isset);
}

TCreateDbParams::TCreateDbParams(const TCreateDbParams& other10) {
  db = other10.db;
  comment = other10.comment;
  location = other10.location;
  if_not_exists = other10.if_not_exists;
  owner = other10.owner;
  server_name = other10.server_name;
  managed_location = other10.managed_location;
  __isset = other10.__isset;
}
TCreateDbParams::TCreateDbParams( TCreateDbParams&& other11) {
  db = std::move(other11.db);
  comment = std::move(other11.comment);
  location = std::move(other11.location);
  if_not_exists = std::move(other11.if_not_exists);
  owner = std::move(other11.owner);
  server_name = std::move(other11.server_name);
  managed_location = std::move(other11.managed_location);
  __isset = std::move(other11.__isset);
}
TCreateDbParams& TCreateDbParams::operator=(const TCreateDbParams& other12) {
  db = other12.db;
  comment = other12.comment;
  location = other12.location;
  if_not_exists = other12.if_not_exists;
  owner = other12.owner;
  server_name = other12.server_name;
  managed_location = other12.managed_location;
  __isset = other12.__isset;
  return *this;
}
TCreateDbParams& TCreateDbParams::operator=(TCreateDbParams&& other13) {
  db = std::move(other13.db);
  comment = std::move(other13.comment);
  location = std::move(other13.location);
  if_not_exists = std::move(other13.if_not_exists);
  owner = std::move(other13.owner);
  server_name = std::move(other13.server_name);
  managed_location = std::move(other13.managed_location);
  __isset = std::move(other13.__isset);
  return *this;
}
void TCreateDbParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCreateDbParams(";
  out << "db=" << to_string(db);
  out << ", " << "comment="; (__isset.comment ? (out << to_string(comment)) : (out << "<null>"));
  out << ", " << "location="; (__isset.location ? (out << to_string(location)) : (out << "<null>"));
  out << ", " << "if_not_exists="; (__isset.if_not_exists ? (out << to_string(if_not_exists)) : (out << "<null>"));
  out << ", " << "owner=" << to_string(owner);
  out << ", " << "server_name="; (__isset.server_name ? (out << to_string(server_name)) : (out << "<null>"));
  out << ", " << "managed_location="; (__isset.managed_location ? (out << to_string(managed_location)) : (out << "<null>"));
  out << ")";
}


TCreateDataSourceParams::~TCreateDataSourceParams() throw() {
}


void TCreateDataSourceParams::__set_data_source(const  ::impala::TDataSource& val) {
  this->data_source = val;
}

void TCreateDataSourceParams::__set_if_not_exists(const bool val) {
  this->if_not_exists = val;
__isset.if_not_exists = true;
}
std::ostream& operator<<(std::ostream& out, const TCreateDataSourceParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCreateDataSourceParams &a, TCreateDataSourceParams &b) {
  using ::std::swap;
  swap(a.data_source, b.data_source);
  swap(a.if_not_exists, b.if_not_exists);
  swap(a.__isset, b.__isset);
}

TCreateDataSourceParams::TCreateDataSourceParams(const TCreateDataSourceParams& other14) {
  data_source = other14.data_source;
  if_not_exists = other14.if_not_exists;
  __isset = other14.__isset;
}
TCreateDataSourceParams::TCreateDataSourceParams( TCreateDataSourceParams&& other15) {
  data_source = std::move(other15.data_source);
  if_not_exists = std::move(other15.if_not_exists);
  __isset = std::move(other15.__isset);
}
TCreateDataSourceParams& TCreateDataSourceParams::operator=(const TCreateDataSourceParams& other16) {
  data_source = other16.data_source;
  if_not_exists = other16.if_not_exists;
  __isset = other16.__isset;
  return *this;
}
TCreateDataSourceParams& TCreateDataSourceParams::operator=(TCreateDataSourceParams&& other17) {
  data_source = std::move(other17.data_source);
  if_not_exists = std::move(other17.if_not_exists);
  __isset = std::move(other17.__isset);
  return *this;
}
void TCreateDataSourceParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCreateDataSourceParams(";
  out << "data_source=" << to_string(data_source);
  out << ", " << "if_not_exists="; (__isset.if_not_exists ? (out << to_string(if_not_exists)) : (out << "<null>"));
  out << ")";
}


TDropDataSourceParams::~TDropDataSourceParams() throw() {
}


void TDropDataSourceParams::__set_data_source(const std::string& val) {
  this->data_source = val;
}

void TDropDataSourceParams::__set_if_exists(const bool val) {
  this->if_exists = val;
__isset.if_exists = true;
}
std::ostream& operator<<(std::ostream& out, const TDropDataSourceParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDropDataSourceParams &a, TDropDataSourceParams &b) {
  using ::std::swap;
  swap(a.data_source, b.data_source);
  swap(a.if_exists, b.if_exists);
  swap(a.__isset, b.__isset);
}

TDropDataSourceParams::TDropDataSourceParams(const TDropDataSourceParams& other18) {
  data_source = other18.data_source;
  if_exists = other18.if_exists;
  __isset = other18.__isset;
}
TDropDataSourceParams::TDropDataSourceParams( TDropDataSourceParams&& other19) {
  data_source = std::move(other19.data_source);
  if_exists = std::move(other19.if_exists);
  __isset = std::move(other19.__isset);
}
TDropDataSourceParams& TDropDataSourceParams::operator=(const TDropDataSourceParams& other20) {
  data_source = other20.data_source;
  if_exists = other20.if_exists;
  __isset = other20.__isset;
  return *this;
}
TDropDataSourceParams& TDropDataSourceParams::operator=(TDropDataSourceParams&& other21) {
  data_source = std::move(other21.data_source);
  if_exists = std::move(other21.if_exists);
  __isset = std::move(other21.__isset);
  return *this;
}
void TDropDataSourceParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDropDataSourceParams(";
  out << "data_source=" << to_string(data_source);
  out << ", " << "if_exists="; (__isset.if_exists ? (out << to_string(if_exists)) : (out << "<null>"));
  out << ")";
}


TDropStatsParams::~TDropStatsParams() throw() {
}


void TDropStatsParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TDropStatsParams::__set_partition_set(const std::vector<std::vector< ::impala::TPartitionKeyValue> > & val) {
  this->partition_set = val;
__isset.partition_set = true;
}
std::ostream& operator<<(std::ostream& out, const TDropStatsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDropStatsParams &a, TDropStatsParams &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.partition_set, b.partition_set);
  swap(a.__isset, b.__isset);
}

TDropStatsParams::TDropStatsParams(const TDropStatsParams& other34) {
  table_name = other34.table_name;
  partition_set = other34.partition_set;
  __isset = other34.__isset;
}
TDropStatsParams::TDropStatsParams( TDropStatsParams&& other35) {
  table_name = std::move(other35.table_name);
  partition_set = std::move(other35.partition_set);
  __isset = std::move(other35.__isset);
}
TDropStatsParams& TDropStatsParams::operator=(const TDropStatsParams& other36) {
  table_name = other36.table_name;
  partition_set = other36.partition_set;
  __isset = other36.__isset;
  return *this;
}
TDropStatsParams& TDropStatsParams::operator=(TDropStatsParams&& other37) {
  table_name = std::move(other37.table_name);
  partition_set = std::move(other37.partition_set);
  __isset = std::move(other37.__isset);
  return *this;
}
void TDropStatsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDropStatsParams(";
  out << "table_name=" << to_string(table_name);
  out << ", " << "partition_set="; (__isset.partition_set ? (out << to_string(partition_set)) : (out << "<null>"));
  out << ")";
}


TCreateFunctionParams::~TCreateFunctionParams() throw() {
}


void TCreateFunctionParams::__set_fn(const  ::impala::TFunction& val) {
  this->fn = val;
}

void TCreateFunctionParams::__set_if_not_exists(const bool val) {
  this->if_not_exists = val;
__isset.if_not_exists = true;
}
std::ostream& operator<<(std::ostream& out, const TCreateFunctionParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCreateFunctionParams &a, TCreateFunctionParams &b) {
  using ::std::swap;
  swap(a.fn, b.fn);
  swap(a.if_not_exists, b.if_not_exists);
  swap(a.__isset, b.__isset);
}

TCreateFunctionParams::TCreateFunctionParams(const TCreateFunctionParams& other38) {
  fn = other38.fn;
  if_not_exists = other38.if_not_exists;
  __isset = other38.__isset;
}
TCreateFunctionParams::TCreateFunctionParams( TCreateFunctionParams&& other39) {
  fn = std::move(other39.fn);
  if_not_exists = std::move(other39.if_not_exists);
  __isset = std::move(other39.__isset);
}
TCreateFunctionParams& TCreateFunctionParams::operator=(const TCreateFunctionParams& other40) {
  fn = other40.fn;
  if_not_exists = other40.if_not_exists;
  __isset = other40.__isset;
  return *this;
}
TCreateFunctionParams& TCreateFunctionParams::operator=(TCreateFunctionParams&& other41) {
  fn = std::move(other41.fn);
  if_not_exists = std::move(other41.if_not_exists);
  __isset = std::move(other41.__isset);
  return *this;
}
void TCreateFunctionParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCreateFunctionParams(";
  out << "fn=" << to_string(fn);
  out << ", " << "if_not_exists="; (__isset.if_not_exists ? (out << to_string(if_not_exists)) : (out << "<null>"));
  out << ")";
}


TTableRowFormat::~TTableRowFormat() throw() {
}


void TTableRowFormat::__set_field_terminator(const std::string& val) {
  this->field_terminator = val;
__isset.field_terminator = true;
}

void TTableRowFormat::__set_line_terminator(const std::string& val) {
  this->line_terminator = val;
__isset.line_terminator = true;
}

void TTableRowFormat::__set_escaped_by(const std::string& val) {
  this->escaped_by = val;
__isset.escaped_by = true;
}
std::ostream& operator<<(std::ostream& out, const TTableRowFormat& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TTableRowFormat &a, TTableRowFormat &b) {
  using ::std::swap;
  swap(a.field_terminator, b.field_terminator);
  swap(a.line_terminator, b.line_terminator);
  swap(a.escaped_by, b.escaped_by);
  swap(a.__isset, b.__isset);
}

TTableRowFormat::TTableRowFormat(const TTableRowFormat& other42) {
  field_terminator = other42.field_terminator;
  line_terminator = other42.line_terminator;
  escaped_by = other42.escaped_by;
  __isset = other42.__isset;
}
TTableRowFormat::TTableRowFormat( TTableRowFormat&& other43) {
  field_terminator = std::move(other43.field_terminator);
  line_terminator = std::move(other43.line_terminator);
  escaped_by = std::move(other43.escaped_by);
  __isset = std::move(other43.__isset);
}
TTableRowFormat& TTableRowFormat::operator=(const TTableRowFormat& other44) {
  field_terminator = other44.field_terminator;
  line_terminator = other44.line_terminator;
  escaped_by = other44.escaped_by;
  __isset = other44.__isset;
  return *this;
}
TTableRowFormat& TTableRowFormat::operator=(TTableRowFormat&& other45) {
  field_terminator = std::move(other45.field_terminator);
  line_terminator = std::move(other45.line_terminator);
  escaped_by = std::move(other45.escaped_by);
  __isset = std::move(other45.__isset);
  return *this;
}
void TTableRowFormat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTableRowFormat(";
  out << "field_terminator="; (__isset.field_terminator ? (out << to_string(field_terminator)) : (out << "<null>"));
  out << ", " << "line_terminator="; (__isset.line_terminator ? (out << to_string(line_terminator)) : (out << "<null>"));
  out << ", " << "escaped_by="; (__isset.escaped_by ? (out << to_string(escaped_by)) : (out << "<null>"));
  out << ")";
}


THdfsCachingOp::~THdfsCachingOp() throw() {
}


void THdfsCachingOp::__set_set_cached(const bool val) {
  this->set_cached = val;
}

void THdfsCachingOp::__set_cache_pool_name(const std::string& val) {
  this->cache_pool_name = val;
__isset.cache_pool_name = true;
}

void THdfsCachingOp::__set_replication(const int16_t val) {
  this->replication = val;
__isset.replication = true;
}
std::ostream& operator<<(std::ostream& out, const THdfsCachingOp& obj)
{
  obj.printTo(out);
  return out;
}


void swap(THdfsCachingOp &a, THdfsCachingOp &b) {
  using ::std::swap;
  swap(a.set_cached, b.set_cached);
  swap(a.cache_pool_name, b.cache_pool_name);
  swap(a.replication, b.replication);
  swap(a.__isset, b.__isset);
}

THdfsCachingOp::THdfsCachingOp(const THdfsCachingOp& other46) {
  set_cached = other46.set_cached;
  cache_pool_name = other46.cache_pool_name;
  replication = other46.replication;
  __isset = other46.__isset;
}
THdfsCachingOp::THdfsCachingOp( THdfsCachingOp&& other47) {
  set_cached = std::move(other47.set_cached);
  cache_pool_name = std::move(other47.cache_pool_name);
  replication = std::move(other47.replication);
  __isset = std::move(other47.__isset);
}
THdfsCachingOp& THdfsCachingOp::operator=(const THdfsCachingOp& other48) {
  set_cached = other48.set_cached;
  cache_pool_name = other48.cache_pool_name;
  replication = other48.replication;
  __isset = other48.__isset;
  return *this;
}
THdfsCachingOp& THdfsCachingOp::operator=(THdfsCachingOp&& other49) {
  set_cached = std::move(other49.set_cached);
  cache_pool_name = std::move(other49.cache_pool_name);
  replication = std::move(other49.replication);
  __isset = std::move(other49.__isset);
  return *this;
}
void THdfsCachingOp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "THdfsCachingOp(";
  out << "set_cached=" << to_string(set_cached);
  out << ", " << "cache_pool_name="; (__isset.cache_pool_name ? (out << to_string(cache_pool_name)) : (out << "<null>"));
  out << ", " << "replication="; (__isset.replication ? (out << to_string(replication)) : (out << "<null>"));
  out << ")";
}


TAlterTableOrViewRenameParams::~TAlterTableOrViewRenameParams() throw() {
}


void TAlterTableOrViewRenameParams::__set_new_table_name(const  ::impala::TTableName& val) {
  this->new_table_name = val;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableOrViewRenameParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableOrViewRenameParams &a, TAlterTableOrViewRenameParams &b) {
  using ::std::swap;
  swap(a.new_table_name, b.new_table_name);
}

TAlterTableOrViewRenameParams::TAlterTableOrViewRenameParams(const TAlterTableOrViewRenameParams& other50) {
  new_table_name = other50.new_table_name;
}
TAlterTableOrViewRenameParams::TAlterTableOrViewRenameParams( TAlterTableOrViewRenameParams&& other51) {
  new_table_name = std::move(other51.new_table_name);
}
TAlterTableOrViewRenameParams& TAlterTableOrViewRenameParams::operator=(const TAlterTableOrViewRenameParams& other52) {
  new_table_name = other52.new_table_name;
  return *this;
}
TAlterTableOrViewRenameParams& TAlterTableOrViewRenameParams::operator=(TAlterTableOrViewRenameParams&& other53) {
  new_table_name = std::move(other53.new_table_name);
  return *this;
}
void TAlterTableOrViewRenameParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableOrViewRenameParams(";
  out << "new_table_name=" << to_string(new_table_name);
  out << ")";
}


TAlterTableAddColsParams::~TAlterTableAddColsParams() throw() {
}


void TAlterTableAddColsParams::__set_columns(const std::vector< ::impala::TColumn> & val) {
  this->columns = val;
}

void TAlterTableAddColsParams::__set_if_not_exists(const bool val) {
  this->if_not_exists = val;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableAddColsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableAddColsParams &a, TAlterTableAddColsParams &b) {
  using ::std::swap;
  swap(a.columns, b.columns);
  swap(a.if_not_exists, b.if_not_exists);
}

TAlterTableAddColsParams::TAlterTableAddColsParams(const TAlterTableAddColsParams& other60) {
  columns = other60.columns;
  if_not_exists = other60.if_not_exists;
}
TAlterTableAddColsParams::TAlterTableAddColsParams( TAlterTableAddColsParams&& other61) {
  columns = std::move(other61.columns);
  if_not_exists = std::move(other61.if_not_exists);
}
TAlterTableAddColsParams& TAlterTableAddColsParams::operator=(const TAlterTableAddColsParams& other62) {
  columns = other62.columns;
  if_not_exists = other62.if_not_exists;
  return *this;
}
TAlterTableAddColsParams& TAlterTableAddColsParams::operator=(TAlterTableAddColsParams&& other63) {
  columns = std::move(other63.columns);
  if_not_exists = std::move(other63.if_not_exists);
  return *this;
}
void TAlterTableAddColsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableAddColsParams(";
  out << "columns=" << to_string(columns);
  out << ", " << "if_not_exists=" << to_string(if_not_exists);
  out << ")";
}


TAlterTableReplaceColsParams::~TAlterTableReplaceColsParams() throw() {
}


void TAlterTableReplaceColsParams::__set_columns(const std::vector< ::impala::TColumn> & val) {
  this->columns = val;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableReplaceColsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableReplaceColsParams &a, TAlterTableReplaceColsParams &b) {
  using ::std::swap;
  swap(a.columns, b.columns);
}

TAlterTableReplaceColsParams::TAlterTableReplaceColsParams(const TAlterTableReplaceColsParams& other70) {
  columns = other70.columns;
}
TAlterTableReplaceColsParams::TAlterTableReplaceColsParams( TAlterTableReplaceColsParams&& other71) {
  columns = std::move(other71.columns);
}
TAlterTableReplaceColsParams& TAlterTableReplaceColsParams::operator=(const TAlterTableReplaceColsParams& other72) {
  columns = other72.columns;
  return *this;
}
TAlterTableReplaceColsParams& TAlterTableReplaceColsParams::operator=(TAlterTableReplaceColsParams&& other73) {
  columns = std::move(other73.columns);
  return *this;
}
void TAlterTableReplaceColsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableReplaceColsParams(";
  out << "columns=" << to_string(columns);
  out << ")";
}


TPartitionDef::~TPartitionDef() throw() {
}


void TPartitionDef::__set_partition_spec(const std::vector< ::impala::TPartitionKeyValue> & val) {
  this->partition_spec = val;
}

void TPartitionDef::__set_location(const std::string& val) {
  this->location = val;
__isset.location = true;
}

void TPartitionDef::__set_cache_op(const THdfsCachingOp& val) {
  this->cache_op = val;
__isset.cache_op = true;
}
std::ostream& operator<<(std::ostream& out, const TPartitionDef& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TPartitionDef &a, TPartitionDef &b) {
  using ::std::swap;
  swap(a.partition_spec, b.partition_spec);
  swap(a.location, b.location);
  swap(a.cache_op, b.cache_op);
  swap(a.__isset, b.__isset);
}

TPartitionDef::TPartitionDef(const TPartitionDef& other80) {
  partition_spec = other80.partition_spec;
  location = other80.location;
  cache_op = other80.cache_op;
  __isset = other80.__isset;
}
TPartitionDef::TPartitionDef( TPartitionDef&& other81) {
  partition_spec = std::move(other81.partition_spec);
  location = std::move(other81.location);
  cache_op = std::move(other81.cache_op);
  __isset = std::move(other81.__isset);
}
TPartitionDef& TPartitionDef::operator=(const TPartitionDef& other82) {
  partition_spec = other82.partition_spec;
  location = other82.location;
  cache_op = other82.cache_op;
  __isset = other82.__isset;
  return *this;
}
TPartitionDef& TPartitionDef::operator=(TPartitionDef&& other83) {
  partition_spec = std::move(other83.partition_spec);
  location = std::move(other83.location);
  cache_op = std::move(other83.cache_op);
  __isset = std::move(other83.__isset);
  return *this;
}
void TPartitionDef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPartitionDef(";
  out << "partition_spec=" << to_string(partition_spec);
  out << ", " << "location="; (__isset.location ? (out << to_string(location)) : (out << "<null>"));
  out << ", " << "cache_op="; (__isset.cache_op ? (out << to_string(cache_op)) : (out << "<null>"));
  out << ")";
}


TAlterTableAddPartitionParams::~TAlterTableAddPartitionParams() throw() {
}


void TAlterTableAddPartitionParams::__set_if_not_exists(const bool val) {
  this->if_not_exists = val;
}

void TAlterTableAddPartitionParams::__set_partitions(const std::vector<TPartitionDef> & val) {
  this->partitions = val;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableAddPartitionParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableAddPartitionParams &a, TAlterTableAddPartitionParams &b) {
  using ::std::swap;
  swap(a.if_not_exists, b.if_not_exists);
  swap(a.partitions, b.partitions);
}

TAlterTableAddPartitionParams::TAlterTableAddPartitionParams(const TAlterTableAddPartitionParams& other90) {
  if_not_exists = other90.if_not_exists;
  partitions = other90.partitions;
}
TAlterTableAddPartitionParams::TAlterTableAddPartitionParams( TAlterTableAddPartitionParams&& other91) {
  if_not_exists = std::move(other91.if_not_exists);
  partitions = std::move(other91.partitions);
}
TAlterTableAddPartitionParams& TAlterTableAddPartitionParams::operator=(const TAlterTableAddPartitionParams& other92) {
  if_not_exists = other92.if_not_exists;
  partitions = other92.partitions;
  return *this;
}
TAlterTableAddPartitionParams& TAlterTableAddPartitionParams::operator=(TAlterTableAddPartitionParams&& other93) {
  if_not_exists = std::move(other93.if_not_exists);
  partitions = std::move(other93.partitions);
  return *this;
}
void TAlterTableAddPartitionParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableAddPartitionParams(";
  out << "if_not_exists=" << to_string(if_not_exists);
  out << ", " << "partitions=" << to_string(partitions);
  out << ")";
}


TAlterTableAddDropRangePartitionParams::~TAlterTableAddDropRangePartitionParams() throw() {
}


void TAlterTableAddDropRangePartitionParams::__set_range_partition_spec(const  ::impala::TRangePartition& val) {
  this->range_partition_spec = val;
}

void TAlterTableAddDropRangePartitionParams::__set_ignore_errors(const bool val) {
  this->ignore_errors = val;
}

void TAlterTableAddDropRangePartitionParams::__set_type(const TRangePartitionOperationType::type val) {
  this->type = val;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableAddDropRangePartitionParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableAddDropRangePartitionParams &a, TAlterTableAddDropRangePartitionParams &b) {
  using ::std::swap;
  swap(a.range_partition_spec, b.range_partition_spec);
  swap(a.ignore_errors, b.ignore_errors);
  swap(a.type, b.type);
}

TAlterTableAddDropRangePartitionParams::TAlterTableAddDropRangePartitionParams(const TAlterTableAddDropRangePartitionParams& other95) {
  range_partition_spec = other95.range_partition_spec;
  ignore_errors = other95.ignore_errors;
  type = other95.type;
}
TAlterTableAddDropRangePartitionParams::TAlterTableAddDropRangePartitionParams( TAlterTableAddDropRangePartitionParams&& other96) {
  range_partition_spec = std::move(other96.range_partition_spec);
  ignore_errors = std::move(other96.ignore_errors);
  type = std::move(other96.type);
}
TAlterTableAddDropRangePartitionParams& TAlterTableAddDropRangePartitionParams::operator=(const TAlterTableAddDropRangePartitionParams& other97) {
  range_partition_spec = other97.range_partition_spec;
  ignore_errors = other97.ignore_errors;
  type = other97.type;
  return *this;
}
TAlterTableAddDropRangePartitionParams& TAlterTableAddDropRangePartitionParams::operator=(TAlterTableAddDropRangePartitionParams&& other98) {
  range_partition_spec = std::move(other98.range_partition_spec);
  ignore_errors = std::move(other98.ignore_errors);
  type = std::move(other98.type);
  return *this;
}
void TAlterTableAddDropRangePartitionParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableAddDropRangePartitionParams(";
  out << "range_partition_spec=" << to_string(range_partition_spec);
  out << ", " << "ignore_errors=" << to_string(ignore_errors);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


TAlterTableDropColParams::~TAlterTableDropColParams() throw() {
}


void TAlterTableDropColParams::__set_col_name(const std::string& val) {
  this->col_name = val;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableDropColParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableDropColParams &a, TAlterTableDropColParams &b) {
  using ::std::swap;
  swap(a.col_name, b.col_name);
}

TAlterTableDropColParams::TAlterTableDropColParams(const TAlterTableDropColParams& other99) {
  col_name = other99.col_name;
}
TAlterTableDropColParams::TAlterTableDropColParams( TAlterTableDropColParams&& other100) {
  col_name = std::move(other100.col_name);
}
TAlterTableDropColParams& TAlterTableDropColParams::operator=(const TAlterTableDropColParams& other101) {
  col_name = other101.col_name;
  return *this;
}
TAlterTableDropColParams& TAlterTableDropColParams::operator=(TAlterTableDropColParams&& other102) {
  col_name = std::move(other102.col_name);
  return *this;
}
void TAlterTableDropColParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableDropColParams(";
  out << "col_name=" << to_string(col_name);
  out << ")";
}


TAlterTableDropPartitionParams::~TAlterTableDropPartitionParams() throw() {
}


void TAlterTableDropPartitionParams::__set_partition_set(const std::vector<std::vector< ::impala::TPartitionKeyValue> > & val) {
  this->partition_set = val;
}

void TAlterTableDropPartitionParams::__set_if_exists(const bool val) {
  this->if_exists = val;
}

void TAlterTableDropPartitionParams::__set_purge(const bool val) {
  this->purge = val;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableDropPartitionParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableDropPartitionParams &a, TAlterTableDropPartitionParams &b) {
  using ::std::swap;
  swap(a.partition_set, b.partition_set);
  swap(a.if_exists, b.if_exists);
  swap(a.purge, b.purge);
}

TAlterTableDropPartitionParams::TAlterTableDropPartitionParams(const TAlterTableDropPartitionParams& other115) {
  partition_set = other115.partition_set;
  if_exists = other115.if_exists;
  purge = other115.purge;
}
TAlterTableDropPartitionParams::TAlterTableDropPartitionParams( TAlterTableDropPartitionParams&& other116) {
  partition_set = std::move(other116.partition_set);
  if_exists = std::move(other116.if_exists);
  purge = std::move(other116.purge);
}
TAlterTableDropPartitionParams& TAlterTableDropPartitionParams::operator=(const TAlterTableDropPartitionParams& other117) {
  partition_set = other117.partition_set;
  if_exists = other117.if_exists;
  purge = other117.purge;
  return *this;
}
TAlterTableDropPartitionParams& TAlterTableDropPartitionParams::operator=(TAlterTableDropPartitionParams&& other118) {
  partition_set = std::move(other118.partition_set);
  if_exists = std::move(other118.if_exists);
  purge = std::move(other118.purge);
  return *this;
}
void TAlterTableDropPartitionParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableDropPartitionParams(";
  out << "partition_set=" << to_string(partition_set);
  out << ", " << "if_exists=" << to_string(if_exists);
  out << ", " << "purge=" << to_string(purge);
  out << ")";
}


TAlterTableAlterColParams::~TAlterTableAlterColParams() throw() {
}


void TAlterTableAlterColParams::__set_col_name(const std::string& val) {
  this->col_name = val;
}

void TAlterTableAlterColParams::__set_new_col_def(const  ::impala::TColumn& val) {
  this->new_col_def = val;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableAlterColParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableAlterColParams &a, TAlterTableAlterColParams &b) {
  using ::std::swap;
  swap(a.col_name, b.col_name);
  swap(a.new_col_def, b.new_col_def);
}

TAlterTableAlterColParams::TAlterTableAlterColParams(const TAlterTableAlterColParams& other119) {
  col_name = other119.col_name;
  new_col_def = other119.new_col_def;
}
TAlterTableAlterColParams::TAlterTableAlterColParams( TAlterTableAlterColParams&& other120) {
  col_name = std::move(other120.col_name);
  new_col_def = std::move(other120.new_col_def);
}
TAlterTableAlterColParams& TAlterTableAlterColParams::operator=(const TAlterTableAlterColParams& other121) {
  col_name = other121.col_name;
  new_col_def = other121.new_col_def;
  return *this;
}
TAlterTableAlterColParams& TAlterTableAlterColParams::operator=(TAlterTableAlterColParams&& other122) {
  col_name = std::move(other122.col_name);
  new_col_def = std::move(other122.new_col_def);
  return *this;
}
void TAlterTableAlterColParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableAlterColParams(";
  out << "col_name=" << to_string(col_name);
  out << ", " << "new_col_def=" << to_string(new_col_def);
  out << ")";
}


TAlterTableSetTblPropertiesParams::~TAlterTableSetTblPropertiesParams() throw() {
}


void TAlterTableSetTblPropertiesParams::__set_target(const  ::impala::TTablePropertyType::type val) {
  this->target = val;
}

void TAlterTableSetTblPropertiesParams::__set_properties(const std::map<std::string, std::string> & val) {
  this->properties = val;
}

void TAlterTableSetTblPropertiesParams::__set_partition_set(const std::vector<std::vector< ::impala::TPartitionKeyValue> > & val) {
  this->partition_set = val;
__isset.partition_set = true;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableSetTblPropertiesParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableSetTblPropertiesParams &a, TAlterTableSetTblPropertiesParams &b) {
  using ::std::swap;
  swap(a.target, b.target);
  swap(a.properties, b.properties);
  swap(a.partition_set, b.partition_set);
  swap(a.__isset, b.__isset);
}

TAlterTableSetTblPropertiesParams::TAlterTableSetTblPropertiesParams(const TAlterTableSetTblPropertiesParams& other144) {
  target = other144.target;
  properties = other144.properties;
  partition_set = other144.partition_set;
  __isset = other144.__isset;
}
TAlterTableSetTblPropertiesParams::TAlterTableSetTblPropertiesParams( TAlterTableSetTblPropertiesParams&& other145) {
  target = std::move(other145.target);
  properties = std::move(other145.properties);
  partition_set = std::move(other145.partition_set);
  __isset = std::move(other145.__isset);
}
TAlterTableSetTblPropertiesParams& TAlterTableSetTblPropertiesParams::operator=(const TAlterTableSetTblPropertiesParams& other146) {
  target = other146.target;
  properties = other146.properties;
  partition_set = other146.partition_set;
  __isset = other146.__isset;
  return *this;
}
TAlterTableSetTblPropertiesParams& TAlterTableSetTblPropertiesParams::operator=(TAlterTableSetTblPropertiesParams&& other147) {
  target = std::move(other147.target);
  properties = std::move(other147.properties);
  partition_set = std::move(other147.partition_set);
  __isset = std::move(other147.__isset);
  return *this;
}
void TAlterTableSetTblPropertiesParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableSetTblPropertiesParams(";
  out << "target=" << to_string(target);
  out << ", " << "properties=" << to_string(properties);
  out << ", " << "partition_set="; (__isset.partition_set ? (out << to_string(partition_set)) : (out << "<null>"));
  out << ")";
}


TAlterTableSetFileFormatParams::~TAlterTableSetFileFormatParams() throw() {
}


void TAlterTableSetFileFormatParams::__set_file_format(const  ::impala::THdfsFileFormat::type val) {
  this->file_format = val;
}

void TAlterTableSetFileFormatParams::__set_partition_set(const std::vector<std::vector< ::impala::TPartitionKeyValue> > & val) {
  this->partition_set = val;
__isset.partition_set = true;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableSetFileFormatParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableSetFileFormatParams &a, TAlterTableSetFileFormatParams &b) {
  using ::std::swap;
  swap(a.file_format, b.file_format);
  swap(a.partition_set, b.partition_set);
  swap(a.__isset, b.__isset);
}

TAlterTableSetFileFormatParams::TAlterTableSetFileFormatParams(const TAlterTableSetFileFormatParams& other161) {
  file_format = other161.file_format;
  partition_set = other161.partition_set;
  __isset = other161.__isset;
}
TAlterTableSetFileFormatParams::TAlterTableSetFileFormatParams( TAlterTableSetFileFormatParams&& other162) {
  file_format = std::move(other162.file_format);
  partition_set = std::move(other162.partition_set);
  __isset = std::move(other162.__isset);
}
TAlterTableSetFileFormatParams& TAlterTableSetFileFormatParams::operator=(const TAlterTableSetFileFormatParams& other163) {
  file_format = other163.file_format;
  partition_set = other163.partition_set;
  __isset = other163.__isset;
  return *this;
}
TAlterTableSetFileFormatParams& TAlterTableSetFileFormatParams::operator=(TAlterTableSetFileFormatParams&& other164) {
  file_format = std::move(other164.file_format);
  partition_set = std::move(other164.partition_set);
  __isset = std::move(other164.__isset);
  return *this;
}
void TAlterTableSetFileFormatParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableSetFileFormatParams(";
  out << "file_format=" << to_string(file_format);
  out << ", " << "partition_set="; (__isset.partition_set ? (out << to_string(partition_set)) : (out << "<null>"));
  out << ")";
}


TAlterTableSetRowFormatParams::~TAlterTableSetRowFormatParams() throw() {
}


void TAlterTableSetRowFormatParams::__set_row_format(const TTableRowFormat& val) {
  this->row_format = val;
}

void TAlterTableSetRowFormatParams::__set_partition_set(const std::vector<std::vector< ::impala::TPartitionKeyValue> > & val) {
  this->partition_set = val;
__isset.partition_set = true;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableSetRowFormatParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableSetRowFormatParams &a, TAlterTableSetRowFormatParams &b) {
  using ::std::swap;
  swap(a.row_format, b.row_format);
  swap(a.partition_set, b.partition_set);
  swap(a.__isset, b.__isset);
}

TAlterTableSetRowFormatParams::TAlterTableSetRowFormatParams(const TAlterTableSetRowFormatParams& other177) {
  row_format = other177.row_format;
  partition_set = other177.partition_set;
  __isset = other177.__isset;
}
TAlterTableSetRowFormatParams::TAlterTableSetRowFormatParams( TAlterTableSetRowFormatParams&& other178) {
  row_format = std::move(other178.row_format);
  partition_set = std::move(other178.partition_set);
  __isset = std::move(other178.__isset);
}
TAlterTableSetRowFormatParams& TAlterTableSetRowFormatParams::operator=(const TAlterTableSetRowFormatParams& other179) {
  row_format = other179.row_format;
  partition_set = other179.partition_set;
  __isset = other179.__isset;
  return *this;
}
TAlterTableSetRowFormatParams& TAlterTableSetRowFormatParams::operator=(TAlterTableSetRowFormatParams&& other180) {
  row_format = std::move(other180.row_format);
  partition_set = std::move(other180.partition_set);
  __isset = std::move(other180.__isset);
  return *this;
}
void TAlterTableSetRowFormatParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableSetRowFormatParams(";
  out << "row_format=" << to_string(row_format);
  out << ", " << "partition_set="; (__isset.partition_set ? (out << to_string(partition_set)) : (out << "<null>"));
  out << ")";
}


TAlterTableSetLocationParams::~TAlterTableSetLocationParams() throw() {
}


void TAlterTableSetLocationParams::__set_location(const std::string& val) {
  this->location = val;
}

void TAlterTableSetLocationParams::__set_partition_spec(const std::vector< ::impala::TPartitionKeyValue> & val) {
  this->partition_spec = val;
__isset.partition_spec = true;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableSetLocationParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableSetLocationParams &a, TAlterTableSetLocationParams &b) {
  using ::std::swap;
  swap(a.location, b.location);
  swap(a.partition_spec, b.partition_spec);
  swap(a.__isset, b.__isset);
}

TAlterTableSetLocationParams::TAlterTableSetLocationParams(const TAlterTableSetLocationParams& other187) {
  location = other187.location;
  partition_spec = other187.partition_spec;
  __isset = other187.__isset;
}
TAlterTableSetLocationParams::TAlterTableSetLocationParams( TAlterTableSetLocationParams&& other188) {
  location = std::move(other188.location);
  partition_spec = std::move(other188.partition_spec);
  __isset = std::move(other188.__isset);
}
TAlterTableSetLocationParams& TAlterTableSetLocationParams::operator=(const TAlterTableSetLocationParams& other189) {
  location = other189.location;
  partition_spec = other189.partition_spec;
  __isset = other189.__isset;
  return *this;
}
TAlterTableSetLocationParams& TAlterTableSetLocationParams::operator=(TAlterTableSetLocationParams&& other190) {
  location = std::move(other190.location);
  partition_spec = std::move(other190.partition_spec);
  __isset = std::move(other190.__isset);
  return *this;
}
void TAlterTableSetLocationParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableSetLocationParams(";
  out << "location=" << to_string(location);
  out << ", " << "partition_spec="; (__isset.partition_spec ? (out << to_string(partition_spec)) : (out << "<null>"));
  out << ")";
}


TAlterTableOrViewSetOwnerParams::~TAlterTableOrViewSetOwnerParams() throw() {
}


void TAlterTableOrViewSetOwnerParams::__set_owner_type(const TOwnerType::type val) {
  this->owner_type = val;
}

void TAlterTableOrViewSetOwnerParams::__set_owner_name(const std::string& val) {
  this->owner_name = val;
}

void TAlterTableOrViewSetOwnerParams::__set_server_name(const std::string& val) {
  this->server_name = val;
__isset.server_name = true;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableOrViewSetOwnerParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableOrViewSetOwnerParams &a, TAlterTableOrViewSetOwnerParams &b) {
  using ::std::swap;
  swap(a.owner_type, b.owner_type);
  swap(a.owner_name, b.owner_name);
  swap(a.server_name, b.server_name);
  swap(a.__isset, b.__isset);
}

TAlterTableOrViewSetOwnerParams::TAlterTableOrViewSetOwnerParams(const TAlterTableOrViewSetOwnerParams& other192) {
  owner_type = other192.owner_type;
  owner_name = other192.owner_name;
  server_name = other192.server_name;
  __isset = other192.__isset;
}
TAlterTableOrViewSetOwnerParams::TAlterTableOrViewSetOwnerParams( TAlterTableOrViewSetOwnerParams&& other193) {
  owner_type = std::move(other193.owner_type);
  owner_name = std::move(other193.owner_name);
  server_name = std::move(other193.server_name);
  __isset = std::move(other193.__isset);
}
TAlterTableOrViewSetOwnerParams& TAlterTableOrViewSetOwnerParams::operator=(const TAlterTableOrViewSetOwnerParams& other194) {
  owner_type = other194.owner_type;
  owner_name = other194.owner_name;
  server_name = other194.server_name;
  __isset = other194.__isset;
  return *this;
}
TAlterTableOrViewSetOwnerParams& TAlterTableOrViewSetOwnerParams::operator=(TAlterTableOrViewSetOwnerParams&& other195) {
  owner_type = std::move(other195.owner_type);
  owner_name = std::move(other195.owner_name);
  server_name = std::move(other195.server_name);
  __isset = std::move(other195.__isset);
  return *this;
}
void TAlterTableOrViewSetOwnerParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableOrViewSetOwnerParams(";
  out << "owner_type=" << to_string(owner_type);
  out << ", " << "owner_name=" << to_string(owner_name);
  out << ", " << "server_name="; (__isset.server_name ? (out << to_string(server_name)) : (out << "<null>"));
  out << ")";
}


TAlterTableUpdateStatsParams::~TAlterTableUpdateStatsParams() throw() {
}


void TAlterTableUpdateStatsParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TAlterTableUpdateStatsParams::__set_table_stats(const  ::impala::TTableStats& val) {
  this->table_stats = val;
__isset.table_stats = true;
}

void TAlterTableUpdateStatsParams::__set_partition_stats(const std::map<std::vector<std::string> ,  ::impala::TPartitionStats> & val) {
  this->partition_stats = val;
__isset.partition_stats = true;
}

void TAlterTableUpdateStatsParams::__set_column_stats(const std::map<std::string,  ::impala::TColumnStats> & val) {
  this->column_stats = val;
__isset.column_stats = true;
}

void TAlterTableUpdateStatsParams::__set_expect_all_partitions(const bool val) {
  this->expect_all_partitions = val;
__isset.expect_all_partitions = true;
}

void TAlterTableUpdateStatsParams::__set_is_incremental(const bool val) {
  this->is_incremental = val;
__isset.is_incremental = true;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableUpdateStatsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableUpdateStatsParams &a, TAlterTableUpdateStatsParams &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.table_stats, b.table_stats);
  swap(a.partition_stats, b.partition_stats);
  swap(a.column_stats, b.column_stats);
  swap(a.expect_all_partitions, b.expect_all_partitions);
  swap(a.is_incremental, b.is_incremental);
  swap(a.__isset, b.__isset);
}

TAlterTableUpdateStatsParams::TAlterTableUpdateStatsParams(const TAlterTableUpdateStatsParams& other218) {
  table_name = other218.table_name;
  table_stats = other218.table_stats;
  partition_stats = other218.partition_stats;
  column_stats = other218.column_stats;
  expect_all_partitions = other218.expect_all_partitions;
  is_incremental = other218.is_incremental;
  __isset = other218.__isset;
}
TAlterTableUpdateStatsParams::TAlterTableUpdateStatsParams( TAlterTableUpdateStatsParams&& other219) {
  table_name = std::move(other219.table_name);
  table_stats = std::move(other219.table_stats);
  partition_stats = std::move(other219.partition_stats);
  column_stats = std::move(other219.column_stats);
  expect_all_partitions = std::move(other219.expect_all_partitions);
  is_incremental = std::move(other219.is_incremental);
  __isset = std::move(other219.__isset);
}
TAlterTableUpdateStatsParams& TAlterTableUpdateStatsParams::operator=(const TAlterTableUpdateStatsParams& other220) {
  table_name = other220.table_name;
  table_stats = other220.table_stats;
  partition_stats = other220.partition_stats;
  column_stats = other220.column_stats;
  expect_all_partitions = other220.expect_all_partitions;
  is_incremental = other220.is_incremental;
  __isset = other220.__isset;
  return *this;
}
TAlterTableUpdateStatsParams& TAlterTableUpdateStatsParams::operator=(TAlterTableUpdateStatsParams&& other221) {
  table_name = std::move(other221.table_name);
  table_stats = std::move(other221.table_stats);
  partition_stats = std::move(other221.partition_stats);
  column_stats = std::move(other221.column_stats);
  expect_all_partitions = std::move(other221.expect_all_partitions);
  is_incremental = std::move(other221.is_incremental);
  __isset = std::move(other221.__isset);
  return *this;
}
void TAlterTableUpdateStatsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableUpdateStatsParams(";
  out << "table_name=" << to_string(table_name);
  out << ", " << "table_stats="; (__isset.table_stats ? (out << to_string(table_stats)) : (out << "<null>"));
  out << ", " << "partition_stats="; (__isset.partition_stats ? (out << to_string(partition_stats)) : (out << "<null>"));
  out << ", " << "column_stats="; (__isset.column_stats ? (out << to_string(column_stats)) : (out << "<null>"));
  out << ", " << "expect_all_partitions="; (__isset.expect_all_partitions ? (out << to_string(expect_all_partitions)) : (out << "<null>"));
  out << ", " << "is_incremental="; (__isset.is_incremental ? (out << to_string(is_incremental)) : (out << "<null>"));
  out << ")";
}


TAlterTableSetCachedParams::~TAlterTableSetCachedParams() throw() {
}


void TAlterTableSetCachedParams::__set_cache_op(const THdfsCachingOp& val) {
  this->cache_op = val;
}

void TAlterTableSetCachedParams::__set_partition_set(const std::vector<std::vector< ::impala::TPartitionKeyValue> > & val) {
  this->partition_set = val;
__isset.partition_set = true;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableSetCachedParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableSetCachedParams &a, TAlterTableSetCachedParams &b) {
  using ::std::swap;
  swap(a.cache_op, b.cache_op);
  swap(a.partition_set, b.partition_set);
  swap(a.__isset, b.__isset);
}

TAlterTableSetCachedParams::TAlterTableSetCachedParams(const TAlterTableSetCachedParams& other234) {
  cache_op = other234.cache_op;
  partition_set = other234.partition_set;
  __isset = other234.__isset;
}
TAlterTableSetCachedParams::TAlterTableSetCachedParams( TAlterTableSetCachedParams&& other235) {
  cache_op = std::move(other235.cache_op);
  partition_set = std::move(other235.partition_set);
  __isset = std::move(other235.__isset);
}
TAlterTableSetCachedParams& TAlterTableSetCachedParams::operator=(const TAlterTableSetCachedParams& other236) {
  cache_op = other236.cache_op;
  partition_set = other236.partition_set;
  __isset = other236.__isset;
  return *this;
}
TAlterTableSetCachedParams& TAlterTableSetCachedParams::operator=(TAlterTableSetCachedParams&& other237) {
  cache_op = std::move(other237.cache_op);
  partition_set = std::move(other237.partition_set);
  __isset = std::move(other237.__isset);
  return *this;
}
void TAlterTableSetCachedParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableSetCachedParams(";
  out << "cache_op=" << to_string(cache_op);
  out << ", " << "partition_set="; (__isset.partition_set ? (out << to_string(partition_set)) : (out << "<null>"));
  out << ")";
}


TAlterTableUnSetTblPropertiesParams::~TAlterTableUnSetTblPropertiesParams() throw() {
}


void TAlterTableUnSetTblPropertiesParams::__set_target(const  ::impala::TTablePropertyType::type val) {
  this->target = val;
}

void TAlterTableUnSetTblPropertiesParams::__set_property_keys(const std::vector<std::string> & val) {
  this->property_keys = val;
}

void TAlterTableUnSetTblPropertiesParams::__set_if_exists(const bool val) {
  this->if_exists = val;
}

void TAlterTableUnSetTblPropertiesParams::__set_partition_set(const std::vector<std::vector< ::impala::TPartitionKeyValue> > & val) {
  this->partition_set = val;
__isset.partition_set = true;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableUnSetTblPropertiesParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableUnSetTblPropertiesParams &a, TAlterTableUnSetTblPropertiesParams &b) {
  using ::std::swap;
  swap(a.target, b.target);
  swap(a.property_keys, b.property_keys);
  swap(a.if_exists, b.if_exists);
  swap(a.partition_set, b.partition_set);
  swap(a.__isset, b.__isset);
}

TAlterTableUnSetTblPropertiesParams::TAlterTableUnSetTblPropertiesParams(const TAlterTableUnSetTblPropertiesParams& other257) {
  target = other257.target;
  property_keys = other257.property_keys;
  if_exists = other257.if_exists;
  partition_set = other257.partition_set;
  __isset = other257.__isset;
}
TAlterTableUnSetTblPropertiesParams::TAlterTableUnSetTblPropertiesParams( TAlterTableUnSetTblPropertiesParams&& other258) {
  target = std::move(other258.target);
  property_keys = std::move(other258.property_keys);
  if_exists = std::move(other258.if_exists);
  partition_set = std::move(other258.partition_set);
  __isset = std::move(other258.__isset);
}
TAlterTableUnSetTblPropertiesParams& TAlterTableUnSetTblPropertiesParams::operator=(const TAlterTableUnSetTblPropertiesParams& other259) {
  target = other259.target;
  property_keys = other259.property_keys;
  if_exists = other259.if_exists;
  partition_set = other259.partition_set;
  __isset = other259.__isset;
  return *this;
}
TAlterTableUnSetTblPropertiesParams& TAlterTableUnSetTblPropertiesParams::operator=(TAlterTableUnSetTblPropertiesParams&& other260) {
  target = std::move(other260.target);
  property_keys = std::move(other260.property_keys);
  if_exists = std::move(other260.if_exists);
  partition_set = std::move(other260.partition_set);
  __isset = std::move(other260.__isset);
  return *this;
}
void TAlterTableUnSetTblPropertiesParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableUnSetTblPropertiesParams(";
  out << "target=" << to_string(target);
  out << ", " << "property_keys=" << to_string(property_keys);
  out << ", " << "if_exists=" << to_string(if_exists);
  out << ", " << "partition_set="; (__isset.partition_set ? (out << to_string(partition_set)) : (out << "<null>"));
  out << ")";
}


TAlterTableSetPartitionSpecParams::~TAlterTableSetPartitionSpecParams() throw() {
}


void TAlterTableSetPartitionSpecParams::__set_partition_spec(const  ::impala::TIcebergPartitionSpec& val) {
  this->partition_spec = val;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableSetPartitionSpecParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableSetPartitionSpecParams &a, TAlterTableSetPartitionSpecParams &b) {
  using ::std::swap;
  swap(a.partition_spec, b.partition_spec);
}

TAlterTableSetPartitionSpecParams::TAlterTableSetPartitionSpecParams(const TAlterTableSetPartitionSpecParams& other261) {
  partition_spec = other261.partition_spec;
}
TAlterTableSetPartitionSpecParams::TAlterTableSetPartitionSpecParams( TAlterTableSetPartitionSpecParams&& other262) {
  partition_spec = std::move(other262.partition_spec);
}
TAlterTableSetPartitionSpecParams& TAlterTableSetPartitionSpecParams::operator=(const TAlterTableSetPartitionSpecParams& other263) {
  partition_spec = other263.partition_spec;
  return *this;
}
TAlterTableSetPartitionSpecParams& TAlterTableSetPartitionSpecParams::operator=(TAlterTableSetPartitionSpecParams&& other264) {
  partition_spec = std::move(other264.partition_spec);
  return *this;
}
void TAlterTableSetPartitionSpecParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableSetPartitionSpecParams(";
  out << "partition_spec=" << to_string(partition_spec);
  out << ")";
}


TAlterTableParams::~TAlterTableParams() throw() {
}


void TAlterTableParams::__set_alter_type(const TAlterTableType::type val) {
  this->alter_type = val;
}

void TAlterTableParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TAlterTableParams::__set_rename_params(const TAlterTableOrViewRenameParams& val) {
  this->rename_params = val;
__isset.rename_params = true;
}

void TAlterTableParams::__set_add_cols_params(const TAlterTableAddColsParams& val) {
  this->add_cols_params = val;
__isset.add_cols_params = true;
}

void TAlterTableParams::__set_add_partition_params(const TAlterTableAddPartitionParams& val) {
  this->add_partition_params = val;
__isset.add_partition_params = true;
}

void TAlterTableParams::__set_alter_col_params(const TAlterTableAlterColParams& val) {
  this->alter_col_params = val;
__isset.alter_col_params = true;
}

void TAlterTableParams::__set_drop_col_params(const TAlterTableDropColParams& val) {
  this->drop_col_params = val;
__isset.drop_col_params = true;
}

void TAlterTableParams::__set_drop_partition_params(const TAlterTableDropPartitionParams& val) {
  this->drop_partition_params = val;
__isset.drop_partition_params = true;
}

void TAlterTableParams::__set_set_file_format_params(const TAlterTableSetFileFormatParams& val) {
  this->set_file_format_params = val;
__isset.set_file_format_params = true;
}

void TAlterTableParams::__set_set_location_params(const TAlterTableSetLocationParams& val) {
  this->set_location_params = val;
__isset.set_location_params = true;
}

void TAlterTableParams::__set_set_tbl_properties_params(const TAlterTableSetTblPropertiesParams& val) {
  this->set_tbl_properties_params = val;
__isset.set_tbl_properties_params = true;
}

void TAlterTableParams::__set_update_stats_params(const TAlterTableUpdateStatsParams& val) {
  this->update_stats_params = val;
__isset.update_stats_params = true;
}

void TAlterTableParams::__set_set_cached_params(const TAlterTableSetCachedParams& val) {
  this->set_cached_params = val;
__isset.set_cached_params = true;
}

void TAlterTableParams::__set_add_drop_range_partition_params(const TAlterTableAddDropRangePartitionParams& val) {
  this->add_drop_range_partition_params = val;
__isset.add_drop_range_partition_params = true;
}

void TAlterTableParams::__set_set_row_format_params(const TAlterTableSetRowFormatParams& val) {
  this->set_row_format_params = val;
__isset.set_row_format_params = true;
}

void TAlterTableParams::__set_set_owner_params(const TAlterTableOrViewSetOwnerParams& val) {
  this->set_owner_params = val;
__isset.set_owner_params = true;
}

void TAlterTableParams::__set_replace_cols_params(const TAlterTableReplaceColsParams& val) {
  this->replace_cols_params = val;
__isset.replace_cols_params = true;
}

void TAlterTableParams::__set_unset_tbl_properties_params(const TAlterTableUnSetTblPropertiesParams& val) {
  this->unset_tbl_properties_params = val;
__isset.unset_tbl_properties_params = true;
}

void TAlterTableParams::__set_set_partition_spec_params(const TAlterTableSetPartitionSpecParams& val) {
  this->set_partition_spec_params = val;
__isset.set_partition_spec_params = true;
}
std::ostream& operator<<(std::ostream& out, const TAlterTableParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TAlterTableParams &a, TAlterTableParams &b) {
  using ::std::swap;
  swap(a.alter_type, b.alter_type);
  swap(a.table_name, b.table_name);
  swap(a.rename_params, b.rename_params);
  swap(a.add_cols_params, b.add_cols_params);
  swap(a.add_partition_params, b.add_partition_params);
  swap(a.alter_col_params, b.alter_col_params);
  swap(a.drop_col_params, b.drop_col_params);
  swap(a.drop_partition_params, b.drop_partition_params);
  swap(a.set_file_format_params, b.set_file_format_params);
  swap(a.set_location_params, b.set_location_params);
  swap(a.set_tbl_properties_params, b.set_tbl_properties_params);
  swap(a.update_stats_params, b.update_stats_params);
  swap(a.set_cached_params, b.set_cached_params);
  swap(a.add_drop_range_partition_params, b.add_drop_range_partition_params);
  swap(a.set_row_format_params, b.set_row_format_params);
  swap(a.set_owner_params, b.set_owner_params);
  swap(a.replace_cols_params, b.replace_cols_params);
  swap(a.unset_tbl_properties_params, b.unset_tbl_properties_params);
  swap(a.set_partition_spec_params, b.set_partition_spec_params);
  swap(a.__isset, b.__isset);
}

TAlterTableParams::TAlterTableParams(const TAlterTableParams& other266) {
  alter_type = other266.alter_type;
  table_name = other266.table_name;
  rename_params = other266.rename_params;
  add_cols_params = other266.add_cols_params;
  add_partition_params = other266.add_partition_params;
  alter_col_params = other266.alter_col_params;
  drop_col_params = other266.drop_col_params;
  drop_partition_params = other266.drop_partition_params;
  set_file_format_params = other266.set_file_format_params;
  set_location_params = other266.set_location_params;
  set_tbl_properties_params = other266.set_tbl_properties_params;
  update_stats_params = other266.update_stats_params;
  set_cached_params = other266.set_cached_params;
  add_drop_range_partition_params = other266.add_drop_range_partition_params;
  set_row_format_params = other266.set_row_format_params;
  set_owner_params = other266.set_owner_params;
  replace_cols_params = other266.replace_cols_params;
  unset_tbl_properties_params = other266.unset_tbl_properties_params;
  set_partition_spec_params = other266.set_partition_spec_params;
  __isset = other266.__isset;
}
TAlterTableParams::TAlterTableParams( TAlterTableParams&& other267) {
  alter_type = std::move(other267.alter_type);
  table_name = std::move(other267.table_name);
  rename_params = std::move(other267.rename_params);
  add_cols_params = std::move(other267.add_cols_params);
  add_partition_params = std::move(other267.add_partition_params);
  alter_col_params = std::move(other267.alter_col_params);
  drop_col_params = std::move(other267.drop_col_params);
  drop_partition_params = std::move(other267.drop_partition_params);
  set_file_format_params = std::move(other267.set_file_format_params);
  set_location_params = std::move(other267.set_location_params);
  set_tbl_properties_params = std::move(other267.set_tbl_properties_params);
  update_stats_params = std::move(other267.update_stats_params);
  set_cached_params = std::move(other267.set_cached_params);
  add_drop_range_partition_params = std::move(other267.add_drop_range_partition_params);
  set_row_format_params = std::move(other267.set_row_format_params);
  set_owner_params = std::move(other267.set_owner_params);
  replace_cols_params = std::move(other267.replace_cols_params);
  unset_tbl_properties_params = std::move(other267.unset_tbl_properties_params);
  set_partition_spec_params = std::move(other267.set_partition_spec_params);
  __isset = std::move(other267.__isset);
}
TAlterTableParams& TAlterTableParams::operator=(const TAlterTableParams& other268) {
  alter_type = other268.alter_type;
  table_name = other268.table_name;
  rename_params = other268.rename_params;
  add_cols_params = other268.add_cols_params;
  add_partition_params = other268.add_partition_params;
  alter_col_params = other268.alter_col_params;
  drop_col_params = other268.drop_col_params;
  drop_partition_params = other268.drop_partition_params;
  set_file_format_params = other268.set_file_format_params;
  set_location_params = other268.set_location_params;
  set_tbl_properties_params = other268.set_tbl_properties_params;
  update_stats_params = other268.update_stats_params;
  set_cached_params = other268.set_cached_params;
  add_drop_range_partition_params = other268.add_drop_range_partition_params;
  set_row_format_params = other268.set_row_format_params;
  set_owner_params = other268.set_owner_params;
  replace_cols_params = other268.replace_cols_params;
  unset_tbl_properties_params = other268.unset_tbl_properties_params;
  set_partition_spec_params = other268.set_partition_spec_params;
  __isset = other268.__isset;
  return *this;
}
TAlterTableParams& TAlterTableParams::operator=(TAlterTableParams&& other269) {
  alter_type = std::move(other269.alter_type);
  table_name = std::move(other269.table_name);
  rename_params = std::move(other269.rename_params);
  add_cols_params = std::move(other269.add_cols_params);
  add_partition_params = std::move(other269.add_partition_params);
  alter_col_params = std::move(other269.alter_col_params);
  drop_col_params = std::move(other269.drop_col_params);
  drop_partition_params = std::move(other269.drop_partition_params);
  set_file_format_params = std::move(other269.set_file_format_params);
  set_location_params = std::move(other269.set_location_params);
  set_tbl_properties_params = std::move(other269.set_tbl_properties_params);
  update_stats_params = std::move(other269.update_stats_params);
  set_cached_params = std::move(other269.set_cached_params);
  add_drop_range_partition_params = std::move(other269.add_drop_range_partition_params);
  set_row_format_params = std::move(other269.set_row_format_params);
  set_owner_params = std::move(other269.set_owner_params);
  replace_cols_params = std::move(other269.replace_cols_params);
  unset_tbl_properties_params = std::move(other269.unset_tbl_properties_params);
  set_partition_spec_params = std::move(other269.set_partition_spec_params);
  __isset = std::move(other269.__isset);
  return *this;
}
void TAlterTableParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TAlterTableParams(";
  out << "alter_type=" << to_string(alter_type);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "rename_params="; (__isset.rename_params ? (out << to_string(rename_params)) : (out << "<null>"));
  out << ", " << "add_cols_params="; (__isset.add_cols_params ? (out << to_string(add_cols_params)) : (out << "<null>"));
  out << ", " << "add_partition_params="; (__isset.add_partition_params ? (out << to_string(add_partition_params)) : (out << "<null>"));
  out << ", " << "alter_col_params="; (__isset.alter_col_params ? (out << to_string(alter_col_params)) : (out << "<null>"));
  out << ", " << "drop_col_params="; (__isset.drop_col_params ? (out << to_string(drop_col_params)) : (out << "<null>"));
  out << ", " << "drop_partition_params="; (__isset.drop_partition_params ? (out << to_string(drop_partition_params)) : (out << "<null>"));
  out << ", " << "set_file_format_params="; (__isset.set_file_format_params ? (out << to_string(set_file_format_params)) : (out << "<null>"));
  out << ", " << "set_location_params="; (__isset.set_location_params ? (out << to_string(set_location_params)) : (out << "<null>"));
  out << ", " << "set_tbl_properties_params="; (__isset.set_tbl_properties_params ? (out << to_string(set_tbl_properties_params)) : (out << "<null>"));
  out << ", " << "update_stats_params="; (__isset.update_stats_params ? (out << to_string(update_stats_params)) : (out << "<null>"));
  out << ", " << "set_cached_params="; (__isset.set_cached_params ? (out << to_string(set_cached_params)) : (out << "<null>"));
  out << ", " << "add_drop_range_partition_params="; (__isset.add_drop_range_partition_params ? (out << to_string(add_drop_range_partition_params)) : (out << "<null>"));
  out << ", " << "set_row_format_params="; (__isset.set_row_format_params ? (out << to_string(set_row_format_params)) : (out << "<null>"));
  out << ", " << "set_owner_params="; (__isset.set_owner_params ? (out << to_string(set_owner_params)) : (out << "<null>"));
  out << ", " << "replace_cols_params="; (__isset.replace_cols_params ? (out << to_string(replace_cols_params)) : (out << "<null>"));
  out << ", " << "unset_tbl_properties_params="; (__isset.unset_tbl_properties_params ? (out << to_string(unset_tbl_properties_params)) : (out << "<null>"));
  out << ", " << "set_partition_spec_params="; (__isset.set_partition_spec_params ? (out << to_string(set_partition_spec_params)) : (out << "<null>"));
  out << ")";
}


TCreateTableLikeParams::~TCreateTableLikeParams() throw() {
}


void TCreateTableLikeParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TCreateTableLikeParams::__set_src_table_name(const  ::impala::TTableName& val) {
  this->src_table_name = val;
}

void TCreateTableLikeParams::__set_is_external(const bool val) {
  this->is_external = val;
}

void TCreateTableLikeParams::__set_if_not_exists(const bool val) {
  this->if_not_exists = val;
}

void TCreateTableLikeParams::__set_owner(const std::string& val) {
  this->owner = val;
}

void TCreateTableLikeParams::__set_file_format(const  ::impala::THdfsFileFormat::type val) {
  this->file_format = val;
__isset.file_format = true;
}

void TCreateTableLikeParams::__set_comment(const std::string& val) {
  this->comment = val;
__isset.comment = true;
}

void TCreateTableLikeParams::__set_location(const std::string& val) {
  this->location = val;
__isset.location = true;
}

void TCreateTableLikeParams::__set_sort_columns(const std::vector<std::string> & val) {
  this->sort_columns = val;
__isset.sort_columns = true;
}

void TCreateTableLikeParams::__set_server_name(const std::string& val) {
  this->server_name = val;
__isset.server_name = true;
}

void TCreateTableLikeParams::__set_sorting_order(const  ::impala::TSortingOrder::type val) {
  this->sorting_order = val;
}
std::ostream& operator<<(std::ostream& out, const TCreateTableLikeParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCreateTableLikeParams &a, TCreateTableLikeParams &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.src_table_name, b.src_table_name);
  swap(a.is_external, b.is_external);
  swap(a.if_not_exists, b.if_not_exists);
  swap(a.owner, b.owner);
  swap(a.file_format, b.file_format);
  swap(a.comment, b.comment);
  swap(a.location, b.location);
  swap(a.sort_columns, b.sort_columns);
  swap(a.server_name, b.server_name);
  swap(a.sorting_order, b.sorting_order);
  swap(a.__isset, b.__isset);
}

TCreateTableLikeParams::TCreateTableLikeParams(const TCreateTableLikeParams& other278) {
  table_name = other278.table_name;
  src_table_name = other278.src_table_name;
  is_external = other278.is_external;
  if_not_exists = other278.if_not_exists;
  owner = other278.owner;
  file_format = other278.file_format;
  comment = other278.comment;
  location = other278.location;
  sort_columns = other278.sort_columns;
  server_name = other278.server_name;
  sorting_order = other278.sorting_order;
  __isset = other278.__isset;
}
TCreateTableLikeParams::TCreateTableLikeParams( TCreateTableLikeParams&& other279) {
  table_name = std::move(other279.table_name);
  src_table_name = std::move(other279.src_table_name);
  is_external = std::move(other279.is_external);
  if_not_exists = std::move(other279.if_not_exists);
  owner = std::move(other279.owner);
  file_format = std::move(other279.file_format);
  comment = std::move(other279.comment);
  location = std::move(other279.location);
  sort_columns = std::move(other279.sort_columns);
  server_name = std::move(other279.server_name);
  sorting_order = std::move(other279.sorting_order);
  __isset = std::move(other279.__isset);
}
TCreateTableLikeParams& TCreateTableLikeParams::operator=(const TCreateTableLikeParams& other280) {
  table_name = other280.table_name;
  src_table_name = other280.src_table_name;
  is_external = other280.is_external;
  if_not_exists = other280.if_not_exists;
  owner = other280.owner;
  file_format = other280.file_format;
  comment = other280.comment;
  location = other280.location;
  sort_columns = other280.sort_columns;
  server_name = other280.server_name;
  sorting_order = other280.sorting_order;
  __isset = other280.__isset;
  return *this;
}
TCreateTableLikeParams& TCreateTableLikeParams::operator=(TCreateTableLikeParams&& other281) {
  table_name = std::move(other281.table_name);
  src_table_name = std::move(other281.src_table_name);
  is_external = std::move(other281.is_external);
  if_not_exists = std::move(other281.if_not_exists);
  owner = std::move(other281.owner);
  file_format = std::move(other281.file_format);
  comment = std::move(other281.comment);
  location = std::move(other281.location);
  sort_columns = std::move(other281.sort_columns);
  server_name = std::move(other281.server_name);
  sorting_order = std::move(other281.sorting_order);
  __isset = std::move(other281.__isset);
  return *this;
}
void TCreateTableLikeParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCreateTableLikeParams(";
  out << "table_name=" << to_string(table_name);
  out << ", " << "src_table_name=" << to_string(src_table_name);
  out << ", " << "is_external=" << to_string(is_external);
  out << ", " << "if_not_exists=" << to_string(if_not_exists);
  out << ", " << "owner=" << to_string(owner);
  out << ", " << "file_format="; (__isset.file_format ? (out << to_string(file_format)) : (out << "<null>"));
  out << ", " << "comment="; (__isset.comment ? (out << to_string(comment)) : (out << "<null>"));
  out << ", " << "location="; (__isset.location ? (out << to_string(location)) : (out << "<null>"));
  out << ", " << "sort_columns="; (__isset.sort_columns ? (out << to_string(sort_columns)) : (out << "<null>"));
  out << ", " << "server_name="; (__isset.server_name ? (out << to_string(server_name)) : (out << "<null>"));
  out << ", " << "sorting_order=" << to_string(sorting_order);
  out << ")";
}


TCreateTableParams::~TCreateTableParams() throw() {
}


void TCreateTableParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TCreateTableParams::__set_columns(const std::vector< ::impala::TColumn> & val) {
  this->columns = val;
}

void TCreateTableParams::__set_partition_columns(const std::vector< ::impala::TColumn> & val) {
  this->partition_columns = val;
__isset.partition_columns = true;
}

void TCreateTableParams::__set_file_format(const  ::impala::THdfsFileFormat::type val) {
  this->file_format = val;
}

void TCreateTableParams::__set_is_external(const bool val) {
  this->is_external = val;
}

void TCreateTableParams::__set_if_not_exists(const bool val) {
  this->if_not_exists = val;
}

void TCreateTableParams::__set_owner(const std::string& val) {
  this->owner = val;
}

void TCreateTableParams::__set_row_format(const TTableRowFormat& val) {
  this->row_format = val;
__isset.row_format = true;
}

void TCreateTableParams::__set_comment(const std::string& val) {
  this->comment = val;
__isset.comment = true;
}

void TCreateTableParams::__set_location(const std::string& val) {
  this->location = val;
__isset.location = true;
}

void TCreateTableParams::__set_table_properties(const std::map<std::string, std::string> & val) {
  this->table_properties = val;
__isset.table_properties = true;
}

void TCreateTableParams::__set_serde_properties(const std::map<std::string, std::string> & val) {
  this->serde_properties = val;
__isset.serde_properties = true;
}

void TCreateTableParams::__set_cache_op(const THdfsCachingOp& val) {
  this->cache_op = val;
__isset.cache_op = true;
}

void TCreateTableParams::__set_partition_by(const std::vector< ::impala::TKuduPartitionParam> & val) {
  this->partition_by = val;
__isset.partition_by = true;
}

void TCreateTableParams::__set_primary_key_column_names(const std::vector<std::string> & val) {
  this->primary_key_column_names = val;
__isset.primary_key_column_names = true;
}

void TCreateTableParams::__set_sort_columns(const std::vector<std::string> & val) {
  this->sort_columns = val;
__isset.sort_columns = true;
}

void TCreateTableParams::__set_server_name(const std::string& val) {
  this->server_name = val;
__isset.server_name = true;
}

void TCreateTableParams::__set_sorting_order(const  ::impala::TSortingOrder::type val) {
  this->sorting_order = val;
}

void TCreateTableParams::__set_primary_keys(const std::vector< ::Apache::Hadoop::Hive::SQLPrimaryKey> & val) {
  this->primary_keys = val;
__isset.primary_keys = true;
}

void TCreateTableParams::__set_foreign_keys(const std::vector< ::Apache::Hadoop::Hive::SQLForeignKey> & val) {
  this->foreign_keys = val;
__isset.foreign_keys = true;
}

void TCreateTableParams::__set_partition_spec(const  ::impala::TIcebergPartitionSpec& val) {
  this->partition_spec = val;
__isset.partition_spec = true;
}
std::ostream& operator<<(std::ostream& out, const TCreateTableParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCreateTableParams &a, TCreateTableParams &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.columns, b.columns);
  swap(a.partition_columns, b.partition_columns);
  swap(a.file_format, b.file_format);
  swap(a.is_external, b.is_external);
  swap(a.if_not_exists, b.if_not_exists);
  swap(a.owner, b.owner);
  swap(a.row_format, b.row_format);
  swap(a.comment, b.comment);
  swap(a.location, b.location);
  swap(a.table_properties, b.table_properties);
  swap(a.serde_properties, b.serde_properties);
  swap(a.cache_op, b.cache_op);
  swap(a.partition_by, b.partition_by);
  swap(a.primary_key_column_names, b.primary_key_column_names);
  swap(a.sort_columns, b.sort_columns);
  swap(a.server_name, b.server_name);
  swap(a.sorting_order, b.sorting_order);
  swap(a.primary_keys, b.primary_keys);
  swap(a.foreign_keys, b.foreign_keys);
  swap(a.partition_spec, b.partition_spec);
  swap(a.__isset, b.__isset);
}

TCreateTableParams::TCreateTableParams(const TCreateTableParams& other342) {
  table_name = other342.table_name;
  columns = other342.columns;
  partition_columns = other342.partition_columns;
  file_format = other342.file_format;
  is_external = other342.is_external;
  if_not_exists = other342.if_not_exists;
  owner = other342.owner;
  row_format = other342.row_format;
  comment = other342.comment;
  location = other342.location;
  table_properties = other342.table_properties;
  serde_properties = other342.serde_properties;
  cache_op = other342.cache_op;
  partition_by = other342.partition_by;
  primary_key_column_names = other342.primary_key_column_names;
  sort_columns = other342.sort_columns;
  server_name = other342.server_name;
  sorting_order = other342.sorting_order;
  primary_keys = other342.primary_keys;
  foreign_keys = other342.foreign_keys;
  partition_spec = other342.partition_spec;
  __isset = other342.__isset;
}
TCreateTableParams::TCreateTableParams( TCreateTableParams&& other343) {
  table_name = std::move(other343.table_name);
  columns = std::move(other343.columns);
  partition_columns = std::move(other343.partition_columns);
  file_format = std::move(other343.file_format);
  is_external = std::move(other343.is_external);
  if_not_exists = std::move(other343.if_not_exists);
  owner = std::move(other343.owner);
  row_format = std::move(other343.row_format);
  comment = std::move(other343.comment);
  location = std::move(other343.location);
  table_properties = std::move(other343.table_properties);
  serde_properties = std::move(other343.serde_properties);
  cache_op = std::move(other343.cache_op);
  partition_by = std::move(other343.partition_by);
  primary_key_column_names = std::move(other343.primary_key_column_names);
  sort_columns = std::move(other343.sort_columns);
  server_name = std::move(other343.server_name);
  sorting_order = std::move(other343.sorting_order);
  primary_keys = std::move(other343.primary_keys);
  foreign_keys = std::move(other343.foreign_keys);
  partition_spec = std::move(other343.partition_spec);
  __isset = std::move(other343.__isset);
}
TCreateTableParams& TCreateTableParams::operator=(const TCreateTableParams& other344) {
  table_name = other344.table_name;
  columns = other344.columns;
  partition_columns = other344.partition_columns;
  file_format = other344.file_format;
  is_external = other344.is_external;
  if_not_exists = other344.if_not_exists;
  owner = other344.owner;
  row_format = other344.row_format;
  comment = other344.comment;
  location = other344.location;
  table_properties = other344.table_properties;
  serde_properties = other344.serde_properties;
  cache_op = other344.cache_op;
  partition_by = other344.partition_by;
  primary_key_column_names = other344.primary_key_column_names;
  sort_columns = other344.sort_columns;
  server_name = other344.server_name;
  sorting_order = other344.sorting_order;
  primary_keys = other344.primary_keys;
  foreign_keys = other344.foreign_keys;
  partition_spec = other344.partition_spec;
  __isset = other344.__isset;
  return *this;
}
TCreateTableParams& TCreateTableParams::operator=(TCreateTableParams&& other345) {
  table_name = std::move(other345.table_name);
  columns = std::move(other345.columns);
  partition_columns = std::move(other345.partition_columns);
  file_format = std::move(other345.file_format);
  is_external = std::move(other345.is_external);
  if_not_exists = std::move(other345.if_not_exists);
  owner = std::move(other345.owner);
  row_format = std::move(other345.row_format);
  comment = std::move(other345.comment);
  location = std::move(other345.location);
  table_properties = std::move(other345.table_properties);
  serde_properties = std::move(other345.serde_properties);
  cache_op = std::move(other345.cache_op);
  partition_by = std::move(other345.partition_by);
  primary_key_column_names = std::move(other345.primary_key_column_names);
  sort_columns = std::move(other345.sort_columns);
  server_name = std::move(other345.server_name);
  sorting_order = std::move(other345.sorting_order);
  primary_keys = std::move(other345.primary_keys);
  foreign_keys = std::move(other345.foreign_keys);
  partition_spec = std::move(other345.partition_spec);
  __isset = std::move(other345.__isset);
  return *this;
}
void TCreateTableParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCreateTableParams(";
  out << "table_name=" << to_string(table_name);
  out << ", " << "columns=" << to_string(columns);
  out << ", " << "partition_columns="; (__isset.partition_columns ? (out << to_string(partition_columns)) : (out << "<null>"));
  out << ", " << "file_format=" << to_string(file_format);
  out << ", " << "is_external=" << to_string(is_external);
  out << ", " << "if_not_exists=" << to_string(if_not_exists);
  out << ", " << "owner=" << to_string(owner);
  out << ", " << "row_format="; (__isset.row_format ? (out << to_string(row_format)) : (out << "<null>"));
  out << ", " << "comment="; (__isset.comment ? (out << to_string(comment)) : (out << "<null>"));
  out << ", " << "location="; (__isset.location ? (out << to_string(location)) : (out << "<null>"));
  out << ", " << "table_properties="; (__isset.table_properties ? (out << to_string(table_properties)) : (out << "<null>"));
  out << ", " << "serde_properties="; (__isset.serde_properties ? (out << to_string(serde_properties)) : (out << "<null>"));
  out << ", " << "cache_op="; (__isset.cache_op ? (out << to_string(cache_op)) : (out << "<null>"));
  out << ", " << "partition_by="; (__isset.partition_by ? (out << to_string(partition_by)) : (out << "<null>"));
  out << ", " << "primary_key_column_names="; (__isset.primary_key_column_names ? (out << to_string(primary_key_column_names)) : (out << "<null>"));
  out << ", " << "sort_columns="; (__isset.sort_columns ? (out << to_string(sort_columns)) : (out << "<null>"));
  out << ", " << "server_name="; (__isset.server_name ? (out << to_string(server_name)) : (out << "<null>"));
  out << ", " << "sorting_order=" << to_string(sorting_order);
  out << ", " << "primary_keys="; (__isset.primary_keys ? (out << to_string(primary_keys)) : (out << "<null>"));
  out << ", " << "foreign_keys="; (__isset.foreign_keys ? (out << to_string(foreign_keys)) : (out << "<null>"));
  out << ", " << "partition_spec="; (__isset.partition_spec ? (out << to_string(partition_spec)) : (out << "<null>"));
  out << ")";
}


TCreateOrAlterViewParams::~TCreateOrAlterViewParams() throw() {
}


void TCreateOrAlterViewParams::__set_view_name(const  ::impala::TTableName& val) {
  this->view_name = val;
}

void TCreateOrAlterViewParams::__set_columns(const std::vector< ::impala::TColumn> & val) {
  this->columns = val;
}

void TCreateOrAlterViewParams::__set_owner(const std::string& val) {
  this->owner = val;
}

void TCreateOrAlterViewParams::__set_original_view_def(const std::string& val) {
  this->original_view_def = val;
}

void TCreateOrAlterViewParams::__set_expanded_view_def(const std::string& val) {
  this->expanded_view_def = val;
}

void TCreateOrAlterViewParams::__set_comment(const std::string& val) {
  this->comment = val;
__isset.comment = true;
}

void TCreateOrAlterViewParams::__set_if_not_exists(const bool val) {
  this->if_not_exists = val;
__isset.if_not_exists = true;
}

void TCreateOrAlterViewParams::__set_server_name(const std::string& val) {
  this->server_name = val;
__isset.server_name = true;
}
std::ostream& operator<<(std::ostream& out, const TCreateOrAlterViewParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCreateOrAlterViewParams &a, TCreateOrAlterViewParams &b) {
  using ::std::swap;
  swap(a.view_name, b.view_name);
  swap(a.columns, b.columns);
  swap(a.owner, b.owner);
  swap(a.original_view_def, b.original_view_def);
  swap(a.expanded_view_def, b.expanded_view_def);
  swap(a.comment, b.comment);
  swap(a.if_not_exists, b.if_not_exists);
  swap(a.server_name, b.server_name);
  swap(a.__isset, b.__isset);
}

TCreateOrAlterViewParams::TCreateOrAlterViewParams(const TCreateOrAlterViewParams& other352) {
  view_name = other352.view_name;
  columns = other352.columns;
  owner = other352.owner;
  original_view_def = other352.original_view_def;
  expanded_view_def = other352.expanded_view_def;
  comment = other352.comment;
  if_not_exists = other352.if_not_exists;
  server_name = other352.server_name;
  __isset = other352.__isset;
}
TCreateOrAlterViewParams::TCreateOrAlterViewParams( TCreateOrAlterViewParams&& other353) {
  view_name = std::move(other353.view_name);
  columns = std::move(other353.columns);
  owner = std::move(other353.owner);
  original_view_def = std::move(other353.original_view_def);
  expanded_view_def = std::move(other353.expanded_view_def);
  comment = std::move(other353.comment);
  if_not_exists = std::move(other353.if_not_exists);
  server_name = std::move(other353.server_name);
  __isset = std::move(other353.__isset);
}
TCreateOrAlterViewParams& TCreateOrAlterViewParams::operator=(const TCreateOrAlterViewParams& other354) {
  view_name = other354.view_name;
  columns = other354.columns;
  owner = other354.owner;
  original_view_def = other354.original_view_def;
  expanded_view_def = other354.expanded_view_def;
  comment = other354.comment;
  if_not_exists = other354.if_not_exists;
  server_name = other354.server_name;
  __isset = other354.__isset;
  return *this;
}
TCreateOrAlterViewParams& TCreateOrAlterViewParams::operator=(TCreateOrAlterViewParams&& other355) {
  view_name = std::move(other355.view_name);
  columns = std::move(other355.columns);
  owner = std::move(other355.owner);
  original_view_def = std::move(other355.original_view_def);
  expanded_view_def = std::move(other355.expanded_view_def);
  comment = std::move(other355.comment);
  if_not_exists = std::move(other355.if_not_exists);
  server_name = std::move(other355.server_name);
  __isset = std::move(other355.__isset);
  return *this;
}
void TCreateOrAlterViewParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCreateOrAlterViewParams(";
  out << "view_name=" << to_string(view_name);
  out << ", " << "columns=" << to_string(columns);
  out << ", " << "owner=" << to_string(owner);
  out << ", " << "original_view_def=" << to_string(original_view_def);
  out << ", " << "expanded_view_def=" << to_string(expanded_view_def);
  out << ", " << "comment="; (__isset.comment ? (out << to_string(comment)) : (out << "<null>"));
  out << ", " << "if_not_exists="; (__isset.if_not_exists ? (out << to_string(if_not_exists)) : (out << "<null>"));
  out << ", " << "server_name="; (__isset.server_name ? (out << to_string(server_name)) : (out << "<null>"));
  out << ")";
}


TComputeStatsParams::~TComputeStatsParams() throw() {
}


void TComputeStatsParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TComputeStatsParams::__set_tbl_stats_query(const std::string& val) {
  this->tbl_stats_query = val;
__isset.tbl_stats_query = true;
}

void TComputeStatsParams::__set_col_stats_query(const std::string& val) {
  this->col_stats_query = val;
__isset.col_stats_query = true;
}

void TComputeStatsParams::__set_is_incremental(const bool val) {
  this->is_incremental = val;
__isset.is_incremental = true;
}

void TComputeStatsParams::__set_existing_part_stats(const std::vector< ::impala::TPartitionStats> & val) {
  this->existing_part_stats = val;
__isset.existing_part_stats = true;
}

void TComputeStatsParams::__set_expected_partitions(const std::vector<std::vector<std::string> > & val) {
  this->expected_partitions = val;
__isset.expected_partitions = true;
}

void TComputeStatsParams::__set_expect_all_partitions(const bool val) {
  this->expect_all_partitions = val;
__isset.expect_all_partitions = true;
}

void TComputeStatsParams::__set_num_partition_cols(const int32_t val) {
  this->num_partition_cols = val;
__isset.num_partition_cols = true;
}

void TComputeStatsParams::__set_total_file_bytes(const int64_t val) {
  this->total_file_bytes = val;
__isset.total_file_bytes = true;
}
std::ostream& operator<<(std::ostream& out, const TComputeStatsParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TComputeStatsParams &a, TComputeStatsParams &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.tbl_stats_query, b.tbl_stats_query);
  swap(a.col_stats_query, b.col_stats_query);
  swap(a.is_incremental, b.is_incremental);
  swap(a.existing_part_stats, b.existing_part_stats);
  swap(a.expected_partitions, b.expected_partitions);
  swap(a.expect_all_partitions, b.expect_all_partitions);
  swap(a.num_partition_cols, b.num_partition_cols);
  swap(a.total_file_bytes, b.total_file_bytes);
  swap(a.__isset, b.__isset);
}

TComputeStatsParams::TComputeStatsParams(const TComputeStatsParams& other374) {
  table_name = other374.table_name;
  tbl_stats_query = other374.tbl_stats_query;
  col_stats_query = other374.col_stats_query;
  is_incremental = other374.is_incremental;
  existing_part_stats = other374.existing_part_stats;
  expected_partitions = other374.expected_partitions;
  expect_all_partitions = other374.expect_all_partitions;
  num_partition_cols = other374.num_partition_cols;
  total_file_bytes = other374.total_file_bytes;
  __isset = other374.__isset;
}
TComputeStatsParams::TComputeStatsParams( TComputeStatsParams&& other375) {
  table_name = std::move(other375.table_name);
  tbl_stats_query = std::move(other375.tbl_stats_query);
  col_stats_query = std::move(other375.col_stats_query);
  is_incremental = std::move(other375.is_incremental);
  existing_part_stats = std::move(other375.existing_part_stats);
  expected_partitions = std::move(other375.expected_partitions);
  expect_all_partitions = std::move(other375.expect_all_partitions);
  num_partition_cols = std::move(other375.num_partition_cols);
  total_file_bytes = std::move(other375.total_file_bytes);
  __isset = std::move(other375.__isset);
}
TComputeStatsParams& TComputeStatsParams::operator=(const TComputeStatsParams& other376) {
  table_name = other376.table_name;
  tbl_stats_query = other376.tbl_stats_query;
  col_stats_query = other376.col_stats_query;
  is_incremental = other376.is_incremental;
  existing_part_stats = other376.existing_part_stats;
  expected_partitions = other376.expected_partitions;
  expect_all_partitions = other376.expect_all_partitions;
  num_partition_cols = other376.num_partition_cols;
  total_file_bytes = other376.total_file_bytes;
  __isset = other376.__isset;
  return *this;
}
TComputeStatsParams& TComputeStatsParams::operator=(TComputeStatsParams&& other377) {
  table_name = std::move(other377.table_name);
  tbl_stats_query = std::move(other377.tbl_stats_query);
  col_stats_query = std::move(other377.col_stats_query);
  is_incremental = std::move(other377.is_incremental);
  existing_part_stats = std::move(other377.existing_part_stats);
  expected_partitions = std::move(other377.expected_partitions);
  expect_all_partitions = std::move(other377.expect_all_partitions);
  num_partition_cols = std::move(other377.num_partition_cols);
  total_file_bytes = std::move(other377.total_file_bytes);
  __isset = std::move(other377.__isset);
  return *this;
}
void TComputeStatsParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TComputeStatsParams(";
  out << "table_name=" << to_string(table_name);
  out << ", " << "tbl_stats_query="; (__isset.tbl_stats_query ? (out << to_string(tbl_stats_query)) : (out << "<null>"));
  out << ", " << "col_stats_query="; (__isset.col_stats_query ? (out << to_string(col_stats_query)) : (out << "<null>"));
  out << ", " << "is_incremental="; (__isset.is_incremental ? (out << to_string(is_incremental)) : (out << "<null>"));
  out << ", " << "existing_part_stats="; (__isset.existing_part_stats ? (out << to_string(existing_part_stats)) : (out << "<null>"));
  out << ", " << "expected_partitions="; (__isset.expected_partitions ? (out << to_string(expected_partitions)) : (out << "<null>"));
  out << ", " << "expect_all_partitions="; (__isset.expect_all_partitions ? (out << to_string(expect_all_partitions)) : (out << "<null>"));
  out << ", " << "num_partition_cols="; (__isset.num_partition_cols ? (out << to_string(num_partition_cols)) : (out << "<null>"));
  out << ", " << "total_file_bytes="; (__isset.total_file_bytes ? (out << to_string(total_file_bytes)) : (out << "<null>"));
  out << ")";
}


TCreateDropRoleParams::~TCreateDropRoleParams() throw() {
}


void TCreateDropRoleParams::__set_is_drop(const bool val) {
  this->is_drop = val;
}

void TCreateDropRoleParams::__set_role_name(const std::string& val) {
  this->role_name = val;
}
std::ostream& operator<<(std::ostream& out, const TCreateDropRoleParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCreateDropRoleParams &a, TCreateDropRoleParams &b) {
  using ::std::swap;
  swap(a.is_drop, b.is_drop);
  swap(a.role_name, b.role_name);
}

TCreateDropRoleParams::TCreateDropRoleParams(const TCreateDropRoleParams& other378) {
  is_drop = other378.is_drop;
  role_name = other378.role_name;
}
TCreateDropRoleParams::TCreateDropRoleParams( TCreateDropRoleParams&& other379) {
  is_drop = std::move(other379.is_drop);
  role_name = std::move(other379.role_name);
}
TCreateDropRoleParams& TCreateDropRoleParams::operator=(const TCreateDropRoleParams& other380) {
  is_drop = other380.is_drop;
  role_name = other380.role_name;
  return *this;
}
TCreateDropRoleParams& TCreateDropRoleParams::operator=(TCreateDropRoleParams&& other381) {
  is_drop = std::move(other381.is_drop);
  role_name = std::move(other381.role_name);
  return *this;
}
void TCreateDropRoleParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCreateDropRoleParams(";
  out << "is_drop=" << to_string(is_drop);
  out << ", " << "role_name=" << to_string(role_name);
  out << ")";
}


TGrantRevokeRoleParams::~TGrantRevokeRoleParams() throw() {
}


void TGrantRevokeRoleParams::__set_role_names(const std::vector<std::string> & val) {
  this->role_names = val;
}

void TGrantRevokeRoleParams::__set_group_names(const std::vector<std::string> & val) {
  this->group_names = val;
}

void TGrantRevokeRoleParams::__set_is_grant(const bool val) {
  this->is_grant = val;
}
std::ostream& operator<<(std::ostream& out, const TGrantRevokeRoleParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGrantRevokeRoleParams &a, TGrantRevokeRoleParams &b) {
  using ::std::swap;
  swap(a.role_names, b.role_names);
  swap(a.group_names, b.group_names);
  swap(a.is_grant, b.is_grant);
}

TGrantRevokeRoleParams::TGrantRevokeRoleParams(const TGrantRevokeRoleParams& other394) {
  role_names = other394.role_names;
  group_names = other394.group_names;
  is_grant = other394.is_grant;
}
TGrantRevokeRoleParams::TGrantRevokeRoleParams( TGrantRevokeRoleParams&& other395) {
  role_names = std::move(other395.role_names);
  group_names = std::move(other395.group_names);
  is_grant = std::move(other395.is_grant);
}
TGrantRevokeRoleParams& TGrantRevokeRoleParams::operator=(const TGrantRevokeRoleParams& other396) {
  role_names = other396.role_names;
  group_names = other396.group_names;
  is_grant = other396.is_grant;
  return *this;
}
TGrantRevokeRoleParams& TGrantRevokeRoleParams::operator=(TGrantRevokeRoleParams&& other397) {
  role_names = std::move(other397.role_names);
  group_names = std::move(other397.group_names);
  is_grant = std::move(other397.is_grant);
  return *this;
}
void TGrantRevokeRoleParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGrantRevokeRoleParams(";
  out << "role_names=" << to_string(role_names);
  out << ", " << "group_names=" << to_string(group_names);
  out << ", " << "is_grant=" << to_string(is_grant);
  out << ")";
}


TGrantRevokePrivParams::~TGrantRevokePrivParams() throw() {
}


void TGrantRevokePrivParams::__set_privileges(const std::vector< ::impala::TPrivilege> & val) {
  this->privileges = val;
}

void TGrantRevokePrivParams::__set_principal_name(const std::string& val) {
  this->principal_name = val;
}

void TGrantRevokePrivParams::__set_is_grant(const bool val) {
  this->is_grant = val;
}

void TGrantRevokePrivParams::__set_has_grant_opt(const bool val) {
  this->has_grant_opt = val;
}

void TGrantRevokePrivParams::__set_principal_type(const  ::impala::TPrincipalType::type val) {
  this->principal_type = val;
}
std::ostream& operator<<(std::ostream& out, const TGrantRevokePrivParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGrantRevokePrivParams &a, TGrantRevokePrivParams &b) {
  using ::std::swap;
  swap(a.privileges, b.privileges);
  swap(a.principal_name, b.principal_name);
  swap(a.is_grant, b.is_grant);
  swap(a.has_grant_opt, b.has_grant_opt);
  swap(a.principal_type, b.principal_type);
}

TGrantRevokePrivParams::TGrantRevokePrivParams(const TGrantRevokePrivParams& other405) {
  privileges = other405.privileges;
  principal_name = other405.principal_name;
  is_grant = other405.is_grant;
  has_grant_opt = other405.has_grant_opt;
  principal_type = other405.principal_type;
}
TGrantRevokePrivParams::TGrantRevokePrivParams( TGrantRevokePrivParams&& other406) {
  privileges = std::move(other406.privileges);
  principal_name = std::move(other406.principal_name);
  is_grant = std::move(other406.is_grant);
  has_grant_opt = std::move(other406.has_grant_opt);
  principal_type = std::move(other406.principal_type);
}
TGrantRevokePrivParams& TGrantRevokePrivParams::operator=(const TGrantRevokePrivParams& other407) {
  privileges = other407.privileges;
  principal_name = other407.principal_name;
  is_grant = other407.is_grant;
  has_grant_opt = other407.has_grant_opt;
  principal_type = other407.principal_type;
  return *this;
}
TGrantRevokePrivParams& TGrantRevokePrivParams::operator=(TGrantRevokePrivParams&& other408) {
  privileges = std::move(other408.privileges);
  principal_name = std::move(other408.principal_name);
  is_grant = std::move(other408.is_grant);
  has_grant_opt = std::move(other408.has_grant_opt);
  principal_type = std::move(other408.principal_type);
  return *this;
}
void TGrantRevokePrivParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGrantRevokePrivParams(";
  out << "privileges=" << to_string(privileges);
  out << ", " << "principal_name=" << to_string(principal_name);
  out << ", " << "is_grant=" << to_string(is_grant);
  out << ", " << "has_grant_opt=" << to_string(has_grant_opt);
  out << ", " << "principal_type=" << to_string(principal_type);
  out << ")";
}


TDropDbParams::~TDropDbParams() throw() {
}


void TDropDbParams::__set_db(const std::string& val) {
  this->db = val;
}

void TDropDbParams::__set_if_exists(const bool val) {
  this->if_exists = val;
}

void TDropDbParams::__set_cascade(const bool val) {
  this->cascade = val;
}

void TDropDbParams::__set_server_name(const std::string& val) {
  this->server_name = val;
__isset.server_name = true;
}
std::ostream& operator<<(std::ostream& out, const TDropDbParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDropDbParams &a, TDropDbParams &b) {
  using ::std::swap;
  swap(a.db, b.db);
  swap(a.if_exists, b.if_exists);
  swap(a.cascade, b.cascade);
  swap(a.server_name, b.server_name);
  swap(a.__isset, b.__isset);
}

TDropDbParams::TDropDbParams(const TDropDbParams& other409) {
  db = other409.db;
  if_exists = other409.if_exists;
  cascade = other409.cascade;
  server_name = other409.server_name;
  __isset = other409.__isset;
}
TDropDbParams::TDropDbParams( TDropDbParams&& other410) {
  db = std::move(other410.db);
  if_exists = std::move(other410.if_exists);
  cascade = std::move(other410.cascade);
  server_name = std::move(other410.server_name);
  __isset = std::move(other410.__isset);
}
TDropDbParams& TDropDbParams::operator=(const TDropDbParams& other411) {
  db = other411.db;
  if_exists = other411.if_exists;
  cascade = other411.cascade;
  server_name = other411.server_name;
  __isset = other411.__isset;
  return *this;
}
TDropDbParams& TDropDbParams::operator=(TDropDbParams&& other412) {
  db = std::move(other412.db);
  if_exists = std::move(other412.if_exists);
  cascade = std::move(other412.cascade);
  server_name = std::move(other412.server_name);
  __isset = std::move(other412.__isset);
  return *this;
}
void TDropDbParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDropDbParams(";
  out << "db=" << to_string(db);
  out << ", " << "if_exists=" << to_string(if_exists);
  out << ", " << "cascade=" << to_string(cascade);
  out << ", " << "server_name="; (__isset.server_name ? (out << to_string(server_name)) : (out << "<null>"));
  out << ")";
}


TDropTableOrViewParams::~TDropTableOrViewParams() throw() {
}


void TDropTableOrViewParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TDropTableOrViewParams::__set_if_exists(const bool val) {
  this->if_exists = val;
}

void TDropTableOrViewParams::__set_purge(const bool val) {
  this->purge = val;
}

void TDropTableOrViewParams::__set_is_table(const bool val) {
  this->is_table = val;
__isset.is_table = true;
}

void TDropTableOrViewParams::__set_server_name(const std::string& val) {
  this->server_name = val;
__isset.server_name = true;
}
std::ostream& operator<<(std::ostream& out, const TDropTableOrViewParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDropTableOrViewParams &a, TDropTableOrViewParams &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.if_exists, b.if_exists);
  swap(a.purge, b.purge);
  swap(a.is_table, b.is_table);
  swap(a.server_name, b.server_name);
  swap(a.__isset, b.__isset);
}

TDropTableOrViewParams::TDropTableOrViewParams(const TDropTableOrViewParams& other413) {
  table_name = other413.table_name;
  if_exists = other413.if_exists;
  purge = other413.purge;
  is_table = other413.is_table;
  server_name = other413.server_name;
  __isset = other413.__isset;
}
TDropTableOrViewParams::TDropTableOrViewParams( TDropTableOrViewParams&& other414) {
  table_name = std::move(other414.table_name);
  if_exists = std::move(other414.if_exists);
  purge = std::move(other414.purge);
  is_table = std::move(other414.is_table);
  server_name = std::move(other414.server_name);
  __isset = std::move(other414.__isset);
}
TDropTableOrViewParams& TDropTableOrViewParams::operator=(const TDropTableOrViewParams& other415) {
  table_name = other415.table_name;
  if_exists = other415.if_exists;
  purge = other415.purge;
  is_table = other415.is_table;
  server_name = other415.server_name;
  __isset = other415.__isset;
  return *this;
}
TDropTableOrViewParams& TDropTableOrViewParams::operator=(TDropTableOrViewParams&& other416) {
  table_name = std::move(other416.table_name);
  if_exists = std::move(other416.if_exists);
  purge = std::move(other416.purge);
  is_table = std::move(other416.is_table);
  server_name = std::move(other416.server_name);
  __isset = std::move(other416.__isset);
  return *this;
}
void TDropTableOrViewParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDropTableOrViewParams(";
  out << "table_name=" << to_string(table_name);
  out << ", " << "if_exists=" << to_string(if_exists);
  out << ", " << "purge=" << to_string(purge);
  out << ", " << "is_table="; (__isset.is_table ? (out << to_string(is_table)) : (out << "<null>"));
  out << ", " << "server_name="; (__isset.server_name ? (out << to_string(server_name)) : (out << "<null>"));
  out << ")";
}


TTruncateParams::~TTruncateParams() throw() {
}


void TTruncateParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TTruncateParams::__set_if_exists(const bool val) {
  this->if_exists = val;
}

void TTruncateParams::__set_delete_stats(const bool val) {
  this->delete_stats = val;
__isset.delete_stats = true;
}
std::ostream& operator<<(std::ostream& out, const TTruncateParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TTruncateParams &a, TTruncateParams &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.if_exists, b.if_exists);
  swap(a.delete_stats, b.delete_stats);
  swap(a.__isset, b.__isset);
}

TTruncateParams::TTruncateParams(const TTruncateParams& other417) {
  table_name = other417.table_name;
  if_exists = other417.if_exists;
  delete_stats = other417.delete_stats;
  __isset = other417.__isset;
}
TTruncateParams::TTruncateParams( TTruncateParams&& other418) {
  table_name = std::move(other418.table_name);
  if_exists = std::move(other418.if_exists);
  delete_stats = std::move(other418.delete_stats);
  __isset = std::move(other418.__isset);
}
TTruncateParams& TTruncateParams::operator=(const TTruncateParams& other419) {
  table_name = other419.table_name;
  if_exists = other419.if_exists;
  delete_stats = other419.delete_stats;
  __isset = other419.__isset;
  return *this;
}
TTruncateParams& TTruncateParams::operator=(TTruncateParams&& other420) {
  table_name = std::move(other420.table_name);
  if_exists = std::move(other420.if_exists);
  delete_stats = std::move(other420.delete_stats);
  __isset = std::move(other420.__isset);
  return *this;
}
void TTruncateParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTruncateParams(";
  out << "table_name=" << to_string(table_name);
  out << ", " << "if_exists=" << to_string(if_exists);
  out << ", " << "delete_stats="; (__isset.delete_stats ? (out << to_string(delete_stats)) : (out << "<null>"));
  out << ")";
}


TDropFunctionParams::~TDropFunctionParams() throw() {
}


void TDropFunctionParams::__set_fn_name(const  ::impala::TFunctionName& val) {
  this->fn_name = val;
}

void TDropFunctionParams::__set_arg_types(const std::vector< ::impala::TColumnType> & val) {
  this->arg_types = val;
}

void TDropFunctionParams::__set_if_exists(const bool val) {
  this->if_exists = val;
}

void TDropFunctionParams::__set_signature(const std::string& val) {
  this->signature = val;
__isset.signature = true;
}
std::ostream& operator<<(std::ostream& out, const TDropFunctionParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDropFunctionParams &a, TDropFunctionParams &b) {
  using ::std::swap;
  swap(a.fn_name, b.fn_name);
  swap(a.arg_types, b.arg_types);
  swap(a.if_exists, b.if_exists);
  swap(a.signature, b.signature);
  swap(a.__isset, b.__isset);
}

TDropFunctionParams::TDropFunctionParams(const TDropFunctionParams& other427) {
  fn_name = other427.fn_name;
  arg_types = other427.arg_types;
  if_exists = other427.if_exists;
  signature = other427.signature;
  __isset = other427.__isset;
}
TDropFunctionParams::TDropFunctionParams( TDropFunctionParams&& other428) {
  fn_name = std::move(other428.fn_name);
  arg_types = std::move(other428.arg_types);
  if_exists = std::move(other428.if_exists);
  signature = std::move(other428.signature);
  __isset = std::move(other428.__isset);
}
TDropFunctionParams& TDropFunctionParams::operator=(const TDropFunctionParams& other429) {
  fn_name = other429.fn_name;
  arg_types = other429.arg_types;
  if_exists = other429.if_exists;
  signature = other429.signature;
  __isset = other429.__isset;
  return *this;
}
TDropFunctionParams& TDropFunctionParams::operator=(TDropFunctionParams&& other430) {
  fn_name = std::move(other430.fn_name);
  arg_types = std::move(other430.arg_types);
  if_exists = std::move(other430.if_exists);
  signature = std::move(other430.signature);
  __isset = std::move(other430.__isset);
  return *this;
}
void TDropFunctionParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDropFunctionParams(";
  out << "fn_name=" << to_string(fn_name);
  out << ", " << "arg_types=" << to_string(arg_types);
  out << ", " << "if_exists=" << to_string(if_exists);
  out << ", " << "signature="; (__isset.signature ? (out << to_string(signature)) : (out << "<null>"));
  out << ")";
}


TTableUsageMetrics::~TTableUsageMetrics() throw() {
}


void TTableUsageMetrics::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TTableUsageMetrics::__set_memory_estimate_bytes(const int64_t val) {
  this->memory_estimate_bytes = val;
__isset.memory_estimate_bytes = true;
}

void TTableUsageMetrics::__set_num_metadata_operations(const int64_t val) {
  this->num_metadata_operations = val;
__isset.num_metadata_operations = true;
}

void TTableUsageMetrics::__set_num_files(const int64_t val) {
  this->num_files = val;
__isset.num_files = true;
}

void TTableUsageMetrics::__set_median_table_loading_ns(const int64_t val) {
  this->median_table_loading_ns = val;
__isset.median_table_loading_ns = true;
}

void TTableUsageMetrics::__set_max_table_loading_ns(const int64_t val) {
  this->max_table_loading_ns = val;
__isset.max_table_loading_ns = true;
}

void TTableUsageMetrics::__set_num_table_loading(const int64_t val) {
  this->num_table_loading = val;
__isset.num_table_loading = true;
}

void TTableUsageMetrics::__set_p75_loading_time_ns(const int64_t val) {
  this->p75_loading_time_ns = val;
__isset.p75_loading_time_ns = true;
}

void TTableUsageMetrics::__set_p95_loading_time_ns(const int64_t val) {
  this->p95_loading_time_ns = val;
__isset.p95_loading_time_ns = true;
}

void TTableUsageMetrics::__set_p99_loading_time_ns(const int64_t val) {
  this->p99_loading_time_ns = val;
__isset.p99_loading_time_ns = true;
}
std::ostream& operator<<(std::ostream& out, const TTableUsageMetrics& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TTableUsageMetrics &a, TTableUsageMetrics &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.memory_estimate_bytes, b.memory_estimate_bytes);
  swap(a.num_metadata_operations, b.num_metadata_operations);
  swap(a.num_files, b.num_files);
  swap(a.median_table_loading_ns, b.median_table_loading_ns);
  swap(a.max_table_loading_ns, b.max_table_loading_ns);
  swap(a.num_table_loading, b.num_table_loading);
  swap(a.p75_loading_time_ns, b.p75_loading_time_ns);
  swap(a.p95_loading_time_ns, b.p95_loading_time_ns);
  swap(a.p99_loading_time_ns, b.p99_loading_time_ns);
  swap(a.__isset, b.__isset);
}

TTableUsageMetrics::TTableUsageMetrics(const TTableUsageMetrics& other431) {
  table_name = other431.table_name;
  memory_estimate_bytes = other431.memory_estimate_bytes;
  num_metadata_operations = other431.num_metadata_operations;
  num_files = other431.num_files;
  median_table_loading_ns = other431.median_table_loading_ns;
  max_table_loading_ns = other431.max_table_loading_ns;
  num_table_loading = other431.num_table_loading;
  p75_loading_time_ns = other431.p75_loading_time_ns;
  p95_loading_time_ns = other431.p95_loading_time_ns;
  p99_loading_time_ns = other431.p99_loading_time_ns;
  __isset = other431.__isset;
}
TTableUsageMetrics::TTableUsageMetrics( TTableUsageMetrics&& other432) {
  table_name = std::move(other432.table_name);
  memory_estimate_bytes = std::move(other432.memory_estimate_bytes);
  num_metadata_operations = std::move(other432.num_metadata_operations);
  num_files = std::move(other432.num_files);
  median_table_loading_ns = std::move(other432.median_table_loading_ns);
  max_table_loading_ns = std::move(other432.max_table_loading_ns);
  num_table_loading = std::move(other432.num_table_loading);
  p75_loading_time_ns = std::move(other432.p75_loading_time_ns);
  p95_loading_time_ns = std::move(other432.p95_loading_time_ns);
  p99_loading_time_ns = std::move(other432.p99_loading_time_ns);
  __isset = std::move(other432.__isset);
}
TTableUsageMetrics& TTableUsageMetrics::operator=(const TTableUsageMetrics& other433) {
  table_name = other433.table_name;
  memory_estimate_bytes = other433.memory_estimate_bytes;
  num_metadata_operations = other433.num_metadata_operations;
  num_files = other433.num_files;
  median_table_loading_ns = other433.median_table_loading_ns;
  max_table_loading_ns = other433.max_table_loading_ns;
  num_table_loading = other433.num_table_loading;
  p75_loading_time_ns = other433.p75_loading_time_ns;
  p95_loading_time_ns = other433.p95_loading_time_ns;
  p99_loading_time_ns = other433.p99_loading_time_ns;
  __isset = other433.__isset;
  return *this;
}
TTableUsageMetrics& TTableUsageMetrics::operator=(TTableUsageMetrics&& other434) {
  table_name = std::move(other434.table_name);
  memory_estimate_bytes = std::move(other434.memory_estimate_bytes);
  num_metadata_operations = std::move(other434.num_metadata_operations);
  num_files = std::move(other434.num_files);
  median_table_loading_ns = std::move(other434.median_table_loading_ns);
  max_table_loading_ns = std::move(other434.max_table_loading_ns);
  num_table_loading = std::move(other434.num_table_loading);
  p75_loading_time_ns = std::move(other434.p75_loading_time_ns);
  p95_loading_time_ns = std::move(other434.p95_loading_time_ns);
  p99_loading_time_ns = std::move(other434.p99_loading_time_ns);
  __isset = std::move(other434.__isset);
  return *this;
}
void TTableUsageMetrics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTableUsageMetrics(";
  out << "table_name=" << to_string(table_name);
  out << ", " << "memory_estimate_bytes="; (__isset.memory_estimate_bytes ? (out << to_string(memory_estimate_bytes)) : (out << "<null>"));
  out << ", " << "num_metadata_operations="; (__isset.num_metadata_operations ? (out << to_string(num_metadata_operations)) : (out << "<null>"));
  out << ", " << "num_files="; (__isset.num_files ? (out << to_string(num_files)) : (out << "<null>"));
  out << ", " << "median_table_loading_ns="; (__isset.median_table_loading_ns ? (out << to_string(median_table_loading_ns)) : (out << "<null>"));
  out << ", " << "max_table_loading_ns="; (__isset.max_table_loading_ns ? (out << to_string(max_table_loading_ns)) : (out << "<null>"));
  out << ", " << "num_table_loading="; (__isset.num_table_loading ? (out << to_string(num_table_loading)) : (out << "<null>"));
  out << ", " << "p75_loading_time_ns="; (__isset.p75_loading_time_ns ? (out << to_string(p75_loading_time_ns)) : (out << "<null>"));
  out << ", " << "p95_loading_time_ns="; (__isset.p95_loading_time_ns ? (out << to_string(p95_loading_time_ns)) : (out << "<null>"));
  out << ", " << "p99_loading_time_ns="; (__isset.p99_loading_time_ns ? (out << to_string(p99_loading_time_ns)) : (out << "<null>"));
  out << ")";
}


TGetCatalogUsageResponse::~TGetCatalogUsageResponse() throw() {
}


void TGetCatalogUsageResponse::__set_large_tables(const std::vector<TTableUsageMetrics> & val) {
  this->large_tables = val;
}

void TGetCatalogUsageResponse::__set_frequently_accessed_tables(const std::vector<TTableUsageMetrics> & val) {
  this->frequently_accessed_tables = val;
}

void TGetCatalogUsageResponse::__set_high_file_count_tables(const std::vector<TTableUsageMetrics> & val) {
  this->high_file_count_tables = val;
}

void TGetCatalogUsageResponse::__set_long_metadata_loading_tables(const std::vector<TTableUsageMetrics> & val) {
  this->long_metadata_loading_tables = val;
}
std::ostream& operator<<(std::ostream& out, const TGetCatalogUsageResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetCatalogUsageResponse &a, TGetCatalogUsageResponse &b) {
  using ::std::swap;
  swap(a.large_tables, b.large_tables);
  swap(a.frequently_accessed_tables, b.frequently_accessed_tables);
  swap(a.high_file_count_tables, b.high_file_count_tables);
  swap(a.long_metadata_loading_tables, b.long_metadata_loading_tables);
}

TGetCatalogUsageResponse::TGetCatalogUsageResponse(const TGetCatalogUsageResponse& other459) {
  large_tables = other459.large_tables;
  frequently_accessed_tables = other459.frequently_accessed_tables;
  high_file_count_tables = other459.high_file_count_tables;
  long_metadata_loading_tables = other459.long_metadata_loading_tables;
}
TGetCatalogUsageResponse::TGetCatalogUsageResponse( TGetCatalogUsageResponse&& other460) {
  large_tables = std::move(other460.large_tables);
  frequently_accessed_tables = std::move(other460.frequently_accessed_tables);
  high_file_count_tables = std::move(other460.high_file_count_tables);
  long_metadata_loading_tables = std::move(other460.long_metadata_loading_tables);
}
TGetCatalogUsageResponse& TGetCatalogUsageResponse::operator=(const TGetCatalogUsageResponse& other461) {
  large_tables = other461.large_tables;
  frequently_accessed_tables = other461.frequently_accessed_tables;
  high_file_count_tables = other461.high_file_count_tables;
  long_metadata_loading_tables = other461.long_metadata_loading_tables;
  return *this;
}
TGetCatalogUsageResponse& TGetCatalogUsageResponse::operator=(TGetCatalogUsageResponse&& other462) {
  large_tables = std::move(other462.large_tables);
  frequently_accessed_tables = std::move(other462.frequently_accessed_tables);
  high_file_count_tables = std::move(other462.high_file_count_tables);
  long_metadata_loading_tables = std::move(other462.long_metadata_loading_tables);
  return *this;
}
void TGetCatalogUsageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetCatalogUsageResponse(";
  out << "large_tables=" << to_string(large_tables);
  out << ", " << "frequently_accessed_tables=" << to_string(frequently_accessed_tables);
  out << ", " << "high_file_count_tables=" << to_string(high_file_count_tables);
  out << ", " << "long_metadata_loading_tables=" << to_string(long_metadata_loading_tables);
  out << ")";
}


TOperationUsageCounter::~TOperationUsageCounter() throw() {
}


void TOperationUsageCounter::__set_catalog_op_name(const std::string& val) {
  this->catalog_op_name = val;
}

void TOperationUsageCounter::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void TOperationUsageCounter::__set_op_counter(const int64_t val) {
  this->op_counter = val;
__isset.op_counter = true;
}
std::ostream& operator<<(std::ostream& out, const TOperationUsageCounter& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TOperationUsageCounter &a, TOperationUsageCounter &b) {
  using ::std::swap;
  swap(a.catalog_op_name, b.catalog_op_name);
  swap(a.table_name, b.table_name);
  swap(a.op_counter, b.op_counter);
  swap(a.__isset, b.__isset);
}

TOperationUsageCounter::TOperationUsageCounter(const TOperationUsageCounter& other463) {
  catalog_op_name = other463.catalog_op_name;
  table_name = other463.table_name;
  op_counter = other463.op_counter;
  __isset = other463.__isset;
}
TOperationUsageCounter::TOperationUsageCounter( TOperationUsageCounter&& other464) {
  catalog_op_name = std::move(other464.catalog_op_name);
  table_name = std::move(other464.table_name);
  op_counter = std::move(other464.op_counter);
  __isset = std::move(other464.__isset);
}
TOperationUsageCounter& TOperationUsageCounter::operator=(const TOperationUsageCounter& other465) {
  catalog_op_name = other465.catalog_op_name;
  table_name = other465.table_name;
  op_counter = other465.op_counter;
  __isset = other465.__isset;
  return *this;
}
TOperationUsageCounter& TOperationUsageCounter::operator=(TOperationUsageCounter&& other466) {
  catalog_op_name = std::move(other466.catalog_op_name);
  table_name = std::move(other466.table_name);
  op_counter = std::move(other466.op_counter);
  __isset = std::move(other466.__isset);
  return *this;
}
void TOperationUsageCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TOperationUsageCounter(";
  out << "catalog_op_name=" << to_string(catalog_op_name);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "op_counter="; (__isset.op_counter ? (out << to_string(op_counter)) : (out << "<null>"));
  out << ")";
}


TGetOperationUsageResponse::~TGetOperationUsageResponse() throw() {
}


void TGetOperationUsageResponse::__set_catalog_op_counters(const std::vector<TOperationUsageCounter> & val) {
  this->catalog_op_counters = val;
}
std::ostream& operator<<(std::ostream& out, const TGetOperationUsageResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetOperationUsageResponse &a, TGetOperationUsageResponse &b) {
  using ::std::swap;
  swap(a.catalog_op_counters, b.catalog_op_counters);
}

TGetOperationUsageResponse::TGetOperationUsageResponse(const TGetOperationUsageResponse& other473) {
  catalog_op_counters = other473.catalog_op_counters;
}
TGetOperationUsageResponse::TGetOperationUsageResponse( TGetOperationUsageResponse&& other474) {
  catalog_op_counters = std::move(other474.catalog_op_counters);
}
TGetOperationUsageResponse& TGetOperationUsageResponse::operator=(const TGetOperationUsageResponse& other475) {
  catalog_op_counters = other475.catalog_op_counters;
  return *this;
}
TGetOperationUsageResponse& TGetOperationUsageResponse::operator=(TGetOperationUsageResponse&& other476) {
  catalog_op_counters = std::move(other476.catalog_op_counters);
  return *this;
}
void TGetOperationUsageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetOperationUsageResponse(";
  out << "catalog_op_counters=" << to_string(catalog_op_counters);
  out << ")";
}


TColumnName::~TColumnName() throw() {
}


void TColumnName::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TColumnName::__set_column_name(const std::string& val) {
  this->column_name = val;
}
std::ostream& operator<<(std::ostream& out, const TColumnName& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TColumnName &a, TColumnName &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
}

TColumnName::TColumnName(const TColumnName& other477) {
  table_name = other477.table_name;
  column_name = other477.column_name;
}
TColumnName::TColumnName( TColumnName&& other478) {
  table_name = std::move(other478.table_name);
  column_name = std::move(other478.column_name);
}
TColumnName& TColumnName::operator=(const TColumnName& other479) {
  table_name = other479.table_name;
  column_name = other479.column_name;
  return *this;
}
TColumnName& TColumnName::operator=(TColumnName&& other480) {
  table_name = std::move(other480.table_name);
  column_name = std::move(other480.column_name);
  return *this;
}
void TColumnName::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TColumnName(";
  out << "table_name=" << to_string(table_name);
  out << ", " << "column_name=" << to_string(column_name);
  out << ")";
}


TCommentOnParams::~TCommentOnParams() throw() {
}


void TCommentOnParams::__set_comment(const std::string& val) {
  this->comment = val;
__isset.comment = true;
}

void TCommentOnParams::__set_db(const std::string& val) {
  this->db = val;
__isset.db = true;
}

void TCommentOnParams::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
__isset.table_name = true;
}

void TCommentOnParams::__set_column_name(const TColumnName& val) {
  this->column_name = val;
__isset.column_name = true;
}
std::ostream& operator<<(std::ostream& out, const TCommentOnParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCommentOnParams &a, TCommentOnParams &b) {
  using ::std::swap;
  swap(a.comment, b.comment);
  swap(a.db, b.db);
  swap(a.table_name, b.table_name);
  swap(a.column_name, b.column_name);
  swap(a.__isset, b.__isset);
}

TCommentOnParams::TCommentOnParams(const TCommentOnParams& other481) {
  comment = other481.comment;
  db = other481.db;
  table_name = other481.table_name;
  column_name = other481.column_name;
  __isset = other481.__isset;
}
TCommentOnParams::TCommentOnParams( TCommentOnParams&& other482) {
  comment = std::move(other482.comment);
  db = std::move(other482.db);
  table_name = std::move(other482.table_name);
  column_name = std::move(other482.column_name);
  __isset = std::move(other482.__isset);
}
TCommentOnParams& TCommentOnParams::operator=(const TCommentOnParams& other483) {
  comment = other483.comment;
  db = other483.db;
  table_name = other483.table_name;
  column_name = other483.column_name;
  __isset = other483.__isset;
  return *this;
}
TCommentOnParams& TCommentOnParams::operator=(TCommentOnParams&& other484) {
  comment = std::move(other484.comment);
  db = std::move(other484.db);
  table_name = std::move(other484.table_name);
  column_name = std::move(other484.column_name);
  __isset = std::move(other484.__isset);
  return *this;
}
void TCommentOnParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCommentOnParams(";
  out << "comment="; (__isset.comment ? (out << to_string(comment)) : (out << "<null>"));
  out << ", " << "db="; (__isset.db ? (out << to_string(db)) : (out << "<null>"));
  out << ", " << "table_name="; (__isset.table_name ? (out << to_string(table_name)) : (out << "<null>"));
  out << ", " << "column_name="; (__isset.column_name ? (out << to_string(column_name)) : (out << "<null>"));
  out << ")";
}


TEventProcessorMetrics::~TEventProcessorMetrics() throw() {
}


void TEventProcessorMetrics::__set_status(const std::string& val) {
  this->status = val;
}

void TEventProcessorMetrics::__set_events_received(const int64_t val) {
  this->events_received = val;
__isset.events_received = true;
}

void TEventProcessorMetrics::__set_events_skipped(const int64_t val) {
  this->events_skipped = val;
__isset.events_skipped = true;
}

void TEventProcessorMetrics::__set_events_fetch_duration_mean(const double val) {
  this->events_fetch_duration_mean = val;
__isset.events_fetch_duration_mean = true;
}

void TEventProcessorMetrics::__set_events_process_duration_mean(const double val) {
  this->events_process_duration_mean = val;
__isset.events_process_duration_mean = true;
}

void TEventProcessorMetrics::__set_events_received_1min_rate(const double val) {
  this->events_received_1min_rate = val;
__isset.events_received_1min_rate = true;
}

void TEventProcessorMetrics::__set_events_received_5min_rate(const double val) {
  this->events_received_5min_rate = val;
__isset.events_received_5min_rate = true;
}

void TEventProcessorMetrics::__set_events_received_15min_rate(const double val) {
  this->events_received_15min_rate = val;
__isset.events_received_15min_rate = true;
}

void TEventProcessorMetrics::__set_events_skipped_per_poll_mean(const double val) {
  this->events_skipped_per_poll_mean = val;
__isset.events_skipped_per_poll_mean = true;
}

void TEventProcessorMetrics::__set_last_synced_event_id(const int64_t val) {
  this->last_synced_event_id = val;
__isset.last_synced_event_id = true;
}
std::ostream& operator<<(std::ostream& out, const TEventProcessorMetrics& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TEventProcessorMetrics &a, TEventProcessorMetrics &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.events_received, b.events_received);
  swap(a.events_skipped, b.events_skipped);
  swap(a.events_fetch_duration_mean, b.events_fetch_duration_mean);
  swap(a.events_process_duration_mean, b.events_process_duration_mean);
  swap(a.events_received_1min_rate, b.events_received_1min_rate);
  swap(a.events_received_5min_rate, b.events_received_5min_rate);
  swap(a.events_received_15min_rate, b.events_received_15min_rate);
  swap(a.events_skipped_per_poll_mean, b.events_skipped_per_poll_mean);
  swap(a.last_synced_event_id, b.last_synced_event_id);
  swap(a.__isset, b.__isset);
}

TEventProcessorMetrics::TEventProcessorMetrics(const TEventProcessorMetrics& other485) {
  status = other485.status;
  events_received = other485.events_received;
  events_skipped = other485.events_skipped;
  events_fetch_duration_mean = other485.events_fetch_duration_mean;
  events_process_duration_mean = other485.events_process_duration_mean;
  events_received_1min_rate = other485.events_received_1min_rate;
  events_received_5min_rate = other485.events_received_5min_rate;
  events_received_15min_rate = other485.events_received_15min_rate;
  events_skipped_per_poll_mean = other485.events_skipped_per_poll_mean;
  last_synced_event_id = other485.last_synced_event_id;
  __isset = other485.__isset;
}
TEventProcessorMetrics::TEventProcessorMetrics( TEventProcessorMetrics&& other486) {
  status = std::move(other486.status);
  events_received = std::move(other486.events_received);
  events_skipped = std::move(other486.events_skipped);
  events_fetch_duration_mean = std::move(other486.events_fetch_duration_mean);
  events_process_duration_mean = std::move(other486.events_process_duration_mean);
  events_received_1min_rate = std::move(other486.events_received_1min_rate);
  events_received_5min_rate = std::move(other486.events_received_5min_rate);
  events_received_15min_rate = std::move(other486.events_received_15min_rate);
  events_skipped_per_poll_mean = std::move(other486.events_skipped_per_poll_mean);
  last_synced_event_id = std::move(other486.last_synced_event_id);
  __isset = std::move(other486.__isset);
}
TEventProcessorMetrics& TEventProcessorMetrics::operator=(const TEventProcessorMetrics& other487) {
  status = other487.status;
  events_received = other487.events_received;
  events_skipped = other487.events_skipped;
  events_fetch_duration_mean = other487.events_fetch_duration_mean;
  events_process_duration_mean = other487.events_process_duration_mean;
  events_received_1min_rate = other487.events_received_1min_rate;
  events_received_5min_rate = other487.events_received_5min_rate;
  events_received_15min_rate = other487.events_received_15min_rate;
  events_skipped_per_poll_mean = other487.events_skipped_per_poll_mean;
  last_synced_event_id = other487.last_synced_event_id;
  __isset = other487.__isset;
  return *this;
}
TEventProcessorMetrics& TEventProcessorMetrics::operator=(TEventProcessorMetrics&& other488) {
  status = std::move(other488.status);
  events_received = std::move(other488.events_received);
  events_skipped = std::move(other488.events_skipped);
  events_fetch_duration_mean = std::move(other488.events_fetch_duration_mean);
  events_process_duration_mean = std::move(other488.events_process_duration_mean);
  events_received_1min_rate = std::move(other488.events_received_1min_rate);
  events_received_5min_rate = std::move(other488.events_received_5min_rate);
  events_received_15min_rate = std::move(other488.events_received_15min_rate);
  events_skipped_per_poll_mean = std::move(other488.events_skipped_per_poll_mean);
  last_synced_event_id = std::move(other488.last_synced_event_id);
  __isset = std::move(other488.__isset);
  return *this;
}
void TEventProcessorMetrics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TEventProcessorMetrics(";
  out << "status=" << to_string(status);
  out << ", " << "events_received="; (__isset.events_received ? (out << to_string(events_received)) : (out << "<null>"));
  out << ", " << "events_skipped="; (__isset.events_skipped ? (out << to_string(events_skipped)) : (out << "<null>"));
  out << ", " << "events_fetch_duration_mean="; (__isset.events_fetch_duration_mean ? (out << to_string(events_fetch_duration_mean)) : (out << "<null>"));
  out << ", " << "events_process_duration_mean="; (__isset.events_process_duration_mean ? (out << to_string(events_process_duration_mean)) : (out << "<null>"));
  out << ", " << "events_received_1min_rate="; (__isset.events_received_1min_rate ? (out << to_string(events_received_1min_rate)) : (out << "<null>"));
  out << ", " << "events_received_5min_rate="; (__isset.events_received_5min_rate ? (out << to_string(events_received_5min_rate)) : (out << "<null>"));
  out << ", " << "events_received_15min_rate="; (__isset.events_received_15min_rate ? (out << to_string(events_received_15min_rate)) : (out << "<null>"));
  out << ", " << "events_skipped_per_poll_mean="; (__isset.events_skipped_per_poll_mean ? (out << to_string(events_skipped_per_poll_mean)) : (out << "<null>"));
  out << ", " << "last_synced_event_id="; (__isset.last_synced_event_id ? (out << to_string(last_synced_event_id)) : (out << "<null>"));
  out << ")";
}


TCatalogHmsCacheApiMetrics::~TCatalogHmsCacheApiMetrics() throw() {
}


void TCatalogHmsCacheApiMetrics::__set_api_name(const std::string& val) {
  this->api_name = val;
}

void TCatalogHmsCacheApiMetrics::__set_api_requests(const int64_t val) {
  this->api_requests = val;
__isset.api_requests = true;
}

void TCatalogHmsCacheApiMetrics::__set_p99_response_time_ms(const double val) {
  this->p99_response_time_ms = val;
__isset.p99_response_time_ms = true;
}

void TCatalogHmsCacheApiMetrics::__set_p95_response_time_ms(const double val) {
  this->p95_response_time_ms = val;
__isset.p95_response_time_ms = true;
}

void TCatalogHmsCacheApiMetrics::__set_response_time_mean_ms(const double val) {
  this->response_time_mean_ms = val;
__isset.response_time_mean_ms = true;
}

void TCatalogHmsCacheApiMetrics::__set_response_time_max_ms(const double val) {
  this->response_time_max_ms = val;
__isset.response_time_max_ms = true;
}

void TCatalogHmsCacheApiMetrics::__set_response_time_min_ms(const double val) {
  this->response_time_min_ms = val;
__isset.response_time_min_ms = true;
}

void TCatalogHmsCacheApiMetrics::__set_api_requests_1min_rate(const double val) {
  this->api_requests_1min_rate = val;
__isset.api_requests_1min_rate = true;
}

void TCatalogHmsCacheApiMetrics::__set_api_requests_5min_rate(const double val) {
  this->api_requests_5min_rate = val;
__isset.api_requests_5min_rate = true;
}

void TCatalogHmsCacheApiMetrics::__set_api_requests_15min_rate(const double val) {
  this->api_requests_15min_rate = val;
__isset.api_requests_15min_rate = true;
}

void TCatalogHmsCacheApiMetrics::__set_cache_hit_ratio(const double val) {
  this->cache_hit_ratio = val;
__isset.cache_hit_ratio = true;
}
std::ostream& operator<<(std::ostream& out, const TCatalogHmsCacheApiMetrics& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCatalogHmsCacheApiMetrics &a, TCatalogHmsCacheApiMetrics &b) {
  using ::std::swap;
  swap(a.api_name, b.api_name);
  swap(a.api_requests, b.api_requests);
  swap(a.p99_response_time_ms, b.p99_response_time_ms);
  swap(a.p95_response_time_ms, b.p95_response_time_ms);
  swap(a.response_time_mean_ms, b.response_time_mean_ms);
  swap(a.response_time_max_ms, b.response_time_max_ms);
  swap(a.response_time_min_ms, b.response_time_min_ms);
  swap(a.api_requests_1min_rate, b.api_requests_1min_rate);
  swap(a.api_requests_5min_rate, b.api_requests_5min_rate);
  swap(a.api_requests_15min_rate, b.api_requests_15min_rate);
  swap(a.cache_hit_ratio, b.cache_hit_ratio);
  swap(a.__isset, b.__isset);
}

TCatalogHmsCacheApiMetrics::TCatalogHmsCacheApiMetrics(const TCatalogHmsCacheApiMetrics& other489) {
  api_name = other489.api_name;
  api_requests = other489.api_requests;
  p99_response_time_ms = other489.p99_response_time_ms;
  p95_response_time_ms = other489.p95_response_time_ms;
  response_time_mean_ms = other489.response_time_mean_ms;
  response_time_max_ms = other489.response_time_max_ms;
  response_time_min_ms = other489.response_time_min_ms;
  api_requests_1min_rate = other489.api_requests_1min_rate;
  api_requests_5min_rate = other489.api_requests_5min_rate;
  api_requests_15min_rate = other489.api_requests_15min_rate;
  cache_hit_ratio = other489.cache_hit_ratio;
  __isset = other489.__isset;
}
TCatalogHmsCacheApiMetrics::TCatalogHmsCacheApiMetrics( TCatalogHmsCacheApiMetrics&& other490) {
  api_name = std::move(other490.api_name);
  api_requests = std::move(other490.api_requests);
  p99_response_time_ms = std::move(other490.p99_response_time_ms);
  p95_response_time_ms = std::move(other490.p95_response_time_ms);
  response_time_mean_ms = std::move(other490.response_time_mean_ms);
  response_time_max_ms = std::move(other490.response_time_max_ms);
  response_time_min_ms = std::move(other490.response_time_min_ms);
  api_requests_1min_rate = std::move(other490.api_requests_1min_rate);
  api_requests_5min_rate = std::move(other490.api_requests_5min_rate);
  api_requests_15min_rate = std::move(other490.api_requests_15min_rate);
  cache_hit_ratio = std::move(other490.cache_hit_ratio);
  __isset = std::move(other490.__isset);
}
TCatalogHmsCacheApiMetrics& TCatalogHmsCacheApiMetrics::operator=(const TCatalogHmsCacheApiMetrics& other491) {
  api_name = other491.api_name;
  api_requests = other491.api_requests;
  p99_response_time_ms = other491.p99_response_time_ms;
  p95_response_time_ms = other491.p95_response_time_ms;
  response_time_mean_ms = other491.response_time_mean_ms;
  response_time_max_ms = other491.response_time_max_ms;
  response_time_min_ms = other491.response_time_min_ms;
  api_requests_1min_rate = other491.api_requests_1min_rate;
  api_requests_5min_rate = other491.api_requests_5min_rate;
  api_requests_15min_rate = other491.api_requests_15min_rate;
  cache_hit_ratio = other491.cache_hit_ratio;
  __isset = other491.__isset;
  return *this;
}
TCatalogHmsCacheApiMetrics& TCatalogHmsCacheApiMetrics::operator=(TCatalogHmsCacheApiMetrics&& other492) {
  api_name = std::move(other492.api_name);
  api_requests = std::move(other492.api_requests);
  p99_response_time_ms = std::move(other492.p99_response_time_ms);
  p95_response_time_ms = std::move(other492.p95_response_time_ms);
  response_time_mean_ms = std::move(other492.response_time_mean_ms);
  response_time_max_ms = std::move(other492.response_time_max_ms);
  response_time_min_ms = std::move(other492.response_time_min_ms);
  api_requests_1min_rate = std::move(other492.api_requests_1min_rate);
  api_requests_5min_rate = std::move(other492.api_requests_5min_rate);
  api_requests_15min_rate = std::move(other492.api_requests_15min_rate);
  cache_hit_ratio = std::move(other492.cache_hit_ratio);
  __isset = std::move(other492.__isset);
  return *this;
}
void TCatalogHmsCacheApiMetrics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCatalogHmsCacheApiMetrics(";
  out << "api_name=" << to_string(api_name);
  out << ", " << "api_requests="; (__isset.api_requests ? (out << to_string(api_requests)) : (out << "<null>"));
  out << ", " << "p99_response_time_ms="; (__isset.p99_response_time_ms ? (out << to_string(p99_response_time_ms)) : (out << "<null>"));
  out << ", " << "p95_response_time_ms="; (__isset.p95_response_time_ms ? (out << to_string(p95_response_time_ms)) : (out << "<null>"));
  out << ", " << "response_time_mean_ms="; (__isset.response_time_mean_ms ? (out << to_string(response_time_mean_ms)) : (out << "<null>"));
  out << ", " << "response_time_max_ms="; (__isset.response_time_max_ms ? (out << to_string(response_time_max_ms)) : (out << "<null>"));
  out << ", " << "response_time_min_ms="; (__isset.response_time_min_ms ? (out << to_string(response_time_min_ms)) : (out << "<null>"));
  out << ", " << "api_requests_1min_rate="; (__isset.api_requests_1min_rate ? (out << to_string(api_requests_1min_rate)) : (out << "<null>"));
  out << ", " << "api_requests_5min_rate="; (__isset.api_requests_5min_rate ? (out << to_string(api_requests_5min_rate)) : (out << "<null>"));
  out << ", " << "api_requests_15min_rate="; (__isset.api_requests_15min_rate ? (out << to_string(api_requests_15min_rate)) : (out << "<null>"));
  out << ", " << "cache_hit_ratio="; (__isset.cache_hit_ratio ? (out << to_string(cache_hit_ratio)) : (out << "<null>"));
  out << ")";
}


TCatalogdHmsCacheMetrics::~TCatalogdHmsCacheMetrics() throw() {
}


void TCatalogdHmsCacheMetrics::__set_api_metrics(const std::vector<TCatalogHmsCacheApiMetrics> & val) {
  this->api_metrics = val;
}

void TCatalogdHmsCacheMetrics::__set_cache_hit_ratio(const double val) {
  this->cache_hit_ratio = val;
__isset.cache_hit_ratio = true;
}

void TCatalogdHmsCacheMetrics::__set_api_requests(const int64_t val) {
  this->api_requests = val;
__isset.api_requests = true;
}

void TCatalogdHmsCacheMetrics::__set_api_requests_1min_rate(const double val) {
  this->api_requests_1min_rate = val;
__isset.api_requests_1min_rate = true;
}

void TCatalogdHmsCacheMetrics::__set_api_requests_5min_rate(const double val) {
  this->api_requests_5min_rate = val;
__isset.api_requests_5min_rate = true;
}

void TCatalogdHmsCacheMetrics::__set_api_requests_15min_rate(const double val) {
  this->api_requests_15min_rate = val;
__isset.api_requests_15min_rate = true;
}
std::ostream& operator<<(std::ostream& out, const TCatalogdHmsCacheMetrics& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCatalogdHmsCacheMetrics &a, TCatalogdHmsCacheMetrics &b) {
  using ::std::swap;
  swap(a.api_metrics, b.api_metrics);
  swap(a.cache_hit_ratio, b.cache_hit_ratio);
  swap(a.api_requests, b.api_requests);
  swap(a.api_requests_1min_rate, b.api_requests_1min_rate);
  swap(a.api_requests_5min_rate, b.api_requests_5min_rate);
  swap(a.api_requests_15min_rate, b.api_requests_15min_rate);
  swap(a.__isset, b.__isset);
}

TCatalogdHmsCacheMetrics::TCatalogdHmsCacheMetrics(const TCatalogdHmsCacheMetrics& other499) {
  api_metrics = other499.api_metrics;
  cache_hit_ratio = other499.cache_hit_ratio;
  api_requests = other499.api_requests;
  api_requests_1min_rate = other499.api_requests_1min_rate;
  api_requests_5min_rate = other499.api_requests_5min_rate;
  api_requests_15min_rate = other499.api_requests_15min_rate;
  __isset = other499.__isset;
}
TCatalogdHmsCacheMetrics::TCatalogdHmsCacheMetrics( TCatalogdHmsCacheMetrics&& other500) {
  api_metrics = std::move(other500.api_metrics);
  cache_hit_ratio = std::move(other500.cache_hit_ratio);
  api_requests = std::move(other500.api_requests);
  api_requests_1min_rate = std::move(other500.api_requests_1min_rate);
  api_requests_5min_rate = std::move(other500.api_requests_5min_rate);
  api_requests_15min_rate = std::move(other500.api_requests_15min_rate);
  __isset = std::move(other500.__isset);
}
TCatalogdHmsCacheMetrics& TCatalogdHmsCacheMetrics::operator=(const TCatalogdHmsCacheMetrics& other501) {
  api_metrics = other501.api_metrics;
  cache_hit_ratio = other501.cache_hit_ratio;
  api_requests = other501.api_requests;
  api_requests_1min_rate = other501.api_requests_1min_rate;
  api_requests_5min_rate = other501.api_requests_5min_rate;
  api_requests_15min_rate = other501.api_requests_15min_rate;
  __isset = other501.__isset;
  return *this;
}
TCatalogdHmsCacheMetrics& TCatalogdHmsCacheMetrics::operator=(TCatalogdHmsCacheMetrics&& other502) {
  api_metrics = std::move(other502.api_metrics);
  cache_hit_ratio = std::move(other502.cache_hit_ratio);
  api_requests = std::move(other502.api_requests);
  api_requests_1min_rate = std::move(other502.api_requests_1min_rate);
  api_requests_5min_rate = std::move(other502.api_requests_5min_rate);
  api_requests_15min_rate = std::move(other502.api_requests_15min_rate);
  __isset = std::move(other502.__isset);
  return *this;
}
void TCatalogdHmsCacheMetrics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCatalogdHmsCacheMetrics(";
  out << "api_metrics=" << to_string(api_metrics);
  out << ", " << "cache_hit_ratio="; (__isset.cache_hit_ratio ? (out << to_string(cache_hit_ratio)) : (out << "<null>"));
  out << ", " << "api_requests="; (__isset.api_requests ? (out << to_string(api_requests)) : (out << "<null>"));
  out << ", " << "api_requests_1min_rate="; (__isset.api_requests_1min_rate ? (out << to_string(api_requests_1min_rate)) : (out << "<null>"));
  out << ", " << "api_requests_5min_rate="; (__isset.api_requests_5min_rate ? (out << to_string(api_requests_5min_rate)) : (out << "<null>"));
  out << ", " << "api_requests_15min_rate="; (__isset.api_requests_15min_rate ? (out << to_string(api_requests_15min_rate)) : (out << "<null>"));
  out << ")";
}


TGetCatalogServerMetricsResponse::~TGetCatalogServerMetricsResponse() throw() {
}


void TGetCatalogServerMetricsResponse::__set_catalog_partial_fetch_rpc_queue_len(const int32_t val) {
  this->catalog_partial_fetch_rpc_queue_len = val;
}

void TGetCatalogServerMetricsResponse::__set_event_metrics(const TEventProcessorMetrics& val) {
  this->event_metrics = val;
__isset.event_metrics = true;
}

void TGetCatalogServerMetricsResponse::__set_catalogd_hms_cache_metrics(const TCatalogdHmsCacheMetrics& val) {
  this->catalogd_hms_cache_metrics = val;
__isset.catalogd_hms_cache_metrics = true;
}
std::ostream& operator<<(std::ostream& out, const TGetCatalogServerMetricsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetCatalogServerMetricsResponse &a, TGetCatalogServerMetricsResponse &b) {
  using ::std::swap;
  swap(a.catalog_partial_fetch_rpc_queue_len, b.catalog_partial_fetch_rpc_queue_len);
  swap(a.event_metrics, b.event_metrics);
  swap(a.catalogd_hms_cache_metrics, b.catalogd_hms_cache_metrics);
  swap(a.__isset, b.__isset);
}

TGetCatalogServerMetricsResponse::TGetCatalogServerMetricsResponse(const TGetCatalogServerMetricsResponse& other503) {
  catalog_partial_fetch_rpc_queue_len = other503.catalog_partial_fetch_rpc_queue_len;
  event_metrics = other503.event_metrics;
  catalogd_hms_cache_metrics = other503.catalogd_hms_cache_metrics;
  __isset = other503.__isset;
}
TGetCatalogServerMetricsResponse::TGetCatalogServerMetricsResponse( TGetCatalogServerMetricsResponse&& other504) {
  catalog_partial_fetch_rpc_queue_len = std::move(other504.catalog_partial_fetch_rpc_queue_len);
  event_metrics = std::move(other504.event_metrics);
  catalogd_hms_cache_metrics = std::move(other504.catalogd_hms_cache_metrics);
  __isset = std::move(other504.__isset);
}
TGetCatalogServerMetricsResponse& TGetCatalogServerMetricsResponse::operator=(const TGetCatalogServerMetricsResponse& other505) {
  catalog_partial_fetch_rpc_queue_len = other505.catalog_partial_fetch_rpc_queue_len;
  event_metrics = other505.event_metrics;
  catalogd_hms_cache_metrics = other505.catalogd_hms_cache_metrics;
  __isset = other505.__isset;
  return *this;
}
TGetCatalogServerMetricsResponse& TGetCatalogServerMetricsResponse::operator=(TGetCatalogServerMetricsResponse&& other506) {
  catalog_partial_fetch_rpc_queue_len = std::move(other506.catalog_partial_fetch_rpc_queue_len);
  event_metrics = std::move(other506.event_metrics);
  catalogd_hms_cache_metrics = std::move(other506.catalogd_hms_cache_metrics);
  __isset = std::move(other506.__isset);
  return *this;
}
void TGetCatalogServerMetricsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetCatalogServerMetricsResponse(";
  out << "catalog_partial_fetch_rpc_queue_len=" << to_string(catalog_partial_fetch_rpc_queue_len);
  out << ", " << "event_metrics="; (__isset.event_metrics ? (out << to_string(event_metrics)) : (out << "<null>"));
  out << ", " << "catalogd_hms_cache_metrics="; (__isset.catalogd_hms_cache_metrics ? (out << to_string(catalogd_hms_cache_metrics)) : (out << "<null>"));
  out << ")";
}


TCopyTestCaseReq::~TCopyTestCaseReq() throw() {
}


void TCopyTestCaseReq::__set_input_path(const std::string& val) {
  this->input_path = val;
}
std::ostream& operator<<(std::ostream& out, const TCopyTestCaseReq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCopyTestCaseReq &a, TCopyTestCaseReq &b) {
  using ::std::swap;
  swap(a.input_path, b.input_path);
}

TCopyTestCaseReq::TCopyTestCaseReq(const TCopyTestCaseReq& other507) {
  input_path = other507.input_path;
}
TCopyTestCaseReq::TCopyTestCaseReq( TCopyTestCaseReq&& other508) {
  input_path = std::move(other508.input_path);
}
TCopyTestCaseReq& TCopyTestCaseReq::operator=(const TCopyTestCaseReq& other509) {
  input_path = other509.input_path;
  return *this;
}
TCopyTestCaseReq& TCopyTestCaseReq::operator=(TCopyTestCaseReq&& other510) {
  input_path = std::move(other510.input_path);
  return *this;
}
void TCopyTestCaseReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCopyTestCaseReq(";
  out << "input_path=" << to_string(input_path);
  out << ")";
}


TEventProcessorMetricsSummaryResponse::~TEventProcessorMetricsSummaryResponse() throw() {
}


void TEventProcessorMetricsSummaryResponse::__set_summary(const std::string& val) {
  this->summary = val;
}
std::ostream& operator<<(std::ostream& out, const TEventProcessorMetricsSummaryResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TEventProcessorMetricsSummaryResponse &a, TEventProcessorMetricsSummaryResponse &b) {
  using ::std::swap;
  swap(a.summary, b.summary);
}

TEventProcessorMetricsSummaryResponse::TEventProcessorMetricsSummaryResponse(const TEventProcessorMetricsSummaryResponse& other511) {
  summary = other511.summary;
}
TEventProcessorMetricsSummaryResponse::TEventProcessorMetricsSummaryResponse( TEventProcessorMetricsSummaryResponse&& other512) {
  summary = std::move(other512.summary);
}
TEventProcessorMetricsSummaryResponse& TEventProcessorMetricsSummaryResponse::operator=(const TEventProcessorMetricsSummaryResponse& other513) {
  summary = other513.summary;
  return *this;
}
TEventProcessorMetricsSummaryResponse& TEventProcessorMetricsSummaryResponse::operator=(TEventProcessorMetricsSummaryResponse&& other514) {
  summary = std::move(other514.summary);
  return *this;
}
void TEventProcessorMetricsSummaryResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TEventProcessorMetricsSummaryResponse(";
  out << "summary=" << to_string(summary);
  out << ")";
}

} // namespace
