/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BackendGflags_TYPES_H
#define BackendGflags_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace impala {

struct TReservedWordsVersion {
  enum type {
    IMPALA_2_11 = 0,
    IMPALA_3_0 = 1
  };
};

extern const std::map<int, const char*> _TReservedWordsVersion_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TReservedWordsVersion::type& val);

class TBackendGflags;


class TBackendGflags {
 public:

  TBackendGflags(const TBackendGflags&);
  TBackendGflags(TBackendGflags&&);
  TBackendGflags& operator=(const TBackendGflags&);
  TBackendGflags& operator=(TBackendGflags&&);
  TBackendGflags() : load_auth_to_local_rules(0), non_impala_java_vlog(0), impala_log_lvl(0), inc_stats_size_limit_bytes(0), lineage_event_log_dir(), load_catalog_in_background(0), num_metadata_loading_threads(0), principal(), server_name(), kudu_master_hosts(), local_library_path(), read_size(0), kudu_operation_timeout_ms(0), initial_hms_cnxn_timeout_s(0), enable_stats_extrapolation(0), max_hdfs_partitions_parallel_load(0), max_nonhdfs_partitions_parallel_load(0), reserved_words_version((TReservedWordsVersion::type)0), max_filter_error_rate(0), min_buffer_size(0), enable_orc_scanner(0), authorized_proxy_group_config(), use_local_catalog(0), disable_catalog_data_ops_debug_only(0), local_catalog_cache_mb(0), local_catalog_cache_expiration_s(0), catalog_topic_mode(), invalidate_tables_timeout_s(0), invalidate_tables_on_memory_pressure(0), invalidate_tables_gc_old_gen_full_threshold(0), invalidate_tables_fraction_on_memory_pressure(0), local_catalog_max_fetch_retries(0), kudu_scanner_thread_estimated_bytes_per_column(0), kudu_scanner_thread_max_estimated_bytes(0), catalog_max_parallel_partial_fetch_rpc(0), catalog_partial_fetch_rpc_queue_timeout_s(0), exchg_node_buffer_size_bytes(0), kudu_mutation_buffer_size(0), kudu_error_buffer_size(0), hms_event_polling_interval_s(0), impala_build_version(), authorization_factory_class(), ranger_service_type(), ranger_app_id(), authorization_provider(), recursively_list_partitions(0), query_event_hook_classes(), query_event_hook_nthreads(0), is_executor(0), is_coordinator(0), use_dedicated_coordinator_estimates(0), blacklisted_dbs(), blacklisted_tables(), unlock_zorder_sort(0), min_privilege_set_for_show_stmts(), num_expected_executors(0), num_check_authorization_threads(0), use_customized_user_groups_mapper_for_ranger(0), enable_column_masking(0), enable_insert_events(0), compact_catalog_topic(0), enable_incremental_metadata_updates(0), topic_update_tbl_max_wait_time_ms(0), catalog_max_lock_skipped_topic_updates(0), saml2_keystore_path(), saml2_keystore_password(), saml2_private_key_password(), saml2_idp_metadata(), saml2_sp_entity_id(), saml2_sp_callback_url(), saml2_want_assertations_signed(0), saml2_sign_requests(0), saml2_callback_token_ttl(0), saml2_group_attribute_name(), saml2_group_filter(), saml2_ee_test_mode(0), scratch_dirs(), enable_row_filtering(0), max_wait_time_for_sync_ddl_s(0), allow_ordinals_in_having(0), start_hms_server(0), hms_port(0), fallback_to_hms_on_errors(0), enable_catalogd_hms_cache(0), kudu_sasl_protocol_name(), warn_catalog_response_size_mb(0), warn_catalog_response_duration_s(0), invalidate_hms_cache_on_ddls(0), startup_filesystem_check_directories(), hms_event_incremental_refresh_transactional_table(0), enable_shell_based_groups_mapping_support(0), auto_check_compaction(0) {
  }

  virtual ~TBackendGflags() throw();
  bool load_auth_to_local_rules;
  int32_t non_impala_java_vlog;
  int32_t impala_log_lvl;
  int64_t inc_stats_size_limit_bytes;
  std::string lineage_event_log_dir;
  bool load_catalog_in_background;
  int32_t num_metadata_loading_threads;
  std::string principal;
  std::string server_name;
  std::string kudu_master_hosts;
  std::string local_library_path;
  int32_t read_size;
  int32_t kudu_operation_timeout_ms;
  int32_t initial_hms_cnxn_timeout_s;
  bool enable_stats_extrapolation;
  int32_t max_hdfs_partitions_parallel_load;
  int32_t max_nonhdfs_partitions_parallel_load;
  TReservedWordsVersion::type reserved_words_version;
  double max_filter_error_rate;
  int64_t min_buffer_size;
  bool enable_orc_scanner;
  std::string authorized_proxy_group_config;
  bool use_local_catalog;
  bool disable_catalog_data_ops_debug_only;
  int32_t local_catalog_cache_mb;
  int32_t local_catalog_cache_expiration_s;
  std::string catalog_topic_mode;
  int32_t invalidate_tables_timeout_s;
  bool invalidate_tables_on_memory_pressure;
  double invalidate_tables_gc_old_gen_full_threshold;
  double invalidate_tables_fraction_on_memory_pressure;
  int32_t local_catalog_max_fetch_retries;
  int64_t kudu_scanner_thread_estimated_bytes_per_column;
  int64_t kudu_scanner_thread_max_estimated_bytes;
  int32_t catalog_max_parallel_partial_fetch_rpc;
  int64_t catalog_partial_fetch_rpc_queue_timeout_s;
  int64_t exchg_node_buffer_size_bytes;
  int32_t kudu_mutation_buffer_size;
  int32_t kudu_error_buffer_size;
  int32_t hms_event_polling_interval_s;
  std::string impala_build_version;
  std::string authorization_factory_class;
  std::string ranger_service_type;
  std::string ranger_app_id;
  std::string authorization_provider;
  bool recursively_list_partitions;
  std::string query_event_hook_classes;
  int32_t query_event_hook_nthreads;
  bool is_executor;
  bool is_coordinator;
  bool use_dedicated_coordinator_estimates;
  std::string blacklisted_dbs;
  std::string blacklisted_tables;
  bool unlock_zorder_sort;
  std::string min_privilege_set_for_show_stmts;
  int32_t num_expected_executors;
  int32_t num_check_authorization_threads;
  bool use_customized_user_groups_mapper_for_ranger;
  bool enable_column_masking;
  bool enable_insert_events;
  bool compact_catalog_topic;
  bool enable_incremental_metadata_updates;
  int64_t topic_update_tbl_max_wait_time_ms;
  int32_t catalog_max_lock_skipped_topic_updates;
  std::string saml2_keystore_path;
  std::string saml2_keystore_password;
  std::string saml2_private_key_password;
  std::string saml2_idp_metadata;
  std::string saml2_sp_entity_id;
  std::string saml2_sp_callback_url;
  bool saml2_want_assertations_signed;
  bool saml2_sign_requests;
  int32_t saml2_callback_token_ttl;
  std::string saml2_group_attribute_name;
  std::string saml2_group_filter;
  bool saml2_ee_test_mode;
  std::string scratch_dirs;
  bool enable_row_filtering;
  int32_t max_wait_time_for_sync_ddl_s;
  bool allow_ordinals_in_having;
  bool start_hms_server;
  int32_t hms_port;
  bool fallback_to_hms_on_errors;
  bool enable_catalogd_hms_cache;
  std::string kudu_sasl_protocol_name;
  int32_t warn_catalog_response_size_mb;
  int32_t warn_catalog_response_duration_s;
  bool invalidate_hms_cache_on_ddls;
  std::string startup_filesystem_check_directories;
  bool hms_event_incremental_refresh_transactional_table;
  bool enable_shell_based_groups_mapping_support;
  bool auto_check_compaction;

  void __set_load_auth_to_local_rules(const bool val);

  void __set_non_impala_java_vlog(const int32_t val);

  void __set_impala_log_lvl(const int32_t val);

  void __set_inc_stats_size_limit_bytes(const int64_t val);

  void __set_lineage_event_log_dir(const std::string& val);

  void __set_load_catalog_in_background(const bool val);

  void __set_num_metadata_loading_threads(const int32_t val);

  void __set_principal(const std::string& val);

  void __set_server_name(const std::string& val);

  void __set_kudu_master_hosts(const std::string& val);

  void __set_local_library_path(const std::string& val);

  void __set_read_size(const int32_t val);

  void __set_kudu_operation_timeout_ms(const int32_t val);

  void __set_initial_hms_cnxn_timeout_s(const int32_t val);

  void __set_enable_stats_extrapolation(const bool val);

  void __set_max_hdfs_partitions_parallel_load(const int32_t val);

  void __set_max_nonhdfs_partitions_parallel_load(const int32_t val);

  void __set_reserved_words_version(const TReservedWordsVersion::type val);

  void __set_max_filter_error_rate(const double val);

  void __set_min_buffer_size(const int64_t val);

  void __set_enable_orc_scanner(const bool val);

  void __set_authorized_proxy_group_config(const std::string& val);

  void __set_use_local_catalog(const bool val);

  void __set_disable_catalog_data_ops_debug_only(const bool val);

  void __set_local_catalog_cache_mb(const int32_t val);

  void __set_local_catalog_cache_expiration_s(const int32_t val);

  void __set_catalog_topic_mode(const std::string& val);

  void __set_invalidate_tables_timeout_s(const int32_t val);

  void __set_invalidate_tables_on_memory_pressure(const bool val);

  void __set_invalidate_tables_gc_old_gen_full_threshold(const double val);

  void __set_invalidate_tables_fraction_on_memory_pressure(const double val);

  void __set_local_catalog_max_fetch_retries(const int32_t val);

  void __set_kudu_scanner_thread_estimated_bytes_per_column(const int64_t val);

  void __set_kudu_scanner_thread_max_estimated_bytes(const int64_t val);

  void __set_catalog_max_parallel_partial_fetch_rpc(const int32_t val);

  void __set_catalog_partial_fetch_rpc_queue_timeout_s(const int64_t val);

  void __set_exchg_node_buffer_size_bytes(const int64_t val);

  void __set_kudu_mutation_buffer_size(const int32_t val);

  void __set_kudu_error_buffer_size(const int32_t val);

  void __set_hms_event_polling_interval_s(const int32_t val);

  void __set_impala_build_version(const std::string& val);

  void __set_authorization_factory_class(const std::string& val);

  void __set_ranger_service_type(const std::string& val);

  void __set_ranger_app_id(const std::string& val);

  void __set_authorization_provider(const std::string& val);

  void __set_recursively_list_partitions(const bool val);

  void __set_query_event_hook_classes(const std::string& val);

  void __set_query_event_hook_nthreads(const int32_t val);

  void __set_is_executor(const bool val);

  void __set_is_coordinator(const bool val);

  void __set_use_dedicated_coordinator_estimates(const bool val);

  void __set_blacklisted_dbs(const std::string& val);

  void __set_blacklisted_tables(const std::string& val);

  void __set_unlock_zorder_sort(const bool val);

  void __set_min_privilege_set_for_show_stmts(const std::string& val);

  void __set_num_expected_executors(const int32_t val);

  void __set_num_check_authorization_threads(const int32_t val);

  void __set_use_customized_user_groups_mapper_for_ranger(const bool val);

  void __set_enable_column_masking(const bool val);

  void __set_enable_insert_events(const bool val);

  void __set_compact_catalog_topic(const bool val);

  void __set_enable_incremental_metadata_updates(const bool val);

  void __set_topic_update_tbl_max_wait_time_ms(const int64_t val);

  void __set_catalog_max_lock_skipped_topic_updates(const int32_t val);

  void __set_saml2_keystore_path(const std::string& val);

  void __set_saml2_keystore_password(const std::string& val);

  void __set_saml2_private_key_password(const std::string& val);

  void __set_saml2_idp_metadata(const std::string& val);

  void __set_saml2_sp_entity_id(const std::string& val);

  void __set_saml2_sp_callback_url(const std::string& val);

  void __set_saml2_want_assertations_signed(const bool val);

  void __set_saml2_sign_requests(const bool val);

  void __set_saml2_callback_token_ttl(const int32_t val);

  void __set_saml2_group_attribute_name(const std::string& val);

  void __set_saml2_group_filter(const std::string& val);

  void __set_saml2_ee_test_mode(const bool val);

  void __set_scratch_dirs(const std::string& val);

  void __set_enable_row_filtering(const bool val);

  void __set_max_wait_time_for_sync_ddl_s(const int32_t val);

  void __set_allow_ordinals_in_having(const bool val);

  void __set_start_hms_server(const bool val);

  void __set_hms_port(const int32_t val);

  void __set_fallback_to_hms_on_errors(const bool val);

  void __set_enable_catalogd_hms_cache(const bool val);

  void __set_kudu_sasl_protocol_name(const std::string& val);

  void __set_warn_catalog_response_size_mb(const int32_t val);

  void __set_warn_catalog_response_duration_s(const int32_t val);

  void __set_invalidate_hms_cache_on_ddls(const bool val);

  void __set_startup_filesystem_check_directories(const std::string& val);

  void __set_hms_event_incremental_refresh_transactional_table(const bool val);

  void __set_enable_shell_based_groups_mapping_support(const bool val);

  void __set_auto_check_compaction(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TBackendGflags &a, TBackendGflags &b);

std::ostream& operator<<(std::ostream& out, const TBackendGflags& obj);

} // namespace

#include "BackendGflags_types.tcc"

#endif
