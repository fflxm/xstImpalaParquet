/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MetricDefs_constants.h"

namespace impala {

const MetricDefsConstants g_MetricDefs_constants;

MetricDefsConstants::MetricDefsConstants() {
  TMetricDef tmp12;
  std::vector<std::string>  tmp13;
  tmp13.push_back("RESOURCE_POOL");

  tmp12.contexts = tmp13;
  tmp12.__isset.contexts = true;
  tmp12.description = "Resource Pool $0 Aggregate Mem Reserved";
  tmp12.__isset.description = true;
  tmp12.key = "admission-controller.agg-mem-reserved.$0";
  tmp12.__isset.key = true;
  tmp12.kind = ( ::impala::TMetricKind::type)0;
  tmp12.__isset.kind = true;
  tmp12.label = "Resource Pool $0 Aggregate Mem Reserved";
  tmp12.__isset.label = true;
  tmp12.units = ( ::impala::TUnit::type)7;
  tmp12.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.agg-mem-reserved.$0", tmp12));
  TMetricDef tmp14;
  std::vector<std::string>  tmp15;
  tmp15.push_back("RESOURCE_POOL");

  tmp14.contexts = tmp15;
  tmp14.__isset.contexts = true;
  tmp14.description = "Resource Pool $0 Aggregate Queue Size";
  tmp14.__isset.description = true;
  tmp14.key = "admission-controller.agg-num-queued.$0";
  tmp14.__isset.key = true;
  tmp14.kind = ( ::impala::TMetricKind::type)0;
  tmp14.__isset.kind = true;
  tmp14.label = "Resource Pool $0 Aggregate Queue Size";
  tmp14.__isset.label = true;
  tmp14.units = ( ::impala::TUnit::type)7;
  tmp14.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.agg-num-queued.$0", tmp14));
  TMetricDef tmp16;
  tmp16.description = "Resource Pool $0 Aggregate Num Running";
  tmp16.__isset.description = true;
  tmp16.key = "admission-controller.agg-num-running.$0";
  tmp16.__isset.key = true;
  tmp16.kind = ( ::impala::TMetricKind::type)0;
  tmp16.__isset.kind = true;
  std::vector<std::string>  tmp17;
  tmp17.push_back("RESOURCE_POOL");

  tmp16.contexts = tmp17;
  tmp16.__isset.contexts = true;
  tmp16.label = "Resource Pool $0 Aggregate Num Running";
  tmp16.__isset.label = true;
  tmp16.units = ( ::impala::TUnit::type)7;
  tmp16.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.agg-num-running.$0", tmp16));
  TMetricDef tmp18;
  std::vector<std::string>  tmp19;
  tmp19.push_back("IMPALAD");

  tmp18.contexts = tmp19;
  tmp18.__isset.contexts = true;
  tmp18.description = "Total number of queries admitted on this coordinator running on executor group: $0";
  tmp18.__isset.description = true;
  tmp18.key = "admission-controller.executor-group.num-queries-executing.$0";
  tmp18.__isset.key = true;
  tmp18.kind = ( ::impala::TMetricKind::type)0;
  tmp18.__isset.kind = true;
  tmp18.label = "Total number of queries admitted on this coordinator running on executor group: $0";
  tmp18.__isset.label = true;
  tmp18.units = ( ::impala::TUnit::type)0;
  tmp18.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.executor-group.num-queries-executing.$0", tmp18));
  TMetricDef tmp20;
  std::vector<std::string>  tmp21;
  tmp21.push_back("RESOURCE_POOL");

  tmp20.contexts = tmp21;
  tmp20.__isset.contexts = true;
  tmp20.description = "Resource Pool $0 Mem Reserved by the backend coordinator";
  tmp20.__isset.description = true;
  tmp20.key = "admission-controller.local-backend-mem-reserved.$0";
  tmp20.__isset.key = true;
  tmp20.kind = ( ::impala::TMetricKind::type)0;
  tmp20.__isset.kind = true;
  tmp20.label = "Resource Pool $0 Coordinator Backend Mem Reserved";
  tmp20.__isset.label = true;
  tmp20.units = ( ::impala::TUnit::type)7;
  tmp20.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.local-backend-mem-reserved.$0", tmp20));
  TMetricDef tmp22;
  std::vector<std::string>  tmp23;
  tmp23.push_back("RESOURCE_POOL");

  tmp22.contexts = tmp23;
  tmp22.__isset.contexts = true;
  tmp22.description = "Resource Pool $0 Coordinator Backend Mem Usage";
  tmp22.__isset.description = true;
  tmp22.key = "admission-controller.local-backend-mem-usage.$0";
  tmp22.__isset.key = true;
  tmp22.kind = ( ::impala::TMetricKind::type)0;
  tmp22.__isset.kind = true;
  tmp22.label = "Resource Pool $0 Coordinator Backend Mem Usage";
  tmp22.__isset.label = true;
  tmp22.units = ( ::impala::TUnit::type)7;
  tmp22.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.local-backend-mem-usage.$0", tmp22));
  TMetricDef tmp24;
  std::vector<std::string>  tmp25;
  tmp25.push_back("RESOURCE_POOL");

  tmp24.contexts = tmp25;
  tmp24.__isset.contexts = true;
  tmp24.description = "Resource Pool $0 Local Mem Admitted";
  tmp24.__isset.description = true;
  tmp24.key = "admission-controller.local-mem-admitted.$0";
  tmp24.__isset.key = true;
  tmp24.kind = ( ::impala::TMetricKind::type)0;
  tmp24.__isset.kind = true;
  tmp24.label = "Resource Pool $0 Local Mem Admitted";
  tmp24.__isset.label = true;
  tmp24.units = ( ::impala::TUnit::type)7;
  tmp24.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.local-mem-admitted.$0", tmp24));
  TMetricDef tmp26;
  std::vector<std::string>  tmp27;
  tmp27.push_back("RESOURCE_POOL");

  tmp26.contexts = tmp27;
  tmp26.__isset.contexts = true;
  tmp26.description = "Resource Pool $0 Coordinator Backend Num Running";
  tmp26.__isset.description = true;
  tmp26.key = "admission-controller.local-num-admitted-running.$0";
  tmp26.__isset.key = true;
  tmp26.kind = ( ::impala::TMetricKind::type)0;
  tmp26.__isset.kind = true;
  tmp26.label = "Resource Pool $0 Coordinator Backend Num Running";
  tmp26.__isset.label = true;
  tmp26.units = ( ::impala::TUnit::type)7;
  tmp26.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.local-num-admitted-running.$0", tmp26));
  TMetricDef tmp28;
  std::vector<std::string>  tmp29;
  tmp29.push_back("RESOURCE_POOL");

  tmp28.contexts = tmp29;
  tmp28.__isset.contexts = true;
  tmp28.description = "Resource Pool $0 Queue Size on the coordinator";
  tmp28.__isset.description = true;
  tmp28.key = "admission-controller.local-num-queued.$0";
  tmp28.__isset.key = true;
  tmp28.kind = ( ::impala::TMetricKind::type)0;
  tmp28.__isset.kind = true;
  tmp28.label = "Resource Pool $0 Coordinator Backend Queue Size";
  tmp28.__isset.label = true;
  tmp28.units = ( ::impala::TUnit::type)7;
  tmp28.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.local-num-queued.$0", tmp28));
  TMetricDef tmp30;
  std::vector<std::string>  tmp31;
  tmp31.push_back("RESOURCE_POOL");

  tmp30.contexts = tmp31;
  tmp30.__isset.contexts = true;
  tmp30.description = "If false, the mem_limit query option will not be bounded by the max/min query mem limits specified for the pool";
  tmp30.__isset.description = true;
  tmp30.key = "admission-controller.pool-clamp-mem-limit-query-option.$0";
  tmp30.__isset.key = true;
  tmp30.kind = ( ::impala::TMetricKind::type)2;
  tmp30.__isset.kind = true;
  tmp30.label = "Resource Pool $0 Clamp 'MEM_LIMIT' Query Option Flag";
  tmp30.__isset.label = true;
  tmp30.units = ( ::impala::TUnit::type)7;
  tmp30.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.pool-clamp-mem-limit-query-option.$0", tmp30));
  TMetricDef tmp32;
  std::vector<std::string>  tmp33;
  tmp33.push_back("RESOURCE_POOL");

  tmp32.contexts = tmp33;
  tmp32.__isset.contexts = true;
  tmp32.description = "Resource Pool $0 Configured Max Mem Resources";
  tmp32.__isset.description = true;
  tmp32.key = "admission-controller.pool-max-mem-resources.$0";
  tmp32.__isset.key = true;
  tmp32.kind = ( ::impala::TMetricKind::type)0;
  tmp32.__isset.kind = true;
  tmp32.label = "Resource Pool $0 Configured Max Mem Resources";
  tmp32.__isset.label = true;
  tmp32.units = ( ::impala::TUnit::type)7;
  tmp32.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.pool-max-mem-resources.$0", tmp32));
  TMetricDef tmp34;
  std::vector<std::string>  tmp35;
  tmp35.push_back("RESOURCE_POOL");

  tmp34.contexts = tmp35;
  tmp34.__isset.contexts = true;
  tmp34.description = "Resource Pool $0 Max Query Memory Limit";
  tmp34.__isset.description = true;
  tmp34.key = "admission-controller.pool-max-query-mem-limit.$0";
  tmp34.__isset.key = true;
  tmp34.kind = ( ::impala::TMetricKind::type)0;
  tmp34.__isset.kind = true;
  tmp34.label = "Resource Pool $0 Max Query Memory Limit";
  tmp34.__isset.label = true;
  tmp34.units = ( ::impala::TUnit::type)3;
  tmp34.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.pool-max-query-mem-limit.$0", tmp34));
  TMetricDef tmp36;
  std::vector<std::string>  tmp37;
  tmp37.push_back("RESOURCE_POOL");

  tmp36.contexts = tmp37;
  tmp36.__isset.contexts = true;
  tmp36.description = "Resource Pool $0 Configured Max Queued";
  tmp36.__isset.description = true;
  tmp36.key = "admission-controller.pool-max-queued.$0";
  tmp36.__isset.key = true;
  tmp36.kind = ( ::impala::TMetricKind::type)0;
  tmp36.__isset.kind = true;
  tmp36.label = "Resource Pool $0 Configured Max Queued";
  tmp36.__isset.label = true;
  tmp36.units = ( ::impala::TUnit::type)7;
  tmp36.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.pool-max-queued.$0", tmp36));
  TMetricDef tmp38;
  std::vector<std::string>  tmp39;
  tmp39.push_back("RESOURCE_POOL");

  tmp38.contexts = tmp39;
  tmp38.__isset.contexts = true;
  tmp38.description = "Resource Pool $0 Configured Max Requests";
  tmp38.__isset.description = true;
  tmp38.key = "admission-controller.pool-max-requests.$0";
  tmp38.__isset.key = true;
  tmp38.kind = ( ::impala::TMetricKind::type)0;
  tmp38.__isset.kind = true;
  tmp38.label = "Resource Pool $0 Configured Max Requests";
  tmp38.__isset.label = true;
  tmp38.units = ( ::impala::TUnit::type)7;
  tmp38.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.pool-max-requests.$0", tmp38));
  TMetricDef tmp40;
  std::vector<std::string>  tmp41;
  tmp41.push_back("RESOURCE_POOL");

  tmp40.contexts = tmp41;
  tmp40.__isset.contexts = true;
  tmp40.description = "Resource Pool $0 Min Query Memory Limit";
  tmp40.__isset.description = true;
  tmp40.key = "admission-controller.pool-min-query-mem-limit.$0";
  tmp40.__isset.key = true;
  tmp40.kind = ( ::impala::TMetricKind::type)0;
  tmp40.__isset.kind = true;
  tmp40.label = "Resource Pool $0 Min Query Memory Limit";
  tmp40.__isset.label = true;
  tmp40.units = ( ::impala::TUnit::type)3;
  tmp40.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.pool-min-query-mem-limit.$0", tmp40));
  TMetricDef tmp42;
  std::vector<std::string>  tmp43;
  tmp43.push_back("RESOURCE_POOL");

  tmp42.contexts = tmp43;
  tmp42.__isset.contexts = true;
  tmp42.description = "Resource Pool $0 Queue Timeout";
  tmp42.__isset.description = true;
  tmp42.key = "admission-controller.pool-queue-timeout.$0";
  tmp42.__isset.key = true;
  tmp42.kind = ( ::impala::TMetricKind::type)0;
  tmp42.__isset.kind = true;
  tmp42.label = "Resource Pool $0 Queue Timeout";
  tmp42.__isset.label = true;
  tmp42.units = ( ::impala::TUnit::type)8;
  tmp42.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.pool-queue-timeout.$0", tmp42));
  TMetricDef tmp44;
  std::vector<std::string>  tmp45;
  tmp45.push_back("RESOURCE_POOL");

  tmp44.contexts = tmp45;
  tmp44.__isset.contexts = true;
  tmp44.description = "Resource Pool $0 Time in Queue";
  tmp44.__isset.description = true;
  tmp44.key = "admission-controller.time-in-queue-ms.$0";
  tmp44.__isset.key = true;
  tmp44.kind = ( ::impala::TMetricKind::type)1;
  tmp44.__isset.kind = true;
  tmp44.label = "Resource Pool $0 Time in Queue";
  tmp44.__isset.label = true;
  tmp44.units = ( ::impala::TUnit::type)8;
  tmp44.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.time-in-queue-ms.$0", tmp44));
  TMetricDef tmp46;
  std::vector<std::string>  tmp47;
  tmp47.push_back("RESOURCE_POOL");

  tmp46.contexts = tmp47;
  tmp46.__isset.contexts = true;
  tmp46.description = "Total number of requests admitted to pool $0";
  tmp46.__isset.description = true;
  tmp46.key = "admission-controller.total-admitted.$0";
  tmp46.__isset.key = true;
  tmp46.kind = ( ::impala::TMetricKind::type)1;
  tmp46.__isset.kind = true;
  tmp46.label = "Resource Pool $0 Total Admitted";
  tmp46.__isset.label = true;
  tmp46.units = ( ::impala::TUnit::type)0;
  tmp46.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.total-admitted.$0", tmp46));
  TMetricDef tmp48;
  std::vector<std::string>  tmp49;
  tmp49.push_back("IMPALAD");

  tmp48.contexts = tmp49;
  tmp48.__isset.contexts = true;
  tmp48.description = "The number of times queries cannot be dequeued because of a resource limit on the coordinator.";
  tmp48.__isset.description = true;
  tmp48.key = "admission-controller.total-dequeue-failed-coordinator-limited";
  tmp48.__isset.key = true;
  tmp48.kind = ( ::impala::TMetricKind::type)1;
  tmp48.__isset.kind = true;
  tmp48.label = "Query dequeue failed because of a coordinator resource limit";
  tmp48.__isset.label = true;
  tmp48.units = ( ::impala::TUnit::type)7;
  tmp48.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.total-dequeue-failed-coordinator-limited", tmp48));
  TMetricDef tmp50;
  std::vector<std::string>  tmp51;
  tmp51.push_back("RESOURCE_POOL");

  tmp50.contexts = tmp51;
  tmp50.__isset.contexts = true;
  tmp50.description = "Total number of requests dequeued in pool $0";
  tmp50.__isset.description = true;
  tmp50.key = "admission-controller.total-dequeued.$0";
  tmp50.__isset.key = true;
  tmp50.kind = ( ::impala::TMetricKind::type)1;
  tmp50.__isset.kind = true;
  tmp50.label = "Resource Pool $0 Total Dequeued";
  tmp50.__isset.label = true;
  tmp50.units = ( ::impala::TUnit::type)0;
  tmp50.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.total-dequeued.$0", tmp50));
  TMetricDef tmp52;
  std::vector<std::string>  tmp53;
  tmp53.push_back("RESOURCE_POOL");

  tmp52.contexts = tmp53;
  tmp52.__isset.contexts = true;
  tmp52.description = "Total number of requests queued in pool $0";
  tmp52.__isset.description = true;
  tmp52.key = "admission-controller.total-queued.$0";
  tmp52.__isset.key = true;
  tmp52.kind = ( ::impala::TMetricKind::type)1;
  tmp52.__isset.kind = true;
  tmp52.label = "Resource Pool $0 Total Queued";
  tmp52.__isset.label = true;
  tmp52.units = ( ::impala::TUnit::type)0;
  tmp52.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.total-queued.$0", tmp52));
  TMetricDef tmp54;
  std::vector<std::string>  tmp55;
  tmp55.push_back("RESOURCE_POOL");

  tmp54.contexts = tmp55;
  tmp54.__isset.contexts = true;
  tmp54.description = "Total number of requests rejected in pool $0";
  tmp54.__isset.description = true;
  tmp54.key = "admission-controller.total-rejected.$0";
  tmp54.__isset.key = true;
  tmp54.kind = ( ::impala::TMetricKind::type)1;
  tmp54.__isset.kind = true;
  tmp54.label = "Resource Pool $0 Total Rejected";
  tmp54.__isset.label = true;
  tmp54.units = ( ::impala::TUnit::type)0;
  tmp54.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.total-rejected.$0", tmp54));
  TMetricDef tmp56;
  std::vector<std::string>  tmp57;
  tmp57.push_back("RESOURCE_POOL");

  tmp56.contexts = tmp57;
  tmp56.__isset.contexts = true;
  tmp56.description = "Total number of requests that have completed and released resources in pool $0";
  tmp56.__isset.description = true;
  tmp56.key = "admission-controller.total-released.$0";
  tmp56.__isset.key = true;
  tmp56.kind = ( ::impala::TMetricKind::type)1;
  tmp56.__isset.kind = true;
  tmp56.label = "Resource Pool $0 Total Released";
  tmp56.__isset.label = true;
  tmp56.units = ( ::impala::TUnit::type)0;
  tmp56.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.total-released.$0", tmp56));
  TMetricDef tmp58;
  std::vector<std::string>  tmp59;
  tmp59.push_back("RESOURCE_POOL");

  tmp58.contexts = tmp59;
  tmp58.__isset.contexts = true;
  tmp58.description = "Total number of requests timed out waiting while queued in pool $0";
  tmp58.__isset.description = true;
  tmp58.key = "admission-controller.total-timed-out.$0";
  tmp58.__isset.key = true;
  tmp58.kind = ( ::impala::TMetricKind::type)1;
  tmp58.__isset.kind = true;
  tmp58.label = "Resource Pool $0 Total Timed Out";
  tmp58.__isset.label = true;
  tmp58.units = ( ::impala::TUnit::type)0;
  tmp58.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admission-controller.total-timed-out.$0", tmp58));
  TMetricDef tmp60;
  std::vector<std::string>  tmp61;
  tmp61.push_back("ADMISSIOND");

  tmp60.contexts = tmp61;
  tmp60.__isset.contexts = true;
  tmp60.description = "The full version string of the Admission Control Server.";
  tmp60.__isset.description = true;
  tmp60.key = "admissiond.version";
  tmp60.__isset.key = true;
  tmp60.kind = ( ::impala::TMetricKind::type)2;
  tmp60.__isset.kind = true;
  tmp60.label = "Admission Control Service Version";
  tmp60.__isset.label = true;
  tmp60.units = ( ::impala::TUnit::type)7;
  tmp60.__isset.units = true;

  TMetricDefs.insert(std::make_pair("admissiond.version", tmp60));
  TMetricDef tmp62;
  std::vector<std::string>  tmp63;
  tmp63.push_back("IMPALAD");

  tmp62.contexts = tmp63;
  tmp62.__isset.contexts = true;
  tmp62.description = "Statistics for buffer sizes allocated from the system. Only a subset of allocations are counted in this metric to reduce overhead.";
  tmp62.__isset.description = true;
  tmp62.key = "buffer-pool.$0.allocated-buffer-sizes";
  tmp62.__isset.key = true;
  tmp62.kind = ( ::impala::TMetricKind::type)5;
  tmp62.__isset.kind = true;
  tmp62.label = "Buffer Pool Allocated Buffer Sizes.";
  tmp62.__isset.label = true;
  tmp62.units = ( ::impala::TUnit::type)3;
  tmp62.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.$0.allocated-buffer-sizes", tmp62));
  TMetricDef tmp64;
  std::vector<std::string>  tmp65;
  tmp65.push_back("IMPALAD");

  tmp64.contexts = tmp65;
  tmp64.__isset.contexts = true;
  tmp64.description = "Number of times a clean page was evicted to fulfil an allocation.";
  tmp64.__isset.description = true;
  tmp64.key = "buffer-pool.$0.clean-page-hits";
  tmp64.__isset.key = true;
  tmp64.kind = ( ::impala::TMetricKind::type)1;
  tmp64.__isset.kind = true;
  tmp64.label = "Buffer Pool Clean Page Hits.";
  tmp64.__isset.label = true;
  tmp64.units = ( ::impala::TUnit::type)0;
  tmp64.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.$0.clean-page-hits", tmp64));
  TMetricDef tmp66;
  std::vector<std::string>  tmp67;
  tmp67.push_back("IMPALAD");

  tmp66.contexts = tmp67;
  tmp66.__isset.contexts = true;
  tmp66.description = "Number of times a new buffer was directly allocated from the system allocator to fulfil an allocation.";
  tmp66.__isset.description = true;
  tmp66.key = "buffer-pool.$0.direct-alloc-count";
  tmp66.__isset.key = true;
  tmp66.kind = ( ::impala::TMetricKind::type)1;
  tmp66.__isset.kind = true;
  tmp66.label = "Buffer Pool Direct Allocation Count.";
  tmp66.__isset.label = true;
  tmp66.units = ( ::impala::TUnit::type)0;
  tmp66.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.$0.direct-alloc-count", tmp66));
  TMetricDef tmp68;
  std::vector<std::string>  tmp69;
  tmp69.push_back("IMPALAD");

  tmp68.contexts = tmp69;
  tmp68.__isset.contexts = true;
  tmp68.description = "Number of times a free buffer was recycled from this core's arena to fulfil an allocation.";
  tmp68.__isset.description = true;
  tmp68.key = "buffer-pool.$0.local-arena-free-buffer-hits";
  tmp68.__isset.key = true;
  tmp68.kind = ( ::impala::TMetricKind::type)1;
  tmp68.__isset.kind = true;
  tmp68.label = "Buffer Pool Local Arena Free Buffer Hit Count.";
  tmp68.__isset.label = true;
  tmp68.units = ( ::impala::TUnit::type)0;
  tmp68.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.$0.local-arena-free-buffer-hits", tmp68));
  TMetricDef tmp70;
  std::vector<std::string>  tmp71;
  tmp71.push_back("IMPALAD");

  tmp70.contexts = tmp71;
  tmp70.__isset.contexts = true;
  tmp70.description = "Number of times the allocator had to lock all arenas and scavenge to fulfil an allocation.";
  tmp70.__isset.description = true;
  tmp70.key = "buffer-pool.$0.num-final-scavenges";
  tmp70.__isset.key = true;
  tmp70.kind = ( ::impala::TMetricKind::type)1;
  tmp70.__isset.kind = true;
  tmp70.label = "Buffer Pool Final Scavenge Count.";
  tmp70.__isset.label = true;
  tmp70.units = ( ::impala::TUnit::type)0;
  tmp70.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.$0.num-final-scavenges", tmp70));
  TMetricDef tmp72;
  std::vector<std::string>  tmp73;
  tmp73.push_back("IMPALAD");

  tmp72.contexts = tmp73;
  tmp72.__isset.contexts = true;
  tmp72.description = "Number of times the allocator had to scavenge to fulfil an allocation.";
  tmp72.__isset.description = true;
  tmp72.key = "buffer-pool.$0.num-scavenges";
  tmp72.__isset.key = true;
  tmp72.kind = ( ::impala::TMetricKind::type)1;
  tmp72.__isset.kind = true;
  tmp72.label = "Buffer Pool Scavenge Count.";
  tmp72.__isset.label = true;
  tmp72.units = ( ::impala::TUnit::type)0;
  tmp72.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.$0.num-scavenges", tmp72));
  TMetricDef tmp74;
  std::vector<std::string>  tmp75;
  tmp75.push_back("IMPALAD");

  tmp74.contexts = tmp75;
  tmp74.__isset.contexts = true;
  tmp74.description = "Number of times that a recycled buffer within the same NUMA node was used to fulfil an allocation.";
  tmp74.__isset.description = true;
  tmp74.key = "buffer-pool.$0.numa-arena-free-buffer-hits";
  tmp74.__isset.key = true;
  tmp74.kind = ( ::impala::TMetricKind::type)1;
  tmp74.__isset.kind = true;
  tmp74.label = "Buffer Pool Numa Free Buffer Hits.";
  tmp74.__isset.label = true;
  tmp74.units = ( ::impala::TUnit::type)0;
  tmp74.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.$0.numa-arena-free-buffer-hits", tmp74));
  TMetricDef tmp76;
  std::vector<std::string>  tmp77;
  tmp77.push_back("IMPALAD");

  tmp76.contexts = tmp77;
  tmp76.__isset.contexts = true;
  tmp76.description = "Total time the buffer pool spent in the system allocator for this arena.";
  tmp76.__isset.description = true;
  tmp76.key = "buffer-pool.$0.system-alloc-time";
  tmp76.__isset.key = true;
  tmp76.kind = ( ::impala::TMetricKind::type)1;
  tmp76.__isset.kind = true;
  tmp76.label = "Buffer Pool System Allocation Time.";
  tmp76.__isset.label = true;
  tmp76.units = ( ::impala::TUnit::type)5;
  tmp76.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.$0.system-alloc-time", tmp76));
  TMetricDef tmp78;
  std::vector<std::string>  tmp79;
  tmp79.push_back("IMPALAD");

  tmp78.contexts = tmp79;
  tmp78.__isset.contexts = true;
  tmp78.description = "Total bytes of clean page memory cached in the buffer pool.";
  tmp78.__isset.description = true;
  tmp78.key = "buffer-pool.clean-page-bytes";
  tmp78.__isset.key = true;
  tmp78.kind = ( ::impala::TMetricKind::type)0;
  tmp78.__isset.kind = true;
  tmp78.label = "Buffer Pool Clean Page Bytes.";
  tmp78.__isset.label = true;
  tmp78.units = ( ::impala::TUnit::type)3;
  tmp78.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.clean-page-bytes", tmp78));
  TMetricDef tmp80;
  std::vector<std::string>  tmp81;
  tmp81.push_back("IMPALAD");

  tmp80.contexts = tmp81;
  tmp80.__isset.contexts = true;
  tmp80.description = "Total number of clean pages cached in the buffer pool.";
  tmp80.__isset.description = true;
  tmp80.key = "buffer-pool.clean-pages";
  tmp80.__isset.key = true;
  tmp80.kind = ( ::impala::TMetricKind::type)0;
  tmp80.__isset.kind = true;
  tmp80.label = "Buffer Pool Clean Pages.";
  tmp80.__isset.label = true;
  tmp80.units = ( ::impala::TUnit::type)7;
  tmp80.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.clean-pages", tmp80));
  TMetricDef tmp82;
  std::vector<std::string>  tmp83;
  tmp83.push_back("IMPALAD");

  tmp82.contexts = tmp83;
  tmp82.__isset.contexts = true;
  tmp82.description = "Limit on number of clean pages cached in the buffer pool.";
  tmp82.__isset.description = true;
  tmp82.key = "buffer-pool.clean-pages-limit";
  tmp82.__isset.key = true;
  tmp82.kind = ( ::impala::TMetricKind::type)0;
  tmp82.__isset.kind = true;
  tmp82.label = "Buffer Pool Clean Pages Limit.";
  tmp82.__isset.label = true;
  tmp82.units = ( ::impala::TUnit::type)3;
  tmp82.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.clean-pages-limit", tmp82));
  TMetricDef tmp84;
  std::vector<std::string>  tmp85;
  tmp85.push_back("IMPALAD");

  tmp84.contexts = tmp85;
  tmp84.__isset.contexts = true;
  tmp84.description = "Total bytes of free buffer memory cached in the buffer pool.";
  tmp84.__isset.description = true;
  tmp84.key = "buffer-pool.free-buffer-bytes";
  tmp84.__isset.key = true;
  tmp84.kind = ( ::impala::TMetricKind::type)0;
  tmp84.__isset.kind = true;
  tmp84.label = "Buffer Pool Free Buffer Bytes.";
  tmp84.__isset.label = true;
  tmp84.units = ( ::impala::TUnit::type)3;
  tmp84.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.free-buffer-bytes", tmp84));
  TMetricDef tmp86;
  std::vector<std::string>  tmp87;
  tmp87.push_back("IMPALAD");

  tmp86.contexts = tmp87;
  tmp86.__isset.contexts = true;
  tmp86.description = "Total number of free buffers cached in the buffer pool.";
  tmp86.__isset.description = true;
  tmp86.key = "buffer-pool.free-buffers";
  tmp86.__isset.key = true;
  tmp86.kind = ( ::impala::TMetricKind::type)0;
  tmp86.__isset.kind = true;
  tmp86.label = "Buffer Pool Free Buffers.";
  tmp86.__isset.label = true;
  tmp86.units = ( ::impala::TUnit::type)7;
  tmp86.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.free-buffers", tmp86));
  TMetricDef tmp88;
  std::vector<std::string>  tmp89;
  tmp89.push_back("IMPALAD");

  tmp88.contexts = tmp89;
  tmp88.__isset.contexts = true;
  tmp88.description = "Maximum allowed bytes allocated by the buffer pool.";
  tmp88.__isset.description = true;
  tmp88.key = "buffer-pool.limit";
  tmp88.__isset.key = true;
  tmp88.kind = ( ::impala::TMetricKind::type)0;
  tmp88.__isset.kind = true;
  tmp88.label = "Buffer Pool Allocated Memory Limit.";
  tmp88.__isset.label = true;
  tmp88.units = ( ::impala::TUnit::type)3;
  tmp88.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.limit", tmp88));
  TMetricDef tmp90;
  std::vector<std::string>  tmp91;
  tmp91.push_back("IMPALAD");

  tmp90.contexts = tmp91;
  tmp90.__isset.contexts = true;
  tmp90.description = "Total bytes of buffers reserved by Impala subsystems";
  tmp90.__isset.description = true;
  tmp90.key = "buffer-pool.reserved";
  tmp90.__isset.key = true;
  tmp90.kind = ( ::impala::TMetricKind::type)0;
  tmp90.__isset.kind = true;
  tmp90.label = "Buffer Pool Total Reserved Memory.";
  tmp90.__isset.label = true;
  tmp90.units = ( ::impala::TUnit::type)3;
  tmp90.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.reserved", tmp90));
  TMetricDef tmp92;
  std::vector<std::string>  tmp93;
  tmp93.push_back("IMPALAD");

  tmp92.contexts = tmp93;
  tmp92.__isset.contexts = true;
  tmp92.description = "Total buffer memory currently allocated by the buffer pool.";
  tmp92.__isset.description = true;
  tmp92.key = "buffer-pool.system-allocated";
  tmp92.__isset.key = true;
  tmp92.kind = ( ::impala::TMetricKind::type)0;
  tmp92.__isset.kind = true;
  tmp92.label = "Buffer Pool Total Allocated Memory.";
  tmp92.__isset.label = true;
  tmp92.units = ( ::impala::TUnit::type)3;
  tmp92.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.system-allocated", tmp92));
  TMetricDef tmp94;
  std::vector<std::string>  tmp95;
  tmp95.push_back("IMPALAD");

  tmp94.contexts = tmp95;
  tmp94.__isset.contexts = true;
  tmp94.description = "Total bytes of buffer reservations by Impala subsystems that are currently unused";
  tmp94.__isset.description = true;
  tmp94.key = "buffer-pool.unused-reservation-bytes";
  tmp94.__isset.key = true;
  tmp94.kind = ( ::impala::TMetricKind::type)0;
  tmp94.__isset.kind = true;
  tmp94.label = "Buffer Pool Unused Reservation Bytes.";
  tmp94.__isset.label = true;
  tmp94.units = ( ::impala::TUnit::type)3;
  tmp94.__isset.units = true;

  TMetricDefs.insert(std::make_pair("buffer-pool.unused-reservation-bytes", tmp94));
  TMetricDef tmp96;
  std::vector<std::string>  tmp97;
  tmp97.push_back("CATALOGSERVER");

  tmp96.contexts = tmp97;
  tmp96.__isset.contexts = true;
  tmp96.description = "Catalog Server Topic Processing Time";
  tmp96.__isset.description = true;
  tmp96.key = "catalog-server.topic-processing-time-s";
  tmp96.__isset.key = true;
  tmp96.kind = ( ::impala::TMetricKind::type)3;
  tmp96.__isset.kind = true;
  tmp96.label = "Catalog Server Topic Processing Time";
  tmp96.__isset.label = true;
  tmp96.units = ( ::impala::TUnit::type)9;
  tmp96.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog-server.topic-processing-time-s", tmp96));
  TMetricDef tmp98;
  std::vector<std::string>  tmp99;
  tmp99.push_back("IMPALAD");

  tmp98.contexts = tmp99;
  tmp98.__isset.contexts = true;
  tmp98.description = "Average time spent loading new values into the Impalad Catalog Cache.";
  tmp98.__isset.description = true;
  tmp98.key = "catalog.cache.average-load-time";
  tmp98.__isset.key = true;
  tmp98.kind = ( ::impala::TMetricKind::type)0;
  tmp98.__isset.kind = true;
  tmp98.label = "Average Impalad catalog cache load time";
  tmp98.__isset.label = true;
  tmp98.units = ( ::impala::TUnit::type)5;
  tmp98.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.cache.average-load-time", tmp98));
  TMetricDef tmp100;
  std::vector<std::string>  tmp101;
  tmp101.push_back("IMPALAD");

  tmp100.contexts = tmp101;
  tmp100.__isset.contexts = true;
  tmp100.description = "Total number of evictions from the Impalad Catalog Cache.";
  tmp100.__isset.description = true;
  tmp100.key = "catalog.cache.eviction-count";
  tmp100.__isset.key = true;
  tmp100.kind = ( ::impala::TMetricKind::type)1;
  tmp100.__isset.kind = true;
  tmp100.label = "Impalad catalog cache eviction count";
  tmp100.__isset.label = true;
  tmp100.units = ( ::impala::TUnit::type)7;
  tmp100.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.cache.eviction-count", tmp100));
  TMetricDef tmp102;
  std::vector<std::string>  tmp103;
  tmp103.push_back("IMPALAD");

  tmp102.contexts = tmp103;
  tmp102.__isset.contexts = true;
  tmp102.description = "Total number of Impalad Catalog cache hits.";
  tmp102.__isset.description = true;
  tmp102.key = "catalog.cache.hit-count";
  tmp102.__isset.key = true;
  tmp102.kind = ( ::impala::TMetricKind::type)1;
  tmp102.__isset.kind = true;
  tmp102.label = "Impalad catalog cache hit count";
  tmp102.__isset.label = true;
  tmp102.units = ( ::impala::TUnit::type)7;
  tmp102.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.cache.hit-count", tmp102));
  TMetricDef tmp104;
  std::vector<std::string>  tmp105;
  tmp105.push_back("IMPALAD");

  tmp104.contexts = tmp105;
  tmp104.__isset.contexts = true;
  tmp104.description = "Ratio of Impalad Catalog cache requests that were hits.";
  tmp104.__isset.description = true;
  tmp104.key = "catalog.cache.hit-rate";
  tmp104.__isset.key = true;
  tmp104.kind = ( ::impala::TMetricKind::type)0;
  tmp104.__isset.kind = true;
  tmp104.label = "Impalad catalog cache hit rate";
  tmp104.__isset.label = true;
  tmp104.units = ( ::impala::TUnit::type)7;
  tmp104.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.cache.hit-rate", tmp104));
  TMetricDef tmp106;
  std::vector<std::string>  tmp107;
  tmp107.push_back("IMPALAD");

  tmp106.contexts = tmp107;
  tmp106.__isset.contexts = true;
  tmp106.description = "Total requests to Impalad Catalog cache requests that loaded new values.";
  tmp106.__isset.description = true;
  tmp106.key = "catalog.cache.load-count";
  tmp106.__isset.key = true;
  tmp106.kind = ( ::impala::TMetricKind::type)1;
  tmp106.__isset.kind = true;
  tmp106.label = "Impalad catalog cache load count";
  tmp106.__isset.label = true;
  tmp106.units = ( ::impala::TUnit::type)7;
  tmp106.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.cache.load-count", tmp106));
  TMetricDef tmp108;
  std::vector<std::string>  tmp109;
  tmp109.push_back("IMPALAD");

  tmp108.contexts = tmp109;
  tmp108.__isset.contexts = true;
  tmp108.description = "Total requests to Impalad Catalog cache requests that threw exceptions loading new values.";
  tmp108.__isset.description = true;
  tmp108.key = "catalog.cache.load-exception-count";
  tmp108.__isset.key = true;
  tmp108.kind = ( ::impala::TMetricKind::type)1;
  tmp108.__isset.kind = true;
  tmp108.label = "Impalad catalog cache load exception count";
  tmp108.__isset.label = true;
  tmp108.units = ( ::impala::TUnit::type)7;
  tmp108.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.cache.load-exception-count", tmp108));
  TMetricDef tmp110;
  std::vector<std::string>  tmp111;
  tmp111.push_back("IMPALAD");

  tmp110.contexts = tmp111;
  tmp110.__isset.contexts = true;
  tmp110.description = "Ratio of Impalad Catalog cache requests that threw exceptions loading new values.";
  tmp110.__isset.description = true;
  tmp110.key = "catalog.cache.load-exception-rate";
  tmp110.__isset.key = true;
  tmp110.kind = ( ::impala::TMetricKind::type)0;
  tmp110.__isset.kind = true;
  tmp110.label = "Impalad catalog cache load exception rate";
  tmp110.__isset.label = true;
  tmp110.units = ( ::impala::TUnit::type)7;
  tmp110.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.cache.load-exception-rate", tmp110));
  TMetricDef tmp112;
  std::vector<std::string>  tmp113;
  tmp113.push_back("IMPALAD");

  tmp112.contexts = tmp113;
  tmp112.__isset.contexts = true;
  tmp112.description = "Number of Impalad Catalog cache requests that successfully loaded new values.";
  tmp112.__isset.description = true;
  tmp112.key = "catalog.cache.load-success-count";
  tmp112.__isset.key = true;
  tmp112.kind = ( ::impala::TMetricKind::type)1;
  tmp112.__isset.kind = true;
  tmp112.label = "Impalad catalog cache load success count";
  tmp112.__isset.label = true;
  tmp112.units = ( ::impala::TUnit::type)7;
  tmp112.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.cache.load-success-count", tmp112));
  TMetricDef tmp114;
  std::vector<std::string>  tmp115;
  tmp115.push_back("IMPALAD");

  tmp114.contexts = tmp115;
  tmp114.__isset.contexts = true;
  tmp114.description = "Number of Impalad Catalog cache requests that returned uncached values.";
  tmp114.__isset.description = true;
  tmp114.key = "catalog.cache.miss-count";
  tmp114.__isset.key = true;
  tmp114.kind = ( ::impala::TMetricKind::type)1;
  tmp114.__isset.kind = true;
  tmp114.label = "Impalad catalog cache load miss count";
  tmp114.__isset.label = true;
  tmp114.units = ( ::impala::TUnit::type)7;
  tmp114.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.cache.miss-count", tmp114));
  TMetricDef tmp116;
  std::vector<std::string>  tmp117;
  tmp117.push_back("IMPALAD");

  tmp116.contexts = tmp117;
  tmp116.__isset.contexts = true;
  tmp116.description = "Ratio of Impalad Catalog cache requests that were misses.";
  tmp116.__isset.description = true;
  tmp116.key = "catalog.cache.miss-rate";
  tmp116.__isset.key = true;
  tmp116.kind = ( ::impala::TMetricKind::type)0;
  tmp116.__isset.kind = true;
  tmp116.label = "Impalad catalog cache load miss rate";
  tmp116.__isset.label = true;
  tmp116.units = ( ::impala::TUnit::type)7;
  tmp116.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.cache.miss-rate", tmp116));
  TMetricDef tmp118;
  std::vector<std::string>  tmp119;
  tmp119.push_back("IMPALAD");

  tmp118.contexts = tmp119;
  tmp118.__isset.contexts = true;
  tmp118.description = "Total number of Impalad Catalog cache requests.";
  tmp118.__isset.description = true;
  tmp118.key = "catalog.cache.request-count";
  tmp118.__isset.key = true;
  tmp118.kind = ( ::impala::TMetricKind::type)1;
  tmp118.__isset.kind = true;
  tmp118.label = "Impalad catalog cache request count";
  tmp118.__isset.label = true;
  tmp118.units = ( ::impala::TUnit::type)7;
  tmp118.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.cache.request-count", tmp118));
  TMetricDef tmp120;
  std::vector<std::string>  tmp121;
  tmp121.push_back("IMPALAD");

  tmp120.contexts = tmp121;
  tmp120.__isset.contexts = true;
  tmp120.description = "Total time spent in Impalad Catalog cache loading new values.";
  tmp120.__isset.description = true;
  tmp120.key = "catalog.cache.total-load-time";
  tmp120.__isset.key = true;
  tmp120.kind = ( ::impala::TMetricKind::type)1;
  tmp120.__isset.kind = true;
  tmp120.label = "Impalad catalog cache time spent in loads";
  tmp120.__isset.label = true;
  tmp120.units = ( ::impala::TUnit::type)5;
  tmp120.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.cache.total-load-time", tmp120));
  TMetricDef tmp122;
  std::vector<std::string>  tmp123;
  tmp123.push_back("IMPALAD");

  tmp122.contexts = tmp123;
  tmp122.__isset.contexts = true;
  tmp122.description = "Lower bound of catalog object version in local catalog cache.";
  tmp122.__isset.description = true;
  tmp122.key = "catalog.catalog-object-version-lower-bound";
  tmp122.__isset.key = true;
  tmp122.kind = ( ::impala::TMetricKind::type)0;
  tmp122.__isset.kind = true;
  tmp122.label = "Catalog object version lower bound";
  tmp122.__isset.label = true;
  tmp122.units = ( ::impala::TUnit::type)7;
  tmp122.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.catalog-object-version-lower-bound", tmp122));
  TMetricDef tmp124;
  std::vector<std::string>  tmp125;
  tmp125.push_back("IMPALAD");

  tmp124.contexts = tmp125;
  tmp124.__isset.contexts = true;
  tmp124.description = "Catalog service id.";
  tmp124.__isset.description = true;
  tmp124.key = "catalog.curr-serviceid";
  tmp124.__isset.key = true;
  tmp124.kind = ( ::impala::TMetricKind::type)2;
  tmp124.__isset.kind = true;
  tmp124.label = "Catalog service id";
  tmp124.__isset.label = true;
  tmp124.units = ( ::impala::TUnit::type)7;
  tmp124.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.curr-serviceid", tmp124));
  TMetricDef tmp126;
  std::vector<std::string>  tmp127;
  tmp127.push_back("IMPALAD");

  tmp126.contexts = tmp127;
  tmp126.__isset.contexts = true;
  tmp126.description = "Statestore topic update version.";
  tmp126.__isset.description = true;
  tmp126.key = "catalog.curr-topic";
  tmp126.__isset.key = true;
  tmp126.kind = ( ::impala::TMetricKind::type)0;
  tmp126.__isset.kind = true;
  tmp126.label = "Statestore topic update version";
  tmp126.__isset.label = true;
  tmp126.units = ( ::impala::TUnit::type)7;
  tmp126.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.curr-topic", tmp126));
  TMetricDef tmp128;
  std::vector<std::string>  tmp129;
  tmp129.push_back("IMPALAD");

  tmp128.contexts = tmp129;
  tmp128.__isset.contexts = true;
  tmp128.description = "Catalog topic update version.";
  tmp128.__isset.description = true;
  tmp128.key = "catalog.curr-version";
  tmp128.__isset.key = true;
  tmp128.kind = ( ::impala::TMetricKind::type)0;
  tmp128.__isset.kind = true;
  tmp128.label = "Catalog topic update version";
  tmp128.__isset.label = true;
  tmp128.units = ( ::impala::TUnit::type)7;
  tmp128.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.curr-version", tmp128));
  TMetricDef tmp130;
  std::vector<std::string>  tmp131;
  tmp131.push_back("IMPALAD");

  tmp130.contexts = tmp131;
  tmp130.__isset.contexts = true;
  tmp130.description = "The number of databases in the catalog.";
  tmp130.__isset.description = true;
  tmp130.key = "catalog.num-databases";
  tmp130.__isset.key = true;
  tmp130.kind = ( ::impala::TMetricKind::type)0;
  tmp130.__isset.kind = true;
  tmp130.label = "Databases";
  tmp130.__isset.label = true;
  tmp130.units = ( ::impala::TUnit::type)7;
  tmp130.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.num-databases", tmp130));
  TMetricDef tmp132;
  std::vector<std::string>  tmp133;
  tmp133.push_back("IMPALAD");

  tmp132.contexts = tmp133;
  tmp132.__isset.contexts = true;
  tmp132.description = "The number of tables in the catalog.";
  tmp132.__isset.description = true;
  tmp132.key = "catalog.num-tables";
  tmp132.__isset.key = true;
  tmp132.kind = ( ::impala::TMetricKind::type)0;
  tmp132.__isset.kind = true;
  tmp132.label = "Tables";
  tmp132.__isset.label = true;
  tmp132.units = ( ::impala::TUnit::type)7;
  tmp132.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.num-tables", tmp132));
  TMetricDef tmp134;
  std::vector<std::string>  tmp135;
  tmp135.push_back("CATALOGSERVER");

  tmp134.contexts = tmp135;
  tmp134.__isset.contexts = true;
  tmp134.description = "RPC queue length for partial object fetches.";
  tmp134.__isset.description = true;
  tmp134.key = "catalog.partial-fetch-rpc.queue-len";
  tmp134.__isset.key = true;
  tmp134.kind = ( ::impala::TMetricKind::type)0;
  tmp134.__isset.kind = true;
  tmp134.label = "RPC queue length for partial object fetch requests.";
  tmp134.__isset.label = true;
  tmp134.units = ( ::impala::TUnit::type)7;
  tmp134.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.partial-fetch-rpc.queue-len", tmp134));
  TMetricDef tmp136;
  std::vector<std::string>  tmp137;
  tmp137.push_back("IMPALAD");

  tmp136.contexts = tmp137;
  tmp136.__isset.contexts = true;
  tmp136.description = "Indicates if the catalog is ready.";
  tmp136.__isset.description = true;
  tmp136.key = "catalog.ready";
  tmp136.__isset.key = true;
  tmp136.kind = ( ::impala::TMetricKind::type)2;
  tmp136.__isset.kind = true;
  tmp136.label = "Catalog Ready";
  tmp136.__isset.label = true;
  tmp136.units = ( ::impala::TUnit::type)7;
  tmp136.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.ready", tmp136));
  TMetricDef tmp138;
  std::vector<std::string>  tmp139;
  tmp139.push_back("IMPALAD");

  tmp138.contexts = tmp139;
  tmp138.__isset.contexts = true;
  tmp138.description = "The number of clients currently in use by the Catalog Server client cache.";
  tmp138.__isset.description = true;
  tmp138.key = "catalog.server.client-cache.clients-in-use";
  tmp138.__isset.key = true;
  tmp138.kind = ( ::impala::TMetricKind::type)0;
  tmp138.__isset.kind = true;
  tmp138.label = "Catalog Server Client Cache Clients In Use";
  tmp138.__isset.label = true;
  tmp138.units = ( ::impala::TUnit::type)7;
  tmp138.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.server.client-cache.clients-in-use", tmp138));
  TMetricDef tmp140;
  std::vector<std::string>  tmp141;
  tmp141.push_back("IMPALAD");

  tmp140.contexts = tmp141;
  tmp140.__isset.contexts = true;
  tmp140.description = "The total number of clients in the Catalog Server client cache.";
  tmp140.__isset.description = true;
  tmp140.key = "catalog.server.client-cache.total-clients";
  tmp140.__isset.key = true;
  tmp140.kind = ( ::impala::TMetricKind::type)0;
  tmp140.__isset.kind = true;
  tmp140.label = "Catalog Server Client Cache Total Clients";
  tmp140.__isset.label = true;
  tmp140.units = ( ::impala::TUnit::type)7;
  tmp140.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.server.client-cache.total-clients", tmp140));
  TMetricDef tmp142;
  std::vector<std::string>  tmp143;
  tmp143.push_back("CATALOGSERVER");

  tmp142.contexts = tmp143;
  tmp142.__isset.contexts = true;
  tmp142.description = "The full version string of the Catalog Server.";
  tmp142.__isset.description = true;
  tmp142.key = "catalog.version";
  tmp142.__isset.key = true;
  tmp142.kind = ( ::impala::TMetricKind::type)2;
  tmp142.__isset.kind = true;
  tmp142.label = "Catalog Version";
  tmp142.__isset.label = true;
  tmp142.units = ( ::impala::TUnit::type)7;
  tmp142.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalog.version", tmp142));
  TMetricDef tmp144;
  std::vector<std::string>  tmp145;
  tmp145.push_back("CATALOGSERVER");

  tmp144.contexts = tmp145;
  tmp144.__isset.contexts = true;
  tmp144.description = "Catalogd HMS cache API requests.";
  tmp144.__isset.description = true;
  tmp144.key = "catalogd.hms.cache.api.requests";
  tmp144.__isset.key = true;
  tmp144.kind = ( ::impala::TMetricKind::type)1;
  tmp144.__isset.kind = true;
  tmp144.label = "Status of Catalogd HMS cache";
  tmp144.__isset.label = true;
  tmp144.units = ( ::impala::TUnit::type)7;
  tmp144.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalogd.hms.cache.api.requests", tmp144));
  TMetricDef tmp146;
  std::vector<std::string>  tmp147;
  tmp147.push_back("CATALOGSERVER");

  tmp146.contexts = tmp147;
  tmp146.__isset.contexts = true;
  tmp146.description = "Catalogd HMS cache hit ratio.";
  tmp146.__isset.description = true;
  tmp146.key = "catalogd.hms.cache.cache.hit.ratio";
  tmp146.__isset.key = true;
  tmp146.kind = ( ::impala::TMetricKind::type)0;
  tmp146.__isset.kind = true;
  tmp146.label = "Catalogd HMS cache hit ratio";
  tmp146.__isset.label = true;
  tmp146.units = ( ::impala::TUnit::type)7;
  tmp146.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalogd.hms.cache.cache.hit.ratio", tmp146));
  TMetricDef tmp148;
  std::vector<std::string>  tmp149;
  tmp149.push_back("CATALOGSERVER");

  tmp148.contexts = tmp149;
  tmp148.__isset.contexts = true;
  tmp148.description = "Catalogd HMS cache API requests rate for last 15 min.";
  tmp148.__isset.description = true;
  tmp148.key = "catalogd.hms.cache.status.api.requests.15min";
  tmp148.__isset.key = true;
  tmp148.kind = ( ::impala::TMetricKind::type)0;
  tmp148.__isset.kind = true;
  tmp148.label = "Catalogd HMS cache API requests rate for last 15 minutes";
  tmp148.__isset.label = true;
  tmp148.units = ( ::impala::TUnit::type)7;
  tmp148.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalogd.hms.cache.status.api.requests.15min", tmp148));
  TMetricDef tmp150;
  std::vector<std::string>  tmp151;
  tmp151.push_back("CATALOGSERVER");

  tmp150.contexts = tmp151;
  tmp150.__isset.contexts = true;
  tmp150.description = "Catalogd HMS cache API requests rate for last 1 min.";
  tmp150.__isset.description = true;
  tmp150.key = "catalogd.hms.cache.status.api.requests.1min";
  tmp150.__isset.key = true;
  tmp150.kind = ( ::impala::TMetricKind::type)0;
  tmp150.__isset.kind = true;
  tmp150.label = "Catalogd HMS cache API requests rate for last 1 minute";
  tmp150.__isset.label = true;
  tmp150.units = ( ::impala::TUnit::type)7;
  tmp150.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalogd.hms.cache.status.api.requests.1min", tmp150));
  TMetricDef tmp152;
  std::vector<std::string>  tmp153;
  tmp153.push_back("CATALOGSERVER");

  tmp152.contexts = tmp153;
  tmp152.__isset.contexts = true;
  tmp152.description = "Catalogd HMS cache API requests rate for last 5 min.";
  tmp152.__isset.description = true;
  tmp152.key = "catalogd.hms.cache.status.api.requests.5min";
  tmp152.__isset.key = true;
  tmp152.kind = ( ::impala::TMetricKind::type)0;
  tmp152.__isset.kind = true;
  tmp152.label = "Catalogd HMS cache API requests rate for last 5 minutes";
  tmp152.__isset.label = true;
  tmp152.units = ( ::impala::TUnit::type)7;
  tmp152.__isset.units = true;

  TMetricDefs.insert(std::make_pair("catalogd.hms.cache.status.api.requests.5min", tmp152));
  TMetricDef tmp154;
  std::vector<std::string>  tmp155;
  tmp155.push_back("IMPALAD");

  tmp154.contexts = tmp155;
  tmp154.__isset.contexts = true;
  tmp154.description = "The number of cgroups currently registered with the Cgroups Manager";
  tmp154.__isset.description = true;
  tmp154.key = "cgroups-mgr.active-cgroups";
  tmp154.__isset.key = true;
  tmp154.kind = ( ::impala::TMetricKind::type)0;
  tmp154.__isset.kind = true;
  tmp154.label = "Cgroups Manager Active Cgroups";
  tmp154.__isset.label = true;
  tmp154.units = ( ::impala::TUnit::type)0;
  tmp154.__isset.units = true;

  TMetricDefs.insert(std::make_pair("cgroups-mgr.active-cgroups", tmp154));
  TMetricDef tmp156;
  std::vector<std::string>  tmp157;
  tmp157.push_back("IMPALAD");

  tmp156.contexts = tmp157;
  tmp156.__isset.contexts = true;
  tmp156.description = "Total number of backends registered with the statestore";
  tmp156.__isset.description = true;
  tmp156.key = "cluster-membership.backends.total";
  tmp156.__isset.key = true;
  tmp156.kind = ( ::impala::TMetricKind::type)1;
  tmp156.__isset.kind = true;
  tmp156.label = "Total number of backends registered with the statestore";
  tmp156.__isset.label = true;
  tmp156.units = ( ::impala::TUnit::type)7;
  tmp156.__isset.units = true;

  TMetricDefs.insert(std::make_pair("cluster-membership.backends.total", tmp156));
  TMetricDef tmp158;
  std::vector<std::string>  tmp159;
  tmp159.push_back("IMPALAD");

  tmp158.contexts = tmp159;
  tmp158.__isset.contexts = true;
  tmp158.description = "Total number of executor groups that have at least one executor";
  tmp158.__isset.description = true;
  tmp158.key = "cluster-membership.executor-groups.total";
  tmp158.__isset.key = true;
  tmp158.kind = ( ::impala::TMetricKind::type)1;
  tmp158.__isset.kind = true;
  tmp158.label = "Total number of executor groups that have at least one executor";
  tmp158.__isset.label = true;
  tmp158.units = ( ::impala::TUnit::type)7;
  tmp158.__isset.units = true;

  TMetricDefs.insert(std::make_pair("cluster-membership.executor-groups.total", tmp158));
  TMetricDef tmp160;
  std::vector<std::string>  tmp161;
  tmp161.push_back("IMPALAD");

  tmp160.contexts = tmp161;
  tmp160.__isset.contexts = true;
  tmp160.description = "Total number of executor groups that are in a healthy state, that is, have at least the configured minimum number of executors to be considered for admission";
  tmp160.__isset.description = true;
  tmp160.key = "cluster-membership.executor-groups.total-healthy";
  tmp160.__isset.key = true;
  tmp160.kind = ( ::impala::TMetricKind::type)1;
  tmp160.__isset.kind = true;
  tmp160.label = "Total number of executor groups that are in a healthy state";
  tmp160.__isset.label = true;
  tmp160.units = ( ::impala::TUnit::type)7;
  tmp160.__isset.units = true;

  TMetricDefs.insert(std::make_pair("cluster-membership.executor-groups.total-healthy", tmp160));
  TMetricDef tmp162;
  std::vector<std::string>  tmp163;
  tmp163.push_back("CATALOGSERVER");

  tmp162.contexts = tmp163;
  tmp162.__isset.contexts = true;
  tmp162.description = "Average time taken to fetch a batch of metastore events";
  tmp162.__isset.description = true;
  tmp162.key = "events-processor.avg-events-fetch-duration";
  tmp162.__isset.key = true;
  tmp162.kind = ( ::impala::TMetricKind::type)0;
  tmp162.__isset.kind = true;
  tmp162.label = "Average duration to fetch metastore events";
  tmp162.__isset.label = true;
  tmp162.units = ( ::impala::TUnit::type)9;
  tmp162.__isset.units = true;

  TMetricDefs.insert(std::make_pair("events-processor.avg-events-fetch-duration", tmp162));
  TMetricDef tmp164;
  std::vector<std::string>  tmp165;
  tmp165.push_back("CATALOGSERVER");

  tmp164.contexts = tmp165;
  tmp164.__isset.contexts = true;
  tmp164.description = "Average time taken to process a batch of events received from metastore";
  tmp164.__isset.description = true;
  tmp164.key = "events-processor.avg-events-process-duration";
  tmp164.__isset.key = true;
  tmp164.kind = ( ::impala::TMetricKind::type)0;
  tmp164.__isset.kind = true;
  tmp164.label = "Average duration to process a batch of metastore events";
  tmp164.__isset.label = true;
  tmp164.units = ( ::impala::TUnit::type)9;
  tmp164.__isset.units = true;

  TMetricDefs.insert(std::make_pair("events-processor.avg-events-process-duration", tmp164));
  TMetricDef tmp166;
  std::vector<std::string>  tmp167;
  tmp167.push_back("CATALOGSERVER");

  tmp166.contexts = tmp167;
  tmp166.__isset.contexts = true;
  tmp166.description = "Total number of metastore events received";
  tmp166.__isset.description = true;
  tmp166.key = "events-processor.events-received";
  tmp166.__isset.key = true;
  tmp166.kind = ( ::impala::TMetricKind::type)1;
  tmp166.__isset.kind = true;
  tmp166.label = "Total number of metastore events received";
  tmp166.__isset.label = true;
  tmp166.units = ( ::impala::TUnit::type)7;
  tmp166.__isset.units = true;

  TMetricDefs.insert(std::make_pair("events-processor.events-received", tmp166));
  TMetricDef tmp168;
  std::vector<std::string>  tmp169;
  tmp169.push_back("CATALOGSERVER");

  tmp168.contexts = tmp169;
  tmp168.__isset.contexts = true;
  tmp168.description = "Exponentially weighted moving average (EWMA) of number of events received in last 15 min";
  tmp168.__isset.description = true;
  tmp168.key = "events-processor.events-received-15min-rate";
  tmp168.__isset.key = true;
  tmp168.kind = ( ::impala::TMetricKind::type)0;
  tmp168.__isset.kind = true;
  tmp168.label = "EWMA of number of events received in last 15 min";
  tmp168.__isset.label = true;
  tmp168.units = ( ::impala::TUnit::type)7;
  tmp168.__isset.units = true;

  TMetricDefs.insert(std::make_pair("events-processor.events-received-15min-rate", tmp168));
  TMetricDef tmp170;
  std::vector<std::string>  tmp171;
  tmp171.push_back("CATALOGSERVER");

  tmp170.contexts = tmp171;
  tmp170.__isset.contexts = true;
  tmp170.description = "Exponentially weighted moving average (EWMA) of number of events received in last 1 min";
  tmp170.__isset.description = true;
  tmp170.key = "events-processor.events-received-1min-rate";
  tmp170.__isset.key = true;
  tmp170.kind = ( ::impala::TMetricKind::type)0;
  tmp170.__isset.kind = true;
  tmp170.label = "EWMA of events received in last 1 min";
  tmp170.__isset.label = true;
  tmp170.units = ( ::impala::TUnit::type)7;
  tmp170.__isset.units = true;

  TMetricDefs.insert(std::make_pair("events-processor.events-received-1min-rate", tmp170));
  TMetricDef tmp172;
  std::vector<std::string>  tmp173;
  tmp173.push_back("CATALOGSERVER");

  tmp172.contexts = tmp173;
  tmp172.__isset.contexts = true;
  tmp172.description = "Exponentially weighted moving average (EWMA) of number of events received in last 5 min";
  tmp172.__isset.description = true;
  tmp172.key = "events-processor.events-received-5min-rate";
  tmp172.__isset.key = true;
  tmp172.kind = ( ::impala::TMetricKind::type)0;
  tmp172.__isset.kind = true;
  tmp172.label = "EWMA of number of events received in last 5 min";
  tmp172.__isset.label = true;
  tmp172.units = ( ::impala::TUnit::type)7;
  tmp172.__isset.units = true;

  TMetricDefs.insert(std::make_pair("events-processor.events-received-5min-rate", tmp172));
  TMetricDef tmp174;
  std::vector<std::string>  tmp175;
  tmp175.push_back("CATALOGSERVER");

  tmp174.contexts = tmp175;
  tmp174.__isset.contexts = true;
  tmp174.description = "Total number of metastore events skipped";
  tmp174.__isset.description = true;
  tmp174.key = "events-processor.events-skipped";
  tmp174.__isset.key = true;
  tmp174.kind = ( ::impala::TMetricKind::type)1;
  tmp174.__isset.kind = true;
  tmp174.label = "Total number of metastore events skipped";
  tmp174.__isset.label = true;
  tmp174.units = ( ::impala::TUnit::type)7;
  tmp174.__isset.units = true;

  TMetricDefs.insert(std::make_pair("events-processor.events-skipped", tmp174));
  TMetricDef tmp176;
  std::vector<std::string>  tmp177;
  tmp177.push_back("CATALOGSERVER");

  tmp176.contexts = tmp177;
  tmp176.__isset.contexts = true;
  tmp176.description = "Last metastore event id that the catalog server processed and synced to";
  tmp176.__isset.description = true;
  tmp176.key = "events-processor.last-synced-event-id";
  tmp176.__isset.key = true;
  tmp176.kind = ( ::impala::TMetricKind::type)1;
  tmp176.__isset.kind = true;
  tmp176.label = "Last Synced Event Id";
  tmp176.__isset.label = true;
  tmp176.units = ( ::impala::TUnit::type)7;
  tmp176.__isset.units = true;

  TMetricDefs.insert(std::make_pair("events-processor.last-synced-event-id", tmp176));
  TMetricDef tmp178;
  std::vector<std::string>  tmp179;
  tmp179.push_back("CATALOGSERVER");

  tmp178.contexts = tmp179;
  tmp178.__isset.contexts = true;
  tmp178.description = "Metastore event processor status";
  tmp178.__isset.description = true;
  tmp178.key = "events-processor.status";
  tmp178.__isset.key = true;
  tmp178.kind = ( ::impala::TMetricKind::type)2;
  tmp178.__isset.kind = true;
  tmp178.label = "The status of Metastore event processor";
  tmp178.__isset.label = true;
  tmp178.units = ( ::impala::TUnit::type)7;
  tmp178.__isset.units = true;

  TMetricDefs.insert(std::make_pair("events-processor.status", tmp178));
  TMetricDef tmp180;
  std::vector<std::string>  tmp181;
  tmp181.push_back("IMPALAD");

  tmp180.contexts = tmp181;
  tmp180.__isset.contexts = true;
  tmp180.description = "Number of cache hits in the External Data Source Class Cache";
  tmp180.__isset.description = true;
  tmp180.key = "external-data-source.class-cache.hits";
  tmp180.__isset.key = true;
  tmp180.kind = ( ::impala::TMetricKind::type)1;
  tmp180.__isset.kind = true;
  tmp180.label = "External Data Source Class Cache Hits";
  tmp180.__isset.label = true;
  tmp180.units = ( ::impala::TUnit::type)0;
  tmp180.__isset.units = true;

  TMetricDefs.insert(std::make_pair("external-data-source.class-cache.hits", tmp180));
  TMetricDef tmp182;
  std::vector<std::string>  tmp183;
  tmp183.push_back("IMPALAD");

  tmp182.contexts = tmp183;
  tmp182.__isset.contexts = true;
  tmp182.description = "Number of cache misses in the External Data Source Class Cache";
  tmp182.__isset.description = true;
  tmp182.key = "external-data-source.class-cache.misses";
  tmp182.__isset.key = true;
  tmp182.kind = ( ::impala::TMetricKind::type)1;
  tmp182.__isset.kind = true;
  tmp182.label = "External Data Source Class Cache Misses";
  tmp182.__isset.label = true;
  tmp182.units = ( ::impala::TUnit::type)0;
  tmp182.__isset.units = true;

  TMetricDefs.insert(std::make_pair("external-data-source.class-cache.misses", tmp182));
  TMetricDef tmp184;
  std::vector<std::string>  tmp185;
  tmp185.push_back("IMPALAD");

  tmp184.contexts = tmp185;
  tmp184.__isset.contexts = true;
  tmp184.description = "The total number of queries that executed on this backend over the life of the process.";
  tmp184.__isset.description = true;
  tmp184.key = "impala-server.backend-num-queries-executed";
  tmp184.__isset.key = true;
  tmp184.kind = ( ::impala::TMetricKind::type)1;
  tmp184.__isset.kind = true;
  tmp184.label = "Queries Executed On Backend";
  tmp184.__isset.label = true;
  tmp184.units = ( ::impala::TUnit::type)0;
  tmp184.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.backend-num-queries-executed", tmp184));
  TMetricDef tmp186;
  std::vector<std::string>  tmp187;
  tmp187.push_back("IMPALAD");

  tmp186.contexts = tmp187;
  tmp186.__isset.contexts = true;
  tmp186.description = "The number of queries currently executing on this backend.";
  tmp186.__isset.description = true;
  tmp186.key = "impala-server.backend-num-queries-executing";
  tmp186.__isset.key = true;
  tmp186.kind = ( ::impala::TMetricKind::type)0;
  tmp186.__isset.kind = true;
  tmp186.label = "Queries Executing On Backend";
  tmp186.__isset.label = true;
  tmp186.units = ( ::impala::TUnit::type)0;
  tmp186.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.backend-num-queries-executing", tmp186));
  TMetricDef tmp188;
  std::vector<std::string>  tmp189;
  tmp189.push_back("IMPALAD");

  tmp188.contexts = tmp189;
  tmp188.__isset.contexts = true;
  tmp188.description = "The number of active Impala Backend clients. These clients are for communication with other Impala Daemons.";
  tmp188.__isset.description = true;
  tmp188.key = "impala-server.backends.client-cache.clients-in-use";
  tmp188.__isset.key = true;
  tmp188.kind = ( ::impala::TMetricKind::type)0;
  tmp188.__isset.kind = true;
  tmp188.label = "Impala Backend Active Clients";
  tmp188.__isset.label = true;
  tmp188.units = ( ::impala::TUnit::type)7;
  tmp188.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.backends.client-cache.clients-in-use", tmp188));
  TMetricDef tmp190;
  std::vector<std::string>  tmp191;
  tmp191.push_back("IMPALAD");

  tmp190.contexts = tmp191;
  tmp190.__isset.contexts = true;
  tmp190.description = "The total number of Impala Backend clients in this Impala Daemon's client cache. These clients are for communication with other Impala Daemons.";
  tmp190.__isset.description = true;
  tmp190.key = "impala-server.backends.client-cache.total-clients";
  tmp190.__isset.key = true;
  tmp190.kind = ( ::impala::TMetricKind::type)0;
  tmp190.__isset.kind = true;
  tmp190.label = "Impala Backend Total Clients";
  tmp190.__isset.label = true;
  tmp190.units = ( ::impala::TUnit::type)7;
  tmp190.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.backends.client-cache.total-clients", tmp190));
  TMetricDef tmp192;
  std::vector<std::string>  tmp193;
  tmp193.push_back("IMPALAD");

  tmp192.contexts = tmp193;
  tmp192.__isset.contexts = true;
  tmp192.description = "Distribution of DDL operation latencies";
  tmp192.__isset.description = true;
  tmp192.key = "impala-server.ddl-durations-ms";
  tmp192.__isset.key = true;
  tmp192.kind = ( ::impala::TMetricKind::type)5;
  tmp192.__isset.kind = true;
  tmp192.label = "DDL latency distribution";
  tmp192.__isset.label = true;
  tmp192.units = ( ::impala::TUnit::type)8;
  tmp192.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.ddl-durations-ms", tmp192));
  TMetricDef tmp194;
  std::vector<std::string>  tmp195;
  tmp195.push_back("IMPALAD");

  tmp194.contexts = tmp195;
  tmp194.__isset.contexts = true;
  tmp194.description = "The total number of hedged reads attempted over the life of the process";
  tmp194.__isset.description = true;
  tmp194.key = "impala-server.hedged-read-ops";
  tmp194.__isset.key = true;
  tmp194.kind = ( ::impala::TMetricKind::type)1;
  tmp194.__isset.kind = true;
  tmp194.label = "Hedged Read Operations";
  tmp194.__isset.label = true;
  tmp194.units = ( ::impala::TUnit::type)0;
  tmp194.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.hedged-read-ops", tmp194));
  TMetricDef tmp196;
  std::vector<std::string>  tmp197;
  tmp197.push_back("IMPALAD");

  tmp196.contexts = tmp197;
  tmp196.__isset.contexts = true;
  tmp196.description = "The total number of times hedged reads were faster than regular read operations";
  tmp196.__isset.description = true;
  tmp196.key = "impala-server.hedged-read-ops-win";
  tmp196.__isset.key = true;
  tmp196.kind = ( ::impala::TMetricKind::type)1;
  tmp196.__isset.kind = true;
  tmp196.label = "Hedged Read Operations Won";
  tmp196.__isset.label = true;
  tmp196.units = ( ::impala::TUnit::type)0;
  tmp196.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.hedged-read-ops-win", tmp196));
  TMetricDef tmp198;
  std::vector<std::string>  tmp199;
  tmp199.push_back("IMPALAD");

  tmp198.contexts = tmp199;
  tmp198.__isset.contexts = true;
  tmp198.description = "The total number of bytes read by the IO manager.";
  tmp198.__isset.description = true;
  tmp198.key = "impala-server.io-mgr.bytes-read";
  tmp198.__isset.key = true;
  tmp198.kind = ( ::impala::TMetricKind::type)1;
  tmp198.__isset.kind = true;
  tmp198.label = "Impala Server Io Mgr Bytes Read";
  tmp198.__isset.label = true;
  tmp198.units = ( ::impala::TUnit::type)3;
  tmp198.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.bytes-read", tmp198));
  TMetricDef tmp200;
  std::vector<std::string>  tmp201;
  tmp201.push_back("IMPALAD");

  tmp200.contexts = tmp201;
  tmp200.__isset.contexts = true;
  tmp200.description = "Total number of bytes written to disk by the IO manager.";
  tmp200.__isset.description = true;
  tmp200.key = "impala-server.io-mgr.bytes-written";
  tmp200.__isset.key = true;
  tmp200.kind = ( ::impala::TMetricKind::type)1;
  tmp200.__isset.kind = true;
  tmp200.label = "Impala Server Io Mgr Bytes Written";
  tmp200.__isset.label = true;
  tmp200.units = ( ::impala::TUnit::type)3;
  tmp200.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.bytes-written", tmp200));
  TMetricDef tmp202;
  std::vector<std::string>  tmp203;
  tmp203.push_back("IMPALAD");

  tmp202.contexts = tmp203;
  tmp202.__isset.contexts = true;
  tmp202.description = "Total number of cached bytes read by the IO manager.";
  tmp202.__isset.description = true;
  tmp202.key = "impala-server.io-mgr.cached-bytes-read";
  tmp202.__isset.key = true;
  tmp202.kind = ( ::impala::TMetricKind::type)1;
  tmp202.__isset.kind = true;
  tmp202.label = "Impala Server Io Mgr Cached Bytes Read";
  tmp202.__isset.label = true;
  tmp202.units = ( ::impala::TUnit::type)3;
  tmp202.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.cached-bytes-read", tmp202));
  TMetricDef tmp204;
  std::vector<std::string>  tmp205;
  tmp205.push_back("IMPALAD");

  tmp204.contexts = tmp205;
  tmp204.__isset.contexts = true;
  tmp204.description = "Total number of local bytes read by the IO manager.";
  tmp204.__isset.description = true;
  tmp204.key = "impala-server.io-mgr.local-bytes-read";
  tmp204.__isset.key = true;
  tmp204.kind = ( ::impala::TMetricKind::type)1;
  tmp204.__isset.kind = true;
  tmp204.label = "Impala Server Io Mgr Local Bytes Read";
  tmp204.__isset.label = true;
  tmp204.units = ( ::impala::TUnit::type)3;
  tmp204.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.local-bytes-read", tmp204));
  TMetricDef tmp206;
  std::vector<std::string>  tmp207;
  tmp207.push_back("IMPALAD");

  tmp206.contexts = tmp207;
  tmp206.__isset.contexts = true;
  tmp206.description = "The number of allocated IO buffers. IO buffers are shared by all queries.";
  tmp206.__isset.description = true;
  tmp206.key = "impala-server.io-mgr.num-buffers";
  tmp206.__isset.key = true;
  tmp206.kind = ( ::impala::TMetricKind::type)0;
  tmp206.__isset.kind = true;
  tmp206.label = "IO Buffers";
  tmp206.__isset.label = true;
  tmp206.units = ( ::impala::TUnit::type)7;
  tmp206.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.num-buffers", tmp206));
  TMetricDef tmp208;
  std::vector<std::string>  tmp209;
  tmp209.push_back("IMPALAD");

  tmp208.contexts = tmp209;
  tmp208.__isset.contexts = true;
  tmp208.description = "The current number of files opened by the IO Manager";
  tmp208.__isset.description = true;
  tmp208.key = "impala-server.io-mgr.num-open-files";
  tmp208.__isset.key = true;
  tmp208.kind = ( ::impala::TMetricKind::type)0;
  tmp208.__isset.kind = true;
  tmp208.label = "Open Files";
  tmp208.__isset.label = true;
  tmp208.units = ( ::impala::TUnit::type)7;
  tmp208.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.num-open-files", tmp208));
  TMetricDef tmp210;
  std::vector<std::string>  tmp211;
  tmp211.push_back("IMPALAD");

  tmp210.contexts = tmp211;
  tmp210.__isset.contexts = true;
  tmp210.description = "The number of unused IO buffers. IO buffers are shared by all queries.";
  tmp210.__isset.description = true;
  tmp210.key = "impala-server.io-mgr.num-unused-buffers";
  tmp210.__isset.key = true;
  tmp210.kind = ( ::impala::TMetricKind::type)0;
  tmp210.__isset.kind = true;
  tmp210.label = "Unused IO Buffers";
  tmp210.__isset.label = true;
  tmp210.units = ( ::impala::TUnit::type)7;
  tmp210.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.num-unused-buffers", tmp210));
  TMetricDef tmp212;
  std::vector<std::string>  tmp213;
  tmp213.push_back("IMPALAD");

  tmp212.contexts = tmp213;
  tmp212.__isset.contexts = true;
  tmp212.description = "IO Manager device name.";
  tmp212.__isset.description = true;
  tmp212.key = "impala-server.io-mgr.queue-$0.device-name";
  tmp212.__isset.key = true;
  tmp212.kind = ( ::impala::TMetricKind::type)2;
  tmp212.__isset.kind = true;
  tmp212.label = "Impala Server Io Mgr Queue Device Name";
  tmp212.__isset.label = true;
  tmp212.units = ( ::impala::TUnit::type)7;
  tmp212.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.queue-$0.device-name", tmp212));
  TMetricDef tmp214;
  std::vector<std::string>  tmp215;
  tmp215.push_back("IMPALAD");

  tmp214.contexts = tmp215;
  tmp214.__isset.contexts = true;
  tmp214.description = "Histogram of read operation times on disk.";
  tmp214.__isset.description = true;
  tmp214.key = "impala-server.io-mgr.queue-$0.read-latency";
  tmp214.__isset.key = true;
  tmp214.kind = ( ::impala::TMetricKind::type)5;
  tmp214.__isset.kind = true;
  tmp214.label = "Impala Server Io Mgr Read Latency Histogram";
  tmp214.__isset.label = true;
  tmp214.units = ( ::impala::TUnit::type)5;
  tmp214.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.queue-$0.read-latency", tmp214));
  TMetricDef tmp216;
  std::vector<std::string>  tmp217;
  tmp217.push_back("IMPALAD");

  tmp216.contexts = tmp217;
  tmp216.__isset.contexts = true;
  tmp216.description = "Histogram of read operation sizes on disk.";
  tmp216.__isset.description = true;
  tmp216.key = "impala-server.io-mgr.queue-$0.read-size";
  tmp216.__isset.key = true;
  tmp216.kind = ( ::impala::TMetricKind::type)5;
  tmp216.__isset.kind = true;
  tmp216.label = "Impala Server Io Mgr Read Size Histogram";
  tmp216.__isset.label = true;
  tmp216.units = ( ::impala::TUnit::type)3;
  tmp216.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.queue-$0.read-size", tmp216));
  TMetricDef tmp218;
  std::vector<std::string>  tmp219;
  tmp219.push_back("IMPALAD");

  tmp218.contexts = tmp219;
  tmp218.__isset.contexts = true;
  tmp218.description = "The number of write io errors on disk.";
  tmp218.__isset.description = true;
  tmp218.key = "impala-server.io-mgr.queue-$0.write-io-error";
  tmp218.__isset.key = true;
  tmp218.kind = ( ::impala::TMetricKind::type)1;
  tmp218.__isset.kind = true;
  tmp218.label = "Impala Server Io Mgr Write IO Error Count";
  tmp218.__isset.label = true;
  tmp218.units = ( ::impala::TUnit::type)7;
  tmp218.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.queue-$0.write-io-error", tmp218));
  TMetricDef tmp220;
  std::vector<std::string>  tmp221;
  tmp221.push_back("IMPALAD");

  tmp220.contexts = tmp221;
  tmp220.__isset.contexts = true;
  tmp220.description = "Histogram of write operation times on disk.";
  tmp220.__isset.description = true;
  tmp220.key = "impala-server.io-mgr.queue-$0.write-latency";
  tmp220.__isset.key = true;
  tmp220.kind = ( ::impala::TMetricKind::type)5;
  tmp220.__isset.kind = true;
  tmp220.label = "Impala Server Io Mgr Write Latency Histogram";
  tmp220.__isset.label = true;
  tmp220.units = ( ::impala::TUnit::type)5;
  tmp220.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.queue-$0.write-latency", tmp220));
  TMetricDef tmp222;
  std::vector<std::string>  tmp223;
  tmp223.push_back("IMPALAD");

  tmp222.contexts = tmp223;
  tmp222.__isset.contexts = true;
  tmp222.description = "Histogram of write operation sizes on disk.";
  tmp222.__isset.description = true;
  tmp222.key = "impala-server.io-mgr.queue-$0.write-size";
  tmp222.__isset.key = true;
  tmp222.kind = ( ::impala::TMetricKind::type)5;
  tmp222.__isset.kind = true;
  tmp222.label = "Impala Server Io Mgr Write Size Histogram";
  tmp222.__isset.label = true;
  tmp222.units = ( ::impala::TUnit::type)3;
  tmp222.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.queue-$0.write-size", tmp222));
  TMetricDef tmp224;
  std::vector<std::string>  tmp225;
  tmp225.push_back("IMPALAD");

  tmp224.contexts = tmp225;
  tmp224.__isset.contexts = true;
  tmp224.description = "Total number of bytes not inserted in remote data cache due to concurrency limit.";
  tmp224.__isset.description = true;
  tmp224.key = "impala-server.io-mgr.remote-data-cache-dropped-bytes";
  tmp224.__isset.key = true;
  tmp224.kind = ( ::impala::TMetricKind::type)1;
  tmp224.__isset.kind = true;
  tmp224.label = "Impala Server Io Mgr Remote Data Cache Bytes Not Inserted Due To Concurrency limit";
  tmp224.__isset.label = true;
  tmp224.units = ( ::impala::TUnit::type)3;
  tmp224.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-dropped-bytes", tmp224));
  TMetricDef tmp226;
  std::vector<std::string>  tmp227;
  tmp227.push_back("IMPALAD");

  tmp226.contexts = tmp227;
  tmp226.__isset.contexts = true;
  tmp226.description = "Total number of entries not inserted in remote data cache due to concurrency limit.";
  tmp226.__isset.description = true;
  tmp226.key = "impala-server.io-mgr.remote-data-cache-dropped-entries";
  tmp226.__isset.key = true;
  tmp226.kind = ( ::impala::TMetricKind::type)1;
  tmp226.__isset.kind = true;
  tmp226.label = "Impala Server Io Mgr Remote Data Cache Entries Not Inserted Due To Concurrency Limit";
  tmp226.__isset.label = true;
  tmp226.units = ( ::impala::TUnit::type)0;
  tmp226.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-dropped-entries", tmp226));
  TMetricDef tmp228;
  std::vector<std::string>  tmp229;
  tmp229.push_back("IMPALAD");

  tmp228.contexts = tmp229;
  tmp228.__isset.contexts = true;
  tmp228.description = "Total number of bytes of hits in the remote data cache.";
  tmp228.__isset.description = true;
  tmp228.key = "impala-server.io-mgr.remote-data-cache-hit-bytes";
  tmp228.__isset.key = true;
  tmp228.kind = ( ::impala::TMetricKind::type)1;
  tmp228.__isset.kind = true;
  tmp228.label = "Impala Server Io Mgr Remote Data Cache Hit In Bytes";
  tmp228.__isset.label = true;
  tmp228.units = ( ::impala::TUnit::type)3;
  tmp228.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-hit-bytes", tmp228));
  TMetricDef tmp230;
  std::vector<std::string>  tmp231;
  tmp231.push_back("IMPALAD");

  tmp230.contexts = tmp231;
  tmp230.__isset.contexts = true;
  tmp230.description = "Total number of hits in the remote data cache.";
  tmp230.__isset.description = true;
  tmp230.key = "impala-server.io-mgr.remote-data-cache-hit-count";
  tmp230.__isset.key = true;
  tmp230.kind = ( ::impala::TMetricKind::type)1;
  tmp230.__isset.kind = true;
  tmp230.label = "Impala Server Io Mgr Remote Data Cache Hit Count";
  tmp230.__isset.label = true;
  tmp230.units = ( ::impala::TUnit::type)0;
  tmp230.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-hit-count", tmp230));
  TMetricDef tmp232;
  std::vector<std::string>  tmp233;
  tmp233.push_back("IMPALAD");

  tmp232.contexts = tmp233;
  tmp232.__isset.contexts = true;
  tmp232.description = "Total number of instantaneous evictions from the remote data cache. An instantaneous eviction happens when the eviction policy rejects an entry during insert.";
  tmp232.__isset.description = true;
  tmp232.key = "impala-server.io-mgr.remote-data-cache-instant-evictions";
  tmp232.__isset.key = true;
  tmp232.kind = ( ::impala::TMetricKind::type)1;
  tmp232.__isset.kind = true;
  tmp232.label = "Impala Server Io Mgr Remote Data Cache Num Instant Evictions";
  tmp232.__isset.label = true;
  tmp232.units = ( ::impala::TUnit::type)0;
  tmp232.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-instant-evictions", tmp232));
  TMetricDef tmp234;
  std::vector<std::string>  tmp235;
  tmp235.push_back("IMPALAD");

  tmp234.contexts = tmp235;
  tmp234.__isset.contexts = true;
  tmp234.description = "Total number of bytes of misses in the remote data cache.";
  tmp234.__isset.description = true;
  tmp234.key = "impala-server.io-mgr.remote-data-cache-miss-bytes";
  tmp234.__isset.key = true;
  tmp234.kind = ( ::impala::TMetricKind::type)1;
  tmp234.__isset.kind = true;
  tmp234.label = "Impala Server Io Mgr Remote Data Cache Miss In Bytes";
  tmp234.__isset.label = true;
  tmp234.units = ( ::impala::TUnit::type)3;
  tmp234.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-miss-bytes", tmp234));
  TMetricDef tmp236;
  std::vector<std::string>  tmp237;
  tmp237.push_back("IMPALAD");

  tmp236.contexts = tmp237;
  tmp236.__isset.contexts = true;
  tmp236.description = "Total number of misses in the remote data cache.";
  tmp236.__isset.description = true;
  tmp236.key = "impala-server.io-mgr.remote-data-cache-miss-count";
  tmp236.__isset.key = true;
  tmp236.kind = ( ::impala::TMetricKind::type)1;
  tmp236.__isset.kind = true;
  tmp236.label = "Impala Server Io Mgr Remote Data Cache Miss Count";
  tmp236.__isset.label = true;
  tmp236.units = ( ::impala::TUnit::type)0;
  tmp236.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-miss-count", tmp236));
  TMetricDef tmp238;
  std::vector<std::string>  tmp239;
  tmp239.push_back("IMPALAD");

  tmp238.contexts = tmp239;
  tmp238.__isset.contexts = true;
  tmp238.description = "Current number of entries in the remote data cache.";
  tmp238.__isset.description = true;
  tmp238.key = "impala-server.io-mgr.remote-data-cache-num-entries";
  tmp238.__isset.key = true;
  tmp238.kind = ( ::impala::TMetricKind::type)0;
  tmp238.__isset.kind = true;
  tmp238.label = "Impala Server Io Mgr Remote Data Cache Num Entries";
  tmp238.__isset.label = true;
  tmp238.units = ( ::impala::TUnit::type)0;
  tmp238.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-num-entries", tmp238));
  TMetricDef tmp240;
  std::vector<std::string>  tmp241;
  tmp241.push_back("IMPALAD");

  tmp240.contexts = tmp241;
  tmp240.__isset.contexts = true;
  tmp240.description = "Total number of writes into the remote data cache.";
  tmp240.__isset.description = true;
  tmp240.key = "impala-server.io-mgr.remote-data-cache-num-writes";
  tmp240.__isset.key = true;
  tmp240.kind = ( ::impala::TMetricKind::type)1;
  tmp240.__isset.kind = true;
  tmp240.label = "Impala Server Io Mgr Remote Data Cache Num Writes";
  tmp240.__isset.label = true;
  tmp240.units = ( ::impala::TUnit::type)0;
  tmp240.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-num-writes", tmp240));
  TMetricDef tmp242;
  std::vector<std::string>  tmp243;
  tmp243.push_back("IMPALAD");

  tmp242.contexts = tmp243;
  tmp242.__isset.contexts = true;
  tmp242.description = "Histogram of eviction operation times for data cache partition";
  tmp242.__isset.description = true;
  tmp242.key = "impala-server.io-mgr.remote-data-cache-partition-$0.eviction-latency";
  tmp242.__isset.key = true;
  tmp242.kind = ( ::impala::TMetricKind::type)5;
  tmp242.__isset.kind = true;
  tmp242.label = "Impala Server Io Mgr Remote Data Cache Partition Eviction Latency";
  tmp242.__isset.label = true;
  tmp242.units = ( ::impala::TUnit::type)5;
  tmp242.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-partition-$0.eviction-latency", tmp242));
  TMetricDef tmp244;
  std::vector<std::string>  tmp245;
  tmp245.push_back("IMPALAD");

  tmp244.contexts = tmp245;
  tmp244.__isset.contexts = true;
  tmp244.description = "Data Cache Partition Path";
  tmp244.__isset.description = true;
  tmp244.key = "impala-server.io-mgr.remote-data-cache-partition-$0.path";
  tmp244.__isset.key = true;
  tmp244.kind = ( ::impala::TMetricKind::type)2;
  tmp244.__isset.kind = true;
  tmp244.label = "Impala Server Io Mgr Remote Data Cache Partition Path";
  tmp244.__isset.label = true;
  tmp244.units = ( ::impala::TUnit::type)7;
  tmp244.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-partition-$0.path", tmp244));
  TMetricDef tmp246;
  std::vector<std::string>  tmp247;
  tmp247.push_back("IMPALAD");

  tmp246.contexts = tmp247;
  tmp246.__isset.contexts = true;
  tmp246.description = "Histogram of read operation times for data cache partition";
  tmp246.__isset.description = true;
  tmp246.key = "impala-server.io-mgr.remote-data-cache-partition-$0.read-latency";
  tmp246.__isset.key = true;
  tmp246.kind = ( ::impala::TMetricKind::type)5;
  tmp246.__isset.kind = true;
  tmp246.label = "Impala Server Io Mgr Remote Data Cache Partition Read Latency";
  tmp246.__isset.label = true;
  tmp246.units = ( ::impala::TUnit::type)5;
  tmp246.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-partition-$0.read-latency", tmp246));
  TMetricDef tmp248;
  std::vector<std::string>  tmp249;
  tmp249.push_back("IMPALAD");

  tmp248.contexts = tmp249;
  tmp248.__isset.contexts = true;
  tmp248.description = "Histogram of write operation times for data cache partition";
  tmp248.__isset.description = true;
  tmp248.key = "impala-server.io-mgr.remote-data-cache-partition-$0.write-latency";
  tmp248.__isset.key = true;
  tmp248.kind = ( ::impala::TMetricKind::type)5;
  tmp248.__isset.kind = true;
  tmp248.label = "Impala Server Io Mgr Remote Data Cache Partition Write Latency";
  tmp248.__isset.label = true;
  tmp248.units = ( ::impala::TUnit::type)5;
  tmp248.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-partition-$0.write-latency", tmp248));
  TMetricDef tmp250;
  std::vector<std::string>  tmp251;
  tmp251.push_back("IMPALAD");

  tmp250.contexts = tmp251;
  tmp250.__isset.contexts = true;
  tmp250.description = "Current byte size of the remote data cache.";
  tmp250.__isset.description = true;
  tmp250.key = "impala-server.io-mgr.remote-data-cache-total-bytes";
  tmp250.__isset.key = true;
  tmp250.kind = ( ::impala::TMetricKind::type)0;
  tmp250.__isset.kind = true;
  tmp250.label = "Impala Server Io Mgr Remote Data Cache Bytes Size";
  tmp250.__isset.label = true;
  tmp250.units = ( ::impala::TUnit::type)3;
  tmp250.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.remote-data-cache-total-bytes", tmp250));
  TMetricDef tmp252;
  std::vector<std::string>  tmp253;
  tmp253.push_back("IMPALAD");

  tmp252.contexts = tmp253;
  tmp252.__isset.contexts = true;
  tmp252.description = "Total number of short-circuit bytes read by the IO manager.";
  tmp252.__isset.description = true;
  tmp252.key = "impala-server.io-mgr.short-circuit-bytes-read";
  tmp252.__isset.key = true;
  tmp252.kind = ( ::impala::TMetricKind::type)1;
  tmp252.__isset.kind = true;
  tmp252.label = "Impala Server Io Mgr Short Circuit Bytes Read";
  tmp252.__isset.label = true;
  tmp252.units = ( ::impala::TUnit::type)3;
  tmp252.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.short-circuit-bytes-read", tmp252));
  TMetricDef tmp254;
  std::vector<std::string>  tmp255;
  tmp255.push_back("IMPALAD");

  tmp254.contexts = tmp255;
  tmp254.__isset.contexts = true;
  tmp254.description = "Number of bytes used by IO buffers (used and unused).";
  tmp254.__isset.description = true;
  tmp254.key = "impala-server.io-mgr.total-bytes";
  tmp254.__isset.key = true;
  tmp254.kind = ( ::impala::TMetricKind::type)0;
  tmp254.__isset.kind = true;
  tmp254.label = "IO Buffers Total Size";
  tmp254.__isset.label = true;
  tmp254.units = ( ::impala::TUnit::type)3;
  tmp254.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io-mgr.total-bytes", tmp254));
  TMetricDef tmp256;
  std::vector<std::string>  tmp257;
  tmp257.push_back("IMPALAD");

  tmp256.contexts = tmp257;
  tmp256.__isset.contexts = true;
  tmp256.description = "Number of cache hits for cached HDFS file handles";
  tmp256.__isset.description = true;
  tmp256.key = "impala-server.io.mgr.cached-file-handles-hit-count";
  tmp256.__isset.key = true;
  tmp256.kind = ( ::impala::TMetricKind::type)0;
  tmp256.__isset.kind = true;
  tmp256.label = "HDFS cached file handles hit count";
  tmp256.__isset.label = true;
  tmp256.units = ( ::impala::TUnit::type)7;
  tmp256.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io.mgr.cached-file-handles-hit-count", tmp256));
  TMetricDef tmp258;
  std::vector<std::string>  tmp259;
  tmp259.push_back("IMPALAD");

  tmp258.contexts = tmp259;
  tmp258.__isset.contexts = true;
  tmp258.description = "HDFS file handle cache hit ratio, between 0 and 1, where 1 means all reads were served from cached file handles.";
  tmp258.__isset.description = true;
  tmp258.key = "impala-server.io.mgr.cached-file-handles-hit-ratio";
  tmp258.__isset.key = true;
  tmp258.kind = ( ::impala::TMetricKind::type)3;
  tmp258.__isset.kind = true;
  tmp258.label = "HDFS file handle cache hit ratio";
  tmp258.__isset.label = true;
  tmp258.units = ( ::impala::TUnit::type)7;
  tmp258.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io.mgr.cached-file-handles-hit-ratio", tmp258));
  TMetricDef tmp260;
  std::vector<std::string>  tmp261;
  tmp261.push_back("IMPALAD");

  tmp260.contexts = tmp261;
  tmp260.__isset.contexts = true;
  tmp260.description = "Number of cache misses for cached HDFS file handles";
  tmp260.__isset.description = true;
  tmp260.key = "impala-server.io.mgr.cached-file-handles-miss-count";
  tmp260.__isset.key = true;
  tmp260.kind = ( ::impala::TMetricKind::type)0;
  tmp260.__isset.kind = true;
  tmp260.label = "HDFS cached file handles miss count";
  tmp260.__isset.label = true;
  tmp260.units = ( ::impala::TUnit::type)7;
  tmp260.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io.mgr.cached-file-handles-miss-count", tmp260));
  TMetricDef tmp262;
  std::vector<std::string>  tmp263;
  tmp263.push_back("IMPALAD");

  tmp262.contexts = tmp263;
  tmp262.__isset.contexts = true;
  tmp262.description = "Number of cached HDFS file handles reopened";
  tmp262.__isset.description = true;
  tmp262.key = "impala-server.io.mgr.cached-file-handles-reopened";
  tmp262.__isset.key = true;
  tmp262.kind = ( ::impala::TMetricKind::type)1;
  tmp262.__isset.kind = true;
  tmp262.label = "HDFS cached file handles reopened";
  tmp262.__isset.label = true;
  tmp262.units = ( ::impala::TUnit::type)7;
  tmp262.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io.mgr.cached-file-handles-reopened", tmp262));
  TMetricDef tmp264;
  std::vector<std::string>  tmp265;
  tmp265.push_back("IMPALAD");

  tmp264.contexts = tmp265;
  tmp264.__isset.contexts = true;
  tmp264.description = "Number of currently cached HDFS file handles in the IO manager.";
  tmp264.__isset.description = true;
  tmp264.key = "impala-server.io.mgr.num-cached-file-handles";
  tmp264.__isset.key = true;
  tmp264.kind = ( ::impala::TMetricKind::type)0;
  tmp264.__isset.kind = true;
  tmp264.label = "Number of cached HDFS file handles";
  tmp264.__isset.label = true;
  tmp264.units = ( ::impala::TUnit::type)7;
  tmp264.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io.mgr.num-cached-file-handles", tmp264));
  TMetricDef tmp266;
  std::vector<std::string>  tmp267;
  tmp267.push_back("IMPALAD");

  tmp266.contexts = tmp267;
  tmp266.__isset.contexts = true;
  tmp266.description = "Number of HDFS file handles that are currently in use by readers.";
  tmp266.__isset.description = true;
  tmp266.key = "impala-server.io.mgr.num-file-handles-outstanding";
  tmp266.__isset.key = true;
  tmp266.kind = ( ::impala::TMetricKind::type)0;
  tmp266.__isset.kind = true;
  tmp266.label = "Number of outstanding HDFS file handles";
  tmp266.__isset.label = true;
  tmp266.units = ( ::impala::TUnit::type)7;
  tmp266.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.io.mgr.num-file-handles-outstanding", tmp266));
  TMetricDef tmp268;
  std::vector<std::string>  tmp269;
  tmp269.push_back("IMPALAD");

  tmp268.contexts = tmp269;
  tmp268.__isset.contexts = true;
  tmp268.description = "The number of HDFS files currently open for writing.";
  tmp268.__isset.description = true;
  tmp268.key = "impala-server.num-files-open-for-insert";
  tmp268.__isset.key = true;
  tmp268.kind = ( ::impala::TMetricKind::type)0;
  tmp268.__isset.kind = true;
  tmp268.label = "Files Open For Insert";
  tmp268.__isset.label = true;
  tmp268.units = ( ::impala::TUnit::type)7;
  tmp268.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.num-files-open-for-insert", tmp268));
  TMetricDef tmp270;
  std::vector<std::string>  tmp271;
  tmp271.push_back("IMPALAD");

  tmp270.contexts = tmp271;
  tmp270.__isset.contexts = true;
  tmp270.description = "The total number of query fragments processed over the life of the process.";
  tmp270.__isset.description = true;
  tmp270.key = "impala-server.num-fragments";
  tmp270.__isset.key = true;
  tmp270.kind = ( ::impala::TMetricKind::type)1;
  tmp270.__isset.kind = true;
  tmp270.label = "Query Fragment Instances";
  tmp270.__isset.label = true;
  tmp270.units = ( ::impala::TUnit::type)0;
  tmp270.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.num-fragments", tmp270));
  TMetricDef tmp272;
  std::vector<std::string>  tmp273;
  tmp273.push_back("IMPALAD");

  tmp272.contexts = tmp273;
  tmp272.__isset.contexts = true;
  tmp272.description = "The number of query fragment instances currently executing.";
  tmp272.__isset.description = true;
  tmp272.key = "impala-server.num-fragments-in-flight";
  tmp272.__isset.key = true;
  tmp272.kind = ( ::impala::TMetricKind::type)0;
  tmp272.__isset.kind = true;
  tmp272.label = "Query Fragment Instances Executing";
  tmp272.__isset.label = true;
  tmp272.units = ( ::impala::TUnit::type)0;
  tmp272.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.num-fragments-in-flight", tmp272));
  TMetricDef tmp274;
  std::vector<std::string>  tmp275;
  tmp275.push_back("IMPALAD");

  tmp274.contexts = tmp275;
  tmp274.__isset.contexts = true;
  tmp274.description = "The number of open Beeswax sessions.";
  tmp274.__isset.description = true;
  tmp274.key = "impala-server.num-open-beeswax-sessions";
  tmp274.__isset.key = true;
  tmp274.kind = ( ::impala::TMetricKind::type)0;
  tmp274.__isset.kind = true;
  tmp274.label = "Beeswax Sessions";
  tmp274.__isset.label = true;
  tmp274.units = ( ::impala::TUnit::type)7;
  tmp274.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.num-open-beeswax-sessions", tmp274));
  TMetricDef tmp276;
  std::vector<std::string>  tmp277;
  tmp277.push_back("IMPALAD");

  tmp276.contexts = tmp277;
  tmp276.__isset.contexts = true;
  tmp276.description = "The number of open HiveServer2 sessions.";
  tmp276.__isset.description = true;
  tmp276.key = "impala-server.num-open-hiveserver2-sessions";
  tmp276.__isset.key = true;
  tmp276.kind = ( ::impala::TMetricKind::type)0;
  tmp276.__isset.kind = true;
  tmp276.label = "HiveServer2 Sessions";
  tmp276.__isset.label = true;
  tmp276.units = ( ::impala::TUnit::type)7;
  tmp276.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.num-open-hiveserver2-sessions", tmp276));
  TMetricDef tmp278;
  std::vector<std::string>  tmp279;
  tmp279.push_back("IMPALAD");

  tmp278.contexts = tmp279;
  tmp278.__isset.contexts = true;
  tmp278.description = "The total number of queries processed over the life of the process";
  tmp278.__isset.description = true;
  tmp278.key = "impala-server.num-queries";
  tmp278.__isset.key = true;
  tmp278.kind = ( ::impala::TMetricKind::type)1;
  tmp278.__isset.kind = true;
  tmp278.label = "Queries";
  tmp278.__isset.label = true;
  tmp278.units = ( ::impala::TUnit::type)0;
  tmp278.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.num-queries", tmp278));
  TMetricDef tmp280;
  std::vector<std::string>  tmp281;
  tmp281.push_back("IMPALAD");

  tmp280.contexts = tmp281;
  tmp280.__isset.contexts = true;
  tmp280.description = "Number of queries expired due to inactivity.";
  tmp280.__isset.description = true;
  tmp280.key = "impala-server.num-queries-expired";
  tmp280.__isset.key = true;
  tmp280.kind = ( ::impala::TMetricKind::type)1;
  tmp280.__isset.kind = true;
  tmp280.label = "Queries Expired";
  tmp280.__isset.label = true;
  tmp280.units = ( ::impala::TUnit::type)0;
  tmp280.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.num-queries-expired", tmp280));
  TMetricDef tmp282;
  std::vector<std::string>  tmp283;
  tmp283.push_back("IMPALAD");

  tmp282.contexts = tmp283;
  tmp282.__isset.contexts = true;
  tmp282.description = "The total number of queries registered on this Impala server instance. Includes queries that are in flight and waiting to be closed";
  tmp282.__isset.description = true;
  tmp282.key = "impala-server.num-queries-registered";
  tmp282.__isset.key = true;
  tmp282.kind = ( ::impala::TMetricKind::type)0;
  tmp282.__isset.kind = true;
  tmp282.label = "Queries Registered";
  tmp282.__isset.label = true;
  tmp282.units = ( ::impala::TUnit::type)0;
  tmp282.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.num-queries-registered", tmp282));
  TMetricDef tmp284;
  std::vector<std::string>  tmp285;
  tmp285.push_back("IMPALAD");

  tmp284.contexts = tmp285;
  tmp284.__isset.contexts = true;
  tmp284.description = "Number of queries for which any operator spilled.";
  tmp284.__isset.description = true;
  tmp284.key = "impala-server.num-queries-spilled";
  tmp284.__isset.key = true;
  tmp284.kind = ( ::impala::TMetricKind::type)1;
  tmp284.__isset.kind = true;
  tmp284.label = "Impala Server Num Queries Spilled";
  tmp284.__isset.label = true;
  tmp284.units = ( ::impala::TUnit::type)0;
  tmp284.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.num-queries-spilled", tmp284));
  TMetricDef tmp286;
  std::vector<std::string>  tmp287;
  tmp287.push_back("IMPALAD");

  tmp286.contexts = tmp287;
  tmp286.__isset.contexts = true;
  tmp286.description = "Number of sessions expired due to inactivity.";
  tmp286.__isset.description = true;
  tmp286.key = "impala-server.num-sessions-expired";
  tmp286.__isset.key = true;
  tmp286.kind = ( ::impala::TMetricKind::type)1;
  tmp286.__isset.kind = true;
  tmp286.label = "Sessions Expired";
  tmp286.__isset.label = true;
  tmp286.units = ( ::impala::TUnit::type)0;
  tmp286.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.num-sessions-expired", tmp286));
  TMetricDef tmp288;
  std::vector<std::string>  tmp289;
  tmp289.push_back("IMPALAD");

  tmp288.contexts = tmp289;
  tmp288.__isset.contexts = true;
  tmp288.description = "Distribution of query latencies";
  tmp288.__isset.description = true;
  tmp288.key = "impala-server.query-durations-ms";
  tmp288.__isset.key = true;
  tmp288.kind = ( ::impala::TMetricKind::type)5;
  tmp288.__isset.kind = true;
  tmp288.label = "Query latency distribution";
  tmp288.__isset.label = true;
  tmp288.units = ( ::impala::TUnit::type)8;
  tmp288.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.query-durations-ms", tmp288));
  TMetricDef tmp290;
  std::vector<std::string>  tmp291;
  tmp291.push_back("IMPALAD");

  tmp290.contexts = tmp291;
  tmp290.__isset.contexts = true;
  tmp290.description = "Indicates if the Impala Server is ready.";
  tmp290.__isset.description = true;
  tmp290.key = "impala-server.ready";
  tmp290.__isset.key = true;
  tmp290.kind = ( ::impala::TMetricKind::type)2;
  tmp290.__isset.kind = true;
  tmp290.label = "Impala Server Ready";
  tmp290.__isset.label = true;
  tmp290.units = ( ::impala::TUnit::type)7;
  tmp290.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.ready", tmp290));
  TMetricDef tmp292;
  std::vector<std::string>  tmp293;
  tmp293.push_back("IMPALAD");

  tmp292.contexts = tmp293;
  tmp292.__isset.contexts = true;
  tmp292.description = "Total number of bytes consumed for rows cached to support HS2 FETCH_FIRST.";
  tmp292.__isset.description = true;
  tmp292.key = "impala-server.resultset-cache.total-bytes";
  tmp292.__isset.key = true;
  tmp292.kind = ( ::impala::TMetricKind::type)0;
  tmp292.__isset.kind = true;
  tmp292.label = "Impala Server Resultset Cache Total Bytes";
  tmp292.__isset.label = true;
  tmp292.units = ( ::impala::TUnit::type)7;
  tmp292.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.resultset-cache.total-bytes", tmp292));
  TMetricDef tmp294;
  std::vector<std::string>  tmp295;
  tmp295.push_back("IMPALAD");

  tmp294.contexts = tmp295;
  tmp294.__isset.contexts = true;
  tmp294.description = "Total number of rows cached to support HS2 FETCH_FIRST.";
  tmp294.__isset.description = true;
  tmp294.key = "impala-server.resultset-cache.total-num-rows";
  tmp294.__isset.key = true;
  tmp294.kind = ( ::impala::TMetricKind::type)0;
  tmp294.__isset.kind = true;
  tmp294.label = "Impala Server Resultset Cache Total Num Rows";
  tmp294.__isset.label = true;
  tmp294.units = ( ::impala::TUnit::type)7;
  tmp294.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.resultset-cache.total-num-rows", tmp294));
  TMetricDef tmp296;
  std::vector<std::string>  tmp297;
  tmp297.push_back("IMPALAD");

  tmp296.contexts = tmp297;
  tmp296.__isset.contexts = true;
  tmp296.description = "The total number of scan ranges read over the life of the process that did not have volume metadata";
  tmp296.__isset.description = true;
  tmp296.key = "impala-server.scan-ranges.num-missing-volume-id";
  tmp296.__isset.key = true;
  tmp296.kind = ( ::impala::TMetricKind::type)1;
  tmp296.__isset.kind = true;
  tmp296.label = "Scan Ranges Missing Volume Information";
  tmp296.__isset.label = true;
  tmp296.units = ( ::impala::TUnit::type)0;
  tmp296.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.scan-ranges.num-missing-volume-id", tmp296));
  TMetricDef tmp298;
  std::vector<std::string>  tmp299;
  tmp299.push_back("IMPALAD");

  tmp298.contexts = tmp299;
  tmp298.__isset.contexts = true;
  tmp298.description = "The total number of scan ranges read over the life of the process";
  tmp298.__isset.description = true;
  tmp298.key = "impala-server.scan-ranges.total";
  tmp298.__isset.key = true;
  tmp298.kind = ( ::impala::TMetricKind::type)1;
  tmp298.__isset.kind = true;
  tmp298.label = "Scan Ranges";
  tmp298.__isset.label = true;
  tmp298.units = ( ::impala::TUnit::type)0;
  tmp298.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.scan-ranges.total", tmp298));
  TMetricDef tmp300;
  std::vector<std::string>  tmp301;
  tmp301.push_back("IMPALAD");

  tmp300.contexts = tmp301;
  tmp300.__isset.contexts = true;
  tmp300.description = "The full version string of the Impala Server.";
  tmp300.__isset.description = true;
  tmp300.key = "impala-server.version";
  tmp300.__isset.key = true;
  tmp300.kind = ( ::impala::TMetricKind::type)2;
  tmp300.__isset.kind = true;
  tmp300.label = "Impala Server Version";
  tmp300.__isset.label = true;
  tmp300.units = ( ::impala::TUnit::type)7;
  tmp300.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala-server.version", tmp300));
  TMetricDef tmp302;
  std::vector<std::string>  tmp303;
  tmp303.push_back("IMPALAD");

  tmp302.contexts = tmp303;
  tmp302.__isset.contexts = true;
  tmp302.description = "The number of times the FAIL debug action returned an error. For testing only.";
  tmp302.__isset.description = true;
  tmp302.key = "impala.debug_action.fail";
  tmp302.__isset.key = true;
  tmp302.kind = ( ::impala::TMetricKind::type)1;
  tmp302.__isset.kind = true;
  tmp302.label = "FAIL debug action hits";
  tmp302.__isset.label = true;
  tmp302.units = ( ::impala::TUnit::type)7;
  tmp302.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.debug_action.fail", tmp302));
  TMetricDef tmp304;
  std::vector<std::string>  tmp305;
  tmp305.push_back("CATALOGSERVER");

  tmp304.contexts = tmp305;
  tmp304.__isset.contexts = true;
  tmp304.description = "The number of connections to the Catalog Service that have been accepted and are waiting to be setup.";
  tmp304.__isset.description = true;
  tmp304.key = "impala.thrift-server.CatalogService.connection-setup-queue-size";
  tmp304.__isset.key = true;
  tmp304.kind = ( ::impala::TMetricKind::type)0;
  tmp304.__isset.kind = true;
  tmp304.label = "Catalog Service Connections Queued for Setup";
  tmp304.__isset.label = true;
  tmp304.units = ( ::impala::TUnit::type)7;
  tmp304.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.CatalogService.connection-setup-queue-size", tmp304));
  TMetricDef tmp306;
  std::vector<std::string>  tmp307;
  tmp307.push_back("CATALOGSERVER");

  tmp306.contexts = tmp307;
  tmp306.__isset.contexts = true;
  tmp306.description = "Amount of time clients of Catalog Service spent waiting for connection to be set up";
  tmp306.__isset.description = true;
  tmp306.key = "impala.thrift-server.CatalogService.connection-setup-time";
  tmp306.__isset.key = true;
  tmp306.kind = ( ::impala::TMetricKind::type)5;
  tmp306.__isset.kind = true;
  tmp306.label = "Catalog Service client connection setup time";
  tmp306.__isset.label = true;
  tmp306.units = ( ::impala::TUnit::type)10;
  tmp306.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.CatalogService.connection-setup-time", tmp306));
  TMetricDef tmp308;
  std::vector<std::string>  tmp309;
  tmp309.push_back("CATALOGSERVER");

  tmp308.contexts = tmp309;
  tmp308.__isset.contexts = true;
  tmp308.description = "The number of active catalog service connections to this Catalog Server.";
  tmp308.__isset.description = true;
  tmp308.key = "impala.thrift-server.CatalogService.connections-in-use";
  tmp308.__isset.key = true;
  tmp308.kind = ( ::impala::TMetricKind::type)0;
  tmp308.__isset.kind = true;
  tmp308.label = "Catalog Service Active Connections";
  tmp308.__isset.label = true;
  tmp308.units = ( ::impala::TUnit::type)7;
  tmp308.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.CatalogService.connections-in-use", tmp308));
  TMetricDef tmp310;
  std::vector<std::string>  tmp311;
  tmp311.push_back("CATALOGSERVER");

  tmp310.contexts = tmp311;
  tmp310.__isset.contexts = true;
  tmp310.description = "Amount of time clients of Catalog Service spent waiting for service threads";
  tmp310.__isset.description = true;
  tmp310.key = "impala.thrift-server.CatalogService.svc-thread-wait-time";
  tmp310.__isset.key = true;
  tmp310.kind = ( ::impala::TMetricKind::type)5;
  tmp310.__isset.kind = true;
  tmp310.label = "Catalog Service clients' wait time for service threads";
  tmp310.__isset.label = true;
  tmp310.units = ( ::impala::TUnit::type)10;
  tmp310.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.CatalogService.svc-thread-wait-time", tmp310));
  TMetricDef tmp312;
  std::vector<std::string>  tmp313;
  tmp313.push_back("CATALOGSERVER");

  tmp312.contexts = tmp313;
  tmp312.__isset.contexts = true;
  tmp312.description = "The number of connection requests to the Catalog Service that have been timed out waiting to be setup.";
  tmp312.__isset.description = true;
  tmp312.key = "impala.thrift-server.CatalogService.timedout-cnxn-requests";
  tmp312.__isset.key = true;
  tmp312.kind = ( ::impala::TMetricKind::type)0;
  tmp312.__isset.kind = true;
  tmp312.label = "Catalog Service Connection Requests Timed Out";
  tmp312.__isset.label = true;
  tmp312.units = ( ::impala::TUnit::type)7;
  tmp312.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.CatalogService.timedout-cnxn-requests", tmp312));
  TMetricDef tmp314;
  std::vector<std::string>  tmp315;
  tmp315.push_back("CATALOGSERVER");

  tmp314.contexts = tmp315;
  tmp314.__isset.contexts = true;
  tmp314.description = "The total number of connections made to this Catalog Server's catalog service  over its lifetime.";
  tmp314.__isset.description = true;
  tmp314.key = "impala.thrift-server.CatalogService.total-connections";
  tmp314.__isset.key = true;
  tmp314.kind = ( ::impala::TMetricKind::type)1;
  tmp314.__isset.kind = true;
  tmp314.label = "Catalog Service Total Connections";
  tmp314.__isset.label = true;
  tmp314.units = ( ::impala::TUnit::type)0;
  tmp314.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.CatalogService.total-connections", tmp314));
  TMetricDef tmp316;
  std::vector<std::string>  tmp317;
  tmp317.push_back("IMPALAD");

  tmp316.contexts = tmp317;
  tmp316.__isset.contexts = true;
  tmp316.description = "The number of connections to the Statestore Service that have been accepted and are waiting to be setup.";
  tmp316.__isset.description = true;
  tmp316.key = "impala.thrift-server.StatestoreService.connection-setup-queue-size";
  tmp316.__isset.key = true;
  tmp316.kind = ( ::impala::TMetricKind::type)0;
  tmp316.__isset.kind = true;
  tmp316.label = "Statestore Service Connections Queued for Setup";
  tmp316.__isset.label = true;
  tmp316.units = ( ::impala::TUnit::type)7;
  tmp316.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.StatestoreService.connection-setup-queue-size", tmp316));
  TMetricDef tmp318;
  std::vector<std::string>  tmp319;
  tmp319.push_back("STATESTORE");

  tmp318.contexts = tmp319;
  tmp318.__isset.contexts = true;
  tmp318.description = "Amount of time clients of StateStore Service spent waiting for connection to be set up";
  tmp318.__isset.description = true;
  tmp318.key = "impala.thrift-server.StatestoreService.connection-setup-time";
  tmp318.__isset.key = true;
  tmp318.kind = ( ::impala::TMetricKind::type)5;
  tmp318.__isset.kind = true;
  tmp318.label = "StateStore Service client connection setup time";
  tmp318.__isset.label = true;
  tmp318.units = ( ::impala::TUnit::type)10;
  tmp318.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.StatestoreService.connection-setup-time", tmp318));
  TMetricDef tmp320;
  std::vector<std::string>  tmp321;
  tmp321.push_back("STATESTORE");

  tmp320.contexts = tmp321;
  tmp320.__isset.contexts = true;
  tmp320.description = "The number of active connections to this StateStore's service.";
  tmp320.__isset.description = true;
  tmp320.key = "impala.thrift-server.StatestoreService.connections-in-use";
  tmp320.__isset.key = true;
  tmp320.kind = ( ::impala::TMetricKind::type)0;
  tmp320.__isset.kind = true;
  tmp320.label = "StateStore Service Active Connections";
  tmp320.__isset.label = true;
  tmp320.units = ( ::impala::TUnit::type)7;
  tmp320.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.StatestoreService.connections-in-use", tmp320));
  TMetricDef tmp322;
  std::vector<std::string>  tmp323;
  tmp323.push_back("STATESTORE");

  tmp322.contexts = tmp323;
  tmp322.__isset.contexts = true;
  tmp322.description = "Amount of time clients of StateStore Service spent waiting for service threads";
  tmp322.__isset.description = true;
  tmp322.key = "impala.thrift-server.StatestoreService.svc-thread-wait-time";
  tmp322.__isset.key = true;
  tmp322.kind = ( ::impala::TMetricKind::type)5;
  tmp322.__isset.kind = true;
  tmp322.label = "StateStore Service clients' wait time for service threads";
  tmp322.__isset.label = true;
  tmp322.units = ( ::impala::TUnit::type)10;
  tmp322.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.StatestoreService.svc-thread-wait-time", tmp322));
  TMetricDef tmp324;
  std::vector<std::string>  tmp325;
  tmp325.push_back("IMPALAD");

  tmp324.contexts = tmp325;
  tmp324.__isset.contexts = true;
  tmp324.description = "The number of connection requests to the Statestore Service that have been timed out waiting to be setup.";
  tmp324.__isset.description = true;
  tmp324.key = "impala.thrift-server.StatestoreService.timedout-cnxn-requests";
  tmp324.__isset.key = true;
  tmp324.kind = ( ::impala::TMetricKind::type)0;
  tmp324.__isset.kind = true;
  tmp324.label = "Statestore Service Connection Requests Timed Out";
  tmp324.__isset.label = true;
  tmp324.units = ( ::impala::TUnit::type)7;
  tmp324.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.StatestoreService.timedout-cnxn-requests", tmp324));
  TMetricDef tmp326;
  std::vector<std::string>  tmp327;
  tmp327.push_back("STATESTORE");

  tmp326.contexts = tmp327;
  tmp326.__isset.contexts = true;
  tmp326.description = "The total number of connections made to this StateStore's StateStore service over its lifetime.";
  tmp326.__isset.description = true;
  tmp326.key = "impala.thrift-server.StatestoreService.total-connections";
  tmp326.__isset.key = true;
  tmp326.kind = ( ::impala::TMetricKind::type)1;
  tmp326.__isset.kind = true;
  tmp326.label = "StateStore Service Connections";
  tmp326.__isset.label = true;
  tmp326.units = ( ::impala::TUnit::type)0;
  tmp326.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.StatestoreService.total-connections", tmp326));
  TMetricDef tmp328;
  std::vector<std::string>  tmp329;
  tmp329.push_back("IMPALAD");

  tmp328.contexts = tmp329;
  tmp328.__isset.contexts = true;
  tmp328.description = "The number of connections to the Impala Backend Server that have been accepted and are waiting to be setup.";
  tmp328.__isset.description = true;
  tmp328.key = "impala.thrift-server.backend.connection-setup-queue-size";
  tmp328.__isset.key = true;
  tmp328.kind = ( ::impala::TMetricKind::type)0;
  tmp328.__isset.kind = true;
  tmp328.label = "Impala Backend Server Connections Queued for Setup";
  tmp328.__isset.label = true;
  tmp328.units = ( ::impala::TUnit::type)7;
  tmp328.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.backend.connection-setup-queue-size", tmp328));
  TMetricDef tmp330;
  std::vector<std::string>  tmp331;
  tmp331.push_back("IMPALAD");

  tmp330.contexts = tmp331;
  tmp330.__isset.contexts = true;
  tmp330.description = "Amount of time clients of Impala Backend Server spent waiting for connection to be set up";
  tmp330.__isset.description = true;
  tmp330.key = "impala.thrift-server.backend.connection-setup-time";
  tmp330.__isset.key = true;
  tmp330.kind = ( ::impala::TMetricKind::type)5;
  tmp330.__isset.kind = true;
  tmp330.label = "Impala Backend client connections setup time";
  tmp330.__isset.label = true;
  tmp330.units = ( ::impala::TUnit::type)10;
  tmp330.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.backend.connection-setup-time", tmp330));
  TMetricDef tmp332;
  std::vector<std::string>  tmp333;
  tmp333.push_back("IMPALAD");

  tmp332.contexts = tmp333;
  tmp332.__isset.contexts = true;
  tmp332.description = "The number of active Impala Backend client connections to this Impala Daemon.";
  tmp332.__isset.description = true;
  tmp332.key = "impala.thrift-server.backend.connections-in-use";
  tmp332.__isset.key = true;
  tmp332.kind = ( ::impala::TMetricKind::type)0;
  tmp332.__isset.kind = true;
  tmp332.label = "Impala Backend Server Active Connections";
  tmp332.__isset.label = true;
  tmp332.units = ( ::impala::TUnit::type)7;
  tmp332.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.backend.connections-in-use", tmp332));
  TMetricDef tmp334;
  std::vector<std::string>  tmp335;
  tmp335.push_back("IMPALAD");

  tmp334.contexts = tmp335;
  tmp334.__isset.contexts = true;
  tmp334.description = "Amount of time clients of Impala Backend Server spent waiting for service threads";
  tmp334.__isset.description = true;
  tmp334.key = "impala.thrift-server.backend.svc-thread-wait-time";
  tmp334.__isset.key = true;
  tmp334.kind = ( ::impala::TMetricKind::type)5;
  tmp334.__isset.kind = true;
  tmp334.label = "Impala Backend Server clients' wait time for service threads";
  tmp334.__isset.label = true;
  tmp334.units = ( ::impala::TUnit::type)10;
  tmp334.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.backend.svc-thread-wait-time", tmp334));
  TMetricDef tmp336;
  std::vector<std::string>  tmp337;
  tmp337.push_back("IMPALAD");

  tmp336.contexts = tmp337;
  tmp336.__isset.contexts = true;
  tmp336.description = "The number of connection requests to the Impala Backend Server that have been timed out waiting to be setup.";
  tmp336.__isset.description = true;
  tmp336.key = "impala.thrift-server.backend.timedout-cnxn-requests";
  tmp336.__isset.key = true;
  tmp336.kind = ( ::impala::TMetricKind::type)0;
  tmp336.__isset.kind = true;
  tmp336.label = "Impala Backend Server Connection Requests Timed Out";
  tmp336.__isset.label = true;
  tmp336.units = ( ::impala::TUnit::type)7;
  tmp336.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.backend.timedout-cnxn-requests", tmp336));
  TMetricDef tmp338;
  std::vector<std::string>  tmp339;
  tmp339.push_back("IMPALAD");

  tmp338.contexts = tmp339;
  tmp338.__isset.contexts = true;
  tmp338.description = "The total number of Impala Backend client connections made to this Impala Daemon over its lifetime.";
  tmp338.__isset.description = true;
  tmp338.key = "impala.thrift-server.backend.total-connections";
  tmp338.__isset.key = true;
  tmp338.kind = ( ::impala::TMetricKind::type)1;
  tmp338.__isset.kind = true;
  tmp338.label = "Impala Backend Server Connections";
  tmp338.__isset.label = true;
  tmp338.units = ( ::impala::TUnit::type)0;
  tmp338.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.backend.total-connections", tmp338));
  TMetricDef tmp340;
  std::vector<std::string>  tmp341;
  tmp341.push_back("IMPALAD");

  tmp340.contexts = tmp341;
  tmp340.__isset.contexts = true;
  tmp340.description = "The number of Beeswax API connections to this Impala Daemon that have been accepted and are waiting to be setup.";
  tmp340.__isset.description = true;
  tmp340.key = "impala.thrift-server.beeswax-frontend.connection-setup-queue-size";
  tmp340.__isset.key = true;
  tmp340.kind = ( ::impala::TMetricKind::type)0;
  tmp340.__isset.kind = true;
  tmp340.label = "Beeswax API Connections Queued for Setup";
  tmp340.__isset.label = true;
  tmp340.units = ( ::impala::TUnit::type)7;
  tmp340.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.beeswax-frontend.connection-setup-queue-size", tmp340));
  TMetricDef tmp342;
  std::vector<std::string>  tmp343;
  tmp343.push_back("IMPALAD");

  tmp342.contexts = tmp343;
  tmp342.__isset.contexts = true;
  tmp342.description = "Amount of time clients of Beeswax API spent waiting for connection to be set up";
  tmp342.__isset.description = true;
  tmp342.key = "impala.thrift-server.beeswax-frontend.connection-setup-time";
  tmp342.__isset.key = true;
  tmp342.kind = ( ::impala::TMetricKind::type)5;
  tmp342.__isset.kind = true;
  tmp342.label = "Beeswax API client connection setup time";
  tmp342.__isset.label = true;
  tmp342.units = ( ::impala::TUnit::type)10;
  tmp342.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.beeswax-frontend.connection-setup-time", tmp342));
  TMetricDef tmp344;
  std::vector<std::string>  tmp345;
  tmp345.push_back("IMPALAD");

  tmp344.contexts = tmp345;
  tmp344.__isset.contexts = true;
  tmp344.description = "The number of active Beeswax API connections to this Impala Daemon.";
  tmp344.__isset.description = true;
  tmp344.key = "impala.thrift-server.beeswax-frontend.connections-in-use";
  tmp344.__isset.key = true;
  tmp344.kind = ( ::impala::TMetricKind::type)0;
  tmp344.__isset.kind = true;
  tmp344.label = "Beeswax API Active Connections";
  tmp344.__isset.label = true;
  tmp344.units = ( ::impala::TUnit::type)7;
  tmp344.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.beeswax-frontend.connections-in-use", tmp344));
  TMetricDef tmp346;
  std::vector<std::string>  tmp347;
  tmp347.push_back("IMPALAD");

  tmp346.contexts = tmp347;
  tmp346.__isset.contexts = true;
  tmp346.description = "Amount of time clients of Beeswax API spent waiting for service threads";
  tmp346.__isset.description = true;
  tmp346.key = "impala.thrift-server.beeswax-frontend.svc-thread-wait-time";
  tmp346.__isset.key = true;
  tmp346.kind = ( ::impala::TMetricKind::type)5;
  tmp346.__isset.kind = true;
  tmp346.label = "Beeswax API clients' wait time for service threads";
  tmp346.__isset.label = true;
  tmp346.units = ( ::impala::TUnit::type)10;
  tmp346.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.beeswax-frontend.svc-thread-wait-time", tmp346));
  TMetricDef tmp348;
  std::vector<std::string>  tmp349;
  tmp349.push_back("IMPALAD");

  tmp348.contexts = tmp349;
  tmp348.__isset.contexts = true;
  tmp348.description = "The number of Beeswax API connection requests to this Impala Daemon that have been timed out waiting to be setup.";
  tmp348.__isset.description = true;
  tmp348.key = "impala.thrift-server.beeswax-frontend.timedout-cnxn-requests";
  tmp348.__isset.key = true;
  tmp348.kind = ( ::impala::TMetricKind::type)0;
  tmp348.__isset.kind = true;
  tmp348.label = "Beeswax API Connection Requests Timed Out";
  tmp348.__isset.label = true;
  tmp348.units = ( ::impala::TUnit::type)7;
  tmp348.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.beeswax-frontend.timedout-cnxn-requests", tmp348));
  TMetricDef tmp350;
  std::vector<std::string>  tmp351;
  tmp351.push_back("IMPALAD");

  tmp350.contexts = tmp351;
  tmp350.__isset.contexts = true;
  tmp350.description = "The total number of Beeswax API connections made to this Impala Daemon over its lifetime.";
  tmp350.__isset.description = true;
  tmp350.key = "impala.thrift-server.beeswax-frontend.total-connections";
  tmp350.__isset.key = true;
  tmp350.kind = ( ::impala::TMetricKind::type)1;
  tmp350.__isset.kind = true;
  tmp350.label = "Beeswax API Total Connections";
  tmp350.__isset.label = true;
  tmp350.units = ( ::impala::TUnit::type)0;
  tmp350.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.beeswax-frontend.total-connections", tmp350));
  TMetricDef tmp352;
  std::vector<std::string>  tmp353;
  tmp353.push_back("IMPALAD");

  tmp352.contexts = tmp353;
  tmp352.__isset.contexts = true;
  tmp352.description = "The number of External Frontend API connections to this Impala Daemon that have been accepted and are waiting to be setup.";
  tmp352.__isset.description = true;
  tmp352.key = "impala.thrift-server.external-frontend.connection-setup-queue-size";
  tmp352.__isset.key = true;
  tmp352.kind = ( ::impala::TMetricKind::type)0;
  tmp352.__isset.kind = true;
  tmp352.label = "External Frontend API Connections Queued for Setup";
  tmp352.__isset.label = true;
  tmp352.units = ( ::impala::TUnit::type)7;
  tmp352.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.external-frontend.connection-setup-queue-size", tmp352));
  TMetricDef tmp354;
  std::vector<std::string>  tmp355;
  tmp355.push_back("IMPALAD");

  tmp354.contexts = tmp355;
  tmp354.__isset.contexts = true;
  tmp354.description = "Amount of time clients of External Frontend API spent waiting for connection to be set up";
  tmp354.__isset.description = true;
  tmp354.key = "impala.thrift-server.external-frontend.connection-setup-time";
  tmp354.__isset.key = true;
  tmp354.kind = ( ::impala::TMetricKind::type)5;
  tmp354.__isset.kind = true;
  tmp354.label = "External Frontend API client connection setup time";
  tmp354.__isset.label = true;
  tmp354.units = ( ::impala::TUnit::type)10;
  tmp354.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.external-frontend.connection-setup-time", tmp354));
  TMetricDef tmp356;
  std::vector<std::string>  tmp357;
  tmp357.push_back("IMPALAD");

  tmp356.contexts = tmp357;
  tmp356.__isset.contexts = true;
  tmp356.description = "The number of active External Frontend API connections to this Impala Daemon.";
  tmp356.__isset.description = true;
  tmp356.key = "impala.thrift-server.external-frontend.connections-in-use";
  tmp356.__isset.key = true;
  tmp356.kind = ( ::impala::TMetricKind::type)0;
  tmp356.__isset.kind = true;
  tmp356.label = "External Frontend API Active Connections";
  tmp356.__isset.label = true;
  tmp356.units = ( ::impala::TUnit::type)7;
  tmp356.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.external-frontend.connections-in-use", tmp356));
  TMetricDef tmp358;
  std::vector<std::string>  tmp359;
  tmp359.push_back("IMPALAD");

  tmp358.contexts = tmp359;
  tmp358.__isset.contexts = true;
  tmp358.description = "Amount of time clients of External Frontend API spent waiting for service threads";
  tmp358.__isset.description = true;
  tmp358.key = "impala.thrift-server.external-frontend.svc-thread-wait-time";
  tmp358.__isset.key = true;
  tmp358.kind = ( ::impala::TMetricKind::type)5;
  tmp358.__isset.kind = true;
  tmp358.label = "External Frontend API clients' wait time for service threads";
  tmp358.__isset.label = true;
  tmp358.units = ( ::impala::TUnit::type)10;
  tmp358.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.external-frontend.svc-thread-wait-time", tmp358));
  TMetricDef tmp360;
  std::vector<std::string>  tmp361;
  tmp361.push_back("IMPALAD");

  tmp360.contexts = tmp361;
  tmp360.__isset.contexts = true;
  tmp360.description = "The number of External Frontend API connection requests to this Impala Daemon that have been timed out waiting to be setup.";
  tmp360.__isset.description = true;
  tmp360.key = "impala.thrift-server.external-frontend.timedout-cnxn-requests";
  tmp360.__isset.key = true;
  tmp360.kind = ( ::impala::TMetricKind::type)0;
  tmp360.__isset.kind = true;
  tmp360.label = "External Frontend API Connection Requests Timed Out";
  tmp360.__isset.label = true;
  tmp360.units = ( ::impala::TUnit::type)7;
  tmp360.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.external-frontend.timedout-cnxn-requests", tmp360));
  TMetricDef tmp362;
  std::vector<std::string>  tmp363;
  tmp363.push_back("IMPALAD");

  tmp362.contexts = tmp363;
  tmp362.__isset.contexts = true;
  tmp362.description = "The total number of External Frontend API connections made to this Impala Daemon over its lifetime.";
  tmp362.__isset.description = true;
  tmp362.key = "impala.thrift-server.external-frontend.total-connections";
  tmp362.__isset.key = true;
  tmp362.kind = ( ::impala::TMetricKind::type)1;
  tmp362.__isset.kind = true;
  tmp362.label = "External Frontend API Total Connections";
  tmp362.__isset.label = true;
  tmp362.units = ( ::impala::TUnit::type)0;
  tmp362.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.external-frontend.total-connections", tmp362));
  TMetricDef tmp364;
  std::vector<std::string>  tmp365;
  tmp365.push_back("IMPALAD");

  tmp364.contexts = tmp365;
  tmp364.__isset.contexts = true;
  tmp364.description = "The number of HiveServer2 API connections to this Impala Daemon that have been accepted and are waiting to be setup.";
  tmp364.__isset.description = true;
  tmp364.key = "impala.thrift-server.hiveserver2-frontend.connection-setup-queue-size";
  tmp364.__isset.key = true;
  tmp364.kind = ( ::impala::TMetricKind::type)0;
  tmp364.__isset.kind = true;
  tmp364.label = "HiveServer2 API Connections Queued for Setup";
  tmp364.__isset.label = true;
  tmp364.units = ( ::impala::TUnit::type)7;
  tmp364.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-frontend.connection-setup-queue-size", tmp364));
  TMetricDef tmp366;
  std::vector<std::string>  tmp367;
  tmp367.push_back("IMPALAD");

  tmp366.contexts = tmp367;
  tmp366.__isset.contexts = true;
  tmp366.description = "Amount of time clients of HiveServer2 API spent waiting for connection to be set up";
  tmp366.__isset.description = true;
  tmp366.key = "impala.thrift-server.hiveserver2-frontend.connection-setup-time";
  tmp366.__isset.key = true;
  tmp366.kind = ( ::impala::TMetricKind::type)5;
  tmp366.__isset.kind = true;
  tmp366.label = "HiveServer2 API client connection setup time";
  tmp366.__isset.label = true;
  tmp366.units = ( ::impala::TUnit::type)10;
  tmp366.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-frontend.connection-setup-time", tmp366));
  TMetricDef tmp368;
  std::vector<std::string>  tmp369;
  tmp369.push_back("IMPALAD");

  tmp368.contexts = tmp369;
  tmp368.__isset.contexts = true;
  tmp368.description = "The number of active HiveServer2 API connections to this Impala Daemon.";
  tmp368.__isset.description = true;
  tmp368.key = "impala.thrift-server.hiveserver2-frontend.connections-in-use";
  tmp368.__isset.key = true;
  tmp368.kind = ( ::impala::TMetricKind::type)0;
  tmp368.__isset.kind = true;
  tmp368.label = "HiveServer2 API Active Connections";
  tmp368.__isset.label = true;
  tmp368.units = ( ::impala::TUnit::type)7;
  tmp368.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-frontend.connections-in-use", tmp368));
  TMetricDef tmp370;
  std::vector<std::string>  tmp371;
  tmp371.push_back("IMPALAD");

  tmp370.contexts = tmp371;
  tmp370.__isset.contexts = true;
  tmp370.description = "Amount of time clients of HiveServer2 API spent waiting for service threads";
  tmp370.__isset.description = true;
  tmp370.key = "impala.thrift-server.hiveserver2-frontend.svc-thread-wait-time";
  tmp370.__isset.key = true;
  tmp370.kind = ( ::impala::TMetricKind::type)5;
  tmp370.__isset.kind = true;
  tmp370.label = "HiveServer2 API clients' wait time for service threads";
  tmp370.__isset.label = true;
  tmp370.units = ( ::impala::TUnit::type)10;
  tmp370.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-frontend.svc-thread-wait-time", tmp370));
  TMetricDef tmp372;
  std::vector<std::string>  tmp373;
  tmp373.push_back("IMPALAD");

  tmp372.contexts = tmp373;
  tmp372.__isset.contexts = true;
  tmp372.description = "The number of HiveServer2 API connection requests to this Impala Daemon that have been timed out waiting to be setup.";
  tmp372.__isset.description = true;
  tmp372.key = "impala.thrift-server.hiveserver2-frontend.timedout-cnxn-requests";
  tmp372.__isset.key = true;
  tmp372.kind = ( ::impala::TMetricKind::type)0;
  tmp372.__isset.kind = true;
  tmp372.label = "HiveServer2 API Connection Requests Timed Out";
  tmp372.__isset.label = true;
  tmp372.units = ( ::impala::TUnit::type)7;
  tmp372.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-frontend.timedout-cnxn-requests", tmp372));
  TMetricDef tmp374;
  std::vector<std::string>  tmp375;
  tmp375.push_back("IMPALAD");

  tmp374.contexts = tmp375;
  tmp374.__isset.contexts = true;
  tmp374.description = "The total number of HiveServer2 API connections made to this Impala Daemon over its lifetime.";
  tmp374.__isset.description = true;
  tmp374.key = "impala.thrift-server.hiveserver2-frontend.total-connections";
  tmp374.__isset.key = true;
  tmp374.kind = ( ::impala::TMetricKind::type)1;
  tmp374.__isset.kind = true;
  tmp374.label = "HiveServer2 API Total Connections";
  tmp374.__isset.label = true;
  tmp374.units = ( ::impala::TUnit::type)0;
  tmp374.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-frontend.total-connections", tmp374));
  TMetricDef tmp376;
  std::vector<std::string>  tmp377;
  tmp377.push_back("IMPALAD");

  tmp376.contexts = tmp377;
  tmp376.__isset.contexts = true;
  tmp376.description = "The number of HiveServer2 HTTP API connections to this Impala Daemon that have been accepted and are waiting to be setup.";
  tmp376.__isset.description = true;
  tmp376.key = "impala.thrift-server.hiveserver2-http-frontend.connection-setup-queue-size";
  tmp376.__isset.key = true;
  tmp376.kind = ( ::impala::TMetricKind::type)0;
  tmp376.__isset.kind = true;
  tmp376.label = "HiveServer2 HTTP API Connections Queued for Setup";
  tmp376.__isset.label = true;
  tmp376.units = ( ::impala::TUnit::type)7;
  tmp376.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.connection-setup-queue-size", tmp376));
  TMetricDef tmp378;
  std::vector<std::string>  tmp379;
  tmp379.push_back("IMPALAD");

  tmp378.contexts = tmp379;
  tmp378.__isset.contexts = true;
  tmp378.description = "Amount of time clients of HiveServer2 HTTP API spent waiting for connection to be set up";
  tmp378.__isset.description = true;
  tmp378.key = "impala.thrift-server.hiveserver2-http-frontend.connection-setup-time";
  tmp378.__isset.key = true;
  tmp378.kind = ( ::impala::TMetricKind::type)5;
  tmp378.__isset.kind = true;
  tmp378.label = "HiveServer2 HTTP API client connection setup time";
  tmp378.__isset.label = true;
  tmp378.units = ( ::impala::TUnit::type)10;
  tmp378.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.connection-setup-time", tmp378));
  TMetricDef tmp380;
  std::vector<std::string>  tmp381;
  tmp381.push_back("IMPALAD");

  tmp380.contexts = tmp381;
  tmp380.__isset.contexts = true;
  tmp380.description = "The number of active HiveServer2 HTTP API connections to this Impala Daemon.";
  tmp380.__isset.description = true;
  tmp380.key = "impala.thrift-server.hiveserver2-http-frontend.connections-in-use";
  tmp380.__isset.key = true;
  tmp380.kind = ( ::impala::TMetricKind::type)0;
  tmp380.__isset.kind = true;
  tmp380.label = "HiveServer2 HTTP API Active Connections";
  tmp380.__isset.label = true;
  tmp380.units = ( ::impala::TUnit::type)7;
  tmp380.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.connections-in-use", tmp380));
  TMetricDef tmp382;
  std::vector<std::string>  tmp383;
  tmp383.push_back("IMPALAD");

  tmp382.contexts = tmp383;
  tmp382.__isset.contexts = true;
  tmp382.description = "Amount of time clients of HiveServer2 HTTP API spent waiting for service threads";
  tmp382.__isset.description = true;
  tmp382.key = "impala.thrift-server.hiveserver2-http-frontend.svc-thread-wait-time";
  tmp382.__isset.key = true;
  tmp382.kind = ( ::impala::TMetricKind::type)5;
  tmp382.__isset.kind = true;
  tmp382.label = "HiveServer2 HTTP API clients' wait time for service threads";
  tmp382.__isset.label = true;
  tmp382.units = ( ::impala::TUnit::type)10;
  tmp382.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.svc-thread-wait-time", tmp382));
  TMetricDef tmp384;
  std::vector<std::string>  tmp385;
  tmp385.push_back("IMPALAD");

  tmp384.contexts = tmp385;
  tmp384.__isset.contexts = true;
  tmp384.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that have been timed out waiting to be setup.";
  tmp384.__isset.description = true;
  tmp384.key = "impala.thrift-server.hiveserver2-http-frontend.timedout-cnxn-requests";
  tmp384.__isset.key = true;
  tmp384.kind = ( ::impala::TMetricKind::type)0;
  tmp384.__isset.kind = true;
  tmp384.label = "HiveServer2 HTTP API Connection Requests Timed Out";
  tmp384.__isset.label = true;
  tmp384.units = ( ::impala::TUnit::type)7;
  tmp384.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.timedout-cnxn-requests", tmp384));
  TMetricDef tmp386;
  std::vector<std::string>  tmp387;
  tmp387.push_back("IMPALAD");

  tmp386.contexts = tmp387;
  tmp386.__isset.contexts = true;
  tmp386.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that failed to authenticate with Basic auth due to an invalid username or password.";
  tmp386.__isset.description = true;
  tmp386.key = "impala.thrift-server.hiveserver2-http-frontend.total-basic-auth-failure";
  tmp386.__isset.key = true;
  tmp386.kind = ( ::impala::TMetricKind::type)1;
  tmp386.__isset.kind = true;
  tmp386.label = "HiveServer2 HTTP API Connection Basic Auth Failure";
  tmp386.__isset.label = true;
  tmp386.units = ( ::impala::TUnit::type)7;
  tmp386.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-basic-auth-failure", tmp386));
  TMetricDef tmp388;
  std::vector<std::string>  tmp389;
  tmp389.push_back("IMPALAD");

  tmp388.contexts = tmp389;
  tmp388.__isset.contexts = true;
  tmp388.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that were successfully authenticated with Basic (username/password) auth.";
  tmp388.__isset.description = true;
  tmp388.key = "impala.thrift-server.hiveserver2-http-frontend.total-basic-auth-success";
  tmp388.__isset.key = true;
  tmp388.kind = ( ::impala::TMetricKind::type)1;
  tmp388.__isset.kind = true;
  tmp388.label = "HiveServer2 HTTP API Connection Basic Auth Success";
  tmp388.__isset.label = true;
  tmp388.units = ( ::impala::TUnit::type)7;
  tmp388.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-basic-auth-success", tmp388));
  TMetricDef tmp390;
  std::vector<std::string>  tmp391;
  tmp391.push_back("IMPALAD");

  tmp390.contexts = tmp391;
  tmp390.__isset.contexts = true;
  tmp390.description = "The total number of HiveServer2 HTTP API connections made to this Impala Daemon over its lifetime.";
  tmp390.__isset.description = true;
  tmp390.key = "impala.thrift-server.hiveserver2-http-frontend.total-connections";
  tmp390.__isset.key = true;
  tmp390.kind = ( ::impala::TMetricKind::type)1;
  tmp390.__isset.kind = true;
  tmp390.label = "HiveServer2 HTTP API Total Connections";
  tmp390.__isset.label = true;
  tmp390.units = ( ::impala::TUnit::type)0;
  tmp390.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-connections", tmp390));
  TMetricDef tmp392;
  std::vector<std::string>  tmp393;
  tmp393.push_back("IMPALAD");

  tmp392.contexts = tmp393;
  tmp392.__isset.contexts = true;
  tmp392.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that provided an invalid cookie.";
  tmp392.__isset.description = true;
  tmp392.key = "impala.thrift-server.hiveserver2-http-frontend.total-cookie-auth-failure";
  tmp392.__isset.key = true;
  tmp392.kind = ( ::impala::TMetricKind::type)1;
  tmp392.__isset.kind = true;
  tmp392.label = "HiveServer2 HTTP API Connection Cookie Auth Failure";
  tmp392.__isset.label = true;
  tmp392.units = ( ::impala::TUnit::type)7;
  tmp392.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-cookie-auth-failure", tmp392));
  TMetricDef tmp394;
  std::vector<std::string>  tmp395;
  tmp395.push_back("IMPALAD");

  tmp394.contexts = tmp395;
  tmp394.__isset.contexts = true;
  tmp394.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that were successfully authenticated using a cookie.";
  tmp394.__isset.description = true;
  tmp394.key = "impala.thrift-server.hiveserver2-http-frontend.total-cookie-auth-success";
  tmp394.__isset.key = true;
  tmp394.kind = ( ::impala::TMetricKind::type)1;
  tmp394.__isset.kind = true;
  tmp394.label = "HiveServer2 HTTP API Connection Cookie Auth Success";
  tmp394.__isset.label = true;
  tmp394.units = ( ::impala::TUnit::type)7;
  tmp394.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-cookie-auth-success", tmp394));
  TMetricDef tmp396;
  std::vector<std::string>  tmp397;
  tmp397.push_back("IMPALAD");

  tmp396.contexts = tmp397;
  tmp396.__isset.contexts = true;
  tmp396.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that were attempted to authenticate using JWT Token but were unsuccessful.";
  tmp396.__isset.description = true;
  tmp396.key = "impala.thrift-server.hiveserver2-http-frontend.total-jwt-token-auth-failure";
  tmp396.__isset.key = true;
  tmp396.kind = ( ::impala::TMetricKind::type)1;
  tmp396.__isset.kind = true;
  tmp396.label = "HiveServer2 HTTP API Connection JWT Token Failure";
  tmp396.__isset.label = true;
  tmp396.units = ( ::impala::TUnit::type)7;
  tmp396.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-jwt-token-auth-failure", tmp396));
  TMetricDef tmp398;
  std::vector<std::string>  tmp399;
  tmp399.push_back("IMPALAD");

  tmp398.contexts = tmp399;
  tmp398.__isset.contexts = true;
  tmp398.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that were successfully authenticated using JWT Token.";
  tmp398.__isset.description = true;
  tmp398.key = "impala.thrift-server.hiveserver2-http-frontend.total-jwt-token-auth-success";
  tmp398.__isset.key = true;
  tmp398.kind = ( ::impala::TMetricKind::type)1;
  tmp398.__isset.kind = true;
  tmp398.label = "HiveServer2 HTTP API Connection JWT Token Success";
  tmp398.__isset.label = true;
  tmp398.units = ( ::impala::TUnit::type)7;
  tmp398.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-jwt-token-auth-success", tmp398));
  TMetricDef tmp400;
  std::vector<std::string>  tmp401;
  tmp401.push_back("IMPALAD");

  tmp400.contexts = tmp401;
  tmp400.__isset.contexts = true;
  tmp400.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that attempted to authenticate with Kerberos but were unsuccessful.";
  tmp400.__isset.description = true;
  tmp400.key = "impala.thrift-server.hiveserver2-http-frontend.total-negotiate-auth-failure";
  tmp400.__isset.key = true;
  tmp400.kind = ( ::impala::TMetricKind::type)1;
  tmp400.__isset.kind = true;
  tmp400.label = "HiveServer2 HTTP API Connection Kerberos Auth Failure";
  tmp400.__isset.label = true;
  tmp400.units = ( ::impala::TUnit::type)7;
  tmp400.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-negotiate-auth-failure", tmp400));
  TMetricDef tmp402;
  std::vector<std::string>  tmp403;
  tmp403.push_back("IMPALAD");

  tmp402.contexts = tmp403;
  tmp402.__isset.contexts = true;
  tmp402.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that were successfully authenticated with Kerberos";
  tmp402.__isset.description = true;
  tmp402.key = "impala.thrift-server.hiveserver2-http-frontend.total-negotiate-auth-success";
  tmp402.__isset.key = true;
  tmp402.kind = ( ::impala::TMetricKind::type)1;
  tmp402.__isset.kind = true;
  tmp402.label = "HiveServer2 HTTP API Connection Kerberos Auth Success";
  tmp402.__isset.label = true;
  tmp402.units = ( ::impala::TUnit::type)7;
  tmp402.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-negotiate-auth-success", tmp402));
  TMetricDef tmp404;
  std::vector<std::string>  tmp405;
  tmp405.push_back("IMPALAD");

  tmp404.contexts = tmp405;
  tmp404.__isset.contexts = true;
  tmp404.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that were attempted to authenticate using SAML but were unsuccessful.";
  tmp404.__isset.description = true;
  tmp404.key = "impala.thrift-server.hiveserver2-http-frontend.total-saml-auth-failure";
  tmp404.__isset.key = true;
  tmp404.kind = ( ::impala::TMetricKind::type)1;
  tmp404.__isset.kind = true;
  tmp404.label = "HiveServer2 HTTP API Connection SAML Failure";
  tmp404.__isset.label = true;
  tmp404.units = ( ::impala::TUnit::type)7;
  tmp404.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-saml-auth-failure", tmp404));
  TMetricDef tmp406;
  std::vector<std::string>  tmp407;
  tmp407.push_back("IMPALAD");

  tmp406.contexts = tmp407;
  tmp406.__isset.contexts = true;
  tmp406.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that were successfully authenticated using SAML.";
  tmp406.__isset.description = true;
  tmp406.key = "impala.thrift-server.hiveserver2-http-frontend.total-saml-auth-success";
  tmp406.__isset.key = true;
  tmp406.kind = ( ::impala::TMetricKind::type)1;
  tmp406.__isset.kind = true;
  tmp406.label = "HiveServer2 HTTP API Connection SAML Success";
  tmp406.__isset.label = true;
  tmp406.units = ( ::impala::TUnit::type)7;
  tmp406.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-saml-auth-success", tmp406));
  TMetricDef tmp408;
  std::vector<std::string>  tmp409;
  tmp409.push_back("IMPALAD");

  tmp408.contexts = tmp409;
  tmp408.__isset.contexts = true;
  tmp408.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that skipped authentication as they have a trusted auth header.";
  tmp408.__isset.description = true;
  tmp408.key = "impala.thrift-server.hiveserver2-http-frontend.total-trusted-auth-header-check-success";
  tmp408.__isset.key = true;
  tmp408.kind = ( ::impala::TMetricKind::type)1;
  tmp408.__isset.kind = true;
  tmp408.label = "HiveServer2 HTTP API Connection Trusted Auth Header Check Success";
  tmp408.__isset.label = true;
  tmp408.units = ( ::impala::TUnit::type)7;
  tmp408.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-trusted-auth-header-check-success", tmp408));
  TMetricDef tmp410;
  std::vector<std::string>  tmp411;
  tmp411.push_back("IMPALAD");

  tmp410.contexts = tmp411;
  tmp410.__isset.contexts = true;
  tmp410.description = "The number of HiveServer2 HTTP API connection requests to this Impala Daemon that skipped authentication as they originated from a trusted domain.";
  tmp410.__isset.description = true;
  tmp410.key = "impala.thrift-server.hiveserver2-http-frontend.total-trusted-domain-check-success";
  tmp410.__isset.key = true;
  tmp410.kind = ( ::impala::TMetricKind::type)1;
  tmp410.__isset.kind = true;
  tmp410.label = "HiveServer2 HTTP API Connection Trusted Domain Check Success";
  tmp410.__isset.label = true;
  tmp410.units = ( ::impala::TUnit::type)7;
  tmp410.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.thrift-server.hiveserver2-http-frontend.total-trusted-domain-check-success", tmp410));
  TMetricDef tmp412;
  std::vector<std::string>  tmp413;
  tmp413.push_back("IMPALAD");
  tmp413.push_back("CATALOGSERVER");
  tmp413.push_back("STATESTORE");

  tmp412.contexts = tmp413;
  tmp412.__isset.contexts = true;
  tmp412.description = "The number of HTTP connection requests to this daemon's webserver that attempted to authenticate with LDAP but were unsuccessful.";
  tmp412.__isset.description = true;
  tmp412.key = "impala.webserver.total-basic-auth-failure";
  tmp412.__isset.key = true;
  tmp412.kind = ( ::impala::TMetricKind::type)1;
  tmp412.__isset.kind = true;
  tmp412.label = "Webserver HTTP Connection LDAP Auth Failure";
  tmp412.__isset.label = true;
  tmp412.units = ( ::impala::TUnit::type)7;
  tmp412.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.webserver.total-basic-auth-failure", tmp412));
  TMetricDef tmp414;
  std::vector<std::string>  tmp415;
  tmp415.push_back("IMPALAD");
  tmp415.push_back("CATALOGSERVER");
  tmp415.push_back("STATESTORE");

  tmp414.contexts = tmp415;
  tmp414.__isset.contexts = true;
  tmp414.description = "The number of HTTP connection requests to this daemon's webserver that were successfully authenticated with LDAP";
  tmp414.__isset.description = true;
  tmp414.key = "impala.webserver.total-basic-auth-success";
  tmp414.__isset.key = true;
  tmp414.kind = ( ::impala::TMetricKind::type)1;
  tmp414.__isset.kind = true;
  tmp414.label = "Webserver HTTP Connection LDAP Auth Success";
  tmp414.__isset.label = true;
  tmp414.units = ( ::impala::TUnit::type)7;
  tmp414.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.webserver.total-basic-auth-success", tmp414));
  TMetricDef tmp416;
  std::vector<std::string>  tmp417;
  tmp417.push_back("IMPALAD");
  tmp417.push_back("CATALOGSERVER");
  tmp417.push_back("STATESTORE");

  tmp416.contexts = tmp417;
  tmp416.__isset.contexts = true;
  tmp416.description = "The number of HTTP connection requests to this daemon's webserver that provided an invalid cookie.";
  tmp416.__isset.description = true;
  tmp416.key = "impala.webserver.total-cookie-auth-failure";
  tmp416.__isset.key = true;
  tmp416.kind = ( ::impala::TMetricKind::type)1;
  tmp416.__isset.kind = true;
  tmp416.label = "Webserver HTTP Connection Cookie Auth Failure";
  tmp416.__isset.label = true;
  tmp416.units = ( ::impala::TUnit::type)7;
  tmp416.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.webserver.total-cookie-auth-failure", tmp416));
  TMetricDef tmp418;
  std::vector<std::string>  tmp419;
  tmp419.push_back("IMPALAD");
  tmp419.push_back("CATALOGSERVER");
  tmp419.push_back("STATESTORE");

  tmp418.contexts = tmp419;
  tmp418.__isset.contexts = true;
  tmp418.description = "The number of HTTP connection requests to this daemon's webserver that were successfully authenticated using a cookie.";
  tmp418.__isset.description = true;
  tmp418.key = "impala.webserver.total-cookie-auth-success";
  tmp418.__isset.key = true;
  tmp418.kind = ( ::impala::TMetricKind::type)1;
  tmp418.__isset.kind = true;
  tmp418.label = "Webserver HTTP Connection Cookie Auth Success";
  tmp418.__isset.label = true;
  tmp418.units = ( ::impala::TUnit::type)7;
  tmp418.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.webserver.total-cookie-auth-success", tmp418));
  TMetricDef tmp420;
  std::vector<std::string>  tmp421;
  tmp421.push_back("IMPALAD");
  tmp421.push_back("CATALOGSERVER");
  tmp421.push_back("STATESTORE");

  tmp420.contexts = tmp421;
  tmp420.__isset.contexts = true;
  tmp420.description = "The number of HTTP connection requests to this daemon's webserver that provided an invalid JWT token.";
  tmp420.__isset.description = true;
  tmp420.key = "impala.webserver.total-jwt-token-auth-failure";
  tmp420.__isset.key = true;
  tmp420.kind = ( ::impala::TMetricKind::type)1;
  tmp420.__isset.kind = true;
  tmp420.label = "Webserver HTTP Connection JWT Token Auth Failure";
  tmp420.__isset.label = true;
  tmp420.units = ( ::impala::TUnit::type)7;
  tmp420.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.webserver.total-jwt-token-auth-failure", tmp420));
  TMetricDef tmp422;
  std::vector<std::string>  tmp423;
  tmp423.push_back("IMPALAD");
  tmp423.push_back("CATALOGSERVER");
  tmp423.push_back("STATESTORE");

  tmp422.contexts = tmp423;
  tmp422.__isset.contexts = true;
  tmp422.description = "The number of HTTP connection requests to this daemon's webserver that were successfully authenticated using a JWT token.";
  tmp422.__isset.description = true;
  tmp422.key = "impala.webserver.total-jwt-token-auth-success";
  tmp422.__isset.key = true;
  tmp422.kind = ( ::impala::TMetricKind::type)1;
  tmp422.__isset.kind = true;
  tmp422.label = "Webserver HTTP Connection JWT Token Auth Success";
  tmp422.__isset.label = true;
  tmp422.units = ( ::impala::TUnit::type)7;
  tmp422.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.webserver.total-jwt-token-auth-success", tmp422));
  TMetricDef tmp424;
  std::vector<std::string>  tmp425;
  tmp425.push_back("IMPALAD");
  tmp425.push_back("CATALOGSERVER");
  tmp425.push_back("STATESTORE");

  tmp424.contexts = tmp425;
  tmp424.__isset.contexts = true;
  tmp424.description = "The number of HTTP connection requests to this daemon's webserver that attempted to authenticate with Kerberos but were unsuccessful.";
  tmp424.__isset.description = true;
  tmp424.key = "impala.webserver.total-negotiate-auth-failure";
  tmp424.__isset.key = true;
  tmp424.kind = ( ::impala::TMetricKind::type)1;
  tmp424.__isset.kind = true;
  tmp424.label = "Webserver HTTP Connection Kerberos Auth Failure";
  tmp424.__isset.label = true;
  tmp424.units = ( ::impala::TUnit::type)7;
  tmp424.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.webserver.total-negotiate-auth-failure", tmp424));
  TMetricDef tmp426;
  std::vector<std::string>  tmp427;
  tmp427.push_back("IMPALAD");
  tmp427.push_back("CATALOGSERVER");
  tmp427.push_back("STATESTORE");

  tmp426.contexts = tmp427;
  tmp426.__isset.contexts = true;
  tmp426.description = "The number of HTTP connection requests to this daemon's webserver that were successfully authenticated with Kerberos";
  tmp426.__isset.description = true;
  tmp426.key = "impala.webserver.total-negotiate-auth-success";
  tmp426.__isset.key = true;
  tmp426.kind = ( ::impala::TMetricKind::type)1;
  tmp426.__isset.kind = true;
  tmp426.label = "Webserver HTTP Connection Kerberos Auth Success";
  tmp426.__isset.label = true;
  tmp426.units = ( ::impala::TUnit::type)7;
  tmp426.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.webserver.total-negotiate-auth-success", tmp426));
  TMetricDef tmp428;
  std::vector<std::string>  tmp429;
  tmp429.push_back("IMPALAD");
  tmp429.push_back("CATALOGSERVER");
  tmp429.push_back("STATESTORE");

  tmp428.contexts = tmp429;
  tmp428.__isset.contexts = true;
  tmp428.description = "The number of HTTP connection requests to this daemon's webserver that skipped authentication as they have a trusted auth header.";
  tmp428.__isset.description = true;
  tmp428.key = "impala.webserver.total-trusted-auth-header-check-success";
  tmp428.__isset.key = true;
  tmp428.kind = ( ::impala::TMetricKind::type)1;
  tmp428.__isset.kind = true;
  tmp428.label = "Webserver HTTP Connection Trusted Auth Header Check Success";
  tmp428.__isset.label = true;
  tmp428.units = ( ::impala::TUnit::type)7;
  tmp428.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.webserver.total-trusted-auth-header-check-success", tmp428));
  TMetricDef tmp430;
  std::vector<std::string>  tmp431;
  tmp431.push_back("IMPALAD");
  tmp431.push_back("CATALOGSERVER");
  tmp431.push_back("STATESTORE");

  tmp430.contexts = tmp431;
  tmp430.__isset.contexts = true;
  tmp430.description = "The number of HTTP connection requests to this daemon's webserver that originated from a trusted domain.";
  tmp430.__isset.description = true;
  tmp430.key = "impala.webserver.total-trusted-domain-check-success";
  tmp430.__isset.key = true;
  tmp430.kind = ( ::impala::TMetricKind::type)1;
  tmp430.__isset.kind = true;
  tmp430.label = "Webserver HTTP Connection Trusted Domain Check Success";
  tmp430.__isset.label = true;
  tmp430.units = ( ::impala::TUnit::type)7;
  tmp430.__isset.units = true;

  TMetricDefs.insert(std::make_pair("impala.webserver.total-trusted-domain-check-success", tmp430));
  TMetricDef tmp432;
  std::vector<std::string>  tmp433;
  tmp433.push_back("CATALOGSERVER");
  tmp433.push_back("IMPALAD");

  tmp432.contexts = tmp433;
  tmp432.__isset.contexts = true;
  tmp432.description = "Jvm $0 Committed Usage Bytes";
  tmp432.__isset.description = true;
  tmp432.key = "jvm.$0.committed-usage-bytes";
  tmp432.__isset.key = true;
  tmp432.kind = ( ::impala::TMetricKind::type)0;
  tmp432.__isset.kind = true;
  tmp432.label = "Jvm $0 Committed Usage Bytes";
  tmp432.__isset.label = true;
  tmp432.units = ( ::impala::TUnit::type)3;
  tmp432.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.committed-usage-bytes", tmp432));
  TMetricDef tmp434;
  std::vector<std::string>  tmp435;
  tmp435.push_back("CATALOGSERVER");
  tmp435.push_back("IMPALAD");

  tmp434.contexts = tmp435;
  tmp434.__isset.contexts = true;
  tmp434.description = "Jvm $0 Current Usage Bytes";
  tmp434.__isset.description = true;
  tmp434.key = "jvm.$0.current-usage-bytes";
  tmp434.__isset.key = true;
  tmp434.kind = ( ::impala::TMetricKind::type)0;
  tmp434.__isset.kind = true;
  tmp434.label = "Jvm $0 Current Usage Bytes";
  tmp434.__isset.label = true;
  tmp434.units = ( ::impala::TUnit::type)3;
  tmp434.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.current-usage-bytes", tmp434));
  TMetricDef tmp436;
  std::vector<std::string>  tmp437;
  tmp437.push_back("CATALOGSERVER");
  tmp437.push_back("IMPALAD");

  tmp436.contexts = tmp437;
  tmp436.__isset.contexts = true;
  tmp436.description = "Jvm $0 Init Usage Bytes";
  tmp436.__isset.description = true;
  tmp436.key = "jvm.$0.init-usage-bytes";
  tmp436.__isset.key = true;
  tmp436.kind = ( ::impala::TMetricKind::type)0;
  tmp436.__isset.kind = true;
  tmp436.label = "Jvm $0 Init Usage Bytes";
  tmp436.__isset.label = true;
  tmp436.units = ( ::impala::TUnit::type)3;
  tmp436.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.init-usage-bytes", tmp436));
  TMetricDef tmp438;
  std::vector<std::string>  tmp439;
  tmp439.push_back("CATALOGSERVER");
  tmp439.push_back("IMPALAD");

  tmp438.contexts = tmp439;
  tmp438.__isset.contexts = true;
  tmp438.description = "Jvm $0 Max Usage Bytes";
  tmp438.__isset.description = true;
  tmp438.key = "jvm.$0.max-usage-bytes";
  tmp438.__isset.key = true;
  tmp438.kind = ( ::impala::TMetricKind::type)0;
  tmp438.__isset.kind = true;
  tmp438.label = "Jvm $0 Max Usage Bytes";
  tmp438.__isset.label = true;
  tmp438.units = ( ::impala::TUnit::type)3;
  tmp438.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.max-usage-bytes", tmp438));
  TMetricDef tmp440;
  std::vector<std::string>  tmp441;
  tmp441.push_back("CATALOGSERVER");
  tmp441.push_back("IMPALAD");

  tmp440.contexts = tmp441;
  tmp440.__isset.contexts = true;
  tmp440.description = "Jvm $0 Peak Committed Usage Bytes";
  tmp440.__isset.description = true;
  tmp440.key = "jvm.$0.peak-committed-usage-bytes";
  tmp440.__isset.key = true;
  tmp440.kind = ( ::impala::TMetricKind::type)0;
  tmp440.__isset.kind = true;
  tmp440.label = "Jvm $0 Peak Committed Usage Bytes";
  tmp440.__isset.label = true;
  tmp440.units = ( ::impala::TUnit::type)3;
  tmp440.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.peak-committed-usage-bytes", tmp440));
  TMetricDef tmp442;
  std::vector<std::string>  tmp443;
  tmp443.push_back("CATALOGSERVER");
  tmp443.push_back("IMPALAD");

  tmp442.contexts = tmp443;
  tmp442.__isset.contexts = true;
  tmp442.description = "Jvm $0 Peak Current Usage Bytes";
  tmp442.__isset.description = true;
  tmp442.key = "jvm.$0.peak-current-usage-bytes";
  tmp442.__isset.key = true;
  tmp442.kind = ( ::impala::TMetricKind::type)0;
  tmp442.__isset.kind = true;
  tmp442.label = "Jvm $0 Peak Current Usage Bytes";
  tmp442.__isset.label = true;
  tmp442.units = ( ::impala::TUnit::type)3;
  tmp442.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.peak-current-usage-bytes", tmp442));
  TMetricDef tmp444;
  std::vector<std::string>  tmp445;
  tmp445.push_back("CATALOGSERVER");
  tmp445.push_back("IMPALAD");

  tmp444.contexts = tmp445;
  tmp444.__isset.contexts = true;
  tmp444.description = "Jvm $0 Peak Init Usage Bytes";
  tmp444.__isset.description = true;
  tmp444.key = "jvm.$0.peak-init-usage-bytes";
  tmp444.__isset.key = true;
  tmp444.kind = ( ::impala::TMetricKind::type)0;
  tmp444.__isset.kind = true;
  tmp444.label = "Jvm $0 Peak Init Usage Bytes";
  tmp444.__isset.label = true;
  tmp444.units = ( ::impala::TUnit::type)3;
  tmp444.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.peak-init-usage-bytes", tmp444));
  TMetricDef tmp446;
  std::vector<std::string>  tmp447;
  tmp447.push_back("CATALOGSERVER");
  tmp447.push_back("IMPALAD");

  tmp446.contexts = tmp447;
  tmp446.__isset.contexts = true;
  tmp446.description = "Jvm $0 Peak Max Usage Bytes";
  tmp446.__isset.description = true;
  tmp446.key = "jvm.$0.peak-max-usage-bytes";
  tmp446.__isset.key = true;
  tmp446.kind = ( ::impala::TMetricKind::type)0;
  tmp446.__isset.kind = true;
  tmp446.label = "Jvm $0 Peak Max Usage Bytes";
  tmp446.__isset.label = true;
  tmp446.units = ( ::impala::TUnit::type)3;
  tmp446.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.$0.peak-max-usage-bytes", tmp446));
  TMetricDef tmp448;
  std::vector<std::string>  tmp449;
  tmp449.push_back("CATALOGSERVER");
  tmp449.push_back("IMPALAD");

  tmp448.contexts = tmp449;
  tmp448.__isset.contexts = true;
  tmp448.description = "Jvm Garbage Collection Count";
  tmp448.__isset.description = true;
  tmp448.key = "jvm.gc_count";
  tmp448.__isset.key = true;
  tmp448.kind = ( ::impala::TMetricKind::type)1;
  tmp448.__isset.kind = true;
  tmp448.label = "Jvm Garbage Collection Count";
  tmp448.__isset.label = true;
  tmp448.units = ( ::impala::TUnit::type)0;
  tmp448.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.gc_count", tmp448));
  TMetricDef tmp450;
  std::vector<std::string>  tmp451;
  tmp451.push_back("CATALOGSERVER");
  tmp451.push_back("IMPALAD");

  tmp450.contexts = tmp451;
  tmp450.__isset.contexts = true;
  tmp450.description = "Jvm Pause Detection Info Threshold Exceeded";
  tmp450.__isset.description = true;
  tmp450.key = "jvm.gc_num_info_threshold_exceeded";
  tmp450.__isset.key = true;
  tmp450.kind = ( ::impala::TMetricKind::type)1;
  tmp450.__isset.kind = true;
  tmp450.label = "Jvm Pause Detector Info Threshold Exceeded";
  tmp450.__isset.label = true;
  tmp450.units = ( ::impala::TUnit::type)0;
  tmp450.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.gc_num_info_threshold_exceeded", tmp450));
  TMetricDef tmp452;
  std::vector<std::string>  tmp453;
  tmp453.push_back("CATALOGSERVER");
  tmp453.push_back("IMPALAD");

  tmp452.contexts = tmp453;
  tmp452.__isset.contexts = true;
  tmp452.description = "Jvm Pause Detection Warning Threshold Exceeded";
  tmp452.__isset.description = true;
  tmp452.key = "jvm.gc_num_warn_threshold_exceeded";
  tmp452.__isset.key = true;
  tmp452.kind = ( ::impala::TMetricKind::type)1;
  tmp452.__isset.kind = true;
  tmp452.label = "Jvm Pause Detector Warn Threshold Exceeded";
  tmp452.__isset.label = true;
  tmp452.units = ( ::impala::TUnit::type)0;
  tmp452.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.gc_num_warn_threshold_exceeded", tmp452));
  TMetricDef tmp454;
  std::vector<std::string>  tmp455;
  tmp455.push_back("CATALOGSERVER");
  tmp455.push_back("IMPALAD");

  tmp454.contexts = tmp455;
  tmp454.__isset.contexts = true;
  tmp454.description = "Jvm Garbage Collection Time";
  tmp454.__isset.description = true;
  tmp454.key = "jvm.gc_time_millis";
  tmp454.__isset.key = true;
  tmp454.kind = ( ::impala::TMetricKind::type)1;
  tmp454.__isset.kind = true;
  tmp454.label = "Jvm Garbage Collection Time";
  tmp454.__isset.label = true;
  tmp454.units = ( ::impala::TUnit::type)8;
  tmp454.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.gc_time_millis", tmp454));
  TMetricDef tmp456;
  std::vector<std::string>  tmp457;
  tmp457.push_back("CATALOGSERVER");
  tmp457.push_back("IMPALAD");

  tmp456.contexts = tmp457;
  tmp456.__isset.contexts = true;
  tmp456.description = "Jvm Pause Detection Extra Sleep Time";
  tmp456.__isset.description = true;
  tmp456.key = "jvm.gc_total_extra_sleep_time_millis";
  tmp456.__isset.key = true;
  tmp456.kind = ( ::impala::TMetricKind::type)1;
  tmp456.__isset.kind = true;
  tmp456.label = "Jvm Pause Detector Extra Sleep Time";
  tmp456.__isset.label = true;
  tmp456.units = ( ::impala::TUnit::type)8;
  tmp456.__isset.units = true;

  TMetricDefs.insert(std::make_pair("jvm.gc_total_extra_sleep_time_millis", tmp456));
  TMetricDef tmp458;
  std::vector<std::string>  tmp459;
  tmp459.push_back("IMPALAD");
  tmp459.push_back("CATALOGSERVER");
  tmp459.push_back("STATESTORE");

  tmp458.contexts = tmp459;
  tmp458.__isset.contexts = true;
  tmp458.description = "A version string identifying the Kudu client";
  tmp458.__isset.description = true;
  tmp458.key = "kudu-client.version";
  tmp458.__isset.key = true;
  tmp458.kind = ( ::impala::TMetricKind::type)2;
  tmp458.__isset.kind = true;
  tmp458.label = "Kudu Client Version";
  tmp458.__isset.label = true;
  tmp458.units = ( ::impala::TUnit::type)7;
  tmp458.__isset.units = true;

  TMetricDefs.insert(std::make_pair("kudu-client.version", tmp458));
  TMetricDef tmp460;
  std::vector<std::string>  tmp461;
  tmp461.push_back("IMPALAD");

  tmp460.contexts = tmp461;
  tmp460.__isset.contexts = true;
  tmp460.description = "Memtracker $0 Current Usage Bytes";
  tmp460.__isset.description = true;
  tmp460.key = "mem-tracker.$0.current_usage_bytes";
  tmp460.__isset.key = true;
  tmp460.kind = ( ::impala::TMetricKind::type)0;
  tmp460.__isset.kind = true;
  tmp460.label = "Memtracker $0 Current Usage Bytes";
  tmp460.__isset.label = true;
  tmp460.units = ( ::impala::TUnit::type)3;
  tmp460.__isset.units = true;

  TMetricDefs.insert(std::make_pair("mem-tracker.$0.current_usage_bytes", tmp460));
  TMetricDef tmp462;
  std::vector<std::string>  tmp463;
  tmp463.push_back("IMPALAD");

  tmp462.contexts = tmp463;
  tmp462.__isset.contexts = true;
  tmp462.description = "Memtracker $0 Peak Usage Bytes";
  tmp462.__isset.description = true;
  tmp462.key = "mem-tracker.$0.peak_usage_bytes";
  tmp462.__isset.key = true;
  tmp462.kind = ( ::impala::TMetricKind::type)0;
  tmp462.__isset.kind = true;
  tmp462.label = "Memtracker $0 Peak Max Bytes";
  tmp462.__isset.label = true;
  tmp462.units = ( ::impala::TUnit::type)3;
  tmp462.__isset.units = true;

  TMetricDefs.insert(std::make_pair("mem-tracker.$0.peak_usage_bytes", tmp462));
  TMetricDef tmp464;
  std::vector<std::string>  tmp465;
  tmp465.push_back("IMPALAD");

  tmp464.contexts = tmp465;
  tmp464.__isset.contexts = true;
  tmp464.description = "The amount of memory freed by the last memory tracker garbage collection.";
  tmp464.__isset.description = true;
  tmp464.key = "mem-tracker.process.bytes-freed-by-last-gc";
  tmp464.__isset.key = true;
  tmp464.kind = ( ::impala::TMetricKind::type)0;
  tmp464.__isset.kind = true;
  tmp464.label = "MemTracker Bytes Freed By Last Garbage Collection";
  tmp464.__isset.label = true;
  tmp464.units = ( ::impala::TUnit::type)3;
  tmp464.__isset.units = true;

  TMetricDefs.insert(std::make_pair("mem-tracker.process.bytes-freed-by-last-gc", tmp464));
  TMetricDef tmp466;
  std::vector<std::string>  tmp467;
  tmp467.push_back("IMPALAD");

  tmp466.contexts = tmp467;
  tmp466.__isset.contexts = true;
  tmp466.description = "The amount of memory by which the process was over its memory limit the last time the memory limit was encountered.";
  tmp466.__isset.description = true;
  tmp466.key = "mem-tracker.process.bytes-over-limit";
  tmp466.__isset.key = true;
  tmp466.kind = ( ::impala::TMetricKind::type)0;
  tmp466.__isset.kind = true;
  tmp466.label = "MemTracker Bytes Over Limit";
  tmp466.__isset.label = true;
  tmp466.units = ( ::impala::TUnit::type)3;
  tmp466.__isset.units = true;

  TMetricDefs.insert(std::make_pair("mem-tracker.process.bytes-over-limit", tmp466));
  TMetricDef tmp468;
  std::vector<std::string>  tmp469;
  tmp469.push_back("IMPALAD");

  tmp468.contexts = tmp469;
  tmp468.__isset.contexts = true;
  tmp468.description = "The process memory tracker limit.";
  tmp468.__isset.description = true;
  tmp468.key = "mem-tracker.process.limit";
  tmp468.__isset.key = true;
  tmp468.kind = ( ::impala::TMetricKind::type)0;
  tmp468.__isset.kind = true;
  tmp468.label = "Process Tracker Limit";
  tmp468.__isset.label = true;
  tmp468.units = ( ::impala::TUnit::type)3;
  tmp468.__isset.units = true;

  TMetricDefs.insert(std::make_pair("mem-tracker.process.limit", tmp468));
  TMetricDef tmp470;
  std::vector<std::string>  tmp471;
  tmp471.push_back("IMPALAD");

  tmp470.contexts = tmp471;
  tmp470.__isset.contexts = true;
  tmp470.description = "The total number of garbage collections performed by the memory tracker over the life of the process.";
  tmp470.__isset.description = true;
  tmp470.key = "mem-tracker.process.num-gcs";
  tmp470.__isset.key = true;
  tmp470.kind = ( ::impala::TMetricKind::type)1;
  tmp470.__isset.kind = true;
  tmp470.label = "MemTracker Garbage Collections";
  tmp470.__isset.label = true;
  tmp470.units = ( ::impala::TUnit::type)0;
  tmp470.__isset.units = true;

  TMetricDefs.insert(std::make_pair("mem-tracker.process.num-gcs", tmp470));
  TMetricDef tmp472;
  std::vector<std::string>  tmp473;
  tmp473.push_back("STATESTORE");
  tmp473.push_back("CATALOGSERVER");
  tmp473.push_back("IMPALAD");

  tmp472.contexts = tmp473;
  tmp472.__isset.contexts = true;
  tmp472.description = "Total bytes of anonymous (a.k.a. transparent) huge pages used by this process.";
  tmp472.__isset.description = true;
  tmp472.key = "memory.anon-huge-page-bytes";
  tmp472.__isset.key = true;
  tmp472.kind = ( ::impala::TMetricKind::type)0;
  tmp472.__isset.kind = true;
  tmp472.label = "Anonymous Huge Pages.";
  tmp472.__isset.label = true;
  tmp472.units = ( ::impala::TUnit::type)3;
  tmp472.__isset.units = true;

  TMetricDefs.insert(std::make_pair("memory.anon-huge-page-bytes", tmp472));
  TMetricDef tmp474;
  std::vector<std::string>  tmp475;
  tmp475.push_back("STATESTORE");
  tmp475.push_back("CATALOGSERVER");
  tmp475.push_back("IMPALAD");

  tmp474.contexts = tmp475;
  tmp474.__isset.contexts = true;
  tmp474.description = "Total bytes of memory mappings in this process (the virtual memory size).";
  tmp474.__isset.description = true;
  tmp474.key = "memory.mapped-bytes";
  tmp474.__isset.key = true;
  tmp474.kind = ( ::impala::TMetricKind::type)0;
  tmp474.__isset.kind = true;
  tmp474.label = "Total Virtual Memory.";
  tmp474.__isset.label = true;
  tmp474.units = ( ::impala::TUnit::type)3;
  tmp474.__isset.units = true;

  TMetricDefs.insert(std::make_pair("memory.mapped-bytes", tmp474));
  TMetricDef tmp476;
  std::vector<std::string>  tmp477;
  tmp477.push_back("STATESTORE");
  tmp477.push_back("CATALOGSERVER");
  tmp477.push_back("IMPALAD");

  tmp476.contexts = tmp477;
  tmp476.__isset.contexts = true;
  tmp476.description = "Total number of memory mappings in this process.";
  tmp476.__isset.description = true;
  tmp476.key = "memory.num-maps";
  tmp476.__isset.key = true;
  tmp476.kind = ( ::impala::TMetricKind::type)0;
  tmp476.__isset.kind = true;
  tmp476.label = "Number of memory mappings.";
  tmp476.__isset.label = true;
  tmp476.units = ( ::impala::TUnit::type)7;
  tmp476.__isset.units = true;

  TMetricDefs.insert(std::make_pair("memory.num-maps", tmp476));
  TMetricDef tmp478;
  std::vector<std::string>  tmp479;
  tmp479.push_back("STATESTORE");
  tmp479.push_back("CATALOGSERVER");
  tmp479.push_back("IMPALAD");

  tmp478.contexts = tmp479;
  tmp478.__isset.contexts = true;
  tmp478.description = "Resident set size (RSS) of this process, including TCMalloc, buffer pool and Jvm.";
  tmp478.__isset.description = true;
  tmp478.key = "memory.rss";
  tmp478.__isset.key = true;
  tmp478.kind = ( ::impala::TMetricKind::type)0;
  tmp478.__isset.kind = true;
  tmp478.label = "Resident set size.";
  tmp478.__isset.label = true;
  tmp478.units = ( ::impala::TUnit::type)3;
  tmp478.__isset.units = true;

  TMetricDefs.insert(std::make_pair("memory.rss", tmp478));
  TMetricDef tmp480;
  std::vector<std::string>  tmp481;
  tmp481.push_back("STATESTORE");
  tmp481.push_back("CATALOGSERVER");
  tmp481.push_back("IMPALAD");

  tmp480.contexts = tmp481;
  tmp480.__isset.contexts = true;
  tmp480.description = "The system-wide 'defrag' setting for Transparent Huge Pages.";
  tmp480.__isset.description = true;
  tmp480.key = "memory.thp.defrag";
  tmp480.__isset.key = true;
  tmp480.kind = ( ::impala::TMetricKind::type)2;
  tmp480.__isset.kind = true;
  tmp480.label = "Transparent Huge Pages Defrag Enabled.";
  tmp480.__isset.label = true;
  tmp480.units = ( ::impala::TUnit::type)7;
  tmp480.__isset.units = true;

  TMetricDefs.insert(std::make_pair("memory.thp.defrag", tmp480));
  TMetricDef tmp482;
  std::vector<std::string>  tmp483;
  tmp483.push_back("STATESTORE");
  tmp483.push_back("CATALOGSERVER");
  tmp483.push_back("IMPALAD");

  tmp482.contexts = tmp483;
  tmp482.__isset.contexts = true;
  tmp482.description = "The system-wide 'enabled' setting for Transparent Huge Pages.";
  tmp482.__isset.description = true;
  tmp482.key = "memory.thp.enabled";
  tmp482.__isset.key = true;
  tmp482.kind = ( ::impala::TMetricKind::type)2;
  tmp482.__isset.kind = true;
  tmp482.label = "Transparent Huge Pages Enabled.";
  tmp482.__isset.label = true;
  tmp482.units = ( ::impala::TUnit::type)7;
  tmp482.__isset.units = true;

  TMetricDefs.insert(std::make_pair("memory.thp.enabled", tmp482));
  TMetricDef tmp484;
  std::vector<std::string>  tmp485;
  tmp485.push_back("STATESTORE");
  tmp485.push_back("CATALOGSERVER");
  tmp485.push_back("IMPALAD");

  tmp484.contexts = tmp485;
  tmp484.__isset.contexts = true;
  tmp484.description = "The system-wide 'defrag' setting for khugepaged.";
  tmp484.__isset.description = true;
  tmp484.key = "memory.thp.khugepaged-defrag";
  tmp484.__isset.key = true;
  tmp484.kind = ( ::impala::TMetricKind::type)2;
  tmp484.__isset.kind = true;
  tmp484.label = "Khugepaged Defrag Enabled.";
  tmp484.__isset.label = true;
  tmp484.units = ( ::impala::TUnit::type)7;
  tmp484.__isset.units = true;

  TMetricDefs.insert(std::make_pair("memory.thp.khugepaged-defrag", tmp484));
  TMetricDef tmp486;
  std::vector<std::string>  tmp487;
  tmp487.push_back("STATESTORE");
  tmp487.push_back("CATALOGSERVER");
  tmp487.push_back("IMPALAD");

  tmp486.contexts = tmp487;
  tmp486.__isset.contexts = true;
  tmp486.description = "Total memory currently used by TCMalloc and buffer pool.";
  tmp486.__isset.description = true;
  tmp486.key = "memory.total-used";
  tmp486.__isset.key = true;
  tmp486.kind = ( ::impala::TMetricKind::type)0;
  tmp486.__isset.kind = true;
  tmp486.label = "Total Used Memory.";
  tmp486.__isset.label = true;
  tmp486.units = ( ::impala::TUnit::type)3;
  tmp486.__isset.units = true;

  TMetricDefs.insert(std::make_pair("memory.total-used", tmp486));
  TMetricDef tmp488;
  std::vector<std::string>  tmp489;
  tmp489.push_back("IMPALAD");
  tmp489.push_back("CATALOGSERVER");
  tmp489.push_back("STATESTORE");

  tmp488.contexts = tmp489;
  tmp488.__isset.contexts = true;
  tmp488.description = "The local start time of the process";
  tmp488.__isset.description = true;
  tmp488.key = "process-start-time";
  tmp488.__isset.key = true;
  tmp488.kind = ( ::impala::TMetricKind::type)2;
  tmp488.__isset.kind = true;
  tmp488.label = "Process Start Time";
  tmp488.__isset.label = true;
  tmp488.units = ( ::impala::TUnit::type)7;
  tmp488.__isset.units = true;

  TMetricDefs.insert(std::make_pair("process-start-time", tmp488));
  TMetricDef tmp490;
  std::vector<std::string>  tmp491;
  tmp491.push_back("IMPALAD");

  tmp490.contexts = tmp491;
  tmp490.__isset.contexts = true;
  tmp490.description = "Time (ms) spent resolving request request pools.";
  tmp490.__isset.description = true;
  tmp490.key = "request-pool-service.resolve-pool-duration-ms";
  tmp490.__isset.key = true;
  tmp490.kind = ( ::impala::TMetricKind::type)3;
  tmp490.__isset.kind = true;
  tmp490.label = "Request Pool Service Resolve Pool Duration Ms";
  tmp490.__isset.label = true;
  tmp490.units = ( ::impala::TUnit::type)8;
  tmp490.__isset.units = true;

  TMetricDefs.insert(std::make_pair("request-pool-service.resolve-pool-duration-ms", tmp490));
  TMetricDef tmp492;
  std::vector<std::string>  tmp493;
  tmp493.push_back("CATALOGSERVER");
  tmp493.push_back("STATESTORE");
  tmp493.push_back("IMPALAD");

  tmp492.contexts = tmp493;
  tmp492.__isset.contexts = true;
  tmp492.description = "Duration (ms) of RPC calls to $0";
  tmp492.__isset.description = true;
  tmp492.key = "rpc-method.$0.call_duration";
  tmp492.__isset.key = true;
  tmp492.kind = ( ::impala::TMetricKind::type)5;
  tmp492.__isset.kind = true;
  tmp492.label = "$0 RPC Call Duration";
  tmp492.__isset.label = true;
  tmp492.units = ( ::impala::TUnit::type)8;
  tmp492.__isset.units = true;

  TMetricDefs.insert(std::make_pair("rpc-method.$0.call_duration", tmp492));
  TMetricDef tmp494;
  std::vector<std::string>  tmp495;
  tmp495.push_back("IMPALAD");

  tmp494.contexts = tmp495;
  tmp494.__isset.contexts = true;
  tmp494.description = "Service $0: Total number of incoming RPCs that were rejected due to overflow of the service queue.";
  tmp494.__isset.description = true;
  tmp494.key = "rpc.$0.rpcs_queue_overflow";
  tmp494.__isset.key = true;
  tmp494.kind = ( ::impala::TMetricKind::type)1;
  tmp494.__isset.kind = true;
  tmp494.label = "Service $0 Incoming RPC Queue Overflows";
  tmp494.__isset.label = true;
  tmp494.units = ( ::impala::TUnit::type)0;
  tmp494.__isset.units = true;

  TMetricDefs.insert(std::make_pair("rpc.$0.rpcs_queue_overflow", tmp494));
  TMetricDef tmp496;
  std::vector<std::string>  tmp497;
  tmp497.push_back("STATESTORE");
  tmp497.push_back("CATALOGSERVER");
  tmp497.push_back("IMPALAD");

  tmp496.contexts = tmp497;
  tmp496.__isset.contexts = true;
  tmp496.description = "Bytes allocated from the sanitizer malloc (Sanitizer debug builds only)";
  tmp496.__isset.description = true;
  tmp496.key = "sanitizer-total-bytes-allocated";
  tmp496.__isset.key = true;
  tmp496.kind = ( ::impala::TMetricKind::type)0;
  tmp496.__isset.kind = true;
  tmp496.label = "Sanitizer Malloc Bytes Allocated";
  tmp496.__isset.label = true;
  tmp496.units = ( ::impala::TUnit::type)3;
  tmp496.__isset.units = true;

  TMetricDefs.insert(std::make_pair("sanitizer-total-bytes-allocated", tmp496));
  TMetricDef tmp498;
  std::vector<std::string>  tmp499;
  tmp499.push_back("IMPALAD");

  tmp498.contexts = tmp499;
  tmp498.__isset.contexts = true;
  tmp498.description = "Number of senders waiting for receiving fragment to initialize";
  tmp498.__isset.description = true;
  tmp498.key = "senders-blocked-on-recvr-creation";
  tmp498.__isset.key = true;
  tmp498.kind = ( ::impala::TMetricKind::type)0;
  tmp498.__isset.kind = true;
  tmp498.label = "Number of senders waiting for receiving fragment to initialize.";
  tmp498.__isset.label = true;
  tmp498.units = ( ::impala::TUnit::type)7;
  tmp498.__isset.units = true;

  TMetricDefs.insert(std::make_pair("senders-blocked-on-recvr-creation", tmp498));
  TMetricDef tmp500;
  std::vector<std::string>  tmp501;
  tmp501.push_back("IMPALAD");

  tmp500.contexts = tmp501;
  tmp500.__isset.contexts = true;
  tmp500.description = "The number of assignments";
  tmp500.__isset.description = true;
  tmp500.key = "simple-scheduler.assignments.total";
  tmp500.__isset.key = true;
  tmp500.kind = ( ::impala::TMetricKind::type)1;
  tmp500.__isset.kind = true;
  tmp500.label = "Assignments";
  tmp500.__isset.label = true;
  tmp500.units = ( ::impala::TUnit::type)0;
  tmp500.__isset.units = true;

  TMetricDefs.insert(std::make_pair("simple-scheduler.assignments.total", tmp500));
  TMetricDef tmp502;
  std::vector<std::string>  tmp503;
  tmp503.push_back("IMPALAD");

  tmp502.contexts = tmp503;
  tmp502.__isset.contexts = true;
  tmp502.description = "Indicates whether the scheduler has been initialized.";
  tmp502.__isset.description = true;
  tmp502.key = "simple-scheduler.initialized";
  tmp502.__isset.key = true;
  tmp502.kind = ( ::impala::TMetricKind::type)2;
  tmp502.__isset.kind = true;
  tmp502.label = "Simple Scheduler Initialized";
  tmp502.__isset.label = true;
  tmp502.units = ( ::impala::TUnit::type)7;
  tmp502.__isset.units = true;

  TMetricDefs.insert(std::make_pair("simple-scheduler.initialized", tmp502));
  TMetricDef tmp504;
  std::vector<std::string>  tmp505;
  tmp505.push_back("IMPALAD");

  tmp504.contexts = tmp505;
  tmp504.__isset.contexts = true;
  tmp504.description = "Number of assignments operating on local data";
  tmp504.__isset.description = true;
  tmp504.key = "simple-scheduler.local-assignments.total";
  tmp504.__isset.key = true;
  tmp504.kind = ( ::impala::TMetricKind::type)1;
  tmp504.__isset.kind = true;
  tmp504.label = "Local Assignments";
  tmp504.__isset.label = true;
  tmp504.units = ( ::impala::TUnit::type)0;
  tmp504.__isset.units = true;

  TMetricDefs.insert(std::make_pair("simple-scheduler.local-assignments.total", tmp504));
  TMetricDef tmp506;
  std::vector<std::string>  tmp507;
  tmp507.push_back("IMPALAD");

  tmp506.contexts = tmp507;
  tmp506.__isset.contexts = true;
  tmp506.description = "The number of backend connections from this Impala Daemon to other Impala Daemons.";
  tmp506.__isset.description = true;
  tmp506.key = "simple-scheduler.num-backends";
  tmp506.__isset.key = true;
  tmp506.kind = ( ::impala::TMetricKind::type)0;
  tmp506.__isset.kind = true;
  tmp506.label = "Backend Connections";
  tmp506.__isset.label = true;
  tmp506.units = ( ::impala::TUnit::type)7;
  tmp506.__isset.units = true;

  TMetricDefs.insert(std::make_pair("simple-scheduler.num-backends", tmp506));
  TMetricDef tmp508;
  std::vector<std::string>  tmp509;
  tmp509.push_back("CATALOGSERVER");
  tmp509.push_back("IMPALAD");

  tmp508.contexts = tmp509;
  tmp508.__isset.contexts = true;
  tmp508.description = "Whether the Impala Daemon considers itself connected to the StateStore.";
  tmp508.__isset.description = true;
  tmp508.key = "statestore-subscriber.connected";
  tmp508.__isset.key = true;
  tmp508.kind = ( ::impala::TMetricKind::type)2;
  tmp508.__isset.kind = true;
  tmp508.label = "StateStore Connectivity";
  tmp508.__isset.label = true;
  tmp508.units = ( ::impala::TUnit::type)7;
  tmp508.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore-subscriber.connected", tmp508));
  TMetricDef tmp510;
  std::vector<std::string>  tmp511;
  tmp511.push_back("CATALOGSERVER");
  tmp511.push_back("IMPALAD");

  tmp510.contexts = tmp511;
  tmp510.__isset.contexts = true;
  tmp510.description = "The time (sec) between Statestore heartbeats.";
  tmp510.__isset.description = true;
  tmp510.key = "statestore-subscriber.heartbeat-interval-time";
  tmp510.__isset.key = true;
  tmp510.kind = ( ::impala::TMetricKind::type)3;
  tmp510.__isset.kind = true;
  tmp510.label = "Statestore Subscriber Heartbeat Interval Time";
  tmp510.__isset.label = true;
  tmp510.units = ( ::impala::TUnit::type)9;
  tmp510.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore-subscriber.heartbeat-interval-time", tmp510));
  TMetricDef tmp512;
  std::vector<std::string>  tmp513;
  tmp513.push_back("CATALOGSERVER");
  tmp513.push_back("IMPALAD");

  tmp512.contexts = tmp513;
  tmp512.__isset.contexts = true;
  tmp512.description = "The amount of time the StateStore subscriber took to recover the connection the last time it was lost.";
  tmp512.__isset.description = true;
  tmp512.key = "statestore-subscriber.last-recovery-duration";
  tmp512.__isset.key = true;
  tmp512.kind = ( ::impala::TMetricKind::type)0;
  tmp512.__isset.kind = true;
  tmp512.label = "StateStore Subscriber Last Recovery Duration";
  tmp512.__isset.label = true;
  tmp512.units = ( ::impala::TUnit::type)9;
  tmp512.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore-subscriber.last-recovery-duration", tmp512));
  TMetricDef tmp514;
  std::vector<std::string>  tmp515;
  tmp515.push_back("CATALOGSERVER");
  tmp515.push_back("IMPALAD");

  tmp514.contexts = tmp515;
  tmp514.__isset.contexts = true;
  tmp514.description = "The local time that the last statestore recovery happened.";
  tmp514.__isset.description = true;
  tmp514.key = "statestore-subscriber.last-recovery-time";
  tmp514.__isset.key = true;
  tmp514.kind = ( ::impala::TMetricKind::type)2;
  tmp514.__isset.kind = true;
  tmp514.label = "Statestore Subscriber Last Recovery Time";
  tmp514.__isset.label = true;
  tmp514.units = ( ::impala::TUnit::type)7;
  tmp514.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore-subscriber.last-recovery-time", tmp514));
  TMetricDef tmp516;
  std::vector<std::string>  tmp517;
  tmp517.push_back("CATALOGSERVER");
  tmp517.push_back("IMPALAD");

  tmp516.contexts = tmp517;
  tmp516.__isset.contexts = true;
  tmp516.description = "Number of times that the Daemon detected a loss of connectivity to the StateStore.";
  tmp516.__isset.description = true;
  tmp516.key = "statestore-subscriber.num-connection-failures";
  tmp516.__isset.key = true;
  tmp516.kind = ( ::impala::TMetricKind::type)1;
  tmp516.__isset.kind = true;
  tmp516.label = "StateStore Connectivity Loss Count.";
  tmp516.__isset.label = true;
  tmp516.units = ( ::impala::TUnit::type)0;
  tmp516.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore-subscriber.num-connection-failures", tmp516));
  TMetricDef tmp518;
  std::vector<std::string>  tmp519;
  tmp519.push_back("CATALOGSERVER");
  tmp519.push_back("IMPALAD");

  tmp518.contexts = tmp519;
  tmp518.__isset.contexts = true;
  tmp518.description = "The most recent registration ID for this subscriber with the statestore. Set to 'N/A' if no registration has been completed";
  tmp518.__isset.description = true;
  tmp518.key = "statestore-subscriber.registration-id";
  tmp518.__isset.key = true;
  tmp518.kind = ( ::impala::TMetricKind::type)2;
  tmp518.__isset.kind = true;
  tmp518.label = "Statestore Subscriber Registration Id";
  tmp518.__isset.label = true;
  tmp518.units = ( ::impala::TUnit::type)7;
  tmp518.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore-subscriber.registration-id", tmp518));
  TMetricDef tmp520;
  std::vector<std::string>  tmp521;
  tmp521.push_back("CATALOGSERVER");
  tmp521.push_back("IMPALAD");

  tmp520.contexts = tmp521;
  tmp520.__isset.contexts = true;
  tmp520.description = "The number of active StateStore subscriber clients in this Impala Daemon's client cache. These clients are for communication from this role to the StateStore.";
  tmp520.__isset.description = true;
  tmp520.key = "statestore-subscriber.statestore.client-cache.clients-in-use";
  tmp520.__isset.key = true;
  tmp520.kind = ( ::impala::TMetricKind::type)0;
  tmp520.__isset.kind = true;
  tmp520.label = "StateStore Subscriber Active Clients";
  tmp520.__isset.label = true;
  tmp520.units = ( ::impala::TUnit::type)7;
  tmp520.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore-subscriber.statestore.client-cache.clients-in-use", tmp520));
  TMetricDef tmp522;
  std::vector<std::string>  tmp523;
  tmp523.push_back("CATALOGSERVER");
  tmp523.push_back("IMPALAD");

  tmp522.contexts = tmp523;
  tmp522.__isset.contexts = true;
  tmp522.description = "The total number of StateStore subscriber clients in this Impala Daemon's client cache. These clients are for communication from this role to the StateStore.";
  tmp522.__isset.description = true;
  tmp522.key = "statestore-subscriber.statestore.client-cache.total-clients";
  tmp522.__isset.key = true;
  tmp522.kind = ( ::impala::TMetricKind::type)0;
  tmp522.__isset.kind = true;
  tmp522.label = "StateStore Subscriber Total Clients";
  tmp522.__isset.label = true;
  tmp522.units = ( ::impala::TUnit::type)7;
  tmp522.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore-subscriber.statestore.client-cache.total-clients", tmp522));
  TMetricDef tmp524;
  std::vector<std::string>  tmp525;
  tmp525.push_back("CATALOGSERVER");
  tmp525.push_back("IMPALAD");

  tmp524.contexts = tmp525;
  tmp524.__isset.contexts = true;
  tmp524.description = "Statestore Subscriber Topic $0 Processing Time";
  tmp524.__isset.description = true;
  tmp524.key = "statestore-subscriber.topic-$0.processing-time-s";
  tmp524.__isset.key = true;
  tmp524.kind = ( ::impala::TMetricKind::type)3;
  tmp524.__isset.kind = true;
  tmp524.label = "Statestore Subscriber Topic $0 Processing Time";
  tmp524.__isset.label = true;
  tmp524.units = ( ::impala::TUnit::type)9;
  tmp524.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore-subscriber.topic-$0.processing-time-s", tmp524));
  TMetricDef tmp526;
  std::vector<std::string>  tmp527;
  tmp527.push_back("CATALOGSERVER");
  tmp527.push_back("IMPALAD");

  tmp526.contexts = tmp527;
  tmp526.__isset.contexts = true;
  tmp526.description = "Interval between topic updates for Topic $0";
  tmp526.__isset.description = true;
  tmp526.key = "statestore-subscriber.topic-$0.update-interval";
  tmp526.__isset.key = true;
  tmp526.kind = ( ::impala::TMetricKind::type)3;
  tmp526.__isset.kind = true;
  tmp526.label = "Statestore Subscriber Topic $0 Update Interval";
  tmp526.__isset.label = true;
  tmp526.units = ( ::impala::TUnit::type)9;
  tmp526.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore-subscriber.topic-$0.update-interval", tmp526));
  TMetricDef tmp528;
  std::vector<std::string>  tmp529;
  tmp529.push_back("CATALOGSERVER");
  tmp529.push_back("IMPALAD");

  tmp528.contexts = tmp529;
  tmp528.__isset.contexts = true;
  tmp528.description = "The time (sec) taken to process Statestore subscriber topic updates.";
  tmp528.__isset.description = true;
  tmp528.key = "statestore-subscriber.topic-update-duration";
  tmp528.__isset.key = true;
  tmp528.kind = ( ::impala::TMetricKind::type)3;
  tmp528.__isset.kind = true;
  tmp528.label = "Statestore Subscriber Topic Update Duration";
  tmp528.__isset.label = true;
  tmp528.units = ( ::impala::TUnit::type)9;
  tmp528.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore-subscriber.topic-update-duration", tmp528));
  TMetricDef tmp530;
  std::vector<std::string>  tmp531;
  tmp531.push_back("CATALOGSERVER");
  tmp531.push_back("IMPALAD");

  tmp530.contexts = tmp531;
  tmp530.__isset.contexts = true;
  tmp530.description = "The time (sec) between Statestore subscriber topic updates.";
  tmp530.__isset.description = true;
  tmp530.key = "statestore-subscriber.topic-update-interval-time";
  tmp530.__isset.key = true;
  tmp530.kind = ( ::impala::TMetricKind::type)3;
  tmp530.__isset.kind = true;
  tmp530.label = "Statestore Subscriber Topic Update Interval Time";
  tmp530.__isset.label = true;
  tmp530.units = ( ::impala::TUnit::type)9;
  tmp530.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore-subscriber.topic-update-interval-time", tmp530));
  TMetricDef tmp532;
  std::vector<std::string>  tmp533;
  tmp533.push_back("STATESTORE");

  tmp532.contexts = tmp533;
  tmp532.__isset.contexts = true;
  tmp532.description = "The time (sec) spent sending heartbeat RPCs. Includes subscriber-side processing time and network transmission time.";
  tmp532.__isset.description = true;
  tmp532.key = "statestore.heartbeat-durations";
  tmp532.__isset.key = true;
  tmp532.kind = ( ::impala::TMetricKind::type)3;
  tmp532.__isset.kind = true;
  tmp532.label = "Statestore Heartbeat Durations";
  tmp532.__isset.label = true;
  tmp532.units = ( ::impala::TUnit::type)9;
  tmp532.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.heartbeat-durations", tmp532));
  TMetricDef tmp534;
  std::vector<std::string>  tmp535;
  tmp535.push_back("STATESTORE");

  tmp534.contexts = tmp535;
  tmp534.__isset.contexts = true;
  tmp534.description = "The number of registered Statestore subscribers.";
  tmp534.__isset.description = true;
  tmp534.key = "statestore.live-backends";
  tmp534.__isset.key = true;
  tmp534.kind = ( ::impala::TMetricKind::type)0;
  tmp534.__isset.kind = true;
  tmp534.label = "Statestore Live Backends";
  tmp534.__isset.label = true;
  tmp534.units = ( ::impala::TUnit::type)7;
  tmp534.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.live-backends", tmp534));
  TMetricDef tmp536;
  std::vector<std::string>  tmp537;
  tmp537.push_back("STATESTORE");

  tmp536.contexts = tmp537;
  tmp536.__isset.contexts = true;
  tmp536.description = "The set of all live Statestore subscribers.";
  tmp536.__isset.description = true;
  tmp536.key = "statestore.live-backends.list";
  tmp536.__isset.key = true;
  tmp536.kind = ( ::impala::TMetricKind::type)4;
  tmp536.__isset.kind = true;
  tmp536.label = "Statestore Live Backends List";
  tmp536.__isset.label = true;
  tmp536.units = ( ::impala::TUnit::type)7;
  tmp536.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.live-backends.list", tmp536));
  TMetricDef tmp538;
  std::vector<std::string>  tmp539;
  tmp539.push_back("STATESTORE");

  tmp538.contexts = tmp539;
  tmp538.__isset.contexts = true;
  tmp538.description = "The time (sec) spent sending priority topic update RPCs. Includes subscriber-side processing time and network transmission time.";
  tmp538.__isset.description = true;
  tmp538.key = "statestore.priority-topic-update-durations";
  tmp538.__isset.key = true;
  tmp538.kind = ( ::impala::TMetricKind::type)3;
  tmp538.__isset.kind = true;
  tmp538.label = "Statestore Priority Topic Update Durations";
  tmp538.__isset.label = true;
  tmp538.units = ( ::impala::TUnit::type)9;
  tmp538.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.priority-topic-update-durations", tmp538));
  TMetricDef tmp540;
  std::vector<std::string>  tmp541;
  tmp541.push_back("STATESTORE");

  tmp540.contexts = tmp541;
  tmp540.__isset.contexts = true;
  tmp540.description = "The time (sec) spent sending non-priority topic update RPCs. Includes subscriber-side processing time and network transmission time.";
  tmp540.__isset.description = true;
  tmp540.key = "statestore.topic-update-durations";
  tmp540.__isset.key = true;
  tmp540.kind = ( ::impala::TMetricKind::type)3;
  tmp540.__isset.kind = true;
  tmp540.label = "Statestore Topic Update Durations";
  tmp540.__isset.label = true;
  tmp540.units = ( ::impala::TUnit::type)9;
  tmp540.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.topic-update-durations", tmp540));
  TMetricDef tmp542;
  std::vector<std::string>  tmp543;
  tmp543.push_back("STATESTORE");

  tmp542.contexts = tmp543;
  tmp542.__isset.contexts = true;
  tmp542.description = "The sum of the size of all keys for all topics tracked by the StateStore.";
  tmp542.__isset.description = true;
  tmp542.key = "statestore.total-key-size-bytes";
  tmp542.__isset.key = true;
  tmp542.kind = ( ::impala::TMetricKind::type)0;
  tmp542.__isset.kind = true;
  tmp542.label = "Topic Key Size";
  tmp542.__isset.label = true;
  tmp542.units = ( ::impala::TUnit::type)7;
  tmp542.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.total-key-size-bytes", tmp542));
  TMetricDef tmp544;
  std::vector<std::string>  tmp545;
  tmp545.push_back("STATESTORE");

  tmp544.contexts = tmp545;
  tmp544.__isset.contexts = true;
  tmp544.description = "The sum of the size of all keys and all values for all topics tracked by the StateStore.";
  tmp544.__isset.description = true;
  tmp544.key = "statestore.total-topic-size-bytes";
  tmp544.__isset.key = true;
  tmp544.kind = ( ::impala::TMetricKind::type)0;
  tmp544.__isset.kind = true;
  tmp544.label = "Topic Size";
  tmp544.__isset.label = true;
  tmp544.units = ( ::impala::TUnit::type)7;
  tmp544.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.total-topic-size-bytes", tmp544));
  TMetricDef tmp546;
  std::vector<std::string>  tmp547;
  tmp547.push_back("STATESTORE");

  tmp546.contexts = tmp547;
  tmp546.__isset.contexts = true;
  tmp546.description = "The sum of the size of all values for all topics tracked by the StateStore.";
  tmp546.__isset.description = true;
  tmp546.key = "statestore.total-value-size-bytes";
  tmp546.__isset.key = true;
  tmp546.kind = ( ::impala::TMetricKind::type)0;
  tmp546.__isset.kind = true;
  tmp546.label = "Topic Value Size";
  tmp546.__isset.label = true;
  tmp546.units = ( ::impala::TUnit::type)7;
  tmp546.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.total-value-size-bytes", tmp546));
  TMetricDef tmp548;
  std::vector<std::string>  tmp549;
  tmp549.push_back("STATESTORE");

  tmp548.contexts = tmp549;
  tmp548.__isset.contexts = true;
  tmp548.description = "The full version string of the Statestore Server.";
  tmp548.__isset.description = true;
  tmp548.key = "statestore.version";
  tmp548.__isset.key = true;
  tmp548.kind = ( ::impala::TMetricKind::type)2;
  tmp548.__isset.kind = true;
  tmp548.label = "Statestore Version";
  tmp548.__isset.label = true;
  tmp548.units = ( ::impala::TUnit::type)7;
  tmp548.__isset.units = true;

  TMetricDefs.insert(std::make_pair("statestore.version", tmp548));
  TMetricDef tmp550;
  std::vector<std::string>  tmp551;
  tmp551.push_back("STATESTORE");

  tmp550.contexts = tmp551;
  tmp550.__isset.contexts = true;
  tmp550.description = "The number of clients in use by the Statestore heartbeat client cache.";
  tmp550.__isset.description = true;
  tmp550.key = "subscriber-heartbeat.client-cache.clients-in-use";
  tmp550.__isset.key = true;
  tmp550.kind = ( ::impala::TMetricKind::type)0;
  tmp550.__isset.kind = true;
  tmp550.label = "Subscriber Heartbeat Client Cache Clients In Use";
  tmp550.__isset.label = true;
  tmp550.units = ( ::impala::TUnit::type)7;
  tmp550.__isset.units = true;

  TMetricDefs.insert(std::make_pair("subscriber-heartbeat.client-cache.clients-in-use", tmp550));
  TMetricDef tmp552;
  std::vector<std::string>  tmp553;
  tmp553.push_back("STATESTORE");

  tmp552.contexts = tmp553;
  tmp552.__isset.contexts = true;
  tmp552.description = "The total number of clients in the Statestore heartbeat client cache.";
  tmp552.__isset.description = true;
  tmp552.key = "subscriber-heartbeat.client-cache.total-clients";
  tmp552.__isset.key = true;
  tmp552.kind = ( ::impala::TMetricKind::type)0;
  tmp552.__isset.kind = true;
  tmp552.label = "Subscriber Heartbeat Client Cache Total Clients";
  tmp552.__isset.label = true;
  tmp552.units = ( ::impala::TUnit::type)7;
  tmp552.__isset.units = true;

  TMetricDefs.insert(std::make_pair("subscriber-heartbeat.client-cache.total-clients", tmp552));
  TMetricDef tmp554;
  std::vector<std::string>  tmp555;
  tmp555.push_back("STATESTORE");

  tmp554.contexts = tmp555;
  tmp554.__isset.contexts = true;
  tmp554.description = "The number of clients in use by the Statestore update state client cache.";
  tmp554.__isset.description = true;
  tmp554.key = "subscriber-update-state.client-cache.clients-in-use";
  tmp554.__isset.key = true;
  tmp554.kind = ( ::impala::TMetricKind::type)0;
  tmp554.__isset.kind = true;
  tmp554.label = "Subscriber Update State Client Cache Clients In Use";
  tmp554.__isset.label = true;
  tmp554.units = ( ::impala::TUnit::type)7;
  tmp554.__isset.units = true;

  TMetricDefs.insert(std::make_pair("subscriber-update-state.client-cache.clients-in-use", tmp554));
  TMetricDef tmp556;
  std::vector<std::string>  tmp557;
  tmp557.push_back("STATESTORE");

  tmp556.contexts = tmp557;
  tmp556.__isset.contexts = true;
  tmp556.description = "The total number of clients in the Statestore update state client cache.";
  tmp556.__isset.description = true;
  tmp556.key = "subscriber-update-state.client-cache.total-clients";
  tmp556.__isset.key = true;
  tmp556.kind = ( ::impala::TMetricKind::type)0;
  tmp556.__isset.kind = true;
  tmp556.label = "Subscriber Update State Client Cache Total Clients";
  tmp556.__isset.label = true;
  tmp556.units = ( ::impala::TUnit::type)7;
  tmp556.__isset.units = true;

  TMetricDefs.insert(std::make_pair("subscriber-update-state.client-cache.total-clients", tmp556));
  TMetricDef tmp558;
  std::vector<std::string>  tmp559;
  tmp559.push_back("STATESTORE");
  tmp559.push_back("CATALOGSERVER");
  tmp559.push_back("IMPALAD");

  tmp558.contexts = tmp559;
  tmp558.__isset.contexts = true;
  tmp558.description = "Number of bytes used by the application. This will not typically match the memory use reported by the OS, because it does not include TCMalloc overhead or memory fragmentation.";
  tmp558.__isset.description = true;
  tmp558.key = "tcmalloc.bytes-in-use";
  tmp558.__isset.key = true;
  tmp558.kind = ( ::impala::TMetricKind::type)0;
  tmp558.__isset.kind = true;
  tmp558.label = "TCMalloc Bytes in Use";
  tmp558.__isset.label = true;
  tmp558.units = ( ::impala::TUnit::type)3;
  tmp558.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tcmalloc.bytes-in-use", tmp558));
  TMetricDef tmp560;
  std::vector<std::string>  tmp561;
  tmp561.push_back("STATESTORE");
  tmp561.push_back("CATALOGSERVER");
  tmp561.push_back("IMPALAD");

  tmp560.contexts = tmp561;
  tmp560.__isset.contexts = true;
  tmp560.description = "Number of bytes in free, mapped pages in page heap. These bytes can be used to fulfill allocation requests. They always count towards virtual memory usage, and unless the underlying memory is swapped out by the OS, they also count towards physical memory usage.";
  tmp560.__isset.description = true;
  tmp560.key = "tcmalloc.pageheap-free-bytes";
  tmp560.__isset.key = true;
  tmp560.kind = ( ::impala::TMetricKind::type)0;
  tmp560.__isset.kind = true;
  tmp560.label = "TCMalloc Pageheap Free";
  tmp560.__isset.label = true;
  tmp560.units = ( ::impala::TUnit::type)3;
  tmp560.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tcmalloc.pageheap-free-bytes", tmp560));
  TMetricDef tmp562;
  std::vector<std::string>  tmp563;
  tmp563.push_back("STATESTORE");
  tmp563.push_back("CATALOGSERVER");
  tmp563.push_back("IMPALAD");

  tmp562.contexts = tmp563;
  tmp562.__isset.contexts = true;
  tmp562.description = "Number of bytes in free, unmapped pages in page heap. These are bytes that have been released back to the OS, possibly by one of the MallocExtension \"Release\" calls. They can be used to fulfill allocation requests, but typically incur a page fault. They always count towards virtual memory usage, and depending on the OS, typically do not count towards physical memory usage.";
  tmp562.__isset.description = true;
  tmp562.key = "tcmalloc.pageheap-unmapped-bytes";
  tmp562.__isset.key = true;
  tmp562.kind = ( ::impala::TMetricKind::type)0;
  tmp562.__isset.kind = true;
  tmp562.label = "TCMalloc Pageheap Unmapped";
  tmp562.__isset.label = true;
  tmp562.units = ( ::impala::TUnit::type)3;
  tmp562.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tcmalloc.pageheap-unmapped-bytes", tmp562));
  TMetricDef tmp564;
  std::vector<std::string>  tmp565;
  tmp565.push_back("STATESTORE");
  tmp565.push_back("CATALOGSERVER");
  tmp565.push_back("IMPALAD");

  tmp564.contexts = tmp565;
  tmp564.__isset.contexts = true;
  tmp564.description = "Derived metric computing the amount of physical memory (in bytes) used by the process, including that actually in use and free bytes reserved by tcmalloc. Does not include the tcmalloc metadata.";
  tmp564.__isset.description = true;
  tmp564.key = "tcmalloc.physical-bytes-reserved";
  tmp564.__isset.key = true;
  tmp564.kind = ( ::impala::TMetricKind::type)0;
  tmp564.__isset.kind = true;
  tmp564.label = "TCMalloc Physical Bytes Reserved";
  tmp564.__isset.label = true;
  tmp564.units = ( ::impala::TUnit::type)3;
  tmp564.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tcmalloc.physical-bytes-reserved", tmp564));
  TMetricDef tmp566;
  std::vector<std::string>  tmp567;
  tmp567.push_back("STATESTORE");
  tmp567.push_back("CATALOGSERVER");
  tmp567.push_back("IMPALAD");

  tmp566.contexts = tmp567;
  tmp566.__isset.contexts = true;
  tmp566.description = "Bytes of system memory reserved by TCMalloc.";
  tmp566.__isset.description = true;
  tmp566.key = "tcmalloc.total-bytes-reserved";
  tmp566.__isset.key = true;
  tmp566.kind = ( ::impala::TMetricKind::type)0;
  tmp566.__isset.kind = true;
  tmp566.label = "TCMalloc Total Bytes Reserved";
  tmp566.__isset.label = true;
  tmp566.units = ( ::impala::TUnit::type)3;
  tmp566.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tcmalloc.total-bytes-reserved", tmp566));
  TMetricDef tmp568;
  std::vector<std::string>  tmp569;
  tmp569.push_back("STATESTORE");
  tmp569.push_back("CATALOGSERVER");
  tmp569.push_back("IMPALAD");

  tmp568.contexts = tmp569;
  tmp568.__isset.contexts = true;
  tmp568.description = "The number of running threads in this process.";
  tmp568.__isset.description = true;
  tmp568.key = "thread-manager.running-threads";
  tmp568.__isset.key = true;
  tmp568.kind = ( ::impala::TMetricKind::type)0;
  tmp568.__isset.kind = true;
  tmp568.label = "Running Threads";
  tmp568.__isset.label = true;
  tmp568.units = ( ::impala::TUnit::type)7;
  tmp568.__isset.units = true;

  TMetricDefs.insert(std::make_pair("thread-manager.running-threads", tmp568));
  TMetricDef tmp570;
  std::vector<std::string>  tmp571;
  tmp571.push_back("STATESTORE");
  tmp571.push_back("CATALOGSERVER");
  tmp571.push_back("IMPALAD");

  tmp570.contexts = tmp571;
  tmp570.__isset.contexts = true;
  tmp570.description = "Threads created over the lifetime of the process.";
  tmp570.__isset.description = true;
  tmp570.key = "thread-manager.total-threads-created";
  tmp570.__isset.key = true;
  tmp570.kind = ( ::impala::TMetricKind::type)0;
  tmp570.__isset.kind = true;
  tmp570.label = "Threads Created";
  tmp570.__isset.label = true;
  tmp570.units = ( ::impala::TUnit::type)7;
  tmp570.__isset.units = true;

  TMetricDefs.insert(std::make_pair("thread-manager.total-threads-created", tmp570));
  TMetricDef tmp572;
  std::vector<std::string>  tmp573;
  tmp573.push_back("IMPALAD");

  tmp572.contexts = tmp573;
  tmp572.__isset.contexts = true;
  tmp572.description = "The number of active scratch directories for spilling to disk.";
  tmp572.__isset.description = true;
  tmp572.key = "tmp-file-mgr.active-scratch-dirs";
  tmp572.__isset.key = true;
  tmp572.kind = ( ::impala::TMetricKind::type)0;
  tmp572.__isset.kind = true;
  tmp572.label = "Active scratch directories";
  tmp572.__isset.label = true;
  tmp572.units = ( ::impala::TUnit::type)7;
  tmp572.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tmp-file-mgr.active-scratch-dirs", tmp572));
  TMetricDef tmp574;
  std::vector<std::string>  tmp575;
  tmp575.push_back("IMPALAD");

  tmp574.contexts = tmp575;
  tmp574.__isset.contexts = true;
  tmp574.description = "The set of all active scratch directories for spilling to disk.";
  tmp574.__isset.description = true;
  tmp574.key = "tmp-file-mgr.active-scratch-dirs.list";
  tmp574.__isset.key = true;
  tmp574.kind = ( ::impala::TMetricKind::type)4;
  tmp574.__isset.kind = true;
  tmp574.label = "Active scratch directories list";
  tmp574.__isset.label = true;
  tmp574.units = ( ::impala::TUnit::type)7;
  tmp574.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tmp-file-mgr.active-scratch-dirs.list", tmp574));
  TMetricDef tmp576;
  std::vector<std::string>  tmp577;
  tmp577.push_back("IMPALAD");

  tmp576.contexts = tmp577;
  tmp576.__isset.contexts = true;
  tmp576.description = "The current total spilled bytes for the local buffer directory.";
  tmp576.__isset.description = true;
  tmp576.key = "tmp-file-mgr.local-buff-bytes-used.dir-$0";
  tmp576.__isset.key = true;
  tmp576.kind = ( ::impala::TMetricKind::type)0;
  tmp576.__isset.kind = true;
  tmp576.label = "Per-directory local buffer space bytes used";
  tmp576.__isset.label = true;
  tmp576.units = ( ::impala::TUnit::type)3;
  tmp576.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tmp-file-mgr.local-buff-bytes-used.dir-$0", tmp576));
  TMetricDef tmp578;
  std::vector<std::string>  tmp579;
  tmp579.push_back("IMPALAD");

  tmp578.contexts = tmp579;
  tmp578.__isset.contexts = true;
  tmp578.description = "The current total spilled bytes across all scratch directories.";
  tmp578.__isset.description = true;
  tmp578.key = "tmp-file-mgr.scratch-space-bytes-used";
  tmp578.__isset.key = true;
  tmp578.kind = ( ::impala::TMetricKind::type)0;
  tmp578.__isset.kind = true;
  tmp578.label = "Spilled bytes for scratch directories";
  tmp578.__isset.label = true;
  tmp578.units = ( ::impala::TUnit::type)3;
  tmp578.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tmp-file-mgr.scratch-space-bytes-used", tmp578));
  TMetricDef tmp580;
  std::vector<std::string>  tmp581;
  tmp581.push_back("IMPALAD");

  tmp580.contexts = tmp581;
  tmp580.__isset.contexts = true;
  tmp580.description = "The high water mark for spilled bytes across all scratch directories.";
  tmp580.__isset.description = true;
  tmp580.key = "tmp-file-mgr.scratch-space-bytes-used-high-water-mark";
  tmp580.__isset.key = true;
  tmp580.kind = ( ::impala::TMetricKind::type)0;
  tmp580.__isset.kind = true;
  tmp580.label = "Spilled bytes HWM for scratch directories";
  tmp580.__isset.label = true;
  tmp580.units = ( ::impala::TUnit::type)3;
  tmp580.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tmp-file-mgr.scratch-space-bytes-used-high-water-mark", tmp580));
  TMetricDef tmp582;
  std::vector<std::string>  tmp583;
  tmp583.push_back("IMPALAD");

  tmp582.contexts = tmp583;
  tmp582.__isset.contexts = true;
  tmp582.description = "The current total spilled bytes for a single scratch directory.";
  tmp582.__isset.description = true;
  tmp582.key = "tmp-file-mgr.scratch-space-bytes-used.dir-$0";
  tmp582.__isset.key = true;
  tmp582.kind = ( ::impala::TMetricKind::type)0;
  tmp582.__isset.kind = true;
  tmp582.label = "Per-directory scratch space bytes used";
  tmp582.__isset.label = true;
  tmp582.units = ( ::impala::TUnit::type)3;
  tmp582.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tmp-file-mgr.scratch-space-bytes-used.dir-$0", tmp582));
  TMetricDef tmp584;
  std::vector<std::string>  tmp585;
  tmp585.push_back("IMPALAD");

  tmp584.contexts = tmp585;
  tmp584.__isset.contexts = true;
  tmp584.description = "The durations of dequeuing from the TmpFileBufferPool.";
  tmp584.__isset.description = true;
  tmp584.key = "tmp-file-mgr.tmp-file-buff-pool-dequeue-durations";
  tmp584.__isset.key = true;
  tmp584.kind = ( ::impala::TMetricKind::type)5;
  tmp584.__isset.kind = true;
  tmp584.label = "Dequeue durations for the TmpFileBufferPool";
  tmp584.__isset.label = true;
  tmp584.units = ( ::impala::TUnit::type)5;
  tmp584.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tmp-file-mgr.tmp-file-buff-pool-dequeue-durations", tmp584));
  TMetricDef tmp586;
  std::vector<std::string>  tmp587;
  tmp587.push_back("IMPALAD");

  tmp586.contexts = tmp587;
  tmp586.__isset.contexts = true;
  tmp586.description = "Total number of senders that have been blocked waiting for receiving fragment to initialize.";
  tmp586.__isset.description = true;
  tmp586.key = "total-senders-blocked-on-recvr-creation";
  tmp586.__isset.key = true;
  tmp586.kind = ( ::impala::TMetricKind::type)1;
  tmp586.__isset.kind = true;
  tmp586.label = "Total senders waiting for receiving fragment to initialize";
  tmp586.__isset.label = true;
  tmp586.units = ( ::impala::TUnit::type)7;
  tmp586.__isset.units = true;

  TMetricDefs.insert(std::make_pair("total-senders-blocked-on-recvr-creation", tmp586));
  TMetricDef tmp588;
  std::vector<std::string>  tmp589;
  tmp589.push_back("IMPALAD");

  tmp588.contexts = tmp589;
  tmp588.__isset.contexts = true;
  tmp588.description = "Total number of senders that timed-out waiting for receiving fragment to initialize.";
  tmp588.__isset.description = true;
  tmp588.key = "total-senders-timedout-waiting-for-recvr-creation";
  tmp588.__isset.key = true;
  tmp588.kind = ( ::impala::TMetricKind::type)1;
  tmp588.__isset.kind = true;
  tmp588.label = "Total senders timed-out waiting for receiving fragment to initialize";
  tmp588.__isset.label = true;
  tmp588.units = ( ::impala::TUnit::type)7;
  tmp588.__isset.units = true;

  TMetricDefs.insert(std::make_pair("total-senders-timedout-waiting-for-recvr-creation", tmp588));
  TMetricDef tmp590;
  std::vector<std::string>  tmp591;
  tmp591.push_back("IMPALAD");

  tmp590.contexts = tmp591;
  tmp590.__isset.contexts = true;
  tmp590.description = "Path to the time-zone database";
  tmp590.__isset.description = true;
  tmp590.key = "tzdata-path";
  tmp590.__isset.key = true;
  tmp590.kind = ( ::impala::TMetricKind::type)2;
  tmp590.__isset.kind = true;
  tmp590.label = "Path to the time-zone database";
  tmp590.__isset.label = true;
  tmp590.units = ( ::impala::TUnit::type)7;
  tmp590.__isset.units = true;

  TMetricDefs.insert(std::make_pair("tzdata-path", tmp590));

}

} // namespace

