/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StatestoreService_TYPES_H
#define StatestoreService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Status_types.h"
#include "Types_types.h"


namespace impala {

struct StatestoreServiceVersion {
  enum type {
    V1 = 0
  };
};

extern const std::map<int, const char*> _StatestoreServiceVersion_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const StatestoreServiceVersion::type& val);

class THeavyMemoryQuery;

class TPoolStats;

class THostStats;

class TPerHostStatsUpdateElement;

class TPerHostStatsUpdate;

class TTopicItem;

class TTopicDelta;

class TTopicRegistration;

class TRegisterSubscriberRequest;

class TRegisterSubscriberResponse;

class TUpdateStateRequest;

class TUpdateStateResponse;

class THeartbeatRequest;

class THeartbeatResponse;


class THeavyMemoryQuery {
 public:

  THeavyMemoryQuery(const THeavyMemoryQuery&);
  THeavyMemoryQuery(THeavyMemoryQuery&&);
  THeavyMemoryQuery& operator=(const THeavyMemoryQuery&);
  THeavyMemoryQuery& operator=(THeavyMemoryQuery&&);
  THeavyMemoryQuery() : memory_consumed(0) {
  }

  virtual ~THeavyMemoryQuery() throw();
  int64_t memory_consumed;
   ::impala::TUniqueId queryId;

  void __set_memory_consumed(const int64_t val);

  void __set_queryId(const  ::impala::TUniqueId& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(THeavyMemoryQuery &a, THeavyMemoryQuery &b);

std::ostream& operator<<(std::ostream& out, const THeavyMemoryQuery& obj);


class TPoolStats {
 public:

  TPoolStats(const TPoolStats&);
  TPoolStats(TPoolStats&&);
  TPoolStats& operator=(const TPoolStats&);
  TPoolStats& operator=(TPoolStats&&);
  TPoolStats() : num_admitted_running(0), num_queued(0), backend_mem_reserved(0), min_memory_consumed(0), max_memory_consumed(0), total_memory_consumed(0), num_running(0) {
  }

  virtual ~TPoolStats() throw();
  int64_t num_admitted_running;
  int64_t num_queued;
  int64_t backend_mem_reserved;
  std::vector<THeavyMemoryQuery>  heavy_memory_queries;
  int64_t min_memory_consumed;
  int64_t max_memory_consumed;
  int64_t total_memory_consumed;
  int64_t num_running;

  void __set_num_admitted_running(const int64_t val);

  void __set_num_queued(const int64_t val);

  void __set_backend_mem_reserved(const int64_t val);

  void __set_heavy_memory_queries(const std::vector<THeavyMemoryQuery> & val);

  void __set_min_memory_consumed(const int64_t val);

  void __set_max_memory_consumed(const int64_t val);

  void __set_total_memory_consumed(const int64_t val);

  void __set_num_running(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPoolStats &a, TPoolStats &b);

std::ostream& operator<<(std::ostream& out, const TPoolStats& obj);


class THostStats {
 public:

  THostStats(const THostStats&);
  THostStats(THostStats&&);
  THostStats& operator=(const THostStats&);
  THostStats& operator=(THostStats&&);
  THostStats() : mem_reserved(0), mem_admitted(0), num_admitted(0), slots_in_use(0) {
  }

  virtual ~THostStats() throw();
  int64_t mem_reserved;
  int64_t mem_admitted;
  int64_t num_admitted;
  int64_t slots_in_use;

  void __set_mem_reserved(const int64_t val);

  void __set_mem_admitted(const int64_t val);

  void __set_num_admitted(const int64_t val);

  void __set_slots_in_use(const int64_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(THostStats &a, THostStats &b);

std::ostream& operator<<(std::ostream& out, const THostStats& obj);


class TPerHostStatsUpdateElement {
 public:

  TPerHostStatsUpdateElement(const TPerHostStatsUpdateElement&);
  TPerHostStatsUpdateElement(TPerHostStatsUpdateElement&&);
  TPerHostStatsUpdateElement& operator=(const TPerHostStatsUpdateElement&);
  TPerHostStatsUpdateElement& operator=(TPerHostStatsUpdateElement&&);
  TPerHostStatsUpdateElement() : host_addr() {
  }

  virtual ~TPerHostStatsUpdateElement() throw();
  std::string host_addr;
  THostStats stats;

  void __set_host_addr(const std::string& val);

  void __set_stats(const THostStats& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPerHostStatsUpdateElement &a, TPerHostStatsUpdateElement &b);

std::ostream& operator<<(std::ostream& out, const TPerHostStatsUpdateElement& obj);


class TPerHostStatsUpdate {
 public:

  TPerHostStatsUpdate(const TPerHostStatsUpdate&);
  TPerHostStatsUpdate(TPerHostStatsUpdate&&);
  TPerHostStatsUpdate& operator=(const TPerHostStatsUpdate&);
  TPerHostStatsUpdate& operator=(TPerHostStatsUpdate&&);
  TPerHostStatsUpdate() {
  }

  virtual ~TPerHostStatsUpdate() throw();
  std::vector<TPerHostStatsUpdateElement>  per_host_stats;

  void __set_per_host_stats(const std::vector<TPerHostStatsUpdateElement> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPerHostStatsUpdate &a, TPerHostStatsUpdate &b);

std::ostream& operator<<(std::ostream& out, const TPerHostStatsUpdate& obj);


class TTopicItem {
 public:

  TTopicItem(const TTopicItem&);
  TTopicItem(TTopicItem&&);
  TTopicItem& operator=(const TTopicItem&);
  TTopicItem& operator=(TTopicItem&&);
  TTopicItem() : key(), value(), deleted(false) {
  }

  virtual ~TTopicItem() throw();
  std::string key;
  std::string value;
  bool deleted;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_deleted(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTopicItem &a, TTopicItem &b);

std::ostream& operator<<(std::ostream& out, const TTopicItem& obj);

typedef struct _TTopicDelta__isset {
  _TTopicDelta__isset() : from_version(false), to_version(false), min_subscriber_topic_version(false), clear_topic_entries(false) {}
  bool from_version :1;
  bool to_version :1;
  bool min_subscriber_topic_version :1;
  bool clear_topic_entries :1;
} _TTopicDelta__isset;

class TTopicDelta {
 public:

  TTopicDelta(const TTopicDelta&);
  TTopicDelta(TTopicDelta&&);
  TTopicDelta& operator=(const TTopicDelta&);
  TTopicDelta& operator=(TTopicDelta&&);
  TTopicDelta() : topic_name(), is_delta(0), from_version(0), to_version(0), min_subscriber_topic_version(0), clear_topic_entries(0) {
  }

  virtual ~TTopicDelta() throw();
  std::string topic_name;
  std::vector<TTopicItem>  topic_entries;
  bool is_delta;
  int64_t from_version;
  int64_t to_version;
  int64_t min_subscriber_topic_version;
  bool clear_topic_entries;

  _TTopicDelta__isset __isset;

  void __set_topic_name(const std::string& val);

  void __set_topic_entries(const std::vector<TTopicItem> & val);

  void __set_is_delta(const bool val);

  void __set_from_version(const int64_t val);

  void __set_to_version(const int64_t val);

  void __set_min_subscriber_topic_version(const int64_t val);

  void __set_clear_topic_entries(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTopicDelta &a, TTopicDelta &b);

std::ostream& operator<<(std::ostream& out, const TTopicDelta& obj);

typedef struct _TTopicRegistration__isset {
  _TTopicRegistration__isset() : filter_prefix(false) {}
  bool filter_prefix :1;
} _TTopicRegistration__isset;

class TTopicRegistration {
 public:

  TTopicRegistration(const TTopicRegistration&);
  TTopicRegistration(TTopicRegistration&&);
  TTopicRegistration& operator=(const TTopicRegistration&);
  TTopicRegistration& operator=(TTopicRegistration&&);
  TTopicRegistration() : topic_name(), is_transient(0), populate_min_subscriber_topic_version(false), filter_prefix() {
  }

  virtual ~TTopicRegistration() throw();
  std::string topic_name;
  bool is_transient;
  bool populate_min_subscriber_topic_version;
  std::string filter_prefix;

  _TTopicRegistration__isset __isset;

  void __set_topic_name(const std::string& val);

  void __set_is_transient(const bool val);

  void __set_populate_min_subscriber_topic_version(const bool val);

  void __set_filter_prefix(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTopicRegistration &a, TTopicRegistration &b);

std::ostream& operator<<(std::ostream& out, const TTopicRegistration& obj);


class TRegisterSubscriberRequest {
 public:

  TRegisterSubscriberRequest(const TRegisterSubscriberRequest&);
  TRegisterSubscriberRequest(TRegisterSubscriberRequest&&);
  TRegisterSubscriberRequest& operator=(const TRegisterSubscriberRequest&);
  TRegisterSubscriberRequest& operator=(TRegisterSubscriberRequest&&);
  TRegisterSubscriberRequest() : protocol_version((StatestoreServiceVersion::type)0), subscriber_id() {
    protocol_version = (StatestoreServiceVersion::type)0;

  }

  virtual ~TRegisterSubscriberRequest() throw();
  StatestoreServiceVersion::type protocol_version;
  std::string subscriber_id;
   ::impala::TNetworkAddress subscriber_location;
  std::vector<TTopicRegistration>  topic_registrations;

  void __set_protocol_version(const StatestoreServiceVersion::type val);

  void __set_subscriber_id(const std::string& val);

  void __set_subscriber_location(const  ::impala::TNetworkAddress& val);

  void __set_topic_registrations(const std::vector<TTopicRegistration> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRegisterSubscriberRequest &a, TRegisterSubscriberRequest &b);

std::ostream& operator<<(std::ostream& out, const TRegisterSubscriberRequest& obj);

typedef struct _TRegisterSubscriberResponse__isset {
  _TRegisterSubscriberResponse__isset() : registration_id(false) {}
  bool registration_id :1;
} _TRegisterSubscriberResponse__isset;

class TRegisterSubscriberResponse {
 public:

  TRegisterSubscriberResponse(const TRegisterSubscriberResponse&);
  TRegisterSubscriberResponse(TRegisterSubscriberResponse&&);
  TRegisterSubscriberResponse& operator=(const TRegisterSubscriberResponse&);
  TRegisterSubscriberResponse& operator=(TRegisterSubscriberResponse&&);
  TRegisterSubscriberResponse() {
  }

  virtual ~TRegisterSubscriberResponse() throw();
   ::impala::TStatus status;
   ::impala::TUniqueId registration_id;

  _TRegisterSubscriberResponse__isset __isset;

  void __set_status(const  ::impala::TStatus& val);

  void __set_registration_id(const  ::impala::TUniqueId& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRegisterSubscriberResponse &a, TRegisterSubscriberResponse &b);

std::ostream& operator<<(std::ostream& out, const TRegisterSubscriberResponse& obj);

typedef struct _TUpdateStateRequest__isset {
  _TUpdateStateRequest__isset() : registration_id(false) {}
  bool registration_id :1;
} _TUpdateStateRequest__isset;

class TUpdateStateRequest {
 public:

  TUpdateStateRequest(const TUpdateStateRequest&);
  TUpdateStateRequest(TUpdateStateRequest&&);
  TUpdateStateRequest& operator=(const TUpdateStateRequest&);
  TUpdateStateRequest& operator=(TUpdateStateRequest&&);
  TUpdateStateRequest() : protocol_version((StatestoreServiceVersion::type)0) {
    protocol_version = (StatestoreServiceVersion::type)0;

  }

  virtual ~TUpdateStateRequest() throw();
  StatestoreServiceVersion::type protocol_version;
  std::map<std::string, TTopicDelta>  topic_deltas;
   ::impala::TUniqueId registration_id;

  _TUpdateStateRequest__isset __isset;

  void __set_protocol_version(const StatestoreServiceVersion::type val);

  void __set_topic_deltas(const std::map<std::string, TTopicDelta> & val);

  void __set_registration_id(const  ::impala::TUniqueId& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TUpdateStateRequest &a, TUpdateStateRequest &b);

std::ostream& operator<<(std::ostream& out, const TUpdateStateRequest& obj);

typedef struct _TUpdateStateResponse__isset {
  _TUpdateStateResponse__isset() : skipped(false) {}
  bool skipped :1;
} _TUpdateStateResponse__isset;

class TUpdateStateResponse {
 public:

  TUpdateStateResponse(const TUpdateStateResponse&);
  TUpdateStateResponse(TUpdateStateResponse&&);
  TUpdateStateResponse& operator=(const TUpdateStateResponse&);
  TUpdateStateResponse& operator=(TUpdateStateResponse&&);
  TUpdateStateResponse() : skipped(0) {
  }

  virtual ~TUpdateStateResponse() throw();
   ::impala::TStatus status;
  std::vector<TTopicDelta>  topic_updates;
  bool skipped;

  _TUpdateStateResponse__isset __isset;

  void __set_status(const  ::impala::TStatus& val);

  void __set_topic_updates(const std::vector<TTopicDelta> & val);

  void __set_skipped(const bool val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TUpdateStateResponse &a, TUpdateStateResponse &b);

std::ostream& operator<<(std::ostream& out, const TUpdateStateResponse& obj);

typedef struct _THeartbeatRequest__isset {
  _THeartbeatRequest__isset() : registration_id(false) {}
  bool registration_id :1;
} _THeartbeatRequest__isset;

class THeartbeatRequest {
 public:

  THeartbeatRequest(const THeartbeatRequest&);
  THeartbeatRequest(THeartbeatRequest&&);
  THeartbeatRequest& operator=(const THeartbeatRequest&);
  THeartbeatRequest& operator=(THeartbeatRequest&&);
  THeartbeatRequest() {
  }

  virtual ~THeartbeatRequest() throw();
   ::impala::TUniqueId registration_id;

  _THeartbeatRequest__isset __isset;

  void __set_registration_id(const  ::impala::TUniqueId& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(THeartbeatRequest &a, THeartbeatRequest &b);

std::ostream& operator<<(std::ostream& out, const THeartbeatRequest& obj);


class THeartbeatResponse {
 public:

  THeartbeatResponse(const THeartbeatResponse&);
  THeartbeatResponse(THeartbeatResponse&&);
  THeartbeatResponse& operator=(const THeartbeatResponse&);
  THeartbeatResponse& operator=(THeartbeatResponse&&);
  THeartbeatResponse() {
  }

  virtual ~THeartbeatResponse() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(THeartbeatResponse &a, THeartbeatResponse &b);

std::ostream& operator<<(std::ostream& out, const THeartbeatResponse& obj);

} // namespace

#include "StatestoreService_types.tcc"

#endif
