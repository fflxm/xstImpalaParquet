// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsNetworkAddressPBImpl();
void InitDefaultsNetworkAddressPB();
void InitDefaultsStatusPBImpl();
void InitDefaultsStatusPB();
void InitDefaultsUniqueIdPBImpl();
void InitDefaultsUniqueIdPB();
void InitDefaultsColumnValuePBImpl();
void InitDefaultsColumnValuePB();
inline void InitDefaults() {
  InitDefaultsNetworkAddressPB();
  InitDefaultsStatusPB();
  InitDefaultsUniqueIdPB();
  InitDefaultsColumnValuePB();
}
}  // namespace protobuf_common_2eproto
namespace impala {
class ColumnValuePB;
class ColumnValuePBDefaultTypeInternal;
extern ColumnValuePBDefaultTypeInternal _ColumnValuePB_default_instance_;
class NetworkAddressPB;
class NetworkAddressPBDefaultTypeInternal;
extern NetworkAddressPBDefaultTypeInternal _NetworkAddressPB_default_instance_;
class StatusPB;
class StatusPBDefaultTypeInternal;
extern StatusPBDefaultTypeInternal _StatusPB_default_instance_;
class UniqueIdPB;
class UniqueIdPBDefaultTypeInternal;
extern UniqueIdPBDefaultTypeInternal _UniqueIdPB_default_instance_;
}  // namespace impala
namespace impala {

enum CompressionTypePB {
  NONE = 0,
  DEFAULT = 1,
  GZIP = 2,
  DEFLATE = 3,
  BZIP2 = 4,
  SNAPPY = 5,
  SNAPPY_BLOCKED = 6,
  LZO = 7,
  LZ4 = 8,
  ZLIB = 9,
  ZSTD = 10,
  BROTLI = 11,
  LZ4_BLOCKED = 12
};
bool CompressionTypePB_IsValid(int value);
const CompressionTypePB CompressionTypePB_MIN = NONE;
const CompressionTypePB CompressionTypePB_MAX = LZ4_BLOCKED;
const int CompressionTypePB_ARRAYSIZE = CompressionTypePB_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompressionTypePB_descriptor();
inline const ::std::string& CompressionTypePB_Name(CompressionTypePB value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompressionTypePB_descriptor(), value);
}
inline bool CompressionTypePB_Parse(
    const ::std::string& name, CompressionTypePB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompressionTypePB>(
    CompressionTypePB_descriptor(), name, value);
}
// ===================================================================

class NetworkAddressPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.NetworkAddressPB) */ {
 public:
  NetworkAddressPB();
  virtual ~NetworkAddressPB();

  NetworkAddressPB(const NetworkAddressPB& from);

  inline NetworkAddressPB& operator=(const NetworkAddressPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkAddressPB(NetworkAddressPB&& from) noexcept
    : NetworkAddressPB() {
    *this = ::std::move(from);
  }

  inline NetworkAddressPB& operator=(NetworkAddressPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkAddressPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkAddressPB* internal_default_instance() {
    return reinterpret_cast<const NetworkAddressPB*>(
               &_NetworkAddressPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NetworkAddressPB* other);
  friend void swap(NetworkAddressPB& a, NetworkAddressPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkAddressPB* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkAddressPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetworkAddressPB& from);
  void MergeFrom(const NetworkAddressPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetworkAddressPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string hostname = 1;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // required int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:impala.NetworkAddressPB)
 private:
  void set_has_hostname();
  void clear_has_hostname();
  void set_has_port();
  void clear_has_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_common_2eproto::TableStruct;
  friend void ::protobuf_common_2eproto::InitDefaultsNetworkAddressPBImpl();
};
// -------------------------------------------------------------------

class StatusPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.StatusPB) */ {
 public:
  StatusPB();
  virtual ~StatusPB();

  StatusPB(const StatusPB& from);

  inline StatusPB& operator=(const StatusPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusPB(StatusPB&& from) noexcept
    : StatusPB() {
    *this = ::std::move(from);
  }

  inline StatusPB& operator=(StatusPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusPB* internal_default_instance() {
    return reinterpret_cast<const StatusPB*>(
               &_StatusPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(StatusPB* other);
  friend void swap(StatusPB& a, StatusPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusPB* New() const PROTOBUF_FINAL { return New(NULL); }

  StatusPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatusPB& from);
  void MergeFrom(const StatusPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatusPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string error_msgs = 2;
  int error_msgs_size() const;
  void clear_error_msgs();
  static const int kErrorMsgsFieldNumber = 2;
  const ::std::string& error_msgs(int index) const;
  ::std::string* mutable_error_msgs(int index);
  void set_error_msgs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_error_msgs(int index, ::std::string&& value);
  #endif
  void set_error_msgs(int index, const char* value);
  void set_error_msgs(int index, const char* value, size_t size);
  ::std::string* add_error_msgs();
  void add_error_msgs(const ::std::string& value);
  #if LANG_CXX11
  void add_error_msgs(::std::string&& value);
  #endif
  void add_error_msgs(const char* value);
  void add_error_msgs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& error_msgs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_error_msgs();

  // optional int32 status_code = 1;
  bool has_status_code() const;
  void clear_status_code();
  static const int kStatusCodeFieldNumber = 1;
  ::google::protobuf::int32 status_code() const;
  void set_status_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:impala.StatusPB)
 private:
  void set_has_status_code();
  void clear_has_status_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> error_msgs_;
  ::google::protobuf::int32 status_code_;
  friend struct ::protobuf_common_2eproto::TableStruct;
  friend void ::protobuf_common_2eproto::InitDefaultsStatusPBImpl();
};
// -------------------------------------------------------------------

class UniqueIdPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.UniqueIdPB) */ {
 public:
  UniqueIdPB();
  virtual ~UniqueIdPB();

  UniqueIdPB(const UniqueIdPB& from);

  inline UniqueIdPB& operator=(const UniqueIdPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UniqueIdPB(UniqueIdPB&& from) noexcept
    : UniqueIdPB() {
    *this = ::std::move(from);
  }

  inline UniqueIdPB& operator=(UniqueIdPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UniqueIdPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UniqueIdPB* internal_default_instance() {
    return reinterpret_cast<const UniqueIdPB*>(
               &_UniqueIdPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UniqueIdPB* other);
  friend void swap(UniqueIdPB& a, UniqueIdPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UniqueIdPB* New() const PROTOBUF_FINAL { return New(NULL); }

  UniqueIdPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UniqueIdPB& from);
  void MergeFrom(const UniqueIdPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UniqueIdPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 hi = 1;
  bool has_hi() const;
  void clear_hi();
  static const int kHiFieldNumber = 1;
  ::google::protobuf::uint64 hi() const;
  void set_hi(::google::protobuf::uint64 value);

  // required fixed64 lo = 2;
  bool has_lo() const;
  void clear_lo();
  static const int kLoFieldNumber = 2;
  ::google::protobuf::uint64 lo() const;
  void set_lo(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:impala.UniqueIdPB)
 private:
  void set_has_hi();
  void clear_has_hi();
  void set_has_lo();
  void clear_has_lo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 hi_;
  ::google::protobuf::uint64 lo_;
  friend struct ::protobuf_common_2eproto::TableStruct;
  friend void ::protobuf_common_2eproto::InitDefaultsUniqueIdPBImpl();
};
// -------------------------------------------------------------------

class ColumnValuePB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.ColumnValuePB) */ {
 public:
  ColumnValuePB();
  virtual ~ColumnValuePB();

  ColumnValuePB(const ColumnValuePB& from);

  inline ColumnValuePB& operator=(const ColumnValuePB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ColumnValuePB(ColumnValuePB&& from) noexcept
    : ColumnValuePB() {
    *this = ::std::move(from);
  }

  inline ColumnValuePB& operator=(ColumnValuePB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnValuePB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnValuePB* internal_default_instance() {
    return reinterpret_cast<const ColumnValuePB*>(
               &_ColumnValuePB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ColumnValuePB* other);
  friend void swap(ColumnValuePB& a, ColumnValuePB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ColumnValuePB* New() const PROTOBUF_FINAL { return New(NULL); }

  ColumnValuePB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ColumnValuePB& from);
  void MergeFrom(const ColumnValuePB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ColumnValuePB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string string_val = 5;
  bool has_string_val() const;
  void clear_string_val();
  static const int kStringValFieldNumber = 5;
  const ::std::string& string_val() const;
  void set_string_val(const ::std::string& value);
  #if LANG_CXX11
  void set_string_val(::std::string&& value);
  #endif
  void set_string_val(const char* value);
  void set_string_val(const char* value, size_t size);
  ::std::string* mutable_string_val();
  ::std::string* release_string_val();
  void set_allocated_string_val(::std::string* string_val);

  // optional string binary_val = 8;
  bool has_binary_val() const;
  void clear_binary_val();
  static const int kBinaryValFieldNumber = 8;
  const ::std::string& binary_val() const;
  void set_binary_val(const ::std::string& value);
  #if LANG_CXX11
  void set_binary_val(::std::string&& value);
  #endif
  void set_binary_val(const char* value);
  void set_binary_val(const char* value, size_t size);
  ::std::string* mutable_binary_val();
  ::std::string* release_binary_val();
  void set_allocated_binary_val(::std::string* binary_val);

  // optional string timestamp_val = 9;
  bool has_timestamp_val() const;
  void clear_timestamp_val();
  static const int kTimestampValFieldNumber = 9;
  const ::std::string& timestamp_val() const;
  void set_timestamp_val(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp_val(::std::string&& value);
  #endif
  void set_timestamp_val(const char* value);
  void set_timestamp_val(const char* value, size_t size);
  ::std::string* mutable_timestamp_val();
  ::std::string* release_timestamp_val();
  void set_allocated_timestamp_val(::std::string* timestamp_val);

  // optional bytes decimal_val = 10;
  bool has_decimal_val() const;
  void clear_decimal_val();
  static const int kDecimalValFieldNumber = 10;
  const ::std::string& decimal_val() const;
  void set_decimal_val(const ::std::string& value);
  #if LANG_CXX11
  void set_decimal_val(::std::string&& value);
  #endif
  void set_decimal_val(const char* value);
  void set_decimal_val(const void* value, size_t size);
  ::std::string* mutable_decimal_val();
  ::std::string* release_decimal_val();
  void set_allocated_decimal_val(::std::string* decimal_val);

  // optional bool bool_val = 1;
  bool has_bool_val() const;
  void clear_bool_val();
  static const int kBoolValFieldNumber = 1;
  bool bool_val() const;
  void set_bool_val(bool value);

  // optional int32 int_val = 2;
  bool has_int_val() const;
  void clear_int_val();
  static const int kIntValFieldNumber = 2;
  ::google::protobuf::int32 int_val() const;
  void set_int_val(::google::protobuf::int32 value);

  // optional int64 long_val = 3;
  bool has_long_val() const;
  void clear_long_val();
  static const int kLongValFieldNumber = 3;
  ::google::protobuf::int64 long_val() const;
  void set_long_val(::google::protobuf::int64 value);

  // optional double double_val = 4;
  bool has_double_val() const;
  void clear_double_val();
  static const int kDoubleValFieldNumber = 4;
  double double_val() const;
  void set_double_val(double value);

  // optional int32 byte_val = 6;
  bool has_byte_val() const;
  void clear_byte_val();
  static const int kByteValFieldNumber = 6;
  ::google::protobuf::int32 byte_val() const;
  void set_byte_val(::google::protobuf::int32 value);

  // optional int32 short_val = 7;
  bool has_short_val() const;
  void clear_short_val();
  static const int kShortValFieldNumber = 7;
  ::google::protobuf::int32 short_val() const;
  void set_short_val(::google::protobuf::int32 value);

  // optional int32 date_val = 11;
  bool has_date_val() const;
  void clear_date_val();
  static const int kDateValFieldNumber = 11;
  ::google::protobuf::int32 date_val() const;
  void set_date_val(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:impala.ColumnValuePB)
 private:
  void set_has_bool_val();
  void clear_has_bool_val();
  void set_has_byte_val();
  void clear_has_byte_val();
  void set_has_short_val();
  void clear_has_short_val();
  void set_has_int_val();
  void clear_has_int_val();
  void set_has_long_val();
  void clear_has_long_val();
  void set_has_double_val();
  void clear_has_double_val();
  void set_has_string_val();
  void clear_has_string_val();
  void set_has_binary_val();
  void clear_has_binary_val();
  void set_has_timestamp_val();
  void clear_has_timestamp_val();
  void set_has_decimal_val();
  void clear_has_decimal_val();
  void set_has_date_val();
  void clear_has_date_val();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr string_val_;
  ::google::protobuf::internal::ArenaStringPtr binary_val_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_val_;
  ::google::protobuf::internal::ArenaStringPtr decimal_val_;
  bool bool_val_;
  ::google::protobuf::int32 int_val_;
  ::google::protobuf::int64 long_val_;
  double double_val_;
  ::google::protobuf::int32 byte_val_;
  ::google::protobuf::int32 short_val_;
  ::google::protobuf::int32 date_val_;
  friend struct ::protobuf_common_2eproto::TableStruct;
  friend void ::protobuf_common_2eproto::InitDefaultsColumnValuePBImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkAddressPB

// required string hostname = 1;
inline bool NetworkAddressPB::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkAddressPB::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkAddressPB::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkAddressPB::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
inline const ::std::string& NetworkAddressPB::hostname() const {
  // @@protoc_insertion_point(field_get:impala.NetworkAddressPB.hostname)
  return hostname_.GetNoArena();
}
inline void NetworkAddressPB::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:impala.NetworkAddressPB.hostname)
}
#if LANG_CXX11
inline void NetworkAddressPB::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:impala.NetworkAddressPB.hostname)
}
#endif
inline void NetworkAddressPB::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:impala.NetworkAddressPB.hostname)
}
inline void NetworkAddressPB::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:impala.NetworkAddressPB.hostname)
}
inline ::std::string* NetworkAddressPB::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:impala.NetworkAddressPB.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkAddressPB::release_hostname() {
  // @@protoc_insertion_point(field_release:impala.NetworkAddressPB.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAddressPB::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:impala.NetworkAddressPB.hostname)
}

// required int32 port = 2;
inline bool NetworkAddressPB::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkAddressPB::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkAddressPB::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkAddressPB::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 NetworkAddressPB::port() const {
  // @@protoc_insertion_point(field_get:impala.NetworkAddressPB.port)
  return port_;
}
inline void NetworkAddressPB::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:impala.NetworkAddressPB.port)
}

// -------------------------------------------------------------------

// StatusPB

// optional int32 status_code = 1;
inline bool StatusPB::has_status_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusPB::set_has_status_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusPB::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusPB::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
inline ::google::protobuf::int32 StatusPB::status_code() const {
  // @@protoc_insertion_point(field_get:impala.StatusPB.status_code)
  return status_code_;
}
inline void StatusPB::set_status_code(::google::protobuf::int32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:impala.StatusPB.status_code)
}

// repeated string error_msgs = 2;
inline int StatusPB::error_msgs_size() const {
  return error_msgs_.size();
}
inline void StatusPB::clear_error_msgs() {
  error_msgs_.Clear();
}
inline const ::std::string& StatusPB::error_msgs(int index) const {
  // @@protoc_insertion_point(field_get:impala.StatusPB.error_msgs)
  return error_msgs_.Get(index);
}
inline ::std::string* StatusPB::mutable_error_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:impala.StatusPB.error_msgs)
  return error_msgs_.Mutable(index);
}
inline void StatusPB::set_error_msgs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:impala.StatusPB.error_msgs)
  error_msgs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StatusPB::set_error_msgs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:impala.StatusPB.error_msgs)
  error_msgs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StatusPB::set_error_msgs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  error_msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:impala.StatusPB.error_msgs)
}
inline void StatusPB::set_error_msgs(int index, const char* value, size_t size) {
  error_msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:impala.StatusPB.error_msgs)
}
inline ::std::string* StatusPB::add_error_msgs() {
  // @@protoc_insertion_point(field_add_mutable:impala.StatusPB.error_msgs)
  return error_msgs_.Add();
}
inline void StatusPB::add_error_msgs(const ::std::string& value) {
  error_msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:impala.StatusPB.error_msgs)
}
#if LANG_CXX11
inline void StatusPB::add_error_msgs(::std::string&& value) {
  error_msgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:impala.StatusPB.error_msgs)
}
#endif
inline void StatusPB::add_error_msgs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  error_msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:impala.StatusPB.error_msgs)
}
inline void StatusPB::add_error_msgs(const char* value, size_t size) {
  error_msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:impala.StatusPB.error_msgs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StatusPB::error_msgs() const {
  // @@protoc_insertion_point(field_list:impala.StatusPB.error_msgs)
  return error_msgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StatusPB::mutable_error_msgs() {
  // @@protoc_insertion_point(field_mutable_list:impala.StatusPB.error_msgs)
  return &error_msgs_;
}

// -------------------------------------------------------------------

// UniqueIdPB

// required fixed64 hi = 1;
inline bool UniqueIdPB::has_hi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UniqueIdPB::set_has_hi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UniqueIdPB::clear_has_hi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UniqueIdPB::clear_hi() {
  hi_ = GOOGLE_ULONGLONG(0);
  clear_has_hi();
}
inline ::google::protobuf::uint64 UniqueIdPB::hi() const {
  // @@protoc_insertion_point(field_get:impala.UniqueIdPB.hi)
  return hi_;
}
inline void UniqueIdPB::set_hi(::google::protobuf::uint64 value) {
  set_has_hi();
  hi_ = value;
  // @@protoc_insertion_point(field_set:impala.UniqueIdPB.hi)
}

// required fixed64 lo = 2;
inline bool UniqueIdPB::has_lo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UniqueIdPB::set_has_lo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UniqueIdPB::clear_has_lo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UniqueIdPB::clear_lo() {
  lo_ = GOOGLE_ULONGLONG(0);
  clear_has_lo();
}
inline ::google::protobuf::uint64 UniqueIdPB::lo() const {
  // @@protoc_insertion_point(field_get:impala.UniqueIdPB.lo)
  return lo_;
}
inline void UniqueIdPB::set_lo(::google::protobuf::uint64 value) {
  set_has_lo();
  lo_ = value;
  // @@protoc_insertion_point(field_set:impala.UniqueIdPB.lo)
}

// -------------------------------------------------------------------

// ColumnValuePB

// optional bool bool_val = 1;
inline bool ColumnValuePB::has_bool_val() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ColumnValuePB::set_has_bool_val() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ColumnValuePB::clear_has_bool_val() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ColumnValuePB::clear_bool_val() {
  bool_val_ = false;
  clear_has_bool_val();
}
inline bool ColumnValuePB::bool_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.bool_val)
  return bool_val_;
}
inline void ColumnValuePB::set_bool_val(bool value) {
  set_has_bool_val();
  bool_val_ = value;
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.bool_val)
}

// optional int32 byte_val = 6;
inline bool ColumnValuePB::has_byte_val() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ColumnValuePB::set_has_byte_val() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ColumnValuePB::clear_has_byte_val() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ColumnValuePB::clear_byte_val() {
  byte_val_ = 0;
  clear_has_byte_val();
}
inline ::google::protobuf::int32 ColumnValuePB::byte_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.byte_val)
  return byte_val_;
}
inline void ColumnValuePB::set_byte_val(::google::protobuf::int32 value) {
  set_has_byte_val();
  byte_val_ = value;
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.byte_val)
}

// optional int32 short_val = 7;
inline bool ColumnValuePB::has_short_val() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ColumnValuePB::set_has_short_val() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ColumnValuePB::clear_has_short_val() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ColumnValuePB::clear_short_val() {
  short_val_ = 0;
  clear_has_short_val();
}
inline ::google::protobuf::int32 ColumnValuePB::short_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.short_val)
  return short_val_;
}
inline void ColumnValuePB::set_short_val(::google::protobuf::int32 value) {
  set_has_short_val();
  short_val_ = value;
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.short_val)
}

// optional int32 int_val = 2;
inline bool ColumnValuePB::has_int_val() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ColumnValuePB::set_has_int_val() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ColumnValuePB::clear_has_int_val() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ColumnValuePB::clear_int_val() {
  int_val_ = 0;
  clear_has_int_val();
}
inline ::google::protobuf::int32 ColumnValuePB::int_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.int_val)
  return int_val_;
}
inline void ColumnValuePB::set_int_val(::google::protobuf::int32 value) {
  set_has_int_val();
  int_val_ = value;
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.int_val)
}

// optional int64 long_val = 3;
inline bool ColumnValuePB::has_long_val() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ColumnValuePB::set_has_long_val() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ColumnValuePB::clear_has_long_val() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ColumnValuePB::clear_long_val() {
  long_val_ = GOOGLE_LONGLONG(0);
  clear_has_long_val();
}
inline ::google::protobuf::int64 ColumnValuePB::long_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.long_val)
  return long_val_;
}
inline void ColumnValuePB::set_long_val(::google::protobuf::int64 value) {
  set_has_long_val();
  long_val_ = value;
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.long_val)
}

// optional double double_val = 4;
inline bool ColumnValuePB::has_double_val() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ColumnValuePB::set_has_double_val() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ColumnValuePB::clear_has_double_val() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ColumnValuePB::clear_double_val() {
  double_val_ = 0;
  clear_has_double_val();
}
inline double ColumnValuePB::double_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.double_val)
  return double_val_;
}
inline void ColumnValuePB::set_double_val(double value) {
  set_has_double_val();
  double_val_ = value;
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.double_val)
}

// optional string string_val = 5;
inline bool ColumnValuePB::has_string_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColumnValuePB::set_has_string_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColumnValuePB::clear_has_string_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColumnValuePB::clear_string_val() {
  string_val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_val();
}
inline const ::std::string& ColumnValuePB::string_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.string_val)
  return string_val_.GetNoArena();
}
inline void ColumnValuePB::set_string_val(const ::std::string& value) {
  set_has_string_val();
  string_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.string_val)
}
#if LANG_CXX11
inline void ColumnValuePB::set_string_val(::std::string&& value) {
  set_has_string_val();
  string_val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:impala.ColumnValuePB.string_val)
}
#endif
inline void ColumnValuePB::set_string_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string_val();
  string_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:impala.ColumnValuePB.string_val)
}
inline void ColumnValuePB::set_string_val(const char* value, size_t size) {
  set_has_string_val();
  string_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:impala.ColumnValuePB.string_val)
}
inline ::std::string* ColumnValuePB::mutable_string_val() {
  set_has_string_val();
  // @@protoc_insertion_point(field_mutable:impala.ColumnValuePB.string_val)
  return string_val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnValuePB::release_string_val() {
  // @@protoc_insertion_point(field_release:impala.ColumnValuePB.string_val)
  clear_has_string_val();
  return string_val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnValuePB::set_allocated_string_val(::std::string* string_val) {
  if (string_val != NULL) {
    set_has_string_val();
  } else {
    clear_has_string_val();
  }
  string_val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_val);
  // @@protoc_insertion_point(field_set_allocated:impala.ColumnValuePB.string_val)
}

// optional string binary_val = 8;
inline bool ColumnValuePB::has_binary_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColumnValuePB::set_has_binary_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColumnValuePB::clear_has_binary_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColumnValuePB::clear_binary_val() {
  binary_val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_binary_val();
}
inline const ::std::string& ColumnValuePB::binary_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.binary_val)
  return binary_val_.GetNoArena();
}
inline void ColumnValuePB::set_binary_val(const ::std::string& value) {
  set_has_binary_val();
  binary_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.binary_val)
}
#if LANG_CXX11
inline void ColumnValuePB::set_binary_val(::std::string&& value) {
  set_has_binary_val();
  binary_val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:impala.ColumnValuePB.binary_val)
}
#endif
inline void ColumnValuePB::set_binary_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_binary_val();
  binary_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:impala.ColumnValuePB.binary_val)
}
inline void ColumnValuePB::set_binary_val(const char* value, size_t size) {
  set_has_binary_val();
  binary_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:impala.ColumnValuePB.binary_val)
}
inline ::std::string* ColumnValuePB::mutable_binary_val() {
  set_has_binary_val();
  // @@protoc_insertion_point(field_mutable:impala.ColumnValuePB.binary_val)
  return binary_val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnValuePB::release_binary_val() {
  // @@protoc_insertion_point(field_release:impala.ColumnValuePB.binary_val)
  clear_has_binary_val();
  return binary_val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnValuePB::set_allocated_binary_val(::std::string* binary_val) {
  if (binary_val != NULL) {
    set_has_binary_val();
  } else {
    clear_has_binary_val();
  }
  binary_val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_val);
  // @@protoc_insertion_point(field_set_allocated:impala.ColumnValuePB.binary_val)
}

// optional string timestamp_val = 9;
inline bool ColumnValuePB::has_timestamp_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColumnValuePB::set_has_timestamp_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColumnValuePB::clear_has_timestamp_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColumnValuePB::clear_timestamp_val() {
  timestamp_val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp_val();
}
inline const ::std::string& ColumnValuePB::timestamp_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.timestamp_val)
  return timestamp_val_.GetNoArena();
}
inline void ColumnValuePB::set_timestamp_val(const ::std::string& value) {
  set_has_timestamp_val();
  timestamp_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.timestamp_val)
}
#if LANG_CXX11
inline void ColumnValuePB::set_timestamp_val(::std::string&& value) {
  set_has_timestamp_val();
  timestamp_val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:impala.ColumnValuePB.timestamp_val)
}
#endif
inline void ColumnValuePB::set_timestamp_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timestamp_val();
  timestamp_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:impala.ColumnValuePB.timestamp_val)
}
inline void ColumnValuePB::set_timestamp_val(const char* value, size_t size) {
  set_has_timestamp_val();
  timestamp_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:impala.ColumnValuePB.timestamp_val)
}
inline ::std::string* ColumnValuePB::mutable_timestamp_val() {
  set_has_timestamp_val();
  // @@protoc_insertion_point(field_mutable:impala.ColumnValuePB.timestamp_val)
  return timestamp_val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnValuePB::release_timestamp_val() {
  // @@protoc_insertion_point(field_release:impala.ColumnValuePB.timestamp_val)
  clear_has_timestamp_val();
  return timestamp_val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnValuePB::set_allocated_timestamp_val(::std::string* timestamp_val) {
  if (timestamp_val != NULL) {
    set_has_timestamp_val();
  } else {
    clear_has_timestamp_val();
  }
  timestamp_val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp_val);
  // @@protoc_insertion_point(field_set_allocated:impala.ColumnValuePB.timestamp_val)
}

// optional bytes decimal_val = 10;
inline bool ColumnValuePB::has_decimal_val() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ColumnValuePB::set_has_decimal_val() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ColumnValuePB::clear_has_decimal_val() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ColumnValuePB::clear_decimal_val() {
  decimal_val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_decimal_val();
}
inline const ::std::string& ColumnValuePB::decimal_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.decimal_val)
  return decimal_val_.GetNoArena();
}
inline void ColumnValuePB::set_decimal_val(const ::std::string& value) {
  set_has_decimal_val();
  decimal_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.decimal_val)
}
#if LANG_CXX11
inline void ColumnValuePB::set_decimal_val(::std::string&& value) {
  set_has_decimal_val();
  decimal_val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:impala.ColumnValuePB.decimal_val)
}
#endif
inline void ColumnValuePB::set_decimal_val(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_decimal_val();
  decimal_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:impala.ColumnValuePB.decimal_val)
}
inline void ColumnValuePB::set_decimal_val(const void* value, size_t size) {
  set_has_decimal_val();
  decimal_val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:impala.ColumnValuePB.decimal_val)
}
inline ::std::string* ColumnValuePB::mutable_decimal_val() {
  set_has_decimal_val();
  // @@protoc_insertion_point(field_mutable:impala.ColumnValuePB.decimal_val)
  return decimal_val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnValuePB::release_decimal_val() {
  // @@protoc_insertion_point(field_release:impala.ColumnValuePB.decimal_val)
  clear_has_decimal_val();
  return decimal_val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnValuePB::set_allocated_decimal_val(::std::string* decimal_val) {
  if (decimal_val != NULL) {
    set_has_decimal_val();
  } else {
    clear_has_decimal_val();
  }
  decimal_val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decimal_val);
  // @@protoc_insertion_point(field_set_allocated:impala.ColumnValuePB.decimal_val)
}

// optional int32 date_val = 11;
inline bool ColumnValuePB::has_date_val() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ColumnValuePB::set_has_date_val() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ColumnValuePB::clear_has_date_val() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ColumnValuePB::clear_date_val() {
  date_val_ = 0;
  clear_has_date_val();
}
inline ::google::protobuf::int32 ColumnValuePB::date_val() const {
  // @@protoc_insertion_point(field_get:impala.ColumnValuePB.date_val)
  return date_val_;
}
inline void ColumnValuePB::set_date_val(::google::protobuf::int32 value) {
  set_has_date_val();
  date_val_ = value;
  // @@protoc_insertion_point(field_set:impala.ColumnValuePB.date_val)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace impala

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::impala::CompressionTypePB> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::impala::CompressionTypePB>() {
  return ::impala::CompressionTypePB_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
