/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "BackendGflags_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {

int _kTReservedWordsVersionValues[] = {
  TReservedWordsVersion::IMPALA_2_11,
  TReservedWordsVersion::IMPALA_3_0
};
const char* _kTReservedWordsVersionNames[] = {
  "IMPALA_2_11",
  "IMPALA_3_0"
};
const std::map<int, const char*> _TReservedWordsVersion_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTReservedWordsVersionValues, _kTReservedWordsVersionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TReservedWordsVersion::type& val) {
  std::map<int, const char*>::const_iterator it = _TReservedWordsVersion_VALUES_TO_NAMES.find(val);
  if (it != _TReservedWordsVersion_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TBackendGflags::~TBackendGflags() throw() {
}


void TBackendGflags::__set_load_auth_to_local_rules(const bool val) {
  this->load_auth_to_local_rules = val;
}

void TBackendGflags::__set_non_impala_java_vlog(const int32_t val) {
  this->non_impala_java_vlog = val;
}

void TBackendGflags::__set_impala_log_lvl(const int32_t val) {
  this->impala_log_lvl = val;
}

void TBackendGflags::__set_inc_stats_size_limit_bytes(const int64_t val) {
  this->inc_stats_size_limit_bytes = val;
}

void TBackendGflags::__set_lineage_event_log_dir(const std::string& val) {
  this->lineage_event_log_dir = val;
}

void TBackendGflags::__set_load_catalog_in_background(const bool val) {
  this->load_catalog_in_background = val;
}

void TBackendGflags::__set_num_metadata_loading_threads(const int32_t val) {
  this->num_metadata_loading_threads = val;
}

void TBackendGflags::__set_principal(const std::string& val) {
  this->principal = val;
}

void TBackendGflags::__set_server_name(const std::string& val) {
  this->server_name = val;
}

void TBackendGflags::__set_kudu_master_hosts(const std::string& val) {
  this->kudu_master_hosts = val;
}

void TBackendGflags::__set_local_library_path(const std::string& val) {
  this->local_library_path = val;
}

void TBackendGflags::__set_read_size(const int32_t val) {
  this->read_size = val;
}

void TBackendGflags::__set_kudu_operation_timeout_ms(const int32_t val) {
  this->kudu_operation_timeout_ms = val;
}

void TBackendGflags::__set_initial_hms_cnxn_timeout_s(const int32_t val) {
  this->initial_hms_cnxn_timeout_s = val;
}

void TBackendGflags::__set_enable_stats_extrapolation(const bool val) {
  this->enable_stats_extrapolation = val;
}

void TBackendGflags::__set_max_hdfs_partitions_parallel_load(const int32_t val) {
  this->max_hdfs_partitions_parallel_load = val;
}

void TBackendGflags::__set_max_nonhdfs_partitions_parallel_load(const int32_t val) {
  this->max_nonhdfs_partitions_parallel_load = val;
}

void TBackendGflags::__set_reserved_words_version(const TReservedWordsVersion::type val) {
  this->reserved_words_version = val;
}

void TBackendGflags::__set_max_filter_error_rate(const double val) {
  this->max_filter_error_rate = val;
}

void TBackendGflags::__set_min_buffer_size(const int64_t val) {
  this->min_buffer_size = val;
}

void TBackendGflags::__set_enable_orc_scanner(const bool val) {
  this->enable_orc_scanner = val;
}

void TBackendGflags::__set_authorized_proxy_group_config(const std::string& val) {
  this->authorized_proxy_group_config = val;
}

void TBackendGflags::__set_use_local_catalog(const bool val) {
  this->use_local_catalog = val;
}

void TBackendGflags::__set_disable_catalog_data_ops_debug_only(const bool val) {
  this->disable_catalog_data_ops_debug_only = val;
}

void TBackendGflags::__set_local_catalog_cache_mb(const int32_t val) {
  this->local_catalog_cache_mb = val;
}

void TBackendGflags::__set_local_catalog_cache_expiration_s(const int32_t val) {
  this->local_catalog_cache_expiration_s = val;
}

void TBackendGflags::__set_catalog_topic_mode(const std::string& val) {
  this->catalog_topic_mode = val;
}

void TBackendGflags::__set_invalidate_tables_timeout_s(const int32_t val) {
  this->invalidate_tables_timeout_s = val;
}

void TBackendGflags::__set_invalidate_tables_on_memory_pressure(const bool val) {
  this->invalidate_tables_on_memory_pressure = val;
}

void TBackendGflags::__set_invalidate_tables_gc_old_gen_full_threshold(const double val) {
  this->invalidate_tables_gc_old_gen_full_threshold = val;
}

void TBackendGflags::__set_invalidate_tables_fraction_on_memory_pressure(const double val) {
  this->invalidate_tables_fraction_on_memory_pressure = val;
}

void TBackendGflags::__set_local_catalog_max_fetch_retries(const int32_t val) {
  this->local_catalog_max_fetch_retries = val;
}

void TBackendGflags::__set_kudu_scanner_thread_estimated_bytes_per_column(const int64_t val) {
  this->kudu_scanner_thread_estimated_bytes_per_column = val;
}

void TBackendGflags::__set_kudu_scanner_thread_max_estimated_bytes(const int64_t val) {
  this->kudu_scanner_thread_max_estimated_bytes = val;
}

void TBackendGflags::__set_catalog_max_parallel_partial_fetch_rpc(const int32_t val) {
  this->catalog_max_parallel_partial_fetch_rpc = val;
}

void TBackendGflags::__set_catalog_partial_fetch_rpc_queue_timeout_s(const int64_t val) {
  this->catalog_partial_fetch_rpc_queue_timeout_s = val;
}

void TBackendGflags::__set_exchg_node_buffer_size_bytes(const int64_t val) {
  this->exchg_node_buffer_size_bytes = val;
}

void TBackendGflags::__set_kudu_mutation_buffer_size(const int32_t val) {
  this->kudu_mutation_buffer_size = val;
}

void TBackendGflags::__set_kudu_error_buffer_size(const int32_t val) {
  this->kudu_error_buffer_size = val;
}

void TBackendGflags::__set_hms_event_polling_interval_s(const int32_t val) {
  this->hms_event_polling_interval_s = val;
}

void TBackendGflags::__set_impala_build_version(const std::string& val) {
  this->impala_build_version = val;
}

void TBackendGflags::__set_authorization_factory_class(const std::string& val) {
  this->authorization_factory_class = val;
}

void TBackendGflags::__set_ranger_service_type(const std::string& val) {
  this->ranger_service_type = val;
}

void TBackendGflags::__set_ranger_app_id(const std::string& val) {
  this->ranger_app_id = val;
}

void TBackendGflags::__set_authorization_provider(const std::string& val) {
  this->authorization_provider = val;
}

void TBackendGflags::__set_recursively_list_partitions(const bool val) {
  this->recursively_list_partitions = val;
}

void TBackendGflags::__set_query_event_hook_classes(const std::string& val) {
  this->query_event_hook_classes = val;
}

void TBackendGflags::__set_query_event_hook_nthreads(const int32_t val) {
  this->query_event_hook_nthreads = val;
}

void TBackendGflags::__set_is_executor(const bool val) {
  this->is_executor = val;
}

void TBackendGflags::__set_is_coordinator(const bool val) {
  this->is_coordinator = val;
}

void TBackendGflags::__set_use_dedicated_coordinator_estimates(const bool val) {
  this->use_dedicated_coordinator_estimates = val;
}

void TBackendGflags::__set_blacklisted_dbs(const std::string& val) {
  this->blacklisted_dbs = val;
}

void TBackendGflags::__set_blacklisted_tables(const std::string& val) {
  this->blacklisted_tables = val;
}

void TBackendGflags::__set_unlock_zorder_sort(const bool val) {
  this->unlock_zorder_sort = val;
}

void TBackendGflags::__set_min_privilege_set_for_show_stmts(const std::string& val) {
  this->min_privilege_set_for_show_stmts = val;
}

void TBackendGflags::__set_num_expected_executors(const int32_t val) {
  this->num_expected_executors = val;
}

void TBackendGflags::__set_num_check_authorization_threads(const int32_t val) {
  this->num_check_authorization_threads = val;
}

void TBackendGflags::__set_use_customized_user_groups_mapper_for_ranger(const bool val) {
  this->use_customized_user_groups_mapper_for_ranger = val;
}

void TBackendGflags::__set_enable_column_masking(const bool val) {
  this->enable_column_masking = val;
}

void TBackendGflags::__set_enable_insert_events(const bool val) {
  this->enable_insert_events = val;
}

void TBackendGflags::__set_compact_catalog_topic(const bool val) {
  this->compact_catalog_topic = val;
}

void TBackendGflags::__set_enable_incremental_metadata_updates(const bool val) {
  this->enable_incremental_metadata_updates = val;
}

void TBackendGflags::__set_topic_update_tbl_max_wait_time_ms(const int64_t val) {
  this->topic_update_tbl_max_wait_time_ms = val;
}

void TBackendGflags::__set_catalog_max_lock_skipped_topic_updates(const int32_t val) {
  this->catalog_max_lock_skipped_topic_updates = val;
}

void TBackendGflags::__set_saml2_keystore_path(const std::string& val) {
  this->saml2_keystore_path = val;
}

void TBackendGflags::__set_saml2_keystore_password(const std::string& val) {
  this->saml2_keystore_password = val;
}

void TBackendGflags::__set_saml2_private_key_password(const std::string& val) {
  this->saml2_private_key_password = val;
}

void TBackendGflags::__set_saml2_idp_metadata(const std::string& val) {
  this->saml2_idp_metadata = val;
}

void TBackendGflags::__set_saml2_sp_entity_id(const std::string& val) {
  this->saml2_sp_entity_id = val;
}

void TBackendGflags::__set_saml2_sp_callback_url(const std::string& val) {
  this->saml2_sp_callback_url = val;
}

void TBackendGflags::__set_saml2_want_assertations_signed(const bool val) {
  this->saml2_want_assertations_signed = val;
}

void TBackendGflags::__set_saml2_sign_requests(const bool val) {
  this->saml2_sign_requests = val;
}

void TBackendGflags::__set_saml2_callback_token_ttl(const int32_t val) {
  this->saml2_callback_token_ttl = val;
}

void TBackendGflags::__set_saml2_group_attribute_name(const std::string& val) {
  this->saml2_group_attribute_name = val;
}

void TBackendGflags::__set_saml2_group_filter(const std::string& val) {
  this->saml2_group_filter = val;
}

void TBackendGflags::__set_saml2_ee_test_mode(const bool val) {
  this->saml2_ee_test_mode = val;
}

void TBackendGflags::__set_scratch_dirs(const std::string& val) {
  this->scratch_dirs = val;
}

void TBackendGflags::__set_enable_row_filtering(const bool val) {
  this->enable_row_filtering = val;
}

void TBackendGflags::__set_max_wait_time_for_sync_ddl_s(const int32_t val) {
  this->max_wait_time_for_sync_ddl_s = val;
}

void TBackendGflags::__set_allow_ordinals_in_having(const bool val) {
  this->allow_ordinals_in_having = val;
}

void TBackendGflags::__set_start_hms_server(const bool val) {
  this->start_hms_server = val;
}

void TBackendGflags::__set_hms_port(const int32_t val) {
  this->hms_port = val;
}

void TBackendGflags::__set_fallback_to_hms_on_errors(const bool val) {
  this->fallback_to_hms_on_errors = val;
}

void TBackendGflags::__set_enable_catalogd_hms_cache(const bool val) {
  this->enable_catalogd_hms_cache = val;
}

void TBackendGflags::__set_kudu_sasl_protocol_name(const std::string& val) {
  this->kudu_sasl_protocol_name = val;
}

void TBackendGflags::__set_warn_catalog_response_size_mb(const int32_t val) {
  this->warn_catalog_response_size_mb = val;
}

void TBackendGflags::__set_warn_catalog_response_duration_s(const int32_t val) {
  this->warn_catalog_response_duration_s = val;
}

void TBackendGflags::__set_invalidate_hms_cache_on_ddls(const bool val) {
  this->invalidate_hms_cache_on_ddls = val;
}

void TBackendGflags::__set_startup_filesystem_check_directories(const std::string& val) {
  this->startup_filesystem_check_directories = val;
}

void TBackendGflags::__set_hms_event_incremental_refresh_transactional_table(const bool val) {
  this->hms_event_incremental_refresh_transactional_table = val;
}

void TBackendGflags::__set_enable_shell_based_groups_mapping_support(const bool val) {
  this->enable_shell_based_groups_mapping_support = val;
}

void TBackendGflags::__set_auto_check_compaction(const bool val) {
  this->auto_check_compaction = val;
}
std::ostream& operator<<(std::ostream& out, const TBackendGflags& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TBackendGflags &a, TBackendGflags &b) {
  using ::std::swap;
  swap(a.load_auth_to_local_rules, b.load_auth_to_local_rules);
  swap(a.non_impala_java_vlog, b.non_impala_java_vlog);
  swap(a.impala_log_lvl, b.impala_log_lvl);
  swap(a.inc_stats_size_limit_bytes, b.inc_stats_size_limit_bytes);
  swap(a.lineage_event_log_dir, b.lineage_event_log_dir);
  swap(a.load_catalog_in_background, b.load_catalog_in_background);
  swap(a.num_metadata_loading_threads, b.num_metadata_loading_threads);
  swap(a.principal, b.principal);
  swap(a.server_name, b.server_name);
  swap(a.kudu_master_hosts, b.kudu_master_hosts);
  swap(a.local_library_path, b.local_library_path);
  swap(a.read_size, b.read_size);
  swap(a.kudu_operation_timeout_ms, b.kudu_operation_timeout_ms);
  swap(a.initial_hms_cnxn_timeout_s, b.initial_hms_cnxn_timeout_s);
  swap(a.enable_stats_extrapolation, b.enable_stats_extrapolation);
  swap(a.max_hdfs_partitions_parallel_load, b.max_hdfs_partitions_parallel_load);
  swap(a.max_nonhdfs_partitions_parallel_load, b.max_nonhdfs_partitions_parallel_load);
  swap(a.reserved_words_version, b.reserved_words_version);
  swap(a.max_filter_error_rate, b.max_filter_error_rate);
  swap(a.min_buffer_size, b.min_buffer_size);
  swap(a.enable_orc_scanner, b.enable_orc_scanner);
  swap(a.authorized_proxy_group_config, b.authorized_proxy_group_config);
  swap(a.use_local_catalog, b.use_local_catalog);
  swap(a.disable_catalog_data_ops_debug_only, b.disable_catalog_data_ops_debug_only);
  swap(a.local_catalog_cache_mb, b.local_catalog_cache_mb);
  swap(a.local_catalog_cache_expiration_s, b.local_catalog_cache_expiration_s);
  swap(a.catalog_topic_mode, b.catalog_topic_mode);
  swap(a.invalidate_tables_timeout_s, b.invalidate_tables_timeout_s);
  swap(a.invalidate_tables_on_memory_pressure, b.invalidate_tables_on_memory_pressure);
  swap(a.invalidate_tables_gc_old_gen_full_threshold, b.invalidate_tables_gc_old_gen_full_threshold);
  swap(a.invalidate_tables_fraction_on_memory_pressure, b.invalidate_tables_fraction_on_memory_pressure);
  swap(a.local_catalog_max_fetch_retries, b.local_catalog_max_fetch_retries);
  swap(a.kudu_scanner_thread_estimated_bytes_per_column, b.kudu_scanner_thread_estimated_bytes_per_column);
  swap(a.kudu_scanner_thread_max_estimated_bytes, b.kudu_scanner_thread_max_estimated_bytes);
  swap(a.catalog_max_parallel_partial_fetch_rpc, b.catalog_max_parallel_partial_fetch_rpc);
  swap(a.catalog_partial_fetch_rpc_queue_timeout_s, b.catalog_partial_fetch_rpc_queue_timeout_s);
  swap(a.exchg_node_buffer_size_bytes, b.exchg_node_buffer_size_bytes);
  swap(a.kudu_mutation_buffer_size, b.kudu_mutation_buffer_size);
  swap(a.kudu_error_buffer_size, b.kudu_error_buffer_size);
  swap(a.hms_event_polling_interval_s, b.hms_event_polling_interval_s);
  swap(a.impala_build_version, b.impala_build_version);
  swap(a.authorization_factory_class, b.authorization_factory_class);
  swap(a.ranger_service_type, b.ranger_service_type);
  swap(a.ranger_app_id, b.ranger_app_id);
  swap(a.authorization_provider, b.authorization_provider);
  swap(a.recursively_list_partitions, b.recursively_list_partitions);
  swap(a.query_event_hook_classes, b.query_event_hook_classes);
  swap(a.query_event_hook_nthreads, b.query_event_hook_nthreads);
  swap(a.is_executor, b.is_executor);
  swap(a.is_coordinator, b.is_coordinator);
  swap(a.use_dedicated_coordinator_estimates, b.use_dedicated_coordinator_estimates);
  swap(a.blacklisted_dbs, b.blacklisted_dbs);
  swap(a.blacklisted_tables, b.blacklisted_tables);
  swap(a.unlock_zorder_sort, b.unlock_zorder_sort);
  swap(a.min_privilege_set_for_show_stmts, b.min_privilege_set_for_show_stmts);
  swap(a.num_expected_executors, b.num_expected_executors);
  swap(a.num_check_authorization_threads, b.num_check_authorization_threads);
  swap(a.use_customized_user_groups_mapper_for_ranger, b.use_customized_user_groups_mapper_for_ranger);
  swap(a.enable_column_masking, b.enable_column_masking);
  swap(a.enable_insert_events, b.enable_insert_events);
  swap(a.compact_catalog_topic, b.compact_catalog_topic);
  swap(a.enable_incremental_metadata_updates, b.enable_incremental_metadata_updates);
  swap(a.topic_update_tbl_max_wait_time_ms, b.topic_update_tbl_max_wait_time_ms);
  swap(a.catalog_max_lock_skipped_topic_updates, b.catalog_max_lock_skipped_topic_updates);
  swap(a.saml2_keystore_path, b.saml2_keystore_path);
  swap(a.saml2_keystore_password, b.saml2_keystore_password);
  swap(a.saml2_private_key_password, b.saml2_private_key_password);
  swap(a.saml2_idp_metadata, b.saml2_idp_metadata);
  swap(a.saml2_sp_entity_id, b.saml2_sp_entity_id);
  swap(a.saml2_sp_callback_url, b.saml2_sp_callback_url);
  swap(a.saml2_want_assertations_signed, b.saml2_want_assertations_signed);
  swap(a.saml2_sign_requests, b.saml2_sign_requests);
  swap(a.saml2_callback_token_ttl, b.saml2_callback_token_ttl);
  swap(a.saml2_group_attribute_name, b.saml2_group_attribute_name);
  swap(a.saml2_group_filter, b.saml2_group_filter);
  swap(a.saml2_ee_test_mode, b.saml2_ee_test_mode);
  swap(a.scratch_dirs, b.scratch_dirs);
  swap(a.enable_row_filtering, b.enable_row_filtering);
  swap(a.max_wait_time_for_sync_ddl_s, b.max_wait_time_for_sync_ddl_s);
  swap(a.allow_ordinals_in_having, b.allow_ordinals_in_having);
  swap(a.start_hms_server, b.start_hms_server);
  swap(a.hms_port, b.hms_port);
  swap(a.fallback_to_hms_on_errors, b.fallback_to_hms_on_errors);
  swap(a.enable_catalogd_hms_cache, b.enable_catalogd_hms_cache);
  swap(a.kudu_sasl_protocol_name, b.kudu_sasl_protocol_name);
  swap(a.warn_catalog_response_size_mb, b.warn_catalog_response_size_mb);
  swap(a.warn_catalog_response_duration_s, b.warn_catalog_response_duration_s);
  swap(a.invalidate_hms_cache_on_ddls, b.invalidate_hms_cache_on_ddls);
  swap(a.startup_filesystem_check_directories, b.startup_filesystem_check_directories);
  swap(a.hms_event_incremental_refresh_transactional_table, b.hms_event_incremental_refresh_transactional_table);
  swap(a.enable_shell_based_groups_mapping_support, b.enable_shell_based_groups_mapping_support);
  swap(a.auto_check_compaction, b.auto_check_compaction);
}

TBackendGflags::TBackendGflags(const TBackendGflags& other1) {
  load_auth_to_local_rules = other1.load_auth_to_local_rules;
  non_impala_java_vlog = other1.non_impala_java_vlog;
  impala_log_lvl = other1.impala_log_lvl;
  inc_stats_size_limit_bytes = other1.inc_stats_size_limit_bytes;
  lineage_event_log_dir = other1.lineage_event_log_dir;
  load_catalog_in_background = other1.load_catalog_in_background;
  num_metadata_loading_threads = other1.num_metadata_loading_threads;
  principal = other1.principal;
  server_name = other1.server_name;
  kudu_master_hosts = other1.kudu_master_hosts;
  local_library_path = other1.local_library_path;
  read_size = other1.read_size;
  kudu_operation_timeout_ms = other1.kudu_operation_timeout_ms;
  initial_hms_cnxn_timeout_s = other1.initial_hms_cnxn_timeout_s;
  enable_stats_extrapolation = other1.enable_stats_extrapolation;
  max_hdfs_partitions_parallel_load = other1.max_hdfs_partitions_parallel_load;
  max_nonhdfs_partitions_parallel_load = other1.max_nonhdfs_partitions_parallel_load;
  reserved_words_version = other1.reserved_words_version;
  max_filter_error_rate = other1.max_filter_error_rate;
  min_buffer_size = other1.min_buffer_size;
  enable_orc_scanner = other1.enable_orc_scanner;
  authorized_proxy_group_config = other1.authorized_proxy_group_config;
  use_local_catalog = other1.use_local_catalog;
  disable_catalog_data_ops_debug_only = other1.disable_catalog_data_ops_debug_only;
  local_catalog_cache_mb = other1.local_catalog_cache_mb;
  local_catalog_cache_expiration_s = other1.local_catalog_cache_expiration_s;
  catalog_topic_mode = other1.catalog_topic_mode;
  invalidate_tables_timeout_s = other1.invalidate_tables_timeout_s;
  invalidate_tables_on_memory_pressure = other1.invalidate_tables_on_memory_pressure;
  invalidate_tables_gc_old_gen_full_threshold = other1.invalidate_tables_gc_old_gen_full_threshold;
  invalidate_tables_fraction_on_memory_pressure = other1.invalidate_tables_fraction_on_memory_pressure;
  local_catalog_max_fetch_retries = other1.local_catalog_max_fetch_retries;
  kudu_scanner_thread_estimated_bytes_per_column = other1.kudu_scanner_thread_estimated_bytes_per_column;
  kudu_scanner_thread_max_estimated_bytes = other1.kudu_scanner_thread_max_estimated_bytes;
  catalog_max_parallel_partial_fetch_rpc = other1.catalog_max_parallel_partial_fetch_rpc;
  catalog_partial_fetch_rpc_queue_timeout_s = other1.catalog_partial_fetch_rpc_queue_timeout_s;
  exchg_node_buffer_size_bytes = other1.exchg_node_buffer_size_bytes;
  kudu_mutation_buffer_size = other1.kudu_mutation_buffer_size;
  kudu_error_buffer_size = other1.kudu_error_buffer_size;
  hms_event_polling_interval_s = other1.hms_event_polling_interval_s;
  impala_build_version = other1.impala_build_version;
  authorization_factory_class = other1.authorization_factory_class;
  ranger_service_type = other1.ranger_service_type;
  ranger_app_id = other1.ranger_app_id;
  authorization_provider = other1.authorization_provider;
  recursively_list_partitions = other1.recursively_list_partitions;
  query_event_hook_classes = other1.query_event_hook_classes;
  query_event_hook_nthreads = other1.query_event_hook_nthreads;
  is_executor = other1.is_executor;
  is_coordinator = other1.is_coordinator;
  use_dedicated_coordinator_estimates = other1.use_dedicated_coordinator_estimates;
  blacklisted_dbs = other1.blacklisted_dbs;
  blacklisted_tables = other1.blacklisted_tables;
  unlock_zorder_sort = other1.unlock_zorder_sort;
  min_privilege_set_for_show_stmts = other1.min_privilege_set_for_show_stmts;
  num_expected_executors = other1.num_expected_executors;
  num_check_authorization_threads = other1.num_check_authorization_threads;
  use_customized_user_groups_mapper_for_ranger = other1.use_customized_user_groups_mapper_for_ranger;
  enable_column_masking = other1.enable_column_masking;
  enable_insert_events = other1.enable_insert_events;
  compact_catalog_topic = other1.compact_catalog_topic;
  enable_incremental_metadata_updates = other1.enable_incremental_metadata_updates;
  topic_update_tbl_max_wait_time_ms = other1.topic_update_tbl_max_wait_time_ms;
  catalog_max_lock_skipped_topic_updates = other1.catalog_max_lock_skipped_topic_updates;
  saml2_keystore_path = other1.saml2_keystore_path;
  saml2_keystore_password = other1.saml2_keystore_password;
  saml2_private_key_password = other1.saml2_private_key_password;
  saml2_idp_metadata = other1.saml2_idp_metadata;
  saml2_sp_entity_id = other1.saml2_sp_entity_id;
  saml2_sp_callback_url = other1.saml2_sp_callback_url;
  saml2_want_assertations_signed = other1.saml2_want_assertations_signed;
  saml2_sign_requests = other1.saml2_sign_requests;
  saml2_callback_token_ttl = other1.saml2_callback_token_ttl;
  saml2_group_attribute_name = other1.saml2_group_attribute_name;
  saml2_group_filter = other1.saml2_group_filter;
  saml2_ee_test_mode = other1.saml2_ee_test_mode;
  scratch_dirs = other1.scratch_dirs;
  enable_row_filtering = other1.enable_row_filtering;
  max_wait_time_for_sync_ddl_s = other1.max_wait_time_for_sync_ddl_s;
  allow_ordinals_in_having = other1.allow_ordinals_in_having;
  start_hms_server = other1.start_hms_server;
  hms_port = other1.hms_port;
  fallback_to_hms_on_errors = other1.fallback_to_hms_on_errors;
  enable_catalogd_hms_cache = other1.enable_catalogd_hms_cache;
  kudu_sasl_protocol_name = other1.kudu_sasl_protocol_name;
  warn_catalog_response_size_mb = other1.warn_catalog_response_size_mb;
  warn_catalog_response_duration_s = other1.warn_catalog_response_duration_s;
  invalidate_hms_cache_on_ddls = other1.invalidate_hms_cache_on_ddls;
  startup_filesystem_check_directories = other1.startup_filesystem_check_directories;
  hms_event_incremental_refresh_transactional_table = other1.hms_event_incremental_refresh_transactional_table;
  enable_shell_based_groups_mapping_support = other1.enable_shell_based_groups_mapping_support;
  auto_check_compaction = other1.auto_check_compaction;
}
TBackendGflags::TBackendGflags( TBackendGflags&& other2) {
  load_auth_to_local_rules = std::move(other2.load_auth_to_local_rules);
  non_impala_java_vlog = std::move(other2.non_impala_java_vlog);
  impala_log_lvl = std::move(other2.impala_log_lvl);
  inc_stats_size_limit_bytes = std::move(other2.inc_stats_size_limit_bytes);
  lineage_event_log_dir = std::move(other2.lineage_event_log_dir);
  load_catalog_in_background = std::move(other2.load_catalog_in_background);
  num_metadata_loading_threads = std::move(other2.num_metadata_loading_threads);
  principal = std::move(other2.principal);
  server_name = std::move(other2.server_name);
  kudu_master_hosts = std::move(other2.kudu_master_hosts);
  local_library_path = std::move(other2.local_library_path);
  read_size = std::move(other2.read_size);
  kudu_operation_timeout_ms = std::move(other2.kudu_operation_timeout_ms);
  initial_hms_cnxn_timeout_s = std::move(other2.initial_hms_cnxn_timeout_s);
  enable_stats_extrapolation = std::move(other2.enable_stats_extrapolation);
  max_hdfs_partitions_parallel_load = std::move(other2.max_hdfs_partitions_parallel_load);
  max_nonhdfs_partitions_parallel_load = std::move(other2.max_nonhdfs_partitions_parallel_load);
  reserved_words_version = std::move(other2.reserved_words_version);
  max_filter_error_rate = std::move(other2.max_filter_error_rate);
  min_buffer_size = std::move(other2.min_buffer_size);
  enable_orc_scanner = std::move(other2.enable_orc_scanner);
  authorized_proxy_group_config = std::move(other2.authorized_proxy_group_config);
  use_local_catalog = std::move(other2.use_local_catalog);
  disable_catalog_data_ops_debug_only = std::move(other2.disable_catalog_data_ops_debug_only);
  local_catalog_cache_mb = std::move(other2.local_catalog_cache_mb);
  local_catalog_cache_expiration_s = std::move(other2.local_catalog_cache_expiration_s);
  catalog_topic_mode = std::move(other2.catalog_topic_mode);
  invalidate_tables_timeout_s = std::move(other2.invalidate_tables_timeout_s);
  invalidate_tables_on_memory_pressure = std::move(other2.invalidate_tables_on_memory_pressure);
  invalidate_tables_gc_old_gen_full_threshold = std::move(other2.invalidate_tables_gc_old_gen_full_threshold);
  invalidate_tables_fraction_on_memory_pressure = std::move(other2.invalidate_tables_fraction_on_memory_pressure);
  local_catalog_max_fetch_retries = std::move(other2.local_catalog_max_fetch_retries);
  kudu_scanner_thread_estimated_bytes_per_column = std::move(other2.kudu_scanner_thread_estimated_bytes_per_column);
  kudu_scanner_thread_max_estimated_bytes = std::move(other2.kudu_scanner_thread_max_estimated_bytes);
  catalog_max_parallel_partial_fetch_rpc = std::move(other2.catalog_max_parallel_partial_fetch_rpc);
  catalog_partial_fetch_rpc_queue_timeout_s = std::move(other2.catalog_partial_fetch_rpc_queue_timeout_s);
  exchg_node_buffer_size_bytes = std::move(other2.exchg_node_buffer_size_bytes);
  kudu_mutation_buffer_size = std::move(other2.kudu_mutation_buffer_size);
  kudu_error_buffer_size = std::move(other2.kudu_error_buffer_size);
  hms_event_polling_interval_s = std::move(other2.hms_event_polling_interval_s);
  impala_build_version = std::move(other2.impala_build_version);
  authorization_factory_class = std::move(other2.authorization_factory_class);
  ranger_service_type = std::move(other2.ranger_service_type);
  ranger_app_id = std::move(other2.ranger_app_id);
  authorization_provider = std::move(other2.authorization_provider);
  recursively_list_partitions = std::move(other2.recursively_list_partitions);
  query_event_hook_classes = std::move(other2.query_event_hook_classes);
  query_event_hook_nthreads = std::move(other2.query_event_hook_nthreads);
  is_executor = std::move(other2.is_executor);
  is_coordinator = std::move(other2.is_coordinator);
  use_dedicated_coordinator_estimates = std::move(other2.use_dedicated_coordinator_estimates);
  blacklisted_dbs = std::move(other2.blacklisted_dbs);
  blacklisted_tables = std::move(other2.blacklisted_tables);
  unlock_zorder_sort = std::move(other2.unlock_zorder_sort);
  min_privilege_set_for_show_stmts = std::move(other2.min_privilege_set_for_show_stmts);
  num_expected_executors = std::move(other2.num_expected_executors);
  num_check_authorization_threads = std::move(other2.num_check_authorization_threads);
  use_customized_user_groups_mapper_for_ranger = std::move(other2.use_customized_user_groups_mapper_for_ranger);
  enable_column_masking = std::move(other2.enable_column_masking);
  enable_insert_events = std::move(other2.enable_insert_events);
  compact_catalog_topic = std::move(other2.compact_catalog_topic);
  enable_incremental_metadata_updates = std::move(other2.enable_incremental_metadata_updates);
  topic_update_tbl_max_wait_time_ms = std::move(other2.topic_update_tbl_max_wait_time_ms);
  catalog_max_lock_skipped_topic_updates = std::move(other2.catalog_max_lock_skipped_topic_updates);
  saml2_keystore_path = std::move(other2.saml2_keystore_path);
  saml2_keystore_password = std::move(other2.saml2_keystore_password);
  saml2_private_key_password = std::move(other2.saml2_private_key_password);
  saml2_idp_metadata = std::move(other2.saml2_idp_metadata);
  saml2_sp_entity_id = std::move(other2.saml2_sp_entity_id);
  saml2_sp_callback_url = std::move(other2.saml2_sp_callback_url);
  saml2_want_assertations_signed = std::move(other2.saml2_want_assertations_signed);
  saml2_sign_requests = std::move(other2.saml2_sign_requests);
  saml2_callback_token_ttl = std::move(other2.saml2_callback_token_ttl);
  saml2_group_attribute_name = std::move(other2.saml2_group_attribute_name);
  saml2_group_filter = std::move(other2.saml2_group_filter);
  saml2_ee_test_mode = std::move(other2.saml2_ee_test_mode);
  scratch_dirs = std::move(other2.scratch_dirs);
  enable_row_filtering = std::move(other2.enable_row_filtering);
  max_wait_time_for_sync_ddl_s = std::move(other2.max_wait_time_for_sync_ddl_s);
  allow_ordinals_in_having = std::move(other2.allow_ordinals_in_having);
  start_hms_server = std::move(other2.start_hms_server);
  hms_port = std::move(other2.hms_port);
  fallback_to_hms_on_errors = std::move(other2.fallback_to_hms_on_errors);
  enable_catalogd_hms_cache = std::move(other2.enable_catalogd_hms_cache);
  kudu_sasl_protocol_name = std::move(other2.kudu_sasl_protocol_name);
  warn_catalog_response_size_mb = std::move(other2.warn_catalog_response_size_mb);
  warn_catalog_response_duration_s = std::move(other2.warn_catalog_response_duration_s);
  invalidate_hms_cache_on_ddls = std::move(other2.invalidate_hms_cache_on_ddls);
  startup_filesystem_check_directories = std::move(other2.startup_filesystem_check_directories);
  hms_event_incremental_refresh_transactional_table = std::move(other2.hms_event_incremental_refresh_transactional_table);
  enable_shell_based_groups_mapping_support = std::move(other2.enable_shell_based_groups_mapping_support);
  auto_check_compaction = std::move(other2.auto_check_compaction);
}
TBackendGflags& TBackendGflags::operator=(const TBackendGflags& other3) {
  load_auth_to_local_rules = other3.load_auth_to_local_rules;
  non_impala_java_vlog = other3.non_impala_java_vlog;
  impala_log_lvl = other3.impala_log_lvl;
  inc_stats_size_limit_bytes = other3.inc_stats_size_limit_bytes;
  lineage_event_log_dir = other3.lineage_event_log_dir;
  load_catalog_in_background = other3.load_catalog_in_background;
  num_metadata_loading_threads = other3.num_metadata_loading_threads;
  principal = other3.principal;
  server_name = other3.server_name;
  kudu_master_hosts = other3.kudu_master_hosts;
  local_library_path = other3.local_library_path;
  read_size = other3.read_size;
  kudu_operation_timeout_ms = other3.kudu_operation_timeout_ms;
  initial_hms_cnxn_timeout_s = other3.initial_hms_cnxn_timeout_s;
  enable_stats_extrapolation = other3.enable_stats_extrapolation;
  max_hdfs_partitions_parallel_load = other3.max_hdfs_partitions_parallel_load;
  max_nonhdfs_partitions_parallel_load = other3.max_nonhdfs_partitions_parallel_load;
  reserved_words_version = other3.reserved_words_version;
  max_filter_error_rate = other3.max_filter_error_rate;
  min_buffer_size = other3.min_buffer_size;
  enable_orc_scanner = other3.enable_orc_scanner;
  authorized_proxy_group_config = other3.authorized_proxy_group_config;
  use_local_catalog = other3.use_local_catalog;
  disable_catalog_data_ops_debug_only = other3.disable_catalog_data_ops_debug_only;
  local_catalog_cache_mb = other3.local_catalog_cache_mb;
  local_catalog_cache_expiration_s = other3.local_catalog_cache_expiration_s;
  catalog_topic_mode = other3.catalog_topic_mode;
  invalidate_tables_timeout_s = other3.invalidate_tables_timeout_s;
  invalidate_tables_on_memory_pressure = other3.invalidate_tables_on_memory_pressure;
  invalidate_tables_gc_old_gen_full_threshold = other3.invalidate_tables_gc_old_gen_full_threshold;
  invalidate_tables_fraction_on_memory_pressure = other3.invalidate_tables_fraction_on_memory_pressure;
  local_catalog_max_fetch_retries = other3.local_catalog_max_fetch_retries;
  kudu_scanner_thread_estimated_bytes_per_column = other3.kudu_scanner_thread_estimated_bytes_per_column;
  kudu_scanner_thread_max_estimated_bytes = other3.kudu_scanner_thread_max_estimated_bytes;
  catalog_max_parallel_partial_fetch_rpc = other3.catalog_max_parallel_partial_fetch_rpc;
  catalog_partial_fetch_rpc_queue_timeout_s = other3.catalog_partial_fetch_rpc_queue_timeout_s;
  exchg_node_buffer_size_bytes = other3.exchg_node_buffer_size_bytes;
  kudu_mutation_buffer_size = other3.kudu_mutation_buffer_size;
  kudu_error_buffer_size = other3.kudu_error_buffer_size;
  hms_event_polling_interval_s = other3.hms_event_polling_interval_s;
  impala_build_version = other3.impala_build_version;
  authorization_factory_class = other3.authorization_factory_class;
  ranger_service_type = other3.ranger_service_type;
  ranger_app_id = other3.ranger_app_id;
  authorization_provider = other3.authorization_provider;
  recursively_list_partitions = other3.recursively_list_partitions;
  query_event_hook_classes = other3.query_event_hook_classes;
  query_event_hook_nthreads = other3.query_event_hook_nthreads;
  is_executor = other3.is_executor;
  is_coordinator = other3.is_coordinator;
  use_dedicated_coordinator_estimates = other3.use_dedicated_coordinator_estimates;
  blacklisted_dbs = other3.blacklisted_dbs;
  blacklisted_tables = other3.blacklisted_tables;
  unlock_zorder_sort = other3.unlock_zorder_sort;
  min_privilege_set_for_show_stmts = other3.min_privilege_set_for_show_stmts;
  num_expected_executors = other3.num_expected_executors;
  num_check_authorization_threads = other3.num_check_authorization_threads;
  use_customized_user_groups_mapper_for_ranger = other3.use_customized_user_groups_mapper_for_ranger;
  enable_column_masking = other3.enable_column_masking;
  enable_insert_events = other3.enable_insert_events;
  compact_catalog_topic = other3.compact_catalog_topic;
  enable_incremental_metadata_updates = other3.enable_incremental_metadata_updates;
  topic_update_tbl_max_wait_time_ms = other3.topic_update_tbl_max_wait_time_ms;
  catalog_max_lock_skipped_topic_updates = other3.catalog_max_lock_skipped_topic_updates;
  saml2_keystore_path = other3.saml2_keystore_path;
  saml2_keystore_password = other3.saml2_keystore_password;
  saml2_private_key_password = other3.saml2_private_key_password;
  saml2_idp_metadata = other3.saml2_idp_metadata;
  saml2_sp_entity_id = other3.saml2_sp_entity_id;
  saml2_sp_callback_url = other3.saml2_sp_callback_url;
  saml2_want_assertations_signed = other3.saml2_want_assertations_signed;
  saml2_sign_requests = other3.saml2_sign_requests;
  saml2_callback_token_ttl = other3.saml2_callback_token_ttl;
  saml2_group_attribute_name = other3.saml2_group_attribute_name;
  saml2_group_filter = other3.saml2_group_filter;
  saml2_ee_test_mode = other3.saml2_ee_test_mode;
  scratch_dirs = other3.scratch_dirs;
  enable_row_filtering = other3.enable_row_filtering;
  max_wait_time_for_sync_ddl_s = other3.max_wait_time_for_sync_ddl_s;
  allow_ordinals_in_having = other3.allow_ordinals_in_having;
  start_hms_server = other3.start_hms_server;
  hms_port = other3.hms_port;
  fallback_to_hms_on_errors = other3.fallback_to_hms_on_errors;
  enable_catalogd_hms_cache = other3.enable_catalogd_hms_cache;
  kudu_sasl_protocol_name = other3.kudu_sasl_protocol_name;
  warn_catalog_response_size_mb = other3.warn_catalog_response_size_mb;
  warn_catalog_response_duration_s = other3.warn_catalog_response_duration_s;
  invalidate_hms_cache_on_ddls = other3.invalidate_hms_cache_on_ddls;
  startup_filesystem_check_directories = other3.startup_filesystem_check_directories;
  hms_event_incremental_refresh_transactional_table = other3.hms_event_incremental_refresh_transactional_table;
  enable_shell_based_groups_mapping_support = other3.enable_shell_based_groups_mapping_support;
  auto_check_compaction = other3.auto_check_compaction;
  return *this;
}
TBackendGflags& TBackendGflags::operator=(TBackendGflags&& other4) {
  load_auth_to_local_rules = std::move(other4.load_auth_to_local_rules);
  non_impala_java_vlog = std::move(other4.non_impala_java_vlog);
  impala_log_lvl = std::move(other4.impala_log_lvl);
  inc_stats_size_limit_bytes = std::move(other4.inc_stats_size_limit_bytes);
  lineage_event_log_dir = std::move(other4.lineage_event_log_dir);
  load_catalog_in_background = std::move(other4.load_catalog_in_background);
  num_metadata_loading_threads = std::move(other4.num_metadata_loading_threads);
  principal = std::move(other4.principal);
  server_name = std::move(other4.server_name);
  kudu_master_hosts = std::move(other4.kudu_master_hosts);
  local_library_path = std::move(other4.local_library_path);
  read_size = std::move(other4.read_size);
  kudu_operation_timeout_ms = std::move(other4.kudu_operation_timeout_ms);
  initial_hms_cnxn_timeout_s = std::move(other4.initial_hms_cnxn_timeout_s);
  enable_stats_extrapolation = std::move(other4.enable_stats_extrapolation);
  max_hdfs_partitions_parallel_load = std::move(other4.max_hdfs_partitions_parallel_load);
  max_nonhdfs_partitions_parallel_load = std::move(other4.max_nonhdfs_partitions_parallel_load);
  reserved_words_version = std::move(other4.reserved_words_version);
  max_filter_error_rate = std::move(other4.max_filter_error_rate);
  min_buffer_size = std::move(other4.min_buffer_size);
  enable_orc_scanner = std::move(other4.enable_orc_scanner);
  authorized_proxy_group_config = std::move(other4.authorized_proxy_group_config);
  use_local_catalog = std::move(other4.use_local_catalog);
  disable_catalog_data_ops_debug_only = std::move(other4.disable_catalog_data_ops_debug_only);
  local_catalog_cache_mb = std::move(other4.local_catalog_cache_mb);
  local_catalog_cache_expiration_s = std::move(other4.local_catalog_cache_expiration_s);
  catalog_topic_mode = std::move(other4.catalog_topic_mode);
  invalidate_tables_timeout_s = std::move(other4.invalidate_tables_timeout_s);
  invalidate_tables_on_memory_pressure = std::move(other4.invalidate_tables_on_memory_pressure);
  invalidate_tables_gc_old_gen_full_threshold = std::move(other4.invalidate_tables_gc_old_gen_full_threshold);
  invalidate_tables_fraction_on_memory_pressure = std::move(other4.invalidate_tables_fraction_on_memory_pressure);
  local_catalog_max_fetch_retries = std::move(other4.local_catalog_max_fetch_retries);
  kudu_scanner_thread_estimated_bytes_per_column = std::move(other4.kudu_scanner_thread_estimated_bytes_per_column);
  kudu_scanner_thread_max_estimated_bytes = std::move(other4.kudu_scanner_thread_max_estimated_bytes);
  catalog_max_parallel_partial_fetch_rpc = std::move(other4.catalog_max_parallel_partial_fetch_rpc);
  catalog_partial_fetch_rpc_queue_timeout_s = std::move(other4.catalog_partial_fetch_rpc_queue_timeout_s);
  exchg_node_buffer_size_bytes = std::move(other4.exchg_node_buffer_size_bytes);
  kudu_mutation_buffer_size = std::move(other4.kudu_mutation_buffer_size);
  kudu_error_buffer_size = std::move(other4.kudu_error_buffer_size);
  hms_event_polling_interval_s = std::move(other4.hms_event_polling_interval_s);
  impala_build_version = std::move(other4.impala_build_version);
  authorization_factory_class = std::move(other4.authorization_factory_class);
  ranger_service_type = std::move(other4.ranger_service_type);
  ranger_app_id = std::move(other4.ranger_app_id);
  authorization_provider = std::move(other4.authorization_provider);
  recursively_list_partitions = std::move(other4.recursively_list_partitions);
  query_event_hook_classes = std::move(other4.query_event_hook_classes);
  query_event_hook_nthreads = std::move(other4.query_event_hook_nthreads);
  is_executor = std::move(other4.is_executor);
  is_coordinator = std::move(other4.is_coordinator);
  use_dedicated_coordinator_estimates = std::move(other4.use_dedicated_coordinator_estimates);
  blacklisted_dbs = std::move(other4.blacklisted_dbs);
  blacklisted_tables = std::move(other4.blacklisted_tables);
  unlock_zorder_sort = std::move(other4.unlock_zorder_sort);
  min_privilege_set_for_show_stmts = std::move(other4.min_privilege_set_for_show_stmts);
  num_expected_executors = std::move(other4.num_expected_executors);
  num_check_authorization_threads = std::move(other4.num_check_authorization_threads);
  use_customized_user_groups_mapper_for_ranger = std::move(other4.use_customized_user_groups_mapper_for_ranger);
  enable_column_masking = std::move(other4.enable_column_masking);
  enable_insert_events = std::move(other4.enable_insert_events);
  compact_catalog_topic = std::move(other4.compact_catalog_topic);
  enable_incremental_metadata_updates = std::move(other4.enable_incremental_metadata_updates);
  topic_update_tbl_max_wait_time_ms = std::move(other4.topic_update_tbl_max_wait_time_ms);
  catalog_max_lock_skipped_topic_updates = std::move(other4.catalog_max_lock_skipped_topic_updates);
  saml2_keystore_path = std::move(other4.saml2_keystore_path);
  saml2_keystore_password = std::move(other4.saml2_keystore_password);
  saml2_private_key_password = std::move(other4.saml2_private_key_password);
  saml2_idp_metadata = std::move(other4.saml2_idp_metadata);
  saml2_sp_entity_id = std::move(other4.saml2_sp_entity_id);
  saml2_sp_callback_url = std::move(other4.saml2_sp_callback_url);
  saml2_want_assertations_signed = std::move(other4.saml2_want_assertations_signed);
  saml2_sign_requests = std::move(other4.saml2_sign_requests);
  saml2_callback_token_ttl = std::move(other4.saml2_callback_token_ttl);
  saml2_group_attribute_name = std::move(other4.saml2_group_attribute_name);
  saml2_group_filter = std::move(other4.saml2_group_filter);
  saml2_ee_test_mode = std::move(other4.saml2_ee_test_mode);
  scratch_dirs = std::move(other4.scratch_dirs);
  enable_row_filtering = std::move(other4.enable_row_filtering);
  max_wait_time_for_sync_ddl_s = std::move(other4.max_wait_time_for_sync_ddl_s);
  allow_ordinals_in_having = std::move(other4.allow_ordinals_in_having);
  start_hms_server = std::move(other4.start_hms_server);
  hms_port = std::move(other4.hms_port);
  fallback_to_hms_on_errors = std::move(other4.fallback_to_hms_on_errors);
  enable_catalogd_hms_cache = std::move(other4.enable_catalogd_hms_cache);
  kudu_sasl_protocol_name = std::move(other4.kudu_sasl_protocol_name);
  warn_catalog_response_size_mb = std::move(other4.warn_catalog_response_size_mb);
  warn_catalog_response_duration_s = std::move(other4.warn_catalog_response_duration_s);
  invalidate_hms_cache_on_ddls = std::move(other4.invalidate_hms_cache_on_ddls);
  startup_filesystem_check_directories = std::move(other4.startup_filesystem_check_directories);
  hms_event_incremental_refresh_transactional_table = std::move(other4.hms_event_incremental_refresh_transactional_table);
  enable_shell_based_groups_mapping_support = std::move(other4.enable_shell_based_groups_mapping_support);
  auto_check_compaction = std::move(other4.auto_check_compaction);
  return *this;
}
void TBackendGflags::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBackendGflags(";
  out << "load_auth_to_local_rules=" << to_string(load_auth_to_local_rules);
  out << ", " << "non_impala_java_vlog=" << to_string(non_impala_java_vlog);
  out << ", " << "impala_log_lvl=" << to_string(impala_log_lvl);
  out << ", " << "inc_stats_size_limit_bytes=" << to_string(inc_stats_size_limit_bytes);
  out << ", " << "lineage_event_log_dir=" << to_string(lineage_event_log_dir);
  out << ", " << "load_catalog_in_background=" << to_string(load_catalog_in_background);
  out << ", " << "num_metadata_loading_threads=" << to_string(num_metadata_loading_threads);
  out << ", " << "principal=" << to_string(principal);
  out << ", " << "server_name=" << to_string(server_name);
  out << ", " << "kudu_master_hosts=" << to_string(kudu_master_hosts);
  out << ", " << "local_library_path=" << to_string(local_library_path);
  out << ", " << "read_size=" << to_string(read_size);
  out << ", " << "kudu_operation_timeout_ms=" << to_string(kudu_operation_timeout_ms);
  out << ", " << "initial_hms_cnxn_timeout_s=" << to_string(initial_hms_cnxn_timeout_s);
  out << ", " << "enable_stats_extrapolation=" << to_string(enable_stats_extrapolation);
  out << ", " << "max_hdfs_partitions_parallel_load=" << to_string(max_hdfs_partitions_parallel_load);
  out << ", " << "max_nonhdfs_partitions_parallel_load=" << to_string(max_nonhdfs_partitions_parallel_load);
  out << ", " << "reserved_words_version=" << to_string(reserved_words_version);
  out << ", " << "max_filter_error_rate=" << to_string(max_filter_error_rate);
  out << ", " << "min_buffer_size=" << to_string(min_buffer_size);
  out << ", " << "enable_orc_scanner=" << to_string(enable_orc_scanner);
  out << ", " << "authorized_proxy_group_config=" << to_string(authorized_proxy_group_config);
  out << ", " << "use_local_catalog=" << to_string(use_local_catalog);
  out << ", " << "disable_catalog_data_ops_debug_only=" << to_string(disable_catalog_data_ops_debug_only);
  out << ", " << "local_catalog_cache_mb=" << to_string(local_catalog_cache_mb);
  out << ", " << "local_catalog_cache_expiration_s=" << to_string(local_catalog_cache_expiration_s);
  out << ", " << "catalog_topic_mode=" << to_string(catalog_topic_mode);
  out << ", " << "invalidate_tables_timeout_s=" << to_string(invalidate_tables_timeout_s);
  out << ", " << "invalidate_tables_on_memory_pressure=" << to_string(invalidate_tables_on_memory_pressure);
  out << ", " << "invalidate_tables_gc_old_gen_full_threshold=" << to_string(invalidate_tables_gc_old_gen_full_threshold);
  out << ", " << "invalidate_tables_fraction_on_memory_pressure=" << to_string(invalidate_tables_fraction_on_memory_pressure);
  out << ", " << "local_catalog_max_fetch_retries=" << to_string(local_catalog_max_fetch_retries);
  out << ", " << "kudu_scanner_thread_estimated_bytes_per_column=" << to_string(kudu_scanner_thread_estimated_bytes_per_column);
  out << ", " << "kudu_scanner_thread_max_estimated_bytes=" << to_string(kudu_scanner_thread_max_estimated_bytes);
  out << ", " << "catalog_max_parallel_partial_fetch_rpc=" << to_string(catalog_max_parallel_partial_fetch_rpc);
  out << ", " << "catalog_partial_fetch_rpc_queue_timeout_s=" << to_string(catalog_partial_fetch_rpc_queue_timeout_s);
  out << ", " << "exchg_node_buffer_size_bytes=" << to_string(exchg_node_buffer_size_bytes);
  out << ", " << "kudu_mutation_buffer_size=" << to_string(kudu_mutation_buffer_size);
  out << ", " << "kudu_error_buffer_size=" << to_string(kudu_error_buffer_size);
  out << ", " << "hms_event_polling_interval_s=" << to_string(hms_event_polling_interval_s);
  out << ", " << "impala_build_version=" << to_string(impala_build_version);
  out << ", " << "authorization_factory_class=" << to_string(authorization_factory_class);
  out << ", " << "ranger_service_type=" << to_string(ranger_service_type);
  out << ", " << "ranger_app_id=" << to_string(ranger_app_id);
  out << ", " << "authorization_provider=" << to_string(authorization_provider);
  out << ", " << "recursively_list_partitions=" << to_string(recursively_list_partitions);
  out << ", " << "query_event_hook_classes=" << to_string(query_event_hook_classes);
  out << ", " << "query_event_hook_nthreads=" << to_string(query_event_hook_nthreads);
  out << ", " << "is_executor=" << to_string(is_executor);
  out << ", " << "is_coordinator=" << to_string(is_coordinator);
  out << ", " << "use_dedicated_coordinator_estimates=" << to_string(use_dedicated_coordinator_estimates);
  out << ", " << "blacklisted_dbs=" << to_string(blacklisted_dbs);
  out << ", " << "blacklisted_tables=" << to_string(blacklisted_tables);
  out << ", " << "unlock_zorder_sort=" << to_string(unlock_zorder_sort);
  out << ", " << "min_privilege_set_for_show_stmts=" << to_string(min_privilege_set_for_show_stmts);
  out << ", " << "num_expected_executors=" << to_string(num_expected_executors);
  out << ", " << "num_check_authorization_threads=" << to_string(num_check_authorization_threads);
  out << ", " << "use_customized_user_groups_mapper_for_ranger=" << to_string(use_customized_user_groups_mapper_for_ranger);
  out << ", " << "enable_column_masking=" << to_string(enable_column_masking);
  out << ", " << "enable_insert_events=" << to_string(enable_insert_events);
  out << ", " << "compact_catalog_topic=" << to_string(compact_catalog_topic);
  out << ", " << "enable_incremental_metadata_updates=" << to_string(enable_incremental_metadata_updates);
  out << ", " << "topic_update_tbl_max_wait_time_ms=" << to_string(topic_update_tbl_max_wait_time_ms);
  out << ", " << "catalog_max_lock_skipped_topic_updates=" << to_string(catalog_max_lock_skipped_topic_updates);
  out << ", " << "saml2_keystore_path=" << to_string(saml2_keystore_path);
  out << ", " << "saml2_keystore_password=" << to_string(saml2_keystore_password);
  out << ", " << "saml2_private_key_password=" << to_string(saml2_private_key_password);
  out << ", " << "saml2_idp_metadata=" << to_string(saml2_idp_metadata);
  out << ", " << "saml2_sp_entity_id=" << to_string(saml2_sp_entity_id);
  out << ", " << "saml2_sp_callback_url=" << to_string(saml2_sp_callback_url);
  out << ", " << "saml2_want_assertations_signed=" << to_string(saml2_want_assertations_signed);
  out << ", " << "saml2_sign_requests=" << to_string(saml2_sign_requests);
  out << ", " << "saml2_callback_token_ttl=" << to_string(saml2_callback_token_ttl);
  out << ", " << "saml2_group_attribute_name=" << to_string(saml2_group_attribute_name);
  out << ", " << "saml2_group_filter=" << to_string(saml2_group_filter);
  out << ", " << "saml2_ee_test_mode=" << to_string(saml2_ee_test_mode);
  out << ", " << "scratch_dirs=" << to_string(scratch_dirs);
  out << ", " << "enable_row_filtering=" << to_string(enable_row_filtering);
  out << ", " << "max_wait_time_for_sync_ddl_s=" << to_string(max_wait_time_for_sync_ddl_s);
  out << ", " << "allow_ordinals_in_having=" << to_string(allow_ordinals_in_having);
  out << ", " << "start_hms_server=" << to_string(start_hms_server);
  out << ", " << "hms_port=" << to_string(hms_port);
  out << ", " << "fallback_to_hms_on_errors=" << to_string(fallback_to_hms_on_errors);
  out << ", " << "enable_catalogd_hms_cache=" << to_string(enable_catalogd_hms_cache);
  out << ", " << "kudu_sasl_protocol_name=" << to_string(kudu_sasl_protocol_name);
  out << ", " << "warn_catalog_response_size_mb=" << to_string(warn_catalog_response_size_mb);
  out << ", " << "warn_catalog_response_duration_s=" << to_string(warn_catalog_response_duration_s);
  out << ", " << "invalidate_hms_cache_on_ddls=" << to_string(invalidate_hms_cache_on_ddls);
  out << ", " << "startup_filesystem_check_directories=" << to_string(startup_filesystem_check_directories);
  out << ", " << "hms_event_incremental_refresh_transactional_table=" << to_string(hms_event_incremental_refresh_transactional_table);
  out << ", " << "enable_shell_based_groups_mapping_support=" << to_string(enable_shell_based_groups_mapping_support);
  out << ", " << "auto_check_compaction=" << to_string(auto_check_compaction);
  out << ")";
}

} // namespace
