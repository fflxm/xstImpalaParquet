/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "beeswax_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace beeswax {

int _kQueryStateValues[] = {
  QueryState::CREATED,
  QueryState::INITIALIZED,
  QueryState::COMPILED,
  QueryState::RUNNING,
  QueryState::FINISHED,
  QueryState::EXCEPTION
};
const char* _kQueryStateNames[] = {
  "CREATED",
  "INITIALIZED",
  "COMPILED",
  "RUNNING",
  "FINISHED",
  "EXCEPTION"
};
const std::map<int, const char*> _QueryState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kQueryStateValues, _kQueryStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const QueryState::type& val) {
  std::map<int, const char*>::const_iterator it = _QueryState_VALUES_TO_NAMES.find(val);
  if (it != _QueryState_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTQueryOptionLevelValues[] = {
  TQueryOptionLevel::REGULAR,
  TQueryOptionLevel::ADVANCED,
  TQueryOptionLevel::DEVELOPMENT,
  TQueryOptionLevel::DEPRECATED,
  TQueryOptionLevel::REMOVED
};
const char* _kTQueryOptionLevelNames[] = {
  "REGULAR",
  "ADVANCED",
  "DEVELOPMENT",
  "DEPRECATED",
  "REMOVED"
};
const std::map<int, const char*> _TQueryOptionLevel_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTQueryOptionLevelValues, _kTQueryOptionLevelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TQueryOptionLevel::type& val) {
  std::map<int, const char*>::const_iterator it = _TQueryOptionLevel_VALUES_TO_NAMES.find(val);
  if (it != _TQueryOptionLevel_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


Query::~Query() throw() {
}


void Query::__set_query(const std::string& val) {
  this->query = val;
}

void Query::__set_configuration(const std::vector<std::string> & val) {
  this->configuration = val;
}

void Query::__set_hadoop_user(const std::string& val) {
  this->hadoop_user = val;
}
std::ostream& operator<<(std::ostream& out, const Query& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Query &a, Query &b) {
  using ::std::swap;
  swap(a.query, b.query);
  swap(a.configuration, b.configuration);
  swap(a.hadoop_user, b.hadoop_user);
  swap(a.__isset, b.__isset);
}

Query::Query(const Query& other6) {
  query = other6.query;
  configuration = other6.configuration;
  hadoop_user = other6.hadoop_user;
  __isset = other6.__isset;
}
Query::Query( Query&& other7) {
  query = std::move(other7.query);
  configuration = std::move(other7.configuration);
  hadoop_user = std::move(other7.hadoop_user);
  __isset = std::move(other7.__isset);
}
Query& Query::operator=(const Query& other8) {
  query = other8.query;
  configuration = other8.configuration;
  hadoop_user = other8.hadoop_user;
  __isset = other8.__isset;
  return *this;
}
Query& Query::operator=(Query&& other9) {
  query = std::move(other9.query);
  configuration = std::move(other9.configuration);
  hadoop_user = std::move(other9.hadoop_user);
  __isset = std::move(other9.__isset);
  return *this;
}
void Query::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Query(";
  out << "query=" << to_string(query);
  out << ", " << "configuration=" << to_string(configuration);
  out << ", " << "hadoop_user=" << to_string(hadoop_user);
  out << ")";
}


QueryHandle::~QueryHandle() throw() {
}


void QueryHandle::__set_id(const std::string& val) {
  this->id = val;
}

void QueryHandle::__set_log_context(const LogContextId& val) {
  this->log_context = val;
}
std::ostream& operator<<(std::ostream& out, const QueryHandle& obj)
{
  obj.printTo(out);
  return out;
}


void swap(QueryHandle &a, QueryHandle &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.log_context, b.log_context);
  swap(a.__isset, b.__isset);
}

QueryHandle::QueryHandle(const QueryHandle& other10) {
  id = other10.id;
  log_context = other10.log_context;
  __isset = other10.__isset;
}
QueryHandle::QueryHandle( QueryHandle&& other11) {
  id = std::move(other11.id);
  log_context = std::move(other11.log_context);
  __isset = std::move(other11.__isset);
}
QueryHandle& QueryHandle::operator=(const QueryHandle& other12) {
  id = other12.id;
  log_context = other12.log_context;
  __isset = other12.__isset;
  return *this;
}
QueryHandle& QueryHandle::operator=(QueryHandle&& other13) {
  id = std::move(other13.id);
  log_context = std::move(other13.log_context);
  __isset = std::move(other13.__isset);
  return *this;
}
void QueryHandle::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryHandle(";
  out << "id=" << to_string(id);
  out << ", " << "log_context=" << to_string(log_context);
  out << ")";
}


QueryExplanation::~QueryExplanation() throw() {
}


void QueryExplanation::__set_textual(const std::string& val) {
  this->textual = val;
}
std::ostream& operator<<(std::ostream& out, const QueryExplanation& obj)
{
  obj.printTo(out);
  return out;
}


void swap(QueryExplanation &a, QueryExplanation &b) {
  using ::std::swap;
  swap(a.textual, b.textual);
  swap(a.__isset, b.__isset);
}

QueryExplanation::QueryExplanation(const QueryExplanation& other14) {
  textual = other14.textual;
  __isset = other14.__isset;
}
QueryExplanation::QueryExplanation( QueryExplanation&& other15) {
  textual = std::move(other15.textual);
  __isset = std::move(other15.__isset);
}
QueryExplanation& QueryExplanation::operator=(const QueryExplanation& other16) {
  textual = other16.textual;
  __isset = other16.__isset;
  return *this;
}
QueryExplanation& QueryExplanation::operator=(QueryExplanation&& other17) {
  textual = std::move(other17.textual);
  __isset = std::move(other17.__isset);
  return *this;
}
void QueryExplanation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryExplanation(";
  out << "textual=" << to_string(textual);
  out << ")";
}


Results::~Results() throw() {
}


void Results::__set_ready(const bool val) {
  this->ready = val;
}

void Results::__set_columns(const std::vector<std::string> & val) {
  this->columns = val;
}

void Results::__set_data(const std::vector<std::string> & val) {
  this->data = val;
}

void Results::__set_start_row(const int64_t val) {
  this->start_row = val;
}

void Results::__set_has_more(const bool val) {
  this->has_more = val;
}
std::ostream& operator<<(std::ostream& out, const Results& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Results &a, Results &b) {
  using ::std::swap;
  swap(a.ready, b.ready);
  swap(a.columns, b.columns);
  swap(a.data, b.data);
  swap(a.start_row, b.start_row);
  swap(a.has_more, b.has_more);
  swap(a.__isset, b.__isset);
}

Results::Results(const Results& other30) {
  ready = other30.ready;
  columns = other30.columns;
  data = other30.data;
  start_row = other30.start_row;
  has_more = other30.has_more;
  __isset = other30.__isset;
}
Results::Results( Results&& other31) {
  ready = std::move(other31.ready);
  columns = std::move(other31.columns);
  data = std::move(other31.data);
  start_row = std::move(other31.start_row);
  has_more = std::move(other31.has_more);
  __isset = std::move(other31.__isset);
}
Results& Results::operator=(const Results& other32) {
  ready = other32.ready;
  columns = other32.columns;
  data = other32.data;
  start_row = other32.start_row;
  has_more = other32.has_more;
  __isset = other32.__isset;
  return *this;
}
Results& Results::operator=(Results&& other33) {
  ready = std::move(other33.ready);
  columns = std::move(other33.columns);
  data = std::move(other33.data);
  start_row = std::move(other33.start_row);
  has_more = std::move(other33.has_more);
  __isset = std::move(other33.__isset);
  return *this;
}
void Results::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Results(";
  out << "ready=" << to_string(ready);
  out << ", " << "columns=" << to_string(columns);
  out << ", " << "data=" << to_string(data);
  out << ", " << "start_row=" << to_string(start_row);
  out << ", " << "has_more=" << to_string(has_more);
  out << ")";
}


ResultsMetadata::~ResultsMetadata() throw() {
}


void ResultsMetadata::__set_schema(const  ::Apache::Hadoop::Hive::Schema& val) {
  this->schema = val;
}

void ResultsMetadata::__set_table_dir(const std::string& val) {
  this->table_dir = val;
}

void ResultsMetadata::__set_in_tablename(const std::string& val) {
  this->in_tablename = val;
}

void ResultsMetadata::__set_delim(const std::string& val) {
  this->delim = val;
}
std::ostream& operator<<(std::ostream& out, const ResultsMetadata& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ResultsMetadata &a, ResultsMetadata &b) {
  using ::std::swap;
  swap(a.schema, b.schema);
  swap(a.table_dir, b.table_dir);
  swap(a.in_tablename, b.in_tablename);
  swap(a.delim, b.delim);
  swap(a.__isset, b.__isset);
}

ResultsMetadata::ResultsMetadata(const ResultsMetadata& other34) {
  schema = other34.schema;
  table_dir = other34.table_dir;
  in_tablename = other34.in_tablename;
  delim = other34.delim;
  __isset = other34.__isset;
}
ResultsMetadata::ResultsMetadata( ResultsMetadata&& other35) {
  schema = std::move(other35.schema);
  table_dir = std::move(other35.table_dir);
  in_tablename = std::move(other35.in_tablename);
  delim = std::move(other35.delim);
  __isset = std::move(other35.__isset);
}
ResultsMetadata& ResultsMetadata::operator=(const ResultsMetadata& other36) {
  schema = other36.schema;
  table_dir = other36.table_dir;
  in_tablename = other36.in_tablename;
  delim = other36.delim;
  __isset = other36.__isset;
  return *this;
}
ResultsMetadata& ResultsMetadata::operator=(ResultsMetadata&& other37) {
  schema = std::move(other37.schema);
  table_dir = std::move(other37.table_dir);
  in_tablename = std::move(other37.in_tablename);
  delim = std::move(other37.delim);
  __isset = std::move(other37.__isset);
  return *this;
}
void ResultsMetadata::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResultsMetadata(";
  out << "schema=" << to_string(schema);
  out << ", " << "table_dir=" << to_string(table_dir);
  out << ", " << "in_tablename=" << to_string(in_tablename);
  out << ", " << "delim=" << to_string(delim);
  out << ")";
}


BeeswaxException::~BeeswaxException() throw() {
}


void BeeswaxException::__set_message(const std::string& val) {
  this->message = val;
}

void BeeswaxException::__set_log_context(const LogContextId& val) {
  this->log_context = val;
}

void BeeswaxException::__set_handle(const QueryHandle& val) {
  this->handle = val;
}

void BeeswaxException::__set_errorCode(const int32_t val) {
  this->errorCode = val;
__isset.errorCode = true;
}

void BeeswaxException::__set_SQLState(const std::string& val) {
  this->SQLState = val;
__isset.SQLState = true;
}
std::ostream& operator<<(std::ostream& out, const BeeswaxException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(BeeswaxException &a, BeeswaxException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.log_context, b.log_context);
  swap(a.handle, b.handle);
  swap(a.errorCode, b.errorCode);
  swap(a.SQLState, b.SQLState);
  swap(a.__isset, b.__isset);
}

BeeswaxException::BeeswaxException(const BeeswaxException& other38) : TException() {
  message = other38.message;
  log_context = other38.log_context;
  handle = other38.handle;
  errorCode = other38.errorCode;
  SQLState = other38.SQLState;
  __isset = other38.__isset;
}
BeeswaxException::BeeswaxException( BeeswaxException&& other39) : TException() {
  message = std::move(other39.message);
  log_context = std::move(other39.log_context);
  handle = std::move(other39.handle);
  errorCode = std::move(other39.errorCode);
  SQLState = std::move(other39.SQLState);
  __isset = std::move(other39.__isset);
}
BeeswaxException& BeeswaxException::operator=(const BeeswaxException& other40) {
  message = other40.message;
  log_context = other40.log_context;
  handle = other40.handle;
  errorCode = other40.errorCode;
  SQLState = other40.SQLState;
  __isset = other40.__isset;
  return *this;
}
BeeswaxException& BeeswaxException::operator=(BeeswaxException&& other41) {
  message = std::move(other41.message);
  log_context = std::move(other41.log_context);
  handle = std::move(other41.handle);
  errorCode = std::move(other41.errorCode);
  SQLState = std::move(other41.SQLState);
  __isset = std::move(other41.__isset);
  return *this;
}
void BeeswaxException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BeeswaxException(";
  out << "message=" << to_string(message);
  out << ", " << "log_context=" << to_string(log_context);
  out << ", " << "handle=" << to_string(handle);
  out << ", " << "errorCode="; (__isset.errorCode ? (out << to_string(errorCode)) : (out << "<null>"));
  out << ", " << "SQLState="; (__isset.SQLState ? (out << to_string(SQLState)) : (out << "<null>"));
  out << ")";
}

const char* BeeswaxException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: BeeswaxException";
  }
}


QueryNotFoundException::~QueryNotFoundException() throw() {
}

std::ostream& operator<<(std::ostream& out, const QueryNotFoundException& obj)
{
  obj.printTo(out);
  return out;
}


void swap(QueryNotFoundException &a, QueryNotFoundException &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

QueryNotFoundException::QueryNotFoundException(const QueryNotFoundException& other42) : TException() {
  (void) other42;
}
QueryNotFoundException::QueryNotFoundException( QueryNotFoundException&& other43) : TException() {
  (void) other43;
}
QueryNotFoundException& QueryNotFoundException::operator=(const QueryNotFoundException& other44) {
  (void) other44;
  return *this;
}
QueryNotFoundException& QueryNotFoundException::operator=(QueryNotFoundException&& other45) {
  (void) other45;
  return *this;
}
void QueryNotFoundException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryNotFoundException(";
  out << ")";
}

const char* QueryNotFoundException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: QueryNotFoundException";
  }
}


ConfigVariable::~ConfigVariable() throw() {
}


void ConfigVariable::__set_key(const std::string& val) {
  this->key = val;
}

void ConfigVariable::__set_value(const std::string& val) {
  this->value = val;
}

void ConfigVariable::__set_description(const std::string& val) {
  this->description = val;
}

void ConfigVariable::__set_level(const TQueryOptionLevel::type val) {
  this->level = val;
__isset.level = true;
}
std::ostream& operator<<(std::ostream& out, const ConfigVariable& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ConfigVariable &a, ConfigVariable &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.description, b.description);
  swap(a.level, b.level);
  swap(a.__isset, b.__isset);
}

ConfigVariable::ConfigVariable(const ConfigVariable& other47) {
  key = other47.key;
  value = other47.value;
  description = other47.description;
  level = other47.level;
  __isset = other47.__isset;
}
ConfigVariable::ConfigVariable( ConfigVariable&& other48) {
  key = std::move(other48.key);
  value = std::move(other48.value);
  description = std::move(other48.description);
  level = std::move(other48.level);
  __isset = std::move(other48.__isset);
}
ConfigVariable& ConfigVariable::operator=(const ConfigVariable& other49) {
  key = other49.key;
  value = other49.value;
  description = other49.description;
  level = other49.level;
  __isset = other49.__isset;
  return *this;
}
ConfigVariable& ConfigVariable::operator=(ConfigVariable&& other50) {
  key = std::move(other50.key);
  value = std::move(other50.value);
  description = std::move(other50.description);
  level = std::move(other50.level);
  __isset = std::move(other50.__isset);
  return *this;
}
void ConfigVariable::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConfigVariable(";
  out << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ", " << "description=" << to_string(description);
  out << ", " << "level="; (__isset.level ? (out << to_string(level)) : (out << "<null>"));
  out << ")";
}

} // namespace
