/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MetricDefs_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {


TMetricDef::~TMetricDef() throw() {
}


void TMetricDef::__set_key(const std::string& val) {
  this->key = val;
__isset.key = true;
}

void TMetricDef::__set_kind(const  ::impala::TMetricKind::type val) {
  this->kind = val;
__isset.kind = true;
}

void TMetricDef::__set_units(const  ::impala::TUnit::type val) {
  this->units = val;
__isset.units = true;
}

void TMetricDef::__set_contexts(const std::vector<std::string> & val) {
  this->contexts = val;
__isset.contexts = true;
}

void TMetricDef::__set_label(const std::string& val) {
  this->label = val;
__isset.label = true;
}

void TMetricDef::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}
std::ostream& operator<<(std::ostream& out, const TMetricDef& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TMetricDef &a, TMetricDef &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.kind, b.kind);
  swap(a.units, b.units);
  swap(a.contexts, b.contexts);
  swap(a.label, b.label);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

TMetricDef::TMetricDef(const TMetricDef& other8) {
  key = other8.key;
  kind = other8.kind;
  units = other8.units;
  contexts = other8.contexts;
  label = other8.label;
  description = other8.description;
  __isset = other8.__isset;
}
TMetricDef::TMetricDef( TMetricDef&& other9) {
  key = std::move(other9.key);
  kind = std::move(other9.kind);
  units = std::move(other9.units);
  contexts = std::move(other9.contexts);
  label = std::move(other9.label);
  description = std::move(other9.description);
  __isset = std::move(other9.__isset);
}
TMetricDef& TMetricDef::operator=(const TMetricDef& other10) {
  key = other10.key;
  kind = other10.kind;
  units = other10.units;
  contexts = other10.contexts;
  label = other10.label;
  description = other10.description;
  __isset = other10.__isset;
  return *this;
}
TMetricDef& TMetricDef::operator=(TMetricDef&& other11) {
  key = std::move(other11.key);
  kind = std::move(other11.kind);
  units = std::move(other11.units);
  contexts = std::move(other11.contexts);
  label = std::move(other11.label);
  description = std::move(other11.description);
  __isset = std::move(other11.__isset);
  return *this;
}
void TMetricDef::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TMetricDef(";
  out << "key="; (__isset.key ? (out << to_string(key)) : (out << "<null>"));
  out << ", " << "kind="; (__isset.kind ? (out << to_string(kind)) : (out << "<null>"));
  out << ", " << "units="; (__isset.units ? (out << to_string(units)) : (out << "<null>"));
  out << ", " << "contexts="; (__isset.contexts ? (out << to_string(contexts)) : (out << "<null>"));
  out << ", " << "label="; (__isset.label ? (out << to_string(label)) : (out << "<null>"));
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ")";
}

} // namespace
