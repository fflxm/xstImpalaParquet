/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Logging_TYPES_H
#define Logging_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace impala {

struct TLogLevel {
  enum type {
    VLOG_3 = 0,
    VLOG_2 = 1,
    VLOG = 2,
    INFO = 3,
    WARN = 4,
    ERROR = 5,
    FATAL = 6
  };
};

extern const std::map<int, const char*> _TLogLevel_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TLogLevel::type& val);

class TSetJavaLogLevelParams;

class TGetJavaLogLevelsResult;


class TSetJavaLogLevelParams {
 public:

  TSetJavaLogLevelParams(const TSetJavaLogLevelParams&);
  TSetJavaLogLevelParams(TSetJavaLogLevelParams&&);
  TSetJavaLogLevelParams& operator=(const TSetJavaLogLevelParams&);
  TSetJavaLogLevelParams& operator=(TSetJavaLogLevelParams&&);
  TSetJavaLogLevelParams() : class_name(), log_level() {
  }

  virtual ~TSetJavaLogLevelParams() throw();
  std::string class_name;
  std::string log_level;

  void __set_class_name(const std::string& val);

  void __set_log_level(const std::string& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSetJavaLogLevelParams &a, TSetJavaLogLevelParams &b);

std::ostream& operator<<(std::ostream& out, const TSetJavaLogLevelParams& obj);


class TGetJavaLogLevelsResult {
 public:

  TGetJavaLogLevelsResult(const TGetJavaLogLevelsResult&);
  TGetJavaLogLevelsResult(TGetJavaLogLevelsResult&&);
  TGetJavaLogLevelsResult& operator=(const TGetJavaLogLevelsResult&);
  TGetJavaLogLevelsResult& operator=(TGetJavaLogLevelsResult&&);
  TGetJavaLogLevelsResult() {
  }

  virtual ~TGetJavaLogLevelsResult() throw();
  std::vector<std::string>  log_levels;

  void __set_log_levels(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGetJavaLogLevelsResult &a, TGetJavaLogLevelsResult &b);

std::ostream& operator<<(std::ostream& out, const TGetJavaLogLevelsResult& obj);

} // namespace

#include "Logging_types.tcc"

#endif
