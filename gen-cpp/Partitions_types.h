/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Partitions_TYPES_H
#define Partitions_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Exprs_types.h"


namespace impala {

struct TPartitionType {
  enum type {
    UNPARTITIONED = 0,
    RANDOM = 1,
    HASH_PARTITIONED = 2,
    RANGE_PARTITIONED = 3,
    KUDU = 4
  };
};

extern const std::map<int, const char*> _TPartitionType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TPartitionType::type& val);

class TDataPartition;

typedef struct _TDataPartition__isset {
  _TDataPartition__isset() : partition_exprs(false) {}
  bool partition_exprs :1;
} _TDataPartition__isset;

class TDataPartition {
 public:

  TDataPartition(const TDataPartition&);
  TDataPartition(TDataPartition&&);
  TDataPartition& operator=(const TDataPartition&);
  TDataPartition& operator=(TDataPartition&&);
  TDataPartition() : type((TPartitionType::type)0) {
  }

  virtual ~TDataPartition() throw();
  TPartitionType::type type;
  std::vector< ::impala::TExpr>  partition_exprs;

  _TDataPartition__isset __isset;

  void __set_type(const TPartitionType::type val);

  void __set_partition_exprs(const std::vector< ::impala::TExpr> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDataPartition &a, TDataPartition &b);

std::ostream& operator<<(std::ostream& out, const TDataPartition& obj);

} // namespace

#include "Partitions_types.tcc"

#endif
