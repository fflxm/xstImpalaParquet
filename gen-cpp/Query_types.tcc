/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Query_TYPES_TCC
#define Query_TYPES_TCC

#include "Types_types.tcc"
#include "PlanNodes_types.tcc"
#include "Planner_types.tcc"
#include "Descriptors_types.tcc"
#include "Results_types.tcc"
#include "CatalogObjects_types.tcc"
#include "LineageGraph_types.tcc"
#include "Query_types.h"

namespace impala {

template <class Protocol_>
uint32_t TQueryOptions::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->abort_on_error);
          this->__isset.abort_on_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_errors);
          this->__isset.max_errors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable_codegen);
          this->__isset.disable_codegen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->batch_size);
          this->__isset.batch_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_nodes);
          this->__isset.num_nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max_scan_range_length);
          this->__isset.max_scan_range_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_scanner_threads);
          this->__isset.num_scanner_threads = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->debug_action);
          this->__isset.debug_action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mem_limit);
          this->__isset.mem_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->compression_codec.read(iprot);
          this->__isset.compression_codec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hbase_caching);
          this->__isset.hbase_caching = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hbase_cache_blocks);
          this->__isset.hbase_cache_blocks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parquet_file_size);
          this->__isset.parquet_file_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->explain_level = ( ::impala::TExplainLevel::type)ecast0;
          this->__isset.explain_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->sync_ddl);
          this->__isset.sync_ddl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->request_pool);
          this->__isset.request_pool = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable_outermost_topn);
          this->__isset.disable_outermost_topn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->query_timeout_s);
          this->__isset.query_timeout_s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->buffer_pool_limit);
          this->__isset.buffer_pool_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->appx_count_distinct);
          this->__isset.appx_count_distinct = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable_unsafe_spills);
          this->__isset.disable_unsafe_spills = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exec_single_node_rows_threshold);
          this->__isset.exec_single_node_rows_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->optimize_partition_key_scans);
          this->__isset.optimize_partition_key_scans = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->replica_preference = ( ::impala::TReplicaPreference::type)ecast1;
          this->__isset.replica_preference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->schedule_random_replica);
          this->__isset.schedule_random_replica = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable_streaming_preaggregations);
          this->__isset.disable_streaming_preaggregations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->runtime_filter_mode = ( ::impala::TRuntimeFilterMode::type)ecast2;
          this->__isset.runtime_filter_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runtime_bloom_filter_size);
          this->__isset.runtime_bloom_filter_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runtime_filter_wait_time_ms);
          this->__isset.runtime_filter_wait_time_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable_row_runtime_filtering);
          this->__isset.disable_row_runtime_filtering = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_num_runtime_filters);
          this->__isset.max_num_runtime_filters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->parquet_annotate_strings_utf8);
          this->__isset.parquet_annotate_strings_utf8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->parquet_fallback_schema_resolution = (TSchemaResolutionStrategy::type)ecast3;
          this->__isset.parquet_fallback_schema_resolution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mt_dop);
          this->__isset.mt_dop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->s3_skip_insert_staging);
          this->__isset.s3_skip_insert_staging = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runtime_filter_min_size);
          this->__isset.runtime_filter_min_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->runtime_filter_max_size);
          this->__isset.runtime_filter_max_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->prefetch_mode = ( ::impala::TPrefetchMode::type)ecast4;
          this->__isset.prefetch_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->strict_mode);
          this->__isset.strict_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scratch_limit);
          this->__isset.scratch_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_expr_rewrites);
          this->__isset.enable_expr_rewrites = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->decimal_v2);
          this->__isset.decimal_v2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->parquet_dictionary_filtering);
          this->__isset.parquet_dictionary_filtering = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->parquet_array_resolution = (TParquetArrayResolution::type)ecast5;
          this->__isset.parquet_array_resolution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->parquet_read_statistics);
          this->__isset.parquet_read_statistics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->default_join_distribution_mode = (TJoinDistributionMode::type)ecast6;
          this->__isset.default_join_distribution_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->disable_codegen_rows_threshold);
          this->__isset.disable_codegen_rows_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 58:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->default_spillable_buffer_size);
          this->__isset.default_spillable_buffer_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->min_spillable_buffer_size);
          this->__isset.min_spillable_buffer_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max_row_size);
          this->__isset.max_row_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idle_session_timeout);
          this->__isset.idle_session_timeout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->compute_stats_min_sample_size);
          this->__isset.compute_stats_min_sample_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exec_time_limit_s);
          this->__isset.exec_time_limit_s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 64:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->shuffle_distinct_exprs);
          this->__isset.shuffle_distinct_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 65:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max_mem_estimate_for_admission);
          this->__isset.max_mem_estimate_for_admission = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 66:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->thread_reservation_limit);
          this->__isset.thread_reservation_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 67:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->thread_reservation_aggregate_limit);
          this->__isset.thread_reservation_aggregate_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 68:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->kudu_read_mode = (TKuduReadMode::type)ecast7;
          this->__isset.kudu_read_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 69:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allow_erasure_coded_files);
          this->__isset.allow_erasure_coded_files = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timezone);
          this->__isset.timezone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scan_bytes_limit);
          this->__isset.scan_bytes_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cpu_limit_s);
          this->__isset.cpu_limit_s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 73:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->topn_bytes_limit);
          this->__isset.topn_bytes_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 74:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->client_identifier);
          this->__isset.client_identifier = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 75:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->resource_trace_ratio);
          this->__isset.resource_trace_ratio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 76:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_remote_executor_candidates);
          this->__isset.num_remote_executor_candidates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 77:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->num_rows_produced_limit);
          this->__isset.num_rows_produced_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 78:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->planner_testcase_mode);
          this->__isset.planner_testcase_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 79:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->default_file_format = ( ::impala::THdfsFileFormat::type)ecast8;
          this->__isset.default_file_format = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->parquet_timestamp_type = (TParquetTimestampType::type)ecast9;
          this->__isset.parquet_timestamp_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->parquet_read_page_index);
          this->__isset.parquet_read_page_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 82:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->parquet_write_page_index);
          this->__isset.parquet_write_page_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 83:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->parquet_page_row_count_limit);
          this->__isset.parquet_page_row_count_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 84:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable_hdfs_num_rows_estimate);
          this->__isset.disable_hdfs_num_rows_estimate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 85:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->default_hints_insert_statement);
          this->__isset.default_hints_insert_statement = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 86:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->spool_query_results);
          this->__isset.spool_query_results = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 87:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->default_transactional_type = (TTransactionalType::type)ecast10;
          this->__isset.default_transactional_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 88:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->statement_expression_limit);
          this->__isset.statement_expression_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 89:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_statement_length_bytes);
          this->__isset.max_statement_length_bytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable_data_cache);
          this->__isset.disable_data_cache = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 91:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max_result_spooling_mem);
          this->__isset.max_result_spooling_mem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 92:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max_spilled_result_spooling_mem);
          this->__isset.max_spilled_result_spooling_mem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 93:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable_hbase_num_rows_estimate);
          this->__isset.disable_hbase_num_rows_estimate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 94:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fetch_rows_timeout_ms);
          this->__isset.fetch_rows_timeout_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 95:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->now_string);
          this->__isset.now_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 96:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parquet_object_store_split_size);
          this->__isset.parquet_object_store_split_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 97:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mem_limit_executors);
          this->__isset.mem_limit_executors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 98:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->broadcast_bytes_limit);
          this->__isset.broadcast_bytes_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 99:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->preagg_bytes_limit);
          this->__isset.preagg_bytes_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 100:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_cnf_rewrites);
          this->__isset.enable_cnf_rewrites = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 101:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_cnf_exprs);
          this->__isset.max_cnf_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 102:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->kudu_snapshot_read_timestamp_micros);
          this->__isset.kudu_snapshot_read_timestamp_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 103:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->retry_failed_queries);
          this->__isset.retry_failed_queries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 104:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->enabled_runtime_filter_types = ( ::impala::TEnabledRuntimeFilterTypes::type)ecast11;
          this->__isset.enabled_runtime_filter_types = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 105:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->async_codegen);
          this->__isset.async_codegen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 106:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_distinct_semi_join_optimization);
          this->__isset.enable_distinct_semi_join_optimization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 107:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sort_run_bytes_limit);
          this->__isset.sort_run_bytes_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 108:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_fs_writers);
          this->__isset.max_fs_writers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 109:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->refresh_updated_hms_partitions);
          this->__isset.refresh_updated_hms_partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 110:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->spool_all_results_for_retries);
          this->__isset.spool_all_results_for_retries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 111:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->runtime_filter_error_rate);
          this->__isset.runtime_filter_error_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 112:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_local_tz_for_unix_timestamp_conversions);
          this->__isset.use_local_tz_for_unix_timestamp_conversions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 113:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->convert_legacy_hive_parquet_utc_timestamps);
          this->__isset.convert_legacy_hive_parquet_utc_timestamps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 114:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_outer_join_to_inner_transformation);
          this->__isset.enable_outer_join_to_inner_transformation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 115:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->targeted_kudu_scan_range_length);
          this->__isset.targeted_kudu_scan_range_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 116:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->report_skew_limit);
          this->__isset.report_skew_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 117:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->optimize_simple_limit);
          this->__isset.optimize_simple_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 118:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_dop_for_costing);
          this->__isset.use_dop_for_costing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 119:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->broadcast_to_partition_factor);
          this->__isset.broadcast_to_partition_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 120:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->join_rows_produced_limit);
          this->__isset.join_rows_produced_limit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 121:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->utf8_mode);
          this->__isset.utf8_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 122:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->analytic_rank_pushdown_threshold);
          this->__isset.analytic_rank_pushdown_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 123:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->minmax_filter_threshold);
          this->__isset.minmax_filter_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 124:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->minmax_filtering_level = ( ::impala::TMinmaxFilteringLevel::type)ecast12;
          this->__isset.minmax_filtering_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 125:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->compute_column_minmax_stats);
          this->__isset.compute_column_minmax_stats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 126:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->show_column_minmax_stats);
          this->__isset.show_column_minmax_stats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 127:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->default_ndv_scale);
          this->__isset.default_ndv_scale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 128:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->kudu_replica_selection = (TKuduReplicaSelection::type)ecast13;
          this->__isset.kudu_replica_selection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 129:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->delete_stats_in_truncate);
          this->__isset.delete_stats_in_truncate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 130:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->parquet_bloom_filtering);
          this->__isset.parquet_bloom_filtering = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 131:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->minmax_filter_sorted_columns);
          this->__isset.minmax_filter_sorted_columns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 132:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->minmax_filter_fast_code_path = (TMinmaxFilterFastCodePathMode::type)ecast14;
          this->__isset.minmax_filter_fast_code_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 133:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_kudu_transaction);
          this->__isset.enable_kudu_transaction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 134:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->minmax_filter_partition_columns);
          this->__isset.minmax_filter_partition_columns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 135:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast15;
          xfer += iprot->readI32(ecast15);
          this->parquet_bloom_filter_write = (TParquetBloomFilterWrite::type)ecast15;
          this->__isset.parquet_bloom_filter_write = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 136:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->orc_read_statistics);
          this->__isset.orc_read_statistics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 137:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_async_ddl_execution);
          this->__isset.enable_async_ddl_execution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 138:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_async_load_data_execution);
          this->__isset.enable_async_load_data_execution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 139:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->parquet_late_materialization_threshold);
          this->__isset.parquet_late_materialization_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t TQueryOptions::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TQueryOptions");

  if (this->__isset.abort_on_error) {
    xfer += oprot->writeFieldBegin("abort_on_error", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->abort_on_error);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_errors) {
    xfer += oprot->writeFieldBegin("max_errors", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->max_errors);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disable_codegen) {
    xfer += oprot->writeFieldBegin("disable_codegen", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->disable_codegen);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.batch_size) {
    xfer += oprot->writeFieldBegin("batch_size", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->batch_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.num_nodes) {
    xfer += oprot->writeFieldBegin("num_nodes", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->num_nodes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_scan_range_length) {
    xfer += oprot->writeFieldBegin("max_scan_range_length", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->max_scan_range_length);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.num_scanner_threads) {
    xfer += oprot->writeFieldBegin("num_scanner_threads", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->num_scanner_threads);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.debug_action) {
    xfer += oprot->writeFieldBegin("debug_action", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->debug_action);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mem_limit) {
    xfer += oprot->writeFieldBegin("mem_limit", ::apache::thrift::protocol::T_I64, 12);
    xfer += oprot->writeI64(this->mem_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.compression_codec) {
    xfer += oprot->writeFieldBegin("compression_codec", ::apache::thrift::protocol::T_STRUCT, 14);
    xfer += this->compression_codec.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hbase_caching) {
    xfer += oprot->writeFieldBegin("hbase_caching", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32(this->hbase_caching);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hbase_cache_blocks) {
    xfer += oprot->writeFieldBegin("hbase_cache_blocks", ::apache::thrift::protocol::T_BOOL, 16);
    xfer += oprot->writeBool(this->hbase_cache_blocks);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_file_size) {
    xfer += oprot->writeFieldBegin("parquet_file_size", ::apache::thrift::protocol::T_I64, 17);
    xfer += oprot->writeI64(this->parquet_file_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.explain_level) {
    xfer += oprot->writeFieldBegin("explain_level", ::apache::thrift::protocol::T_I32, 18);
    xfer += oprot->writeI32((int32_t)this->explain_level);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sync_ddl) {
    xfer += oprot->writeFieldBegin("sync_ddl", ::apache::thrift::protocol::T_BOOL, 19);
    xfer += oprot->writeBool(this->sync_ddl);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.request_pool) {
    xfer += oprot->writeFieldBegin("request_pool", ::apache::thrift::protocol::T_STRING, 20);
    xfer += oprot->writeString(this->request_pool);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disable_outermost_topn) {
    xfer += oprot->writeFieldBegin("disable_outermost_topn", ::apache::thrift::protocol::T_BOOL, 24);
    xfer += oprot->writeBool(this->disable_outermost_topn);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.query_timeout_s) {
    xfer += oprot->writeFieldBegin("query_timeout_s", ::apache::thrift::protocol::T_I32, 26);
    xfer += oprot->writeI32(this->query_timeout_s);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.buffer_pool_limit) {
    xfer += oprot->writeFieldBegin("buffer_pool_limit", ::apache::thrift::protocol::T_I64, 27);
    xfer += oprot->writeI64(this->buffer_pool_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.appx_count_distinct) {
    xfer += oprot->writeFieldBegin("appx_count_distinct", ::apache::thrift::protocol::T_BOOL, 28);
    xfer += oprot->writeBool(this->appx_count_distinct);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disable_unsafe_spills) {
    xfer += oprot->writeFieldBegin("disable_unsafe_spills", ::apache::thrift::protocol::T_BOOL, 29);
    xfer += oprot->writeBool(this->disable_unsafe_spills);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exec_single_node_rows_threshold) {
    xfer += oprot->writeFieldBegin("exec_single_node_rows_threshold", ::apache::thrift::protocol::T_I32, 31);
    xfer += oprot->writeI32(this->exec_single_node_rows_threshold);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.optimize_partition_key_scans) {
    xfer += oprot->writeFieldBegin("optimize_partition_key_scans", ::apache::thrift::protocol::T_BOOL, 32);
    xfer += oprot->writeBool(this->optimize_partition_key_scans);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.replica_preference) {
    xfer += oprot->writeFieldBegin("replica_preference", ::apache::thrift::protocol::T_I32, 33);
    xfer += oprot->writeI32((int32_t)this->replica_preference);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.schedule_random_replica) {
    xfer += oprot->writeFieldBegin("schedule_random_replica", ::apache::thrift::protocol::T_BOOL, 34);
    xfer += oprot->writeBool(this->schedule_random_replica);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disable_streaming_preaggregations) {
    xfer += oprot->writeFieldBegin("disable_streaming_preaggregations", ::apache::thrift::protocol::T_BOOL, 36);
    xfer += oprot->writeBool(this->disable_streaming_preaggregations);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runtime_filter_mode) {
    xfer += oprot->writeFieldBegin("runtime_filter_mode", ::apache::thrift::protocol::T_I32, 37);
    xfer += oprot->writeI32((int32_t)this->runtime_filter_mode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runtime_bloom_filter_size) {
    xfer += oprot->writeFieldBegin("runtime_bloom_filter_size", ::apache::thrift::protocol::T_I32, 38);
    xfer += oprot->writeI32(this->runtime_bloom_filter_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runtime_filter_wait_time_ms) {
    xfer += oprot->writeFieldBegin("runtime_filter_wait_time_ms", ::apache::thrift::protocol::T_I32, 39);
    xfer += oprot->writeI32(this->runtime_filter_wait_time_ms);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disable_row_runtime_filtering) {
    xfer += oprot->writeFieldBegin("disable_row_runtime_filtering", ::apache::thrift::protocol::T_BOOL, 40);
    xfer += oprot->writeBool(this->disable_row_runtime_filtering);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_num_runtime_filters) {
    xfer += oprot->writeFieldBegin("max_num_runtime_filters", ::apache::thrift::protocol::T_I32, 41);
    xfer += oprot->writeI32(this->max_num_runtime_filters);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_annotate_strings_utf8) {
    xfer += oprot->writeFieldBegin("parquet_annotate_strings_utf8", ::apache::thrift::protocol::T_BOOL, 42);
    xfer += oprot->writeBool(this->parquet_annotate_strings_utf8);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_fallback_schema_resolution) {
    xfer += oprot->writeFieldBegin("parquet_fallback_schema_resolution", ::apache::thrift::protocol::T_I32, 43);
    xfer += oprot->writeI32((int32_t)this->parquet_fallback_schema_resolution);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mt_dop) {
    xfer += oprot->writeFieldBegin("mt_dop", ::apache::thrift::protocol::T_I32, 44);
    xfer += oprot->writeI32(this->mt_dop);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.s3_skip_insert_staging) {
    xfer += oprot->writeFieldBegin("s3_skip_insert_staging", ::apache::thrift::protocol::T_BOOL, 45);
    xfer += oprot->writeBool(this->s3_skip_insert_staging);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runtime_filter_min_size) {
    xfer += oprot->writeFieldBegin("runtime_filter_min_size", ::apache::thrift::protocol::T_I32, 46);
    xfer += oprot->writeI32(this->runtime_filter_min_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runtime_filter_max_size) {
    xfer += oprot->writeFieldBegin("runtime_filter_max_size", ::apache::thrift::protocol::T_I32, 47);
    xfer += oprot->writeI32(this->runtime_filter_max_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.prefetch_mode) {
    xfer += oprot->writeFieldBegin("prefetch_mode", ::apache::thrift::protocol::T_I32, 48);
    xfer += oprot->writeI32((int32_t)this->prefetch_mode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.strict_mode) {
    xfer += oprot->writeFieldBegin("strict_mode", ::apache::thrift::protocol::T_BOOL, 49);
    xfer += oprot->writeBool(this->strict_mode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.scratch_limit) {
    xfer += oprot->writeFieldBegin("scratch_limit", ::apache::thrift::protocol::T_I64, 50);
    xfer += oprot->writeI64(this->scratch_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enable_expr_rewrites) {
    xfer += oprot->writeFieldBegin("enable_expr_rewrites", ::apache::thrift::protocol::T_BOOL, 51);
    xfer += oprot->writeBool(this->enable_expr_rewrites);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.decimal_v2) {
    xfer += oprot->writeFieldBegin("decimal_v2", ::apache::thrift::protocol::T_BOOL, 52);
    xfer += oprot->writeBool(this->decimal_v2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_dictionary_filtering) {
    xfer += oprot->writeFieldBegin("parquet_dictionary_filtering", ::apache::thrift::protocol::T_BOOL, 53);
    xfer += oprot->writeBool(this->parquet_dictionary_filtering);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_array_resolution) {
    xfer += oprot->writeFieldBegin("parquet_array_resolution", ::apache::thrift::protocol::T_I32, 54);
    xfer += oprot->writeI32((int32_t)this->parquet_array_resolution);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_read_statistics) {
    xfer += oprot->writeFieldBegin("parquet_read_statistics", ::apache::thrift::protocol::T_BOOL, 55);
    xfer += oprot->writeBool(this->parquet_read_statistics);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.default_join_distribution_mode) {
    xfer += oprot->writeFieldBegin("default_join_distribution_mode", ::apache::thrift::protocol::T_I32, 56);
    xfer += oprot->writeI32((int32_t)this->default_join_distribution_mode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disable_codegen_rows_threshold) {
    xfer += oprot->writeFieldBegin("disable_codegen_rows_threshold", ::apache::thrift::protocol::T_I32, 57);
    xfer += oprot->writeI32(this->disable_codegen_rows_threshold);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.default_spillable_buffer_size) {
    xfer += oprot->writeFieldBegin("default_spillable_buffer_size", ::apache::thrift::protocol::T_I64, 58);
    xfer += oprot->writeI64(this->default_spillable_buffer_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.min_spillable_buffer_size) {
    xfer += oprot->writeFieldBegin("min_spillable_buffer_size", ::apache::thrift::protocol::T_I64, 59);
    xfer += oprot->writeI64(this->min_spillable_buffer_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_row_size) {
    xfer += oprot->writeFieldBegin("max_row_size", ::apache::thrift::protocol::T_I64, 60);
    xfer += oprot->writeI64(this->max_row_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.idle_session_timeout) {
    xfer += oprot->writeFieldBegin("idle_session_timeout", ::apache::thrift::protocol::T_I32, 61);
    xfer += oprot->writeI32(this->idle_session_timeout);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.compute_stats_min_sample_size) {
    xfer += oprot->writeFieldBegin("compute_stats_min_sample_size", ::apache::thrift::protocol::T_I64, 62);
    xfer += oprot->writeI64(this->compute_stats_min_sample_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exec_time_limit_s) {
    xfer += oprot->writeFieldBegin("exec_time_limit_s", ::apache::thrift::protocol::T_I32, 63);
    xfer += oprot->writeI32(this->exec_time_limit_s);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shuffle_distinct_exprs) {
    xfer += oprot->writeFieldBegin("shuffle_distinct_exprs", ::apache::thrift::protocol::T_BOOL, 64);
    xfer += oprot->writeBool(this->shuffle_distinct_exprs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_mem_estimate_for_admission) {
    xfer += oprot->writeFieldBegin("max_mem_estimate_for_admission", ::apache::thrift::protocol::T_I64, 65);
    xfer += oprot->writeI64(this->max_mem_estimate_for_admission);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.thread_reservation_limit) {
    xfer += oprot->writeFieldBegin("thread_reservation_limit", ::apache::thrift::protocol::T_I32, 66);
    xfer += oprot->writeI32(this->thread_reservation_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.thread_reservation_aggregate_limit) {
    xfer += oprot->writeFieldBegin("thread_reservation_aggregate_limit", ::apache::thrift::protocol::T_I32, 67);
    xfer += oprot->writeI32(this->thread_reservation_aggregate_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kudu_read_mode) {
    xfer += oprot->writeFieldBegin("kudu_read_mode", ::apache::thrift::protocol::T_I32, 68);
    xfer += oprot->writeI32((int32_t)this->kudu_read_mode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.allow_erasure_coded_files) {
    xfer += oprot->writeFieldBegin("allow_erasure_coded_files", ::apache::thrift::protocol::T_BOOL, 69);
    xfer += oprot->writeBool(this->allow_erasure_coded_files);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timezone) {
    xfer += oprot->writeFieldBegin("timezone", ::apache::thrift::protocol::T_STRING, 70);
    xfer += oprot->writeString(this->timezone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.scan_bytes_limit) {
    xfer += oprot->writeFieldBegin("scan_bytes_limit", ::apache::thrift::protocol::T_I64, 71);
    xfer += oprot->writeI64(this->scan_bytes_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cpu_limit_s) {
    xfer += oprot->writeFieldBegin("cpu_limit_s", ::apache::thrift::protocol::T_I64, 72);
    xfer += oprot->writeI64(this->cpu_limit_s);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.topn_bytes_limit) {
    xfer += oprot->writeFieldBegin("topn_bytes_limit", ::apache::thrift::protocol::T_I64, 73);
    xfer += oprot->writeI64(this->topn_bytes_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.client_identifier) {
    xfer += oprot->writeFieldBegin("client_identifier", ::apache::thrift::protocol::T_STRING, 74);
    xfer += oprot->writeString(this->client_identifier);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resource_trace_ratio) {
    xfer += oprot->writeFieldBegin("resource_trace_ratio", ::apache::thrift::protocol::T_DOUBLE, 75);
    xfer += oprot->writeDouble(this->resource_trace_ratio);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.num_remote_executor_candidates) {
    xfer += oprot->writeFieldBegin("num_remote_executor_candidates", ::apache::thrift::protocol::T_I32, 76);
    xfer += oprot->writeI32(this->num_remote_executor_candidates);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.num_rows_produced_limit) {
    xfer += oprot->writeFieldBegin("num_rows_produced_limit", ::apache::thrift::protocol::T_I64, 77);
    xfer += oprot->writeI64(this->num_rows_produced_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.planner_testcase_mode) {
    xfer += oprot->writeFieldBegin("planner_testcase_mode", ::apache::thrift::protocol::T_BOOL, 78);
    xfer += oprot->writeBool(this->planner_testcase_mode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.default_file_format) {
    xfer += oprot->writeFieldBegin("default_file_format", ::apache::thrift::protocol::T_I32, 79);
    xfer += oprot->writeI32((int32_t)this->default_file_format);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_timestamp_type) {
    xfer += oprot->writeFieldBegin("parquet_timestamp_type", ::apache::thrift::protocol::T_I32, 80);
    xfer += oprot->writeI32((int32_t)this->parquet_timestamp_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_read_page_index) {
    xfer += oprot->writeFieldBegin("parquet_read_page_index", ::apache::thrift::protocol::T_BOOL, 81);
    xfer += oprot->writeBool(this->parquet_read_page_index);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_write_page_index) {
    xfer += oprot->writeFieldBegin("parquet_write_page_index", ::apache::thrift::protocol::T_BOOL, 82);
    xfer += oprot->writeBool(this->parquet_write_page_index);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_page_row_count_limit) {
    xfer += oprot->writeFieldBegin("parquet_page_row_count_limit", ::apache::thrift::protocol::T_I32, 83);
    xfer += oprot->writeI32(this->parquet_page_row_count_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disable_hdfs_num_rows_estimate) {
    xfer += oprot->writeFieldBegin("disable_hdfs_num_rows_estimate", ::apache::thrift::protocol::T_BOOL, 84);
    xfer += oprot->writeBool(this->disable_hdfs_num_rows_estimate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.default_hints_insert_statement) {
    xfer += oprot->writeFieldBegin("default_hints_insert_statement", ::apache::thrift::protocol::T_STRING, 85);
    xfer += oprot->writeString(this->default_hints_insert_statement);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spool_query_results) {
    xfer += oprot->writeFieldBegin("spool_query_results", ::apache::thrift::protocol::T_BOOL, 86);
    xfer += oprot->writeBool(this->spool_query_results);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.default_transactional_type) {
    xfer += oprot->writeFieldBegin("default_transactional_type", ::apache::thrift::protocol::T_I32, 87);
    xfer += oprot->writeI32((int32_t)this->default_transactional_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.statement_expression_limit) {
    xfer += oprot->writeFieldBegin("statement_expression_limit", ::apache::thrift::protocol::T_I32, 88);
    xfer += oprot->writeI32(this->statement_expression_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_statement_length_bytes) {
    xfer += oprot->writeFieldBegin("max_statement_length_bytes", ::apache::thrift::protocol::T_I32, 89);
    xfer += oprot->writeI32(this->max_statement_length_bytes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disable_data_cache) {
    xfer += oprot->writeFieldBegin("disable_data_cache", ::apache::thrift::protocol::T_BOOL, 90);
    xfer += oprot->writeBool(this->disable_data_cache);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_result_spooling_mem) {
    xfer += oprot->writeFieldBegin("max_result_spooling_mem", ::apache::thrift::protocol::T_I64, 91);
    xfer += oprot->writeI64(this->max_result_spooling_mem);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_spilled_result_spooling_mem) {
    xfer += oprot->writeFieldBegin("max_spilled_result_spooling_mem", ::apache::thrift::protocol::T_I64, 92);
    xfer += oprot->writeI64(this->max_spilled_result_spooling_mem);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disable_hbase_num_rows_estimate) {
    xfer += oprot->writeFieldBegin("disable_hbase_num_rows_estimate", ::apache::thrift::protocol::T_BOOL, 93);
    xfer += oprot->writeBool(this->disable_hbase_num_rows_estimate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fetch_rows_timeout_ms) {
    xfer += oprot->writeFieldBegin("fetch_rows_timeout_ms", ::apache::thrift::protocol::T_I64, 94);
    xfer += oprot->writeI64(this->fetch_rows_timeout_ms);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.now_string) {
    xfer += oprot->writeFieldBegin("now_string", ::apache::thrift::protocol::T_STRING, 95);
    xfer += oprot->writeString(this->now_string);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_object_store_split_size) {
    xfer += oprot->writeFieldBegin("parquet_object_store_split_size", ::apache::thrift::protocol::T_I64, 96);
    xfer += oprot->writeI64(this->parquet_object_store_split_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mem_limit_executors) {
    xfer += oprot->writeFieldBegin("mem_limit_executors", ::apache::thrift::protocol::T_I64, 97);
    xfer += oprot->writeI64(this->mem_limit_executors);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.broadcast_bytes_limit) {
    xfer += oprot->writeFieldBegin("broadcast_bytes_limit", ::apache::thrift::protocol::T_I64, 98);
    xfer += oprot->writeI64(this->broadcast_bytes_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preagg_bytes_limit) {
    xfer += oprot->writeFieldBegin("preagg_bytes_limit", ::apache::thrift::protocol::T_I64, 99);
    xfer += oprot->writeI64(this->preagg_bytes_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enable_cnf_rewrites) {
    xfer += oprot->writeFieldBegin("enable_cnf_rewrites", ::apache::thrift::protocol::T_BOOL, 100);
    xfer += oprot->writeBool(this->enable_cnf_rewrites);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_cnf_exprs) {
    xfer += oprot->writeFieldBegin("max_cnf_exprs", ::apache::thrift::protocol::T_I32, 101);
    xfer += oprot->writeI32(this->max_cnf_exprs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kudu_snapshot_read_timestamp_micros) {
    xfer += oprot->writeFieldBegin("kudu_snapshot_read_timestamp_micros", ::apache::thrift::protocol::T_I64, 102);
    xfer += oprot->writeI64(this->kudu_snapshot_read_timestamp_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.retry_failed_queries) {
    xfer += oprot->writeFieldBegin("retry_failed_queries", ::apache::thrift::protocol::T_BOOL, 103);
    xfer += oprot->writeBool(this->retry_failed_queries);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enabled_runtime_filter_types) {
    xfer += oprot->writeFieldBegin("enabled_runtime_filter_types", ::apache::thrift::protocol::T_I32, 104);
    xfer += oprot->writeI32((int32_t)this->enabled_runtime_filter_types);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.async_codegen) {
    xfer += oprot->writeFieldBegin("async_codegen", ::apache::thrift::protocol::T_BOOL, 105);
    xfer += oprot->writeBool(this->async_codegen);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enable_distinct_semi_join_optimization) {
    xfer += oprot->writeFieldBegin("enable_distinct_semi_join_optimization", ::apache::thrift::protocol::T_BOOL, 106);
    xfer += oprot->writeBool(this->enable_distinct_semi_join_optimization);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sort_run_bytes_limit) {
    xfer += oprot->writeFieldBegin("sort_run_bytes_limit", ::apache::thrift::protocol::T_I64, 107);
    xfer += oprot->writeI64(this->sort_run_bytes_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_fs_writers) {
    xfer += oprot->writeFieldBegin("max_fs_writers", ::apache::thrift::protocol::T_I32, 108);
    xfer += oprot->writeI32(this->max_fs_writers);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.refresh_updated_hms_partitions) {
    xfer += oprot->writeFieldBegin("refresh_updated_hms_partitions", ::apache::thrift::protocol::T_BOOL, 109);
    xfer += oprot->writeBool(this->refresh_updated_hms_partitions);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spool_all_results_for_retries) {
    xfer += oprot->writeFieldBegin("spool_all_results_for_retries", ::apache::thrift::protocol::T_BOOL, 110);
    xfer += oprot->writeBool(this->spool_all_results_for_retries);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runtime_filter_error_rate) {
    xfer += oprot->writeFieldBegin("runtime_filter_error_rate", ::apache::thrift::protocol::T_DOUBLE, 111);
    xfer += oprot->writeDouble(this->runtime_filter_error_rate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.use_local_tz_for_unix_timestamp_conversions) {
    xfer += oprot->writeFieldBegin("use_local_tz_for_unix_timestamp_conversions", ::apache::thrift::protocol::T_BOOL, 112);
    xfer += oprot->writeBool(this->use_local_tz_for_unix_timestamp_conversions);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.convert_legacy_hive_parquet_utc_timestamps) {
    xfer += oprot->writeFieldBegin("convert_legacy_hive_parquet_utc_timestamps", ::apache::thrift::protocol::T_BOOL, 113);
    xfer += oprot->writeBool(this->convert_legacy_hive_parquet_utc_timestamps);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enable_outer_join_to_inner_transformation) {
    xfer += oprot->writeFieldBegin("enable_outer_join_to_inner_transformation", ::apache::thrift::protocol::T_BOOL, 114);
    xfer += oprot->writeBool(this->enable_outer_join_to_inner_transformation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.targeted_kudu_scan_range_length) {
    xfer += oprot->writeFieldBegin("targeted_kudu_scan_range_length", ::apache::thrift::protocol::T_I64, 115);
    xfer += oprot->writeI64(this->targeted_kudu_scan_range_length);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.report_skew_limit) {
    xfer += oprot->writeFieldBegin("report_skew_limit", ::apache::thrift::protocol::T_DOUBLE, 116);
    xfer += oprot->writeDouble(this->report_skew_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.optimize_simple_limit) {
    xfer += oprot->writeFieldBegin("optimize_simple_limit", ::apache::thrift::protocol::T_BOOL, 117);
    xfer += oprot->writeBool(this->optimize_simple_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.use_dop_for_costing) {
    xfer += oprot->writeFieldBegin("use_dop_for_costing", ::apache::thrift::protocol::T_BOOL, 118);
    xfer += oprot->writeBool(this->use_dop_for_costing);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.broadcast_to_partition_factor) {
    xfer += oprot->writeFieldBegin("broadcast_to_partition_factor", ::apache::thrift::protocol::T_DOUBLE, 119);
    xfer += oprot->writeDouble(this->broadcast_to_partition_factor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.join_rows_produced_limit) {
    xfer += oprot->writeFieldBegin("join_rows_produced_limit", ::apache::thrift::protocol::T_I64, 120);
    xfer += oprot->writeI64(this->join_rows_produced_limit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.utf8_mode) {
    xfer += oprot->writeFieldBegin("utf8_mode", ::apache::thrift::protocol::T_BOOL, 121);
    xfer += oprot->writeBool(this->utf8_mode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.analytic_rank_pushdown_threshold) {
    xfer += oprot->writeFieldBegin("analytic_rank_pushdown_threshold", ::apache::thrift::protocol::T_I64, 122);
    xfer += oprot->writeI64(this->analytic_rank_pushdown_threshold);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minmax_filter_threshold) {
    xfer += oprot->writeFieldBegin("minmax_filter_threshold", ::apache::thrift::protocol::T_DOUBLE, 123);
    xfer += oprot->writeDouble(this->minmax_filter_threshold);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minmax_filtering_level) {
    xfer += oprot->writeFieldBegin("minmax_filtering_level", ::apache::thrift::protocol::T_I32, 124);
    xfer += oprot->writeI32((int32_t)this->minmax_filtering_level);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.compute_column_minmax_stats) {
    xfer += oprot->writeFieldBegin("compute_column_minmax_stats", ::apache::thrift::protocol::T_BOOL, 125);
    xfer += oprot->writeBool(this->compute_column_minmax_stats);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.show_column_minmax_stats) {
    xfer += oprot->writeFieldBegin("show_column_minmax_stats", ::apache::thrift::protocol::T_BOOL, 126);
    xfer += oprot->writeBool(this->show_column_minmax_stats);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.default_ndv_scale) {
    xfer += oprot->writeFieldBegin("default_ndv_scale", ::apache::thrift::protocol::T_I32, 127);
    xfer += oprot->writeI32(this->default_ndv_scale);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kudu_replica_selection) {
    xfer += oprot->writeFieldBegin("kudu_replica_selection", ::apache::thrift::protocol::T_I32, 128);
    xfer += oprot->writeI32((int32_t)this->kudu_replica_selection);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.delete_stats_in_truncate) {
    xfer += oprot->writeFieldBegin("delete_stats_in_truncate", ::apache::thrift::protocol::T_BOOL, 129);
    xfer += oprot->writeBool(this->delete_stats_in_truncate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_bloom_filtering) {
    xfer += oprot->writeFieldBegin("parquet_bloom_filtering", ::apache::thrift::protocol::T_BOOL, 130);
    xfer += oprot->writeBool(this->parquet_bloom_filtering);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minmax_filter_sorted_columns) {
    xfer += oprot->writeFieldBegin("minmax_filter_sorted_columns", ::apache::thrift::protocol::T_BOOL, 131);
    xfer += oprot->writeBool(this->minmax_filter_sorted_columns);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minmax_filter_fast_code_path) {
    xfer += oprot->writeFieldBegin("minmax_filter_fast_code_path", ::apache::thrift::protocol::T_I32, 132);
    xfer += oprot->writeI32((int32_t)this->minmax_filter_fast_code_path);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enable_kudu_transaction) {
    xfer += oprot->writeFieldBegin("enable_kudu_transaction", ::apache::thrift::protocol::T_BOOL, 133);
    xfer += oprot->writeBool(this->enable_kudu_transaction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minmax_filter_partition_columns) {
    xfer += oprot->writeFieldBegin("minmax_filter_partition_columns", ::apache::thrift::protocol::T_BOOL, 134);
    xfer += oprot->writeBool(this->minmax_filter_partition_columns);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_bloom_filter_write) {
    xfer += oprot->writeFieldBegin("parquet_bloom_filter_write", ::apache::thrift::protocol::T_I32, 135);
    xfer += oprot->writeI32((int32_t)this->parquet_bloom_filter_write);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.orc_read_statistics) {
    xfer += oprot->writeFieldBegin("orc_read_statistics", ::apache::thrift::protocol::T_BOOL, 136);
    xfer += oprot->writeBool(this->orc_read_statistics);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enable_async_ddl_execution) {
    xfer += oprot->writeFieldBegin("enable_async_ddl_execution", ::apache::thrift::protocol::T_BOOL, 137);
    xfer += oprot->writeBool(this->enable_async_ddl_execution);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.enable_async_load_data_execution) {
    xfer += oprot->writeFieldBegin("enable_async_load_data_execution", ::apache::thrift::protocol::T_BOOL, 138);
    xfer += oprot->writeBool(this->enable_async_load_data_execution);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parquet_late_materialization_threshold) {
    xfer += oprot->writeFieldBegin("parquet_late_materialization_threshold", ::apache::thrift::protocol::T_I32, 139);
    xfer += oprot->writeI32(this->parquet_late_materialization_threshold);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TClientRequest::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_stmt = false;
  bool isset_query_options = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stmt);
          isset_stmt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->query_options.read(iprot);
          isset_query_options = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->redacted_stmt);
          this->__isset.redacted_stmt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_stmt)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_query_options)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TClientRequest::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TClientRequest");

  xfer += oprot->writeFieldBegin("stmt", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->stmt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("query_options", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->query_options.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.redacted_stmt) {
    xfer += oprot->writeFieldBegin("redacted_stmt", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->redacted_stmt);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TSessionState::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_session_id = false;
  bool isset_session_type = false;
  bool isset_database = false;
  bool isset_connected_user = false;
  bool isset_network_address = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->session_id.read(iprot);
          isset_session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          this->session_type = (TSessionType::type)ecast24;
          isset_session_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->database);
          isset_database = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->connected_user);
          isset_connected_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->delegated_user);
          this->__isset.delegated_user = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->network_address.read(iprot);
          isset_network_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->kudu_latest_observed_ts);
          this->__isset.kudu_latest_observed_ts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_session_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_session_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_database)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_connected_user)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_network_address)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TSessionState::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TSessionState");

  xfer += oprot->writeFieldBegin("database", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->database);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("connected_user", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->connected_user);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->session_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("network_address", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->network_address.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session_type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->session_type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.delegated_user) {
    xfer += oprot->writeFieldBegin("delegated_user", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->delegated_user);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kudu_latest_observed_ts) {
    xfer += oprot->writeFieldBegin("kudu_latest_observed_ts", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->kudu_latest_observed_ts);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TQueryCtx::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_client_request = false;
  bool isset_query_id = false;
  bool isset_session = false;
  bool isset_now_string = false;
  bool isset_pid = false;
  bool isset_start_unix_millis = false;
  bool isset_utc_timestamp_string = false;
  bool isset_local_time_zone = false;
  bool isset_trace_resource_usage = false;
  bool isset_is_kudu_transactional = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->client_request.read(iprot);
          isset_client_request = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->query_id.read(iprot);
          isset_query_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->session.read(iprot);
          isset_session = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->now_string);
          isset_now_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pid);
          isset_pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->coord_hostname);
          this->__isset.coord_hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->coord_ip_address.read(iprot);
          this->__isset.coord_ip_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tables_missing_stats.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _etype32;
            xfer += iprot->readListBegin(_etype32, _size29);
            this->tables_missing_stats.resize(_size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              xfer += this->tables_missing_stats[_i33].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tables_missing_stats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable_spilling);
          this->__isset.disable_spilling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parent_query_id.read(iprot);
          this->__isset.parent_query_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tables_with_corrupt_stats.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->tables_with_corrupt_stats.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += this->tables_with_corrupt_stats[_i38].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tables_with_corrupt_stats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->snapshot_timestamp);
          this->__isset.snapshot_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->desc_tbl_testonly.read(iprot);
          this->__isset.desc_tbl_testonly = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start_unix_millis);
          isset_start_unix_millis = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable_codegen_hint);
          this->__isset.disable_codegen_hint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tables_missing_diskids.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->tables_missing_diskids.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              xfer += this->tables_missing_diskids[_i43].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tables_missing_diskids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->request_pool);
          this->__isset.request_pool = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->utc_timestamp_string);
          isset_utc_timestamp_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->local_time_zone);
          isset_local_time_zone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable_hbase_num_rows_estimate);
          this->__isset.disable_hbase_num_rows_estimate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->trace_resource_usage);
          isset_trace_resource_usage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status_report_interval_ms);
          this->__isset.status_report_interval_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status_report_max_retry_s);
          this->__isset.status_report_max_retry_s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->desc_tbl_serialized.read(iprot);
          this->__isset.desc_tbl_serialized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transaction_id);
          this->__isset.transaction_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->overridden_mt_dop_value);
          this->__isset.overridden_mt_dop_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->coord_backend_id.read(iprot);
          this->__isset.coord_backend_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->gen_aggregated_profile);
          this->__isset.gen_aggregated_profile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_kudu_transactional);
          isset_is_kudu_transactional = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_client_request)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_query_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_session)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_now_string)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_unix_millis)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_utc_timestamp_string)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_local_time_zone)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_trace_resource_usage)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_is_kudu_transactional)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TQueryCtx::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TQueryCtx");

  xfer += oprot->writeFieldBegin("client_request", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->client_request.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("query_id", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->query_id.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("session", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->session.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("now_string", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->now_string);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->pid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.coord_hostname) {
    xfer += oprot->writeFieldBegin("coord_hostname", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->coord_hostname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.coord_ip_address) {
    xfer += oprot->writeFieldBegin("coord_ip_address", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->coord_ip_address.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tables_missing_stats) {
    xfer += oprot->writeFieldBegin("tables_missing_stats", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tables_missing_stats.size()));
      std::vector< ::impala::TTableName> ::const_iterator _iter44;
      for (_iter44 = this->tables_missing_stats.begin(); _iter44 != this->tables_missing_stats.end(); ++_iter44)
      {
        xfer += (*_iter44).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.disable_spilling) {
    xfer += oprot->writeFieldBegin("disable_spilling", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->disable_spilling);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parent_query_id) {
    xfer += oprot->writeFieldBegin("parent_query_id", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->parent_query_id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tables_with_corrupt_stats) {
    xfer += oprot->writeFieldBegin("tables_with_corrupt_stats", ::apache::thrift::protocol::T_LIST, 11);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tables_with_corrupt_stats.size()));
      std::vector< ::impala::TTableName> ::const_iterator _iter45;
      for (_iter45 = this->tables_with_corrupt_stats.begin(); _iter45 != this->tables_with_corrupt_stats.end(); ++_iter45)
      {
        xfer += (*_iter45).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.snapshot_timestamp) {
    xfer += oprot->writeFieldBegin("snapshot_timestamp", ::apache::thrift::protocol::T_I64, 12);
    xfer += oprot->writeI64(this->snapshot_timestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.desc_tbl_testonly) {
    xfer += oprot->writeFieldBegin("desc_tbl_testonly", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->desc_tbl_testonly.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("start_unix_millis", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->start_unix_millis);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.disable_codegen_hint) {
    xfer += oprot->writeFieldBegin("disable_codegen_hint", ::apache::thrift::protocol::T_BOOL, 15);
    xfer += oprot->writeBool(this->disable_codegen_hint);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tables_missing_diskids) {
    xfer += oprot->writeFieldBegin("tables_missing_diskids", ::apache::thrift::protocol::T_LIST, 16);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tables_missing_diskids.size()));
      std::vector< ::impala::TTableName> ::const_iterator _iter46;
      for (_iter46 = this->tables_missing_diskids.begin(); _iter46 != this->tables_missing_diskids.end(); ++_iter46)
      {
        xfer += (*_iter46).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.request_pool) {
    xfer += oprot->writeFieldBegin("request_pool", ::apache::thrift::protocol::T_STRING, 17);
    xfer += oprot->writeString(this->request_pool);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("utc_timestamp_string", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->utc_timestamp_string);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("local_time_zone", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->local_time_zone);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.disable_hbase_num_rows_estimate) {
    xfer += oprot->writeFieldBegin("disable_hbase_num_rows_estimate", ::apache::thrift::protocol::T_BOOL, 20);
    xfer += oprot->writeBool(this->disable_hbase_num_rows_estimate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("trace_resource_usage", ::apache::thrift::protocol::T_BOOL, 21);
  xfer += oprot->writeBool(this->trace_resource_usage);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.status_report_interval_ms) {
    xfer += oprot->writeFieldBegin("status_report_interval_ms", ::apache::thrift::protocol::T_I32, 22);
    xfer += oprot->writeI32(this->status_report_interval_ms);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status_report_max_retry_s) {
    xfer += oprot->writeFieldBegin("status_report_max_retry_s", ::apache::thrift::protocol::T_I32, 23);
    xfer += oprot->writeI32(this->status_report_max_retry_s);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.desc_tbl_serialized) {
    xfer += oprot->writeFieldBegin("desc_tbl_serialized", ::apache::thrift::protocol::T_STRUCT, 24);
    xfer += this->desc_tbl_serialized.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transaction_id) {
    xfer += oprot->writeFieldBegin("transaction_id", ::apache::thrift::protocol::T_I64, 25);
    xfer += oprot->writeI64(this->transaction_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.overridden_mt_dop_value) {
    xfer += oprot->writeFieldBegin("overridden_mt_dop_value", ::apache::thrift::protocol::T_I32, 26);
    xfer += oprot->writeI32(this->overridden_mt_dop_value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.coord_backend_id) {
    xfer += oprot->writeFieldBegin("coord_backend_id", ::apache::thrift::protocol::T_STRUCT, 27);
    xfer += this->coord_backend_id.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gen_aggregated_profile) {
    xfer += oprot->writeFieldBegin("gen_aggregated_profile", ::apache::thrift::protocol::T_BOOL, 28);
    xfer += oprot->writeBool(this->gen_aggregated_profile);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("is_kudu_transactional", ::apache::thrift::protocol::T_BOOL, 29);
  xfer += oprot->writeBool(this->is_kudu_transactional);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TPlanExecInfo::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fragments = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fragments.clear();
            uint32_t _size51;
            ::apache::thrift::protocol::TType _etype54;
            xfer += iprot->readListBegin(_etype54, _size51);
            this->fragments.resize(_size51);
            uint32_t _i55;
            for (_i55 = 0; _i55 < _size51; ++_i55)
            {
              xfer += this->fragments[_i55].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_fragments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->per_node_scan_ranges.clear();
            uint32_t _size56;
            ::apache::thrift::protocol::TType _ktype57;
            ::apache::thrift::protocol::TType _vtype58;
            xfer += iprot->readMapBegin(_ktype57, _vtype58, _size56);
            uint32_t _i60;
            for (_i60 = 0; _i60 < _size56; ++_i60)
            {
               ::impala::TPlanNodeId _key61;
              xfer += iprot->readI32(_key61);
               ::impala::TScanRangeSpec& _val62 = this->per_node_scan_ranges[_key61];
              xfer += _val62.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.per_node_scan_ranges = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fragments)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TPlanExecInfo::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TPlanExecInfo");

  xfer += oprot->writeFieldBegin("fragments", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fragments.size()));
    std::vector< ::impala::TPlanFragment> ::const_iterator _iter63;
    for (_iter63 = this->fragments.begin(); _iter63 != this->fragments.end(); ++_iter63)
    {
      xfer += (*_iter63).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.per_node_scan_ranges) {
    xfer += oprot->writeFieldBegin("per_node_scan_ranges", ::apache::thrift::protocol::T_MAP, 2);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->per_node_scan_ranges.size()));
      std::map< ::impala::TPlanNodeId,  ::impala::TScanRangeSpec> ::const_iterator _iter64;
      for (_iter64 = this->per_node_scan_ranges.begin(); _iter64 != this->per_node_scan_ranges.end(); ++_iter64)
      {
        xfer += oprot->writeI32(_iter64->first);
        xfer += _iter64->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TFinalizeParams::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_is_overwrite = false;
  bool isset_hdfs_base_dir = false;
  bool isset_table_name = false;
  bool isset_table_db = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_overwrite);
          isset_is_overwrite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hdfs_base_dir);
          isset_hdfs_base_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          isset_table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_db);
          isset_table_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->staging_dir);
          this->__isset.staging_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->table_id);
          this->__isset.table_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transaction_id);
          this->__isset.transaction_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->write_id);
          this->__isset.write_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->spec_id);
          this->__isset.spec_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_is_overwrite)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hdfs_base_dir)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_table_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_table_db)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TFinalizeParams::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TFinalizeParams");

  xfer += oprot->writeFieldBegin("is_overwrite", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->is_overwrite);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hdfs_base_dir", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->hdfs_base_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("table_db", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->table_db);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.staging_dir) {
    xfer += oprot->writeFieldBegin("staging_dir", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->staging_dir);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.table_id) {
    xfer += oprot->writeFieldBegin("table_id", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->table_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transaction_id) {
    xfer += oprot->writeFieldBegin("transaction_id", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->transaction_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.write_id) {
    xfer += oprot->writeFieldBegin("write_id", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->write_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.spec_id) {
    xfer += oprot->writeFieldBegin("spec_id", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->spec_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t TQueryExecRequest::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_query_ctx = false;
  bool isset_stmt_type = false;
  bool isset_host_list = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->plan_exec_info.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _etype76;
            xfer += iprot->readListBegin(_etype76, _size73);
            this->plan_exec_info.resize(_size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              xfer += this->plan_exec_info[_i77].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.plan_exec_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->result_set_metadata.read(iprot);
          this->__isset.result_set_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->finalize_params.read(iprot);
          this->__isset.finalize_params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->query_ctx.read(iprot);
          isset_query_ctx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->query_plan);
          this->__isset.query_plan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast78;
          xfer += iprot->readI32(ecast78);
          this->stmt_type = ( ::impala::TStmtType::type)ecast78;
          isset_stmt_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->host_list.clear();
            uint32_t _size79;
            ::apache::thrift::protocol::TType _etype82;
            xfer += iprot->readListBegin(_etype82, _size79);
            this->host_list.resize(_size79);
            uint32_t _i83;
            for (_i83 = 0; _i83 < _size79; ++_i83)
            {
              xfer += this->host_list[_i83].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_host_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->lineage_graph.read(iprot);
          this->__isset.lineage_graph = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->per_host_mem_estimate);
          this->__isset.per_host_mem_estimate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max_per_host_min_mem_reservation);
          this->__isset.max_per_host_min_mem_reservation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max_per_host_thread_reservation);
          this->__isset.max_per_host_thread_reservation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dedicated_coord_mem_estimate);
          this->__isset.dedicated_coord_mem_estimate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_query_ctx)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_stmt_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_host_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TQueryExecRequest::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TQueryExecRequest");

  if (this->__isset.plan_exec_info) {
    xfer += oprot->writeFieldBegin("plan_exec_info", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->plan_exec_info.size()));
      std::vector<TPlanExecInfo> ::const_iterator _iter84;
      for (_iter84 = this->plan_exec_info.begin(); _iter84 != this->plan_exec_info.end(); ++_iter84)
      {
        xfer += (*_iter84).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.result_set_metadata) {
    xfer += oprot->writeFieldBegin("result_set_metadata", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->result_set_metadata.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.finalize_params) {
    xfer += oprot->writeFieldBegin("finalize_params", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->finalize_params.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("query_ctx", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->query_ctx.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.query_plan) {
    xfer += oprot->writeFieldBegin("query_plan", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->query_plan);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("stmt_type", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->stmt_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("host_list", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->host_list.size()));
    std::vector< ::impala::TNetworkAddress> ::const_iterator _iter85;
    for (_iter85 = this->host_list.begin(); _iter85 != this->host_list.end(); ++_iter85)
    {
      xfer += (*_iter85).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.lineage_graph) {
    xfer += oprot->writeFieldBegin("lineage_graph", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->lineage_graph.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.per_host_mem_estimate) {
    xfer += oprot->writeFieldBegin("per_host_mem_estimate", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->per_host_mem_estimate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_per_host_min_mem_reservation) {
    xfer += oprot->writeFieldBegin("max_per_host_min_mem_reservation", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->max_per_host_min_mem_reservation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_per_host_thread_reservation) {
    xfer += oprot->writeFieldBegin("max_per_host_thread_reservation", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->max_per_host_thread_reservation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dedicated_coord_mem_estimate) {
    xfer += oprot->writeFieldBegin("dedicated_coord_mem_estimate", ::apache::thrift::protocol::T_I64, 12);
    xfer += oprot->writeI64(this->dedicated_coord_mem_estimate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace

#endif
