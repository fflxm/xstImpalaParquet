/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ResourceProfile_TYPES_TCC
#define ResourceProfile_TYPES_TCC

#include "ResourceProfile_types.h"

namespace impala {

template <class Protocol_>
uint32_t TBackendResourceProfile::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_min_reservation = false;
  bool isset_max_reservation = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->min_reservation);
          isset_min_reservation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max_reservation);
          isset_max_reservation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->spillable_buffer_size);
          this->__isset.spillable_buffer_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->max_row_buffer_size);
          this->__isset.max_row_buffer_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_min_reservation)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_reservation)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TBackendResourceProfile::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBackendResourceProfile");

  xfer += oprot->writeFieldBegin("min_reservation", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->min_reservation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_reservation", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->max_reservation);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.spillable_buffer_size) {
    xfer += oprot->writeFieldBegin("spillable_buffer_size", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->spillable_buffer_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.max_row_buffer_size) {
    xfer += oprot->writeFieldBegin("max_row_buffer_size", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->max_row_buffer_size);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace

#endif
