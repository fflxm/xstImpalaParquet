/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BackendGflags_TYPES_TCC
#define BackendGflags_TYPES_TCC

#include "BackendGflags_types.h"

namespace impala {

template <class Protocol_>
uint32_t TBackendGflags::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_load_auth_to_local_rules = false;
  bool isset_non_impala_java_vlog = false;
  bool isset_impala_log_lvl = false;
  bool isset_inc_stats_size_limit_bytes = false;
  bool isset_lineage_event_log_dir = false;
  bool isset_load_catalog_in_background = false;
  bool isset_num_metadata_loading_threads = false;
  bool isset_principal = false;
  bool isset_server_name = false;
  bool isset_kudu_master_hosts = false;
  bool isset_local_library_path = false;
  bool isset_read_size = false;
  bool isset_kudu_operation_timeout_ms = false;
  bool isset_initial_hms_cnxn_timeout_s = false;
  bool isset_enable_stats_extrapolation = false;
  bool isset_max_hdfs_partitions_parallel_load = false;
  bool isset_max_nonhdfs_partitions_parallel_load = false;
  bool isset_reserved_words_version = false;
  bool isset_max_filter_error_rate = false;
  bool isset_min_buffer_size = false;
  bool isset_enable_orc_scanner = false;
  bool isset_authorized_proxy_group_config = false;
  bool isset_use_local_catalog = false;
  bool isset_disable_catalog_data_ops_debug_only = false;
  bool isset_local_catalog_cache_mb = false;
  bool isset_local_catalog_cache_expiration_s = false;
  bool isset_catalog_topic_mode = false;
  bool isset_invalidate_tables_timeout_s = false;
  bool isset_invalidate_tables_on_memory_pressure = false;
  bool isset_invalidate_tables_gc_old_gen_full_threshold = false;
  bool isset_invalidate_tables_fraction_on_memory_pressure = false;
  bool isset_local_catalog_max_fetch_retries = false;
  bool isset_kudu_scanner_thread_estimated_bytes_per_column = false;
  bool isset_kudu_scanner_thread_max_estimated_bytes = false;
  bool isset_catalog_max_parallel_partial_fetch_rpc = false;
  bool isset_catalog_partial_fetch_rpc_queue_timeout_s = false;
  bool isset_exchg_node_buffer_size_bytes = false;
  bool isset_kudu_mutation_buffer_size = false;
  bool isset_kudu_error_buffer_size = false;
  bool isset_hms_event_polling_interval_s = false;
  bool isset_impala_build_version = false;
  bool isset_authorization_factory_class = false;
  bool isset_ranger_service_type = false;
  bool isset_ranger_app_id = false;
  bool isset_authorization_provider = false;
  bool isset_recursively_list_partitions = false;
  bool isset_query_event_hook_classes = false;
  bool isset_query_event_hook_nthreads = false;
  bool isset_is_executor = false;
  bool isset_is_coordinator = false;
  bool isset_use_dedicated_coordinator_estimates = false;
  bool isset_blacklisted_dbs = false;
  bool isset_blacklisted_tables = false;
  bool isset_unlock_zorder_sort = false;
  bool isset_min_privilege_set_for_show_stmts = false;
  bool isset_num_expected_executors = false;
  bool isset_num_check_authorization_threads = false;
  bool isset_use_customized_user_groups_mapper_for_ranger = false;
  bool isset_enable_column_masking = false;
  bool isset_enable_insert_events = false;
  bool isset_compact_catalog_topic = false;
  bool isset_enable_incremental_metadata_updates = false;
  bool isset_topic_update_tbl_max_wait_time_ms = false;
  bool isset_catalog_max_lock_skipped_topic_updates = false;
  bool isset_saml2_keystore_path = false;
  bool isset_saml2_keystore_password = false;
  bool isset_saml2_private_key_password = false;
  bool isset_saml2_idp_metadata = false;
  bool isset_saml2_sp_entity_id = false;
  bool isset_saml2_sp_callback_url = false;
  bool isset_saml2_want_assertations_signed = false;
  bool isset_saml2_sign_requests = false;
  bool isset_saml2_callback_token_ttl = false;
  bool isset_saml2_group_attribute_name = false;
  bool isset_saml2_group_filter = false;
  bool isset_saml2_ee_test_mode = false;
  bool isset_scratch_dirs = false;
  bool isset_enable_row_filtering = false;
  bool isset_max_wait_time_for_sync_ddl_s = false;
  bool isset_allow_ordinals_in_having = false;
  bool isset_start_hms_server = false;
  bool isset_hms_port = false;
  bool isset_fallback_to_hms_on_errors = false;
  bool isset_enable_catalogd_hms_cache = false;
  bool isset_kudu_sasl_protocol_name = false;
  bool isset_warn_catalog_response_size_mb = false;
  bool isset_warn_catalog_response_duration_s = false;
  bool isset_invalidate_hms_cache_on_ddls = false;
  bool isset_startup_filesystem_check_directories = false;
  bool isset_hms_event_incremental_refresh_transactional_table = false;
  bool isset_enable_shell_based_groups_mapping_support = false;
  bool isset_auto_check_compaction = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->load_auth_to_local_rules);
          isset_load_auth_to_local_rules = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->non_impala_java_vlog);
          isset_non_impala_java_vlog = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->impala_log_lvl);
          isset_impala_log_lvl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->inc_stats_size_limit_bytes);
          isset_inc_stats_size_limit_bytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lineage_event_log_dir);
          isset_lineage_event_log_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->load_catalog_in_background);
          isset_load_catalog_in_background = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_metadata_loading_threads);
          isset_num_metadata_loading_threads = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->principal);
          isset_principal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->server_name);
          isset_server_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->kudu_master_hosts);
          isset_kudu_master_hosts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->local_library_path);
          isset_local_library_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->read_size);
          isset_read_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->kudu_operation_timeout_ms);
          isset_kudu_operation_timeout_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->initial_hms_cnxn_timeout_s);
          isset_initial_hms_cnxn_timeout_s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_stats_extrapolation);
          isset_enable_stats_extrapolation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_hdfs_partitions_parallel_load);
          isset_max_hdfs_partitions_parallel_load = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_nonhdfs_partitions_parallel_load);
          isset_max_nonhdfs_partitions_parallel_load = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->reserved_words_version = (TReservedWordsVersion::type)ecast0;
          isset_reserved_words_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_filter_error_rate);
          isset_max_filter_error_rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->min_buffer_size);
          isset_min_buffer_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_orc_scanner);
          isset_enable_orc_scanner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authorized_proxy_group_config);
          isset_authorized_proxy_group_config = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_local_catalog);
          isset_use_local_catalog = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable_catalog_data_ops_debug_only);
          isset_disable_catalog_data_ops_debug_only = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->local_catalog_cache_mb);
          isset_local_catalog_cache_mb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->local_catalog_cache_expiration_s);
          isset_local_catalog_cache_expiration_s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->catalog_topic_mode);
          isset_catalog_topic_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->invalidate_tables_timeout_s);
          isset_invalidate_tables_timeout_s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->invalidate_tables_on_memory_pressure);
          isset_invalidate_tables_on_memory_pressure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->invalidate_tables_gc_old_gen_full_threshold);
          isset_invalidate_tables_gc_old_gen_full_threshold = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->invalidate_tables_fraction_on_memory_pressure);
          isset_invalidate_tables_fraction_on_memory_pressure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->local_catalog_max_fetch_retries);
          isset_local_catalog_max_fetch_retries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->kudu_scanner_thread_estimated_bytes_per_column);
          isset_kudu_scanner_thread_estimated_bytes_per_column = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->kudu_scanner_thread_max_estimated_bytes);
          isset_kudu_scanner_thread_max_estimated_bytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->catalog_max_parallel_partial_fetch_rpc);
          isset_catalog_max_parallel_partial_fetch_rpc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->catalog_partial_fetch_rpc_queue_timeout_s);
          isset_catalog_partial_fetch_rpc_queue_timeout_s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->exchg_node_buffer_size_bytes);
          isset_exchg_node_buffer_size_bytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->kudu_mutation_buffer_size);
          isset_kudu_mutation_buffer_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->kudu_error_buffer_size);
          isset_kudu_error_buffer_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hms_event_polling_interval_s);
          isset_hms_event_polling_interval_s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->impala_build_version);
          isset_impala_build_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authorization_factory_class);
          isset_authorization_factory_class = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ranger_service_type);
          isset_ranger_service_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ranger_app_id);
          isset_ranger_app_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authorization_provider);
          isset_authorization_provider = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->recursively_list_partitions);
          isset_recursively_list_partitions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->query_event_hook_classes);
          isset_query_event_hook_classes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->query_event_hook_nthreads);
          isset_query_event_hook_nthreads = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_executor);
          isset_is_executor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_coordinator);
          isset_is_coordinator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_dedicated_coordinator_estimates);
          isset_use_dedicated_coordinator_estimates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 58:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blacklisted_dbs);
          isset_blacklisted_dbs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->blacklisted_tables);
          isset_blacklisted_tables = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->unlock_zorder_sort);
          isset_unlock_zorder_sort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->min_privilege_set_for_show_stmts);
          isset_min_privilege_set_for_show_stmts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_expected_executors);
          isset_num_expected_executors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 64:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num_check_authorization_threads);
          isset_num_check_authorization_threads = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 65:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->use_customized_user_groups_mapper_for_ranger);
          isset_use_customized_user_groups_mapper_for_ranger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 66:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_column_masking);
          isset_enable_column_masking = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 67:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_insert_events);
          isset_enable_insert_events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 68:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->compact_catalog_topic);
          isset_compact_catalog_topic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 69:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_incremental_metadata_updates);
          isset_enable_incremental_metadata_updates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->topic_update_tbl_max_wait_time_ms);
          isset_topic_update_tbl_max_wait_time_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 71:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->catalog_max_lock_skipped_topic_updates);
          isset_catalog_max_lock_skipped_topic_updates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 72:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->saml2_keystore_path);
          isset_saml2_keystore_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 73:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->saml2_keystore_password);
          isset_saml2_keystore_password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 74:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->saml2_private_key_password);
          isset_saml2_private_key_password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 75:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->saml2_idp_metadata);
          isset_saml2_idp_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 76:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->saml2_sp_entity_id);
          isset_saml2_sp_entity_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 77:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->saml2_sp_callback_url);
          isset_saml2_sp_callback_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 78:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->saml2_want_assertations_signed);
          isset_saml2_want_assertations_signed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 79:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->saml2_sign_requests);
          isset_saml2_sign_requests = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 80:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->saml2_callback_token_ttl);
          isset_saml2_callback_token_ttl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 81:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->saml2_group_attribute_name);
          isset_saml2_group_attribute_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 82:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->saml2_group_filter);
          isset_saml2_group_filter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 83:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->saml2_ee_test_mode);
          isset_saml2_ee_test_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 84:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->scratch_dirs);
          isset_scratch_dirs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 85:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_row_filtering);
          isset_enable_row_filtering = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 86:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_wait_time_for_sync_ddl_s);
          isset_max_wait_time_for_sync_ddl_s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 87:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->allow_ordinals_in_having);
          isset_allow_ordinals_in_having = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 88:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->start_hms_server);
          isset_start_hms_server = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 89:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hms_port);
          isset_hms_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 90:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->fallback_to_hms_on_errors);
          isset_fallback_to_hms_on_errors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 91:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_catalogd_hms_cache);
          isset_enable_catalogd_hms_cache = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 92:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->kudu_sasl_protocol_name);
          isset_kudu_sasl_protocol_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 93:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->warn_catalog_response_size_mb);
          isset_warn_catalog_response_size_mb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 94:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->warn_catalog_response_duration_s);
          isset_warn_catalog_response_duration_s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 95:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->invalidate_hms_cache_on_ddls);
          isset_invalidate_hms_cache_on_ddls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 96:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->startup_filesystem_check_directories);
          isset_startup_filesystem_check_directories = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 97:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hms_event_incremental_refresh_transactional_table);
          isset_hms_event_incremental_refresh_transactional_table = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 98:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable_shell_based_groups_mapping_support);
          isset_enable_shell_based_groups_mapping_support = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 99:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->auto_check_compaction);
          isset_auto_check_compaction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_load_auth_to_local_rules)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_non_impala_java_vlog)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_impala_log_lvl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_inc_stats_size_limit_bytes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_lineage_event_log_dir)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_load_catalog_in_background)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num_metadata_loading_threads)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_principal)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_server_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_kudu_master_hosts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_local_library_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_read_size)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_kudu_operation_timeout_ms)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_initial_hms_cnxn_timeout_s)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enable_stats_extrapolation)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_hdfs_partitions_parallel_load)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_nonhdfs_partitions_parallel_load)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_reserved_words_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_filter_error_rate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_min_buffer_size)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enable_orc_scanner)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_authorized_proxy_group_config)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_use_local_catalog)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_disable_catalog_data_ops_debug_only)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_local_catalog_cache_mb)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_local_catalog_cache_expiration_s)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_catalog_topic_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_invalidate_tables_timeout_s)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_invalidate_tables_on_memory_pressure)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_invalidate_tables_gc_old_gen_full_threshold)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_invalidate_tables_fraction_on_memory_pressure)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_local_catalog_max_fetch_retries)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_kudu_scanner_thread_estimated_bytes_per_column)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_kudu_scanner_thread_max_estimated_bytes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_catalog_max_parallel_partial_fetch_rpc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_catalog_partial_fetch_rpc_queue_timeout_s)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_exchg_node_buffer_size_bytes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_kudu_mutation_buffer_size)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_kudu_error_buffer_size)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hms_event_polling_interval_s)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_impala_build_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_authorization_factory_class)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ranger_service_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ranger_app_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_authorization_provider)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_recursively_list_partitions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_query_event_hook_classes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_query_event_hook_nthreads)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_is_executor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_is_coordinator)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_use_dedicated_coordinator_estimates)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_blacklisted_dbs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_blacklisted_tables)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unlock_zorder_sort)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_min_privilege_set_for_show_stmts)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num_expected_executors)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num_check_authorization_threads)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_use_customized_user_groups_mapper_for_ranger)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enable_column_masking)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enable_insert_events)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_compact_catalog_topic)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enable_incremental_metadata_updates)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_topic_update_tbl_max_wait_time_ms)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_catalog_max_lock_skipped_topic_updates)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_saml2_keystore_path)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_saml2_keystore_password)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_saml2_private_key_password)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_saml2_idp_metadata)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_saml2_sp_entity_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_saml2_sp_callback_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_saml2_want_assertations_signed)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_saml2_sign_requests)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_saml2_callback_token_ttl)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_saml2_group_attribute_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_saml2_group_filter)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_saml2_ee_test_mode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_scratch_dirs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enable_row_filtering)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_wait_time_for_sync_ddl_s)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_allow_ordinals_in_having)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_hms_server)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hms_port)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fallback_to_hms_on_errors)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enable_catalogd_hms_cache)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_kudu_sasl_protocol_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_warn_catalog_response_size_mb)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_warn_catalog_response_duration_s)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_invalidate_hms_cache_on_ddls)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_startup_filesystem_check_directories)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hms_event_incremental_refresh_transactional_table)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_enable_shell_based_groups_mapping_support)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_auto_check_compaction)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

template <class Protocol_>
uint32_t TBackendGflags::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBackendGflags");

  xfer += oprot->writeFieldBegin("load_auth_to_local_rules", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->load_auth_to_local_rules);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("non_impala_java_vlog", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->non_impala_java_vlog);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("impala_log_lvl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->impala_log_lvl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inc_stats_size_limit_bytes", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->inc_stats_size_limit_bytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lineage_event_log_dir", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->lineage_event_log_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("load_catalog_in_background", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->load_catalog_in_background);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_metadata_loading_threads", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->num_metadata_loading_threads);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("principal", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->principal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("server_name", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->server_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kudu_master_hosts", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->kudu_master_hosts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("local_library_path", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->local_library_path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("read_size", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->read_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kudu_operation_timeout_ms", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->kudu_operation_timeout_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initial_hms_cnxn_timeout_s", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->initial_hms_cnxn_timeout_s);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_stats_extrapolation", ::apache::thrift::protocol::T_BOOL, 18);
  xfer += oprot->writeBool(this->enable_stats_extrapolation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_hdfs_partitions_parallel_load", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->max_hdfs_partitions_parallel_load);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_nonhdfs_partitions_parallel_load", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->max_nonhdfs_partitions_parallel_load);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reserved_words_version", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32((int32_t)this->reserved_words_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_filter_error_rate", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->max_filter_error_rate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_buffer_size", ::apache::thrift::protocol::T_I64, 24);
  xfer += oprot->writeI64(this->min_buffer_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_orc_scanner", ::apache::thrift::protocol::T_BOOL, 25);
  xfer += oprot->writeBool(this->enable_orc_scanner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authorized_proxy_group_config", ::apache::thrift::protocol::T_STRING, 26);
  xfer += oprot->writeString(this->authorized_proxy_group_config);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_local_catalog", ::apache::thrift::protocol::T_BOOL, 27);
  xfer += oprot->writeBool(this->use_local_catalog);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("disable_catalog_data_ops_debug_only", ::apache::thrift::protocol::T_BOOL, 28);
  xfer += oprot->writeBool(this->disable_catalog_data_ops_debug_only);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("local_catalog_cache_mb", ::apache::thrift::protocol::T_I32, 29);
  xfer += oprot->writeI32(this->local_catalog_cache_mb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("local_catalog_cache_expiration_s", ::apache::thrift::protocol::T_I32, 30);
  xfer += oprot->writeI32(this->local_catalog_cache_expiration_s);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catalog_topic_mode", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->catalog_topic_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invalidate_tables_timeout_s", ::apache::thrift::protocol::T_I32, 33);
  xfer += oprot->writeI32(this->invalidate_tables_timeout_s);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invalidate_tables_on_memory_pressure", ::apache::thrift::protocol::T_BOOL, 34);
  xfer += oprot->writeBool(this->invalidate_tables_on_memory_pressure);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invalidate_tables_gc_old_gen_full_threshold", ::apache::thrift::protocol::T_DOUBLE, 35);
  xfer += oprot->writeDouble(this->invalidate_tables_gc_old_gen_full_threshold);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invalidate_tables_fraction_on_memory_pressure", ::apache::thrift::protocol::T_DOUBLE, 36);
  xfer += oprot->writeDouble(this->invalidate_tables_fraction_on_memory_pressure);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("local_catalog_max_fetch_retries", ::apache::thrift::protocol::T_I32, 37);
  xfer += oprot->writeI32(this->local_catalog_max_fetch_retries);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kudu_scanner_thread_estimated_bytes_per_column", ::apache::thrift::protocol::T_I64, 38);
  xfer += oprot->writeI64(this->kudu_scanner_thread_estimated_bytes_per_column);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kudu_scanner_thread_max_estimated_bytes", ::apache::thrift::protocol::T_I64, 39);
  xfer += oprot->writeI64(this->kudu_scanner_thread_max_estimated_bytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catalog_max_parallel_partial_fetch_rpc", ::apache::thrift::protocol::T_I32, 40);
  xfer += oprot->writeI32(this->catalog_max_parallel_partial_fetch_rpc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catalog_partial_fetch_rpc_queue_timeout_s", ::apache::thrift::protocol::T_I64, 41);
  xfer += oprot->writeI64(this->catalog_partial_fetch_rpc_queue_timeout_s);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exchg_node_buffer_size_bytes", ::apache::thrift::protocol::T_I64, 42);
  xfer += oprot->writeI64(this->exchg_node_buffer_size_bytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kudu_mutation_buffer_size", ::apache::thrift::protocol::T_I32, 43);
  xfer += oprot->writeI32(this->kudu_mutation_buffer_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kudu_error_buffer_size", ::apache::thrift::protocol::T_I32, 44);
  xfer += oprot->writeI32(this->kudu_error_buffer_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hms_event_polling_interval_s", ::apache::thrift::protocol::T_I32, 45);
  xfer += oprot->writeI32(this->hms_event_polling_interval_s);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("impala_build_version", ::apache::thrift::protocol::T_STRING, 46);
  xfer += oprot->writeString(this->impala_build_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authorization_factory_class", ::apache::thrift::protocol::T_STRING, 47);
  xfer += oprot->writeString(this->authorization_factory_class);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ranger_service_type", ::apache::thrift::protocol::T_STRING, 49);
  xfer += oprot->writeString(this->ranger_service_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ranger_app_id", ::apache::thrift::protocol::T_STRING, 50);
  xfer += oprot->writeString(this->ranger_app_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("authorization_provider", ::apache::thrift::protocol::T_STRING, 51);
  xfer += oprot->writeString(this->authorization_provider);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recursively_list_partitions", ::apache::thrift::protocol::T_BOOL, 52);
  xfer += oprot->writeBool(this->recursively_list_partitions);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("query_event_hook_classes", ::apache::thrift::protocol::T_STRING, 53);
  xfer += oprot->writeString(this->query_event_hook_classes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("query_event_hook_nthreads", ::apache::thrift::protocol::T_I32, 54);
  xfer += oprot->writeI32(this->query_event_hook_nthreads);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_executor", ::apache::thrift::protocol::T_BOOL, 55);
  xfer += oprot->writeBool(this->is_executor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_coordinator", ::apache::thrift::protocol::T_BOOL, 56);
  xfer += oprot->writeBool(this->is_coordinator);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_dedicated_coordinator_estimates", ::apache::thrift::protocol::T_BOOL, 57);
  xfer += oprot->writeBool(this->use_dedicated_coordinator_estimates);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blacklisted_dbs", ::apache::thrift::protocol::T_STRING, 58);
  xfer += oprot->writeString(this->blacklisted_dbs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blacklisted_tables", ::apache::thrift::protocol::T_STRING, 59);
  xfer += oprot->writeString(this->blacklisted_tables);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unlock_zorder_sort", ::apache::thrift::protocol::T_BOOL, 60);
  xfer += oprot->writeBool(this->unlock_zorder_sort);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_privilege_set_for_show_stmts", ::apache::thrift::protocol::T_STRING, 61);
  xfer += oprot->writeString(this->min_privilege_set_for_show_stmts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_expected_executors", ::apache::thrift::protocol::T_I32, 63);
  xfer += oprot->writeI32(this->num_expected_executors);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num_check_authorization_threads", ::apache::thrift::protocol::T_I32, 64);
  xfer += oprot->writeI32(this->num_check_authorization_threads);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_customized_user_groups_mapper_for_ranger", ::apache::thrift::protocol::T_BOOL, 65);
  xfer += oprot->writeBool(this->use_customized_user_groups_mapper_for_ranger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_column_masking", ::apache::thrift::protocol::T_BOOL, 66);
  xfer += oprot->writeBool(this->enable_column_masking);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_insert_events", ::apache::thrift::protocol::T_BOOL, 67);
  xfer += oprot->writeBool(this->enable_insert_events);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compact_catalog_topic", ::apache::thrift::protocol::T_BOOL, 68);
  xfer += oprot->writeBool(this->compact_catalog_topic);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_incremental_metadata_updates", ::apache::thrift::protocol::T_BOOL, 69);
  xfer += oprot->writeBool(this->enable_incremental_metadata_updates);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topic_update_tbl_max_wait_time_ms", ::apache::thrift::protocol::T_I64, 70);
  xfer += oprot->writeI64(this->topic_update_tbl_max_wait_time_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("catalog_max_lock_skipped_topic_updates", ::apache::thrift::protocol::T_I32, 71);
  xfer += oprot->writeI32(this->catalog_max_lock_skipped_topic_updates);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saml2_keystore_path", ::apache::thrift::protocol::T_STRING, 72);
  xfer += oprot->writeString(this->saml2_keystore_path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saml2_keystore_password", ::apache::thrift::protocol::T_STRING, 73);
  xfer += oprot->writeString(this->saml2_keystore_password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saml2_private_key_password", ::apache::thrift::protocol::T_STRING, 74);
  xfer += oprot->writeString(this->saml2_private_key_password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saml2_idp_metadata", ::apache::thrift::protocol::T_STRING, 75);
  xfer += oprot->writeString(this->saml2_idp_metadata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saml2_sp_entity_id", ::apache::thrift::protocol::T_STRING, 76);
  xfer += oprot->writeString(this->saml2_sp_entity_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saml2_sp_callback_url", ::apache::thrift::protocol::T_STRING, 77);
  xfer += oprot->writeString(this->saml2_sp_callback_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saml2_want_assertations_signed", ::apache::thrift::protocol::T_BOOL, 78);
  xfer += oprot->writeBool(this->saml2_want_assertations_signed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saml2_sign_requests", ::apache::thrift::protocol::T_BOOL, 79);
  xfer += oprot->writeBool(this->saml2_sign_requests);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saml2_callback_token_ttl", ::apache::thrift::protocol::T_I32, 80);
  xfer += oprot->writeI32(this->saml2_callback_token_ttl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saml2_group_attribute_name", ::apache::thrift::protocol::T_STRING, 81);
  xfer += oprot->writeString(this->saml2_group_attribute_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saml2_group_filter", ::apache::thrift::protocol::T_STRING, 82);
  xfer += oprot->writeString(this->saml2_group_filter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saml2_ee_test_mode", ::apache::thrift::protocol::T_BOOL, 83);
  xfer += oprot->writeBool(this->saml2_ee_test_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scratch_dirs", ::apache::thrift::protocol::T_STRING, 84);
  xfer += oprot->writeString(this->scratch_dirs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_row_filtering", ::apache::thrift::protocol::T_BOOL, 85);
  xfer += oprot->writeBool(this->enable_row_filtering);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_wait_time_for_sync_ddl_s", ::apache::thrift::protocol::T_I32, 86);
  xfer += oprot->writeI32(this->max_wait_time_for_sync_ddl_s);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("allow_ordinals_in_having", ::apache::thrift::protocol::T_BOOL, 87);
  xfer += oprot->writeBool(this->allow_ordinals_in_having);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_hms_server", ::apache::thrift::protocol::T_BOOL, 88);
  xfer += oprot->writeBool(this->start_hms_server);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hms_port", ::apache::thrift::protocol::T_I32, 89);
  xfer += oprot->writeI32(this->hms_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fallback_to_hms_on_errors", ::apache::thrift::protocol::T_BOOL, 90);
  xfer += oprot->writeBool(this->fallback_to_hms_on_errors);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_catalogd_hms_cache", ::apache::thrift::protocol::T_BOOL, 91);
  xfer += oprot->writeBool(this->enable_catalogd_hms_cache);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kudu_sasl_protocol_name", ::apache::thrift::protocol::T_STRING, 92);
  xfer += oprot->writeString(this->kudu_sasl_protocol_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("warn_catalog_response_size_mb", ::apache::thrift::protocol::T_I32, 93);
  xfer += oprot->writeI32(this->warn_catalog_response_size_mb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("warn_catalog_response_duration_s", ::apache::thrift::protocol::T_I32, 94);
  xfer += oprot->writeI32(this->warn_catalog_response_duration_s);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("invalidate_hms_cache_on_ddls", ::apache::thrift::protocol::T_BOOL, 95);
  xfer += oprot->writeBool(this->invalidate_hms_cache_on_ddls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startup_filesystem_check_directories", ::apache::thrift::protocol::T_STRING, 96);
  xfer += oprot->writeString(this->startup_filesystem_check_directories);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hms_event_incremental_refresh_transactional_table", ::apache::thrift::protocol::T_BOOL, 97);
  xfer += oprot->writeBool(this->hms_event_incremental_refresh_transactional_table);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enable_shell_based_groups_mapping_support", ::apache::thrift::protocol::T_BOOL, 98);
  xfer += oprot->writeBool(this->enable_shell_based_groups_mapping_support);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("auto_check_compaction", ::apache::thrift::protocol::T_BOOL, 99);
  xfer += oprot->writeBool(this->auto_check_compaction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace

#endif
