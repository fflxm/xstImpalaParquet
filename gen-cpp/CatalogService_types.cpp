/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CatalogService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {

int _kCatalogServiceVersionValues[] = {
  CatalogServiceVersion::V1
};
const char* _kCatalogServiceVersionNames[] = {
  "V1"
};
const std::map<int, const char*> _CatalogServiceVersion_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kCatalogServiceVersionValues, _kCatalogServiceVersionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const CatalogServiceVersion::type& val) {
  std::map<int, const char*>::const_iterator it = _CatalogServiceVersion_VALUES_TO_NAMES.find(val);
  if (it != _CatalogServiceVersion_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kCatalogLookupStatusValues[] = {
  CatalogLookupStatus::OK,
  CatalogLookupStatus::DB_NOT_FOUND,
  CatalogLookupStatus::TABLE_NOT_FOUND,
  CatalogLookupStatus::TABLE_NOT_LOADED,
  CatalogLookupStatus::FUNCTION_NOT_FOUND,
  CatalogLookupStatus::PARTITION_NOT_FOUND
};
const char* _kCatalogLookupStatusNames[] = {
  "OK",
  "DB_NOT_FOUND",
  "TABLE_NOT_FOUND",
  "TABLE_NOT_LOADED",
  "FUNCTION_NOT_FOUND",
  "PARTITION_NOT_FOUND"
};
const std::map<int, const char*> _CatalogLookupStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kCatalogLookupStatusValues, _kCatalogLookupStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const CatalogLookupStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _CatalogLookupStatus_VALUES_TO_NAMES.find(val);
  if (it != _CatalogLookupStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TCatalogServiceRequestHeader::~TCatalogServiceRequestHeader() throw() {
}


void TCatalogServiceRequestHeader::__set_requesting_user(const std::string& val) {
  this->requesting_user = val;
__isset.requesting_user = true;
}

void TCatalogServiceRequestHeader::__set_redacted_sql_stmt(const std::string& val) {
  this->redacted_sql_stmt = val;
__isset.redacted_sql_stmt = true;
}

void TCatalogServiceRequestHeader::__set_client_ip(const std::string& val) {
  this->client_ip = val;
__isset.client_ip = true;
}

void TCatalogServiceRequestHeader::__set_want_minimal_response(const bool val) {
  this->want_minimal_response = val;
__isset.want_minimal_response = true;
}
std::ostream& operator<<(std::ostream& out, const TCatalogServiceRequestHeader& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCatalogServiceRequestHeader &a, TCatalogServiceRequestHeader &b) {
  using ::std::swap;
  swap(a.requesting_user, b.requesting_user);
  swap(a.redacted_sql_stmt, b.redacted_sql_stmt);
  swap(a.client_ip, b.client_ip);
  swap(a.want_minimal_response, b.want_minimal_response);
  swap(a.__isset, b.__isset);
}

TCatalogServiceRequestHeader::TCatalogServiceRequestHeader(const TCatalogServiceRequestHeader& other0) {
  requesting_user = other0.requesting_user;
  redacted_sql_stmt = other0.redacted_sql_stmt;
  client_ip = other0.client_ip;
  want_minimal_response = other0.want_minimal_response;
  __isset = other0.__isset;
}
TCatalogServiceRequestHeader::TCatalogServiceRequestHeader( TCatalogServiceRequestHeader&& other1) {
  requesting_user = std::move(other1.requesting_user);
  redacted_sql_stmt = std::move(other1.redacted_sql_stmt);
  client_ip = std::move(other1.client_ip);
  want_minimal_response = std::move(other1.want_minimal_response);
  __isset = std::move(other1.__isset);
}
TCatalogServiceRequestHeader& TCatalogServiceRequestHeader::operator=(const TCatalogServiceRequestHeader& other2) {
  requesting_user = other2.requesting_user;
  redacted_sql_stmt = other2.redacted_sql_stmt;
  client_ip = other2.client_ip;
  want_minimal_response = other2.want_minimal_response;
  __isset = other2.__isset;
  return *this;
}
TCatalogServiceRequestHeader& TCatalogServiceRequestHeader::operator=(TCatalogServiceRequestHeader&& other3) {
  requesting_user = std::move(other3.requesting_user);
  redacted_sql_stmt = std::move(other3.redacted_sql_stmt);
  client_ip = std::move(other3.client_ip);
  want_minimal_response = std::move(other3.want_minimal_response);
  __isset = std::move(other3.__isset);
  return *this;
}
void TCatalogServiceRequestHeader::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCatalogServiceRequestHeader(";
  out << "requesting_user="; (__isset.requesting_user ? (out << to_string(requesting_user)) : (out << "<null>"));
  out << ", " << "redacted_sql_stmt="; (__isset.redacted_sql_stmt ? (out << to_string(redacted_sql_stmt)) : (out << "<null>"));
  out << ", " << "client_ip="; (__isset.client_ip ? (out << to_string(client_ip)) : (out << "<null>"));
  out << ", " << "want_minimal_response="; (__isset.want_minimal_response ? (out << to_string(want_minimal_response)) : (out << "<null>"));
  out << ")";
}


TCatalogUpdateResult::~TCatalogUpdateResult() throw() {
}


void TCatalogUpdateResult::__set_catalog_service_id(const  ::impala::TUniqueId& val) {
  this->catalog_service_id = val;
}

void TCatalogUpdateResult::__set_version(const int64_t val) {
  this->version = val;
}

void TCatalogUpdateResult::__set_status(const  ::impala::TStatus& val) {
  this->status = val;
}

void TCatalogUpdateResult::__set_is_invalidate(const bool val) {
  this->is_invalidate = val;
}

void TCatalogUpdateResult::__set_updated_catalog_objects(const std::vector< ::impala::TCatalogObject> & val) {
  this->updated_catalog_objects = val;
__isset.updated_catalog_objects = true;
}

void TCatalogUpdateResult::__set_removed_catalog_objects(const std::vector< ::impala::TCatalogObject> & val) {
  this->removed_catalog_objects = val;
__isset.removed_catalog_objects = true;
}
std::ostream& operator<<(std::ostream& out, const TCatalogUpdateResult& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCatalogUpdateResult &a, TCatalogUpdateResult &b) {
  using ::std::swap;
  swap(a.catalog_service_id, b.catalog_service_id);
  swap(a.version, b.version);
  swap(a.status, b.status);
  swap(a.is_invalidate, b.is_invalidate);
  swap(a.updated_catalog_objects, b.updated_catalog_objects);
  swap(a.removed_catalog_objects, b.removed_catalog_objects);
  swap(a.__isset, b.__isset);
}

TCatalogUpdateResult::TCatalogUpdateResult(const TCatalogUpdateResult& other16) {
  catalog_service_id = other16.catalog_service_id;
  version = other16.version;
  status = other16.status;
  is_invalidate = other16.is_invalidate;
  updated_catalog_objects = other16.updated_catalog_objects;
  removed_catalog_objects = other16.removed_catalog_objects;
  __isset = other16.__isset;
}
TCatalogUpdateResult::TCatalogUpdateResult( TCatalogUpdateResult&& other17) {
  catalog_service_id = std::move(other17.catalog_service_id);
  version = std::move(other17.version);
  status = std::move(other17.status);
  is_invalidate = std::move(other17.is_invalidate);
  updated_catalog_objects = std::move(other17.updated_catalog_objects);
  removed_catalog_objects = std::move(other17.removed_catalog_objects);
  __isset = std::move(other17.__isset);
}
TCatalogUpdateResult& TCatalogUpdateResult::operator=(const TCatalogUpdateResult& other18) {
  catalog_service_id = other18.catalog_service_id;
  version = other18.version;
  status = other18.status;
  is_invalidate = other18.is_invalidate;
  updated_catalog_objects = other18.updated_catalog_objects;
  removed_catalog_objects = other18.removed_catalog_objects;
  __isset = other18.__isset;
  return *this;
}
TCatalogUpdateResult& TCatalogUpdateResult::operator=(TCatalogUpdateResult&& other19) {
  catalog_service_id = std::move(other19.catalog_service_id);
  version = std::move(other19.version);
  status = std::move(other19.status);
  is_invalidate = std::move(other19.is_invalidate);
  updated_catalog_objects = std::move(other19.updated_catalog_objects);
  removed_catalog_objects = std::move(other19.removed_catalog_objects);
  __isset = std::move(other19.__isset);
  return *this;
}
void TCatalogUpdateResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCatalogUpdateResult(";
  out << "catalog_service_id=" << to_string(catalog_service_id);
  out << ", " << "version=" << to_string(version);
  out << ", " << "status=" << to_string(status);
  out << ", " << "is_invalidate=" << to_string(is_invalidate);
  out << ", " << "updated_catalog_objects="; (__isset.updated_catalog_objects ? (out << to_string(updated_catalog_objects)) : (out << "<null>"));
  out << ", " << "removed_catalog_objects="; (__isset.removed_catalog_objects ? (out << to_string(removed_catalog_objects)) : (out << "<null>"));
  out << ")";
}


TDdlExecRequest::~TDdlExecRequest() throw() {
}


void TDdlExecRequest::__set_protocol_version(const CatalogServiceVersion::type val) {
  this->protocol_version = val;
}

void TDdlExecRequest::__set_header(const TCatalogServiceRequestHeader& val) {
  this->header = val;
__isset.header = true;
}

void TDdlExecRequest::__set_ddl_type(const  ::impala::TDdlType::type val) {
  this->ddl_type = val;
}

void TDdlExecRequest::__set_alter_table_params(const  ::impala::TAlterTableParams& val) {
  this->alter_table_params = val;
__isset.alter_table_params = true;
}

void TDdlExecRequest::__set_alter_view_params(const  ::impala::TCreateOrAlterViewParams& val) {
  this->alter_view_params = val;
__isset.alter_view_params = true;
}

void TDdlExecRequest::__set_create_db_params(const  ::impala::TCreateDbParams& val) {
  this->create_db_params = val;
__isset.create_db_params = true;
}

void TDdlExecRequest::__set_create_table_params(const  ::impala::TCreateTableParams& val) {
  this->create_table_params = val;
__isset.create_table_params = true;
}

void TDdlExecRequest::__set_create_table_like_params(const  ::impala::TCreateTableLikeParams& val) {
  this->create_table_like_params = val;
__isset.create_table_like_params = true;
}

void TDdlExecRequest::__set_create_view_params(const  ::impala::TCreateOrAlterViewParams& val) {
  this->create_view_params = val;
__isset.create_view_params = true;
}

void TDdlExecRequest::__set_create_fn_params(const  ::impala::TCreateFunctionParams& val) {
  this->create_fn_params = val;
__isset.create_fn_params = true;
}

void TDdlExecRequest::__set_drop_db_params(const  ::impala::TDropDbParams& val) {
  this->drop_db_params = val;
__isset.drop_db_params = true;
}

void TDdlExecRequest::__set_drop_table_or_view_params(const  ::impala::TDropTableOrViewParams& val) {
  this->drop_table_or_view_params = val;
__isset.drop_table_or_view_params = true;
}

void TDdlExecRequest::__set_truncate_params(const  ::impala::TTruncateParams& val) {
  this->truncate_params = val;
__isset.truncate_params = true;
}

void TDdlExecRequest::__set_drop_fn_params(const  ::impala::TDropFunctionParams& val) {
  this->drop_fn_params = val;
__isset.drop_fn_params = true;
}

void TDdlExecRequest::__set_compute_stats_params(const  ::impala::TComputeStatsParams& val) {
  this->compute_stats_params = val;
__isset.compute_stats_params = true;
}

void TDdlExecRequest::__set_create_data_source_params(const  ::impala::TCreateDataSourceParams& val) {
  this->create_data_source_params = val;
__isset.create_data_source_params = true;
}

void TDdlExecRequest::__set_drop_data_source_params(const  ::impala::TDropDataSourceParams& val) {
  this->drop_data_source_params = val;
__isset.drop_data_source_params = true;
}

void TDdlExecRequest::__set_drop_stats_params(const  ::impala::TDropStatsParams& val) {
  this->drop_stats_params = val;
__isset.drop_stats_params = true;
}

void TDdlExecRequest::__set_create_drop_role_params(const  ::impala::TCreateDropRoleParams& val) {
  this->create_drop_role_params = val;
__isset.create_drop_role_params = true;
}

void TDdlExecRequest::__set_grant_revoke_role_params(const  ::impala::TGrantRevokeRoleParams& val) {
  this->grant_revoke_role_params = val;
__isset.grant_revoke_role_params = true;
}

void TDdlExecRequest::__set_grant_revoke_priv_params(const  ::impala::TGrantRevokePrivParams& val) {
  this->grant_revoke_priv_params = val;
__isset.grant_revoke_priv_params = true;
}

void TDdlExecRequest::__set_sync_ddl(const bool val) {
  this->sync_ddl = val;
}

void TDdlExecRequest::__set_comment_on_params(const  ::impala::TCommentOnParams& val) {
  this->comment_on_params = val;
__isset.comment_on_params = true;
}

void TDdlExecRequest::__set_alter_db_params(const  ::impala::TAlterDbParams& val) {
  this->alter_db_params = val;
__isset.alter_db_params = true;
}

void TDdlExecRequest::__set_copy_test_case_params(const  ::impala::TCopyTestCaseReq& val) {
  this->copy_test_case_params = val;
__isset.copy_test_case_params = true;
}

void TDdlExecRequest::__set_debug_action(const std::string& val) {
  this->debug_action = val;
__isset.debug_action = true;
}
std::ostream& operator<<(std::ostream& out, const TDdlExecRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDdlExecRequest &a, TDdlExecRequest &b) {
  using ::std::swap;
  swap(a.protocol_version, b.protocol_version);
  swap(a.header, b.header);
  swap(a.ddl_type, b.ddl_type);
  swap(a.alter_table_params, b.alter_table_params);
  swap(a.alter_view_params, b.alter_view_params);
  swap(a.create_db_params, b.create_db_params);
  swap(a.create_table_params, b.create_table_params);
  swap(a.create_table_like_params, b.create_table_like_params);
  swap(a.create_view_params, b.create_view_params);
  swap(a.create_fn_params, b.create_fn_params);
  swap(a.drop_db_params, b.drop_db_params);
  swap(a.drop_table_or_view_params, b.drop_table_or_view_params);
  swap(a.truncate_params, b.truncate_params);
  swap(a.drop_fn_params, b.drop_fn_params);
  swap(a.compute_stats_params, b.compute_stats_params);
  swap(a.create_data_source_params, b.create_data_source_params);
  swap(a.drop_data_source_params, b.drop_data_source_params);
  swap(a.drop_stats_params, b.drop_stats_params);
  swap(a.create_drop_role_params, b.create_drop_role_params);
  swap(a.grant_revoke_role_params, b.grant_revoke_role_params);
  swap(a.grant_revoke_priv_params, b.grant_revoke_priv_params);
  swap(a.sync_ddl, b.sync_ddl);
  swap(a.comment_on_params, b.comment_on_params);
  swap(a.alter_db_params, b.alter_db_params);
  swap(a.copy_test_case_params, b.copy_test_case_params);
  swap(a.debug_action, b.debug_action);
  swap(a.__isset, b.__isset);
}

TDdlExecRequest::TDdlExecRequest(const TDdlExecRequest& other22) {
  protocol_version = other22.protocol_version;
  header = other22.header;
  ddl_type = other22.ddl_type;
  alter_table_params = other22.alter_table_params;
  alter_view_params = other22.alter_view_params;
  create_db_params = other22.create_db_params;
  create_table_params = other22.create_table_params;
  create_table_like_params = other22.create_table_like_params;
  create_view_params = other22.create_view_params;
  create_fn_params = other22.create_fn_params;
  drop_db_params = other22.drop_db_params;
  drop_table_or_view_params = other22.drop_table_or_view_params;
  truncate_params = other22.truncate_params;
  drop_fn_params = other22.drop_fn_params;
  compute_stats_params = other22.compute_stats_params;
  create_data_source_params = other22.create_data_source_params;
  drop_data_source_params = other22.drop_data_source_params;
  drop_stats_params = other22.drop_stats_params;
  create_drop_role_params = other22.create_drop_role_params;
  grant_revoke_role_params = other22.grant_revoke_role_params;
  grant_revoke_priv_params = other22.grant_revoke_priv_params;
  sync_ddl = other22.sync_ddl;
  comment_on_params = other22.comment_on_params;
  alter_db_params = other22.alter_db_params;
  copy_test_case_params = other22.copy_test_case_params;
  debug_action = other22.debug_action;
  __isset = other22.__isset;
}
TDdlExecRequest::TDdlExecRequest( TDdlExecRequest&& other23) {
  protocol_version = std::move(other23.protocol_version);
  header = std::move(other23.header);
  ddl_type = std::move(other23.ddl_type);
  alter_table_params = std::move(other23.alter_table_params);
  alter_view_params = std::move(other23.alter_view_params);
  create_db_params = std::move(other23.create_db_params);
  create_table_params = std::move(other23.create_table_params);
  create_table_like_params = std::move(other23.create_table_like_params);
  create_view_params = std::move(other23.create_view_params);
  create_fn_params = std::move(other23.create_fn_params);
  drop_db_params = std::move(other23.drop_db_params);
  drop_table_or_view_params = std::move(other23.drop_table_or_view_params);
  truncate_params = std::move(other23.truncate_params);
  drop_fn_params = std::move(other23.drop_fn_params);
  compute_stats_params = std::move(other23.compute_stats_params);
  create_data_source_params = std::move(other23.create_data_source_params);
  drop_data_source_params = std::move(other23.drop_data_source_params);
  drop_stats_params = std::move(other23.drop_stats_params);
  create_drop_role_params = std::move(other23.create_drop_role_params);
  grant_revoke_role_params = std::move(other23.grant_revoke_role_params);
  grant_revoke_priv_params = std::move(other23.grant_revoke_priv_params);
  sync_ddl = std::move(other23.sync_ddl);
  comment_on_params = std::move(other23.comment_on_params);
  alter_db_params = std::move(other23.alter_db_params);
  copy_test_case_params = std::move(other23.copy_test_case_params);
  debug_action = std::move(other23.debug_action);
  __isset = std::move(other23.__isset);
}
TDdlExecRequest& TDdlExecRequest::operator=(const TDdlExecRequest& other24) {
  protocol_version = other24.protocol_version;
  header = other24.header;
  ddl_type = other24.ddl_type;
  alter_table_params = other24.alter_table_params;
  alter_view_params = other24.alter_view_params;
  create_db_params = other24.create_db_params;
  create_table_params = other24.create_table_params;
  create_table_like_params = other24.create_table_like_params;
  create_view_params = other24.create_view_params;
  create_fn_params = other24.create_fn_params;
  drop_db_params = other24.drop_db_params;
  drop_table_or_view_params = other24.drop_table_or_view_params;
  truncate_params = other24.truncate_params;
  drop_fn_params = other24.drop_fn_params;
  compute_stats_params = other24.compute_stats_params;
  create_data_source_params = other24.create_data_source_params;
  drop_data_source_params = other24.drop_data_source_params;
  drop_stats_params = other24.drop_stats_params;
  create_drop_role_params = other24.create_drop_role_params;
  grant_revoke_role_params = other24.grant_revoke_role_params;
  grant_revoke_priv_params = other24.grant_revoke_priv_params;
  sync_ddl = other24.sync_ddl;
  comment_on_params = other24.comment_on_params;
  alter_db_params = other24.alter_db_params;
  copy_test_case_params = other24.copy_test_case_params;
  debug_action = other24.debug_action;
  __isset = other24.__isset;
  return *this;
}
TDdlExecRequest& TDdlExecRequest::operator=(TDdlExecRequest&& other25) {
  protocol_version = std::move(other25.protocol_version);
  header = std::move(other25.header);
  ddl_type = std::move(other25.ddl_type);
  alter_table_params = std::move(other25.alter_table_params);
  alter_view_params = std::move(other25.alter_view_params);
  create_db_params = std::move(other25.create_db_params);
  create_table_params = std::move(other25.create_table_params);
  create_table_like_params = std::move(other25.create_table_like_params);
  create_view_params = std::move(other25.create_view_params);
  create_fn_params = std::move(other25.create_fn_params);
  drop_db_params = std::move(other25.drop_db_params);
  drop_table_or_view_params = std::move(other25.drop_table_or_view_params);
  truncate_params = std::move(other25.truncate_params);
  drop_fn_params = std::move(other25.drop_fn_params);
  compute_stats_params = std::move(other25.compute_stats_params);
  create_data_source_params = std::move(other25.create_data_source_params);
  drop_data_source_params = std::move(other25.drop_data_source_params);
  drop_stats_params = std::move(other25.drop_stats_params);
  create_drop_role_params = std::move(other25.create_drop_role_params);
  grant_revoke_role_params = std::move(other25.grant_revoke_role_params);
  grant_revoke_priv_params = std::move(other25.grant_revoke_priv_params);
  sync_ddl = std::move(other25.sync_ddl);
  comment_on_params = std::move(other25.comment_on_params);
  alter_db_params = std::move(other25.alter_db_params);
  copy_test_case_params = std::move(other25.copy_test_case_params);
  debug_action = std::move(other25.debug_action);
  __isset = std::move(other25.__isset);
  return *this;
}
void TDdlExecRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDdlExecRequest(";
  out << "protocol_version=" << to_string(protocol_version);
  out << ", " << "header="; (__isset.header ? (out << to_string(header)) : (out << "<null>"));
  out << ", " << "ddl_type=" << to_string(ddl_type);
  out << ", " << "alter_table_params="; (__isset.alter_table_params ? (out << to_string(alter_table_params)) : (out << "<null>"));
  out << ", " << "alter_view_params="; (__isset.alter_view_params ? (out << to_string(alter_view_params)) : (out << "<null>"));
  out << ", " << "create_db_params="; (__isset.create_db_params ? (out << to_string(create_db_params)) : (out << "<null>"));
  out << ", " << "create_table_params="; (__isset.create_table_params ? (out << to_string(create_table_params)) : (out << "<null>"));
  out << ", " << "create_table_like_params="; (__isset.create_table_like_params ? (out << to_string(create_table_like_params)) : (out << "<null>"));
  out << ", " << "create_view_params="; (__isset.create_view_params ? (out << to_string(create_view_params)) : (out << "<null>"));
  out << ", " << "create_fn_params="; (__isset.create_fn_params ? (out << to_string(create_fn_params)) : (out << "<null>"));
  out << ", " << "drop_db_params="; (__isset.drop_db_params ? (out << to_string(drop_db_params)) : (out << "<null>"));
  out << ", " << "drop_table_or_view_params="; (__isset.drop_table_or_view_params ? (out << to_string(drop_table_or_view_params)) : (out << "<null>"));
  out << ", " << "truncate_params="; (__isset.truncate_params ? (out << to_string(truncate_params)) : (out << "<null>"));
  out << ", " << "drop_fn_params="; (__isset.drop_fn_params ? (out << to_string(drop_fn_params)) : (out << "<null>"));
  out << ", " << "compute_stats_params="; (__isset.compute_stats_params ? (out << to_string(compute_stats_params)) : (out << "<null>"));
  out << ", " << "create_data_source_params="; (__isset.create_data_source_params ? (out << to_string(create_data_source_params)) : (out << "<null>"));
  out << ", " << "drop_data_source_params="; (__isset.drop_data_source_params ? (out << to_string(drop_data_source_params)) : (out << "<null>"));
  out << ", " << "drop_stats_params="; (__isset.drop_stats_params ? (out << to_string(drop_stats_params)) : (out << "<null>"));
  out << ", " << "create_drop_role_params="; (__isset.create_drop_role_params ? (out << to_string(create_drop_role_params)) : (out << "<null>"));
  out << ", " << "grant_revoke_role_params="; (__isset.grant_revoke_role_params ? (out << to_string(grant_revoke_role_params)) : (out << "<null>"));
  out << ", " << "grant_revoke_priv_params="; (__isset.grant_revoke_priv_params ? (out << to_string(grant_revoke_priv_params)) : (out << "<null>"));
  out << ", " << "sync_ddl=" << to_string(sync_ddl);
  out << ", " << "comment_on_params="; (__isset.comment_on_params ? (out << to_string(comment_on_params)) : (out << "<null>"));
  out << ", " << "alter_db_params="; (__isset.alter_db_params ? (out << to_string(alter_db_params)) : (out << "<null>"));
  out << ", " << "copy_test_case_params="; (__isset.copy_test_case_params ? (out << to_string(copy_test_case_params)) : (out << "<null>"));
  out << ", " << "debug_action="; (__isset.debug_action ? (out << to_string(debug_action)) : (out << "<null>"));
  out << ")";
}


TDdlExecResponse::~TDdlExecResponse() throw() {
}


void TDdlExecResponse::__set_result(const TCatalogUpdateResult& val) {
  this->result = val;
}

void TDdlExecResponse::__set_new_table_created(const bool val) {
  this->new_table_created = val;
__isset.new_table_created = true;
}

void TDdlExecResponse::__set_result_set(const  ::impala::TResultSet& val) {
  this->result_set = val;
__isset.result_set = true;
}

void TDdlExecResponse::__set_table_name(const std::string& val) {
  this->table_name = val;
__isset.table_name = true;
}

void TDdlExecResponse::__set_table_create_time(const int64_t val) {
  this->table_create_time = val;
__isset.table_create_time = true;
}

void TDdlExecResponse::__set_table_location(const std::string& val) {
  this->table_location = val;
__isset.table_location = true;
}
std::ostream& operator<<(std::ostream& out, const TDdlExecResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDdlExecResponse &a, TDdlExecResponse &b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.new_table_created, b.new_table_created);
  swap(a.result_set, b.result_set);
  swap(a.table_name, b.table_name);
  swap(a.table_create_time, b.table_create_time);
  swap(a.table_location, b.table_location);
  swap(a.__isset, b.__isset);
}

TDdlExecResponse::TDdlExecResponse(const TDdlExecResponse& other26) {
  result = other26.result;
  new_table_created = other26.new_table_created;
  result_set = other26.result_set;
  table_name = other26.table_name;
  table_create_time = other26.table_create_time;
  table_location = other26.table_location;
  __isset = other26.__isset;
}
TDdlExecResponse::TDdlExecResponse( TDdlExecResponse&& other27) {
  result = std::move(other27.result);
  new_table_created = std::move(other27.new_table_created);
  result_set = std::move(other27.result_set);
  table_name = std::move(other27.table_name);
  table_create_time = std::move(other27.table_create_time);
  table_location = std::move(other27.table_location);
  __isset = std::move(other27.__isset);
}
TDdlExecResponse& TDdlExecResponse::operator=(const TDdlExecResponse& other28) {
  result = other28.result;
  new_table_created = other28.new_table_created;
  result_set = other28.result_set;
  table_name = other28.table_name;
  table_create_time = other28.table_create_time;
  table_location = other28.table_location;
  __isset = other28.__isset;
  return *this;
}
TDdlExecResponse& TDdlExecResponse::operator=(TDdlExecResponse&& other29) {
  result = std::move(other29.result);
  new_table_created = std::move(other29.new_table_created);
  result_set = std::move(other29.result_set);
  table_name = std::move(other29.table_name);
  table_create_time = std::move(other29.table_create_time);
  table_location = std::move(other29.table_location);
  __isset = std::move(other29.__isset);
  return *this;
}
void TDdlExecResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDdlExecResponse(";
  out << "result=" << to_string(result);
  out << ", " << "new_table_created="; (__isset.new_table_created ? (out << to_string(new_table_created)) : (out << "<null>"));
  out << ", " << "result_set="; (__isset.result_set ? (out << to_string(result_set)) : (out << "<null>"));
  out << ", " << "table_name="; (__isset.table_name ? (out << to_string(table_name)) : (out << "<null>"));
  out << ", " << "table_create_time="; (__isset.table_create_time ? (out << to_string(table_create_time)) : (out << "<null>"));
  out << ", " << "table_location="; (__isset.table_location ? (out << to_string(table_location)) : (out << "<null>"));
  out << ")";
}


TIcebergOperationParam::~TIcebergOperationParam() throw() {
}


void TIcebergOperationParam::__set_spec_id(const int32_t val) {
  this->spec_id = val;
__isset.spec_id = true;
}

void TIcebergOperationParam::__set_iceberg_data_files_fb(const std::vector<std::string> & val) {
  this->iceberg_data_files_fb = val;
}

void TIcebergOperationParam::__set_is_overwrite(const bool val) {
  this->is_overwrite = val;
}
std::ostream& operator<<(std::ostream& out, const TIcebergOperationParam& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TIcebergOperationParam &a, TIcebergOperationParam &b) {
  using ::std::swap;
  swap(a.spec_id, b.spec_id);
  swap(a.iceberg_data_files_fb, b.iceberg_data_files_fb);
  swap(a.is_overwrite, b.is_overwrite);
  swap(a.__isset, b.__isset);
}

TIcebergOperationParam::TIcebergOperationParam(const TIcebergOperationParam& other36) {
  spec_id = other36.spec_id;
  iceberg_data_files_fb = other36.iceberg_data_files_fb;
  is_overwrite = other36.is_overwrite;
  __isset = other36.__isset;
}
TIcebergOperationParam::TIcebergOperationParam( TIcebergOperationParam&& other37) {
  spec_id = std::move(other37.spec_id);
  iceberg_data_files_fb = std::move(other37.iceberg_data_files_fb);
  is_overwrite = std::move(other37.is_overwrite);
  __isset = std::move(other37.__isset);
}
TIcebergOperationParam& TIcebergOperationParam::operator=(const TIcebergOperationParam& other38) {
  spec_id = other38.spec_id;
  iceberg_data_files_fb = other38.iceberg_data_files_fb;
  is_overwrite = other38.is_overwrite;
  __isset = other38.__isset;
  return *this;
}
TIcebergOperationParam& TIcebergOperationParam::operator=(TIcebergOperationParam&& other39) {
  spec_id = std::move(other39.spec_id);
  iceberg_data_files_fb = std::move(other39.iceberg_data_files_fb);
  is_overwrite = std::move(other39.is_overwrite);
  __isset = std::move(other39.__isset);
  return *this;
}
void TIcebergOperationParam::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TIcebergOperationParam(";
  out << "spec_id="; (__isset.spec_id ? (out << to_string(spec_id)) : (out << "<null>"));
  out << ", " << "iceberg_data_files_fb=" << to_string(iceberg_data_files_fb);
  out << ", " << "is_overwrite=" << to_string(is_overwrite);
  out << ")";
}


TUpdatedPartition::~TUpdatedPartition() throw() {
}


void TUpdatedPartition::__set_files(const std::vector<std::string> & val) {
  this->files = val;
}
std::ostream& operator<<(std::ostream& out, const TUpdatedPartition& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TUpdatedPartition &a, TUpdatedPartition &b) {
  using ::std::swap;
  swap(a.files, b.files);
}

TUpdatedPartition::TUpdatedPartition(const TUpdatedPartition& other46) {
  files = other46.files;
}
TUpdatedPartition::TUpdatedPartition( TUpdatedPartition&& other47) {
  files = std::move(other47.files);
}
TUpdatedPartition& TUpdatedPartition::operator=(const TUpdatedPartition& other48) {
  files = other48.files;
  return *this;
}
TUpdatedPartition& TUpdatedPartition::operator=(TUpdatedPartition&& other49) {
  files = std::move(other49.files);
  return *this;
}
void TUpdatedPartition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TUpdatedPartition(";
  out << "files=" << to_string(files);
  out << ")";
}


TUpdateCatalogRequest::~TUpdateCatalogRequest() throw() {
}


void TUpdateCatalogRequest::__set_protocol_version(const CatalogServiceVersion::type val) {
  this->protocol_version = val;
}

void TUpdateCatalogRequest::__set_sync_ddl(const bool val) {
  this->sync_ddl = val;
}

void TUpdateCatalogRequest::__set_header(const TCatalogServiceRequestHeader& val) {
  this->header = val;
__isset.header = true;
}

void TUpdateCatalogRequest::__set_target_table(const std::string& val) {
  this->target_table = val;
}

void TUpdateCatalogRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
}

void TUpdateCatalogRequest::__set_updated_partitions(const std::map<std::string, TUpdatedPartition> & val) {
  this->updated_partitions = val;
}

void TUpdateCatalogRequest::__set_is_overwrite(const bool val) {
  this->is_overwrite = val;
}

void TUpdateCatalogRequest::__set_transaction_id(const int64_t val) {
  this->transaction_id = val;
__isset.transaction_id = true;
}

void TUpdateCatalogRequest::__set_write_id(const int64_t val) {
  this->write_id = val;
__isset.write_id = true;
}

void TUpdateCatalogRequest::__set_iceberg_operation(const TIcebergOperationParam& val) {
  this->iceberg_operation = val;
__isset.iceberg_operation = true;
}
std::ostream& operator<<(std::ostream& out, const TUpdateCatalogRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TUpdateCatalogRequest &a, TUpdateCatalogRequest &b) {
  using ::std::swap;
  swap(a.protocol_version, b.protocol_version);
  swap(a.sync_ddl, b.sync_ddl);
  swap(a.header, b.header);
  swap(a.target_table, b.target_table);
  swap(a.db_name, b.db_name);
  swap(a.updated_partitions, b.updated_partitions);
  swap(a.is_overwrite, b.is_overwrite);
  swap(a.transaction_id, b.transaction_id);
  swap(a.write_id, b.write_id);
  swap(a.iceberg_operation, b.iceberg_operation);
  swap(a.__isset, b.__isset);
}

TUpdateCatalogRequest::TUpdateCatalogRequest(const TUpdateCatalogRequest& other59) {
  protocol_version = other59.protocol_version;
  sync_ddl = other59.sync_ddl;
  header = other59.header;
  target_table = other59.target_table;
  db_name = other59.db_name;
  updated_partitions = other59.updated_partitions;
  is_overwrite = other59.is_overwrite;
  transaction_id = other59.transaction_id;
  write_id = other59.write_id;
  iceberg_operation = other59.iceberg_operation;
  __isset = other59.__isset;
}
TUpdateCatalogRequest::TUpdateCatalogRequest( TUpdateCatalogRequest&& other60) {
  protocol_version = std::move(other60.protocol_version);
  sync_ddl = std::move(other60.sync_ddl);
  header = std::move(other60.header);
  target_table = std::move(other60.target_table);
  db_name = std::move(other60.db_name);
  updated_partitions = std::move(other60.updated_partitions);
  is_overwrite = std::move(other60.is_overwrite);
  transaction_id = std::move(other60.transaction_id);
  write_id = std::move(other60.write_id);
  iceberg_operation = std::move(other60.iceberg_operation);
  __isset = std::move(other60.__isset);
}
TUpdateCatalogRequest& TUpdateCatalogRequest::operator=(const TUpdateCatalogRequest& other61) {
  protocol_version = other61.protocol_version;
  sync_ddl = other61.sync_ddl;
  header = other61.header;
  target_table = other61.target_table;
  db_name = other61.db_name;
  updated_partitions = other61.updated_partitions;
  is_overwrite = other61.is_overwrite;
  transaction_id = other61.transaction_id;
  write_id = other61.write_id;
  iceberg_operation = other61.iceberg_operation;
  __isset = other61.__isset;
  return *this;
}
TUpdateCatalogRequest& TUpdateCatalogRequest::operator=(TUpdateCatalogRequest&& other62) {
  protocol_version = std::move(other62.protocol_version);
  sync_ddl = std::move(other62.sync_ddl);
  header = std::move(other62.header);
  target_table = std::move(other62.target_table);
  db_name = std::move(other62.db_name);
  updated_partitions = std::move(other62.updated_partitions);
  is_overwrite = std::move(other62.is_overwrite);
  transaction_id = std::move(other62.transaction_id);
  write_id = std::move(other62.write_id);
  iceberg_operation = std::move(other62.iceberg_operation);
  __isset = std::move(other62.__isset);
  return *this;
}
void TUpdateCatalogRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TUpdateCatalogRequest(";
  out << "protocol_version=" << to_string(protocol_version);
  out << ", " << "sync_ddl=" << to_string(sync_ddl);
  out << ", " << "header="; (__isset.header ? (out << to_string(header)) : (out << "<null>"));
  out << ", " << "target_table=" << to_string(target_table);
  out << ", " << "db_name=" << to_string(db_name);
  out << ", " << "updated_partitions=" << to_string(updated_partitions);
  out << ", " << "is_overwrite=" << to_string(is_overwrite);
  out << ", " << "transaction_id="; (__isset.transaction_id ? (out << to_string(transaction_id)) : (out << "<null>"));
  out << ", " << "write_id="; (__isset.write_id ? (out << to_string(write_id)) : (out << "<null>"));
  out << ", " << "iceberg_operation="; (__isset.iceberg_operation ? (out << to_string(iceberg_operation)) : (out << "<null>"));
  out << ")";
}


TUpdateCatalogResponse::~TUpdateCatalogResponse() throw() {
}


void TUpdateCatalogResponse::__set_result(const TCatalogUpdateResult& val) {
  this->result = val;
}
std::ostream& operator<<(std::ostream& out, const TUpdateCatalogResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TUpdateCatalogResponse &a, TUpdateCatalogResponse &b) {
  using ::std::swap;
  swap(a.result, b.result);
}

TUpdateCatalogResponse::TUpdateCatalogResponse(const TUpdateCatalogResponse& other63) {
  result = other63.result;
}
TUpdateCatalogResponse::TUpdateCatalogResponse( TUpdateCatalogResponse&& other64) {
  result = std::move(other64.result);
}
TUpdateCatalogResponse& TUpdateCatalogResponse::operator=(const TUpdateCatalogResponse& other65) {
  result = other65.result;
  return *this;
}
TUpdateCatalogResponse& TUpdateCatalogResponse::operator=(TUpdateCatalogResponse&& other66) {
  result = std::move(other66.result);
  return *this;
}
void TUpdateCatalogResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TUpdateCatalogResponse(";
  out << "result=" << to_string(result);
  out << ")";
}


TResetMetadataRequest::~TResetMetadataRequest() throw() {
}


void TResetMetadataRequest::__set_protocol_version(const CatalogServiceVersion::type val) {
  this->protocol_version = val;
}

void TResetMetadataRequest::__set_header(const TCatalogServiceRequestHeader& val) {
  this->header = val;
__isset.header = true;
}

void TResetMetadataRequest::__set_is_refresh(const bool val) {
  this->is_refresh = val;
}

void TResetMetadataRequest::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
__isset.table_name = true;
}

void TResetMetadataRequest::__set_partition_spec(const std::vector< ::impala::TPartitionKeyValue> & val) {
  this->partition_spec = val;
__isset.partition_spec = true;
}

void TResetMetadataRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
__isset.db_name = true;
}

void TResetMetadataRequest::__set_sync_ddl(const bool val) {
  this->sync_ddl = val;
}

void TResetMetadataRequest::__set_authorization(const bool val) {
  this->authorization = val;
__isset.authorization = true;
}

void TResetMetadataRequest::__set_refresh_updated_hms_partitions(const bool val) {
  this->refresh_updated_hms_partitions = val;
__isset.refresh_updated_hms_partitions = true;
}

void TResetMetadataRequest::__set_debug_action(const std::string& val) {
  this->debug_action = val;
__isset.debug_action = true;
}
std::ostream& operator<<(std::ostream& out, const TResetMetadataRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TResetMetadataRequest &a, TResetMetadataRequest &b) {
  using ::std::swap;
  swap(a.protocol_version, b.protocol_version);
  swap(a.header, b.header);
  swap(a.is_refresh, b.is_refresh);
  swap(a.table_name, b.table_name);
  swap(a.partition_spec, b.partition_spec);
  swap(a.db_name, b.db_name);
  swap(a.sync_ddl, b.sync_ddl);
  swap(a.authorization, b.authorization);
  swap(a.refresh_updated_hms_partitions, b.refresh_updated_hms_partitions);
  swap(a.debug_action, b.debug_action);
  swap(a.__isset, b.__isset);
}

TResetMetadataRequest::TResetMetadataRequest(const TResetMetadataRequest& other74) {
  protocol_version = other74.protocol_version;
  header = other74.header;
  is_refresh = other74.is_refresh;
  table_name = other74.table_name;
  partition_spec = other74.partition_spec;
  db_name = other74.db_name;
  sync_ddl = other74.sync_ddl;
  authorization = other74.authorization;
  refresh_updated_hms_partitions = other74.refresh_updated_hms_partitions;
  debug_action = other74.debug_action;
  __isset = other74.__isset;
}
TResetMetadataRequest::TResetMetadataRequest( TResetMetadataRequest&& other75) {
  protocol_version = std::move(other75.protocol_version);
  header = std::move(other75.header);
  is_refresh = std::move(other75.is_refresh);
  table_name = std::move(other75.table_name);
  partition_spec = std::move(other75.partition_spec);
  db_name = std::move(other75.db_name);
  sync_ddl = std::move(other75.sync_ddl);
  authorization = std::move(other75.authorization);
  refresh_updated_hms_partitions = std::move(other75.refresh_updated_hms_partitions);
  debug_action = std::move(other75.debug_action);
  __isset = std::move(other75.__isset);
}
TResetMetadataRequest& TResetMetadataRequest::operator=(const TResetMetadataRequest& other76) {
  protocol_version = other76.protocol_version;
  header = other76.header;
  is_refresh = other76.is_refresh;
  table_name = other76.table_name;
  partition_spec = other76.partition_spec;
  db_name = other76.db_name;
  sync_ddl = other76.sync_ddl;
  authorization = other76.authorization;
  refresh_updated_hms_partitions = other76.refresh_updated_hms_partitions;
  debug_action = other76.debug_action;
  __isset = other76.__isset;
  return *this;
}
TResetMetadataRequest& TResetMetadataRequest::operator=(TResetMetadataRequest&& other77) {
  protocol_version = std::move(other77.protocol_version);
  header = std::move(other77.header);
  is_refresh = std::move(other77.is_refresh);
  table_name = std::move(other77.table_name);
  partition_spec = std::move(other77.partition_spec);
  db_name = std::move(other77.db_name);
  sync_ddl = std::move(other77.sync_ddl);
  authorization = std::move(other77.authorization);
  refresh_updated_hms_partitions = std::move(other77.refresh_updated_hms_partitions);
  debug_action = std::move(other77.debug_action);
  __isset = std::move(other77.__isset);
  return *this;
}
void TResetMetadataRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TResetMetadataRequest(";
  out << "protocol_version=" << to_string(protocol_version);
  out << ", " << "header="; (__isset.header ? (out << to_string(header)) : (out << "<null>"));
  out << ", " << "is_refresh=" << to_string(is_refresh);
  out << ", " << "table_name="; (__isset.table_name ? (out << to_string(table_name)) : (out << "<null>"));
  out << ", " << "partition_spec="; (__isset.partition_spec ? (out << to_string(partition_spec)) : (out << "<null>"));
  out << ", " << "db_name="; (__isset.db_name ? (out << to_string(db_name)) : (out << "<null>"));
  out << ", " << "sync_ddl=" << to_string(sync_ddl);
  out << ", " << "authorization="; (__isset.authorization ? (out << to_string(authorization)) : (out << "<null>"));
  out << ", " << "refresh_updated_hms_partitions="; (__isset.refresh_updated_hms_partitions ? (out << to_string(refresh_updated_hms_partitions)) : (out << "<null>"));
  out << ", " << "debug_action="; (__isset.debug_action ? (out << to_string(debug_action)) : (out << "<null>"));
  out << ")";
}


TResetMetadataResponse::~TResetMetadataResponse() throw() {
}


void TResetMetadataResponse::__set_result(const TCatalogUpdateResult& val) {
  this->result = val;
}
std::ostream& operator<<(std::ostream& out, const TResetMetadataResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TResetMetadataResponse &a, TResetMetadataResponse &b) {
  using ::std::swap;
  swap(a.result, b.result);
}

TResetMetadataResponse::TResetMetadataResponse(const TResetMetadataResponse& other78) {
  result = other78.result;
}
TResetMetadataResponse::TResetMetadataResponse( TResetMetadataResponse&& other79) {
  result = std::move(other79.result);
}
TResetMetadataResponse& TResetMetadataResponse::operator=(const TResetMetadataResponse& other80) {
  result = other80.result;
  return *this;
}
TResetMetadataResponse& TResetMetadataResponse::operator=(TResetMetadataResponse&& other81) {
  result = std::move(other81.result);
  return *this;
}
void TResetMetadataResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TResetMetadataResponse(";
  out << "result=" << to_string(result);
  out << ")";
}


TGetFunctionsRequest::~TGetFunctionsRequest() throw() {
}


void TGetFunctionsRequest::__set_protocol_version(const CatalogServiceVersion::type val) {
  this->protocol_version = val;
}

void TGetFunctionsRequest::__set_header(const TCatalogServiceRequestHeader& val) {
  this->header = val;
__isset.header = true;
}

void TGetFunctionsRequest::__set_db_name(const std::string& val) {
  this->db_name = val;
__isset.db_name = true;
}
std::ostream& operator<<(std::ostream& out, const TGetFunctionsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetFunctionsRequest &a, TGetFunctionsRequest &b) {
  using ::std::swap;
  swap(a.protocol_version, b.protocol_version);
  swap(a.header, b.header);
  swap(a.db_name, b.db_name);
  swap(a.__isset, b.__isset);
}

TGetFunctionsRequest::TGetFunctionsRequest(const TGetFunctionsRequest& other83) {
  protocol_version = other83.protocol_version;
  header = other83.header;
  db_name = other83.db_name;
  __isset = other83.__isset;
}
TGetFunctionsRequest::TGetFunctionsRequest( TGetFunctionsRequest&& other84) {
  protocol_version = std::move(other84.protocol_version);
  header = std::move(other84.header);
  db_name = std::move(other84.db_name);
  __isset = std::move(other84.__isset);
}
TGetFunctionsRequest& TGetFunctionsRequest::operator=(const TGetFunctionsRequest& other85) {
  protocol_version = other85.protocol_version;
  header = other85.header;
  db_name = other85.db_name;
  __isset = other85.__isset;
  return *this;
}
TGetFunctionsRequest& TGetFunctionsRequest::operator=(TGetFunctionsRequest&& other86) {
  protocol_version = std::move(other86.protocol_version);
  header = std::move(other86.header);
  db_name = std::move(other86.db_name);
  __isset = std::move(other86.__isset);
  return *this;
}
void TGetFunctionsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetFunctionsRequest(";
  out << "protocol_version=" << to_string(protocol_version);
  out << ", " << "header="; (__isset.header ? (out << to_string(header)) : (out << "<null>"));
  out << ", " << "db_name="; (__isset.db_name ? (out << to_string(db_name)) : (out << "<null>"));
  out << ")";
}


TGetFunctionsResponse::~TGetFunctionsResponse() throw() {
}


void TGetFunctionsResponse::__set_status(const  ::impala::TStatus& val) {
  this->status = val;
__isset.status = true;
}

void TGetFunctionsResponse::__set_functions(const std::vector< ::impala::TFunction> & val) {
  this->functions = val;
__isset.functions = true;
}
std::ostream& operator<<(std::ostream& out, const TGetFunctionsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetFunctionsResponse &a, TGetFunctionsResponse &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.functions, b.functions);
  swap(a.__isset, b.__isset);
}

TGetFunctionsResponse::TGetFunctionsResponse(const TGetFunctionsResponse& other93) {
  status = other93.status;
  functions = other93.functions;
  __isset = other93.__isset;
}
TGetFunctionsResponse::TGetFunctionsResponse( TGetFunctionsResponse&& other94) {
  status = std::move(other94.status);
  functions = std::move(other94.functions);
  __isset = std::move(other94.__isset);
}
TGetFunctionsResponse& TGetFunctionsResponse::operator=(const TGetFunctionsResponse& other95) {
  status = other95.status;
  functions = other95.functions;
  __isset = other95.__isset;
  return *this;
}
TGetFunctionsResponse& TGetFunctionsResponse::operator=(TGetFunctionsResponse&& other96) {
  status = std::move(other96.status);
  functions = std::move(other96.functions);
  __isset = std::move(other96.__isset);
  return *this;
}
void TGetFunctionsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetFunctionsResponse(";
  out << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "functions="; (__isset.functions ? (out << to_string(functions)) : (out << "<null>"));
  out << ")";
}


TCatalogInfoSelector::~TCatalogInfoSelector() throw() {
}


void TCatalogInfoSelector::__set_want_db_names(const bool val) {
  this->want_db_names = val;
}
std::ostream& operator<<(std::ostream& out, const TCatalogInfoSelector& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TCatalogInfoSelector &a, TCatalogInfoSelector &b) {
  using ::std::swap;
  swap(a.want_db_names, b.want_db_names);
  swap(a.__isset, b.__isset);
}

TCatalogInfoSelector::TCatalogInfoSelector(const TCatalogInfoSelector& other97) {
  want_db_names = other97.want_db_names;
  __isset = other97.__isset;
}
TCatalogInfoSelector::TCatalogInfoSelector( TCatalogInfoSelector&& other98) {
  want_db_names = std::move(other98.want_db_names);
  __isset = std::move(other98.__isset);
}
TCatalogInfoSelector& TCatalogInfoSelector::operator=(const TCatalogInfoSelector& other99) {
  want_db_names = other99.want_db_names;
  __isset = other99.__isset;
  return *this;
}
TCatalogInfoSelector& TCatalogInfoSelector::operator=(TCatalogInfoSelector&& other100) {
  want_db_names = std::move(other100.want_db_names);
  __isset = std::move(other100.__isset);
  return *this;
}
void TCatalogInfoSelector::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCatalogInfoSelector(";
  out << "want_db_names=" << to_string(want_db_names);
  out << ")";
}


TPartialCatalogInfo::~TPartialCatalogInfo() throw() {
}


void TPartialCatalogInfo::__set_db_names(const std::vector<std::string> & val) {
  this->db_names = val;
}
std::ostream& operator<<(std::ostream& out, const TPartialCatalogInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TPartialCatalogInfo &a, TPartialCatalogInfo &b) {
  using ::std::swap;
  swap(a.db_names, b.db_names);
  swap(a.__isset, b.__isset);
}

TPartialCatalogInfo::TPartialCatalogInfo(const TPartialCatalogInfo& other107) {
  db_names = other107.db_names;
  __isset = other107.__isset;
}
TPartialCatalogInfo::TPartialCatalogInfo( TPartialCatalogInfo&& other108) {
  db_names = std::move(other108.db_names);
  __isset = std::move(other108.__isset);
}
TPartialCatalogInfo& TPartialCatalogInfo::operator=(const TPartialCatalogInfo& other109) {
  db_names = other109.db_names;
  __isset = other109.__isset;
  return *this;
}
TPartialCatalogInfo& TPartialCatalogInfo::operator=(TPartialCatalogInfo&& other110) {
  db_names = std::move(other110.db_names);
  __isset = std::move(other110.__isset);
  return *this;
}
void TPartialCatalogInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPartialCatalogInfo(";
  out << "db_names=" << to_string(db_names);
  out << ")";
}


TTableInfoSelector::~TTableInfoSelector() throw() {
}


void TTableInfoSelector::__set_want_hms_table(const bool val) {
  this->want_hms_table = val;
}

void TTableInfoSelector::__set_partition_ids(const std::vector<int64_t> & val) {
  this->partition_ids = val;
__isset.partition_ids = true;
}

void TTableInfoSelector::__set_want_partition_names(const bool val) {
  this->want_partition_names = val;
}

void TTableInfoSelector::__set_want_partition_metadata(const bool val) {
  this->want_partition_metadata = val;
}

void TTableInfoSelector::__set_want_partition_files(const bool val) {
  this->want_partition_files = val;
}

void TTableInfoSelector::__set_want_stats_for_column_names(const std::vector<std::string> & val) {
  this->want_stats_for_column_names = val;
__isset.want_stats_for_column_names = true;
}

void TTableInfoSelector::__set_want_partition_stats(const bool val) {
  this->want_partition_stats = val;
}

void TTableInfoSelector::__set_want_table_constraints(const bool val) {
  this->want_table_constraints = val;
}

void TTableInfoSelector::__set_valid_write_ids(const  ::impala::TValidWriteIdList& val) {
  this->valid_write_ids = val;
__isset.valid_write_ids = true;
}

void TTableInfoSelector::__set_table_id(const int64_t val) {
  this->table_id = val;
__isset.table_id = true;
}

void TTableInfoSelector::__set_want_stats_for_all_columns(const bool val) {
  this->want_stats_for_all_columns = val;
__isset.want_stats_for_all_columns = true;
}

void TTableInfoSelector::__set_want_hms_partition(const bool val) {
  this->want_hms_partition = val;
}

void TTableInfoSelector::__set_want_iceberg_snapshot(const bool val) {
  this->want_iceberg_snapshot = val;
}
std::ostream& operator<<(std::ostream& out, const TTableInfoSelector& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TTableInfoSelector &a, TTableInfoSelector &b) {
  using ::std::swap;
  swap(a.want_hms_table, b.want_hms_table);
  swap(a.partition_ids, b.partition_ids);
  swap(a.want_partition_names, b.want_partition_names);
  swap(a.want_partition_metadata, b.want_partition_metadata);
  swap(a.want_partition_files, b.want_partition_files);
  swap(a.want_stats_for_column_names, b.want_stats_for_column_names);
  swap(a.want_partition_stats, b.want_partition_stats);
  swap(a.want_table_constraints, b.want_table_constraints);
  swap(a.valid_write_ids, b.valid_write_ids);
  swap(a.table_id, b.table_id);
  swap(a.want_stats_for_all_columns, b.want_stats_for_all_columns);
  swap(a.want_hms_partition, b.want_hms_partition);
  swap(a.want_iceberg_snapshot, b.want_iceberg_snapshot);
  swap(a.__isset, b.__isset);
}

TTableInfoSelector::TTableInfoSelector(const TTableInfoSelector& other123) {
  want_hms_table = other123.want_hms_table;
  partition_ids = other123.partition_ids;
  want_partition_names = other123.want_partition_names;
  want_partition_metadata = other123.want_partition_metadata;
  want_partition_files = other123.want_partition_files;
  want_stats_for_column_names = other123.want_stats_for_column_names;
  want_partition_stats = other123.want_partition_stats;
  want_table_constraints = other123.want_table_constraints;
  valid_write_ids = other123.valid_write_ids;
  table_id = other123.table_id;
  want_stats_for_all_columns = other123.want_stats_for_all_columns;
  want_hms_partition = other123.want_hms_partition;
  want_iceberg_snapshot = other123.want_iceberg_snapshot;
  __isset = other123.__isset;
}
TTableInfoSelector::TTableInfoSelector( TTableInfoSelector&& other124) {
  want_hms_table = std::move(other124.want_hms_table);
  partition_ids = std::move(other124.partition_ids);
  want_partition_names = std::move(other124.want_partition_names);
  want_partition_metadata = std::move(other124.want_partition_metadata);
  want_partition_files = std::move(other124.want_partition_files);
  want_stats_for_column_names = std::move(other124.want_stats_for_column_names);
  want_partition_stats = std::move(other124.want_partition_stats);
  want_table_constraints = std::move(other124.want_table_constraints);
  valid_write_ids = std::move(other124.valid_write_ids);
  table_id = std::move(other124.table_id);
  want_stats_for_all_columns = std::move(other124.want_stats_for_all_columns);
  want_hms_partition = std::move(other124.want_hms_partition);
  want_iceberg_snapshot = std::move(other124.want_iceberg_snapshot);
  __isset = std::move(other124.__isset);
}
TTableInfoSelector& TTableInfoSelector::operator=(const TTableInfoSelector& other125) {
  want_hms_table = other125.want_hms_table;
  partition_ids = other125.partition_ids;
  want_partition_names = other125.want_partition_names;
  want_partition_metadata = other125.want_partition_metadata;
  want_partition_files = other125.want_partition_files;
  want_stats_for_column_names = other125.want_stats_for_column_names;
  want_partition_stats = other125.want_partition_stats;
  want_table_constraints = other125.want_table_constraints;
  valid_write_ids = other125.valid_write_ids;
  table_id = other125.table_id;
  want_stats_for_all_columns = other125.want_stats_for_all_columns;
  want_hms_partition = other125.want_hms_partition;
  want_iceberg_snapshot = other125.want_iceberg_snapshot;
  __isset = other125.__isset;
  return *this;
}
TTableInfoSelector& TTableInfoSelector::operator=(TTableInfoSelector&& other126) {
  want_hms_table = std::move(other126.want_hms_table);
  partition_ids = std::move(other126.partition_ids);
  want_partition_names = std::move(other126.want_partition_names);
  want_partition_metadata = std::move(other126.want_partition_metadata);
  want_partition_files = std::move(other126.want_partition_files);
  want_stats_for_column_names = std::move(other126.want_stats_for_column_names);
  want_partition_stats = std::move(other126.want_partition_stats);
  want_table_constraints = std::move(other126.want_table_constraints);
  valid_write_ids = std::move(other126.valid_write_ids);
  table_id = std::move(other126.table_id);
  want_stats_for_all_columns = std::move(other126.want_stats_for_all_columns);
  want_hms_partition = std::move(other126.want_hms_partition);
  want_iceberg_snapshot = std::move(other126.want_iceberg_snapshot);
  __isset = std::move(other126.__isset);
  return *this;
}
void TTableInfoSelector::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTableInfoSelector(";
  out << "want_hms_table=" << to_string(want_hms_table);
  out << ", " << "partition_ids="; (__isset.partition_ids ? (out << to_string(partition_ids)) : (out << "<null>"));
  out << ", " << "want_partition_names=" << to_string(want_partition_names);
  out << ", " << "want_partition_metadata=" << to_string(want_partition_metadata);
  out << ", " << "want_partition_files=" << to_string(want_partition_files);
  out << ", " << "want_stats_for_column_names="; (__isset.want_stats_for_column_names ? (out << to_string(want_stats_for_column_names)) : (out << "<null>"));
  out << ", " << "want_partition_stats=" << to_string(want_partition_stats);
  out << ", " << "want_table_constraints=" << to_string(want_table_constraints);
  out << ", " << "valid_write_ids="; (__isset.valid_write_ids ? (out << to_string(valid_write_ids)) : (out << "<null>"));
  out << ", " << "table_id="; (__isset.table_id ? (out << to_string(table_id)) : (out << "<null>"));
  out << ", " << "want_stats_for_all_columns="; (__isset.want_stats_for_all_columns ? (out << to_string(want_stats_for_all_columns)) : (out << "<null>"));
  out << ", " << "want_hms_partition=" << to_string(want_hms_partition);
  out << ", " << "want_iceberg_snapshot=" << to_string(want_iceberg_snapshot);
  out << ")";
}


TPartialPartitionInfo::~TPartialPartitionInfo() throw() {
}


void TPartialPartitionInfo::__set_id(const int64_t val) {
  this->id = val;
}

void TPartialPartitionInfo::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void TPartialPartitionInfo::__set_hms_partition(const  ::Apache::Hadoop::Hive::Partition& val) {
  this->hms_partition = val;
__isset.hms_partition = true;
}

void TPartialPartitionInfo::__set_file_descriptors(const std::vector< ::impala::THdfsFileDesc> & val) {
  this->file_descriptors = val;
__isset.file_descriptors = true;
}

void TPartialPartitionInfo::__set_insert_file_descriptors(const std::vector< ::impala::THdfsFileDesc> & val) {
  this->insert_file_descriptors = val;
__isset.insert_file_descriptors = true;
}

void TPartialPartitionInfo::__set_delete_file_descriptors(const std::vector< ::impala::THdfsFileDesc> & val) {
  this->delete_file_descriptors = val;
__isset.delete_file_descriptors = true;
}

void TPartialPartitionInfo::__set_last_compaction_id(const int64_t val) {
  this->last_compaction_id = val;
__isset.last_compaction_id = true;
}

void TPartialPartitionInfo::__set_partition_stats(const std::string& val) {
  this->partition_stats = val;
__isset.partition_stats = true;
}

void TPartialPartitionInfo::__set_has_incremental_stats(const bool val) {
  this->has_incremental_stats = val;
__isset.has_incremental_stats = true;
}

void TPartialPartitionInfo::__set_is_marked_cached(const bool val) {
  this->is_marked_cached = val;
__isset.is_marked_cached = true;
}

void TPartialPartitionInfo::__set_hms_parameters(const std::map<std::string, std::string> & val) {
  this->hms_parameters = val;
__isset.hms_parameters = true;
}

void TPartialPartitionInfo::__set_write_id(const int64_t val) {
  this->write_id = val;
__isset.write_id = true;
}

void TPartialPartitionInfo::__set_hdfs_storage_descriptor(const  ::impala::THdfsStorageDescriptor& val) {
  this->hdfs_storage_descriptor = val;
__isset.hdfs_storage_descriptor = true;
}

void TPartialPartitionInfo::__set_location(const  ::impala::THdfsPartitionLocation& val) {
  this->location = val;
__isset.location = true;
}
std::ostream& operator<<(std::ostream& out, const TPartialPartitionInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TPartialPartitionInfo &a, TPartialPartitionInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.hms_partition, b.hms_partition);
  swap(a.file_descriptors, b.file_descriptors);
  swap(a.insert_file_descriptors, b.insert_file_descriptors);
  swap(a.delete_file_descriptors, b.delete_file_descriptors);
  swap(a.last_compaction_id, b.last_compaction_id);
  swap(a.partition_stats, b.partition_stats);
  swap(a.has_incremental_stats, b.has_incremental_stats);
  swap(a.is_marked_cached, b.is_marked_cached);
  swap(a.hms_parameters, b.hms_parameters);
  swap(a.write_id, b.write_id);
  swap(a.hdfs_storage_descriptor, b.hdfs_storage_descriptor);
  swap(a.location, b.location);
  swap(a.__isset, b.__isset);
}

TPartialPartitionInfo::TPartialPartitionInfo(const TPartialPartitionInfo& other153) {
  id = other153.id;
  name = other153.name;
  hms_partition = other153.hms_partition;
  file_descriptors = other153.file_descriptors;
  insert_file_descriptors = other153.insert_file_descriptors;
  delete_file_descriptors = other153.delete_file_descriptors;
  last_compaction_id = other153.last_compaction_id;
  partition_stats = other153.partition_stats;
  has_incremental_stats = other153.has_incremental_stats;
  is_marked_cached = other153.is_marked_cached;
  hms_parameters = other153.hms_parameters;
  write_id = other153.write_id;
  hdfs_storage_descriptor = other153.hdfs_storage_descriptor;
  location = other153.location;
  __isset = other153.__isset;
}
TPartialPartitionInfo::TPartialPartitionInfo( TPartialPartitionInfo&& other154) {
  id = std::move(other154.id);
  name = std::move(other154.name);
  hms_partition = std::move(other154.hms_partition);
  file_descriptors = std::move(other154.file_descriptors);
  insert_file_descriptors = std::move(other154.insert_file_descriptors);
  delete_file_descriptors = std::move(other154.delete_file_descriptors);
  last_compaction_id = std::move(other154.last_compaction_id);
  partition_stats = std::move(other154.partition_stats);
  has_incremental_stats = std::move(other154.has_incremental_stats);
  is_marked_cached = std::move(other154.is_marked_cached);
  hms_parameters = std::move(other154.hms_parameters);
  write_id = std::move(other154.write_id);
  hdfs_storage_descriptor = std::move(other154.hdfs_storage_descriptor);
  location = std::move(other154.location);
  __isset = std::move(other154.__isset);
}
TPartialPartitionInfo& TPartialPartitionInfo::operator=(const TPartialPartitionInfo& other155) {
  id = other155.id;
  name = other155.name;
  hms_partition = other155.hms_partition;
  file_descriptors = other155.file_descriptors;
  insert_file_descriptors = other155.insert_file_descriptors;
  delete_file_descriptors = other155.delete_file_descriptors;
  last_compaction_id = other155.last_compaction_id;
  partition_stats = other155.partition_stats;
  has_incremental_stats = other155.has_incremental_stats;
  is_marked_cached = other155.is_marked_cached;
  hms_parameters = other155.hms_parameters;
  write_id = other155.write_id;
  hdfs_storage_descriptor = other155.hdfs_storage_descriptor;
  location = other155.location;
  __isset = other155.__isset;
  return *this;
}
TPartialPartitionInfo& TPartialPartitionInfo::operator=(TPartialPartitionInfo&& other156) {
  id = std::move(other156.id);
  name = std::move(other156.name);
  hms_partition = std::move(other156.hms_partition);
  file_descriptors = std::move(other156.file_descriptors);
  insert_file_descriptors = std::move(other156.insert_file_descriptors);
  delete_file_descriptors = std::move(other156.delete_file_descriptors);
  last_compaction_id = std::move(other156.last_compaction_id);
  partition_stats = std::move(other156.partition_stats);
  has_incremental_stats = std::move(other156.has_incremental_stats);
  is_marked_cached = std::move(other156.is_marked_cached);
  hms_parameters = std::move(other156.hms_parameters);
  write_id = std::move(other156.write_id);
  hdfs_storage_descriptor = std::move(other156.hdfs_storage_descriptor);
  location = std::move(other156.location);
  __isset = std::move(other156.__isset);
  return *this;
}
void TPartialPartitionInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPartialPartitionInfo(";
  out << "id=" << to_string(id);
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "hms_partition="; (__isset.hms_partition ? (out << to_string(hms_partition)) : (out << "<null>"));
  out << ", " << "file_descriptors="; (__isset.file_descriptors ? (out << to_string(file_descriptors)) : (out << "<null>"));
  out << ", " << "insert_file_descriptors="; (__isset.insert_file_descriptors ? (out << to_string(insert_file_descriptors)) : (out << "<null>"));
  out << ", " << "delete_file_descriptors="; (__isset.delete_file_descriptors ? (out << to_string(delete_file_descriptors)) : (out << "<null>"));
  out << ", " << "last_compaction_id="; (__isset.last_compaction_id ? (out << to_string(last_compaction_id)) : (out << "<null>"));
  out << ", " << "partition_stats="; (__isset.partition_stats ? (out << to_string(partition_stats)) : (out << "<null>"));
  out << ", " << "has_incremental_stats="; (__isset.has_incremental_stats ? (out << to_string(has_incremental_stats)) : (out << "<null>"));
  out << ", " << "is_marked_cached="; (__isset.is_marked_cached ? (out << to_string(is_marked_cached)) : (out << "<null>"));
  out << ", " << "hms_parameters="; (__isset.hms_parameters ? (out << to_string(hms_parameters)) : (out << "<null>"));
  out << ", " << "write_id="; (__isset.write_id ? (out << to_string(write_id)) : (out << "<null>"));
  out << ", " << "hdfs_storage_descriptor="; (__isset.hdfs_storage_descriptor ? (out << to_string(hdfs_storage_descriptor)) : (out << "<null>"));
  out << ", " << "location="; (__isset.location ? (out << to_string(location)) : (out << "<null>"));
  out << ")";
}


TIcebergSnapshot::~TIcebergSnapshot() throw() {
}


void TIcebergSnapshot::__set_snapshot_id(const int64_t val) {
  this->snapshot_id = val;
}

void TIcebergSnapshot::__set_iceberg_file_desc_map(const std::map<std::string,  ::impala::THdfsFileDesc> & val) {
  this->iceberg_file_desc_map = val;
__isset.iceberg_file_desc_map = true;
}
std::ostream& operator<<(std::ostream& out, const TIcebergSnapshot& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TIcebergSnapshot &a, TIcebergSnapshot &b) {
  using ::std::swap;
  swap(a.snapshot_id, b.snapshot_id);
  swap(a.iceberg_file_desc_map, b.iceberg_file_desc_map);
  swap(a.__isset, b.__isset);
}

TIcebergSnapshot::TIcebergSnapshot(const TIcebergSnapshot& other165) {
  snapshot_id = other165.snapshot_id;
  iceberg_file_desc_map = other165.iceberg_file_desc_map;
  __isset = other165.__isset;
}
TIcebergSnapshot::TIcebergSnapshot( TIcebergSnapshot&& other166) {
  snapshot_id = std::move(other166.snapshot_id);
  iceberg_file_desc_map = std::move(other166.iceberg_file_desc_map);
  __isset = std::move(other166.__isset);
}
TIcebergSnapshot& TIcebergSnapshot::operator=(const TIcebergSnapshot& other167) {
  snapshot_id = other167.snapshot_id;
  iceberg_file_desc_map = other167.iceberg_file_desc_map;
  __isset = other167.__isset;
  return *this;
}
TIcebergSnapshot& TIcebergSnapshot::operator=(TIcebergSnapshot&& other168) {
  snapshot_id = std::move(other168.snapshot_id);
  iceberg_file_desc_map = std::move(other168.iceberg_file_desc_map);
  __isset = std::move(other168.__isset);
  return *this;
}
void TIcebergSnapshot::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TIcebergSnapshot(";
  out << "snapshot_id=" << to_string(snapshot_id);
  out << ", " << "iceberg_file_desc_map="; (__isset.iceberg_file_desc_map ? (out << to_string(iceberg_file_desc_map)) : (out << "<null>"));
  out << ")";
}


TPartialTableInfo::~TPartialTableInfo() throw() {
}


void TPartialTableInfo::__set_hms_table(const  ::Apache::Hadoop::Hive::Table& val) {
  this->hms_table = val;
__isset.hms_table = true;
}

void TPartialTableInfo::__set_partitions(const std::vector<TPartialPartitionInfo> & val) {
  this->partitions = val;
__isset.partitions = true;
}

void TPartialTableInfo::__set_column_stats(const std::vector< ::Apache::Hadoop::Hive::ColumnStatisticsObj> & val) {
  this->column_stats = val;
__isset.column_stats = true;
}

void TPartialTableInfo::__set_storage_metadata_load_time_ns(const int64_t val) {
  this->storage_metadata_load_time_ns = val;
__isset.storage_metadata_load_time_ns = true;
}

void TPartialTableInfo::__set_network_addresses(const std::vector< ::impala::TNetworkAddress> & val) {
  this->network_addresses = val;
__isset.network_addresses = true;
}

void TPartialTableInfo::__set_sql_constraints(const  ::impala::TSqlConstraints& val) {
  this->sql_constraints = val;
__isset.sql_constraints = true;
}

void TPartialTableInfo::__set_valid_write_ids(const  ::impala::TValidWriteIdList& val) {
  this->valid_write_ids = val;
__isset.valid_write_ids = true;
}

void TPartialTableInfo::__set_is_marked_cached(const bool val) {
  this->is_marked_cached = val;
__isset.is_marked_cached = true;
}

void TPartialTableInfo::__set_partition_prefixes(const std::vector<std::string> & val) {
  this->partition_prefixes = val;
__isset.partition_prefixes = true;
}

void TPartialTableInfo::__set_iceberg_snapshot(const TIcebergSnapshot& val) {
  this->iceberg_snapshot = val;
__isset.iceberg_snapshot = true;
}
std::ostream& operator<<(std::ostream& out, const TPartialTableInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TPartialTableInfo &a, TPartialTableInfo &b) {
  using ::std::swap;
  swap(a.hms_table, b.hms_table);
  swap(a.partitions, b.partitions);
  swap(a.column_stats, b.column_stats);
  swap(a.storage_metadata_load_time_ns, b.storage_metadata_load_time_ns);
  swap(a.network_addresses, b.network_addresses);
  swap(a.sql_constraints, b.sql_constraints);
  swap(a.valid_write_ids, b.valid_write_ids);
  swap(a.is_marked_cached, b.is_marked_cached);
  swap(a.partition_prefixes, b.partition_prefixes);
  swap(a.iceberg_snapshot, b.iceberg_snapshot);
  swap(a.__isset, b.__isset);
}

TPartialTableInfo::TPartialTableInfo(const TPartialTableInfo& other193) {
  hms_table = other193.hms_table;
  partitions = other193.partitions;
  column_stats = other193.column_stats;
  storage_metadata_load_time_ns = other193.storage_metadata_load_time_ns;
  network_addresses = other193.network_addresses;
  sql_constraints = other193.sql_constraints;
  valid_write_ids = other193.valid_write_ids;
  is_marked_cached = other193.is_marked_cached;
  partition_prefixes = other193.partition_prefixes;
  iceberg_snapshot = other193.iceberg_snapshot;
  __isset = other193.__isset;
}
TPartialTableInfo::TPartialTableInfo( TPartialTableInfo&& other194) {
  hms_table = std::move(other194.hms_table);
  partitions = std::move(other194.partitions);
  column_stats = std::move(other194.column_stats);
  storage_metadata_load_time_ns = std::move(other194.storage_metadata_load_time_ns);
  network_addresses = std::move(other194.network_addresses);
  sql_constraints = std::move(other194.sql_constraints);
  valid_write_ids = std::move(other194.valid_write_ids);
  is_marked_cached = std::move(other194.is_marked_cached);
  partition_prefixes = std::move(other194.partition_prefixes);
  iceberg_snapshot = std::move(other194.iceberg_snapshot);
  __isset = std::move(other194.__isset);
}
TPartialTableInfo& TPartialTableInfo::operator=(const TPartialTableInfo& other195) {
  hms_table = other195.hms_table;
  partitions = other195.partitions;
  column_stats = other195.column_stats;
  storage_metadata_load_time_ns = other195.storage_metadata_load_time_ns;
  network_addresses = other195.network_addresses;
  sql_constraints = other195.sql_constraints;
  valid_write_ids = other195.valid_write_ids;
  is_marked_cached = other195.is_marked_cached;
  partition_prefixes = other195.partition_prefixes;
  iceberg_snapshot = other195.iceberg_snapshot;
  __isset = other195.__isset;
  return *this;
}
TPartialTableInfo& TPartialTableInfo::operator=(TPartialTableInfo&& other196) {
  hms_table = std::move(other196.hms_table);
  partitions = std::move(other196.partitions);
  column_stats = std::move(other196.column_stats);
  storage_metadata_load_time_ns = std::move(other196.storage_metadata_load_time_ns);
  network_addresses = std::move(other196.network_addresses);
  sql_constraints = std::move(other196.sql_constraints);
  valid_write_ids = std::move(other196.valid_write_ids);
  is_marked_cached = std::move(other196.is_marked_cached);
  partition_prefixes = std::move(other196.partition_prefixes);
  iceberg_snapshot = std::move(other196.iceberg_snapshot);
  __isset = std::move(other196.__isset);
  return *this;
}
void TPartialTableInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPartialTableInfo(";
  out << "hms_table="; (__isset.hms_table ? (out << to_string(hms_table)) : (out << "<null>"));
  out << ", " << "partitions="; (__isset.partitions ? (out << to_string(partitions)) : (out << "<null>"));
  out << ", " << "column_stats="; (__isset.column_stats ? (out << to_string(column_stats)) : (out << "<null>"));
  out << ", " << "storage_metadata_load_time_ns="; (__isset.storage_metadata_load_time_ns ? (out << to_string(storage_metadata_load_time_ns)) : (out << "<null>"));
  out << ", " << "network_addresses="; (__isset.network_addresses ? (out << to_string(network_addresses)) : (out << "<null>"));
  out << ", " << "sql_constraints="; (__isset.sql_constraints ? (out << to_string(sql_constraints)) : (out << "<null>"));
  out << ", " << "valid_write_ids="; (__isset.valid_write_ids ? (out << to_string(valid_write_ids)) : (out << "<null>"));
  out << ", " << "is_marked_cached="; (__isset.is_marked_cached ? (out << to_string(is_marked_cached)) : (out << "<null>"));
  out << ", " << "partition_prefixes="; (__isset.partition_prefixes ? (out << to_string(partition_prefixes)) : (out << "<null>"));
  out << ", " << "iceberg_snapshot="; (__isset.iceberg_snapshot ? (out << to_string(iceberg_snapshot)) : (out << "<null>"));
  out << ")";
}


TBriefTableMeta::~TBriefTableMeta() throw() {
}


void TBriefTableMeta::__set_name(const std::string& val) {
  this->name = val;
}

void TBriefTableMeta::__set_msType(const std::string& val) {
  this->msType = val;
__isset.msType = true;
}

void TBriefTableMeta::__set_comment(const std::string& val) {
  this->comment = val;
__isset.comment = true;
}
std::ostream& operator<<(std::ostream& out, const TBriefTableMeta& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TBriefTableMeta &a, TBriefTableMeta &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.msType, b.msType);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

TBriefTableMeta::TBriefTableMeta(const TBriefTableMeta& other197) {
  name = other197.name;
  msType = other197.msType;
  comment = other197.comment;
  __isset = other197.__isset;
}
TBriefTableMeta::TBriefTableMeta( TBriefTableMeta&& other198) {
  name = std::move(other198.name);
  msType = std::move(other198.msType);
  comment = std::move(other198.comment);
  __isset = std::move(other198.__isset);
}
TBriefTableMeta& TBriefTableMeta::operator=(const TBriefTableMeta& other199) {
  name = other199.name;
  msType = other199.msType;
  comment = other199.comment;
  __isset = other199.__isset;
  return *this;
}
TBriefTableMeta& TBriefTableMeta::operator=(TBriefTableMeta&& other200) {
  name = std::move(other200.name);
  msType = std::move(other200.msType);
  comment = std::move(other200.comment);
  __isset = std::move(other200.__isset);
  return *this;
}
void TBriefTableMeta::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBriefTableMeta(";
  out << "name=" << to_string(name);
  out << ", " << "msType="; (__isset.msType ? (out << to_string(msType)) : (out << "<null>"));
  out << ", " << "comment="; (__isset.comment ? (out << to_string(comment)) : (out << "<null>"));
  out << ")";
}


TDbInfoSelector::~TDbInfoSelector() throw() {
}


void TDbInfoSelector::__set_want_hms_database(const bool val) {
  this->want_hms_database = val;
}

void TDbInfoSelector::__set_want_brief_meta_of_tables(const bool val) {
  this->want_brief_meta_of_tables = val;
}

void TDbInfoSelector::__set_want_function_names(const bool val) {
  this->want_function_names = val;
}
std::ostream& operator<<(std::ostream& out, const TDbInfoSelector& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TDbInfoSelector &a, TDbInfoSelector &b) {
  using ::std::swap;
  swap(a.want_hms_database, b.want_hms_database);
  swap(a.want_brief_meta_of_tables, b.want_brief_meta_of_tables);
  swap(a.want_function_names, b.want_function_names);
  swap(a.__isset, b.__isset);
}

TDbInfoSelector::TDbInfoSelector(const TDbInfoSelector& other201) {
  want_hms_database = other201.want_hms_database;
  want_brief_meta_of_tables = other201.want_brief_meta_of_tables;
  want_function_names = other201.want_function_names;
  __isset = other201.__isset;
}
TDbInfoSelector::TDbInfoSelector( TDbInfoSelector&& other202) {
  want_hms_database = std::move(other202.want_hms_database);
  want_brief_meta_of_tables = std::move(other202.want_brief_meta_of_tables);
  want_function_names = std::move(other202.want_function_names);
  __isset = std::move(other202.__isset);
}
TDbInfoSelector& TDbInfoSelector::operator=(const TDbInfoSelector& other203) {
  want_hms_database = other203.want_hms_database;
  want_brief_meta_of_tables = other203.want_brief_meta_of_tables;
  want_function_names = other203.want_function_names;
  __isset = other203.__isset;
  return *this;
}
TDbInfoSelector& TDbInfoSelector::operator=(TDbInfoSelector&& other204) {
  want_hms_database = std::move(other204.want_hms_database);
  want_brief_meta_of_tables = std::move(other204.want_brief_meta_of_tables);
  want_function_names = std::move(other204.want_function_names);
  __isset = std::move(other204.__isset);
  return *this;
}
void TDbInfoSelector::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDbInfoSelector(";
  out << "want_hms_database=" << to_string(want_hms_database);
  out << ", " << "want_brief_meta_of_tables=" << to_string(want_brief_meta_of_tables);
  out << ", " << "want_function_names=" << to_string(want_function_names);
  out << ")";
}


TPartialDbInfo::~TPartialDbInfo() throw() {
}


void TPartialDbInfo::__set_hms_database(const  ::Apache::Hadoop::Hive::Database& val) {
  this->hms_database = val;
__isset.hms_database = true;
}

void TPartialDbInfo::__set_brief_meta_of_tables(const std::vector<TBriefTableMeta> & val) {
  this->brief_meta_of_tables = val;
__isset.brief_meta_of_tables = true;
}

void TPartialDbInfo::__set_function_names(const std::vector<std::string> & val) {
  this->function_names = val;
__isset.function_names = true;
}
std::ostream& operator<<(std::ostream& out, const TPartialDbInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TPartialDbInfo &a, TPartialDbInfo &b) {
  using ::std::swap;
  swap(a.hms_database, b.hms_database);
  swap(a.brief_meta_of_tables, b.brief_meta_of_tables);
  swap(a.function_names, b.function_names);
  swap(a.__isset, b.__isset);
}

TPartialDbInfo::TPartialDbInfo(const TPartialDbInfo& other217) {
  hms_database = other217.hms_database;
  brief_meta_of_tables = other217.brief_meta_of_tables;
  function_names = other217.function_names;
  __isset = other217.__isset;
}
TPartialDbInfo::TPartialDbInfo( TPartialDbInfo&& other218) {
  hms_database = std::move(other218.hms_database);
  brief_meta_of_tables = std::move(other218.brief_meta_of_tables);
  function_names = std::move(other218.function_names);
  __isset = std::move(other218.__isset);
}
TPartialDbInfo& TPartialDbInfo::operator=(const TPartialDbInfo& other219) {
  hms_database = other219.hms_database;
  brief_meta_of_tables = other219.brief_meta_of_tables;
  function_names = other219.function_names;
  __isset = other219.__isset;
  return *this;
}
TPartialDbInfo& TPartialDbInfo::operator=(TPartialDbInfo&& other220) {
  hms_database = std::move(other220.hms_database);
  brief_meta_of_tables = std::move(other220.brief_meta_of_tables);
  function_names = std::move(other220.function_names);
  __isset = std::move(other220.__isset);
  return *this;
}
void TPartialDbInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPartialDbInfo(";
  out << "hms_database="; (__isset.hms_database ? (out << to_string(hms_database)) : (out << "<null>"));
  out << ", " << "brief_meta_of_tables="; (__isset.brief_meta_of_tables ? (out << to_string(brief_meta_of_tables)) : (out << "<null>"));
  out << ", " << "function_names="; (__isset.function_names ? (out << to_string(function_names)) : (out << "<null>"));
  out << ")";
}


TGetPartialCatalogObjectRequest::~TGetPartialCatalogObjectRequest() throw() {
}


void TGetPartialCatalogObjectRequest::__set_protocol_version(const CatalogServiceVersion::type val) {
  this->protocol_version = val;
}

void TGetPartialCatalogObjectRequest::__set_object_desc(const  ::impala::TCatalogObject& val) {
  this->object_desc = val;
}

void TGetPartialCatalogObjectRequest::__set_table_info_selector(const TTableInfoSelector& val) {
  this->table_info_selector = val;
__isset.table_info_selector = true;
}

void TGetPartialCatalogObjectRequest::__set_db_info_selector(const TDbInfoSelector& val) {
  this->db_info_selector = val;
__isset.db_info_selector = true;
}

void TGetPartialCatalogObjectRequest::__set_catalog_info_selector(const TCatalogInfoSelector& val) {
  this->catalog_info_selector = val;
__isset.catalog_info_selector = true;
}
std::ostream& operator<<(std::ostream& out, const TGetPartialCatalogObjectRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetPartialCatalogObjectRequest &a, TGetPartialCatalogObjectRequest &b) {
  using ::std::swap;
  swap(a.protocol_version, b.protocol_version);
  swap(a.object_desc, b.object_desc);
  swap(a.table_info_selector, b.table_info_selector);
  swap(a.db_info_selector, b.db_info_selector);
  swap(a.catalog_info_selector, b.catalog_info_selector);
  swap(a.__isset, b.__isset);
}

TGetPartialCatalogObjectRequest::TGetPartialCatalogObjectRequest(const TGetPartialCatalogObjectRequest& other222) {
  protocol_version = other222.protocol_version;
  object_desc = other222.object_desc;
  table_info_selector = other222.table_info_selector;
  db_info_selector = other222.db_info_selector;
  catalog_info_selector = other222.catalog_info_selector;
  __isset = other222.__isset;
}
TGetPartialCatalogObjectRequest::TGetPartialCatalogObjectRequest( TGetPartialCatalogObjectRequest&& other223) {
  protocol_version = std::move(other223.protocol_version);
  object_desc = std::move(other223.object_desc);
  table_info_selector = std::move(other223.table_info_selector);
  db_info_selector = std::move(other223.db_info_selector);
  catalog_info_selector = std::move(other223.catalog_info_selector);
  __isset = std::move(other223.__isset);
}
TGetPartialCatalogObjectRequest& TGetPartialCatalogObjectRequest::operator=(const TGetPartialCatalogObjectRequest& other224) {
  protocol_version = other224.protocol_version;
  object_desc = other224.object_desc;
  table_info_selector = other224.table_info_selector;
  db_info_selector = other224.db_info_selector;
  catalog_info_selector = other224.catalog_info_selector;
  __isset = other224.__isset;
  return *this;
}
TGetPartialCatalogObjectRequest& TGetPartialCatalogObjectRequest::operator=(TGetPartialCatalogObjectRequest&& other225) {
  protocol_version = std::move(other225.protocol_version);
  object_desc = std::move(other225.object_desc);
  table_info_selector = std::move(other225.table_info_selector);
  db_info_selector = std::move(other225.db_info_selector);
  catalog_info_selector = std::move(other225.catalog_info_selector);
  __isset = std::move(other225.__isset);
  return *this;
}
void TGetPartialCatalogObjectRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetPartialCatalogObjectRequest(";
  out << "protocol_version=" << to_string(protocol_version);
  out << ", " << "object_desc=" << to_string(object_desc);
  out << ", " << "table_info_selector="; (__isset.table_info_selector ? (out << to_string(table_info_selector)) : (out << "<null>"));
  out << ", " << "db_info_selector="; (__isset.db_info_selector ? (out << to_string(db_info_selector)) : (out << "<null>"));
  out << ", " << "catalog_info_selector="; (__isset.catalog_info_selector ? (out << to_string(catalog_info_selector)) : (out << "<null>"));
  out << ")";
}


TGetPartialCatalogObjectResponse::~TGetPartialCatalogObjectResponse() throw() {
}


void TGetPartialCatalogObjectResponse::__set_status(const  ::impala::TStatus& val) {
  this->status = val;
__isset.status = true;
}

void TGetPartialCatalogObjectResponse::__set_lookup_status(const CatalogLookupStatus::type val) {
  this->lookup_status = val;
__isset.lookup_status = true;
}

void TGetPartialCatalogObjectResponse::__set_object_version_number(const int64_t val) {
  this->object_version_number = val;
__isset.object_version_number = true;
}

void TGetPartialCatalogObjectResponse::__set_table_info(const TPartialTableInfo& val) {
  this->table_info = val;
__isset.table_info = true;
}

void TGetPartialCatalogObjectResponse::__set_db_info(const TPartialDbInfo& val) {
  this->db_info = val;
__isset.db_info = true;
}

void TGetPartialCatalogObjectResponse::__set_catalog_info(const TPartialCatalogInfo& val) {
  this->catalog_info = val;
__isset.catalog_info = true;
}

void TGetPartialCatalogObjectResponse::__set_functions(const std::vector< ::impala::TFunction> & val) {
  this->functions = val;
__isset.functions = true;
}
std::ostream& operator<<(std::ostream& out, const TGetPartialCatalogObjectResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetPartialCatalogObjectResponse &a, TGetPartialCatalogObjectResponse &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.lookup_status, b.lookup_status);
  swap(a.object_version_number, b.object_version_number);
  swap(a.table_info, b.table_info);
  swap(a.db_info, b.db_info);
  swap(a.catalog_info, b.catalog_info);
  swap(a.functions, b.functions);
  swap(a.__isset, b.__isset);
}

TGetPartialCatalogObjectResponse::TGetPartialCatalogObjectResponse(const TGetPartialCatalogObjectResponse& other233) {
  status = other233.status;
  lookup_status = other233.lookup_status;
  object_version_number = other233.object_version_number;
  table_info = other233.table_info;
  db_info = other233.db_info;
  catalog_info = other233.catalog_info;
  functions = other233.functions;
  __isset = other233.__isset;
}
TGetPartialCatalogObjectResponse::TGetPartialCatalogObjectResponse( TGetPartialCatalogObjectResponse&& other234) {
  status = std::move(other234.status);
  lookup_status = std::move(other234.lookup_status);
  object_version_number = std::move(other234.object_version_number);
  table_info = std::move(other234.table_info);
  db_info = std::move(other234.db_info);
  catalog_info = std::move(other234.catalog_info);
  functions = std::move(other234.functions);
  __isset = std::move(other234.__isset);
}
TGetPartialCatalogObjectResponse& TGetPartialCatalogObjectResponse::operator=(const TGetPartialCatalogObjectResponse& other235) {
  status = other235.status;
  lookup_status = other235.lookup_status;
  object_version_number = other235.object_version_number;
  table_info = other235.table_info;
  db_info = other235.db_info;
  catalog_info = other235.catalog_info;
  functions = other235.functions;
  __isset = other235.__isset;
  return *this;
}
TGetPartialCatalogObjectResponse& TGetPartialCatalogObjectResponse::operator=(TGetPartialCatalogObjectResponse&& other236) {
  status = std::move(other236.status);
  lookup_status = std::move(other236.lookup_status);
  object_version_number = std::move(other236.object_version_number);
  table_info = std::move(other236.table_info);
  db_info = std::move(other236.db_info);
  catalog_info = std::move(other236.catalog_info);
  functions = std::move(other236.functions);
  __isset = std::move(other236.__isset);
  return *this;
}
void TGetPartialCatalogObjectResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetPartialCatalogObjectResponse(";
  out << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "lookup_status="; (__isset.lookup_status ? (out << to_string(lookup_status)) : (out << "<null>"));
  out << ", " << "object_version_number="; (__isset.object_version_number ? (out << to_string(object_version_number)) : (out << "<null>"));
  out << ", " << "table_info="; (__isset.table_info ? (out << to_string(table_info)) : (out << "<null>"));
  out << ", " << "db_info="; (__isset.db_info ? (out << to_string(db_info)) : (out << "<null>"));
  out << ", " << "catalog_info="; (__isset.catalog_info ? (out << to_string(catalog_info)) : (out << "<null>"));
  out << ", " << "functions="; (__isset.functions ? (out << to_string(functions)) : (out << "<null>"));
  out << ")";
}


TGetCatalogObjectRequest::~TGetCatalogObjectRequest() throw() {
}


void TGetCatalogObjectRequest::__set_protocol_version(const CatalogServiceVersion::type val) {
  this->protocol_version = val;
}

void TGetCatalogObjectRequest::__set_header(const TCatalogServiceRequestHeader& val) {
  this->header = val;
__isset.header = true;
}

void TGetCatalogObjectRequest::__set_object_desc(const  ::impala::TCatalogObject& val) {
  this->object_desc = val;
}
std::ostream& operator<<(std::ostream& out, const TGetCatalogObjectRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetCatalogObjectRequest &a, TGetCatalogObjectRequest &b) {
  using ::std::swap;
  swap(a.protocol_version, b.protocol_version);
  swap(a.header, b.header);
  swap(a.object_desc, b.object_desc);
  swap(a.__isset, b.__isset);
}

TGetCatalogObjectRequest::TGetCatalogObjectRequest(const TGetCatalogObjectRequest& other238) {
  protocol_version = other238.protocol_version;
  header = other238.header;
  object_desc = other238.object_desc;
  __isset = other238.__isset;
}
TGetCatalogObjectRequest::TGetCatalogObjectRequest( TGetCatalogObjectRequest&& other239) {
  protocol_version = std::move(other239.protocol_version);
  header = std::move(other239.header);
  object_desc = std::move(other239.object_desc);
  __isset = std::move(other239.__isset);
}
TGetCatalogObjectRequest& TGetCatalogObjectRequest::operator=(const TGetCatalogObjectRequest& other240) {
  protocol_version = other240.protocol_version;
  header = other240.header;
  object_desc = other240.object_desc;
  __isset = other240.__isset;
  return *this;
}
TGetCatalogObjectRequest& TGetCatalogObjectRequest::operator=(TGetCatalogObjectRequest&& other241) {
  protocol_version = std::move(other241.protocol_version);
  header = std::move(other241.header);
  object_desc = std::move(other241.object_desc);
  __isset = std::move(other241.__isset);
  return *this;
}
void TGetCatalogObjectRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetCatalogObjectRequest(";
  out << "protocol_version=" << to_string(protocol_version);
  out << ", " << "header="; (__isset.header ? (out << to_string(header)) : (out << "<null>"));
  out << ", " << "object_desc=" << to_string(object_desc);
  out << ")";
}


TGetCatalogObjectResponse::~TGetCatalogObjectResponse() throw() {
}


void TGetCatalogObjectResponse::__set_catalog_object(const  ::impala::TCatalogObject& val) {
  this->catalog_object = val;
}
std::ostream& operator<<(std::ostream& out, const TGetCatalogObjectResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetCatalogObjectResponse &a, TGetCatalogObjectResponse &b) {
  using ::std::swap;
  swap(a.catalog_object, b.catalog_object);
}

TGetCatalogObjectResponse::TGetCatalogObjectResponse(const TGetCatalogObjectResponse& other242) {
  catalog_object = other242.catalog_object;
}
TGetCatalogObjectResponse::TGetCatalogObjectResponse( TGetCatalogObjectResponse&& other243) {
  catalog_object = std::move(other243.catalog_object);
}
TGetCatalogObjectResponse& TGetCatalogObjectResponse::operator=(const TGetCatalogObjectResponse& other244) {
  catalog_object = other244.catalog_object;
  return *this;
}
TGetCatalogObjectResponse& TGetCatalogObjectResponse::operator=(TGetCatalogObjectResponse&& other245) {
  catalog_object = std::move(other245.catalog_object);
  return *this;
}
void TGetCatalogObjectResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetCatalogObjectResponse(";
  out << "catalog_object=" << to_string(catalog_object);
  out << ")";
}


TGetPartitionStatsRequest::~TGetPartitionStatsRequest() throw() {
}


void TGetPartitionStatsRequest::__set_protocol_version(const CatalogServiceVersion::type val) {
  this->protocol_version = val;
}

void TGetPartitionStatsRequest::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TGetPartitionStatsRequest::__set_valid_write_ids(const  ::impala::TValidWriteIdList& val) {
  this->valid_write_ids = val;
__isset.valid_write_ids = true;
}

void TGetPartitionStatsRequest::__set_table_id(const int64_t val) {
  this->table_id = val;
__isset.table_id = true;
}
std::ostream& operator<<(std::ostream& out, const TGetPartitionStatsRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetPartitionStatsRequest &a, TGetPartitionStatsRequest &b) {
  using ::std::swap;
  swap(a.protocol_version, b.protocol_version);
  swap(a.table_name, b.table_name);
  swap(a.valid_write_ids, b.valid_write_ids);
  swap(a.table_id, b.table_id);
  swap(a.__isset, b.__isset);
}

TGetPartitionStatsRequest::TGetPartitionStatsRequest(const TGetPartitionStatsRequest& other247) {
  protocol_version = other247.protocol_version;
  table_name = other247.table_name;
  valid_write_ids = other247.valid_write_ids;
  table_id = other247.table_id;
  __isset = other247.__isset;
}
TGetPartitionStatsRequest::TGetPartitionStatsRequest( TGetPartitionStatsRequest&& other248) {
  protocol_version = std::move(other248.protocol_version);
  table_name = std::move(other248.table_name);
  valid_write_ids = std::move(other248.valid_write_ids);
  table_id = std::move(other248.table_id);
  __isset = std::move(other248.__isset);
}
TGetPartitionStatsRequest& TGetPartitionStatsRequest::operator=(const TGetPartitionStatsRequest& other249) {
  protocol_version = other249.protocol_version;
  table_name = other249.table_name;
  valid_write_ids = other249.valid_write_ids;
  table_id = other249.table_id;
  __isset = other249.__isset;
  return *this;
}
TGetPartitionStatsRequest& TGetPartitionStatsRequest::operator=(TGetPartitionStatsRequest&& other250) {
  protocol_version = std::move(other250.protocol_version);
  table_name = std::move(other250.table_name);
  valid_write_ids = std::move(other250.valid_write_ids);
  table_id = std::move(other250.table_id);
  __isset = std::move(other250.__isset);
  return *this;
}
void TGetPartitionStatsRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetPartitionStatsRequest(";
  out << "protocol_version=" << to_string(protocol_version);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "valid_write_ids="; (__isset.valid_write_ids ? (out << to_string(valid_write_ids)) : (out << "<null>"));
  out << ", " << "table_id="; (__isset.table_id ? (out << to_string(table_id)) : (out << "<null>"));
  out << ")";
}


TGetPartitionStatsResponse::~TGetPartitionStatsResponse() throw() {
}


void TGetPartitionStatsResponse::__set_status(const  ::impala::TStatus& val) {
  this->status = val;
__isset.status = true;
}

void TGetPartitionStatsResponse::__set_partition_stats(const std::map<std::string, std::string> & val) {
  this->partition_stats = val;
__isset.partition_stats = true;
}
std::ostream& operator<<(std::ostream& out, const TGetPartitionStatsResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TGetPartitionStatsResponse &a, TGetPartitionStatsResponse &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.partition_stats, b.partition_stats);
  swap(a.__isset, b.__isset);
}

TGetPartitionStatsResponse::TGetPartitionStatsResponse(const TGetPartitionStatsResponse& other259) {
  status = other259.status;
  partition_stats = other259.partition_stats;
  __isset = other259.__isset;
}
TGetPartitionStatsResponse::TGetPartitionStatsResponse( TGetPartitionStatsResponse&& other260) {
  status = std::move(other260.status);
  partition_stats = std::move(other260.partition_stats);
  __isset = std::move(other260.__isset);
}
TGetPartitionStatsResponse& TGetPartitionStatsResponse::operator=(const TGetPartitionStatsResponse& other261) {
  status = other261.status;
  partition_stats = other261.partition_stats;
  __isset = other261.__isset;
  return *this;
}
TGetPartitionStatsResponse& TGetPartitionStatsResponse::operator=(TGetPartitionStatsResponse&& other262) {
  status = std::move(other262.status);
  partition_stats = std::move(other262.partition_stats);
  __isset = std::move(other262.__isset);
  return *this;
}
void TGetPartitionStatsResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TGetPartitionStatsResponse(";
  out << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "partition_stats="; (__isset.partition_stats ? (out << to_string(partition_stats)) : (out << "<null>"));
  out << ")";
}


TPrioritizeLoadRequest::~TPrioritizeLoadRequest() throw() {
}


void TPrioritizeLoadRequest::__set_protocol_version(const CatalogServiceVersion::type val) {
  this->protocol_version = val;
}

void TPrioritizeLoadRequest::__set_header(const TCatalogServiceRequestHeader& val) {
  this->header = val;
__isset.header = true;
}

void TPrioritizeLoadRequest::__set_object_descs(const std::vector< ::impala::TCatalogObject> & val) {
  this->object_descs = val;
}
std::ostream& operator<<(std::ostream& out, const TPrioritizeLoadRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TPrioritizeLoadRequest &a, TPrioritizeLoadRequest &b) {
  using ::std::swap;
  swap(a.protocol_version, b.protocol_version);
  swap(a.header, b.header);
  swap(a.object_descs, b.object_descs);
  swap(a.__isset, b.__isset);
}

TPrioritizeLoadRequest::TPrioritizeLoadRequest(const TPrioritizeLoadRequest& other270) {
  protocol_version = other270.protocol_version;
  header = other270.header;
  object_descs = other270.object_descs;
  __isset = other270.__isset;
}
TPrioritizeLoadRequest::TPrioritizeLoadRequest( TPrioritizeLoadRequest&& other271) {
  protocol_version = std::move(other271.protocol_version);
  header = std::move(other271.header);
  object_descs = std::move(other271.object_descs);
  __isset = std::move(other271.__isset);
}
TPrioritizeLoadRequest& TPrioritizeLoadRequest::operator=(const TPrioritizeLoadRequest& other272) {
  protocol_version = other272.protocol_version;
  header = other272.header;
  object_descs = other272.object_descs;
  __isset = other272.__isset;
  return *this;
}
TPrioritizeLoadRequest& TPrioritizeLoadRequest::operator=(TPrioritizeLoadRequest&& other273) {
  protocol_version = std::move(other273.protocol_version);
  header = std::move(other273.header);
  object_descs = std::move(other273.object_descs);
  __isset = std::move(other273.__isset);
  return *this;
}
void TPrioritizeLoadRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPrioritizeLoadRequest(";
  out << "protocol_version=" << to_string(protocol_version);
  out << ", " << "header="; (__isset.header ? (out << to_string(header)) : (out << "<null>"));
  out << ", " << "object_descs=" << to_string(object_descs);
  out << ")";
}


TPrioritizeLoadResponse::~TPrioritizeLoadResponse() throw() {
}


void TPrioritizeLoadResponse::__set_status(const  ::impala::TStatus& val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const TPrioritizeLoadResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TPrioritizeLoadResponse &a, TPrioritizeLoadResponse &b) {
  using ::std::swap;
  swap(a.status, b.status);
}

TPrioritizeLoadResponse::TPrioritizeLoadResponse(const TPrioritizeLoadResponse& other274) {
  status = other274.status;
}
TPrioritizeLoadResponse::TPrioritizeLoadResponse( TPrioritizeLoadResponse&& other275) {
  status = std::move(other275.status);
}
TPrioritizeLoadResponse& TPrioritizeLoadResponse::operator=(const TPrioritizeLoadResponse& other276) {
  status = other276.status;
  return *this;
}
TPrioritizeLoadResponse& TPrioritizeLoadResponse::operator=(TPrioritizeLoadResponse&& other277) {
  status = std::move(other277.status);
  return *this;
}
void TPrioritizeLoadResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPrioritizeLoadResponse(";
  out << "status=" << to_string(status);
  out << ")";
}


TTableUsage::~TTableUsage() throw() {
}


void TTableUsage::__set_table_name(const  ::impala::TTableName& val) {
  this->table_name = val;
}

void TTableUsage::__set_num_usages(const int32_t val) {
  this->num_usages = val;
}
std::ostream& operator<<(std::ostream& out, const TTableUsage& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TTableUsage &a, TTableUsage &b) {
  using ::std::swap;
  swap(a.table_name, b.table_name);
  swap(a.num_usages, b.num_usages);
}

TTableUsage::TTableUsage(const TTableUsage& other278) {
  table_name = other278.table_name;
  num_usages = other278.num_usages;
}
TTableUsage::TTableUsage( TTableUsage&& other279) {
  table_name = std::move(other279.table_name);
  num_usages = std::move(other279.num_usages);
}
TTableUsage& TTableUsage::operator=(const TTableUsage& other280) {
  table_name = other280.table_name;
  num_usages = other280.num_usages;
  return *this;
}
TTableUsage& TTableUsage::operator=(TTableUsage&& other281) {
  table_name = std::move(other281.table_name);
  num_usages = std::move(other281.num_usages);
  return *this;
}
void TTableUsage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TTableUsage(";
  out << "table_name=" << to_string(table_name);
  out << ", " << "num_usages=" << to_string(num_usages);
  out << ")";
}


TUpdateTableUsageRequest::~TUpdateTableUsageRequest() throw() {
}


void TUpdateTableUsageRequest::__set_usages(const std::vector<TTableUsage> & val) {
  this->usages = val;
}
std::ostream& operator<<(std::ostream& out, const TUpdateTableUsageRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TUpdateTableUsageRequest &a, TUpdateTableUsageRequest &b) {
  using ::std::swap;
  swap(a.usages, b.usages);
}

TUpdateTableUsageRequest::TUpdateTableUsageRequest(const TUpdateTableUsageRequest& other288) {
  usages = other288.usages;
}
TUpdateTableUsageRequest::TUpdateTableUsageRequest( TUpdateTableUsageRequest&& other289) {
  usages = std::move(other289.usages);
}
TUpdateTableUsageRequest& TUpdateTableUsageRequest::operator=(const TUpdateTableUsageRequest& other290) {
  usages = other290.usages;
  return *this;
}
TUpdateTableUsageRequest& TUpdateTableUsageRequest::operator=(TUpdateTableUsageRequest&& other291) {
  usages = std::move(other291.usages);
  return *this;
}
void TUpdateTableUsageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TUpdateTableUsageRequest(";
  out << "usages=" << to_string(usages);
  out << ")";
}


TUpdateTableUsageResponse::~TUpdateTableUsageResponse() throw() {
}


void TUpdateTableUsageResponse::__set_status(const  ::impala::TStatus& val) {
  this->status = val;
__isset.status = true;
}
std::ostream& operator<<(std::ostream& out, const TUpdateTableUsageResponse& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TUpdateTableUsageResponse &a, TUpdateTableUsageResponse &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

TUpdateTableUsageResponse::TUpdateTableUsageResponse(const TUpdateTableUsageResponse& other292) {
  status = other292.status;
  __isset = other292.__isset;
}
TUpdateTableUsageResponse::TUpdateTableUsageResponse( TUpdateTableUsageResponse&& other293) {
  status = std::move(other293.status);
  __isset = std::move(other293.__isset);
}
TUpdateTableUsageResponse& TUpdateTableUsageResponse::operator=(const TUpdateTableUsageResponse& other294) {
  status = other294.status;
  __isset = other294.__isset;
  return *this;
}
TUpdateTableUsageResponse& TUpdateTableUsageResponse::operator=(TUpdateTableUsageResponse&& other295) {
  status = std::move(other295.status);
  __isset = std::move(other295.__isset);
  return *this;
}
void TUpdateTableUsageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TUpdateTableUsageResponse(";
  out << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ")";
}

} // namespace
