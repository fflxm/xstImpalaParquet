/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Data_TYPES_H
#define Data_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace impala {

class TColumnValue;

class TResultRow;

class TColumnData;

typedef struct _TColumnValue__isset {
  _TColumnValue__isset() : bool_val(false), byte_val(false), short_val(false), int_val(false), long_val(false), double_val(false), string_val(false), binary_val(false), timestamp_val(false), decimal_val(false), date_val(false) {}
  bool bool_val :1;
  bool byte_val :1;
  bool short_val :1;
  bool int_val :1;
  bool long_val :1;
  bool double_val :1;
  bool string_val :1;
  bool binary_val :1;
  bool timestamp_val :1;
  bool decimal_val :1;
  bool date_val :1;
} _TColumnValue__isset;

class TColumnValue {
 public:

  TColumnValue(const TColumnValue&);
  TColumnValue(TColumnValue&&);
  TColumnValue& operator=(const TColumnValue&);
  TColumnValue& operator=(TColumnValue&&);
  TColumnValue() : bool_val(0), byte_val(0), short_val(0), int_val(0), long_val(0), double_val(0), string_val(), binary_val(), timestamp_val(), decimal_val(), date_val(0) {
  }

  virtual ~TColumnValue() throw();
  bool bool_val;
  int8_t byte_val;
  int16_t short_val;
  int32_t int_val;
  int64_t long_val;
  double double_val;
  std::string string_val;
  std::string binary_val;
  std::string timestamp_val;
  std::string decimal_val;
  int32_t date_val;

  _TColumnValue__isset __isset;

  void __set_bool_val(const bool val);

  void __set_byte_val(const int8_t val);

  void __set_short_val(const int16_t val);

  void __set_int_val(const int32_t val);

  void __set_long_val(const int64_t val);

  void __set_double_val(const double val);

  void __set_string_val(const std::string& val);

  void __set_binary_val(const std::string& val);

  void __set_timestamp_val(const std::string& val);

  void __set_decimal_val(const std::string& val);

  void __set_date_val(const int32_t val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnValue &a, TColumnValue &b);

std::ostream& operator<<(std::ostream& out, const TColumnValue& obj);

typedef struct _TResultRow__isset {
  _TResultRow__isset() : colVals(false) {}
  bool colVals :1;
} _TResultRow__isset;

class TResultRow {
 public:

  TResultRow(const TResultRow&);
  TResultRow(TResultRow&&);
  TResultRow& operator=(const TResultRow&);
  TResultRow& operator=(TResultRow&&);
  TResultRow() {
  }

  virtual ~TResultRow() throw();
  std::vector<TColumnValue>  colVals;

  _TResultRow__isset __isset;

  void __set_colVals(const std::vector<TColumnValue> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TResultRow &a, TResultRow &b);

std::ostream& operator<<(std::ostream& out, const TResultRow& obj);

typedef struct _TColumnData__isset {
  _TColumnData__isset() : bool_vals(false), byte_vals(false), short_vals(false), int_vals(false), long_vals(false), double_vals(false), string_vals(false), binary_vals(false) {}
  bool bool_vals :1;
  bool byte_vals :1;
  bool short_vals :1;
  bool int_vals :1;
  bool long_vals :1;
  bool double_vals :1;
  bool string_vals :1;
  bool binary_vals :1;
} _TColumnData__isset;

class TColumnData {
 public:

  TColumnData(const TColumnData&);
  TColumnData(TColumnData&&);
  TColumnData& operator=(const TColumnData&);
  TColumnData& operator=(TColumnData&&);
  TColumnData() {
  }

  virtual ~TColumnData() throw();
  std::vector<bool>  is_null;
  std::vector<bool>  bool_vals;
  std::vector<int8_t>  byte_vals;
  std::vector<int16_t>  short_vals;
  std::vector<int32_t>  int_vals;
  std::vector<int64_t>  long_vals;
  std::vector<double>  double_vals;
  std::vector<std::string>  string_vals;
  std::vector<std::string>  binary_vals;

  _TColumnData__isset __isset;

  void __set_is_null(const std::vector<bool> & val);

  void __set_bool_vals(const std::vector<bool> & val);

  void __set_byte_vals(const std::vector<int8_t> & val);

  void __set_short_vals(const std::vector<int16_t> & val);

  void __set_int_vals(const std::vector<int32_t> & val);

  void __set_long_vals(const std::vector<int64_t> & val);

  void __set_double_vals(const std::vector<double> & val);

  void __set_string_vals(const std::vector<std::string> & val);

  void __set_binary_vals(const std::vector<std::string> & val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnData &a, TColumnData &b);

std::ostream& operator<<(std::ostream& out, const TColumnData& obj);

} // namespace

#include "Data_types.tcc"

#endif
