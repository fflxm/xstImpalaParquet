// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: row_batch.proto

#ifndef PROTOBUF_row_5fbatch_2eproto__INCLUDED
#define PROTOBUF_row_5fbatch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_row_5fbatch_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRowBatchHeaderPBImpl();
void InitDefaultsRowBatchHeaderPB();
inline void InitDefaults() {
  InitDefaultsRowBatchHeaderPB();
}
}  // namespace protobuf_row_5fbatch_2eproto
namespace impala {
class RowBatchHeaderPB;
class RowBatchHeaderPBDefaultTypeInternal;
extern RowBatchHeaderPBDefaultTypeInternal _RowBatchHeaderPB_default_instance_;
}  // namespace impala
namespace impala {

// ===================================================================

class RowBatchHeaderPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:impala.RowBatchHeaderPB) */ {
 public:
  RowBatchHeaderPB();
  virtual ~RowBatchHeaderPB();

  RowBatchHeaderPB(const RowBatchHeaderPB& from);

  inline RowBatchHeaderPB& operator=(const RowBatchHeaderPB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RowBatchHeaderPB(RowBatchHeaderPB&& from) noexcept
    : RowBatchHeaderPB() {
    *this = ::std::move(from);
  }

  inline RowBatchHeaderPB& operator=(RowBatchHeaderPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RowBatchHeaderPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RowBatchHeaderPB* internal_default_instance() {
    return reinterpret_cast<const RowBatchHeaderPB*>(
               &_RowBatchHeaderPB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RowBatchHeaderPB* other);
  friend void swap(RowBatchHeaderPB& a, RowBatchHeaderPB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RowBatchHeaderPB* New() const PROTOBUF_FINAL { return New(NULL); }

  RowBatchHeaderPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RowBatchHeaderPB& from);
  void MergeFrom(const RowBatchHeaderPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RowBatchHeaderPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_rows = 1;
  bool has_num_rows() const;
  void clear_num_rows();
  static const int kNumRowsFieldNumber = 1;
  ::google::protobuf::int32 num_rows() const;
  void set_num_rows(::google::protobuf::int32 value);

  // optional int32 num_tuples_per_row = 2;
  bool has_num_tuples_per_row() const;
  void clear_num_tuples_per_row();
  static const int kNumTuplesPerRowFieldNumber = 2;
  ::google::protobuf::int32 num_tuples_per_row() const;
  void set_num_tuples_per_row(::google::protobuf::int32 value);

  // optional int64 uncompressed_size = 3;
  bool has_uncompressed_size() const;
  void clear_uncompressed_size();
  static const int kUncompressedSizeFieldNumber = 3;
  ::google::protobuf::int64 uncompressed_size() const;
  void set_uncompressed_size(::google::protobuf::int64 value);

  // optional .impala.CompressionTypePB compression_type = 4;
  bool has_compression_type() const;
  void clear_compression_type();
  static const int kCompressionTypeFieldNumber = 4;
  ::impala::CompressionTypePB compression_type() const;
  void set_compression_type(::impala::CompressionTypePB value);

  // @@protoc_insertion_point(class_scope:impala.RowBatchHeaderPB)
 private:
  void set_has_num_rows();
  void clear_has_num_rows();
  void set_has_num_tuples_per_row();
  void clear_has_num_tuples_per_row();
  void set_has_uncompressed_size();
  void clear_has_uncompressed_size();
  void set_has_compression_type();
  void clear_has_compression_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 num_rows_;
  ::google::protobuf::int32 num_tuples_per_row_;
  ::google::protobuf::int64 uncompressed_size_;
  int compression_type_;
  friend struct ::protobuf_row_5fbatch_2eproto::TableStruct;
  friend void ::protobuf_row_5fbatch_2eproto::InitDefaultsRowBatchHeaderPBImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RowBatchHeaderPB

// optional int32 num_rows = 1;
inline bool RowBatchHeaderPB::has_num_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RowBatchHeaderPB::set_has_num_rows() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RowBatchHeaderPB::clear_has_num_rows() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RowBatchHeaderPB::clear_num_rows() {
  num_rows_ = 0;
  clear_has_num_rows();
}
inline ::google::protobuf::int32 RowBatchHeaderPB::num_rows() const {
  // @@protoc_insertion_point(field_get:impala.RowBatchHeaderPB.num_rows)
  return num_rows_;
}
inline void RowBatchHeaderPB::set_num_rows(::google::protobuf::int32 value) {
  set_has_num_rows();
  num_rows_ = value;
  // @@protoc_insertion_point(field_set:impala.RowBatchHeaderPB.num_rows)
}

// optional int32 num_tuples_per_row = 2;
inline bool RowBatchHeaderPB::has_num_tuples_per_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RowBatchHeaderPB::set_has_num_tuples_per_row() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RowBatchHeaderPB::clear_has_num_tuples_per_row() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RowBatchHeaderPB::clear_num_tuples_per_row() {
  num_tuples_per_row_ = 0;
  clear_has_num_tuples_per_row();
}
inline ::google::protobuf::int32 RowBatchHeaderPB::num_tuples_per_row() const {
  // @@protoc_insertion_point(field_get:impala.RowBatchHeaderPB.num_tuples_per_row)
  return num_tuples_per_row_;
}
inline void RowBatchHeaderPB::set_num_tuples_per_row(::google::protobuf::int32 value) {
  set_has_num_tuples_per_row();
  num_tuples_per_row_ = value;
  // @@protoc_insertion_point(field_set:impala.RowBatchHeaderPB.num_tuples_per_row)
}

// optional int64 uncompressed_size = 3;
inline bool RowBatchHeaderPB::has_uncompressed_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RowBatchHeaderPB::set_has_uncompressed_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RowBatchHeaderPB::clear_has_uncompressed_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RowBatchHeaderPB::clear_uncompressed_size() {
  uncompressed_size_ = GOOGLE_LONGLONG(0);
  clear_has_uncompressed_size();
}
inline ::google::protobuf::int64 RowBatchHeaderPB::uncompressed_size() const {
  // @@protoc_insertion_point(field_get:impala.RowBatchHeaderPB.uncompressed_size)
  return uncompressed_size_;
}
inline void RowBatchHeaderPB::set_uncompressed_size(::google::protobuf::int64 value) {
  set_has_uncompressed_size();
  uncompressed_size_ = value;
  // @@protoc_insertion_point(field_set:impala.RowBatchHeaderPB.uncompressed_size)
}

// optional .impala.CompressionTypePB compression_type = 4;
inline bool RowBatchHeaderPB::has_compression_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RowBatchHeaderPB::set_has_compression_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RowBatchHeaderPB::clear_has_compression_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RowBatchHeaderPB::clear_compression_type() {
  compression_type_ = 0;
  clear_has_compression_type();
}
inline ::impala::CompressionTypePB RowBatchHeaderPB::compression_type() const {
  // @@protoc_insertion_point(field_get:impala.RowBatchHeaderPB.compression_type)
  return static_cast< ::impala::CompressionTypePB >(compression_type_);
}
inline void RowBatchHeaderPB::set_compression_type(::impala::CompressionTypePB value) {
  assert(::impala::CompressionTypePB_IsValid(value));
  set_has_compression_type();
  compression_type_ = value;
  // @@protoc_insertion_point(field_set:impala.RowBatchHeaderPB.compression_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace impala

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_row_5fbatch_2eproto__INCLUDED
