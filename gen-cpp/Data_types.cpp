/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Data_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {


TColumnValue::~TColumnValue() throw() {
}


void TColumnValue::__set_bool_val(const bool val) {
  this->bool_val = val;
__isset.bool_val = true;
}

void TColumnValue::__set_byte_val(const int8_t val) {
  this->byte_val = val;
__isset.byte_val = true;
}

void TColumnValue::__set_short_val(const int16_t val) {
  this->short_val = val;
__isset.short_val = true;
}

void TColumnValue::__set_int_val(const int32_t val) {
  this->int_val = val;
__isset.int_val = true;
}

void TColumnValue::__set_long_val(const int64_t val) {
  this->long_val = val;
__isset.long_val = true;
}

void TColumnValue::__set_double_val(const double val) {
  this->double_val = val;
__isset.double_val = true;
}

void TColumnValue::__set_string_val(const std::string& val) {
  this->string_val = val;
__isset.string_val = true;
}

void TColumnValue::__set_binary_val(const std::string& val) {
  this->binary_val = val;
__isset.binary_val = true;
}

void TColumnValue::__set_timestamp_val(const std::string& val) {
  this->timestamp_val = val;
__isset.timestamp_val = true;
}

void TColumnValue::__set_decimal_val(const std::string& val) {
  this->decimal_val = val;
__isset.decimal_val = true;
}

void TColumnValue::__set_date_val(const int32_t val) {
  this->date_val = val;
__isset.date_val = true;
}
std::ostream& operator<<(std::ostream& out, const TColumnValue& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TColumnValue &a, TColumnValue &b) {
  using ::std::swap;
  swap(a.bool_val, b.bool_val);
  swap(a.byte_val, b.byte_val);
  swap(a.short_val, b.short_val);
  swap(a.int_val, b.int_val);
  swap(a.long_val, b.long_val);
  swap(a.double_val, b.double_val);
  swap(a.string_val, b.string_val);
  swap(a.binary_val, b.binary_val);
  swap(a.timestamp_val, b.timestamp_val);
  swap(a.decimal_val, b.decimal_val);
  swap(a.date_val, b.date_val);
  swap(a.__isset, b.__isset);
}

TColumnValue::TColumnValue(const TColumnValue& other0) {
  bool_val = other0.bool_val;
  byte_val = other0.byte_val;
  short_val = other0.short_val;
  int_val = other0.int_val;
  long_val = other0.long_val;
  double_val = other0.double_val;
  string_val = other0.string_val;
  binary_val = other0.binary_val;
  timestamp_val = other0.timestamp_val;
  decimal_val = other0.decimal_val;
  date_val = other0.date_val;
  __isset = other0.__isset;
}
TColumnValue::TColumnValue( TColumnValue&& other1) {
  bool_val = std::move(other1.bool_val);
  byte_val = std::move(other1.byte_val);
  short_val = std::move(other1.short_val);
  int_val = std::move(other1.int_val);
  long_val = std::move(other1.long_val);
  double_val = std::move(other1.double_val);
  string_val = std::move(other1.string_val);
  binary_val = std::move(other1.binary_val);
  timestamp_val = std::move(other1.timestamp_val);
  decimal_val = std::move(other1.decimal_val);
  date_val = std::move(other1.date_val);
  __isset = std::move(other1.__isset);
}
TColumnValue& TColumnValue::operator=(const TColumnValue& other2) {
  bool_val = other2.bool_val;
  byte_val = other2.byte_val;
  short_val = other2.short_val;
  int_val = other2.int_val;
  long_val = other2.long_val;
  double_val = other2.double_val;
  string_val = other2.string_val;
  binary_val = other2.binary_val;
  timestamp_val = other2.timestamp_val;
  decimal_val = other2.decimal_val;
  date_val = other2.date_val;
  __isset = other2.__isset;
  return *this;
}
TColumnValue& TColumnValue::operator=(TColumnValue&& other3) {
  bool_val = std::move(other3.bool_val);
  byte_val = std::move(other3.byte_val);
  short_val = std::move(other3.short_val);
  int_val = std::move(other3.int_val);
  long_val = std::move(other3.long_val);
  double_val = std::move(other3.double_val);
  string_val = std::move(other3.string_val);
  binary_val = std::move(other3.binary_val);
  timestamp_val = std::move(other3.timestamp_val);
  decimal_val = std::move(other3.decimal_val);
  date_val = std::move(other3.date_val);
  __isset = std::move(other3.__isset);
  return *this;
}
void TColumnValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TColumnValue(";
  out << "bool_val="; (__isset.bool_val ? (out << to_string(bool_val)) : (out << "<null>"));
  out << ", " << "byte_val="; (__isset.byte_val ? (out << to_string(byte_val)) : (out << "<null>"));
  out << ", " << "short_val="; (__isset.short_val ? (out << to_string(short_val)) : (out << "<null>"));
  out << ", " << "int_val="; (__isset.int_val ? (out << to_string(int_val)) : (out << "<null>"));
  out << ", " << "long_val="; (__isset.long_val ? (out << to_string(long_val)) : (out << "<null>"));
  out << ", " << "double_val="; (__isset.double_val ? (out << to_string(double_val)) : (out << "<null>"));
  out << ", " << "string_val="; (__isset.string_val ? (out << to_string(string_val)) : (out << "<null>"));
  out << ", " << "binary_val="; (__isset.binary_val ? (out << to_string(binary_val)) : (out << "<null>"));
  out << ", " << "timestamp_val="; (__isset.timestamp_val ? (out << to_string(timestamp_val)) : (out << "<null>"));
  out << ", " << "decimal_val="; (__isset.decimal_val ? (out << to_string(decimal_val)) : (out << "<null>"));
  out << ", " << "date_val="; (__isset.date_val ? (out << to_string(date_val)) : (out << "<null>"));
  out << ")";
}


TResultRow::~TResultRow() throw() {
}


void TResultRow::__set_colVals(const std::vector<TColumnValue> & val) {
  this->colVals = val;
}
std::ostream& operator<<(std::ostream& out, const TResultRow& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TResultRow &a, TResultRow &b) {
  using ::std::swap;
  swap(a.colVals, b.colVals);
  swap(a.__isset, b.__isset);
}

TResultRow::TResultRow(const TResultRow& other10) {
  colVals = other10.colVals;
  __isset = other10.__isset;
}
TResultRow::TResultRow( TResultRow&& other11) {
  colVals = std::move(other11.colVals);
  __isset = std::move(other11.__isset);
}
TResultRow& TResultRow::operator=(const TResultRow& other12) {
  colVals = other12.colVals;
  __isset = other12.__isset;
  return *this;
}
TResultRow& TResultRow::operator=(TResultRow&& other13) {
  colVals = std::move(other13.colVals);
  __isset = std::move(other13.__isset);
  return *this;
}
void TResultRow::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TResultRow(";
  out << "colVals=" << to_string(colVals);
  out << ")";
}


TColumnData::~TColumnData() throw() {
}


void TColumnData::__set_is_null(const std::vector<bool> & val) {
  this->is_null = val;
}

void TColumnData::__set_bool_vals(const std::vector<bool> & val) {
  this->bool_vals = val;
__isset.bool_vals = true;
}

void TColumnData::__set_byte_vals(const std::vector<int8_t> & val) {
  this->byte_vals = val;
__isset.byte_vals = true;
}

void TColumnData::__set_short_vals(const std::vector<int16_t> & val) {
  this->short_vals = val;
__isset.short_vals = true;
}

void TColumnData::__set_int_vals(const std::vector<int32_t> & val) {
  this->int_vals = val;
__isset.int_vals = true;
}

void TColumnData::__set_long_vals(const std::vector<int64_t> & val) {
  this->long_vals = val;
__isset.long_vals = true;
}

void TColumnData::__set_double_vals(const std::vector<double> & val) {
  this->double_vals = val;
__isset.double_vals = true;
}

void TColumnData::__set_string_vals(const std::vector<std::string> & val) {
  this->string_vals = val;
__isset.string_vals = true;
}

void TColumnData::__set_binary_vals(const std::vector<std::string> & val) {
  this->binary_vals = val;
__isset.binary_vals = true;
}
std::ostream& operator<<(std::ostream& out, const TColumnData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TColumnData &a, TColumnData &b) {
  using ::std::swap;
  swap(a.is_null, b.is_null);
  swap(a.bool_vals, b.bool_vals);
  swap(a.byte_vals, b.byte_vals);
  swap(a.short_vals, b.short_vals);
  swap(a.int_vals, b.int_vals);
  swap(a.long_vals, b.long_vals);
  swap(a.double_vals, b.double_vals);
  swap(a.string_vals, b.string_vals);
  swap(a.binary_vals, b.binary_vals);
  swap(a.__isset, b.__isset);
}

TColumnData::TColumnData(const TColumnData& other68) {
  is_null = other68.is_null;
  bool_vals = other68.bool_vals;
  byte_vals = other68.byte_vals;
  short_vals = other68.short_vals;
  int_vals = other68.int_vals;
  long_vals = other68.long_vals;
  double_vals = other68.double_vals;
  string_vals = other68.string_vals;
  binary_vals = other68.binary_vals;
  __isset = other68.__isset;
}
TColumnData::TColumnData( TColumnData&& other69) {
  is_null = std::move(other69.is_null);
  bool_vals = std::move(other69.bool_vals);
  byte_vals = std::move(other69.byte_vals);
  short_vals = std::move(other69.short_vals);
  int_vals = std::move(other69.int_vals);
  long_vals = std::move(other69.long_vals);
  double_vals = std::move(other69.double_vals);
  string_vals = std::move(other69.string_vals);
  binary_vals = std::move(other69.binary_vals);
  __isset = std::move(other69.__isset);
}
TColumnData& TColumnData::operator=(const TColumnData& other70) {
  is_null = other70.is_null;
  bool_vals = other70.bool_vals;
  byte_vals = other70.byte_vals;
  short_vals = other70.short_vals;
  int_vals = other70.int_vals;
  long_vals = other70.long_vals;
  double_vals = other70.double_vals;
  string_vals = other70.string_vals;
  binary_vals = other70.binary_vals;
  __isset = other70.__isset;
  return *this;
}
TColumnData& TColumnData::operator=(TColumnData&& other71) {
  is_null = std::move(other71.is_null);
  bool_vals = std::move(other71.bool_vals);
  byte_vals = std::move(other71.byte_vals);
  short_vals = std::move(other71.short_vals);
  int_vals = std::move(other71.int_vals);
  long_vals = std::move(other71.long_vals);
  double_vals = std::move(other71.double_vals);
  string_vals = std::move(other71.string_vals);
  binary_vals = std::move(other71.binary_vals);
  __isset = std::move(other71.__isset);
  return *this;
}
void TColumnData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TColumnData(";
  out << "is_null=" << to_string(is_null);
  out << ", " << "bool_vals="; (__isset.bool_vals ? (out << to_string(bool_vals)) : (out << "<null>"));
  out << ", " << "byte_vals="; (__isset.byte_vals ? (out << to_string(byte_vals)) : (out << "<null>"));
  out << ", " << "short_vals="; (__isset.short_vals ? (out << to_string(short_vals)) : (out << "<null>"));
  out << ", " << "int_vals="; (__isset.int_vals ? (out << to_string(int_vals)) : (out << "<null>"));
  out << ", " << "long_vals="; (__isset.long_vals ? (out << to_string(long_vals)) : (out << "<null>"));
  out << ", " << "double_vals="; (__isset.double_vals ? (out << to_string(double_vals)) : (out << "<null>"));
  out << ", " << "string_vals="; (__isset.string_vals ? (out << to_string(string_vals)) : (out << "<null>"));
  out << ", " << "binary_vals="; (__isset.binary_vals ? (out << to_string(binary_vals)) : (out << "<null>"));
  out << ")";
}

} // namespace
