/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SqlConstraints_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {


TSqlConstraints::~TSqlConstraints() throw() {
}


void TSqlConstraints::__set_primary_keys(const std::vector< ::Apache::Hadoop::Hive::SQLPrimaryKey> & val) {
  this->primary_keys = val;
}

void TSqlConstraints::__set_foreign_keys(const std::vector< ::Apache::Hadoop::Hive::SQLForeignKey> & val) {
  this->foreign_keys = val;
}
std::ostream& operator<<(std::ostream& out, const TSqlConstraints& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TSqlConstraints &a, TSqlConstraints &b) {
  using ::std::swap;
  swap(a.primary_keys, b.primary_keys);
  swap(a.foreign_keys, b.foreign_keys);
}

TSqlConstraints::TSqlConstraints(const TSqlConstraints& other12) {
  primary_keys = other12.primary_keys;
  foreign_keys = other12.foreign_keys;
}
TSqlConstraints::TSqlConstraints( TSqlConstraints&& other13) {
  primary_keys = std::move(other13.primary_keys);
  foreign_keys = std::move(other13.foreign_keys);
}
TSqlConstraints& TSqlConstraints::operator=(const TSqlConstraints& other14) {
  primary_keys = other14.primary_keys;
  foreign_keys = other14.foreign_keys;
  return *this;
}
TSqlConstraints& TSqlConstraints::operator=(TSqlConstraints&& other15) {
  primary_keys = std::move(other15.primary_keys);
  foreign_keys = std::move(other15.foreign_keys);
  return *this;
}
void TSqlConstraints::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSqlConstraints(";
  out << "primary_keys=" << to_string(primary_keys);
  out << ", " << "foreign_keys=" << to_string(foreign_keys);
  out << ")";
}

} // namespace
