/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Query_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace impala {

int _kTSchemaResolutionStrategyValues[] = {
  TSchemaResolutionStrategy::POSITION,
  TSchemaResolutionStrategy::NAME,
  TSchemaResolutionStrategy::FIELD_ID
};
const char* _kTSchemaResolutionStrategyNames[] = {
  "POSITION",
  "NAME",
  "FIELD_ID"
};
const std::map<int, const char*> _TSchemaResolutionStrategy_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTSchemaResolutionStrategyValues, _kTSchemaResolutionStrategyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TSchemaResolutionStrategy::type& val) {
  std::map<int, const char*>::const_iterator it = _TSchemaResolutionStrategy_VALUES_TO_NAMES.find(val);
  if (it != _TSchemaResolutionStrategy_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTTransactionalTypeValues[] = {
  TTransactionalType::NONE,
  TTransactionalType::INSERT_ONLY
};
const char* _kTTransactionalTypeNames[] = {
  "NONE",
  "INSERT_ONLY"
};
const std::map<int, const char*> _TTransactionalType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTTransactionalTypeValues, _kTTransactionalTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TTransactionalType::type& val) {
  std::map<int, const char*>::const_iterator it = _TTransactionalType_VALUES_TO_NAMES.find(val);
  if (it != _TTransactionalType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTKuduReadModeValues[] = {
  TKuduReadMode::DEFAULT,
  TKuduReadMode::READ_LATEST,
  TKuduReadMode::READ_AT_SNAPSHOT
};
const char* _kTKuduReadModeNames[] = {
  "DEFAULT",
  "READ_LATEST",
  "READ_AT_SNAPSHOT"
};
const std::map<int, const char*> _TKuduReadMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTKuduReadModeValues, _kTKuduReadModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TKuduReadMode::type& val) {
  std::map<int, const char*>::const_iterator it = _TKuduReadMode_VALUES_TO_NAMES.find(val);
  if (it != _TKuduReadMode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTKuduReplicaSelectionValues[] = {
  TKuduReplicaSelection::LEADER_ONLY,
  TKuduReplicaSelection::CLOSEST_REPLICA
};
const char* _kTKuduReplicaSelectionNames[] = {
  "LEADER_ONLY",
  "CLOSEST_REPLICA"
};
const std::map<int, const char*> _TKuduReplicaSelection_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTKuduReplicaSelectionValues, _kTKuduReplicaSelectionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TKuduReplicaSelection::type& val) {
  std::map<int, const char*>::const_iterator it = _TKuduReplicaSelection_VALUES_TO_NAMES.find(val);
  if (it != _TKuduReplicaSelection_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTJoinDistributionModeValues[] = {
  TJoinDistributionMode::BROADCAST,
  TJoinDistributionMode::SHUFFLE
};
const char* _kTJoinDistributionModeNames[] = {
  "BROADCAST",
  "SHUFFLE"
};
const std::map<int, const char*> _TJoinDistributionMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTJoinDistributionModeValues, _kTJoinDistributionModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TJoinDistributionMode::type& val) {
  std::map<int, const char*>::const_iterator it = _TJoinDistributionMode_VALUES_TO_NAMES.find(val);
  if (it != _TJoinDistributionMode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTParquetArrayResolutionValues[] = {
  TParquetArrayResolution::THREE_LEVEL,
  TParquetArrayResolution::TWO_LEVEL,
  TParquetArrayResolution::TWO_LEVEL_THEN_THREE_LEVEL
};
const char* _kTParquetArrayResolutionNames[] = {
  "THREE_LEVEL",
  "TWO_LEVEL",
  "TWO_LEVEL_THEN_THREE_LEVEL"
};
const std::map<int, const char*> _TParquetArrayResolution_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTParquetArrayResolutionValues, _kTParquetArrayResolutionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TParquetArrayResolution::type& val) {
  std::map<int, const char*>::const_iterator it = _TParquetArrayResolution_VALUES_TO_NAMES.find(val);
  if (it != _TParquetArrayResolution_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTParquetTimestampTypeValues[] = {
  TParquetTimestampType::INT96_NANOS,
  TParquetTimestampType::INT64_MILLIS,
  TParquetTimestampType::INT64_MICROS,
  TParquetTimestampType::INT64_NANOS
};
const char* _kTParquetTimestampTypeNames[] = {
  "INT96_NANOS",
  "INT64_MILLIS",
  "INT64_MICROS",
  "INT64_NANOS"
};
const std::map<int, const char*> _TParquetTimestampType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTParquetTimestampTypeValues, _kTParquetTimestampTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TParquetTimestampType::type& val) {
  std::map<int, const char*>::const_iterator it = _TParquetTimestampType_VALUES_TO_NAMES.find(val);
  if (it != _TParquetTimestampType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTMinmaxFilterFastCodePathModeValues[] = {
  TMinmaxFilterFastCodePathMode::OFF,
  TMinmaxFilterFastCodePathMode::ON,
  TMinmaxFilterFastCodePathMode::VERIFICATION
};
const char* _kTMinmaxFilterFastCodePathModeNames[] = {
  "OFF",
  "ON",
  "VERIFICATION"
};
const std::map<int, const char*> _TMinmaxFilterFastCodePathMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTMinmaxFilterFastCodePathModeValues, _kTMinmaxFilterFastCodePathModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TMinmaxFilterFastCodePathMode::type& val) {
  std::map<int, const char*>::const_iterator it = _TMinmaxFilterFastCodePathMode_VALUES_TO_NAMES.find(val);
  if (it != _TMinmaxFilterFastCodePathMode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTParquetBloomFilterWriteValues[] = {
  TParquetBloomFilterWrite::NEVER,
  TParquetBloomFilterWrite::IF_NO_DICT,
  TParquetBloomFilterWrite::ALWAYS
};
const char* _kTParquetBloomFilterWriteNames[] = {
  "NEVER",
  "IF_NO_DICT",
  "ALWAYS"
};
const std::map<int, const char*> _TParquetBloomFilterWrite_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTParquetBloomFilterWriteValues, _kTParquetBloomFilterWriteNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TParquetBloomFilterWrite::type& val) {
  std::map<int, const char*>::const_iterator it = _TParquetBloomFilterWrite_VALUES_TO_NAMES.find(val);
  if (it != _TParquetBloomFilterWrite_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTSessionTypeValues[] = {
  TSessionType::BEESWAX,
  TSessionType::HIVESERVER2,
  TSessionType::EXTERNAL_FRONTEND
};
const char* _kTSessionTypeNames[] = {
  "BEESWAX",
  "HIVESERVER2",
  "EXTERNAL_FRONTEND"
};
const std::map<int, const char*> _TSessionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTSessionTypeValues, _kTSessionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TSessionType::type& val) {
  std::map<int, const char*>::const_iterator it = _TSessionType_VALUES_TO_NAMES.find(val);
  if (it != _TSessionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TQueryOptions::~TQueryOptions() throw() {
}


void TQueryOptions::__set_abort_on_error(const bool val) {
  this->abort_on_error = val;
__isset.abort_on_error = true;
}

void TQueryOptions::__set_max_errors(const int32_t val) {
  this->max_errors = val;
__isset.max_errors = true;
}

void TQueryOptions::__set_disable_codegen(const bool val) {
  this->disable_codegen = val;
__isset.disable_codegen = true;
}

void TQueryOptions::__set_batch_size(const int32_t val) {
  this->batch_size = val;
__isset.batch_size = true;
}

void TQueryOptions::__set_num_nodes(const int32_t val) {
  this->num_nodes = val;
__isset.num_nodes = true;
}

void TQueryOptions::__set_max_scan_range_length(const int64_t val) {
  this->max_scan_range_length = val;
__isset.max_scan_range_length = true;
}

void TQueryOptions::__set_num_scanner_threads(const int32_t val) {
  this->num_scanner_threads = val;
__isset.num_scanner_threads = true;
}

void TQueryOptions::__set_debug_action(const std::string& val) {
  this->debug_action = val;
__isset.debug_action = true;
}

void TQueryOptions::__set_mem_limit(const int64_t val) {
  this->mem_limit = val;
__isset.mem_limit = true;
}

void TQueryOptions::__set_compression_codec(const  ::impala::TCompressionCodec& val) {
  this->compression_codec = val;
__isset.compression_codec = true;
}

void TQueryOptions::__set_hbase_caching(const int32_t val) {
  this->hbase_caching = val;
__isset.hbase_caching = true;
}

void TQueryOptions::__set_hbase_cache_blocks(const bool val) {
  this->hbase_cache_blocks = val;
__isset.hbase_cache_blocks = true;
}

void TQueryOptions::__set_parquet_file_size(const int64_t val) {
  this->parquet_file_size = val;
__isset.parquet_file_size = true;
}

void TQueryOptions::__set_explain_level(const  ::impala::TExplainLevel::type val) {
  this->explain_level = val;
__isset.explain_level = true;
}

void TQueryOptions::__set_sync_ddl(const bool val) {
  this->sync_ddl = val;
__isset.sync_ddl = true;
}

void TQueryOptions::__set_request_pool(const std::string& val) {
  this->request_pool = val;
__isset.request_pool = true;
}

void TQueryOptions::__set_disable_outermost_topn(const bool val) {
  this->disable_outermost_topn = val;
__isset.disable_outermost_topn = true;
}

void TQueryOptions::__set_query_timeout_s(const int32_t val) {
  this->query_timeout_s = val;
__isset.query_timeout_s = true;
}

void TQueryOptions::__set_buffer_pool_limit(const int64_t val) {
  this->buffer_pool_limit = val;
__isset.buffer_pool_limit = true;
}

void TQueryOptions::__set_appx_count_distinct(const bool val) {
  this->appx_count_distinct = val;
__isset.appx_count_distinct = true;
}

void TQueryOptions::__set_disable_unsafe_spills(const bool val) {
  this->disable_unsafe_spills = val;
__isset.disable_unsafe_spills = true;
}

void TQueryOptions::__set_exec_single_node_rows_threshold(const int32_t val) {
  this->exec_single_node_rows_threshold = val;
__isset.exec_single_node_rows_threshold = true;
}

void TQueryOptions::__set_optimize_partition_key_scans(const bool val) {
  this->optimize_partition_key_scans = val;
__isset.optimize_partition_key_scans = true;
}

void TQueryOptions::__set_replica_preference(const  ::impala::TReplicaPreference::type val) {
  this->replica_preference = val;
__isset.replica_preference = true;
}

void TQueryOptions::__set_schedule_random_replica(const bool val) {
  this->schedule_random_replica = val;
__isset.schedule_random_replica = true;
}

void TQueryOptions::__set_disable_streaming_preaggregations(const bool val) {
  this->disable_streaming_preaggregations = val;
__isset.disable_streaming_preaggregations = true;
}

void TQueryOptions::__set_runtime_filter_mode(const  ::impala::TRuntimeFilterMode::type val) {
  this->runtime_filter_mode = val;
__isset.runtime_filter_mode = true;
}

void TQueryOptions::__set_runtime_bloom_filter_size(const int32_t val) {
  this->runtime_bloom_filter_size = val;
__isset.runtime_bloom_filter_size = true;
}

void TQueryOptions::__set_runtime_filter_wait_time_ms(const int32_t val) {
  this->runtime_filter_wait_time_ms = val;
__isset.runtime_filter_wait_time_ms = true;
}

void TQueryOptions::__set_disable_row_runtime_filtering(const bool val) {
  this->disable_row_runtime_filtering = val;
__isset.disable_row_runtime_filtering = true;
}

void TQueryOptions::__set_max_num_runtime_filters(const int32_t val) {
  this->max_num_runtime_filters = val;
__isset.max_num_runtime_filters = true;
}

void TQueryOptions::__set_parquet_annotate_strings_utf8(const bool val) {
  this->parquet_annotate_strings_utf8 = val;
__isset.parquet_annotate_strings_utf8 = true;
}

void TQueryOptions::__set_parquet_fallback_schema_resolution(const TSchemaResolutionStrategy::type val) {
  this->parquet_fallback_schema_resolution = val;
__isset.parquet_fallback_schema_resolution = true;
}

void TQueryOptions::__set_mt_dop(const int32_t val) {
  this->mt_dop = val;
__isset.mt_dop = true;
}

void TQueryOptions::__set_s3_skip_insert_staging(const bool val) {
  this->s3_skip_insert_staging = val;
__isset.s3_skip_insert_staging = true;
}

void TQueryOptions::__set_runtime_filter_min_size(const int32_t val) {
  this->runtime_filter_min_size = val;
__isset.runtime_filter_min_size = true;
}

void TQueryOptions::__set_runtime_filter_max_size(const int32_t val) {
  this->runtime_filter_max_size = val;
__isset.runtime_filter_max_size = true;
}

void TQueryOptions::__set_prefetch_mode(const  ::impala::TPrefetchMode::type val) {
  this->prefetch_mode = val;
__isset.prefetch_mode = true;
}

void TQueryOptions::__set_strict_mode(const bool val) {
  this->strict_mode = val;
__isset.strict_mode = true;
}

void TQueryOptions::__set_scratch_limit(const int64_t val) {
  this->scratch_limit = val;
__isset.scratch_limit = true;
}

void TQueryOptions::__set_enable_expr_rewrites(const bool val) {
  this->enable_expr_rewrites = val;
__isset.enable_expr_rewrites = true;
}

void TQueryOptions::__set_decimal_v2(const bool val) {
  this->decimal_v2 = val;
__isset.decimal_v2 = true;
}

void TQueryOptions::__set_parquet_dictionary_filtering(const bool val) {
  this->parquet_dictionary_filtering = val;
__isset.parquet_dictionary_filtering = true;
}

void TQueryOptions::__set_parquet_array_resolution(const TParquetArrayResolution::type val) {
  this->parquet_array_resolution = val;
__isset.parquet_array_resolution = true;
}

void TQueryOptions::__set_parquet_read_statistics(const bool val) {
  this->parquet_read_statistics = val;
__isset.parquet_read_statistics = true;
}

void TQueryOptions::__set_default_join_distribution_mode(const TJoinDistributionMode::type val) {
  this->default_join_distribution_mode = val;
__isset.default_join_distribution_mode = true;
}

void TQueryOptions::__set_disable_codegen_rows_threshold(const int32_t val) {
  this->disable_codegen_rows_threshold = val;
__isset.disable_codegen_rows_threshold = true;
}

void TQueryOptions::__set_default_spillable_buffer_size(const int64_t val) {
  this->default_spillable_buffer_size = val;
__isset.default_spillable_buffer_size = true;
}

void TQueryOptions::__set_min_spillable_buffer_size(const int64_t val) {
  this->min_spillable_buffer_size = val;
__isset.min_spillable_buffer_size = true;
}

void TQueryOptions::__set_max_row_size(const int64_t val) {
  this->max_row_size = val;
__isset.max_row_size = true;
}

void TQueryOptions::__set_idle_session_timeout(const int32_t val) {
  this->idle_session_timeout = val;
__isset.idle_session_timeout = true;
}

void TQueryOptions::__set_compute_stats_min_sample_size(const int64_t val) {
  this->compute_stats_min_sample_size = val;
__isset.compute_stats_min_sample_size = true;
}

void TQueryOptions::__set_exec_time_limit_s(const int32_t val) {
  this->exec_time_limit_s = val;
__isset.exec_time_limit_s = true;
}

void TQueryOptions::__set_shuffle_distinct_exprs(const bool val) {
  this->shuffle_distinct_exprs = val;
__isset.shuffle_distinct_exprs = true;
}

void TQueryOptions::__set_max_mem_estimate_for_admission(const int64_t val) {
  this->max_mem_estimate_for_admission = val;
__isset.max_mem_estimate_for_admission = true;
}

void TQueryOptions::__set_thread_reservation_limit(const int32_t val) {
  this->thread_reservation_limit = val;
__isset.thread_reservation_limit = true;
}

void TQueryOptions::__set_thread_reservation_aggregate_limit(const int32_t val) {
  this->thread_reservation_aggregate_limit = val;
__isset.thread_reservation_aggregate_limit = true;
}

void TQueryOptions::__set_kudu_read_mode(const TKuduReadMode::type val) {
  this->kudu_read_mode = val;
__isset.kudu_read_mode = true;
}

void TQueryOptions::__set_allow_erasure_coded_files(const bool val) {
  this->allow_erasure_coded_files = val;
__isset.allow_erasure_coded_files = true;
}

void TQueryOptions::__set_timezone(const std::string& val) {
  this->timezone = val;
__isset.timezone = true;
}

void TQueryOptions::__set_scan_bytes_limit(const int64_t val) {
  this->scan_bytes_limit = val;
__isset.scan_bytes_limit = true;
}

void TQueryOptions::__set_cpu_limit_s(const int64_t val) {
  this->cpu_limit_s = val;
__isset.cpu_limit_s = true;
}

void TQueryOptions::__set_topn_bytes_limit(const int64_t val) {
  this->topn_bytes_limit = val;
__isset.topn_bytes_limit = true;
}

void TQueryOptions::__set_client_identifier(const std::string& val) {
  this->client_identifier = val;
__isset.client_identifier = true;
}

void TQueryOptions::__set_resource_trace_ratio(const double val) {
  this->resource_trace_ratio = val;
__isset.resource_trace_ratio = true;
}

void TQueryOptions::__set_num_remote_executor_candidates(const int32_t val) {
  this->num_remote_executor_candidates = val;
__isset.num_remote_executor_candidates = true;
}

void TQueryOptions::__set_num_rows_produced_limit(const int64_t val) {
  this->num_rows_produced_limit = val;
__isset.num_rows_produced_limit = true;
}

void TQueryOptions::__set_planner_testcase_mode(const bool val) {
  this->planner_testcase_mode = val;
__isset.planner_testcase_mode = true;
}

void TQueryOptions::__set_default_file_format(const  ::impala::THdfsFileFormat::type val) {
  this->default_file_format = val;
__isset.default_file_format = true;
}

void TQueryOptions::__set_parquet_timestamp_type(const TParquetTimestampType::type val) {
  this->parquet_timestamp_type = val;
__isset.parquet_timestamp_type = true;
}

void TQueryOptions::__set_parquet_read_page_index(const bool val) {
  this->parquet_read_page_index = val;
__isset.parquet_read_page_index = true;
}

void TQueryOptions::__set_parquet_write_page_index(const bool val) {
  this->parquet_write_page_index = val;
__isset.parquet_write_page_index = true;
}

void TQueryOptions::__set_parquet_page_row_count_limit(const int32_t val) {
  this->parquet_page_row_count_limit = val;
__isset.parquet_page_row_count_limit = true;
}

void TQueryOptions::__set_disable_hdfs_num_rows_estimate(const bool val) {
  this->disable_hdfs_num_rows_estimate = val;
__isset.disable_hdfs_num_rows_estimate = true;
}

void TQueryOptions::__set_default_hints_insert_statement(const std::string& val) {
  this->default_hints_insert_statement = val;
__isset.default_hints_insert_statement = true;
}

void TQueryOptions::__set_spool_query_results(const bool val) {
  this->spool_query_results = val;
__isset.spool_query_results = true;
}

void TQueryOptions::__set_default_transactional_type(const TTransactionalType::type val) {
  this->default_transactional_type = val;
__isset.default_transactional_type = true;
}

void TQueryOptions::__set_statement_expression_limit(const int32_t val) {
  this->statement_expression_limit = val;
__isset.statement_expression_limit = true;
}

void TQueryOptions::__set_max_statement_length_bytes(const int32_t val) {
  this->max_statement_length_bytes = val;
__isset.max_statement_length_bytes = true;
}

void TQueryOptions::__set_disable_data_cache(const bool val) {
  this->disable_data_cache = val;
__isset.disable_data_cache = true;
}

void TQueryOptions::__set_max_result_spooling_mem(const int64_t val) {
  this->max_result_spooling_mem = val;
__isset.max_result_spooling_mem = true;
}

void TQueryOptions::__set_max_spilled_result_spooling_mem(const int64_t val) {
  this->max_spilled_result_spooling_mem = val;
__isset.max_spilled_result_spooling_mem = true;
}

void TQueryOptions::__set_disable_hbase_num_rows_estimate(const bool val) {
  this->disable_hbase_num_rows_estimate = val;
__isset.disable_hbase_num_rows_estimate = true;
}

void TQueryOptions::__set_fetch_rows_timeout_ms(const int64_t val) {
  this->fetch_rows_timeout_ms = val;
__isset.fetch_rows_timeout_ms = true;
}

void TQueryOptions::__set_now_string(const std::string& val) {
  this->now_string = val;
__isset.now_string = true;
}

void TQueryOptions::__set_parquet_object_store_split_size(const int64_t val) {
  this->parquet_object_store_split_size = val;
__isset.parquet_object_store_split_size = true;
}

void TQueryOptions::__set_mem_limit_executors(const int64_t val) {
  this->mem_limit_executors = val;
__isset.mem_limit_executors = true;
}

void TQueryOptions::__set_broadcast_bytes_limit(const int64_t val) {
  this->broadcast_bytes_limit = val;
__isset.broadcast_bytes_limit = true;
}

void TQueryOptions::__set_preagg_bytes_limit(const int64_t val) {
  this->preagg_bytes_limit = val;
__isset.preagg_bytes_limit = true;
}

void TQueryOptions::__set_enable_cnf_rewrites(const bool val) {
  this->enable_cnf_rewrites = val;
__isset.enable_cnf_rewrites = true;
}

void TQueryOptions::__set_max_cnf_exprs(const int32_t val) {
  this->max_cnf_exprs = val;
__isset.max_cnf_exprs = true;
}

void TQueryOptions::__set_kudu_snapshot_read_timestamp_micros(const int64_t val) {
  this->kudu_snapshot_read_timestamp_micros = val;
__isset.kudu_snapshot_read_timestamp_micros = true;
}

void TQueryOptions::__set_retry_failed_queries(const bool val) {
  this->retry_failed_queries = val;
__isset.retry_failed_queries = true;
}

void TQueryOptions::__set_enabled_runtime_filter_types(const  ::impala::TEnabledRuntimeFilterTypes::type val) {
  this->enabled_runtime_filter_types = val;
__isset.enabled_runtime_filter_types = true;
}

void TQueryOptions::__set_async_codegen(const bool val) {
  this->async_codegen = val;
__isset.async_codegen = true;
}

void TQueryOptions::__set_enable_distinct_semi_join_optimization(const bool val) {
  this->enable_distinct_semi_join_optimization = val;
__isset.enable_distinct_semi_join_optimization = true;
}

void TQueryOptions::__set_sort_run_bytes_limit(const int64_t val) {
  this->sort_run_bytes_limit = val;
__isset.sort_run_bytes_limit = true;
}

void TQueryOptions::__set_max_fs_writers(const int32_t val) {
  this->max_fs_writers = val;
__isset.max_fs_writers = true;
}

void TQueryOptions::__set_refresh_updated_hms_partitions(const bool val) {
  this->refresh_updated_hms_partitions = val;
__isset.refresh_updated_hms_partitions = true;
}

void TQueryOptions::__set_spool_all_results_for_retries(const bool val) {
  this->spool_all_results_for_retries = val;
__isset.spool_all_results_for_retries = true;
}

void TQueryOptions::__set_runtime_filter_error_rate(const double val) {
  this->runtime_filter_error_rate = val;
__isset.runtime_filter_error_rate = true;
}

void TQueryOptions::__set_use_local_tz_for_unix_timestamp_conversions(const bool val) {
  this->use_local_tz_for_unix_timestamp_conversions = val;
__isset.use_local_tz_for_unix_timestamp_conversions = true;
}

void TQueryOptions::__set_convert_legacy_hive_parquet_utc_timestamps(const bool val) {
  this->convert_legacy_hive_parquet_utc_timestamps = val;
__isset.convert_legacy_hive_parquet_utc_timestamps = true;
}

void TQueryOptions::__set_enable_outer_join_to_inner_transformation(const bool val) {
  this->enable_outer_join_to_inner_transformation = val;
__isset.enable_outer_join_to_inner_transformation = true;
}

void TQueryOptions::__set_targeted_kudu_scan_range_length(const int64_t val) {
  this->targeted_kudu_scan_range_length = val;
__isset.targeted_kudu_scan_range_length = true;
}

void TQueryOptions::__set_report_skew_limit(const double val) {
  this->report_skew_limit = val;
__isset.report_skew_limit = true;
}

void TQueryOptions::__set_optimize_simple_limit(const bool val) {
  this->optimize_simple_limit = val;
__isset.optimize_simple_limit = true;
}

void TQueryOptions::__set_use_dop_for_costing(const bool val) {
  this->use_dop_for_costing = val;
__isset.use_dop_for_costing = true;
}

void TQueryOptions::__set_broadcast_to_partition_factor(const double val) {
  this->broadcast_to_partition_factor = val;
__isset.broadcast_to_partition_factor = true;
}

void TQueryOptions::__set_join_rows_produced_limit(const int64_t val) {
  this->join_rows_produced_limit = val;
__isset.join_rows_produced_limit = true;
}

void TQueryOptions::__set_utf8_mode(const bool val) {
  this->utf8_mode = val;
__isset.utf8_mode = true;
}

void TQueryOptions::__set_analytic_rank_pushdown_threshold(const int64_t val) {
  this->analytic_rank_pushdown_threshold = val;
__isset.analytic_rank_pushdown_threshold = true;
}

void TQueryOptions::__set_minmax_filter_threshold(const double val) {
  this->minmax_filter_threshold = val;
__isset.minmax_filter_threshold = true;
}

void TQueryOptions::__set_minmax_filtering_level(const  ::impala::TMinmaxFilteringLevel::type val) {
  this->minmax_filtering_level = val;
__isset.minmax_filtering_level = true;
}

void TQueryOptions::__set_compute_column_minmax_stats(const bool val) {
  this->compute_column_minmax_stats = val;
__isset.compute_column_minmax_stats = true;
}

void TQueryOptions::__set_show_column_minmax_stats(const bool val) {
  this->show_column_minmax_stats = val;
__isset.show_column_minmax_stats = true;
}

void TQueryOptions::__set_default_ndv_scale(const int32_t val) {
  this->default_ndv_scale = val;
__isset.default_ndv_scale = true;
}

void TQueryOptions::__set_kudu_replica_selection(const TKuduReplicaSelection::type val) {
  this->kudu_replica_selection = val;
__isset.kudu_replica_selection = true;
}

void TQueryOptions::__set_delete_stats_in_truncate(const bool val) {
  this->delete_stats_in_truncate = val;
__isset.delete_stats_in_truncate = true;
}

void TQueryOptions::__set_parquet_bloom_filtering(const bool val) {
  this->parquet_bloom_filtering = val;
__isset.parquet_bloom_filtering = true;
}

void TQueryOptions::__set_minmax_filter_sorted_columns(const bool val) {
  this->minmax_filter_sorted_columns = val;
__isset.minmax_filter_sorted_columns = true;
}

void TQueryOptions::__set_minmax_filter_fast_code_path(const TMinmaxFilterFastCodePathMode::type val) {
  this->minmax_filter_fast_code_path = val;
__isset.minmax_filter_fast_code_path = true;
}

void TQueryOptions::__set_enable_kudu_transaction(const bool val) {
  this->enable_kudu_transaction = val;
__isset.enable_kudu_transaction = true;
}

void TQueryOptions::__set_minmax_filter_partition_columns(const bool val) {
  this->minmax_filter_partition_columns = val;
__isset.minmax_filter_partition_columns = true;
}

void TQueryOptions::__set_parquet_bloom_filter_write(const TParquetBloomFilterWrite::type val) {
  this->parquet_bloom_filter_write = val;
__isset.parquet_bloom_filter_write = true;
}

void TQueryOptions::__set_orc_read_statistics(const bool val) {
  this->orc_read_statistics = val;
__isset.orc_read_statistics = true;
}

void TQueryOptions::__set_enable_async_ddl_execution(const bool val) {
  this->enable_async_ddl_execution = val;
__isset.enable_async_ddl_execution = true;
}

void TQueryOptions::__set_enable_async_load_data_execution(const bool val) {
  this->enable_async_load_data_execution = val;
__isset.enable_async_load_data_execution = true;
}

void TQueryOptions::__set_parquet_late_materialization_threshold(const int32_t val) {
  this->parquet_late_materialization_threshold = val;
__isset.parquet_late_materialization_threshold = true;
}
std::ostream& operator<<(std::ostream& out, const TQueryOptions& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TQueryOptions &a, TQueryOptions &b) {
  using ::std::swap;
  swap(a.abort_on_error, b.abort_on_error);
  swap(a.max_errors, b.max_errors);
  swap(a.disable_codegen, b.disable_codegen);
  swap(a.batch_size, b.batch_size);
  swap(a.num_nodes, b.num_nodes);
  swap(a.max_scan_range_length, b.max_scan_range_length);
  swap(a.num_scanner_threads, b.num_scanner_threads);
  swap(a.debug_action, b.debug_action);
  swap(a.mem_limit, b.mem_limit);
  swap(a.compression_codec, b.compression_codec);
  swap(a.hbase_caching, b.hbase_caching);
  swap(a.hbase_cache_blocks, b.hbase_cache_blocks);
  swap(a.parquet_file_size, b.parquet_file_size);
  swap(a.explain_level, b.explain_level);
  swap(a.sync_ddl, b.sync_ddl);
  swap(a.request_pool, b.request_pool);
  swap(a.disable_outermost_topn, b.disable_outermost_topn);
  swap(a.query_timeout_s, b.query_timeout_s);
  swap(a.buffer_pool_limit, b.buffer_pool_limit);
  swap(a.appx_count_distinct, b.appx_count_distinct);
  swap(a.disable_unsafe_spills, b.disable_unsafe_spills);
  swap(a.exec_single_node_rows_threshold, b.exec_single_node_rows_threshold);
  swap(a.optimize_partition_key_scans, b.optimize_partition_key_scans);
  swap(a.replica_preference, b.replica_preference);
  swap(a.schedule_random_replica, b.schedule_random_replica);
  swap(a.disable_streaming_preaggregations, b.disable_streaming_preaggregations);
  swap(a.runtime_filter_mode, b.runtime_filter_mode);
  swap(a.runtime_bloom_filter_size, b.runtime_bloom_filter_size);
  swap(a.runtime_filter_wait_time_ms, b.runtime_filter_wait_time_ms);
  swap(a.disable_row_runtime_filtering, b.disable_row_runtime_filtering);
  swap(a.max_num_runtime_filters, b.max_num_runtime_filters);
  swap(a.parquet_annotate_strings_utf8, b.parquet_annotate_strings_utf8);
  swap(a.parquet_fallback_schema_resolution, b.parquet_fallback_schema_resolution);
  swap(a.mt_dop, b.mt_dop);
  swap(a.s3_skip_insert_staging, b.s3_skip_insert_staging);
  swap(a.runtime_filter_min_size, b.runtime_filter_min_size);
  swap(a.runtime_filter_max_size, b.runtime_filter_max_size);
  swap(a.prefetch_mode, b.prefetch_mode);
  swap(a.strict_mode, b.strict_mode);
  swap(a.scratch_limit, b.scratch_limit);
  swap(a.enable_expr_rewrites, b.enable_expr_rewrites);
  swap(a.decimal_v2, b.decimal_v2);
  swap(a.parquet_dictionary_filtering, b.parquet_dictionary_filtering);
  swap(a.parquet_array_resolution, b.parquet_array_resolution);
  swap(a.parquet_read_statistics, b.parquet_read_statistics);
  swap(a.default_join_distribution_mode, b.default_join_distribution_mode);
  swap(a.disable_codegen_rows_threshold, b.disable_codegen_rows_threshold);
  swap(a.default_spillable_buffer_size, b.default_spillable_buffer_size);
  swap(a.min_spillable_buffer_size, b.min_spillable_buffer_size);
  swap(a.max_row_size, b.max_row_size);
  swap(a.idle_session_timeout, b.idle_session_timeout);
  swap(a.compute_stats_min_sample_size, b.compute_stats_min_sample_size);
  swap(a.exec_time_limit_s, b.exec_time_limit_s);
  swap(a.shuffle_distinct_exprs, b.shuffle_distinct_exprs);
  swap(a.max_mem_estimate_for_admission, b.max_mem_estimate_for_admission);
  swap(a.thread_reservation_limit, b.thread_reservation_limit);
  swap(a.thread_reservation_aggregate_limit, b.thread_reservation_aggregate_limit);
  swap(a.kudu_read_mode, b.kudu_read_mode);
  swap(a.allow_erasure_coded_files, b.allow_erasure_coded_files);
  swap(a.timezone, b.timezone);
  swap(a.scan_bytes_limit, b.scan_bytes_limit);
  swap(a.cpu_limit_s, b.cpu_limit_s);
  swap(a.topn_bytes_limit, b.topn_bytes_limit);
  swap(a.client_identifier, b.client_identifier);
  swap(a.resource_trace_ratio, b.resource_trace_ratio);
  swap(a.num_remote_executor_candidates, b.num_remote_executor_candidates);
  swap(a.num_rows_produced_limit, b.num_rows_produced_limit);
  swap(a.planner_testcase_mode, b.planner_testcase_mode);
  swap(a.default_file_format, b.default_file_format);
  swap(a.parquet_timestamp_type, b.parquet_timestamp_type);
  swap(a.parquet_read_page_index, b.parquet_read_page_index);
  swap(a.parquet_write_page_index, b.parquet_write_page_index);
  swap(a.parquet_page_row_count_limit, b.parquet_page_row_count_limit);
  swap(a.disable_hdfs_num_rows_estimate, b.disable_hdfs_num_rows_estimate);
  swap(a.default_hints_insert_statement, b.default_hints_insert_statement);
  swap(a.spool_query_results, b.spool_query_results);
  swap(a.default_transactional_type, b.default_transactional_type);
  swap(a.statement_expression_limit, b.statement_expression_limit);
  swap(a.max_statement_length_bytes, b.max_statement_length_bytes);
  swap(a.disable_data_cache, b.disable_data_cache);
  swap(a.max_result_spooling_mem, b.max_result_spooling_mem);
  swap(a.max_spilled_result_spooling_mem, b.max_spilled_result_spooling_mem);
  swap(a.disable_hbase_num_rows_estimate, b.disable_hbase_num_rows_estimate);
  swap(a.fetch_rows_timeout_ms, b.fetch_rows_timeout_ms);
  swap(a.now_string, b.now_string);
  swap(a.parquet_object_store_split_size, b.parquet_object_store_split_size);
  swap(a.mem_limit_executors, b.mem_limit_executors);
  swap(a.broadcast_bytes_limit, b.broadcast_bytes_limit);
  swap(a.preagg_bytes_limit, b.preagg_bytes_limit);
  swap(a.enable_cnf_rewrites, b.enable_cnf_rewrites);
  swap(a.max_cnf_exprs, b.max_cnf_exprs);
  swap(a.kudu_snapshot_read_timestamp_micros, b.kudu_snapshot_read_timestamp_micros);
  swap(a.retry_failed_queries, b.retry_failed_queries);
  swap(a.enabled_runtime_filter_types, b.enabled_runtime_filter_types);
  swap(a.async_codegen, b.async_codegen);
  swap(a.enable_distinct_semi_join_optimization, b.enable_distinct_semi_join_optimization);
  swap(a.sort_run_bytes_limit, b.sort_run_bytes_limit);
  swap(a.max_fs_writers, b.max_fs_writers);
  swap(a.refresh_updated_hms_partitions, b.refresh_updated_hms_partitions);
  swap(a.spool_all_results_for_retries, b.spool_all_results_for_retries);
  swap(a.runtime_filter_error_rate, b.runtime_filter_error_rate);
  swap(a.use_local_tz_for_unix_timestamp_conversions, b.use_local_tz_for_unix_timestamp_conversions);
  swap(a.convert_legacy_hive_parquet_utc_timestamps, b.convert_legacy_hive_parquet_utc_timestamps);
  swap(a.enable_outer_join_to_inner_transformation, b.enable_outer_join_to_inner_transformation);
  swap(a.targeted_kudu_scan_range_length, b.targeted_kudu_scan_range_length);
  swap(a.report_skew_limit, b.report_skew_limit);
  swap(a.optimize_simple_limit, b.optimize_simple_limit);
  swap(a.use_dop_for_costing, b.use_dop_for_costing);
  swap(a.broadcast_to_partition_factor, b.broadcast_to_partition_factor);
  swap(a.join_rows_produced_limit, b.join_rows_produced_limit);
  swap(a.utf8_mode, b.utf8_mode);
  swap(a.analytic_rank_pushdown_threshold, b.analytic_rank_pushdown_threshold);
  swap(a.minmax_filter_threshold, b.minmax_filter_threshold);
  swap(a.minmax_filtering_level, b.minmax_filtering_level);
  swap(a.compute_column_minmax_stats, b.compute_column_minmax_stats);
  swap(a.show_column_minmax_stats, b.show_column_minmax_stats);
  swap(a.default_ndv_scale, b.default_ndv_scale);
  swap(a.kudu_replica_selection, b.kudu_replica_selection);
  swap(a.delete_stats_in_truncate, b.delete_stats_in_truncate);
  swap(a.parquet_bloom_filtering, b.parquet_bloom_filtering);
  swap(a.minmax_filter_sorted_columns, b.minmax_filter_sorted_columns);
  swap(a.minmax_filter_fast_code_path, b.minmax_filter_fast_code_path);
  swap(a.enable_kudu_transaction, b.enable_kudu_transaction);
  swap(a.minmax_filter_partition_columns, b.minmax_filter_partition_columns);
  swap(a.parquet_bloom_filter_write, b.parquet_bloom_filter_write);
  swap(a.orc_read_statistics, b.orc_read_statistics);
  swap(a.enable_async_ddl_execution, b.enable_async_ddl_execution);
  swap(a.enable_async_load_data_execution, b.enable_async_load_data_execution);
  swap(a.parquet_late_materialization_threshold, b.parquet_late_materialization_threshold);
  swap(a.__isset, b.__isset);
}

TQueryOptions::TQueryOptions(const TQueryOptions& other16) {
  abort_on_error = other16.abort_on_error;
  max_errors = other16.max_errors;
  disable_codegen = other16.disable_codegen;
  batch_size = other16.batch_size;
  num_nodes = other16.num_nodes;
  max_scan_range_length = other16.max_scan_range_length;
  num_scanner_threads = other16.num_scanner_threads;
  debug_action = other16.debug_action;
  mem_limit = other16.mem_limit;
  compression_codec = other16.compression_codec;
  hbase_caching = other16.hbase_caching;
  hbase_cache_blocks = other16.hbase_cache_blocks;
  parquet_file_size = other16.parquet_file_size;
  explain_level = other16.explain_level;
  sync_ddl = other16.sync_ddl;
  request_pool = other16.request_pool;
  disable_outermost_topn = other16.disable_outermost_topn;
  query_timeout_s = other16.query_timeout_s;
  buffer_pool_limit = other16.buffer_pool_limit;
  appx_count_distinct = other16.appx_count_distinct;
  disable_unsafe_spills = other16.disable_unsafe_spills;
  exec_single_node_rows_threshold = other16.exec_single_node_rows_threshold;
  optimize_partition_key_scans = other16.optimize_partition_key_scans;
  replica_preference = other16.replica_preference;
  schedule_random_replica = other16.schedule_random_replica;
  disable_streaming_preaggregations = other16.disable_streaming_preaggregations;
  runtime_filter_mode = other16.runtime_filter_mode;
  runtime_bloom_filter_size = other16.runtime_bloom_filter_size;
  runtime_filter_wait_time_ms = other16.runtime_filter_wait_time_ms;
  disable_row_runtime_filtering = other16.disable_row_runtime_filtering;
  max_num_runtime_filters = other16.max_num_runtime_filters;
  parquet_annotate_strings_utf8 = other16.parquet_annotate_strings_utf8;
  parquet_fallback_schema_resolution = other16.parquet_fallback_schema_resolution;
  mt_dop = other16.mt_dop;
  s3_skip_insert_staging = other16.s3_skip_insert_staging;
  runtime_filter_min_size = other16.runtime_filter_min_size;
  runtime_filter_max_size = other16.runtime_filter_max_size;
  prefetch_mode = other16.prefetch_mode;
  strict_mode = other16.strict_mode;
  scratch_limit = other16.scratch_limit;
  enable_expr_rewrites = other16.enable_expr_rewrites;
  decimal_v2 = other16.decimal_v2;
  parquet_dictionary_filtering = other16.parquet_dictionary_filtering;
  parquet_array_resolution = other16.parquet_array_resolution;
  parquet_read_statistics = other16.parquet_read_statistics;
  default_join_distribution_mode = other16.default_join_distribution_mode;
  disable_codegen_rows_threshold = other16.disable_codegen_rows_threshold;
  default_spillable_buffer_size = other16.default_spillable_buffer_size;
  min_spillable_buffer_size = other16.min_spillable_buffer_size;
  max_row_size = other16.max_row_size;
  idle_session_timeout = other16.idle_session_timeout;
  compute_stats_min_sample_size = other16.compute_stats_min_sample_size;
  exec_time_limit_s = other16.exec_time_limit_s;
  shuffle_distinct_exprs = other16.shuffle_distinct_exprs;
  max_mem_estimate_for_admission = other16.max_mem_estimate_for_admission;
  thread_reservation_limit = other16.thread_reservation_limit;
  thread_reservation_aggregate_limit = other16.thread_reservation_aggregate_limit;
  kudu_read_mode = other16.kudu_read_mode;
  allow_erasure_coded_files = other16.allow_erasure_coded_files;
  timezone = other16.timezone;
  scan_bytes_limit = other16.scan_bytes_limit;
  cpu_limit_s = other16.cpu_limit_s;
  topn_bytes_limit = other16.topn_bytes_limit;
  client_identifier = other16.client_identifier;
  resource_trace_ratio = other16.resource_trace_ratio;
  num_remote_executor_candidates = other16.num_remote_executor_candidates;
  num_rows_produced_limit = other16.num_rows_produced_limit;
  planner_testcase_mode = other16.planner_testcase_mode;
  default_file_format = other16.default_file_format;
  parquet_timestamp_type = other16.parquet_timestamp_type;
  parquet_read_page_index = other16.parquet_read_page_index;
  parquet_write_page_index = other16.parquet_write_page_index;
  parquet_page_row_count_limit = other16.parquet_page_row_count_limit;
  disable_hdfs_num_rows_estimate = other16.disable_hdfs_num_rows_estimate;
  default_hints_insert_statement = other16.default_hints_insert_statement;
  spool_query_results = other16.spool_query_results;
  default_transactional_type = other16.default_transactional_type;
  statement_expression_limit = other16.statement_expression_limit;
  max_statement_length_bytes = other16.max_statement_length_bytes;
  disable_data_cache = other16.disable_data_cache;
  max_result_spooling_mem = other16.max_result_spooling_mem;
  max_spilled_result_spooling_mem = other16.max_spilled_result_spooling_mem;
  disable_hbase_num_rows_estimate = other16.disable_hbase_num_rows_estimate;
  fetch_rows_timeout_ms = other16.fetch_rows_timeout_ms;
  now_string = other16.now_string;
  parquet_object_store_split_size = other16.parquet_object_store_split_size;
  mem_limit_executors = other16.mem_limit_executors;
  broadcast_bytes_limit = other16.broadcast_bytes_limit;
  preagg_bytes_limit = other16.preagg_bytes_limit;
  enable_cnf_rewrites = other16.enable_cnf_rewrites;
  max_cnf_exprs = other16.max_cnf_exprs;
  kudu_snapshot_read_timestamp_micros = other16.kudu_snapshot_read_timestamp_micros;
  retry_failed_queries = other16.retry_failed_queries;
  enabled_runtime_filter_types = other16.enabled_runtime_filter_types;
  async_codegen = other16.async_codegen;
  enable_distinct_semi_join_optimization = other16.enable_distinct_semi_join_optimization;
  sort_run_bytes_limit = other16.sort_run_bytes_limit;
  max_fs_writers = other16.max_fs_writers;
  refresh_updated_hms_partitions = other16.refresh_updated_hms_partitions;
  spool_all_results_for_retries = other16.spool_all_results_for_retries;
  runtime_filter_error_rate = other16.runtime_filter_error_rate;
  use_local_tz_for_unix_timestamp_conversions = other16.use_local_tz_for_unix_timestamp_conversions;
  convert_legacy_hive_parquet_utc_timestamps = other16.convert_legacy_hive_parquet_utc_timestamps;
  enable_outer_join_to_inner_transformation = other16.enable_outer_join_to_inner_transformation;
  targeted_kudu_scan_range_length = other16.targeted_kudu_scan_range_length;
  report_skew_limit = other16.report_skew_limit;
  optimize_simple_limit = other16.optimize_simple_limit;
  use_dop_for_costing = other16.use_dop_for_costing;
  broadcast_to_partition_factor = other16.broadcast_to_partition_factor;
  join_rows_produced_limit = other16.join_rows_produced_limit;
  utf8_mode = other16.utf8_mode;
  analytic_rank_pushdown_threshold = other16.analytic_rank_pushdown_threshold;
  minmax_filter_threshold = other16.minmax_filter_threshold;
  minmax_filtering_level = other16.minmax_filtering_level;
  compute_column_minmax_stats = other16.compute_column_minmax_stats;
  show_column_minmax_stats = other16.show_column_minmax_stats;
  default_ndv_scale = other16.default_ndv_scale;
  kudu_replica_selection = other16.kudu_replica_selection;
  delete_stats_in_truncate = other16.delete_stats_in_truncate;
  parquet_bloom_filtering = other16.parquet_bloom_filtering;
  minmax_filter_sorted_columns = other16.minmax_filter_sorted_columns;
  minmax_filter_fast_code_path = other16.minmax_filter_fast_code_path;
  enable_kudu_transaction = other16.enable_kudu_transaction;
  minmax_filter_partition_columns = other16.minmax_filter_partition_columns;
  parquet_bloom_filter_write = other16.parquet_bloom_filter_write;
  orc_read_statistics = other16.orc_read_statistics;
  enable_async_ddl_execution = other16.enable_async_ddl_execution;
  enable_async_load_data_execution = other16.enable_async_load_data_execution;
  parquet_late_materialization_threshold = other16.parquet_late_materialization_threshold;
  __isset = other16.__isset;
}
TQueryOptions::TQueryOptions( TQueryOptions&& other17) {
  abort_on_error = std::move(other17.abort_on_error);
  max_errors = std::move(other17.max_errors);
  disable_codegen = std::move(other17.disable_codegen);
  batch_size = std::move(other17.batch_size);
  num_nodes = std::move(other17.num_nodes);
  max_scan_range_length = std::move(other17.max_scan_range_length);
  num_scanner_threads = std::move(other17.num_scanner_threads);
  debug_action = std::move(other17.debug_action);
  mem_limit = std::move(other17.mem_limit);
  compression_codec = std::move(other17.compression_codec);
  hbase_caching = std::move(other17.hbase_caching);
  hbase_cache_blocks = std::move(other17.hbase_cache_blocks);
  parquet_file_size = std::move(other17.parquet_file_size);
  explain_level = std::move(other17.explain_level);
  sync_ddl = std::move(other17.sync_ddl);
  request_pool = std::move(other17.request_pool);
  disable_outermost_topn = std::move(other17.disable_outermost_topn);
  query_timeout_s = std::move(other17.query_timeout_s);
  buffer_pool_limit = std::move(other17.buffer_pool_limit);
  appx_count_distinct = std::move(other17.appx_count_distinct);
  disable_unsafe_spills = std::move(other17.disable_unsafe_spills);
  exec_single_node_rows_threshold = std::move(other17.exec_single_node_rows_threshold);
  optimize_partition_key_scans = std::move(other17.optimize_partition_key_scans);
  replica_preference = std::move(other17.replica_preference);
  schedule_random_replica = std::move(other17.schedule_random_replica);
  disable_streaming_preaggregations = std::move(other17.disable_streaming_preaggregations);
  runtime_filter_mode = std::move(other17.runtime_filter_mode);
  runtime_bloom_filter_size = std::move(other17.runtime_bloom_filter_size);
  runtime_filter_wait_time_ms = std::move(other17.runtime_filter_wait_time_ms);
  disable_row_runtime_filtering = std::move(other17.disable_row_runtime_filtering);
  max_num_runtime_filters = std::move(other17.max_num_runtime_filters);
  parquet_annotate_strings_utf8 = std::move(other17.parquet_annotate_strings_utf8);
  parquet_fallback_schema_resolution = std::move(other17.parquet_fallback_schema_resolution);
  mt_dop = std::move(other17.mt_dop);
  s3_skip_insert_staging = std::move(other17.s3_skip_insert_staging);
  runtime_filter_min_size = std::move(other17.runtime_filter_min_size);
  runtime_filter_max_size = std::move(other17.runtime_filter_max_size);
  prefetch_mode = std::move(other17.prefetch_mode);
  strict_mode = std::move(other17.strict_mode);
  scratch_limit = std::move(other17.scratch_limit);
  enable_expr_rewrites = std::move(other17.enable_expr_rewrites);
  decimal_v2 = std::move(other17.decimal_v2);
  parquet_dictionary_filtering = std::move(other17.parquet_dictionary_filtering);
  parquet_array_resolution = std::move(other17.parquet_array_resolution);
  parquet_read_statistics = std::move(other17.parquet_read_statistics);
  default_join_distribution_mode = std::move(other17.default_join_distribution_mode);
  disable_codegen_rows_threshold = std::move(other17.disable_codegen_rows_threshold);
  default_spillable_buffer_size = std::move(other17.default_spillable_buffer_size);
  min_spillable_buffer_size = std::move(other17.min_spillable_buffer_size);
  max_row_size = std::move(other17.max_row_size);
  idle_session_timeout = std::move(other17.idle_session_timeout);
  compute_stats_min_sample_size = std::move(other17.compute_stats_min_sample_size);
  exec_time_limit_s = std::move(other17.exec_time_limit_s);
  shuffle_distinct_exprs = std::move(other17.shuffle_distinct_exprs);
  max_mem_estimate_for_admission = std::move(other17.max_mem_estimate_for_admission);
  thread_reservation_limit = std::move(other17.thread_reservation_limit);
  thread_reservation_aggregate_limit = std::move(other17.thread_reservation_aggregate_limit);
  kudu_read_mode = std::move(other17.kudu_read_mode);
  allow_erasure_coded_files = std::move(other17.allow_erasure_coded_files);
  timezone = std::move(other17.timezone);
  scan_bytes_limit = std::move(other17.scan_bytes_limit);
  cpu_limit_s = std::move(other17.cpu_limit_s);
  topn_bytes_limit = std::move(other17.topn_bytes_limit);
  client_identifier = std::move(other17.client_identifier);
  resource_trace_ratio = std::move(other17.resource_trace_ratio);
  num_remote_executor_candidates = std::move(other17.num_remote_executor_candidates);
  num_rows_produced_limit = std::move(other17.num_rows_produced_limit);
  planner_testcase_mode = std::move(other17.planner_testcase_mode);
  default_file_format = std::move(other17.default_file_format);
  parquet_timestamp_type = std::move(other17.parquet_timestamp_type);
  parquet_read_page_index = std::move(other17.parquet_read_page_index);
  parquet_write_page_index = std::move(other17.parquet_write_page_index);
  parquet_page_row_count_limit = std::move(other17.parquet_page_row_count_limit);
  disable_hdfs_num_rows_estimate = std::move(other17.disable_hdfs_num_rows_estimate);
  default_hints_insert_statement = std::move(other17.default_hints_insert_statement);
  spool_query_results = std::move(other17.spool_query_results);
  default_transactional_type = std::move(other17.default_transactional_type);
  statement_expression_limit = std::move(other17.statement_expression_limit);
  max_statement_length_bytes = std::move(other17.max_statement_length_bytes);
  disable_data_cache = std::move(other17.disable_data_cache);
  max_result_spooling_mem = std::move(other17.max_result_spooling_mem);
  max_spilled_result_spooling_mem = std::move(other17.max_spilled_result_spooling_mem);
  disable_hbase_num_rows_estimate = std::move(other17.disable_hbase_num_rows_estimate);
  fetch_rows_timeout_ms = std::move(other17.fetch_rows_timeout_ms);
  now_string = std::move(other17.now_string);
  parquet_object_store_split_size = std::move(other17.parquet_object_store_split_size);
  mem_limit_executors = std::move(other17.mem_limit_executors);
  broadcast_bytes_limit = std::move(other17.broadcast_bytes_limit);
  preagg_bytes_limit = std::move(other17.preagg_bytes_limit);
  enable_cnf_rewrites = std::move(other17.enable_cnf_rewrites);
  max_cnf_exprs = std::move(other17.max_cnf_exprs);
  kudu_snapshot_read_timestamp_micros = std::move(other17.kudu_snapshot_read_timestamp_micros);
  retry_failed_queries = std::move(other17.retry_failed_queries);
  enabled_runtime_filter_types = std::move(other17.enabled_runtime_filter_types);
  async_codegen = std::move(other17.async_codegen);
  enable_distinct_semi_join_optimization = std::move(other17.enable_distinct_semi_join_optimization);
  sort_run_bytes_limit = std::move(other17.sort_run_bytes_limit);
  max_fs_writers = std::move(other17.max_fs_writers);
  refresh_updated_hms_partitions = std::move(other17.refresh_updated_hms_partitions);
  spool_all_results_for_retries = std::move(other17.spool_all_results_for_retries);
  runtime_filter_error_rate = std::move(other17.runtime_filter_error_rate);
  use_local_tz_for_unix_timestamp_conversions = std::move(other17.use_local_tz_for_unix_timestamp_conversions);
  convert_legacy_hive_parquet_utc_timestamps = std::move(other17.convert_legacy_hive_parquet_utc_timestamps);
  enable_outer_join_to_inner_transformation = std::move(other17.enable_outer_join_to_inner_transformation);
  targeted_kudu_scan_range_length = std::move(other17.targeted_kudu_scan_range_length);
  report_skew_limit = std::move(other17.report_skew_limit);
  optimize_simple_limit = std::move(other17.optimize_simple_limit);
  use_dop_for_costing = std::move(other17.use_dop_for_costing);
  broadcast_to_partition_factor = std::move(other17.broadcast_to_partition_factor);
  join_rows_produced_limit = std::move(other17.join_rows_produced_limit);
  utf8_mode = std::move(other17.utf8_mode);
  analytic_rank_pushdown_threshold = std::move(other17.analytic_rank_pushdown_threshold);
  minmax_filter_threshold = std::move(other17.minmax_filter_threshold);
  minmax_filtering_level = std::move(other17.minmax_filtering_level);
  compute_column_minmax_stats = std::move(other17.compute_column_minmax_stats);
  show_column_minmax_stats = std::move(other17.show_column_minmax_stats);
  default_ndv_scale = std::move(other17.default_ndv_scale);
  kudu_replica_selection = std::move(other17.kudu_replica_selection);
  delete_stats_in_truncate = std::move(other17.delete_stats_in_truncate);
  parquet_bloom_filtering = std::move(other17.parquet_bloom_filtering);
  minmax_filter_sorted_columns = std::move(other17.minmax_filter_sorted_columns);
  minmax_filter_fast_code_path = std::move(other17.minmax_filter_fast_code_path);
  enable_kudu_transaction = std::move(other17.enable_kudu_transaction);
  minmax_filter_partition_columns = std::move(other17.minmax_filter_partition_columns);
  parquet_bloom_filter_write = std::move(other17.parquet_bloom_filter_write);
  orc_read_statistics = std::move(other17.orc_read_statistics);
  enable_async_ddl_execution = std::move(other17.enable_async_ddl_execution);
  enable_async_load_data_execution = std::move(other17.enable_async_load_data_execution);
  parquet_late_materialization_threshold = std::move(other17.parquet_late_materialization_threshold);
  __isset = std::move(other17.__isset);
}
TQueryOptions& TQueryOptions::operator=(const TQueryOptions& other18) {
  abort_on_error = other18.abort_on_error;
  max_errors = other18.max_errors;
  disable_codegen = other18.disable_codegen;
  batch_size = other18.batch_size;
  num_nodes = other18.num_nodes;
  max_scan_range_length = other18.max_scan_range_length;
  num_scanner_threads = other18.num_scanner_threads;
  debug_action = other18.debug_action;
  mem_limit = other18.mem_limit;
  compression_codec = other18.compression_codec;
  hbase_caching = other18.hbase_caching;
  hbase_cache_blocks = other18.hbase_cache_blocks;
  parquet_file_size = other18.parquet_file_size;
  explain_level = other18.explain_level;
  sync_ddl = other18.sync_ddl;
  request_pool = other18.request_pool;
  disable_outermost_topn = other18.disable_outermost_topn;
  query_timeout_s = other18.query_timeout_s;
  buffer_pool_limit = other18.buffer_pool_limit;
  appx_count_distinct = other18.appx_count_distinct;
  disable_unsafe_spills = other18.disable_unsafe_spills;
  exec_single_node_rows_threshold = other18.exec_single_node_rows_threshold;
  optimize_partition_key_scans = other18.optimize_partition_key_scans;
  replica_preference = other18.replica_preference;
  schedule_random_replica = other18.schedule_random_replica;
  disable_streaming_preaggregations = other18.disable_streaming_preaggregations;
  runtime_filter_mode = other18.runtime_filter_mode;
  runtime_bloom_filter_size = other18.runtime_bloom_filter_size;
  runtime_filter_wait_time_ms = other18.runtime_filter_wait_time_ms;
  disable_row_runtime_filtering = other18.disable_row_runtime_filtering;
  max_num_runtime_filters = other18.max_num_runtime_filters;
  parquet_annotate_strings_utf8 = other18.parquet_annotate_strings_utf8;
  parquet_fallback_schema_resolution = other18.parquet_fallback_schema_resolution;
  mt_dop = other18.mt_dop;
  s3_skip_insert_staging = other18.s3_skip_insert_staging;
  runtime_filter_min_size = other18.runtime_filter_min_size;
  runtime_filter_max_size = other18.runtime_filter_max_size;
  prefetch_mode = other18.prefetch_mode;
  strict_mode = other18.strict_mode;
  scratch_limit = other18.scratch_limit;
  enable_expr_rewrites = other18.enable_expr_rewrites;
  decimal_v2 = other18.decimal_v2;
  parquet_dictionary_filtering = other18.parquet_dictionary_filtering;
  parquet_array_resolution = other18.parquet_array_resolution;
  parquet_read_statistics = other18.parquet_read_statistics;
  default_join_distribution_mode = other18.default_join_distribution_mode;
  disable_codegen_rows_threshold = other18.disable_codegen_rows_threshold;
  default_spillable_buffer_size = other18.default_spillable_buffer_size;
  min_spillable_buffer_size = other18.min_spillable_buffer_size;
  max_row_size = other18.max_row_size;
  idle_session_timeout = other18.idle_session_timeout;
  compute_stats_min_sample_size = other18.compute_stats_min_sample_size;
  exec_time_limit_s = other18.exec_time_limit_s;
  shuffle_distinct_exprs = other18.shuffle_distinct_exprs;
  max_mem_estimate_for_admission = other18.max_mem_estimate_for_admission;
  thread_reservation_limit = other18.thread_reservation_limit;
  thread_reservation_aggregate_limit = other18.thread_reservation_aggregate_limit;
  kudu_read_mode = other18.kudu_read_mode;
  allow_erasure_coded_files = other18.allow_erasure_coded_files;
  timezone = other18.timezone;
  scan_bytes_limit = other18.scan_bytes_limit;
  cpu_limit_s = other18.cpu_limit_s;
  topn_bytes_limit = other18.topn_bytes_limit;
  client_identifier = other18.client_identifier;
  resource_trace_ratio = other18.resource_trace_ratio;
  num_remote_executor_candidates = other18.num_remote_executor_candidates;
  num_rows_produced_limit = other18.num_rows_produced_limit;
  planner_testcase_mode = other18.planner_testcase_mode;
  default_file_format = other18.default_file_format;
  parquet_timestamp_type = other18.parquet_timestamp_type;
  parquet_read_page_index = other18.parquet_read_page_index;
  parquet_write_page_index = other18.parquet_write_page_index;
  parquet_page_row_count_limit = other18.parquet_page_row_count_limit;
  disable_hdfs_num_rows_estimate = other18.disable_hdfs_num_rows_estimate;
  default_hints_insert_statement = other18.default_hints_insert_statement;
  spool_query_results = other18.spool_query_results;
  default_transactional_type = other18.default_transactional_type;
  statement_expression_limit = other18.statement_expression_limit;
  max_statement_length_bytes = other18.max_statement_length_bytes;
  disable_data_cache = other18.disable_data_cache;
  max_result_spooling_mem = other18.max_result_spooling_mem;
  max_spilled_result_spooling_mem = other18.max_spilled_result_spooling_mem;
  disable_hbase_num_rows_estimate = other18.disable_hbase_num_rows_estimate;
  fetch_rows_timeout_ms = other18.fetch_rows_timeout_ms;
  now_string = other18.now_string;
  parquet_object_store_split_size = other18.parquet_object_store_split_size;
  mem_limit_executors = other18.mem_limit_executors;
  broadcast_bytes_limit = other18.broadcast_bytes_limit;
  preagg_bytes_limit = other18.preagg_bytes_limit;
  enable_cnf_rewrites = other18.enable_cnf_rewrites;
  max_cnf_exprs = other18.max_cnf_exprs;
  kudu_snapshot_read_timestamp_micros = other18.kudu_snapshot_read_timestamp_micros;
  retry_failed_queries = other18.retry_failed_queries;
  enabled_runtime_filter_types = other18.enabled_runtime_filter_types;
  async_codegen = other18.async_codegen;
  enable_distinct_semi_join_optimization = other18.enable_distinct_semi_join_optimization;
  sort_run_bytes_limit = other18.sort_run_bytes_limit;
  max_fs_writers = other18.max_fs_writers;
  refresh_updated_hms_partitions = other18.refresh_updated_hms_partitions;
  spool_all_results_for_retries = other18.spool_all_results_for_retries;
  runtime_filter_error_rate = other18.runtime_filter_error_rate;
  use_local_tz_for_unix_timestamp_conversions = other18.use_local_tz_for_unix_timestamp_conversions;
  convert_legacy_hive_parquet_utc_timestamps = other18.convert_legacy_hive_parquet_utc_timestamps;
  enable_outer_join_to_inner_transformation = other18.enable_outer_join_to_inner_transformation;
  targeted_kudu_scan_range_length = other18.targeted_kudu_scan_range_length;
  report_skew_limit = other18.report_skew_limit;
  optimize_simple_limit = other18.optimize_simple_limit;
  use_dop_for_costing = other18.use_dop_for_costing;
  broadcast_to_partition_factor = other18.broadcast_to_partition_factor;
  join_rows_produced_limit = other18.join_rows_produced_limit;
  utf8_mode = other18.utf8_mode;
  analytic_rank_pushdown_threshold = other18.analytic_rank_pushdown_threshold;
  minmax_filter_threshold = other18.minmax_filter_threshold;
  minmax_filtering_level = other18.minmax_filtering_level;
  compute_column_minmax_stats = other18.compute_column_minmax_stats;
  show_column_minmax_stats = other18.show_column_minmax_stats;
  default_ndv_scale = other18.default_ndv_scale;
  kudu_replica_selection = other18.kudu_replica_selection;
  delete_stats_in_truncate = other18.delete_stats_in_truncate;
  parquet_bloom_filtering = other18.parquet_bloom_filtering;
  minmax_filter_sorted_columns = other18.minmax_filter_sorted_columns;
  minmax_filter_fast_code_path = other18.minmax_filter_fast_code_path;
  enable_kudu_transaction = other18.enable_kudu_transaction;
  minmax_filter_partition_columns = other18.minmax_filter_partition_columns;
  parquet_bloom_filter_write = other18.parquet_bloom_filter_write;
  orc_read_statistics = other18.orc_read_statistics;
  enable_async_ddl_execution = other18.enable_async_ddl_execution;
  enable_async_load_data_execution = other18.enable_async_load_data_execution;
  parquet_late_materialization_threshold = other18.parquet_late_materialization_threshold;
  __isset = other18.__isset;
  return *this;
}
TQueryOptions& TQueryOptions::operator=(TQueryOptions&& other19) {
  abort_on_error = std::move(other19.abort_on_error);
  max_errors = std::move(other19.max_errors);
  disable_codegen = std::move(other19.disable_codegen);
  batch_size = std::move(other19.batch_size);
  num_nodes = std::move(other19.num_nodes);
  max_scan_range_length = std::move(other19.max_scan_range_length);
  num_scanner_threads = std::move(other19.num_scanner_threads);
  debug_action = std::move(other19.debug_action);
  mem_limit = std::move(other19.mem_limit);
  compression_codec = std::move(other19.compression_codec);
  hbase_caching = std::move(other19.hbase_caching);
  hbase_cache_blocks = std::move(other19.hbase_cache_blocks);
  parquet_file_size = std::move(other19.parquet_file_size);
  explain_level = std::move(other19.explain_level);
  sync_ddl = std::move(other19.sync_ddl);
  request_pool = std::move(other19.request_pool);
  disable_outermost_topn = std::move(other19.disable_outermost_topn);
  query_timeout_s = std::move(other19.query_timeout_s);
  buffer_pool_limit = std::move(other19.buffer_pool_limit);
  appx_count_distinct = std::move(other19.appx_count_distinct);
  disable_unsafe_spills = std::move(other19.disable_unsafe_spills);
  exec_single_node_rows_threshold = std::move(other19.exec_single_node_rows_threshold);
  optimize_partition_key_scans = std::move(other19.optimize_partition_key_scans);
  replica_preference = std::move(other19.replica_preference);
  schedule_random_replica = std::move(other19.schedule_random_replica);
  disable_streaming_preaggregations = std::move(other19.disable_streaming_preaggregations);
  runtime_filter_mode = std::move(other19.runtime_filter_mode);
  runtime_bloom_filter_size = std::move(other19.runtime_bloom_filter_size);
  runtime_filter_wait_time_ms = std::move(other19.runtime_filter_wait_time_ms);
  disable_row_runtime_filtering = std::move(other19.disable_row_runtime_filtering);
  max_num_runtime_filters = std::move(other19.max_num_runtime_filters);
  parquet_annotate_strings_utf8 = std::move(other19.parquet_annotate_strings_utf8);
  parquet_fallback_schema_resolution = std::move(other19.parquet_fallback_schema_resolution);
  mt_dop = std::move(other19.mt_dop);
  s3_skip_insert_staging = std::move(other19.s3_skip_insert_staging);
  runtime_filter_min_size = std::move(other19.runtime_filter_min_size);
  runtime_filter_max_size = std::move(other19.runtime_filter_max_size);
  prefetch_mode = std::move(other19.prefetch_mode);
  strict_mode = std::move(other19.strict_mode);
  scratch_limit = std::move(other19.scratch_limit);
  enable_expr_rewrites = std::move(other19.enable_expr_rewrites);
  decimal_v2 = std::move(other19.decimal_v2);
  parquet_dictionary_filtering = std::move(other19.parquet_dictionary_filtering);
  parquet_array_resolution = std::move(other19.parquet_array_resolution);
  parquet_read_statistics = std::move(other19.parquet_read_statistics);
  default_join_distribution_mode = std::move(other19.default_join_distribution_mode);
  disable_codegen_rows_threshold = std::move(other19.disable_codegen_rows_threshold);
  default_spillable_buffer_size = std::move(other19.default_spillable_buffer_size);
  min_spillable_buffer_size = std::move(other19.min_spillable_buffer_size);
  max_row_size = std::move(other19.max_row_size);
  idle_session_timeout = std::move(other19.idle_session_timeout);
  compute_stats_min_sample_size = std::move(other19.compute_stats_min_sample_size);
  exec_time_limit_s = std::move(other19.exec_time_limit_s);
  shuffle_distinct_exprs = std::move(other19.shuffle_distinct_exprs);
  max_mem_estimate_for_admission = std::move(other19.max_mem_estimate_for_admission);
  thread_reservation_limit = std::move(other19.thread_reservation_limit);
  thread_reservation_aggregate_limit = std::move(other19.thread_reservation_aggregate_limit);
  kudu_read_mode = std::move(other19.kudu_read_mode);
  allow_erasure_coded_files = std::move(other19.allow_erasure_coded_files);
  timezone = std::move(other19.timezone);
  scan_bytes_limit = std::move(other19.scan_bytes_limit);
  cpu_limit_s = std::move(other19.cpu_limit_s);
  topn_bytes_limit = std::move(other19.topn_bytes_limit);
  client_identifier = std::move(other19.client_identifier);
  resource_trace_ratio = std::move(other19.resource_trace_ratio);
  num_remote_executor_candidates = std::move(other19.num_remote_executor_candidates);
  num_rows_produced_limit = std::move(other19.num_rows_produced_limit);
  planner_testcase_mode = std::move(other19.planner_testcase_mode);
  default_file_format = std::move(other19.default_file_format);
  parquet_timestamp_type = std::move(other19.parquet_timestamp_type);
  parquet_read_page_index = std::move(other19.parquet_read_page_index);
  parquet_write_page_index = std::move(other19.parquet_write_page_index);
  parquet_page_row_count_limit = std::move(other19.parquet_page_row_count_limit);
  disable_hdfs_num_rows_estimate = std::move(other19.disable_hdfs_num_rows_estimate);
  default_hints_insert_statement = std::move(other19.default_hints_insert_statement);
  spool_query_results = std::move(other19.spool_query_results);
  default_transactional_type = std::move(other19.default_transactional_type);
  statement_expression_limit = std::move(other19.statement_expression_limit);
  max_statement_length_bytes = std::move(other19.max_statement_length_bytes);
  disable_data_cache = std::move(other19.disable_data_cache);
  max_result_spooling_mem = std::move(other19.max_result_spooling_mem);
  max_spilled_result_spooling_mem = std::move(other19.max_spilled_result_spooling_mem);
  disable_hbase_num_rows_estimate = std::move(other19.disable_hbase_num_rows_estimate);
  fetch_rows_timeout_ms = std::move(other19.fetch_rows_timeout_ms);
  now_string = std::move(other19.now_string);
  parquet_object_store_split_size = std::move(other19.parquet_object_store_split_size);
  mem_limit_executors = std::move(other19.mem_limit_executors);
  broadcast_bytes_limit = std::move(other19.broadcast_bytes_limit);
  preagg_bytes_limit = std::move(other19.preagg_bytes_limit);
  enable_cnf_rewrites = std::move(other19.enable_cnf_rewrites);
  max_cnf_exprs = std::move(other19.max_cnf_exprs);
  kudu_snapshot_read_timestamp_micros = std::move(other19.kudu_snapshot_read_timestamp_micros);
  retry_failed_queries = std::move(other19.retry_failed_queries);
  enabled_runtime_filter_types = std::move(other19.enabled_runtime_filter_types);
  async_codegen = std::move(other19.async_codegen);
  enable_distinct_semi_join_optimization = std::move(other19.enable_distinct_semi_join_optimization);
  sort_run_bytes_limit = std::move(other19.sort_run_bytes_limit);
  max_fs_writers = std::move(other19.max_fs_writers);
  refresh_updated_hms_partitions = std::move(other19.refresh_updated_hms_partitions);
  spool_all_results_for_retries = std::move(other19.spool_all_results_for_retries);
  runtime_filter_error_rate = std::move(other19.runtime_filter_error_rate);
  use_local_tz_for_unix_timestamp_conversions = std::move(other19.use_local_tz_for_unix_timestamp_conversions);
  convert_legacy_hive_parquet_utc_timestamps = std::move(other19.convert_legacy_hive_parquet_utc_timestamps);
  enable_outer_join_to_inner_transformation = std::move(other19.enable_outer_join_to_inner_transformation);
  targeted_kudu_scan_range_length = std::move(other19.targeted_kudu_scan_range_length);
  report_skew_limit = std::move(other19.report_skew_limit);
  optimize_simple_limit = std::move(other19.optimize_simple_limit);
  use_dop_for_costing = std::move(other19.use_dop_for_costing);
  broadcast_to_partition_factor = std::move(other19.broadcast_to_partition_factor);
  join_rows_produced_limit = std::move(other19.join_rows_produced_limit);
  utf8_mode = std::move(other19.utf8_mode);
  analytic_rank_pushdown_threshold = std::move(other19.analytic_rank_pushdown_threshold);
  minmax_filter_threshold = std::move(other19.minmax_filter_threshold);
  minmax_filtering_level = std::move(other19.minmax_filtering_level);
  compute_column_minmax_stats = std::move(other19.compute_column_minmax_stats);
  show_column_minmax_stats = std::move(other19.show_column_minmax_stats);
  default_ndv_scale = std::move(other19.default_ndv_scale);
  kudu_replica_selection = std::move(other19.kudu_replica_selection);
  delete_stats_in_truncate = std::move(other19.delete_stats_in_truncate);
  parquet_bloom_filtering = std::move(other19.parquet_bloom_filtering);
  minmax_filter_sorted_columns = std::move(other19.minmax_filter_sorted_columns);
  minmax_filter_fast_code_path = std::move(other19.minmax_filter_fast_code_path);
  enable_kudu_transaction = std::move(other19.enable_kudu_transaction);
  minmax_filter_partition_columns = std::move(other19.minmax_filter_partition_columns);
  parquet_bloom_filter_write = std::move(other19.parquet_bloom_filter_write);
  orc_read_statistics = std::move(other19.orc_read_statistics);
  enable_async_ddl_execution = std::move(other19.enable_async_ddl_execution);
  enable_async_load_data_execution = std::move(other19.enable_async_load_data_execution);
  parquet_late_materialization_threshold = std::move(other19.parquet_late_materialization_threshold);
  __isset = std::move(other19.__isset);
  return *this;
}
void TQueryOptions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TQueryOptions(";
  out << "abort_on_error="; (__isset.abort_on_error ? (out << to_string(abort_on_error)) : (out << "<null>"));
  out << ", " << "max_errors="; (__isset.max_errors ? (out << to_string(max_errors)) : (out << "<null>"));
  out << ", " << "disable_codegen="; (__isset.disable_codegen ? (out << to_string(disable_codegen)) : (out << "<null>"));
  out << ", " << "batch_size="; (__isset.batch_size ? (out << to_string(batch_size)) : (out << "<null>"));
  out << ", " << "num_nodes="; (__isset.num_nodes ? (out << to_string(num_nodes)) : (out << "<null>"));
  out << ", " << "max_scan_range_length="; (__isset.max_scan_range_length ? (out << to_string(max_scan_range_length)) : (out << "<null>"));
  out << ", " << "num_scanner_threads="; (__isset.num_scanner_threads ? (out << to_string(num_scanner_threads)) : (out << "<null>"));
  out << ", " << "debug_action="; (__isset.debug_action ? (out << to_string(debug_action)) : (out << "<null>"));
  out << ", " << "mem_limit="; (__isset.mem_limit ? (out << to_string(mem_limit)) : (out << "<null>"));
  out << ", " << "compression_codec="; (__isset.compression_codec ? (out << to_string(compression_codec)) : (out << "<null>"));
  out << ", " << "hbase_caching="; (__isset.hbase_caching ? (out << to_string(hbase_caching)) : (out << "<null>"));
  out << ", " << "hbase_cache_blocks="; (__isset.hbase_cache_blocks ? (out << to_string(hbase_cache_blocks)) : (out << "<null>"));
  out << ", " << "parquet_file_size="; (__isset.parquet_file_size ? (out << to_string(parquet_file_size)) : (out << "<null>"));
  out << ", " << "explain_level="; (__isset.explain_level ? (out << to_string(explain_level)) : (out << "<null>"));
  out << ", " << "sync_ddl="; (__isset.sync_ddl ? (out << to_string(sync_ddl)) : (out << "<null>"));
  out << ", " << "request_pool="; (__isset.request_pool ? (out << to_string(request_pool)) : (out << "<null>"));
  out << ", " << "disable_outermost_topn="; (__isset.disable_outermost_topn ? (out << to_string(disable_outermost_topn)) : (out << "<null>"));
  out << ", " << "query_timeout_s="; (__isset.query_timeout_s ? (out << to_string(query_timeout_s)) : (out << "<null>"));
  out << ", " << "buffer_pool_limit="; (__isset.buffer_pool_limit ? (out << to_string(buffer_pool_limit)) : (out << "<null>"));
  out << ", " << "appx_count_distinct="; (__isset.appx_count_distinct ? (out << to_string(appx_count_distinct)) : (out << "<null>"));
  out << ", " << "disable_unsafe_spills="; (__isset.disable_unsafe_spills ? (out << to_string(disable_unsafe_spills)) : (out << "<null>"));
  out << ", " << "exec_single_node_rows_threshold="; (__isset.exec_single_node_rows_threshold ? (out << to_string(exec_single_node_rows_threshold)) : (out << "<null>"));
  out << ", " << "optimize_partition_key_scans="; (__isset.optimize_partition_key_scans ? (out << to_string(optimize_partition_key_scans)) : (out << "<null>"));
  out << ", " << "replica_preference="; (__isset.replica_preference ? (out << to_string(replica_preference)) : (out << "<null>"));
  out << ", " << "schedule_random_replica="; (__isset.schedule_random_replica ? (out << to_string(schedule_random_replica)) : (out << "<null>"));
  out << ", " << "disable_streaming_preaggregations="; (__isset.disable_streaming_preaggregations ? (out << to_string(disable_streaming_preaggregations)) : (out << "<null>"));
  out << ", " << "runtime_filter_mode="; (__isset.runtime_filter_mode ? (out << to_string(runtime_filter_mode)) : (out << "<null>"));
  out << ", " << "runtime_bloom_filter_size="; (__isset.runtime_bloom_filter_size ? (out << to_string(runtime_bloom_filter_size)) : (out << "<null>"));
  out << ", " << "runtime_filter_wait_time_ms="; (__isset.runtime_filter_wait_time_ms ? (out << to_string(runtime_filter_wait_time_ms)) : (out << "<null>"));
  out << ", " << "disable_row_runtime_filtering="; (__isset.disable_row_runtime_filtering ? (out << to_string(disable_row_runtime_filtering)) : (out << "<null>"));
  out << ", " << "max_num_runtime_filters="; (__isset.max_num_runtime_filters ? (out << to_string(max_num_runtime_filters)) : (out << "<null>"));
  out << ", " << "parquet_annotate_strings_utf8="; (__isset.parquet_annotate_strings_utf8 ? (out << to_string(parquet_annotate_strings_utf8)) : (out << "<null>"));
  out << ", " << "parquet_fallback_schema_resolution="; (__isset.parquet_fallback_schema_resolution ? (out << to_string(parquet_fallback_schema_resolution)) : (out << "<null>"));
  out << ", " << "mt_dop="; (__isset.mt_dop ? (out << to_string(mt_dop)) : (out << "<null>"));
  out << ", " << "s3_skip_insert_staging="; (__isset.s3_skip_insert_staging ? (out << to_string(s3_skip_insert_staging)) : (out << "<null>"));
  out << ", " << "runtime_filter_min_size="; (__isset.runtime_filter_min_size ? (out << to_string(runtime_filter_min_size)) : (out << "<null>"));
  out << ", " << "runtime_filter_max_size="; (__isset.runtime_filter_max_size ? (out << to_string(runtime_filter_max_size)) : (out << "<null>"));
  out << ", " << "prefetch_mode="; (__isset.prefetch_mode ? (out << to_string(prefetch_mode)) : (out << "<null>"));
  out << ", " << "strict_mode="; (__isset.strict_mode ? (out << to_string(strict_mode)) : (out << "<null>"));
  out << ", " << "scratch_limit="; (__isset.scratch_limit ? (out << to_string(scratch_limit)) : (out << "<null>"));
  out << ", " << "enable_expr_rewrites="; (__isset.enable_expr_rewrites ? (out << to_string(enable_expr_rewrites)) : (out << "<null>"));
  out << ", " << "decimal_v2="; (__isset.decimal_v2 ? (out << to_string(decimal_v2)) : (out << "<null>"));
  out << ", " << "parquet_dictionary_filtering="; (__isset.parquet_dictionary_filtering ? (out << to_string(parquet_dictionary_filtering)) : (out << "<null>"));
  out << ", " << "parquet_array_resolution="; (__isset.parquet_array_resolution ? (out << to_string(parquet_array_resolution)) : (out << "<null>"));
  out << ", " << "parquet_read_statistics="; (__isset.parquet_read_statistics ? (out << to_string(parquet_read_statistics)) : (out << "<null>"));
  out << ", " << "default_join_distribution_mode="; (__isset.default_join_distribution_mode ? (out << to_string(default_join_distribution_mode)) : (out << "<null>"));
  out << ", " << "disable_codegen_rows_threshold="; (__isset.disable_codegen_rows_threshold ? (out << to_string(disable_codegen_rows_threshold)) : (out << "<null>"));
  out << ", " << "default_spillable_buffer_size="; (__isset.default_spillable_buffer_size ? (out << to_string(default_spillable_buffer_size)) : (out << "<null>"));
  out << ", " << "min_spillable_buffer_size="; (__isset.min_spillable_buffer_size ? (out << to_string(min_spillable_buffer_size)) : (out << "<null>"));
  out << ", " << "max_row_size="; (__isset.max_row_size ? (out << to_string(max_row_size)) : (out << "<null>"));
  out << ", " << "idle_session_timeout="; (__isset.idle_session_timeout ? (out << to_string(idle_session_timeout)) : (out << "<null>"));
  out << ", " << "compute_stats_min_sample_size="; (__isset.compute_stats_min_sample_size ? (out << to_string(compute_stats_min_sample_size)) : (out << "<null>"));
  out << ", " << "exec_time_limit_s="; (__isset.exec_time_limit_s ? (out << to_string(exec_time_limit_s)) : (out << "<null>"));
  out << ", " << "shuffle_distinct_exprs="; (__isset.shuffle_distinct_exprs ? (out << to_string(shuffle_distinct_exprs)) : (out << "<null>"));
  out << ", " << "max_mem_estimate_for_admission="; (__isset.max_mem_estimate_for_admission ? (out << to_string(max_mem_estimate_for_admission)) : (out << "<null>"));
  out << ", " << "thread_reservation_limit="; (__isset.thread_reservation_limit ? (out << to_string(thread_reservation_limit)) : (out << "<null>"));
  out << ", " << "thread_reservation_aggregate_limit="; (__isset.thread_reservation_aggregate_limit ? (out << to_string(thread_reservation_aggregate_limit)) : (out << "<null>"));
  out << ", " << "kudu_read_mode="; (__isset.kudu_read_mode ? (out << to_string(kudu_read_mode)) : (out << "<null>"));
  out << ", " << "allow_erasure_coded_files="; (__isset.allow_erasure_coded_files ? (out << to_string(allow_erasure_coded_files)) : (out << "<null>"));
  out << ", " << "timezone="; (__isset.timezone ? (out << to_string(timezone)) : (out << "<null>"));
  out << ", " << "scan_bytes_limit="; (__isset.scan_bytes_limit ? (out << to_string(scan_bytes_limit)) : (out << "<null>"));
  out << ", " << "cpu_limit_s="; (__isset.cpu_limit_s ? (out << to_string(cpu_limit_s)) : (out << "<null>"));
  out << ", " << "topn_bytes_limit="; (__isset.topn_bytes_limit ? (out << to_string(topn_bytes_limit)) : (out << "<null>"));
  out << ", " << "client_identifier="; (__isset.client_identifier ? (out << to_string(client_identifier)) : (out << "<null>"));
  out << ", " << "resource_trace_ratio="; (__isset.resource_trace_ratio ? (out << to_string(resource_trace_ratio)) : (out << "<null>"));
  out << ", " << "num_remote_executor_candidates="; (__isset.num_remote_executor_candidates ? (out << to_string(num_remote_executor_candidates)) : (out << "<null>"));
  out << ", " << "num_rows_produced_limit="; (__isset.num_rows_produced_limit ? (out << to_string(num_rows_produced_limit)) : (out << "<null>"));
  out << ", " << "planner_testcase_mode="; (__isset.planner_testcase_mode ? (out << to_string(planner_testcase_mode)) : (out << "<null>"));
  out << ", " << "default_file_format="; (__isset.default_file_format ? (out << to_string(default_file_format)) : (out << "<null>"));
  out << ", " << "parquet_timestamp_type="; (__isset.parquet_timestamp_type ? (out << to_string(parquet_timestamp_type)) : (out << "<null>"));
  out << ", " << "parquet_read_page_index="; (__isset.parquet_read_page_index ? (out << to_string(parquet_read_page_index)) : (out << "<null>"));
  out << ", " << "parquet_write_page_index="; (__isset.parquet_write_page_index ? (out << to_string(parquet_write_page_index)) : (out << "<null>"));
  out << ", " << "parquet_page_row_count_limit="; (__isset.parquet_page_row_count_limit ? (out << to_string(parquet_page_row_count_limit)) : (out << "<null>"));
  out << ", " << "disable_hdfs_num_rows_estimate="; (__isset.disable_hdfs_num_rows_estimate ? (out << to_string(disable_hdfs_num_rows_estimate)) : (out << "<null>"));
  out << ", " << "default_hints_insert_statement="; (__isset.default_hints_insert_statement ? (out << to_string(default_hints_insert_statement)) : (out << "<null>"));
  out << ", " << "spool_query_results="; (__isset.spool_query_results ? (out << to_string(spool_query_results)) : (out << "<null>"));
  out << ", " << "default_transactional_type="; (__isset.default_transactional_type ? (out << to_string(default_transactional_type)) : (out << "<null>"));
  out << ", " << "statement_expression_limit="; (__isset.statement_expression_limit ? (out << to_string(statement_expression_limit)) : (out << "<null>"));
  out << ", " << "max_statement_length_bytes="; (__isset.max_statement_length_bytes ? (out << to_string(max_statement_length_bytes)) : (out << "<null>"));
  out << ", " << "disable_data_cache="; (__isset.disable_data_cache ? (out << to_string(disable_data_cache)) : (out << "<null>"));
  out << ", " << "max_result_spooling_mem="; (__isset.max_result_spooling_mem ? (out << to_string(max_result_spooling_mem)) : (out << "<null>"));
  out << ", " << "max_spilled_result_spooling_mem="; (__isset.max_spilled_result_spooling_mem ? (out << to_string(max_spilled_result_spooling_mem)) : (out << "<null>"));
  out << ", " << "disable_hbase_num_rows_estimate="; (__isset.disable_hbase_num_rows_estimate ? (out << to_string(disable_hbase_num_rows_estimate)) : (out << "<null>"));
  out << ", " << "fetch_rows_timeout_ms="; (__isset.fetch_rows_timeout_ms ? (out << to_string(fetch_rows_timeout_ms)) : (out << "<null>"));
  out << ", " << "now_string="; (__isset.now_string ? (out << to_string(now_string)) : (out << "<null>"));
  out << ", " << "parquet_object_store_split_size="; (__isset.parquet_object_store_split_size ? (out << to_string(parquet_object_store_split_size)) : (out << "<null>"));
  out << ", " << "mem_limit_executors="; (__isset.mem_limit_executors ? (out << to_string(mem_limit_executors)) : (out << "<null>"));
  out << ", " << "broadcast_bytes_limit="; (__isset.broadcast_bytes_limit ? (out << to_string(broadcast_bytes_limit)) : (out << "<null>"));
  out << ", " << "preagg_bytes_limit="; (__isset.preagg_bytes_limit ? (out << to_string(preagg_bytes_limit)) : (out << "<null>"));
  out << ", " << "enable_cnf_rewrites="; (__isset.enable_cnf_rewrites ? (out << to_string(enable_cnf_rewrites)) : (out << "<null>"));
  out << ", " << "max_cnf_exprs="; (__isset.max_cnf_exprs ? (out << to_string(max_cnf_exprs)) : (out << "<null>"));
  out << ", " << "kudu_snapshot_read_timestamp_micros="; (__isset.kudu_snapshot_read_timestamp_micros ? (out << to_string(kudu_snapshot_read_timestamp_micros)) : (out << "<null>"));
  out << ", " << "retry_failed_queries="; (__isset.retry_failed_queries ? (out << to_string(retry_failed_queries)) : (out << "<null>"));
  out << ", " << "enabled_runtime_filter_types="; (__isset.enabled_runtime_filter_types ? (out << to_string(enabled_runtime_filter_types)) : (out << "<null>"));
  out << ", " << "async_codegen="; (__isset.async_codegen ? (out << to_string(async_codegen)) : (out << "<null>"));
  out << ", " << "enable_distinct_semi_join_optimization="; (__isset.enable_distinct_semi_join_optimization ? (out << to_string(enable_distinct_semi_join_optimization)) : (out << "<null>"));
  out << ", " << "sort_run_bytes_limit="; (__isset.sort_run_bytes_limit ? (out << to_string(sort_run_bytes_limit)) : (out << "<null>"));
  out << ", " << "max_fs_writers="; (__isset.max_fs_writers ? (out << to_string(max_fs_writers)) : (out << "<null>"));
  out << ", " << "refresh_updated_hms_partitions="; (__isset.refresh_updated_hms_partitions ? (out << to_string(refresh_updated_hms_partitions)) : (out << "<null>"));
  out << ", " << "spool_all_results_for_retries="; (__isset.spool_all_results_for_retries ? (out << to_string(spool_all_results_for_retries)) : (out << "<null>"));
  out << ", " << "runtime_filter_error_rate="; (__isset.runtime_filter_error_rate ? (out << to_string(runtime_filter_error_rate)) : (out << "<null>"));
  out << ", " << "use_local_tz_for_unix_timestamp_conversions="; (__isset.use_local_tz_for_unix_timestamp_conversions ? (out << to_string(use_local_tz_for_unix_timestamp_conversions)) : (out << "<null>"));
  out << ", " << "convert_legacy_hive_parquet_utc_timestamps="; (__isset.convert_legacy_hive_parquet_utc_timestamps ? (out << to_string(convert_legacy_hive_parquet_utc_timestamps)) : (out << "<null>"));
  out << ", " << "enable_outer_join_to_inner_transformation="; (__isset.enable_outer_join_to_inner_transformation ? (out << to_string(enable_outer_join_to_inner_transformation)) : (out << "<null>"));
  out << ", " << "targeted_kudu_scan_range_length="; (__isset.targeted_kudu_scan_range_length ? (out << to_string(targeted_kudu_scan_range_length)) : (out << "<null>"));
  out << ", " << "report_skew_limit="; (__isset.report_skew_limit ? (out << to_string(report_skew_limit)) : (out << "<null>"));
  out << ", " << "optimize_simple_limit="; (__isset.optimize_simple_limit ? (out << to_string(optimize_simple_limit)) : (out << "<null>"));
  out << ", " << "use_dop_for_costing="; (__isset.use_dop_for_costing ? (out << to_string(use_dop_for_costing)) : (out << "<null>"));
  out << ", " << "broadcast_to_partition_factor="; (__isset.broadcast_to_partition_factor ? (out << to_string(broadcast_to_partition_factor)) : (out << "<null>"));
  out << ", " << "join_rows_produced_limit="; (__isset.join_rows_produced_limit ? (out << to_string(join_rows_produced_limit)) : (out << "<null>"));
  out << ", " << "utf8_mode="; (__isset.utf8_mode ? (out << to_string(utf8_mode)) : (out << "<null>"));
  out << ", " << "analytic_rank_pushdown_threshold="; (__isset.analytic_rank_pushdown_threshold ? (out << to_string(analytic_rank_pushdown_threshold)) : (out << "<null>"));
  out << ", " << "minmax_filter_threshold="; (__isset.minmax_filter_threshold ? (out << to_string(minmax_filter_threshold)) : (out << "<null>"));
  out << ", " << "minmax_filtering_level="; (__isset.minmax_filtering_level ? (out << to_string(minmax_filtering_level)) : (out << "<null>"));
  out << ", " << "compute_column_minmax_stats="; (__isset.compute_column_minmax_stats ? (out << to_string(compute_column_minmax_stats)) : (out << "<null>"));
  out << ", " << "show_column_minmax_stats="; (__isset.show_column_minmax_stats ? (out << to_string(show_column_minmax_stats)) : (out << "<null>"));
  out << ", " << "default_ndv_scale="; (__isset.default_ndv_scale ? (out << to_string(default_ndv_scale)) : (out << "<null>"));
  out << ", " << "kudu_replica_selection="; (__isset.kudu_replica_selection ? (out << to_string(kudu_replica_selection)) : (out << "<null>"));
  out << ", " << "delete_stats_in_truncate="; (__isset.delete_stats_in_truncate ? (out << to_string(delete_stats_in_truncate)) : (out << "<null>"));
  out << ", " << "parquet_bloom_filtering="; (__isset.parquet_bloom_filtering ? (out << to_string(parquet_bloom_filtering)) : (out << "<null>"));
  out << ", " << "minmax_filter_sorted_columns="; (__isset.minmax_filter_sorted_columns ? (out << to_string(minmax_filter_sorted_columns)) : (out << "<null>"));
  out << ", " << "minmax_filter_fast_code_path="; (__isset.minmax_filter_fast_code_path ? (out << to_string(minmax_filter_fast_code_path)) : (out << "<null>"));
  out << ", " << "enable_kudu_transaction="; (__isset.enable_kudu_transaction ? (out << to_string(enable_kudu_transaction)) : (out << "<null>"));
  out << ", " << "minmax_filter_partition_columns="; (__isset.minmax_filter_partition_columns ? (out << to_string(minmax_filter_partition_columns)) : (out << "<null>"));
  out << ", " << "parquet_bloom_filter_write="; (__isset.parquet_bloom_filter_write ? (out << to_string(parquet_bloom_filter_write)) : (out << "<null>"));
  out << ", " << "orc_read_statistics="; (__isset.orc_read_statistics ? (out << to_string(orc_read_statistics)) : (out << "<null>"));
  out << ", " << "enable_async_ddl_execution="; (__isset.enable_async_ddl_execution ? (out << to_string(enable_async_ddl_execution)) : (out << "<null>"));
  out << ", " << "enable_async_load_data_execution="; (__isset.enable_async_load_data_execution ? (out << to_string(enable_async_load_data_execution)) : (out << "<null>"));
  out << ", " << "parquet_late_materialization_threshold="; (__isset.parquet_late_materialization_threshold ? (out << to_string(parquet_late_materialization_threshold)) : (out << "<null>"));
  out << ")";
}


TClientRequest::~TClientRequest() throw() {
}


void TClientRequest::__set_stmt(const std::string& val) {
  this->stmt = val;
}

void TClientRequest::__set_query_options(const TQueryOptions& val) {
  this->query_options = val;
}

void TClientRequest::__set_redacted_stmt(const std::string& val) {
  this->redacted_stmt = val;
__isset.redacted_stmt = true;
}
std::ostream& operator<<(std::ostream& out, const TClientRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TClientRequest &a, TClientRequest &b) {
  using ::std::swap;
  swap(a.stmt, b.stmt);
  swap(a.query_options, b.query_options);
  swap(a.redacted_stmt, b.redacted_stmt);
  swap(a.__isset, b.__isset);
}

TClientRequest::TClientRequest(const TClientRequest& other20) {
  stmt = other20.stmt;
  query_options = other20.query_options;
  redacted_stmt = other20.redacted_stmt;
  __isset = other20.__isset;
}
TClientRequest::TClientRequest( TClientRequest&& other21) {
  stmt = std::move(other21.stmt);
  query_options = std::move(other21.query_options);
  redacted_stmt = std::move(other21.redacted_stmt);
  __isset = std::move(other21.__isset);
}
TClientRequest& TClientRequest::operator=(const TClientRequest& other22) {
  stmt = other22.stmt;
  query_options = other22.query_options;
  redacted_stmt = other22.redacted_stmt;
  __isset = other22.__isset;
  return *this;
}
TClientRequest& TClientRequest::operator=(TClientRequest&& other23) {
  stmt = std::move(other23.stmt);
  query_options = std::move(other23.query_options);
  redacted_stmt = std::move(other23.redacted_stmt);
  __isset = std::move(other23.__isset);
  return *this;
}
void TClientRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TClientRequest(";
  out << "stmt=" << to_string(stmt);
  out << ", " << "query_options=" << to_string(query_options);
  out << ", " << "redacted_stmt="; (__isset.redacted_stmt ? (out << to_string(redacted_stmt)) : (out << "<null>"));
  out << ")";
}


TSessionState::~TSessionState() throw() {
}


void TSessionState::__set_session_id(const  ::impala::TUniqueId& val) {
  this->session_id = val;
}

void TSessionState::__set_session_type(const TSessionType::type val) {
  this->session_type = val;
}

void TSessionState::__set_database(const std::string& val) {
  this->database = val;
}

void TSessionState::__set_connected_user(const std::string& val) {
  this->connected_user = val;
}

void TSessionState::__set_delegated_user(const std::string& val) {
  this->delegated_user = val;
__isset.delegated_user = true;
}

void TSessionState::__set_network_address(const  ::impala::TNetworkAddress& val) {
  this->network_address = val;
}

void TSessionState::__set_kudu_latest_observed_ts(const int64_t val) {
  this->kudu_latest_observed_ts = val;
__isset.kudu_latest_observed_ts = true;
}
std::ostream& operator<<(std::ostream& out, const TSessionState& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TSessionState &a, TSessionState &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.session_type, b.session_type);
  swap(a.database, b.database);
  swap(a.connected_user, b.connected_user);
  swap(a.delegated_user, b.delegated_user);
  swap(a.network_address, b.network_address);
  swap(a.kudu_latest_observed_ts, b.kudu_latest_observed_ts);
  swap(a.__isset, b.__isset);
}

TSessionState::TSessionState(const TSessionState& other25) {
  session_id = other25.session_id;
  session_type = other25.session_type;
  database = other25.database;
  connected_user = other25.connected_user;
  delegated_user = other25.delegated_user;
  network_address = other25.network_address;
  kudu_latest_observed_ts = other25.kudu_latest_observed_ts;
  __isset = other25.__isset;
}
TSessionState::TSessionState( TSessionState&& other26) {
  session_id = std::move(other26.session_id);
  session_type = std::move(other26.session_type);
  database = std::move(other26.database);
  connected_user = std::move(other26.connected_user);
  delegated_user = std::move(other26.delegated_user);
  network_address = std::move(other26.network_address);
  kudu_latest_observed_ts = std::move(other26.kudu_latest_observed_ts);
  __isset = std::move(other26.__isset);
}
TSessionState& TSessionState::operator=(const TSessionState& other27) {
  session_id = other27.session_id;
  session_type = other27.session_type;
  database = other27.database;
  connected_user = other27.connected_user;
  delegated_user = other27.delegated_user;
  network_address = other27.network_address;
  kudu_latest_observed_ts = other27.kudu_latest_observed_ts;
  __isset = other27.__isset;
  return *this;
}
TSessionState& TSessionState::operator=(TSessionState&& other28) {
  session_id = std::move(other28.session_id);
  session_type = std::move(other28.session_type);
  database = std::move(other28.database);
  connected_user = std::move(other28.connected_user);
  delegated_user = std::move(other28.delegated_user);
  network_address = std::move(other28.network_address);
  kudu_latest_observed_ts = std::move(other28.kudu_latest_observed_ts);
  __isset = std::move(other28.__isset);
  return *this;
}
void TSessionState::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TSessionState(";
  out << "session_id=" << to_string(session_id);
  out << ", " << "session_type=" << to_string(session_type);
  out << ", " << "database=" << to_string(database);
  out << ", " << "connected_user=" << to_string(connected_user);
  out << ", " << "delegated_user="; (__isset.delegated_user ? (out << to_string(delegated_user)) : (out << "<null>"));
  out << ", " << "network_address=" << to_string(network_address);
  out << ", " << "kudu_latest_observed_ts="; (__isset.kudu_latest_observed_ts ? (out << to_string(kudu_latest_observed_ts)) : (out << "<null>"));
  out << ")";
}


TQueryCtx::~TQueryCtx() throw() {
}


void TQueryCtx::__set_client_request(const TClientRequest& val) {
  this->client_request = val;
}

void TQueryCtx::__set_query_id(const  ::impala::TUniqueId& val) {
  this->query_id = val;
}

void TQueryCtx::__set_session(const TSessionState& val) {
  this->session = val;
}

void TQueryCtx::__set_now_string(const std::string& val) {
  this->now_string = val;
}

void TQueryCtx::__set_pid(const int32_t val) {
  this->pid = val;
}

void TQueryCtx::__set_coord_hostname(const std::string& val) {
  this->coord_hostname = val;
__isset.coord_hostname = true;
}

void TQueryCtx::__set_coord_ip_address(const  ::impala::TNetworkAddress& val) {
  this->coord_ip_address = val;
__isset.coord_ip_address = true;
}

void TQueryCtx::__set_tables_missing_stats(const std::vector< ::impala::TTableName> & val) {
  this->tables_missing_stats = val;
__isset.tables_missing_stats = true;
}

void TQueryCtx::__set_disable_spilling(const bool val) {
  this->disable_spilling = val;
__isset.disable_spilling = true;
}

void TQueryCtx::__set_parent_query_id(const  ::impala::TUniqueId& val) {
  this->parent_query_id = val;
__isset.parent_query_id = true;
}

void TQueryCtx::__set_tables_with_corrupt_stats(const std::vector< ::impala::TTableName> & val) {
  this->tables_with_corrupt_stats = val;
__isset.tables_with_corrupt_stats = true;
}

void TQueryCtx::__set_snapshot_timestamp(const int64_t val) {
  this->snapshot_timestamp = val;
__isset.snapshot_timestamp = true;
}

void TQueryCtx::__set_desc_tbl_testonly(const  ::impala::TDescriptorTable& val) {
  this->desc_tbl_testonly = val;
__isset.desc_tbl_testonly = true;
}

void TQueryCtx::__set_start_unix_millis(const int64_t val) {
  this->start_unix_millis = val;
}

void TQueryCtx::__set_disable_codegen_hint(const bool val) {
  this->disable_codegen_hint = val;
__isset.disable_codegen_hint = true;
}

void TQueryCtx::__set_tables_missing_diskids(const std::vector< ::impala::TTableName> & val) {
  this->tables_missing_diskids = val;
__isset.tables_missing_diskids = true;
}

void TQueryCtx::__set_request_pool(const std::string& val) {
  this->request_pool = val;
__isset.request_pool = true;
}

void TQueryCtx::__set_utc_timestamp_string(const std::string& val) {
  this->utc_timestamp_string = val;
}

void TQueryCtx::__set_local_time_zone(const std::string& val) {
  this->local_time_zone = val;
}

void TQueryCtx::__set_disable_hbase_num_rows_estimate(const bool val) {
  this->disable_hbase_num_rows_estimate = val;
__isset.disable_hbase_num_rows_estimate = true;
}

void TQueryCtx::__set_trace_resource_usage(const bool val) {
  this->trace_resource_usage = val;
}

void TQueryCtx::__set_status_report_interval_ms(const int32_t val) {
  this->status_report_interval_ms = val;
__isset.status_report_interval_ms = true;
}

void TQueryCtx::__set_status_report_max_retry_s(const int32_t val) {
  this->status_report_max_retry_s = val;
__isset.status_report_max_retry_s = true;
}

void TQueryCtx::__set_desc_tbl_serialized(const  ::impala::TDescriptorTableSerialized& val) {
  this->desc_tbl_serialized = val;
__isset.desc_tbl_serialized = true;
}

void TQueryCtx::__set_transaction_id(const int64_t val) {
  this->transaction_id = val;
__isset.transaction_id = true;
}

void TQueryCtx::__set_overridden_mt_dop_value(const int32_t val) {
  this->overridden_mt_dop_value = val;
__isset.overridden_mt_dop_value = true;
}

void TQueryCtx::__set_coord_backend_id(const  ::impala::TUniqueId& val) {
  this->coord_backend_id = val;
__isset.coord_backend_id = true;
}

void TQueryCtx::__set_gen_aggregated_profile(const bool val) {
  this->gen_aggregated_profile = val;
__isset.gen_aggregated_profile = true;
}

void TQueryCtx::__set_is_kudu_transactional(const bool val) {
  this->is_kudu_transactional = val;
}
std::ostream& operator<<(std::ostream& out, const TQueryCtx& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TQueryCtx &a, TQueryCtx &b) {
  using ::std::swap;
  swap(a.client_request, b.client_request);
  swap(a.query_id, b.query_id);
  swap(a.session, b.session);
  swap(a.now_string, b.now_string);
  swap(a.pid, b.pid);
  swap(a.coord_hostname, b.coord_hostname);
  swap(a.coord_ip_address, b.coord_ip_address);
  swap(a.tables_missing_stats, b.tables_missing_stats);
  swap(a.disable_spilling, b.disable_spilling);
  swap(a.parent_query_id, b.parent_query_id);
  swap(a.tables_with_corrupt_stats, b.tables_with_corrupt_stats);
  swap(a.snapshot_timestamp, b.snapshot_timestamp);
  swap(a.desc_tbl_testonly, b.desc_tbl_testonly);
  swap(a.start_unix_millis, b.start_unix_millis);
  swap(a.disable_codegen_hint, b.disable_codegen_hint);
  swap(a.tables_missing_diskids, b.tables_missing_diskids);
  swap(a.request_pool, b.request_pool);
  swap(a.utc_timestamp_string, b.utc_timestamp_string);
  swap(a.local_time_zone, b.local_time_zone);
  swap(a.disable_hbase_num_rows_estimate, b.disable_hbase_num_rows_estimate);
  swap(a.trace_resource_usage, b.trace_resource_usage);
  swap(a.status_report_interval_ms, b.status_report_interval_ms);
  swap(a.status_report_max_retry_s, b.status_report_max_retry_s);
  swap(a.desc_tbl_serialized, b.desc_tbl_serialized);
  swap(a.transaction_id, b.transaction_id);
  swap(a.overridden_mt_dop_value, b.overridden_mt_dop_value);
  swap(a.coord_backend_id, b.coord_backend_id);
  swap(a.gen_aggregated_profile, b.gen_aggregated_profile);
  swap(a.is_kudu_transactional, b.is_kudu_transactional);
  swap(a.__isset, b.__isset);
}

TQueryCtx::TQueryCtx(const TQueryCtx& other47) {
  client_request = other47.client_request;
  query_id = other47.query_id;
  session = other47.session;
  now_string = other47.now_string;
  pid = other47.pid;
  coord_hostname = other47.coord_hostname;
  coord_ip_address = other47.coord_ip_address;
  tables_missing_stats = other47.tables_missing_stats;
  disable_spilling = other47.disable_spilling;
  parent_query_id = other47.parent_query_id;
  tables_with_corrupt_stats = other47.tables_with_corrupt_stats;
  snapshot_timestamp = other47.snapshot_timestamp;
  desc_tbl_testonly = other47.desc_tbl_testonly;
  start_unix_millis = other47.start_unix_millis;
  disable_codegen_hint = other47.disable_codegen_hint;
  tables_missing_diskids = other47.tables_missing_diskids;
  request_pool = other47.request_pool;
  utc_timestamp_string = other47.utc_timestamp_string;
  local_time_zone = other47.local_time_zone;
  disable_hbase_num_rows_estimate = other47.disable_hbase_num_rows_estimate;
  trace_resource_usage = other47.trace_resource_usage;
  status_report_interval_ms = other47.status_report_interval_ms;
  status_report_max_retry_s = other47.status_report_max_retry_s;
  desc_tbl_serialized = other47.desc_tbl_serialized;
  transaction_id = other47.transaction_id;
  overridden_mt_dop_value = other47.overridden_mt_dop_value;
  coord_backend_id = other47.coord_backend_id;
  gen_aggregated_profile = other47.gen_aggregated_profile;
  is_kudu_transactional = other47.is_kudu_transactional;
  __isset = other47.__isset;
}
TQueryCtx::TQueryCtx( TQueryCtx&& other48) {
  client_request = std::move(other48.client_request);
  query_id = std::move(other48.query_id);
  session = std::move(other48.session);
  now_string = std::move(other48.now_string);
  pid = std::move(other48.pid);
  coord_hostname = std::move(other48.coord_hostname);
  coord_ip_address = std::move(other48.coord_ip_address);
  tables_missing_stats = std::move(other48.tables_missing_stats);
  disable_spilling = std::move(other48.disable_spilling);
  parent_query_id = std::move(other48.parent_query_id);
  tables_with_corrupt_stats = std::move(other48.tables_with_corrupt_stats);
  snapshot_timestamp = std::move(other48.snapshot_timestamp);
  desc_tbl_testonly = std::move(other48.desc_tbl_testonly);
  start_unix_millis = std::move(other48.start_unix_millis);
  disable_codegen_hint = std::move(other48.disable_codegen_hint);
  tables_missing_diskids = std::move(other48.tables_missing_diskids);
  request_pool = std::move(other48.request_pool);
  utc_timestamp_string = std::move(other48.utc_timestamp_string);
  local_time_zone = std::move(other48.local_time_zone);
  disable_hbase_num_rows_estimate = std::move(other48.disable_hbase_num_rows_estimate);
  trace_resource_usage = std::move(other48.trace_resource_usage);
  status_report_interval_ms = std::move(other48.status_report_interval_ms);
  status_report_max_retry_s = std::move(other48.status_report_max_retry_s);
  desc_tbl_serialized = std::move(other48.desc_tbl_serialized);
  transaction_id = std::move(other48.transaction_id);
  overridden_mt_dop_value = std::move(other48.overridden_mt_dop_value);
  coord_backend_id = std::move(other48.coord_backend_id);
  gen_aggregated_profile = std::move(other48.gen_aggregated_profile);
  is_kudu_transactional = std::move(other48.is_kudu_transactional);
  __isset = std::move(other48.__isset);
}
TQueryCtx& TQueryCtx::operator=(const TQueryCtx& other49) {
  client_request = other49.client_request;
  query_id = other49.query_id;
  session = other49.session;
  now_string = other49.now_string;
  pid = other49.pid;
  coord_hostname = other49.coord_hostname;
  coord_ip_address = other49.coord_ip_address;
  tables_missing_stats = other49.tables_missing_stats;
  disable_spilling = other49.disable_spilling;
  parent_query_id = other49.parent_query_id;
  tables_with_corrupt_stats = other49.tables_with_corrupt_stats;
  snapshot_timestamp = other49.snapshot_timestamp;
  desc_tbl_testonly = other49.desc_tbl_testonly;
  start_unix_millis = other49.start_unix_millis;
  disable_codegen_hint = other49.disable_codegen_hint;
  tables_missing_diskids = other49.tables_missing_diskids;
  request_pool = other49.request_pool;
  utc_timestamp_string = other49.utc_timestamp_string;
  local_time_zone = other49.local_time_zone;
  disable_hbase_num_rows_estimate = other49.disable_hbase_num_rows_estimate;
  trace_resource_usage = other49.trace_resource_usage;
  status_report_interval_ms = other49.status_report_interval_ms;
  status_report_max_retry_s = other49.status_report_max_retry_s;
  desc_tbl_serialized = other49.desc_tbl_serialized;
  transaction_id = other49.transaction_id;
  overridden_mt_dop_value = other49.overridden_mt_dop_value;
  coord_backend_id = other49.coord_backend_id;
  gen_aggregated_profile = other49.gen_aggregated_profile;
  is_kudu_transactional = other49.is_kudu_transactional;
  __isset = other49.__isset;
  return *this;
}
TQueryCtx& TQueryCtx::operator=(TQueryCtx&& other50) {
  client_request = std::move(other50.client_request);
  query_id = std::move(other50.query_id);
  session = std::move(other50.session);
  now_string = std::move(other50.now_string);
  pid = std::move(other50.pid);
  coord_hostname = std::move(other50.coord_hostname);
  coord_ip_address = std::move(other50.coord_ip_address);
  tables_missing_stats = std::move(other50.tables_missing_stats);
  disable_spilling = std::move(other50.disable_spilling);
  parent_query_id = std::move(other50.parent_query_id);
  tables_with_corrupt_stats = std::move(other50.tables_with_corrupt_stats);
  snapshot_timestamp = std::move(other50.snapshot_timestamp);
  desc_tbl_testonly = std::move(other50.desc_tbl_testonly);
  start_unix_millis = std::move(other50.start_unix_millis);
  disable_codegen_hint = std::move(other50.disable_codegen_hint);
  tables_missing_diskids = std::move(other50.tables_missing_diskids);
  request_pool = std::move(other50.request_pool);
  utc_timestamp_string = std::move(other50.utc_timestamp_string);
  local_time_zone = std::move(other50.local_time_zone);
  disable_hbase_num_rows_estimate = std::move(other50.disable_hbase_num_rows_estimate);
  trace_resource_usage = std::move(other50.trace_resource_usage);
  status_report_interval_ms = std::move(other50.status_report_interval_ms);
  status_report_max_retry_s = std::move(other50.status_report_max_retry_s);
  desc_tbl_serialized = std::move(other50.desc_tbl_serialized);
  transaction_id = std::move(other50.transaction_id);
  overridden_mt_dop_value = std::move(other50.overridden_mt_dop_value);
  coord_backend_id = std::move(other50.coord_backend_id);
  gen_aggregated_profile = std::move(other50.gen_aggregated_profile);
  is_kudu_transactional = std::move(other50.is_kudu_transactional);
  __isset = std::move(other50.__isset);
  return *this;
}
void TQueryCtx::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TQueryCtx(";
  out << "client_request=" << to_string(client_request);
  out << ", " << "query_id=" << to_string(query_id);
  out << ", " << "session=" << to_string(session);
  out << ", " << "now_string=" << to_string(now_string);
  out << ", " << "pid=" << to_string(pid);
  out << ", " << "coord_hostname="; (__isset.coord_hostname ? (out << to_string(coord_hostname)) : (out << "<null>"));
  out << ", " << "coord_ip_address="; (__isset.coord_ip_address ? (out << to_string(coord_ip_address)) : (out << "<null>"));
  out << ", " << "tables_missing_stats="; (__isset.tables_missing_stats ? (out << to_string(tables_missing_stats)) : (out << "<null>"));
  out << ", " << "disable_spilling="; (__isset.disable_spilling ? (out << to_string(disable_spilling)) : (out << "<null>"));
  out << ", " << "parent_query_id="; (__isset.parent_query_id ? (out << to_string(parent_query_id)) : (out << "<null>"));
  out << ", " << "tables_with_corrupt_stats="; (__isset.tables_with_corrupt_stats ? (out << to_string(tables_with_corrupt_stats)) : (out << "<null>"));
  out << ", " << "snapshot_timestamp="; (__isset.snapshot_timestamp ? (out << to_string(snapshot_timestamp)) : (out << "<null>"));
  out << ", " << "desc_tbl_testonly="; (__isset.desc_tbl_testonly ? (out << to_string(desc_tbl_testonly)) : (out << "<null>"));
  out << ", " << "start_unix_millis=" << to_string(start_unix_millis);
  out << ", " << "disable_codegen_hint="; (__isset.disable_codegen_hint ? (out << to_string(disable_codegen_hint)) : (out << "<null>"));
  out << ", " << "tables_missing_diskids="; (__isset.tables_missing_diskids ? (out << to_string(tables_missing_diskids)) : (out << "<null>"));
  out << ", " << "request_pool="; (__isset.request_pool ? (out << to_string(request_pool)) : (out << "<null>"));
  out << ", " << "utc_timestamp_string=" << to_string(utc_timestamp_string);
  out << ", " << "local_time_zone=" << to_string(local_time_zone);
  out << ", " << "disable_hbase_num_rows_estimate="; (__isset.disable_hbase_num_rows_estimate ? (out << to_string(disable_hbase_num_rows_estimate)) : (out << "<null>"));
  out << ", " << "trace_resource_usage=" << to_string(trace_resource_usage);
  out << ", " << "status_report_interval_ms="; (__isset.status_report_interval_ms ? (out << to_string(status_report_interval_ms)) : (out << "<null>"));
  out << ", " << "status_report_max_retry_s="; (__isset.status_report_max_retry_s ? (out << to_string(status_report_max_retry_s)) : (out << "<null>"));
  out << ", " << "desc_tbl_serialized="; (__isset.desc_tbl_serialized ? (out << to_string(desc_tbl_serialized)) : (out << "<null>"));
  out << ", " << "transaction_id="; (__isset.transaction_id ? (out << to_string(transaction_id)) : (out << "<null>"));
  out << ", " << "overridden_mt_dop_value="; (__isset.overridden_mt_dop_value ? (out << to_string(overridden_mt_dop_value)) : (out << "<null>"));
  out << ", " << "coord_backend_id="; (__isset.coord_backend_id ? (out << to_string(coord_backend_id)) : (out << "<null>"));
  out << ", " << "gen_aggregated_profile="; (__isset.gen_aggregated_profile ? (out << to_string(gen_aggregated_profile)) : (out << "<null>"));
  out << ", " << "is_kudu_transactional=" << to_string(is_kudu_transactional);
  out << ")";
}


TPlanExecInfo::~TPlanExecInfo() throw() {
}


void TPlanExecInfo::__set_fragments(const std::vector< ::impala::TPlanFragment> & val) {
  this->fragments = val;
}

void TPlanExecInfo::__set_per_node_scan_ranges(const std::map< ::impala::TPlanNodeId,  ::impala::TScanRangeSpec> & val) {
  this->per_node_scan_ranges = val;
__isset.per_node_scan_ranges = true;
}
std::ostream& operator<<(std::ostream& out, const TPlanExecInfo& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TPlanExecInfo &a, TPlanExecInfo &b) {
  using ::std::swap;
  swap(a.fragments, b.fragments);
  swap(a.per_node_scan_ranges, b.per_node_scan_ranges);
  swap(a.__isset, b.__isset);
}

TPlanExecInfo::TPlanExecInfo(const TPlanExecInfo& other65) {
  fragments = other65.fragments;
  per_node_scan_ranges = other65.per_node_scan_ranges;
  __isset = other65.__isset;
}
TPlanExecInfo::TPlanExecInfo( TPlanExecInfo&& other66) {
  fragments = std::move(other66.fragments);
  per_node_scan_ranges = std::move(other66.per_node_scan_ranges);
  __isset = std::move(other66.__isset);
}
TPlanExecInfo& TPlanExecInfo::operator=(const TPlanExecInfo& other67) {
  fragments = other67.fragments;
  per_node_scan_ranges = other67.per_node_scan_ranges;
  __isset = other67.__isset;
  return *this;
}
TPlanExecInfo& TPlanExecInfo::operator=(TPlanExecInfo&& other68) {
  fragments = std::move(other68.fragments);
  per_node_scan_ranges = std::move(other68.per_node_scan_ranges);
  __isset = std::move(other68.__isset);
  return *this;
}
void TPlanExecInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPlanExecInfo(";
  out << "fragments=" << to_string(fragments);
  out << ", " << "per_node_scan_ranges="; (__isset.per_node_scan_ranges ? (out << to_string(per_node_scan_ranges)) : (out << "<null>"));
  out << ")";
}


TFinalizeParams::~TFinalizeParams() throw() {
}


void TFinalizeParams::__set_is_overwrite(const bool val) {
  this->is_overwrite = val;
}

void TFinalizeParams::__set_hdfs_base_dir(const std::string& val) {
  this->hdfs_base_dir = val;
}

void TFinalizeParams::__set_table_name(const std::string& val) {
  this->table_name = val;
}

void TFinalizeParams::__set_table_db(const std::string& val) {
  this->table_db = val;
}

void TFinalizeParams::__set_staging_dir(const std::string& val) {
  this->staging_dir = val;
__isset.staging_dir = true;
}

void TFinalizeParams::__set_table_id(const int64_t val) {
  this->table_id = val;
__isset.table_id = true;
}

void TFinalizeParams::__set_transaction_id(const int64_t val) {
  this->transaction_id = val;
__isset.transaction_id = true;
}

void TFinalizeParams::__set_write_id(const int64_t val) {
  this->write_id = val;
__isset.write_id = true;
}

void TFinalizeParams::__set_spec_id(const int32_t val) {
  this->spec_id = val;
__isset.spec_id = true;
}
std::ostream& operator<<(std::ostream& out, const TFinalizeParams& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TFinalizeParams &a, TFinalizeParams &b) {
  using ::std::swap;
  swap(a.is_overwrite, b.is_overwrite);
  swap(a.hdfs_base_dir, b.hdfs_base_dir);
  swap(a.table_name, b.table_name);
  swap(a.table_db, b.table_db);
  swap(a.staging_dir, b.staging_dir);
  swap(a.table_id, b.table_id);
  swap(a.transaction_id, b.transaction_id);
  swap(a.write_id, b.write_id);
  swap(a.spec_id, b.spec_id);
  swap(a.__isset, b.__isset);
}

TFinalizeParams::TFinalizeParams(const TFinalizeParams& other69) {
  is_overwrite = other69.is_overwrite;
  hdfs_base_dir = other69.hdfs_base_dir;
  table_name = other69.table_name;
  table_db = other69.table_db;
  staging_dir = other69.staging_dir;
  table_id = other69.table_id;
  transaction_id = other69.transaction_id;
  write_id = other69.write_id;
  spec_id = other69.spec_id;
  __isset = other69.__isset;
}
TFinalizeParams::TFinalizeParams( TFinalizeParams&& other70) {
  is_overwrite = std::move(other70.is_overwrite);
  hdfs_base_dir = std::move(other70.hdfs_base_dir);
  table_name = std::move(other70.table_name);
  table_db = std::move(other70.table_db);
  staging_dir = std::move(other70.staging_dir);
  table_id = std::move(other70.table_id);
  transaction_id = std::move(other70.transaction_id);
  write_id = std::move(other70.write_id);
  spec_id = std::move(other70.spec_id);
  __isset = std::move(other70.__isset);
}
TFinalizeParams& TFinalizeParams::operator=(const TFinalizeParams& other71) {
  is_overwrite = other71.is_overwrite;
  hdfs_base_dir = other71.hdfs_base_dir;
  table_name = other71.table_name;
  table_db = other71.table_db;
  staging_dir = other71.staging_dir;
  table_id = other71.table_id;
  transaction_id = other71.transaction_id;
  write_id = other71.write_id;
  spec_id = other71.spec_id;
  __isset = other71.__isset;
  return *this;
}
TFinalizeParams& TFinalizeParams::operator=(TFinalizeParams&& other72) {
  is_overwrite = std::move(other72.is_overwrite);
  hdfs_base_dir = std::move(other72.hdfs_base_dir);
  table_name = std::move(other72.table_name);
  table_db = std::move(other72.table_db);
  staging_dir = std::move(other72.staging_dir);
  table_id = std::move(other72.table_id);
  transaction_id = std::move(other72.transaction_id);
  write_id = std::move(other72.write_id);
  spec_id = std::move(other72.spec_id);
  __isset = std::move(other72.__isset);
  return *this;
}
void TFinalizeParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TFinalizeParams(";
  out << "is_overwrite=" << to_string(is_overwrite);
  out << ", " << "hdfs_base_dir=" << to_string(hdfs_base_dir);
  out << ", " << "table_name=" << to_string(table_name);
  out << ", " << "table_db=" << to_string(table_db);
  out << ", " << "staging_dir="; (__isset.staging_dir ? (out << to_string(staging_dir)) : (out << "<null>"));
  out << ", " << "table_id="; (__isset.table_id ? (out << to_string(table_id)) : (out << "<null>"));
  out << ", " << "transaction_id="; (__isset.transaction_id ? (out << to_string(transaction_id)) : (out << "<null>"));
  out << ", " << "write_id="; (__isset.write_id ? (out << to_string(write_id)) : (out << "<null>"));
  out << ", " << "spec_id="; (__isset.spec_id ? (out << to_string(spec_id)) : (out << "<null>"));
  out << ")";
}


TQueryExecRequest::~TQueryExecRequest() throw() {
}


void TQueryExecRequest::__set_plan_exec_info(const std::vector<TPlanExecInfo> & val) {
  this->plan_exec_info = val;
__isset.plan_exec_info = true;
}

void TQueryExecRequest::__set_result_set_metadata(const  ::impala::TResultSetMetadata& val) {
  this->result_set_metadata = val;
__isset.result_set_metadata = true;
}

void TQueryExecRequest::__set_finalize_params(const TFinalizeParams& val) {
  this->finalize_params = val;
__isset.finalize_params = true;
}

void TQueryExecRequest::__set_query_ctx(const TQueryCtx& val) {
  this->query_ctx = val;
}

void TQueryExecRequest::__set_query_plan(const std::string& val) {
  this->query_plan = val;
__isset.query_plan = true;
}

void TQueryExecRequest::__set_stmt_type(const  ::impala::TStmtType::type val) {
  this->stmt_type = val;
}

void TQueryExecRequest::__set_host_list(const std::vector< ::impala::TNetworkAddress> & val) {
  this->host_list = val;
}

void TQueryExecRequest::__set_lineage_graph(const  ::impala::TLineageGraph& val) {
  this->lineage_graph = val;
__isset.lineage_graph = true;
}

void TQueryExecRequest::__set_per_host_mem_estimate(const int64_t val) {
  this->per_host_mem_estimate = val;
__isset.per_host_mem_estimate = true;
}

void TQueryExecRequest::__set_max_per_host_min_mem_reservation(const int64_t val) {
  this->max_per_host_min_mem_reservation = val;
__isset.max_per_host_min_mem_reservation = true;
}

void TQueryExecRequest::__set_max_per_host_thread_reservation(const int64_t val) {
  this->max_per_host_thread_reservation = val;
__isset.max_per_host_thread_reservation = true;
}

void TQueryExecRequest::__set_dedicated_coord_mem_estimate(const int64_t val) {
  this->dedicated_coord_mem_estimate = val;
__isset.dedicated_coord_mem_estimate = true;
}
std::ostream& operator<<(std::ostream& out, const TQueryExecRequest& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TQueryExecRequest &a, TQueryExecRequest &b) {
  using ::std::swap;
  swap(a.plan_exec_info, b.plan_exec_info);
  swap(a.result_set_metadata, b.result_set_metadata);
  swap(a.finalize_params, b.finalize_params);
  swap(a.query_ctx, b.query_ctx);
  swap(a.query_plan, b.query_plan);
  swap(a.stmt_type, b.stmt_type);
  swap(a.host_list, b.host_list);
  swap(a.lineage_graph, b.lineage_graph);
  swap(a.per_host_mem_estimate, b.per_host_mem_estimate);
  swap(a.max_per_host_min_mem_reservation, b.max_per_host_min_mem_reservation);
  swap(a.max_per_host_thread_reservation, b.max_per_host_thread_reservation);
  swap(a.dedicated_coord_mem_estimate, b.dedicated_coord_mem_estimate);
  swap(a.__isset, b.__isset);
}

TQueryExecRequest::TQueryExecRequest(const TQueryExecRequest& other86) {
  plan_exec_info = other86.plan_exec_info;
  result_set_metadata = other86.result_set_metadata;
  finalize_params = other86.finalize_params;
  query_ctx = other86.query_ctx;
  query_plan = other86.query_plan;
  stmt_type = other86.stmt_type;
  host_list = other86.host_list;
  lineage_graph = other86.lineage_graph;
  per_host_mem_estimate = other86.per_host_mem_estimate;
  max_per_host_min_mem_reservation = other86.max_per_host_min_mem_reservation;
  max_per_host_thread_reservation = other86.max_per_host_thread_reservation;
  dedicated_coord_mem_estimate = other86.dedicated_coord_mem_estimate;
  __isset = other86.__isset;
}
TQueryExecRequest::TQueryExecRequest( TQueryExecRequest&& other87) {
  plan_exec_info = std::move(other87.plan_exec_info);
  result_set_metadata = std::move(other87.result_set_metadata);
  finalize_params = std::move(other87.finalize_params);
  query_ctx = std::move(other87.query_ctx);
  query_plan = std::move(other87.query_plan);
  stmt_type = std::move(other87.stmt_type);
  host_list = std::move(other87.host_list);
  lineage_graph = std::move(other87.lineage_graph);
  per_host_mem_estimate = std::move(other87.per_host_mem_estimate);
  max_per_host_min_mem_reservation = std::move(other87.max_per_host_min_mem_reservation);
  max_per_host_thread_reservation = std::move(other87.max_per_host_thread_reservation);
  dedicated_coord_mem_estimate = std::move(other87.dedicated_coord_mem_estimate);
  __isset = std::move(other87.__isset);
}
TQueryExecRequest& TQueryExecRequest::operator=(const TQueryExecRequest& other88) {
  plan_exec_info = other88.plan_exec_info;
  result_set_metadata = other88.result_set_metadata;
  finalize_params = other88.finalize_params;
  query_ctx = other88.query_ctx;
  query_plan = other88.query_plan;
  stmt_type = other88.stmt_type;
  host_list = other88.host_list;
  lineage_graph = other88.lineage_graph;
  per_host_mem_estimate = other88.per_host_mem_estimate;
  max_per_host_min_mem_reservation = other88.max_per_host_min_mem_reservation;
  max_per_host_thread_reservation = other88.max_per_host_thread_reservation;
  dedicated_coord_mem_estimate = other88.dedicated_coord_mem_estimate;
  __isset = other88.__isset;
  return *this;
}
TQueryExecRequest& TQueryExecRequest::operator=(TQueryExecRequest&& other89) {
  plan_exec_info = std::move(other89.plan_exec_info);
  result_set_metadata = std::move(other89.result_set_metadata);
  finalize_params = std::move(other89.finalize_params);
  query_ctx = std::move(other89.query_ctx);
  query_plan = std::move(other89.query_plan);
  stmt_type = std::move(other89.stmt_type);
  host_list = std::move(other89.host_list);
  lineage_graph = std::move(other89.lineage_graph);
  per_host_mem_estimate = std::move(other89.per_host_mem_estimate);
  max_per_host_min_mem_reservation = std::move(other89.max_per_host_min_mem_reservation);
  max_per_host_thread_reservation = std::move(other89.max_per_host_thread_reservation);
  dedicated_coord_mem_estimate = std::move(other89.dedicated_coord_mem_estimate);
  __isset = std::move(other89.__isset);
  return *this;
}
void TQueryExecRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TQueryExecRequest(";
  out << "plan_exec_info="; (__isset.plan_exec_info ? (out << to_string(plan_exec_info)) : (out << "<null>"));
  out << ", " << "result_set_metadata="; (__isset.result_set_metadata ? (out << to_string(result_set_metadata)) : (out << "<null>"));
  out << ", " << "finalize_params="; (__isset.finalize_params ? (out << to_string(finalize_params)) : (out << "<null>"));
  out << ", " << "query_ctx=" << to_string(query_ctx);
  out << ", " << "query_plan="; (__isset.query_plan ? (out << to_string(query_plan)) : (out << "<null>"));
  out << ", " << "stmt_type=" << to_string(stmt_type);
  out << ", " << "host_list=" << to_string(host_list);
  out << ", " << "lineage_graph="; (__isset.lineage_graph ? (out << to_string(lineage_graph)) : (out << "<null>"));
  out << ", " << "per_host_mem_estimate="; (__isset.per_host_mem_estimate ? (out << to_string(per_host_mem_estimate)) : (out << "<null>"));
  out << ", " << "max_per_host_min_mem_reservation="; (__isset.max_per_host_min_mem_reservation ? (out << to_string(max_per_host_min_mem_reservation)) : (out << "<null>"));
  out << ", " << "max_per_host_thread_reservation="; (__isset.max_per_host_thread_reservation ? (out << to_string(max_per_host_thread_reservation)) : (out << "<null>"));
  out << ", " << "dedicated_coord_mem_estimate="; (__isset.dedicated_coord_mem_estimate ? (out << to_string(dedicated_coord_mem_estimate)) : (out << "<null>"));
  out << ")";
}

} // namespace
