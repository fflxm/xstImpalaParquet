/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ImpalaHiveServer2Service_H
#define ImpalaHiveServer2Service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ImpalaService_types.h"
#include "TCLIService.h"

namespace impala {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ImpalaHiveServer2ServiceIf : virtual public  ::apache::hive::service::cli::thrift::TCLIServiceIf {
 public:
  virtual ~ImpalaHiveServer2ServiceIf() {}
  virtual void GetExecSummary(TGetExecSummaryResp& _return, const TGetExecSummaryReq& req) = 0;
  virtual void GetRuntimeProfile(TGetRuntimeProfileResp& _return, const TGetRuntimeProfileReq& req) = 0;
  virtual void PingImpalaHS2Service(TPingImpalaHS2ServiceResp& _return, const TPingImpalaHS2ServiceReq& req) = 0;
  virtual void CloseImpalaOperation(TCloseImpalaOperationResp& _return, const TCloseImpalaOperationReq& req) = 0;
  virtual void InitQueryContext(TInitQueryContextResp& _return) = 0;
  virtual void ExecutePlannedStatement( ::apache::hive::service::cli::thrift::TExecuteStatementResp& _return, const TExecutePlannedStatementReq& req) = 0;
  virtual void GetBackendConfig(TGetBackendConfigResp& _return, const TGetBackendConfigReq& req) = 0;
  virtual void GetExecutorMembership(TGetExecutorMembershipResp& _return, const TGetExecutorMembershipReq& req) = 0;
};

class ImpalaHiveServer2ServiceIfFactory : virtual public  ::apache::hive::service::cli::thrift::TCLIServiceIfFactory {
 public:
  typedef ImpalaHiveServer2ServiceIf Handler;

  virtual ~ImpalaHiveServer2ServiceIfFactory() {}

  virtual ImpalaHiveServer2ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::apache::hive::service::cli::thrift::TCLIServiceIf* /* handler */) = 0;
};

class ImpalaHiveServer2ServiceIfSingletonFactory : virtual public ImpalaHiveServer2ServiceIfFactory {
 public:
  ImpalaHiveServer2ServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ImpalaHiveServer2ServiceIf>& iface) : iface_(iface) {}
  virtual ~ImpalaHiveServer2ServiceIfSingletonFactory() {}

  virtual ImpalaHiveServer2ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::apache::hive::service::cli::thrift::TCLIServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ImpalaHiveServer2ServiceIf> iface_;
};

class ImpalaHiveServer2ServiceNull : virtual public ImpalaHiveServer2ServiceIf , virtual public  ::apache::hive::service::cli::thrift::TCLIServiceNull {
 public:
  virtual ~ImpalaHiveServer2ServiceNull() {}
  void GetExecSummary(TGetExecSummaryResp& /* _return */, const TGetExecSummaryReq& /* req */) {
    return;
  }
  void GetRuntimeProfile(TGetRuntimeProfileResp& /* _return */, const TGetRuntimeProfileReq& /* req */) {
    return;
  }
  void PingImpalaHS2Service(TPingImpalaHS2ServiceResp& /* _return */, const TPingImpalaHS2ServiceReq& /* req */) {
    return;
  }
  void CloseImpalaOperation(TCloseImpalaOperationResp& /* _return */, const TCloseImpalaOperationReq& /* req */) {
    return;
  }
  void InitQueryContext(TInitQueryContextResp& /* _return */) {
    return;
  }
  void ExecutePlannedStatement( ::apache::hive::service::cli::thrift::TExecuteStatementResp& /* _return */, const TExecutePlannedStatementReq& /* req */) {
    return;
  }
  void GetBackendConfig(TGetBackendConfigResp& /* _return */, const TGetBackendConfigReq& /* req */) {
    return;
  }
  void GetExecutorMembership(TGetExecutorMembershipResp& /* _return */, const TGetExecutorMembershipReq& /* req */) {
    return;
  }
};

typedef struct _ImpalaHiveServer2Service_GetExecSummary_args__isset {
  _ImpalaHiveServer2Service_GetExecSummary_args__isset() : req(false) {}
  bool req :1;
} _ImpalaHiveServer2Service_GetExecSummary_args__isset;

class ImpalaHiveServer2Service_GetExecSummary_args {
 public:

  ImpalaHiveServer2Service_GetExecSummary_args(const ImpalaHiveServer2Service_GetExecSummary_args&);
  ImpalaHiveServer2Service_GetExecSummary_args(ImpalaHiveServer2Service_GetExecSummary_args&&);
  ImpalaHiveServer2Service_GetExecSummary_args& operator=(const ImpalaHiveServer2Service_GetExecSummary_args&);
  ImpalaHiveServer2Service_GetExecSummary_args& operator=(ImpalaHiveServer2Service_GetExecSummary_args&&);
  ImpalaHiveServer2Service_GetExecSummary_args() {
  }

  virtual ~ImpalaHiveServer2Service_GetExecSummary_args() throw();
  TGetExecSummaryReq req;

  _ImpalaHiveServer2Service_GetExecSummary_args__isset __isset;

  void __set_req(const TGetExecSummaryReq& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ImpalaHiveServer2Service_GetExecSummary_pargs {
 public:


  virtual ~ImpalaHiveServer2Service_GetExecSummary_pargs() throw();
  const TGetExecSummaryReq* req;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_GetExecSummary_result__isset {
  _ImpalaHiveServer2Service_GetExecSummary_result__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_GetExecSummary_result__isset;

class ImpalaHiveServer2Service_GetExecSummary_result {
 public:

  ImpalaHiveServer2Service_GetExecSummary_result(const ImpalaHiveServer2Service_GetExecSummary_result&);
  ImpalaHiveServer2Service_GetExecSummary_result(ImpalaHiveServer2Service_GetExecSummary_result&&);
  ImpalaHiveServer2Service_GetExecSummary_result& operator=(const ImpalaHiveServer2Service_GetExecSummary_result&);
  ImpalaHiveServer2Service_GetExecSummary_result& operator=(ImpalaHiveServer2Service_GetExecSummary_result&&);
  ImpalaHiveServer2Service_GetExecSummary_result() {
  }

  virtual ~ImpalaHiveServer2Service_GetExecSummary_result() throw();
  TGetExecSummaryResp success;

  _ImpalaHiveServer2Service_GetExecSummary_result__isset __isset;

  void __set_success(const TGetExecSummaryResp& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_GetExecSummary_presult__isset {
  _ImpalaHiveServer2Service_GetExecSummary_presult__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_GetExecSummary_presult__isset;

class ImpalaHiveServer2Service_GetExecSummary_presult {
 public:


  virtual ~ImpalaHiveServer2Service_GetExecSummary_presult() throw();
  TGetExecSummaryResp* success;

  _ImpalaHiveServer2Service_GetExecSummary_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _ImpalaHiveServer2Service_GetRuntimeProfile_args__isset {
  _ImpalaHiveServer2Service_GetRuntimeProfile_args__isset() : req(false) {}
  bool req :1;
} _ImpalaHiveServer2Service_GetRuntimeProfile_args__isset;

class ImpalaHiveServer2Service_GetRuntimeProfile_args {
 public:

  ImpalaHiveServer2Service_GetRuntimeProfile_args(const ImpalaHiveServer2Service_GetRuntimeProfile_args&);
  ImpalaHiveServer2Service_GetRuntimeProfile_args(ImpalaHiveServer2Service_GetRuntimeProfile_args&&);
  ImpalaHiveServer2Service_GetRuntimeProfile_args& operator=(const ImpalaHiveServer2Service_GetRuntimeProfile_args&);
  ImpalaHiveServer2Service_GetRuntimeProfile_args& operator=(ImpalaHiveServer2Service_GetRuntimeProfile_args&&);
  ImpalaHiveServer2Service_GetRuntimeProfile_args() {
  }

  virtual ~ImpalaHiveServer2Service_GetRuntimeProfile_args() throw();
  TGetRuntimeProfileReq req;

  _ImpalaHiveServer2Service_GetRuntimeProfile_args__isset __isset;

  void __set_req(const TGetRuntimeProfileReq& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ImpalaHiveServer2Service_GetRuntimeProfile_pargs {
 public:


  virtual ~ImpalaHiveServer2Service_GetRuntimeProfile_pargs() throw();
  const TGetRuntimeProfileReq* req;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_GetRuntimeProfile_result__isset {
  _ImpalaHiveServer2Service_GetRuntimeProfile_result__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_GetRuntimeProfile_result__isset;

class ImpalaHiveServer2Service_GetRuntimeProfile_result {
 public:

  ImpalaHiveServer2Service_GetRuntimeProfile_result(const ImpalaHiveServer2Service_GetRuntimeProfile_result&);
  ImpalaHiveServer2Service_GetRuntimeProfile_result(ImpalaHiveServer2Service_GetRuntimeProfile_result&&);
  ImpalaHiveServer2Service_GetRuntimeProfile_result& operator=(const ImpalaHiveServer2Service_GetRuntimeProfile_result&);
  ImpalaHiveServer2Service_GetRuntimeProfile_result& operator=(ImpalaHiveServer2Service_GetRuntimeProfile_result&&);
  ImpalaHiveServer2Service_GetRuntimeProfile_result() {
  }

  virtual ~ImpalaHiveServer2Service_GetRuntimeProfile_result() throw();
  TGetRuntimeProfileResp success;

  _ImpalaHiveServer2Service_GetRuntimeProfile_result__isset __isset;

  void __set_success(const TGetRuntimeProfileResp& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_GetRuntimeProfile_presult__isset {
  _ImpalaHiveServer2Service_GetRuntimeProfile_presult__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_GetRuntimeProfile_presult__isset;

class ImpalaHiveServer2Service_GetRuntimeProfile_presult {
 public:


  virtual ~ImpalaHiveServer2Service_GetRuntimeProfile_presult() throw();
  TGetRuntimeProfileResp* success;

  _ImpalaHiveServer2Service_GetRuntimeProfile_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _ImpalaHiveServer2Service_PingImpalaHS2Service_args__isset {
  _ImpalaHiveServer2Service_PingImpalaHS2Service_args__isset() : req(false) {}
  bool req :1;
} _ImpalaHiveServer2Service_PingImpalaHS2Service_args__isset;

class ImpalaHiveServer2Service_PingImpalaHS2Service_args {
 public:

  ImpalaHiveServer2Service_PingImpalaHS2Service_args(const ImpalaHiveServer2Service_PingImpalaHS2Service_args&);
  ImpalaHiveServer2Service_PingImpalaHS2Service_args(ImpalaHiveServer2Service_PingImpalaHS2Service_args&&);
  ImpalaHiveServer2Service_PingImpalaHS2Service_args& operator=(const ImpalaHiveServer2Service_PingImpalaHS2Service_args&);
  ImpalaHiveServer2Service_PingImpalaHS2Service_args& operator=(ImpalaHiveServer2Service_PingImpalaHS2Service_args&&);
  ImpalaHiveServer2Service_PingImpalaHS2Service_args() {
  }

  virtual ~ImpalaHiveServer2Service_PingImpalaHS2Service_args() throw();
  TPingImpalaHS2ServiceReq req;

  _ImpalaHiveServer2Service_PingImpalaHS2Service_args__isset __isset;

  void __set_req(const TPingImpalaHS2ServiceReq& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ImpalaHiveServer2Service_PingImpalaHS2Service_pargs {
 public:


  virtual ~ImpalaHiveServer2Service_PingImpalaHS2Service_pargs() throw();
  const TPingImpalaHS2ServiceReq* req;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_PingImpalaHS2Service_result__isset {
  _ImpalaHiveServer2Service_PingImpalaHS2Service_result__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_PingImpalaHS2Service_result__isset;

class ImpalaHiveServer2Service_PingImpalaHS2Service_result {
 public:

  ImpalaHiveServer2Service_PingImpalaHS2Service_result(const ImpalaHiveServer2Service_PingImpalaHS2Service_result&);
  ImpalaHiveServer2Service_PingImpalaHS2Service_result(ImpalaHiveServer2Service_PingImpalaHS2Service_result&&);
  ImpalaHiveServer2Service_PingImpalaHS2Service_result& operator=(const ImpalaHiveServer2Service_PingImpalaHS2Service_result&);
  ImpalaHiveServer2Service_PingImpalaHS2Service_result& operator=(ImpalaHiveServer2Service_PingImpalaHS2Service_result&&);
  ImpalaHiveServer2Service_PingImpalaHS2Service_result() {
  }

  virtual ~ImpalaHiveServer2Service_PingImpalaHS2Service_result() throw();
  TPingImpalaHS2ServiceResp success;

  _ImpalaHiveServer2Service_PingImpalaHS2Service_result__isset __isset;

  void __set_success(const TPingImpalaHS2ServiceResp& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_PingImpalaHS2Service_presult__isset {
  _ImpalaHiveServer2Service_PingImpalaHS2Service_presult__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_PingImpalaHS2Service_presult__isset;

class ImpalaHiveServer2Service_PingImpalaHS2Service_presult {
 public:


  virtual ~ImpalaHiveServer2Service_PingImpalaHS2Service_presult() throw();
  TPingImpalaHS2ServiceResp* success;

  _ImpalaHiveServer2Service_PingImpalaHS2Service_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _ImpalaHiveServer2Service_CloseImpalaOperation_args__isset {
  _ImpalaHiveServer2Service_CloseImpalaOperation_args__isset() : req(false) {}
  bool req :1;
} _ImpalaHiveServer2Service_CloseImpalaOperation_args__isset;

class ImpalaHiveServer2Service_CloseImpalaOperation_args {
 public:

  ImpalaHiveServer2Service_CloseImpalaOperation_args(const ImpalaHiveServer2Service_CloseImpalaOperation_args&);
  ImpalaHiveServer2Service_CloseImpalaOperation_args(ImpalaHiveServer2Service_CloseImpalaOperation_args&&);
  ImpalaHiveServer2Service_CloseImpalaOperation_args& operator=(const ImpalaHiveServer2Service_CloseImpalaOperation_args&);
  ImpalaHiveServer2Service_CloseImpalaOperation_args& operator=(ImpalaHiveServer2Service_CloseImpalaOperation_args&&);
  ImpalaHiveServer2Service_CloseImpalaOperation_args() {
  }

  virtual ~ImpalaHiveServer2Service_CloseImpalaOperation_args() throw();
  TCloseImpalaOperationReq req;

  _ImpalaHiveServer2Service_CloseImpalaOperation_args__isset __isset;

  void __set_req(const TCloseImpalaOperationReq& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ImpalaHiveServer2Service_CloseImpalaOperation_pargs {
 public:


  virtual ~ImpalaHiveServer2Service_CloseImpalaOperation_pargs() throw();
  const TCloseImpalaOperationReq* req;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_CloseImpalaOperation_result__isset {
  _ImpalaHiveServer2Service_CloseImpalaOperation_result__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_CloseImpalaOperation_result__isset;

class ImpalaHiveServer2Service_CloseImpalaOperation_result {
 public:

  ImpalaHiveServer2Service_CloseImpalaOperation_result(const ImpalaHiveServer2Service_CloseImpalaOperation_result&);
  ImpalaHiveServer2Service_CloseImpalaOperation_result(ImpalaHiveServer2Service_CloseImpalaOperation_result&&);
  ImpalaHiveServer2Service_CloseImpalaOperation_result& operator=(const ImpalaHiveServer2Service_CloseImpalaOperation_result&);
  ImpalaHiveServer2Service_CloseImpalaOperation_result& operator=(ImpalaHiveServer2Service_CloseImpalaOperation_result&&);
  ImpalaHiveServer2Service_CloseImpalaOperation_result() {
  }

  virtual ~ImpalaHiveServer2Service_CloseImpalaOperation_result() throw();
  TCloseImpalaOperationResp success;

  _ImpalaHiveServer2Service_CloseImpalaOperation_result__isset __isset;

  void __set_success(const TCloseImpalaOperationResp& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_CloseImpalaOperation_presult__isset {
  _ImpalaHiveServer2Service_CloseImpalaOperation_presult__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_CloseImpalaOperation_presult__isset;

class ImpalaHiveServer2Service_CloseImpalaOperation_presult {
 public:


  virtual ~ImpalaHiveServer2Service_CloseImpalaOperation_presult() throw();
  TCloseImpalaOperationResp* success;

  _ImpalaHiveServer2Service_CloseImpalaOperation_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class ImpalaHiveServer2Service_InitQueryContext_args {
 public:

  ImpalaHiveServer2Service_InitQueryContext_args(const ImpalaHiveServer2Service_InitQueryContext_args&);
  ImpalaHiveServer2Service_InitQueryContext_args(ImpalaHiveServer2Service_InitQueryContext_args&&);
  ImpalaHiveServer2Service_InitQueryContext_args& operator=(const ImpalaHiveServer2Service_InitQueryContext_args&);
  ImpalaHiveServer2Service_InitQueryContext_args& operator=(ImpalaHiveServer2Service_InitQueryContext_args&&);
  ImpalaHiveServer2Service_InitQueryContext_args() {
  }

  virtual ~ImpalaHiveServer2Service_InitQueryContext_args() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ImpalaHiveServer2Service_InitQueryContext_pargs {
 public:


  virtual ~ImpalaHiveServer2Service_InitQueryContext_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_InitQueryContext_result__isset {
  _ImpalaHiveServer2Service_InitQueryContext_result__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_InitQueryContext_result__isset;

class ImpalaHiveServer2Service_InitQueryContext_result {
 public:

  ImpalaHiveServer2Service_InitQueryContext_result(const ImpalaHiveServer2Service_InitQueryContext_result&);
  ImpalaHiveServer2Service_InitQueryContext_result(ImpalaHiveServer2Service_InitQueryContext_result&&);
  ImpalaHiveServer2Service_InitQueryContext_result& operator=(const ImpalaHiveServer2Service_InitQueryContext_result&);
  ImpalaHiveServer2Service_InitQueryContext_result& operator=(ImpalaHiveServer2Service_InitQueryContext_result&&);
  ImpalaHiveServer2Service_InitQueryContext_result() {
  }

  virtual ~ImpalaHiveServer2Service_InitQueryContext_result() throw();
  TInitQueryContextResp success;

  _ImpalaHiveServer2Service_InitQueryContext_result__isset __isset;

  void __set_success(const TInitQueryContextResp& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_InitQueryContext_presult__isset {
  _ImpalaHiveServer2Service_InitQueryContext_presult__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_InitQueryContext_presult__isset;

class ImpalaHiveServer2Service_InitQueryContext_presult {
 public:


  virtual ~ImpalaHiveServer2Service_InitQueryContext_presult() throw();
  TInitQueryContextResp* success;

  _ImpalaHiveServer2Service_InitQueryContext_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _ImpalaHiveServer2Service_ExecutePlannedStatement_args__isset {
  _ImpalaHiveServer2Service_ExecutePlannedStatement_args__isset() : req(false) {}
  bool req :1;
} _ImpalaHiveServer2Service_ExecutePlannedStatement_args__isset;

class ImpalaHiveServer2Service_ExecutePlannedStatement_args {
 public:

  ImpalaHiveServer2Service_ExecutePlannedStatement_args(const ImpalaHiveServer2Service_ExecutePlannedStatement_args&);
  ImpalaHiveServer2Service_ExecutePlannedStatement_args(ImpalaHiveServer2Service_ExecutePlannedStatement_args&&);
  ImpalaHiveServer2Service_ExecutePlannedStatement_args& operator=(const ImpalaHiveServer2Service_ExecutePlannedStatement_args&);
  ImpalaHiveServer2Service_ExecutePlannedStatement_args& operator=(ImpalaHiveServer2Service_ExecutePlannedStatement_args&&);
  ImpalaHiveServer2Service_ExecutePlannedStatement_args() {
  }

  virtual ~ImpalaHiveServer2Service_ExecutePlannedStatement_args() throw();
  TExecutePlannedStatementReq req;

  _ImpalaHiveServer2Service_ExecutePlannedStatement_args__isset __isset;

  void __set_req(const TExecutePlannedStatementReq& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ImpalaHiveServer2Service_ExecutePlannedStatement_pargs {
 public:


  virtual ~ImpalaHiveServer2Service_ExecutePlannedStatement_pargs() throw();
  const TExecutePlannedStatementReq* req;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_ExecutePlannedStatement_result__isset {
  _ImpalaHiveServer2Service_ExecutePlannedStatement_result__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_ExecutePlannedStatement_result__isset;

class ImpalaHiveServer2Service_ExecutePlannedStatement_result {
 public:

  ImpalaHiveServer2Service_ExecutePlannedStatement_result(const ImpalaHiveServer2Service_ExecutePlannedStatement_result&);
  ImpalaHiveServer2Service_ExecutePlannedStatement_result(ImpalaHiveServer2Service_ExecutePlannedStatement_result&&);
  ImpalaHiveServer2Service_ExecutePlannedStatement_result& operator=(const ImpalaHiveServer2Service_ExecutePlannedStatement_result&);
  ImpalaHiveServer2Service_ExecutePlannedStatement_result& operator=(ImpalaHiveServer2Service_ExecutePlannedStatement_result&&);
  ImpalaHiveServer2Service_ExecutePlannedStatement_result() {
  }

  virtual ~ImpalaHiveServer2Service_ExecutePlannedStatement_result() throw();
   ::apache::hive::service::cli::thrift::TExecuteStatementResp success;

  _ImpalaHiveServer2Service_ExecutePlannedStatement_result__isset __isset;

  void __set_success(const  ::apache::hive::service::cli::thrift::TExecuteStatementResp& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_ExecutePlannedStatement_presult__isset {
  _ImpalaHiveServer2Service_ExecutePlannedStatement_presult__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_ExecutePlannedStatement_presult__isset;

class ImpalaHiveServer2Service_ExecutePlannedStatement_presult {
 public:


  virtual ~ImpalaHiveServer2Service_ExecutePlannedStatement_presult() throw();
   ::apache::hive::service::cli::thrift::TExecuteStatementResp* success;

  _ImpalaHiveServer2Service_ExecutePlannedStatement_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _ImpalaHiveServer2Service_GetBackendConfig_args__isset {
  _ImpalaHiveServer2Service_GetBackendConfig_args__isset() : req(false) {}
  bool req :1;
} _ImpalaHiveServer2Service_GetBackendConfig_args__isset;

class ImpalaHiveServer2Service_GetBackendConfig_args {
 public:

  ImpalaHiveServer2Service_GetBackendConfig_args(const ImpalaHiveServer2Service_GetBackendConfig_args&);
  ImpalaHiveServer2Service_GetBackendConfig_args(ImpalaHiveServer2Service_GetBackendConfig_args&&);
  ImpalaHiveServer2Service_GetBackendConfig_args& operator=(const ImpalaHiveServer2Service_GetBackendConfig_args&);
  ImpalaHiveServer2Service_GetBackendConfig_args& operator=(ImpalaHiveServer2Service_GetBackendConfig_args&&);
  ImpalaHiveServer2Service_GetBackendConfig_args() {
  }

  virtual ~ImpalaHiveServer2Service_GetBackendConfig_args() throw();
  TGetBackendConfigReq req;

  _ImpalaHiveServer2Service_GetBackendConfig_args__isset __isset;

  void __set_req(const TGetBackendConfigReq& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ImpalaHiveServer2Service_GetBackendConfig_pargs {
 public:


  virtual ~ImpalaHiveServer2Service_GetBackendConfig_pargs() throw();
  const TGetBackendConfigReq* req;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_GetBackendConfig_result__isset {
  _ImpalaHiveServer2Service_GetBackendConfig_result__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_GetBackendConfig_result__isset;

class ImpalaHiveServer2Service_GetBackendConfig_result {
 public:

  ImpalaHiveServer2Service_GetBackendConfig_result(const ImpalaHiveServer2Service_GetBackendConfig_result&);
  ImpalaHiveServer2Service_GetBackendConfig_result(ImpalaHiveServer2Service_GetBackendConfig_result&&);
  ImpalaHiveServer2Service_GetBackendConfig_result& operator=(const ImpalaHiveServer2Service_GetBackendConfig_result&);
  ImpalaHiveServer2Service_GetBackendConfig_result& operator=(ImpalaHiveServer2Service_GetBackendConfig_result&&);
  ImpalaHiveServer2Service_GetBackendConfig_result() {
  }

  virtual ~ImpalaHiveServer2Service_GetBackendConfig_result() throw();
  TGetBackendConfigResp success;

  _ImpalaHiveServer2Service_GetBackendConfig_result__isset __isset;

  void __set_success(const TGetBackendConfigResp& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_GetBackendConfig_presult__isset {
  _ImpalaHiveServer2Service_GetBackendConfig_presult__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_GetBackendConfig_presult__isset;

class ImpalaHiveServer2Service_GetBackendConfig_presult {
 public:


  virtual ~ImpalaHiveServer2Service_GetBackendConfig_presult() throw();
  TGetBackendConfigResp* success;

  _ImpalaHiveServer2Service_GetBackendConfig_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _ImpalaHiveServer2Service_GetExecutorMembership_args__isset {
  _ImpalaHiveServer2Service_GetExecutorMembership_args__isset() : req(false) {}
  bool req :1;
} _ImpalaHiveServer2Service_GetExecutorMembership_args__isset;

class ImpalaHiveServer2Service_GetExecutorMembership_args {
 public:

  ImpalaHiveServer2Service_GetExecutorMembership_args(const ImpalaHiveServer2Service_GetExecutorMembership_args&);
  ImpalaHiveServer2Service_GetExecutorMembership_args(ImpalaHiveServer2Service_GetExecutorMembership_args&&);
  ImpalaHiveServer2Service_GetExecutorMembership_args& operator=(const ImpalaHiveServer2Service_GetExecutorMembership_args&);
  ImpalaHiveServer2Service_GetExecutorMembership_args& operator=(ImpalaHiveServer2Service_GetExecutorMembership_args&&);
  ImpalaHiveServer2Service_GetExecutorMembership_args() {
  }

  virtual ~ImpalaHiveServer2Service_GetExecutorMembership_args() throw();
  TGetExecutorMembershipReq req;

  _ImpalaHiveServer2Service_GetExecutorMembership_args__isset __isset;

  void __set_req(const TGetExecutorMembershipReq& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class ImpalaHiveServer2Service_GetExecutorMembership_pargs {
 public:


  virtual ~ImpalaHiveServer2Service_GetExecutorMembership_pargs() throw();
  const TGetExecutorMembershipReq* req;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_GetExecutorMembership_result__isset {
  _ImpalaHiveServer2Service_GetExecutorMembership_result__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_GetExecutorMembership_result__isset;

class ImpalaHiveServer2Service_GetExecutorMembership_result {
 public:

  ImpalaHiveServer2Service_GetExecutorMembership_result(const ImpalaHiveServer2Service_GetExecutorMembership_result&);
  ImpalaHiveServer2Service_GetExecutorMembership_result(ImpalaHiveServer2Service_GetExecutorMembership_result&&);
  ImpalaHiveServer2Service_GetExecutorMembership_result& operator=(const ImpalaHiveServer2Service_GetExecutorMembership_result&);
  ImpalaHiveServer2Service_GetExecutorMembership_result& operator=(ImpalaHiveServer2Service_GetExecutorMembership_result&&);
  ImpalaHiveServer2Service_GetExecutorMembership_result() {
  }

  virtual ~ImpalaHiveServer2Service_GetExecutorMembership_result() throw();
  TGetExecutorMembershipResp success;

  _ImpalaHiveServer2Service_GetExecutorMembership_result__isset __isset;

  void __set_success(const TGetExecutorMembershipResp& val);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _ImpalaHiveServer2Service_GetExecutorMembership_presult__isset {
  _ImpalaHiveServer2Service_GetExecutorMembership_presult__isset() : success(false) {}
  bool success :1;
} _ImpalaHiveServer2Service_GetExecutorMembership_presult__isset;

class ImpalaHiveServer2Service_GetExecutorMembership_presult {
 public:


  virtual ~ImpalaHiveServer2Service_GetExecutorMembership_presult() throw();
  TGetExecutorMembershipResp* success;

  _ImpalaHiveServer2Service_GetExecutorMembership_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class ImpalaHiveServer2ServiceClientT : virtual public ImpalaHiveServer2ServiceIf, public  ::apache::hive::service::cli::thrift::TCLIServiceClientT<Protocol_> {
 public:
  ImpalaHiveServer2ServiceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) :
     ::apache::hive::service::cli::thrift::TCLIServiceClientT<Protocol_>(prot, prot) {}
  ImpalaHiveServer2ServiceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) :     ::apache::hive::service::cli::thrift::TCLIServiceClientT<Protocol_>(iprot, oprot) {}
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void GetExecSummary(TGetExecSummaryResp& _return, const TGetExecSummaryReq& req);
  void send_GetExecSummary(const TGetExecSummaryReq& req);
  void recv_GetExecSummary(TGetExecSummaryResp& _return);
  void GetRuntimeProfile(TGetRuntimeProfileResp& _return, const TGetRuntimeProfileReq& req);
  void send_GetRuntimeProfile(const TGetRuntimeProfileReq& req);
  void recv_GetRuntimeProfile(TGetRuntimeProfileResp& _return);
  void PingImpalaHS2Service(TPingImpalaHS2ServiceResp& _return, const TPingImpalaHS2ServiceReq& req);
  void send_PingImpalaHS2Service(const TPingImpalaHS2ServiceReq& req);
  void recv_PingImpalaHS2Service(TPingImpalaHS2ServiceResp& _return);
  void CloseImpalaOperation(TCloseImpalaOperationResp& _return, const TCloseImpalaOperationReq& req);
  void send_CloseImpalaOperation(const TCloseImpalaOperationReq& req);
  void recv_CloseImpalaOperation(TCloseImpalaOperationResp& _return);
  void InitQueryContext(TInitQueryContextResp& _return);
  void send_InitQueryContext();
  void recv_InitQueryContext(TInitQueryContextResp& _return);
  void ExecutePlannedStatement( ::apache::hive::service::cli::thrift::TExecuteStatementResp& _return, const TExecutePlannedStatementReq& req);
  void send_ExecutePlannedStatement(const TExecutePlannedStatementReq& req);
  void recv_ExecutePlannedStatement( ::apache::hive::service::cli::thrift::TExecuteStatementResp& _return);
  void GetBackendConfig(TGetBackendConfigResp& _return, const TGetBackendConfigReq& req);
  void send_GetBackendConfig(const TGetBackendConfigReq& req);
  void recv_GetBackendConfig(TGetBackendConfigResp& _return);
  void GetExecutorMembership(TGetExecutorMembershipResp& _return, const TGetExecutorMembershipReq& req);
  void send_GetExecutorMembership(const TGetExecutorMembershipReq& req);
  void recv_GetExecutorMembership(TGetExecutorMembershipResp& _return);
};

typedef ImpalaHiveServer2ServiceClientT< ::apache::thrift::protocol::TProtocol> ImpalaHiveServer2ServiceClient;

template <class Protocol_>
class ImpalaHiveServer2ServiceProcessorT : public  ::apache::hive::service::cli::thrift::TCLIServiceProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ImpalaHiveServer2ServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ImpalaHiveServer2ServiceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (ImpalaHiveServer2ServiceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_GetExecSummary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetExecSummary(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_GetRuntimeProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRuntimeProfile(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_PingImpalaHS2Service(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PingImpalaHS2Service(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_CloseImpalaOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CloseImpalaOperation(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_InitQueryContext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_InitQueryContext(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_ExecutePlannedStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ExecutePlannedStatement(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_GetBackendConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetBackendConfig(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_GetExecutorMembership(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetExecutorMembership(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  ImpalaHiveServer2ServiceProcessorT(::apache::thrift::stdcxx::shared_ptr<ImpalaHiveServer2ServiceIf> iface) :
     ::apache::hive::service::cli::thrift::TCLIServiceProcessorT<Protocol_>(iface),
    iface_(iface) {
    processMap_["GetExecSummary"] = ProcessFunctions(
      &ImpalaHiveServer2ServiceProcessorT::process_GetExecSummary,
      &ImpalaHiveServer2ServiceProcessorT::process_GetExecSummary);
    processMap_["GetRuntimeProfile"] = ProcessFunctions(
      &ImpalaHiveServer2ServiceProcessorT::process_GetRuntimeProfile,
      &ImpalaHiveServer2ServiceProcessorT::process_GetRuntimeProfile);
    processMap_["PingImpalaHS2Service"] = ProcessFunctions(
      &ImpalaHiveServer2ServiceProcessorT::process_PingImpalaHS2Service,
      &ImpalaHiveServer2ServiceProcessorT::process_PingImpalaHS2Service);
    processMap_["CloseImpalaOperation"] = ProcessFunctions(
      &ImpalaHiveServer2ServiceProcessorT::process_CloseImpalaOperation,
      &ImpalaHiveServer2ServiceProcessorT::process_CloseImpalaOperation);
    processMap_["InitQueryContext"] = ProcessFunctions(
      &ImpalaHiveServer2ServiceProcessorT::process_InitQueryContext,
      &ImpalaHiveServer2ServiceProcessorT::process_InitQueryContext);
    processMap_["ExecutePlannedStatement"] = ProcessFunctions(
      &ImpalaHiveServer2ServiceProcessorT::process_ExecutePlannedStatement,
      &ImpalaHiveServer2ServiceProcessorT::process_ExecutePlannedStatement);
    processMap_["GetBackendConfig"] = ProcessFunctions(
      &ImpalaHiveServer2ServiceProcessorT::process_GetBackendConfig,
      &ImpalaHiveServer2ServiceProcessorT::process_GetBackendConfig);
    processMap_["GetExecutorMembership"] = ProcessFunctions(
      &ImpalaHiveServer2ServiceProcessorT::process_GetExecutorMembership,
      &ImpalaHiveServer2ServiceProcessorT::process_GetExecutorMembership);
  }

  virtual ~ImpalaHiveServer2ServiceProcessorT() {}
};

typedef ImpalaHiveServer2ServiceProcessorT< ::apache::thrift::protocol::TDummyProtocol > ImpalaHiveServer2ServiceProcessor;

template <class Protocol_>
class ImpalaHiveServer2ServiceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  ImpalaHiveServer2ServiceProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< ImpalaHiveServer2ServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ImpalaHiveServer2ServiceIfFactory > handlerFactory_;
};

typedef ImpalaHiveServer2ServiceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > ImpalaHiveServer2ServiceProcessorFactory;

class ImpalaHiveServer2ServiceMultiface : virtual public ImpalaHiveServer2ServiceIf, public  ::apache::hive::service::cli::thrift::TCLIServiceMultiface {
 public:
  ImpalaHiveServer2ServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ImpalaHiveServer2ServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<apache::thrift::stdcxx::shared_ptr<ImpalaHiveServer2ServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::apache::hive::service::cli::thrift::TCLIServiceMultiface::add(*iter);
    }
  }
  virtual ~ImpalaHiveServer2ServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ImpalaHiveServer2ServiceIf> > ifaces_;
  ImpalaHiveServer2ServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ImpalaHiveServer2ServiceIf> iface) {
     ::apache::hive::service::cli::thrift::TCLIServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void GetExecSummary(TGetExecSummaryResp& _return, const TGetExecSummaryReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetExecSummary(_return, req);
    }
    ifaces_[i]->GetExecSummary(_return, req);
    return;
  }

  void GetRuntimeProfile(TGetRuntimeProfileResp& _return, const TGetRuntimeProfileReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRuntimeProfile(_return, req);
    }
    ifaces_[i]->GetRuntimeProfile(_return, req);
    return;
  }

  void PingImpalaHS2Service(TPingImpalaHS2ServiceResp& _return, const TPingImpalaHS2ServiceReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PingImpalaHS2Service(_return, req);
    }
    ifaces_[i]->PingImpalaHS2Service(_return, req);
    return;
  }

  void CloseImpalaOperation(TCloseImpalaOperationResp& _return, const TCloseImpalaOperationReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CloseImpalaOperation(_return, req);
    }
    ifaces_[i]->CloseImpalaOperation(_return, req);
    return;
  }

  void InitQueryContext(TInitQueryContextResp& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InitQueryContext(_return);
    }
    ifaces_[i]->InitQueryContext(_return);
    return;
  }

  void ExecutePlannedStatement( ::apache::hive::service::cli::thrift::TExecuteStatementResp& _return, const TExecutePlannedStatementReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ExecutePlannedStatement(_return, req);
    }
    ifaces_[i]->ExecutePlannedStatement(_return, req);
    return;
  }

  void GetBackendConfig(TGetBackendConfigResp& _return, const TGetBackendConfigReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetBackendConfig(_return, req);
    }
    ifaces_[i]->GetBackendConfig(_return, req);
    return;
  }

  void GetExecutorMembership(TGetExecutorMembershipResp& _return, const TGetExecutorMembershipReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetExecutorMembership(_return, req);
    }
    ifaces_[i]->GetExecutorMembership(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class ImpalaHiveServer2ServiceConcurrentClientT : virtual public ImpalaHiveServer2ServiceIf, public  ::apache::hive::service::cli::thrift::TCLIServiceConcurrentClientT<Protocol_> {
 public:
  ImpalaHiveServer2ServiceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) :
     ::apache::hive::service::cli::thrift::TCLIServiceConcurrentClientT<Protocol_>(prot, prot) {}
  ImpalaHiveServer2ServiceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) :     ::apache::hive::service::cli::thrift::TCLIServiceConcurrentClientT<Protocol_>(iprot, oprot) {}
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void GetExecSummary(TGetExecSummaryResp& _return, const TGetExecSummaryReq& req);
  int32_t send_GetExecSummary(const TGetExecSummaryReq& req);
  void recv_GetExecSummary(TGetExecSummaryResp& _return, const int32_t seqid);
  void GetRuntimeProfile(TGetRuntimeProfileResp& _return, const TGetRuntimeProfileReq& req);
  int32_t send_GetRuntimeProfile(const TGetRuntimeProfileReq& req);
  void recv_GetRuntimeProfile(TGetRuntimeProfileResp& _return, const int32_t seqid);
  void PingImpalaHS2Service(TPingImpalaHS2ServiceResp& _return, const TPingImpalaHS2ServiceReq& req);
  int32_t send_PingImpalaHS2Service(const TPingImpalaHS2ServiceReq& req);
  void recv_PingImpalaHS2Service(TPingImpalaHS2ServiceResp& _return, const int32_t seqid);
  void CloseImpalaOperation(TCloseImpalaOperationResp& _return, const TCloseImpalaOperationReq& req);
  int32_t send_CloseImpalaOperation(const TCloseImpalaOperationReq& req);
  void recv_CloseImpalaOperation(TCloseImpalaOperationResp& _return, const int32_t seqid);
  void InitQueryContext(TInitQueryContextResp& _return);
  int32_t send_InitQueryContext();
  void recv_InitQueryContext(TInitQueryContextResp& _return, const int32_t seqid);
  void ExecutePlannedStatement( ::apache::hive::service::cli::thrift::TExecuteStatementResp& _return, const TExecutePlannedStatementReq& req);
  int32_t send_ExecutePlannedStatement(const TExecutePlannedStatementReq& req);
  void recv_ExecutePlannedStatement( ::apache::hive::service::cli::thrift::TExecuteStatementResp& _return, const int32_t seqid);
  void GetBackendConfig(TGetBackendConfigResp& _return, const TGetBackendConfigReq& req);
  int32_t send_GetBackendConfig(const TGetBackendConfigReq& req);
  void recv_GetBackendConfig(TGetBackendConfigResp& _return, const int32_t seqid);
  void GetExecutorMembership(TGetExecutorMembershipResp& _return, const TGetExecutorMembershipReq& req);
  int32_t send_GetExecutorMembership(const TGetExecutorMembershipReq& req);
  void recv_GetExecutorMembership(TGetExecutorMembershipResp& _return, const int32_t seqid);
};

typedef ImpalaHiveServer2ServiceConcurrentClientT< ::apache::thrift::protocol::TProtocol> ImpalaHiveServer2ServiceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#include "ImpalaHiveServer2Service.tcc"
#include "ImpalaService_types.tcc"

#endif
